{"status":"1","message":"OK","result":[{"SourceCode":"// File: @axie/contract-library/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    require(c / a == b);\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Since Solidity automatically asserts when dividing by 0,\r\n    // but we only need it to revert.\r\n    require(b > 0);\r\n    return a / b;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Same reason as `div`.\r\n    require(b > 0);\r\n    return a % b;\r\n  }\r\n\r\n  function ceilingDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    return add(div(a, b), mod(a, b) > 0 ? 1 : 0);\r\n  }\r\n\r\n  function subU64(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function addU8(uint8 a, uint8 b) internal pure returns (uint8 c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/access/HasAdmin.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract HasAdmin {\r\n  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\r\n  event AdminRemoved(address indexed _oldAdmin);\r\n\r\n  address public admin;\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  constructor() internal {\r\n    admin = msg.sender;\r\n    emit AdminChanged(address(0), admin);\r\n  }\r\n\r\n  function changeAdmin(address _newAdmin) external onlyAdmin {\r\n    require(_newAdmin != address(0));\r\n    emit AdminChanged(admin, _newAdmin);\r\n    admin = _newAdmin;\r\n  }\r\n\r\n  function removeAdmin() external onlyAdmin {\r\n    emit AdminRemoved(admin);\r\n    admin = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/chain/common/IValidator.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\ncontract IValidator {\r\n  event ValidatorAdded(uint256 indexed _id, address indexed _validator);\r\n  event ValidatorRemoved(uint256 indexed _id, address indexed _validator);\r\n  event ThresholdUpdated(\r\n    uint256 indexed _id,\r\n    uint256 indexed _numerator,\r\n    uint256 indexed _denominator,\r\n    uint256 _previousNumerator,\r\n    uint256 _previousDenominator\r\n  );\r\n\r\n  function isValidator(address _addr) public view returns (bool);\r\n  function getValidators() public view returns (address[] memory _validators);\r\n\r\n  function checkThreshold(uint256 _voteCount) public view returns (bool);\r\n}\r\n\r\n// File: contracts/chain/common/Validator.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n\r\ncontract Validator is IValidator {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => bool) validatorMap;\r\n  address[] public validators;\r\n  uint256 public validatorCount;\r\n\r\n  uint256 public num;\r\n  uint256 public denom;\r\n\r\n  constructor(address[] memory _validators, uint256 _num, uint256 _denom)\r\n    public\r\n  {\r\n    validators = _validators;\r\n    validatorCount = _validators.length;\r\n\r\n    for (uint256 _i = 0; _i < validatorCount; _i++) {\r\n      address _validator = _validators[_i];\r\n      validatorMap[_validator] = true;\r\n    }\r\n\r\n    num = _num;\r\n    denom = _denom;\r\n  }\r\n\r\n  function isValidator(address _addr)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return validatorMap[_addr];\r\n  }\r\n\r\n  function getValidators()\r\n    public\r\n    view\r\n    returns (address[] memory _validators)\r\n  {\r\n    _validators = validators;\r\n  }\r\n\r\n  function checkThreshold(uint256 _voteCount)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _voteCount.mul(denom) >= num.mul(validatorCount);\r\n  }\r\n\r\n  function _addValidator(uint256 _id, address _validator)\r\n    internal\r\n  {\r\n    require(!validatorMap[_validator]);\r\n\r\n    validators.push(_validator);\r\n    validatorMap[_validator] = true;\r\n    validatorCount++;\r\n\r\n    emit ValidatorAdded(_id, _validator);\r\n  }\r\n\r\n  function _removeValidator(uint256 _id, address _validator)\r\n    internal\r\n  {\r\n    require(isValidator(_validator));\r\n\r\n    uint256 _index;\r\n    for (uint256 _i = 0; _i < validatorCount; _i++) {\r\n      if (validators[_i] == _validator) {\r\n        _index = _i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    validatorMap[_validator] = false;\r\n    validators[_index] = validators[validatorCount - 1];\r\n    validators.pop();\r\n\r\n    validatorCount--;\r\n\r\n    emit ValidatorRemoved(_id, _validator);\r\n  }\r\n\r\n  function _updateQuorum(uint256 _id, uint256 _numerator, uint256 _denominator)\r\n    internal\r\n  {\r\n    require(_numerator <= _denominator);\r\n    uint256 _previousNumerator = num;\r\n    uint256 _previousDenominator = denom;\r\n\r\n    num = _numerator;\r\n    denom = _denominator;\r\n\r\n    emit ThresholdUpdated(\r\n      _id,\r\n      _numerator,\r\n      _denominator,\r\n      _previousNumerator,\r\n      _previousDenominator\r\n    );\r\n  }\r\n}\r\n\r\n// File: contracts/chain/mainchain/MainchainValidator.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Validator\r\n * @dev Simple validator contract\r\n */\r\ncontract MainchainValidator is Validator, HasAdmin {\r\n  uint256 nonce;\r\n\r\n  constructor(\r\n    address[] memory _validators,\r\n    uint256 _num,\r\n    uint256 _denom\r\n  ) Validator(_validators, _num, _denom) public {\r\n  }\r\n\r\n  function addValidators(address[] calldata _validators) external onlyAdmin {\r\n    for (uint256 _i; _i < _validators.length; ++_i) {\r\n      _addValidator(nonce++, _validators[_i]);\r\n    }\r\n  }\r\n\r\n  function removeValidator(address _validator) external onlyAdmin {\r\n    _removeValidator(nonce++, _validator);\r\n  }\r\n\r\n  function updateQuorum(uint256 _numerator, uint256 _denominator) external onlyAdmin {\r\n    _updateQuorum(nonce++, _numerator, _denominator);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"addValidators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteCount\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"denom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"updateQuorum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MainchainValidator","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000f224beff587362a88d859e899d0d80c080e1e81200000000000000000000000011360eacdedd59bc433afad4fc8f0417d1fbebab00000000000000000000000070bb1fb41c8c42f6ddd53a708e2b82209495e455","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9217b71e011b78ed60577c815b7ca1ec1005ba60c5cefa6e96f90cc351002969"}]}