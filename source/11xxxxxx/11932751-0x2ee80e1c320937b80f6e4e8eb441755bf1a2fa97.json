{"status":"1","message":"OK","result":[{"SourceCode":"/**                  ____ \r\n                  .'* *.'\r\n               __/_*_*(_\r\n              / _______ \\\r\n             _\\_)/___\\(_/_ \r\n            / _((\\- -/))_ \\\r\n            \\ \\())(-)(()/ /\r\n             ' \\(((()))/ '\r\n            / ' \\)).))/ ' \\\r\n           / _ \\ - | - /_  \\\r\n          (   ( .;''';. .'  )\r\n          _\\\"__ /    )\\ __\"/_\r\n            \\/  \\   ' /  \\/\r\n             .'  '...' ' )\r\n              / /  |  \\ \\\r\n             / .   .   . \\\r\n            /   .     .   \\\r\n           /   /   |   \\   \\\r\n         .'   /    b    '.  '.\r\n     _.-'    /     Bb     '-. '-._ \r\n _.-'       |      BBb       '-.  '-. \r\n(___________\\____.dBBBb.________)____)\r\n    \r\n╔╦╗┌─┐┌─┐┬┌─┐  ╔╗ ┌─┐┬  ┌─┐┌┐┌┌─┐┌─┐┬─┐\r\n║║║├─┤│ ┬││    ╠╩╗├─┤│  ├─┤││││  ├┤ ├┬┘\r\n╩ ╩┴ ┴└─┘┴└─┘  ╚═╝┴ ┴┴─┘┴ ┴┘└┘└─┘└─┘┴└─\r\n     https://magicbalancer.org/\r\n     \r\n*/\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.7.6;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address payable owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = payable(msg.sender);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address payable newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface MGBToken {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address _owner) external returns (uint256 balance);\r\n    function mint(address wallet, address buyer, uint256 tokenAmount) external;\r\n    function showMyTokenBalance(address addr) external;\r\n}\r\n\r\ncontract Presale is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n  \r\n    mapping(address=>uint256) public ownerAddresses;  \r\n    mapping(address=>uint256) public BuyerList;\r\n    address public _burnaddress = 0x000000000000000000000000000000000000dEaD;\r\n    address payable[] owners;\r\n\r\n    uint256 public MAX_BUY_LIMIT = 3000000000000000000;\r\n    uint256 public majorOwnerShares = 100;\r\n    uint public    referralReward = 10;\r\n    uint256 public coinPercentage = 56;\r\n    uint256 public rate = 999;\r\n    uint256 public weiRaised;\r\n  \r\n    bool public isPresaleStopped = false;\r\n  \r\n    bool public isPresalePaused = false;\r\n    \r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event Transfered(address indexed purchaser, address indexed referral, uint256 amount);\r\n\r\n  \r\n    MGBToken public token;\r\n    \r\n    \r\n    constructor(address payable _walletMajorOwner) \r\n    {\r\n        token = MGBToken(0xF4f3d6A60765bF705B27716f50FccBa5F0eA0CA1); \r\n        startTime = 1614340592 ;   \r\n        endTime = startTime + 90 days;\r\n        require(endTime >= startTime);\r\n        require(_walletMajorOwner != address(0));\r\n        \r\n        ownerAddresses[_walletMajorOwner] = majorOwnerShares;\r\n        \r\n        owners.push(_walletMajorOwner);\r\n        \r\n        owner = _walletMajorOwner;\r\n    }\r\n    \r\n    fallback() external payable {\r\n        buy(msg.sender, owner);\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function isContract(address _addr) public view returns (bool _isContract){\r\n        uint32 size;\r\n        assembly {\r\n        size := extcodesize(_addr)}\r\n        \r\n        return (size > 0);\r\n    }\r\n    \r\n    function buy(address beneficiary, address payable referral) public payable\r\n    {\r\n        require (isPresaleStopped != true, 'Presale is stopped');\r\n        require (isPresalePaused != true, 'Presale is paused');\r\n        require ( !(isContract(msg.sender)), 'Bots not allowed');\r\n        require(beneficiary != address(0), 'user asking for tokens sent to be on 0 address');\r\n        require(validPurchase(), 'its not a valid purchase');\r\n        require(BuyerList[msg.sender] < MAX_BUY_LIMIT, 'MAX_BUY_LIMIT Achieved already for this wallet');\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount <3000000000000000001 , 'MAX_BUY_LIMIT is 3 ETH'); \r\n        uint256 tokens = weiAmount.mul(rate);\r\n        \r\n        uint256 weiMinusfee = msg.value - (msg.value * referralReward / 100);\r\n        uint256 refReward = msg.value * referralReward / 100;\r\n        \r\n        weiRaised = weiRaised.add(weiAmount);\r\n        splitFunds(referral, refReward);\r\n        \r\n        token.transfer(beneficiary,tokens);\r\n         uint partnerCoins = tokens.mul(coinPercentage);\r\n        partnerCoins = partnerCoins.div(100);\r\n        \r\n        BuyerList[msg.sender] = BuyerList[msg.sender].add(msg.value);\r\n        \r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds(partnerCoins, weiMinusfee);\r\n    }\r\n    \r\n    function splitFunds(address payable _b, uint256 amount) internal {\r\n\r\n        _b.transfer(amount);\r\n        \r\n         emit Transfered(msg.sender, _b, amount);\r\n    }\r\n    \r\n    function forwardFunds(uint256 partnerTokenAmount, uint256 weiMinusfee) internal {\r\n      for (uint i=0;i<owners.length;i++)\r\n      {\r\n         uint percent = ownerAddresses[owners[i]];\r\n         uint amountToBeSent = weiMinusfee.mul(percent);\r\n         amountToBeSent = amountToBeSent.div(100);\r\n         owners[i].transfer(amountToBeSent);\r\n         \r\n         if (owners[i]!=owner &&  ownerAddresses[owners[i]]>0)\r\n         {\r\n             token.transfer(owners[i],partnerTokenAmount);\r\n         }\r\n      }\r\n    }\r\n \r\n    function addLiquidityPool(address payable partner) public onlyOwner {\r\n\r\n        require(partner != address(0));\r\n        require(ownerAddresses[owner] >=78);\r\n        require(ownerAddresses[partner] == 0);\r\n        owners.push(partner);\r\n        ownerAddresses[partner] = 78;\r\n        uint majorOwnerShare = ownerAddresses[owner];\r\n        ownerAddresses[owner] = majorOwnerShare.sub(78);\r\n    }\r\n\r\n    function validPurchase() internal returns (bool) {\r\n        bool withinPeriod = block.timestamp >= startTime && block.timestamp <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    function hasEnded() public view returns (bool) {\r\n        return block.timestamp > endTime;\r\n    }\r\n  \r\n    function showMyTokenBalance(address myAddress) public returns (uint256 tokenBalance) {\r\n       tokenBalance = token.balanceOf(myAddress);\r\n    }\r\n\r\n    function setEndDate(uint256 daysToEndFromToday) public onlyOwner returns(bool) {\r\n        daysToEndFromToday = daysToEndFromToday * 1 days;\r\n        endTime = block.timestamp + daysToEndFromToday;\r\n        return true;\r\n    }\r\n\r\n    function setPriceRate(uint256 newPrice) public onlyOwner returns (bool) {\r\n        rate = newPrice;\r\n         return true;\r\n    }\r\n    \r\n    function setReferralReward(uint256 newReward) public onlyOwner returns (bool) {\r\n        referralReward = newReward;\r\n         return true;\r\n    }\r\n\r\n    function pausePresale() public onlyOwner returns(bool) {\r\n        isPresalePaused = true;\r\n         return isPresalePaused;\r\n    }\r\n\r\n    function resumePresale() public onlyOwner returns (bool) {\r\n        isPresalePaused = false;\r\n        return !isPresalePaused;\r\n    }\r\n\r\n    function stopPresale() public onlyOwner returns (bool) {\r\n        isPresaleStopped = true;\r\n        return true;\r\n    }\r\n    function BurnUnsoldTokens() public onlyOwner {\r\n        uint256 unsold = token.balanceOf(address(this));\r\n        token.transfer(_burnaddress,unsold);\r\n    }\r\n    \r\n    function startPresale() public onlyOwner returns (bool) {\r\n        isPresaleStopped = false;\r\n        startTime = block.timestamp; \r\n        return true;\r\n    }\r\n    \r\n    function tokensRemainingForSale(address contractAddress) public returns (uint balance) {\r\n        balance = token.balanceOf(contractAddress);\r\n    }\r\n\r\n    function checkOwnerShare (address owner) public view onlyOwner returns (uint) {\r\n        uint share = ownerAddresses[owner];\r\n        return share;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletMajorOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfered\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BurnUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BuyerList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUY_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"checkOwnerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isContract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresalePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumePresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysToEndFromToday\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"setReferralReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"}],\"name\":\"showMyTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract MGBToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"tokensRemainingForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Presale","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"0000000000000000000000006142174ede6867b4ed53043a6531de25936c4930","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://90c7456ecb41a1afd76224051227c9d8777a7a0c685d1c79363d396d88144aef"}]}