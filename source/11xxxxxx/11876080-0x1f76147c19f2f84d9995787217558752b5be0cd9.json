{"status":"1","message":"OK","result":[{"SourceCode":"// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/amm/ChainlinkEthUsdProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\nConverts prices from ETH/USD and <ASSET>/ETH oracles into <ASSET>/USD price\r\naccording to specifyed decimal places\r\n */\r\ncontract ChainlinkEthUsdProxy is AggregatorV3Interface {\r\n    uint8 public override decimals;\r\n    string public override description;\r\n    uint256 public override version;\r\n\r\n    AggregatorV3Interface ethUsdOracle;\r\n    AggregatorV3Interface assetEthOracle;\r\n\r\n    int256 priceDivisor;\r\n\r\n    constructor(\r\n        address _ethUsdOracleAddress,\r\n        address _assetEthOracleAddress,\r\n        uint8 _decimals\r\n    ) public {\r\n        ethUsdOracle = AggregatorV3Interface(_ethUsdOracleAddress);\r\n        assetEthOracle = AggregatorV3Interface(_assetEthOracleAddress);\r\n\r\n        decimals = _decimals;\r\n        require(\r\n            ethUsdOracle.decimals() + assetEthOracle.decimals() >= decimals,\r\n            \"Decimals is too large\"\r\n        );\r\n        uint8 netDecimals =\r\n            ethUsdOracle.decimals() + assetEthOracle.decimals() - decimals;\r\n        require(netDecimals <= 36, \"Combined decimals are too large\");\r\n        priceDivisor = int256(10)**netDecimals;\r\n    }\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        require(false, \"Method not implemented\");\r\n    }\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        (, int256 ethUsdPrice, , , ) = ethUsdOracle.latestRoundData();\r\n        (, int256 assetEthPrice, , , ) = assetEthOracle.latestRoundData();\r\n\r\n        require(ethUsdPrice > 0, \"ETH/USD price is 0\");\r\n        require(assetEthPrice > 0, \"ASSET/ETH price is 0\");\r\n\r\n        answer = (ethUsdPrice * assetEthPrice) / priceDivisor;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethUsdOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetEthOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkEthUsdProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000e572cef69f43c2e488b33924af04bdace19079cf0000000000000000000000000000000000000000000000000000000000000008","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1c588c3180ae61c8540367e829d2b4df8a1a5ae26203733cff9b97cbbfea8a19"}]}