{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/F/Projects/prestigeclub/contractruffle/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    \\r\\n    function mint(uint256 amount) external;\\r\\n}\"\r\n    },\r\n    \"/F/Projects/prestigeclub/contractruffle/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    address _sellingContract; //TODO Make private?\\r\\n\\r\\n    // event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        // emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    // function renounceOwnership() public virtual onlyOwner {\\r\\n        // emit OwnershipTransferred(_owner, address(0));\\r\\n        // _owner = address(0);\\r\\n    // }\\r\\n\\r\\n    function setSellingContract(address sc) public onlyOwner {\\r\\n        _sellingContract = sc;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        // emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/F/Projects/prestigeclub/contractruffle/contracts/PrestigeClubv2.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\r\\n\\r\\nimport \\\"./libraries/PrestigeClubCalculations.sol\\\";\\r\\nimport \\\"./libraries/SafeMath112.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n//Restrictions:\\r\\n//only 2^32 Users\\r\\n//Maximum of (2^104 / 10^18 Ether) investment. Theoretically 20 Trl Ether, practically 100000000000 Ether compiles\\r\\ncontract PrestigeClub is Ownable() {\\r\\n\\r\\n    using SafeMath112 for uint112;\\r\\n\\r\\n    //User Object which stores all data associated with a specific address\\r\\n    struct User {\\r\\n        uint112 deposit; //amount a User has paid in. Note: Deposits can not removed, since withdrawals are only possible on payout\\r\\n        uint112 payout; //Generated revenue\\r\\n        uint32 position; //The position (a incrementing int value). Used for calculation of the streamline\\r\\n        uint8 qualifiedPools;  //Number of Pools and DownlineBonuses, which the User has qualified for respectively\\r\\n        uint8 downlineBonus;\\r\\n        address referer;\\r\\n        address[] referrals;\\r\\n\\r\\n        uint112 directSum;   //Sum of deposits of all direct referrals\\r\\n        uint40 lastPayout;  //Timestamp of the last calculated Payout\\r\\n\\r\\n        uint40 lastPayedOut; //Point in time, when the last Payout was made\\r\\n\\r\\n        uint112[5] downlineVolumes;  //Used for downline bonus calculation, correspondings to logical mapping  downlineBonusStage (+ 0) => sum of deposits of users directly or indirectly referred in given downlineBonusStage\\r\\n    }\\r\\n    \\r\\n    event NewDeposit(address indexed addr, uint112 amount);\\r\\n    event PoolReached(address indexed addr, uint8 pool);\\r\\n    // event DownlineBonusStageReached(address indexed adr, uint8 stage);\\r\\n    // event Referral(address indexed addr, address indexed referral);\\r\\n    \\r\\n    event Payout(address indexed addr, uint112 interest, uint112 direct, uint112 pool, uint112 downline, uint40 dayz); \\r\\n    \\r\\n    event Withdraw(address indexed addr, uint112 amount);\\r\\n    \\r\\n    mapping (address => User) public users;\\r\\n    //userList is basically a mapping position(int) => address\\r\\n    address[] public userList;\\r\\n\\r\\n    uint32 public lastPosition; //= 0\\r\\n    \\r\\n    uint128 public depositSum; //= 0 //Pos 4\\r\\n    \\r\\n    Pool[8] public pools;\\r\\n    \\r\\n    struct Pool {\\r\\n        uint112 minOwnInvestment;\\r\\n        uint8 minDirects;\\r\\n        uint112 minSumDirects;\\r\\n        uint8 payoutQuote; //ppm\\r\\n        uint32 numUsers;\\r\\n    }\\r\\n\\r\\n    //Poolstates are importing for calculating the pool payout for every seperate day.\\r\\n    //Since the number of Deposits and Users in every pool change every day, but payouts are only calculated if they need to be calculated, their history has to be stored\\r\\n    PoolState[] public states;\\r\\n\\r\\n    struct PoolState {\\r\\n        uint128 totalDeposits;\\r\\n        uint32 totalUsers;\\r\\n        uint32[8] numUsers;\\r\\n    }\\r\\n\\r\\n    //Downline bonus is a bonus, which users get when they reach a certain pool. The Bonus is calculated based on the sum of the deposits of all Users delow them in the structure\\r\\n    DownlineBonusStage[4] downlineBonuses;\\r\\n    \\r\\n    struct DownlineBonusStage {\\r\\n        uint32 minPool;\\r\\n        uint64 payoutQuote; //ppm\\r\\n    }\\r\\n    \\r\\n    uint40 public pool_last_draw;\\r\\n\\r\\n    IERC20 peth;\\r\\n    \\r\\n    constructor(address erc20Adr) public {\\r\\n \\r\\n        uint40 timestamp = uint40(block.timestamp);\\r\\n        pool_last_draw = timestamp - (timestamp % payout_interval) - (2 * payout_interval);\\r\\n\\r\\n        peth = IERC20(erc20Adr);\\r\\n\\r\\n        //Definition of the Pools and DownlineBonuses with their respective conditions and percentages. \\r\\n        //Note, values are not final, adapted for testing purposes\\r\\n\\r\\n        //Prod values\\r\\n        pools[0] = Pool(3 ether, 1, 3 ether, 130, 0);\\r\\n        pools[1] = Pool(15 ether, 3, 5 ether, 130, 0);\\r\\n        pools[2] = Pool(15 ether, 4, 44 ether, 130, 0);\\r\\n        pools[3] = Pool(30 ether, 10, 105 ether, 130, 0);\\r\\n        pools[4] = Pool(45 ether, 15, 280 ether, 130, 0);\\r\\n        pools[5] = Pool(60 ether, 20, 530 ether, 130, 0);\\r\\n        pools[6] = Pool(150 ether, 20, 1470 ether, 80, 0);\\r\\n        pools[7] = Pool(300 ether, 20, 2950 ether, 80, 0);\\r\\n\\r\\n        downlineBonuses[0] = DownlineBonusStage(3, 50);\\r\\n        downlineBonuses[1] = DownlineBonusStage(4, 100);\\r\\n        downlineBonuses[2] = DownlineBonusStage(5, 160);\\r\\n        downlineBonuses[3] = DownlineBonusStage(6, 210);\\r\\n        \\r\\n        //Testing Pools\\r\\n        // pools[0] = Pool(1000 wei, 1, 1000 wei, 130, 0); \\r\\n        // pools[1] = Pool(1000 wei, 1, 1000 wei, 130, 0);\\r\\n        // pools[2] = Pool(1000 wei, 1, 10000 wei, 130, 0);\\r\\n        // pools[3] = Pool(2 ether, 1, 10000 wei, 130, 0);\\r\\n        // pools[4] = Pool(2 ether, 1, 10000 wei, 130, 0);\\r\\n        // pools[5] = Pool(2 ether, 1, 10000 wei, 130, 0);\\r\\n        // pools[6] = Pool(2 ether, 1, 10000 wei, 130, 0);\\r\\n        // pools[7] = Pool(5 ether, 5, 10 ether, 80, 0);\\r\\n        \\r\\n        // //Test Values\\r\\n        // downlineBonuses[0] = DownlineBonusStage(3, 100);\\r\\n        // downlineBonuses[1] = DownlineBonusStage(4, 160);\\r\\n        // downlineBonuses[2] = DownlineBonusStage(5, 210);\\r\\n        // downlineBonuses[3] = DownlineBonusStage(6, 260);\\r\\n\\r\\n        userList.push(address(0));\\r\\n        \\r\\n    }\\r\\n    \\r\\n    uint112 internal minDeposit = 0.2 ether; \\r\\n    \\r\\n    uint40 constant internal payout_interval = 1 days;\\r\\n    \\r\\n    //Investment function for new deposits\\r\\n    function recieve(uint112 amount) public {\\r\\n        User storage user = users[msg.sender];\\r\\n        require((user.deposit * 20 / 19) >= minDeposit || amount >= minDeposit, \\\"Minimum deposit value not reached\\\");\\r\\n        \\r\\n        address sender = msg.sender;\\r\\n\\r\\n        uint112 value = amount.mul(19).div(20);\\r\\n\\r\\n        //Transfer peth\\r\\n        peth.transferFrom(sender, address(this), amount);\\r\\n\\r\\n        bool userExists = user.position != 0;\\r\\n        \\r\\n        //Trigger calculation of next Pool State, if 1 day has passed\\r\\n        triggerCalculation();\\r\\n\\r\\n        // Create a position for new accounts\\r\\n        if(!userExists){\\r\\n            lastPosition++;\\r\\n            user.position = lastPosition;\\r\\n            user.lastPayout = (pool_last_draw + 1);\\r\\n            userList.push(sender);\\r\\n        }\\r\\n\\r\\n        address referer = user.referer; //can put outside because referer is always set since setReferral() gets called before recieve() in recieve(address)\\r\\n\\r\\n        if(referer != address(0)){\\r\\n            updateUpline(sender, referer, value);\\r\\n        }\\r\\n\\r\\n        //Update Payouts\\r\\n        if(userExists){\\r\\n            updatePayout(sender);\\r\\n        }\\r\\n\\r\\n        user.deposit = user.deposit.add(value);\\r\\n        \\r\\n        //Transfer fee\\r\\n        peth.transfer(owner(), (amount - value));\\r\\n        \\r\\n        emit NewDeposit(sender, value);\\r\\n        \\r\\n        updateUserPool(sender);\\r\\n        updateDownlineBonusStage(sender);\\r\\n        if(referer != address(0)){\\r\\n            users[referer].directSum = users[referer].directSum.add(value);\\r\\n\\r\\n            updateUserPool(referer);\\r\\n            updateDownlineBonusStage(referer);\\r\\n        }\\r\\n        \\r\\n        depositSum = depositSum + value; //Won´t do an overflow since value is uint112 and depositSum 128\\r\\n\\r\\n    }\\r\\n    \\r\\n    \\r\\n    //New deposits with referral address\\r\\n    function recieve(uint112 amount, address referer) public {\\r\\n        \\r\\n        _setReferral(referer);\\r\\n        recieve(amount);\\r\\n        \\r\\n    }\\r\\n\\r\\n    //Updating the payouts and stats for the direct and every User which indirectly referred User reciever\\r\\n    //adr = Address of the first referer , addition = new deposit value\\r\\n    function updateUpline(address reciever, address adr, uint112 addition) private {\\r\\n        \\r\\n        address current = adr;\\r\\n        uint8 bonusStage = users[reciever].downlineBonus;\\r\\n        \\r\\n        uint8 downlineLimitCounter = 30;\\r\\n        \\r\\n        while(current != address(0) && downlineLimitCounter > 0){\\r\\n\\r\\n            updatePayout(current);\\r\\n\\r\\n            users[current].downlineVolumes[bonusStage] = users[current].downlineVolumes[bonusStage].add(addition);\\r\\n            uint8 currentBonus = users[current].downlineBonus;\\r\\n            if(currentBonus > bonusStage){\\r\\n                bonusStage = currentBonus;\\r\\n            }\\r\\n\\r\\n            current = users[current].referer;\\r\\n            downlineLimitCounter--;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    \\r\\n    //Updates the payout amount for given user\\r\\n    function updatePayout(address adr) private {\\r\\n        \\r\\n        uint40 dayz = (uint40(block.timestamp) - users[adr].lastPayout) / (payout_interval);\\r\\n        if(dayz >= 1){\\r\\n            \\r\\n            // Calculate Base Payouts\\r\\n\\r\\n            // Interest Payout\\r\\n            uint112 deposit = users[adr].deposit;\\r\\n            uint8 quote;\\r\\n            if(deposit >= 30 ether){\\r\\n                quote = 15;\\r\\n            }else{\\r\\n                quote = 10;\\r\\n            }\\r\\n            \\r\\n            uint112 interestPayout = deposit.mul(quote) / 10000;\\r\\n\\r\\n            uint112 poolpayout = getPoolPayout(adr, dayz);\\r\\n\\r\\n            uint112 directsPayout = getDirectsPayout(adr);\\r\\n\\r\\n            uint112 downlineBonusAmount = getDownlinePayout(adr);\\r\\n            \\r\\n            uint112 sum = interestPayout.add(directsPayout).add(downlineBonusAmount); \\r\\n            sum = (sum.mul(dayz)).add(poolpayout);\\r\\n            \\r\\n            users[adr].payout = users[adr].payout.add(sum);\\r\\n            users[adr].lastPayout += (payout_interval * dayz);\\r\\n            \\r\\n            emit Payout(adr, interestPayout, directsPayout, poolpayout, downlineBonusAmount, dayz);\\r\\n\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getPoolPayout(address adr, uint40 dayz) public view returns (uint112){\\r\\n        return PrestigeClubCalculations.getPoolPayout(users[adr], dayz, pools, states);\\r\\n    }\\r\\n\\r\\n    function getDownlinePayout(address adr) public view returns (uint112){\\r\\n        return PrestigeClubCalculations.getDownlinePayout(users[adr], downlineBonuses);\\r\\n    }\\r\\n\\r\\n    function getDirectsPayout(address adr) public view returns (uint112) {\\r\\n        \\r\\n        // Calculate Directs Payouts\\r\\n       return users[adr].directSum.mul(5) / 10000;\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function triggerCalculation() public { \\r\\n        if(block.timestamp > pool_last_draw + payout_interval){\\r\\n            pushPoolState();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //Gets called every 24 hours to push new PoolState\\r\\n    function pushPoolState() private {\\r\\n        uint32[8] memory temp;\\r\\n        for(uint8 i = 0 ; i < 8 ; i++){\\r\\n            temp[i] = pools[i].numUsers;\\r\\n        }\\r\\n        states.push(PoolState(depositSum, lastPosition, temp));\\r\\n        pool_last_draw += payout_interval;\\r\\n    }\\r\\n\\r\\n    //updateUserPool and updateDownlineBonusStage check if the requirements for the next pool or stage are reached, and if so, increment the counter in his User struct \\r\\n    function updateUserPool(address adr) private {\\r\\n        \\r\\n        if(users[adr].qualifiedPools < pools.length){\\r\\n            \\r\\n            uint8 poolnum = users[adr].qualifiedPools;\\r\\n            \\r\\n            uint112 sumDirects = users[adr].directSum;\\r\\n            \\r\\n            //Check if requirements for next pool are met\\r\\n            if(users[adr].deposit >= pools[poolnum].minOwnInvestment && users[adr].referrals.length >= pools[poolnum].minDirects && sumDirects >= pools[poolnum].minSumDirects){\\r\\n                users[adr].qualifiedPools = poolnum + 1;\\r\\n                pools[poolnum].numUsers++;\\r\\n                \\r\\n                emit PoolReached(adr, poolnum + 1);\\r\\n                \\r\\n                updateUserPool(adr);\\r\\n            }\\r\\n            \\r\\n        }\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function updateDownlineBonusStage(address adr) private {\\r\\n\\r\\n        User storage user = users[adr];\\r\\n        uint8 bonusstage = user.downlineBonus;\\r\\n\\r\\n        if(bonusstage < downlineBonuses.length){\\r\\n\\r\\n            //Check if requirements for next stage are met\\r\\n            if(user.qualifiedPools >= downlineBonuses[bonusstage].minPool){\\r\\n                user.downlineBonus += 1;\\r\\n                \\r\\n                //Update data in upline\\r\\n                uint112 value = user.deposit;  //Value without current stage, since that must not be subtracted\\r\\n\\r\\n                for(uint8 i = 0 ; i <= bonusstage ; i++){\\r\\n                    value = value.add(user.downlineVolumes[i]);\\r\\n                }\\r\\n\\r\\n                // uint8 previousBonusStage = bonusstage;\\r\\n                uint8 currentBonusStage = bonusstage + 1;\\r\\n                uint8 lastBonusStage = bonusstage;\\r\\n\\r\\n                address current = user.referer;\\r\\n                while(current != address(0)){\\r\\n\\r\\n                    User storage currentUser = users[current];\\r\\n                    currentUser.downlineVolumes[lastBonusStage] = currentUser.downlineVolumes[lastBonusStage].sub(value);\\r\\n                    currentUser.downlineVolumes[currentBonusStage] = currentUser.downlineVolumes[currentBonusStage].add(value);\\r\\n\\r\\n                    uint8 currentDB = currentUser.downlineBonus;\\r\\n                    if(currentDB > currentBonusStage){\\r\\n                        currentBonusStage = currentDB;\\r\\n                    }\\r\\n                    if(currentDB > lastBonusStage){\\r\\n                        lastBonusStage = currentDB;\\r\\n                    }\\r\\n\\r\\n                    if(lastBonusStage == currentBonusStage){\\r\\n                        break;\\r\\n                    }\\r\\n\\r\\n                    current = users[current].referer;\\r\\n                }\\r\\n                \\r\\n                updateDownlineBonusStage(adr);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    \\r\\n    //Endpoint to withdraw payouts\\r\\n    function withdraw(uint112 amount) public {\\r\\n\\r\\n        User storage user = users[msg.sender];\\r\\n        require(user.lastPayedOut + 12 hours < block.timestamp, \\\"10\\\");\\r\\n        require(amount < user.deposit.mul(3), \\\"11\\\");\\r\\n\\r\\n        triggerCalculation();\\r\\n        updatePayout(msg.sender);\\r\\n\\r\\n        require(user.payout >= amount, \\\"Not enough payout available\\\");\\r\\n        \\r\\n        uint112 transfer = amount * 19 / 20;\\r\\n        \\r\\n        user.payout -= amount;\\r\\n\\r\\n        user.lastPayedOut = uint40(block.timestamp);\\r\\n\\r\\n        //Mint if necessary\\r\\n        if(peth.balanceOf(address(this)) < amount){\\r\\n            peth.mint(uint256(amount));\\r\\n        }\\r\\n        \\r\\n        peth.transfer(msg.sender, transfer);\\r\\n        \\r\\n        peth.transfer(owner(), (amount - transfer));\\r\\n        \\r\\n        emit Withdraw(msg.sender, amount);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function _setReferral(address referer) private {\\r\\n        \\r\\n        User storage user = users[msg.sender];\\r\\n        if(user.referer == referer){\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        if(user.position != 0 && user.position < users[referer].position) {\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        require(user.referer == address(0), \\\"Referer already set\\\");\\r\\n        require(users[referer].position > 0, \\\"Referer doesnt exist\\\");\\r\\n        require(msg.sender != referer, \\\"Referer is self\\\");\\r\\n        \\r\\n        users[referer].referrals.push(msg.sender);\\r\\n        user.referer = referer;\\r\\n\\r\\n        if(user.deposit > 0){\\r\\n            users[referer].directSum = users[referer].directSum.add(user.deposit);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function setLimits(uint112 _minDeposit) public onlyOwner {\\r\\n        minDeposit = _minDeposit;\\r\\n    }\\r\\n\\r\\n    //Data Import Logic\\r\\n    function reCalculateImported(uint32 _lastPosition, uint112 _depositSum) public onlyOwner {\\r\\n        // uint40 time = pool_last_draw;\\r\\n        // for(uint64 i = from ; i < to + 1 ; i++){\\r\\n            // address adr = userList[i];\\r\\n            // users[adr].payout = 0;\\r\\n            // users[adr].lastPayout = time;\\r\\n            // updatePayout(adr);\\r\\n        // }\\r\\n        lastPosition = _lastPosition;\\r\\n        depositSum = _depositSum;\\r\\n    }\\r\\n    \\r\\n    function _import(address[] memory _sender, uint112[] memory deposit, address[] memory _referer, uint32 startposition, \\r\\n        uint8[] memory downlineBonus, uint112[5][] memory volumes) public onlyOwner {\\r\\n\\r\\n        require(userList.length == startposition, \\\"Positions wrong\\\");\\r\\n\\r\\n        uint40 time = pool_last_draw + (2 * payout_interval);\\r\\n\\r\\n        for(uint32 i = 0 ; i < _sender.length ; i++){\\r\\n\\r\\n            address sender = _sender[i];\\r\\n            address referer = _referer[i];\\r\\n            User storage user = users[sender];\\r\\n\\r\\n            require(user.deposit == 0, \\\"Account exists already\\\");\\r\\n\\r\\n            // Create a position for new accounts\\r\\n            user.position = startposition + i;\\r\\n            user.lastPayout = time;//pool_last_draw;\\r\\n            userList.push(sender);\\r\\n\\r\\n            if(referer != address(0)){\\r\\n\\r\\n                users[referer].referrals.push(sender);\\r\\n                user.referer = referer;\\r\\n            }\\r\\n\\r\\n            user.deposit = deposit[i];\\r\\n\\r\\n            user.downlineBonus = downlineBonus[i];\\r\\n            user.downlineVolumes = volumes[i];\\r\\n            \\r\\n            updateUserPool(sender);\\r\\n            \\r\\n            if(referer != address(0)){\\r\\n                \\r\\n                users[referer].directSum += deposit[i];\\r\\n        \\r\\n                updateUserPool(referer);\\r\\n            }\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPeth(address erc20adr) external onlyOwner {\\r\\n        peth = IERC20(erc20adr);\\r\\n    }\\r\\n\\r\\n    //0.44 KB\\r\\n    function setPool(uint8 index, uint112 minOwnInvestment, uint8 minDirects, uint112 minSumDirects, uint8 payoutQuote) external onlyOwner {\\r\\n        Pool storage pool = pools[index];\\r\\n        pool.minDirects = minDirects;\\r\\n        pool.minSumDirects = minSumDirects;\\r\\n        pool.payoutQuote = payoutQuote;\\r\\n        pool.minOwnInvestment = minOwnInvestment;\\r\\n    }\\r\\n\\r\\n    function getDetailedUserInfos(address adr) public view returns (address[] memory /*referrals */, uint112[5] memory /*volumes*/) {\\r\\n        return (users[adr].referrals, users[adr].downlineVolumes);\\r\\n    }\\r\\n\\r\\n    function getDownline(address adr) public view returns (uint112, uint128){ \\r\\n        return PrestigeClubCalculations.getDownline(users, adr);\\r\\n    }\\r\\n    \\r\\n    //DEBUGGING\\r\\n    //Used for extraction of User data in case of something bad happening and fund reversal needed.\\r\\n    function getUserList() public view returns (address[] memory){ \\r\\n        return userList;\\r\\n    }\\r\\n\\r\\n    function sellAccount(address from, address to) public { \\r\\n\\r\\n        require(msg.sender == owner() || msg.sender == _sellingContract, \\\"Not authorized\\\");\\r\\n\\r\\n        User storage userFrom = users[from];\\r\\n\\r\\n        require(userFrom.deposit > 0, \\\"User does not exist\\\");\\r\\n        require(users[to].deposit == 0, \\\"User already exists\\\");\\r\\n\\r\\n        userList[userFrom.position] = to;\\r\\n\\r\\n        address referer = userFrom.referer;\\r\\n        if(referer != address(0)){\\r\\n            address[] storage arr = users[referer].referrals;\\r\\n            for(uint16 i = 0 ; i < arr.length ; i++){\\r\\n                if(arr[i] == from){\\r\\n                    users[referer].referrals[i] = to;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for(uint16 i = 0 ; i < users[from].referrals.length ; i++){\\r\\n            users[userFrom.referrals[i]].referer = to;\\r\\n        }\\r\\n\\r\\n        users[to] = userFrom;\\r\\n        delete users[from];\\r\\n\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/F/Projects/prestigeclub/contractruffle/contracts/libraries/PrestigeClubCalculations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"./SafeMath112.sol\\\";\\r\\nimport \\\"../PrestigeClubv2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary PrestigeClubCalculations {\\r\\n\\r\\n    using SafeMath112 for uint112;\\r\\n\\r\\n    function getPoolPayout(PrestigeClub.User storage user,  uint40 dayz, PrestigeClub.Pool[8] storage pools, PrestigeClub.PoolState[] storage states) public view returns (uint112){\\r\\n\\r\\n        uint40 length = (uint40)(states.length);\\r\\n\\r\\n        uint112 poolpayout = 0;\\r\\n\\r\\n        if(user.qualifiedPools > 0){\\r\\n            for(uint40 day = length - dayz ; day < length ; day++){\\r\\n\\r\\n\\r\\n                uint112 numUsers = states[day].totalUsers;\\r\\n                uint112 streamline = uint112(uint112(states[day].totalDeposits).mul(numUsers.sub(user.position))).div(numUsers);\\r\\n\\r\\n                uint112 payout_day = 0;\\r\\n                uint32 stateNumUsers = 0;\\r\\n                for(uint8 j = 0 ; j < user.qualifiedPools ; j++){\\r\\n                    uint112 pool_base = streamline.mul(pools[j].payoutQuote) / 1000000;\\r\\n\\r\\n                    stateNumUsers = states[day].numUsers[j];\\r\\n\\r\\n                    if(stateNumUsers != 0){\\r\\n                        payout_day += pool_base.div(stateNumUsers);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                poolpayout = poolpayout.add(payout_day);\\r\\n\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return poolpayout;\\r\\n    }\\r\\n\\r\\n    function getDownlinePayout(PrestigeClub.User storage user, PrestigeClub.DownlineBonusStage[4] storage downlineBonuses) public view returns (uint112){\\r\\n\\r\\n        //Calculate Downline Bonus\\r\\n        uint112 downlinePayout = 0;\\r\\n        \\r\\n        uint8 downlineBonus = user.downlineBonus;\\r\\n        \\r\\n        if(downlineBonus > 0){\\r\\n            \\r\\n            uint64 ownPercentage = downlineBonuses[downlineBonus - 1].payoutQuote;\\r\\n\\r\\n            for(uint8 i = 0 ; i < downlineBonus; i++){\\r\\n\\r\\n                uint64 quote = 0;\\r\\n                if(i > 0){\\r\\n                    quote = downlineBonuses[i - 1].payoutQuote;\\r\\n                }\\r\\n\\r\\n                uint64 percentage = ownPercentage - quote;\\r\\n                if(percentage > 0){ //Requiring positivity and saving gas for 0, since that returns 0\\r\\n\\r\\n                    downlinePayout = downlinePayout.add(user.downlineVolumes[i].mul(percentage) / 1000000);\\r\\n\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            if(downlineBonus == 4){\\r\\n                downlinePayout = downlinePayout.add(user.downlineVolumes[4].mul(50) / 1000000);\\r\\n            }\\r\\n\\r\\n        }\\r\\n        return downlinePayout;\\r\\n    }\\r\\n\\r\\n    function getDownline(mapping(address => PrestigeClub.User) storage users, address adr) public view returns (uint112, uint128){\\r\\n        uint112 sum;\\r\\n        for(uint8 i = 0 ; i < users[adr].downlineVolumes.length ; i++){\\r\\n            sum = sum.add(users[adr].downlineVolumes[i]);\\r\\n        }\\r\\n\\r\\n        return (sum, getDownlineUsers(users, adr));\\r\\n    }\\r\\n\\r\\n    function getDownlineUsers(mapping(address => PrestigeClub.User) storage users, address adr) private view returns (uint128){\\r\\n\\r\\n        uint128 sum = 0;\\r\\n        uint32 length = uint32(users[adr].referrals.length);\\r\\n        sum += length;\\r\\n        for(uint32 i = 0; i < length ; i++){\\r\\n            sum += getDownlineUsers(users, users[adr].referrals[i]);\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/F/Projects/prestigeclub/contractruffle/contracts/libraries/SafeMath112.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath112 {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint112 a, uint112 b) internal pure returns (uint112) {\\r\\n        uint112 c = a + b;\\r\\n        if(!(c >= a)){\\r\\n            c = (2**112)-1;\\r\\n        }\\r\\n        require(c >= a, \\\"addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint112 a, uint112 b) internal pure returns (uint112) {\\r\\n        if(!(b <= a)){\\r\\n            return 0;\\r\\n        }\\r\\n        uint112 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint112 a, uint112 b) internal pure returns (uint112) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint112 c = a * b;\\r\\n        if(!(c / a == b)){\\r\\n            c = (2**112)-1;\\r\\n        }\\r\\n        // require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint112 a, uint112 b) internal pure returns (uint112) {\\r\\n        require(b > 0, \\\"div by zero\\\");\\r\\n        uint112 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {\r\n      \"/F/Projects/prestigeclub/contractruffle/contracts/libraries/PrestigeClubCalculations.sol\": {\r\n        \"PrestigeClubCalculations\": \"0x50d8BCDFcD60e64551C01b4e0EfbFC444bcf4281\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Adr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"interest\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"direct\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"pool\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"downline\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"dayz\",\"type\":\"uint40\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pool\",\"type\":\"uint8\"}],\"name\":\"PoolReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sender\",\"type\":\"address[]\"},{\"internalType\":\"uint112[]\",\"name\":\"deposit\",\"type\":\"uint112[]\"},{\"internalType\":\"address[]\",\"name\":\"_referer\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"startposition\",\"type\":\"uint32\"},{\"internalType\":\"uint8[]\",\"name\":\"downlineBonus\",\"type\":\"uint8[]\"},{\"internalType\":\"uint112[5][]\",\"name\":\"volumes\",\"type\":\"uint112[5][]\"}],\"name\":\"_import\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositSum\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDetailedUserInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint112[5]\",\"name\":\"\",\"type\":\"uint112[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDirectsPayout\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDownline\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDownlinePayout\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"dayz\",\"type\":\"uint40\"}],\"name\":\"getPoolPayout\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPosition\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_last_draw\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"minOwnInvestment\",\"type\":\"uint112\"},{\"internalType\":\"uint8\",\"name\":\"minDirects\",\"type\":\"uint8\"},{\"internalType\":\"uint112\",\"name\":\"minSumDirects\",\"type\":\"uint112\"},{\"internalType\":\"uint8\",\"name\":\"payoutQuote\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"numUsers\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_lastPosition\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"_depositSum\",\"type\":\"uint112\"}],\"name\":\"reCalculateImported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"recieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"recieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sellAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"_minDeposit\",\"type\":\"uint112\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20adr\",\"type\":\"address\"}],\"name\":\"setPeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint112\",\"name\":\"minOwnInvestment\",\"type\":\"uint112\"},{\"internalType\":\"uint8\",\"name\":\"minDirects\",\"type\":\"uint8\"},{\"internalType\":\"uint112\",\"name\":\"minSumDirects\",\"type\":\"uint112\"},{\"internalType\":\"uint8\",\"name\":\"payoutQuote\",\"type\":\"uint8\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sc\",\"type\":\"address\"}],\"name\":\"setSellingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"states\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalDeposits\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"totalUsers\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerCalculation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"payout\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"position\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"qualifiedPools\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"downlineBonus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"directSum\",\"type\":\"uint112\"},{\"internalType\":\"uint40\",\"name\":\"lastPayout\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lastPayedOut\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PrestigeClub","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006ad61128aba16b9d4295e6cf8bdb57b70085c9c7","EVMVersion":"petersburg","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}