{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/borrower/collect/collector.sol\npragma solidity >=0.5.15 >=0.5.15 <0.6.0;\n\n////// lib/tinlake-auth/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n/* pragma solidity >=0.5.15; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint256           wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n        uint256 wad;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n            wad := callvalue()\n        }\n\n        _;\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n    }\n}\n\n////// lib/tinlake-auth/src/auth.sol\n// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n\n/* import \"ds-note/note.sol\"; */\n\ncontract Auth is DSNote {\n    mapping (address => uint) public wards;\n    function rely(address usr) public auth note { wards[usr] = 1; }\n    function deny(address usr) public auth note { wards[usr] = 0; }\n    modifier auth { require(wards[msg.sender] == 1); _; }\n}\n\n////// src/borrower/collect/collector.sol\n// collector.sol -- can remove bad assets from the pool\n// Copyright (C) 2020 Centrifuge\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n\n/* import \"ds-note/note.sol\"; */\n/* import \"tinlake-auth/auth.sol\"; */\n\ncontract NFTLike_1 {\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function transferFrom(address from, address to, uint256 tokenId) external;\n}\n\ncontract DistributorLike_1 {\n    function balance() public;\n}\n\ncontract ThresholdRegistryLike {\n    function threshold(uint) public view returns (uint);\n}\n\ncontract PileLike_1 {\n    function debt(uint) public returns (uint);\n}\n\ncontract ShelfLike_1 {\n    function claim(uint, address) public;\n    function token(uint loan) public returns (address, uint);\n    function recover(uint loan, address usr, uint wad) public;\n}\n\ncontract Collector is DSNote, Auth {\n\n     // -- Collectors --\n    mapping (address => uint) public collectors;\n    function relyCollector(address usr) public auth note { collectors[usr] = 1; }\n    function denyCollector(address usr) public auth note { collectors[usr] = 0; }\n    modifier auth_collector { require(collectors[msg.sender] == 1); _; }\n\n    // --- Data ---\n    ThresholdRegistryLike threshold;\n\n    struct Option {\n        address buyer;\n        uint    nftPrice;\n    }\n\n    mapping (uint => Option) public options;\n\n    DistributorLike_1 distributor;\n    ShelfLike_1 shelf;\n    PileLike_1 pile;\n\n    constructor (address shelf_, address pile_, address threshold_) public {\n        shelf = ShelfLike_1(shelf_);\n        pile = PileLike_1(pile_);\n        threshold = ThresholdRegistryLike(threshold_);\n        wards[msg.sender] = 1;\n    }\n\n    /// sets the dependency to another contract\n    function depend(bytes32 contractName, address addr) external auth {\n        if (contractName == \"distributor\") distributor = DistributorLike_1(addr);\n        else if (contractName == \"shelf\") shelf = ShelfLike_1(addr);\n        else if (contractName == \"pile\") pile = PileLike_1(addr);\n        else if (contractName == \"threshold\") threshold = ThresholdRegistryLike(addr);\n        else revert();\n    }\n\n    /// sets the liquidation-price of an NFT\n    function file(bytes32 what, uint loan, address buyer, uint nftPrice) external auth {\n        if (what == \"loan\") {\n            require(nftPrice > 0, \"no-nft-price-defined\");\n            options[loan] = Option(buyer, nftPrice);\n        } else revert(\"unknown parameter\");\n\n    }\n\n\n    /// if the loan debt is above the loan threshold the NFT should be seized,\n    /// i.e. taken away from the borrower to be sold off at a later stage.\n    /// therefore the ownership of the nft is transferred to the collector\n    function seize(uint loan) external {\n        uint debt = pile.debt(loan);\n        require((threshold.threshold(loan) <= debt), \"threshold-not-reached\");\n        shelf.claim(loan, address(this));\n    }\n\n\n    /// a nft can be collected if the collector is the nft- owner\n    /// The NFT needs to be `seized` first to transfer ownership to the collector.\n    /// and then seized by the collector\n    function collect(uint loan) external auth_collector note {\n        _collect(loan, msg.sender);\n    }\n\n    function collect(uint loan, address buyer) external auth note {\n        _collect(loan, buyer);\n    }\n\n    function _collect(uint loan, address buyer) internal {\n        require(buyer == options[loan].buyer || options[loan].buyer == address(0), \"not-allowed-to-collect\");\n        (address registry, uint nft) = shelf.token(loan);\n        require(options[loan].nftPrice > 0, \"no-nft-price-defined\");\n        shelf.recover(loan, buyer, options[loan].nftPrice);\n        NFTLike_1(registry).transferFrom(address(this), buyer, nft);\n        distributor.balance();\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shelf_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pile_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"threshold_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"denyCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"depend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftPrice\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"relyCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Collector","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a0b0d8394adc79f5d1563a892abfc6186e5196440000000000000000000000003fc72da5545e2ab6202d81fbeb1c8273be95068c00000000000000000000000069504da6b2cd8320b9a62f3aed410a298d3e7ac6","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}