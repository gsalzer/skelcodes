{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\n * GearAutomatic's Liquidity Vault\r\n \r\n * Smart contract to decentralize the uniswap liquidity for GearAutomatic, providing proof of liquidity indefinitely!\r\n\r\n * Official Website: \r\n   https://www.GearProtocol.com\r\n \r\n */\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract AutoLiquidityVault {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    ERC20 public liquidityToken = ERC20(0xd508b41cac055fdcEdf0631a85a0aDE2808bb5b9);\r\n    \r\n    address owner = msg.sender;\r\n    uint256 public lastTradingFeeDistribution = now;\r\n    \r\n    uint256 public migrationLock;\r\n    address public migrationRecipient;\r\n    \r\n    \r\n    // Has a daily hardcap of 1% trading fees distribution.\r\n\r\n    function distributeTradingFees() external {\r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        require(msg.sender == owner);\r\n        require(lastTradingFeeDistribution < now);\r\n        uint256 OnePercent = liquidityBalance.mul(1).div(100);\r\n        liquidityToken.transfer(owner, OnePercent);\r\n        lastTradingFeeDistribution = lastTradingFeeDistribution + 24 hours;\r\n    } \r\n    \r\n\r\n    // Function allows liquidity to be migrated, after 1 month lockup -preventing abuse.\r\n\r\n    function startLiquidityMigration(address recipient) external {\r\n        require(msg.sender == owner);\r\n        migrationLock = now + 720 hours;\r\n        migrationRecipient = recipient;\r\n    }\r\n    \r\n    \r\n    // Migrates liquidity to new location, assuming the 1 month lockup has passed -preventing abuse.\r\n\r\n    function processMigration() external {\r\n        require(msg.sender == owner);\r\n        require(migrationRecipient != address(0));\r\n        require(now > migrationLock);\r\n        \r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.transfer(migrationRecipient, liquidityBalance);\r\n    }  \r\n    \r\n    \r\n    \r\n    // Function enables the withdrawal of other ERC20 token mistakenly sent to this contract.\r\n\r\n    function swapContract(address Contract) external {\r\n        require(msg.sender == owner);\r\n        liquidityToken = ERC20(Contract);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"name\":\"distributeTradingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradingFeeDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startLiquidityMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"}],\"name\":\"swapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AutoLiquidityVault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://135f2d0b99847358461349bf9fd61db55070a523ad575d745d9c0996d50b54da"}]}