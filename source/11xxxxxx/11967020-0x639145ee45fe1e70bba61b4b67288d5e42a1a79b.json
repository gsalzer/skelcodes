{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ncontract VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ncontract FlipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\r\ncontract FlipperMomAbstract {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\n// https://github.com/makerdao/ilk-registry/blob/master/src/IlkRegistry.sol\r\ncontract IlkRegistryAbstract {\r\n    function list() external view returns (bytes32[] memory);\r\n    function flip(bytes32) external view returns (address);\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log/blob/master/src/ChainLog.sol\r\ncontract ChainlogAbstract {\r\n    function getAddress(bytes32) public view returns (address);\r\n}\r\n\r\ncontract SpellAction {\r\n    // This address should correspond to the latest MCD Chainlog contract; verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    // Common orders of magnitude needed in spells\r\n    //\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n    uint256 constant RAD = 10**45;\r\n    uint256 constant MLN = 10**6;\r\n    uint256 constant BLN = 10**9;\r\n\r\n    function execute() external {\r\n        address MCD_VAT = CHANGELOG.getAddress(\"MCD_VAT\");\r\n        require(VatAbstract(MCD_VAT).wards(address(this)) == 1, \"no-access\");\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    // This address should correspond to the latest MCD Chainlog contract; verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    DSPauseAbstract  public pause;\r\n    address          public action;\r\n    bytes32          public tag;\r\n    uint256          public eta;\r\n    bytes            public sig;\r\n    uint256          public expiration;\r\n    bool             public done;\r\n\r\n    uint256 constant T2021_07_01_1200UTC = 1625140800;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    string constant public description = \"DEFCON-5 Emergency Spell\";\r\n\r\n    constructor() public {\r\n        address MCD_PAUSE = CHANGELOG.getAddress(\"MCD_PAUSE\");\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        pause = DSPauseAbstract(MCD_PAUSE);\r\n        expiration = T2021_07_01_1200UTC;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        address FLIPPER_MOM  = CHANGELOG.getAddress(\"FLIPPER_MOM\");\r\n        address ILK_REGISTRY = CHANGELOG.getAddress(\"ILK_REGISTRY\");\r\n        eta = now + pause.delay();\r\n        pause.plot(action, tag, sig, eta);\r\n\r\n        // Loop over all ilks\r\n        //\r\n        IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);\r\n        bytes32[] memory ilks = registry.list();\r\n\r\n        for (uint i = 0; i < ilks.length; i++) {\r\n            // Enable collateral liquidations\r\n            //\r\n            // This change will enable liquidations for collateral types\r\n            // and is colloquially referred to as the \"circuit breaker\".\r\n            //\r\n            if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {\r\n                FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));\r\n            }\r\n        }\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://26d9eb8d5f25563d6dcd86573253625e8475107d33849915fab9f067f6ee9d28"}]}