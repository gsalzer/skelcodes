{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address payable public owner;\r\n\r\n    event TransferredOwnership(address _previous, address _next, uint256 _time);\r\n    event AddedPlatformAddress(address _platformAddress, uint256 _time);\r\n    event RemovedPlatformAddress(address _platformAddress, uint256 _time);\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == owner, \"Owner only\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPlatform() {\r\n        require(platformAddress[_msgSender()] == true, \"Only Platform\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) platformAddress;\r\n\r\n    constructor() public {\r\n        owner = _msgSender();\r\n    }\r\n\r\n    // Function to transfer ownership\r\n    function transferOwnership(address payable _owner) public onlyOwner() {\r\n        address previousOwner = owner;\r\n        owner = _owner;\r\n        emit TransferredOwnership(previousOwner, owner, now);\r\n    }\r\n\r\n    // Function to add platform address\r\n    function addPlatformAddress(address _platformAddress) public onlyOwner() {\r\n        require(platformAddress[_platformAddress] == false, \"already platform address\");\r\n        platformAddress[_platformAddress] = true;\r\n\r\n        emit AddedPlatformAddress(_platformAddress, now);\r\n    }\r\n\r\n    // Function to remove platform address\r\n    function removePlatformAddress(address _platformAddress) public onlyOwner() {\r\n        require(platformAddress[_platformAddress] == true, \"not platform address\");\r\n        platformAddress[_platformAddress] = false;\r\n\r\n        emit RemovedPlatformAddress(_platformAddress, now);\r\n    }\r\n}\r\n\r\n// File: contracts/LPStakingV2.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n\r\n\r\ninterface ILPStakingNFT {\r\n    function nftTokenId(address _stakeholder) external view returns(uint id);\r\n    function revertNftTokenId(address _stakeholder, uint _tokenId) external;\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n}\r\n\r\ncontract LPStakingV2 is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct NFT {\r\n        address _addressOfMinter;\r\n        uint _LPDeposited;\r\n        bool _inCirculation;\r\n        uint _rewardDebt;\r\n    }\r\n\r\n    event StakeCompleted(address _staker, uint _amount, uint _tokenId, uint _totalStaked, uint _time);\r\n    event PoolUpdated(uint _blocksRewarded, uint _amountRewarded, uint _time);\r\n    event RewardsClaimed(address _staker, uint _rewardsClaimed, uint _tokenId, uint _time);\r\n    event MintedToken(address _staker, uint256 _tokenId, uint256 _time);\r\n    event EmergencyWithdrawOn(address _caller, bool _emergencyWithdraw, uint _time);\r\n    event WithdrawCompleted(address _staker, uint _amount, uint _tokenId, uint _time);\r\n\r\n    IERC20 public LPToken;\r\n    IERC20 public NFYToken;\r\n    ILPStakingNFT public StakingNFT;\r\n    address public rewardPool;\r\n    address public staking;\r\n    uint public dailyReward;\r\n    uint public accNfyPerShare;\r\n    uint public lastRewardBlock;\r\n    uint public totalStaked;\r\n\r\n    bool public emergencyWithdraw = false;\r\n\r\n    mapping(uint => NFT) public NFTDetails;\r\n\r\n    // Constructor will set the address of NFY/ETH LP token and address of NFY/ETH LP token staking NFT\r\n    constructor(address _LPToken, address _NFYToken, address _StakingNFT, address _staking, address _rewardPool, uint _dailyReward) Ownable() public {\r\n        LPToken = IERC20(_LPToken);\r\n        NFYToken = IERC20(_NFYToken);\r\n        StakingNFT = ILPStakingNFT(_StakingNFT);\r\n        staking = _staking;\r\n        rewardPool = _rewardPool;\r\n\r\n        // 9:30 EST December 27th\r\n        lastRewardBlock = 11536400;\r\n\r\n        setDailyReward(_dailyReward);\r\n        accNfyPerShare;\r\n    }\r\n\r\n    // 6500 blocks in average day --- decimals * NFY balance of rewardPool / blocks / 10000 * dailyReward (in hundredths of %) = rewardPerBlock\r\n    function getRewardPerBlock() public view returns(uint) {\r\n        return NFYToken.balanceOf(rewardPool).mul(dailyReward).div(6500).div(10000);\r\n    }\r\n\r\n    // % of reward pool to be distributed each day --- in hundredths of % 30 == 0.3%\r\n    function setDailyReward(uint _dailyReward) public onlyOwner {\r\n        dailyReward = _dailyReward;\r\n    }\r\n\r\n    // Function that will get balance of a NFY/ETH LP balance of a certain stake\r\n    function getNFTBalance(uint _tokenId) public view returns(uint _amountStaked) {\r\n        return NFTDetails[_tokenId]._LPDeposited;\r\n    }\r\n\r\n    // Function that will check if a NFY/ETH LP stake NFT is in circulation\r\n    function checkIfNFTInCirculation(uint _tokenId) public view returns(bool _inCirculation) {\r\n        return NFTDetails[_tokenId]._inCirculation;\r\n    }\r\n\r\n    // Function that returns NFT's pending rewards\r\n    function pendingRewards(uint _NFT) public view returns(uint) {\r\n        NFT storage nft = NFTDetails[_NFT];\r\n\r\n        uint256 _accNfyPerShare = accNfyPerShare;\r\n\r\n        if (block.number > lastRewardBlock && totalStaked != 0) {\r\n            uint256 blocksToReward = block.number.sub(lastRewardBlock);\r\n            uint256 nfyReward = blocksToReward.mul(getRewardPerBlock());\r\n            _accNfyPerShare = _accNfyPerShare.add(nfyReward.mul(1e18).div(totalStaked));\r\n        }\r\n\r\n        return nft._LPDeposited.mul(_accNfyPerShare).div(1e18).sub(nft._rewardDebt);\r\n    }\r\n\r\n    // Get total rewards for all of user's NFY/ETH LP nfts\r\n    function getTotalRewards(address _address) public view returns(uint) {\r\n        uint totalRewards;\r\n\r\n        for(uint i = 0; i < StakingNFT.balanceOf(_address); i++) {\r\n            uint _rewardPerNFT = pendingRewards(StakingNFT.tokenOfOwnerByIndex(_address, i));\r\n            totalRewards = totalRewards.add(_rewardPerNFT);\r\n        }\r\n\r\n        return totalRewards;\r\n    }\r\n\r\n    // Get total stake for all user's NFY/ETH LP nfts\r\n    function getTotalBalance(address _address) public view returns(uint) {\r\n        uint totalBalance;\r\n\r\n        for(uint i = 0; i < StakingNFT.balanceOf(_address); i++) {\r\n            uint _balancePerNFT = getNFTBalance(StakingNFT.tokenOfOwnerByIndex(_address, i));\r\n            totalBalance = totalBalance.add(_balancePerNFT);\r\n        }\r\n\r\n        return totalBalance;\r\n    }\r\n\r\n    // Function that updates NFY/ETH LP pool\r\n    function updatePool() public {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (totalStaked == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 blocksToReward = block.number.sub(lastRewardBlock);\r\n\r\n        uint256 nfyReward = blocksToReward.mul(getRewardPerBlock());\r\n\r\n        //Approve nfyReward here\r\n        NFYToken.transferFrom(rewardPool, address(this), nfyReward);\r\n\r\n        accNfyPerShare = accNfyPerShare.add(nfyReward.mul(1e18).div(totalStaked));\r\n        lastRewardBlock = block.number;\r\n\r\n        emit PoolUpdated(blocksToReward, nfyReward, now);\r\n    }\r\n\r\n    // Function that lets user stake NFY/ETH LP\r\n    function stakeLP(uint _amount) public {\r\n        require(emergencyWithdraw == false, \"emergency withdraw is on, cannot stake\");\r\n        require(_amount > 0, \"Can not stake 0 LP tokens\");\r\n        require(LPToken.balanceOf(_msgSender()) >= _amount, \"Do not have enough LP tokens to stake\");\r\n\r\n        updatePool();\r\n\r\n        if(StakingNFT.nftTokenId(_msgSender()) == 0){\r\n             addStakeholder(_msgSender());\r\n        }\r\n\r\n        NFT storage nft = NFTDetails[StakingNFT.nftTokenId(_msgSender())];\r\n\r\n        if(nft._LPDeposited > 0) {\r\n            uint _pendingRewards = nft._LPDeposited.mul(accNfyPerShare).div(1e18).sub(nft._rewardDebt);\r\n\r\n            if(_pendingRewards > 0) {\r\n                NFYToken.transfer(_msgSender(), _pendingRewards);\r\n                emit RewardsClaimed(_msgSender(), _pendingRewards, StakingNFT.nftTokenId(_msgSender()), now);\r\n            }\r\n        }\r\n\r\n        LPToken.transferFrom(_msgSender(), address(this), _amount);\r\n        nft._LPDeposited = nft._LPDeposited.add(_amount);\r\n        totalStaked = totalStaked.add(_amount);\r\n\r\n        nft._rewardDebt = nft._LPDeposited.mul(accNfyPerShare).div(1e18);\r\n\r\n        emit StakeCompleted(_msgSender(), _amount, StakingNFT.nftTokenId(_msgSender()), nft._LPDeposited, now);\r\n    }\r\n\r\n    function addStakeholder(address _stakeholder) private {\r\n        (bool success, bytes memory data) = staking.call(abi.encodeWithSignature(\"mint(address)\", _stakeholder));\r\n        require(success == true, \"Mint call failed\");\r\n        NFTDetails[StakingNFT.nftTokenId(_msgSender())]._addressOfMinter = _stakeholder;\r\n        NFTDetails[StakingNFT.nftTokenId(_msgSender())]._inCirculation = true;\r\n    }\r\n\r\n    function addStakeholderExternal(address _stakeholder) external onlyPlatform() {\r\n        (bool success, bytes memory data) = staking.call(abi.encodeWithSignature(\"mint(address)\", _stakeholder));\r\n        require(success == true, \"Mint call failed\");\r\n        NFTDetails[StakingNFT.nftTokenId(_stakeholder)]._addressOfMinter = _stakeholder;\r\n        NFTDetails[StakingNFT.nftTokenId(_stakeholder)]._inCirculation = true;\r\n    }\r\n\r\n    // Function that will allow user to claim rewards\r\n    function claimRewards(uint _tokenId) public {\r\n        require(StakingNFT.ownerOf(_tokenId) == _msgSender(), \"User is not owner of token\");\r\n        require(NFTDetails[_tokenId]._inCirculation == true, \"Stake has already been withdrawn\");\r\n\r\n        updatePool();\r\n\r\n        NFT storage nft = NFTDetails[_tokenId];\r\n\r\n        uint _pendingRewards = nft._LPDeposited.mul(accNfyPerShare).div(1e18).sub(nft._rewardDebt);\r\n        require(_pendingRewards > 0, \"No rewards to claim!\");\r\n\r\n        NFYToken.transfer(_msgSender(), _pendingRewards);\r\n\r\n        nft._rewardDebt = nft._LPDeposited.mul(accNfyPerShare).div(1e18);\r\n\r\n        emit RewardsClaimed(_msgSender(), _pendingRewards, _tokenId, now);\r\n    }\r\n\r\n    // Function that lets user claim all rewards from all their nfts\r\n    function claimAllRewards() public {\r\n        require(StakingNFT.balanceOf(_msgSender()) > 0, \"User has no stake\");\r\n        for(uint i = 0; i < StakingNFT.balanceOf(_msgSender()); i++) {\r\n            uint _currentNFT = StakingNFT.tokenOfOwnerByIndex(_msgSender(), i);\r\n            claimRewards(_currentNFT);\r\n        }\r\n    }\r\n\r\n    // Function that lets user unstake NFY in system. 5% fee that gets redistributed back to reward pool\r\n    function unstakeLP(uint _tokenId) public {\r\n        require(emergencyWithdraw == true, \"Can not withdraw\");\r\n        // Require that user is owner of token id\r\n        require(StakingNFT.ownerOf(_tokenId) == _msgSender(), \"User is not owner of token\");\r\n        require(NFTDetails[_tokenId]._inCirculation == true, \"Stake has already been withdrawn\");\r\n\r\n        updatePool();\r\n\r\n        NFT storage nft = NFTDetails[_tokenId];\r\n\r\n        uint _pendingRewards = nft._LPDeposited.mul(accNfyPerShare).div(1e18).sub(nft._rewardDebt);\r\n\r\n        uint amountStaked = getNFTBalance(_tokenId);\r\n        uint beingWithdrawn = nft._LPDeposited;\r\n\r\n        nft._LPDeposited = 0;\r\n        nft._inCirculation = false;\r\n\r\n        totalStaked = totalStaked.sub(beingWithdrawn);\r\n        StakingNFT.revertNftTokenId(_msgSender(), _tokenId);\r\n\r\n        (bool success, bytes memory data) = staking.call(abi.encodeWithSignature(\"burn(uint256)\", _tokenId));\r\n        require(success == true, \"burn call failed\");\r\n\r\n        LPToken.transfer(_msgSender(), amountStaked);\r\n        NFYToken.transfer(_msgSender(), _pendingRewards);\r\n\r\n        emit WithdrawCompleted(_msgSender(), amountStaked, _tokenId, now);\r\n        emit RewardsClaimed(_msgSender(), _pendingRewards, _tokenId, now);\r\n    }\r\n\r\n    // Function that will unstake every user's NFY/ETH LP stake NFT for user\r\n    function unstakeAll() public {\r\n        require(StakingNFT.balanceOf(_msgSender()) > 0, \"User has no stake\");        \r\n\r\n        while(StakingNFT.balanceOf(_msgSender()) > 0) {\r\n            uint _currentNFT = StakingNFT.tokenOfOwnerByIndex(_msgSender(), 0);\r\n            unstakeLP(_currentNFT);\r\n        }\r\n    }\r\n\r\n    // Will increment value of staking NFT when trade occurs\r\n    function incrementNFTValue (uint _tokenId, uint _amount) external onlyPlatform() {\r\n        require(checkIfNFTInCirculation(_tokenId) == true, \"Token not in circulation\");\r\n        updatePool();\r\n\r\n        NFT storage nft = NFTDetails[_tokenId];\r\n\r\n        if(nft._LPDeposited > 0) {\r\n            uint _pendingRewards = nft._LPDeposited.mul(accNfyPerShare).div(1e18).sub(nft._rewardDebt);\r\n\r\n            if(_pendingRewards > 0) {\r\n                NFYToken.transfer(StakingNFT.ownerOf(_tokenId), _pendingRewards);\r\n                emit RewardsClaimed(StakingNFT.ownerOf(_tokenId), _pendingRewards, _tokenId, now);\r\n            }\r\n        }\r\n\r\n        NFTDetails[_tokenId]._LPDeposited =  NFTDetails[_tokenId]._LPDeposited.add(_amount);\r\n\r\n        nft._rewardDebt = nft._LPDeposited.mul(accNfyPerShare).div(1e18);\r\n\r\n    }\r\n\r\n    // Will decrement value of staking NFT when trade occurs\r\n    function decrementNFTValue (uint _tokenId, uint _amount) external onlyPlatform() {\r\n        require(checkIfNFTInCirculation(_tokenId) == true, \"Token not in circulation\");\r\n        require(getNFTBalance(_tokenId) >= _amount, \"Not enough stake in NFT\");\r\n\r\n        updatePool();\r\n\r\n        NFT storage nft = NFTDetails[_tokenId];\r\n\r\n        if(nft._LPDeposited > 0) {\r\n            uint _pendingRewards = nft._LPDeposited.mul(accNfyPerShare).div(1e18).sub(nft._rewardDebt);\r\n\r\n            if(_pendingRewards > 0) {\r\n                NFYToken.transfer(StakingNFT.ownerOf(_tokenId), _pendingRewards);\r\n                emit RewardsClaimed(StakingNFT.ownerOf(_tokenId), _pendingRewards, _tokenId, now);\r\n            }\r\n        }\r\n\r\n        NFTDetails[_tokenId]._LPDeposited =  NFTDetails[_tokenId]._LPDeposited.sub(_amount);\r\n\r\n        nft._rewardDebt = nft._LPDeposited.mul(accNfyPerShare).div(1e18);\r\n    }\r\n\r\n    // Function that will turn on emergency withdraws\r\n    function turnEmergencyWithdrawOn() public onlyOwner() {\r\n        require(emergencyWithdraw == false, \"emergency withdrawing already allowed\");\r\n        emergencyWithdraw = true;\r\n        emit EmergencyWithdrawOn(_msgSender(), emergencyWithdraw, now);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NFYToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_StakingNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dailyReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"AddedPlatformAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_emergencyWithdraw\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"MintedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blocksRewarded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountRewarded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RemovedPlatformAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardsClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"StakeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_next\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"TransferredOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_addressOfMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_LPDeposited\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_inCirculation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFYToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakingNFT\",\"outputs\":[{\"internalType\":\"contract ILPStakingNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accNfyPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"addPlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"addStakeholderExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkIfNFTInCirculation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_inCirculation\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decrementNFTValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incrementNFTValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NFT\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"removePlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyReward\",\"type\":\"uint256\"}],\"name\":\"setDailyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnEmergencyWithdrawOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LPStakingV2","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000146d3401b6a41122bd318ba676a01c44cb0795e20000000000000000000000001cbb83ebcd552d5ebf8131ef8c9cd9d9bab342bc000000000000000000000000320f0005364e755136cb72955fdc842f18e21ae7000000000000000000000000320f0005364e755136cb72955fdc842f18e21ae70000000000000000000000002f822da8016d5e8ce3c93b53ee1528392ca3ac57000000000000000000000000000000000000000000000000000000000000001e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fb26fc5f7ddc1a4758702ef7fd4f9989a282745425d4fe755bebb44deee4a308"}]}