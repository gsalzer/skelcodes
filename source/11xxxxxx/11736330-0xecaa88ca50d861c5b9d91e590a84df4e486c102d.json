{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-13\r\n*/\r\n\r\npragma solidity 0.4.26;\r\n\r\ncontract IERC20 {\r\n    uint public decimals;\r\n    string public    name;\r\n    string public   symbol;\r\n    mapping(address => uint) public balances;\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n    \r\n    uint public _totalSupply;\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n \r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n \r\n  \r\ncontract Distribute{\r\n       using SafeMath for uint;\r\n       \r\n       \r\n       \r\n        event GetFod(address getAddress, uint256 value);\r\n        event DepositeFod(address ethAddress, uint256 value);\r\n           \r\n       \r\n      struct Pledge{\r\n            uint day;\r\n            uint investAmount;  \r\n            uint earnings;         \r\n            uint createTime;    \r\n            uint dueTime;\r\n            uint receivedDay;\r\n            uint end;\r\n      }  \r\n\r\n\r\n      struct Invite{\r\n            address userAddr;\r\n            uint256 earnings; \r\n            uint day;\r\n            uint256 createTime;  \r\n            uint256 dueTime;\r\n            uint256 receivedDay;\r\n            uint end;\r\n      }  \r\n\r\n        uint intervalTime=86400;\r\n        uint public yieldRate=110;\r\n        uint public inviteYieldRate=100;\r\n\r\n        address public founder;\r\n\r\n        address fod=0xc7bE1Cf99e6a691ad5c56E3D63AD9667C6932E63;\r\n        uint fodDecimals=8;\r\n    \r\n   \r\n        mapping (bytes4 => Invite[]) public inviteLogs;\r\n        \r\n        mapping (address => bytes4) public useInviteCodeMap;\r\n        \r\n        mapping (bytes4 => address) public inviteCodeMap;\r\n        \r\n        mapping (bytes4 => uint) public codeUsageCounts;\r\n        \r\n        mapping (address => Pledge[]) public addressToPledge;\r\n        mapping(uint=>uint) public dateToYields;\r\n        mapping(uint=>uint) public dayMap;\r\n            \r\n            \r\n            \r\n        constructor() public {\r\n            dateToYields[0]=18;\r\n            dateToYields[1]=26;\r\n            dateToYields[2]=36;\r\n            dateToYields[3]=46;\r\n            dateToYields[4]=56;\r\n            \r\n            dayMap[0]=1;\r\n            dayMap[1]=7;\r\n            dayMap[3]=30;\r\n            dayMap[2]=60;\r\n            dayMap[4]=90;\r\n            \r\n            founder = msg.sender;\r\n         }\r\n         \r\n        \r\n        \r\n        function getAddrInviteCode(address _addr) view returns (bytes4) {\r\n            bytes4  inviteCode=bytes4(keccak256((_addr)));\r\n            if(inviteCodeMap[inviteCode]!=0){\r\n                return inviteCode;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }\r\n         \r\n        function getInviteCode() view returns (bytes4) {\r\n            bytes4  inviteCode=bytes4(keccak256((msg.sender)));\r\n            return inviteCode;\r\n        }\r\n        \r\n        function getPledgeCount(address _addr) view returns (uint) {\r\n            return addressToPledge[_addr].length;\r\n        }\r\n        \r\n        function getInvitesCount(address _addr) view returns (uint) {\r\n            bytes4  inviteCode=bytes4(keccak256((msg.sender)));\r\n            return inviteLogs[inviteCode].length;\r\n        }\r\n   \r\n   \r\n        function setYieldRate(uint _yieldRate) public onlyOwner returns (bool success) {\r\n            yieldRate=_yieldRate;\r\n            return true;\r\n        }\r\n         \r\n        function setInviteYieldRate(uint _inviteYieldRate) public onlyOwner returns (bool success) {\r\n            inviteYieldRate=_inviteYieldRate;\r\n            return true;\r\n        }\r\n        \r\n        function setDateToYield(uint _index,uint _yield) public onlyOwner returns (bool success) {\r\n            dateToYields[_index]=_yield;\r\n            return true;\r\n        }\r\n         \r\n        function setDayMap(uint _index,uint _day) public onlyOwner returns (bool success) {\r\n            dayMap[_index]=_day;\r\n            return true;\r\n        }\r\n        \r\n        \r\n        function getTotalUnLockAmount(address _addr) public view returns (uint256) {\r\n             uint256 unlockAmount;\r\n             uint256 currentAmount;\r\n             Pledge[] pledges=addressToPledge[_addr];\r\n             for(uint i=0;i<pledges.length;i++){\r\n                if(pledges[i].end==1)continue;\r\n                uint day=(now.sub(pledges[i].createTime)).div(intervalTime);\r\n                uint256 dayAmount=pledges[i].earnings.div(pledges[i].day);\r\n            \r\n                if(now>pledges[i].dueTime){\r\n                    if(day.add(pledges[i].receivedDay)>=pledges[i].day){\r\n                        currentAmount=(pledges[i].day.sub(pledges[i].receivedDay)).mul(dayAmount).add(pledges[i].investAmount);\r\n                    }else{\r\n                         currentAmount=(day.sub(pledges[i].receivedDay)).mul(dayAmount).add(pledges[i].investAmount);\r\n                    }\r\n                }else{\r\n                    currentAmount=(day.sub(pledges[i].receivedDay)).mul(dayAmount);\r\n                }\r\n                unlockAmount=unlockAmount.add(currentAmount);\r\n            }\r\n            bytes4  inviteCode=bytes4(keccak256((_addr)));\r\n            Invite[] Invites=inviteLogs[inviteCode];\r\n            for(uint j=0;j<Invites.length;j++){\r\n                if(Invites[j].end==1)continue;\r\n                uint day2=(now.sub(Invites[j].createTime)).div(intervalTime);\r\n                uint256 dayAmount2=Invites[j].earnings.div(Invites[j].day);\r\n                \r\n                if(day2.add(Invites[j].receivedDay)>=Invites[j].day){\r\n                     currentAmount=(Invites[j].day.sub(Invites[j].receivedDay)).mul(dayAmount2);\r\n                }else{\r\n                     currentAmount=(day2.sub(Invites[j].receivedDay)).mul(dayAmount2);\r\n                }\r\n                unlockAmount=unlockAmount.add(currentAmount);\r\n            }\r\n            return unlockAmount;\r\n        }\r\n        \r\n        function getTotalPledgeAmount(address _addr) public view returns (uint256) {\r\n            uint256 amount;\r\n            uint256 unlockAmount;\r\n            Pledge[] pledges=addressToPledge[_addr];\r\n            for(uint i=0;i<pledges.length;i++){\r\n                amount=amount.add(pledges[i].investAmount);\r\n            }\r\n            return amount;\r\n        }\r\n        \r\n        function getUnLockPledgeAmount(address _addr) public view returns (uint256) {\r\n            uint256 unlockAmount;\r\n            uint256 currentAmount;\r\n            Pledge[] pledges=addressToPledge[_addr];\r\n             for(uint i=0;i<pledges.length;i++){\r\n                if(pledges[i].end==1)continue;\r\n                uint day=(now.sub(pledges[i].createTime)).div(intervalTime);\r\n                uint256 dayAmount=pledges[i].earnings.div(pledges[i].day);\r\n            \r\n                if(now>pledges[i].dueTime){\r\n                    if(day.add(pledges[i].receivedDay)>=pledges[i].day){\r\n                        currentAmount=(pledges[i].day.sub(pledges[i].receivedDay)).mul(dayAmount).add(pledges[i].investAmount);\r\n                    }else{\r\n                         currentAmount=(day.sub(pledges[i].receivedDay)).mul(dayAmount).add(pledges[i].investAmount);\r\n                    }\r\n                }else{\r\n                    currentAmount=(day.sub(pledges[i].receivedDay)).mul(dayAmount);\r\n                }\r\n                unlockAmount=unlockAmount.add(currentAmount);\r\n            }\r\n            return unlockAmount;\r\n        }\r\n        \r\n        function getTotalInviteAmount(address _addr) public view returns (uint256) {\r\n            uint256 amount;\r\n            bytes4  inviteCode=bytes4(keccak256((_addr)));\r\n            Invite[] Invites=inviteLogs[inviteCode];\r\n            for(uint i=0;i<Invites.length;i++){\r\n                amount=amount.add(Invites[i].earnings);\r\n            }\r\n            return amount;\r\n        }\r\n        \r\n        function getUnlockInviteAmount(address _addr) public view returns (uint256) {\r\n            uint256 unlockAmount;\r\n            uint256 currentAmount;\r\n            bytes4  inviteCode=bytes4(keccak256((_addr)));\r\n            Invite[] Invites=inviteLogs[inviteCode];\r\n            for(uint j=0;j<Invites.length;j++){\r\n                if(Invites[j].end==1)continue;\r\n                uint day=(now.sub(Invites[j].createTime)).div(intervalTime);\r\n                uint256 dayAmount=Invites[j].earnings.div(Invites[j].day);\r\n                \r\n                if(day.add(Invites[j].receivedDay)>=Invites[j].day){\r\n                     currentAmount=(Invites[j].day.sub(Invites[j].receivedDay)).mul(dayAmount);\r\n                }else{\r\n                     currentAmount=(day.sub(Invites[j].receivedDay)).mul(dayAmount);\r\n                }\r\n                unlockAmount=unlockAmount.add(currentAmount);\r\n            }\r\n            return unlockAmount;\r\n        }\r\n   \r\n        function useInviteCode(bytes4 _inviteCode) public returns (bool success) {\r\n            require(useInviteCodeMap[msg.sender]==0);\r\n            require(inviteCodeMap[_inviteCode]!=0);\r\n            bytes4  inviteCode=bytes4(keccak256((msg.sender)));\r\n            require(_inviteCode!=inviteCode);\r\n            useInviteCodeMap[msg.sender]=_inviteCode;\r\n            codeUsageCounts[_inviteCode]=codeUsageCounts[_inviteCode]+1;\r\n            \r\n            return true;\r\n        }\r\n   \r\n\r\n        function depositeFod(uint256 _amount,uint _mode) public {\r\n            uint256 yie=100;\r\n            if(useInviteCodeMap[msg.sender]!=0){\r\n                yie=yieldRate;\r\n            }\r\n\r\n            IERC20 fodToken =IERC20(fod);\r\n            fodToken.transferFrom(msg.sender,this,_amount);\r\n            \r\n            uint256 dueTime=now.add(dayMap[_mode].mul(intervalTime));\r\n            uint256 earnings=_amount.mul(yie).mul(dateToYields[_mode]).mul(dayMap[_mode]).div(3650000);\r\n            Pledge memory  pledge=Pledge(dayMap[_mode],_amount,earnings,now,dueTime,0,0);\r\n            addressToPledge[msg.sender].push(pledge);\r\n\r\n            if(useInviteCodeMap[msg.sender]!=0){\r\n                 Invite memory  invite=Invite(msg.sender,earnings.mul(inviteYieldRate).div(100),dayMap[_mode],now,dueTime,0,0);\r\n                 inviteLogs[useInviteCodeMap[msg.sender]].push(invite);\r\n            }\r\n\r\n            if(inviteCodeMap[bytes4(keccak256((msg.sender)))]==0){\r\n                 inviteCodeMap[bytes4(keccak256((msg.sender)))]=msg.sender;\r\n            }\r\n            \r\n            emit DepositeFod(msg.sender,_amount);\r\n        }\r\n        \r\n       function receiveFod() public{\r\n            uint256 unlockAmount;\r\n             uint256 currentAmount;\r\n            Pledge[] pledges=addressToPledge[msg.sender];\r\n            for(uint i=0;i<pledges.length;i++){\r\n                if(pledges[i].end==1)continue;\r\n                uint day=(now.sub(pledges[i].createTime)).div(intervalTime);\r\n                uint256 dayAmount=pledges[i].earnings.div(pledges[i].day);\r\n            \r\n                if(now>pledges[i].dueTime){\r\n                    if(day.add(pledges[i].receivedDay)>=pledges[i].day){\r\n                        currentAmount=(pledges[i].day.sub(pledges[i].receivedDay)).mul(dayAmount).add(pledges[i].investAmount);\r\n                    }else{\r\n                         currentAmount=(day.sub(pledges[i].receivedDay)).mul(dayAmount).add(pledges[i].investAmount);\r\n                    }\r\n                    pledges[i].end=1;\r\n                }else{\r\n                    currentAmount=(day.sub(pledges[i].receivedDay)).mul(dayAmount);\r\n                    pledges[i].receivedDay=day;\r\n                }\r\n                unlockAmount=unlockAmount.add(currentAmount);\r\n            }\r\n            \r\n            bytes4  inviteCode=bytes4(keccak256((msg.sender)));\r\n            Invite[] Invites=inviteLogs[inviteCode];\r\n            for(uint j=0;j<Invites.length;j++){\r\n                if(Invites[j].end==1)continue;\r\n                uint day2=(now.sub(Invites[j].createTime)).div(intervalTime);\r\n                uint256 dayAmount2=Invites[j].earnings.div(Invites[j].day);\r\n                \r\n                if(day2.add(Invites[j].receivedDay)>=Invites[j].day){\r\n                     currentAmount=(Invites[j].day.sub(Invites[j].receivedDay)).mul(dayAmount2);\r\n                     Invites[j].end=1;\r\n                }else{\r\n                     currentAmount=(day2.sub(Invites[j].receivedDay)).mul(dayAmount2);\r\n                     Invites[j].receivedDay=day2;\r\n                }\r\n                unlockAmount=unlockAmount.add(currentAmount);\r\n            }\r\n  \r\n            IERC20 fodToken =IERC20(fod);\r\n            fodToken.transfer(msg.sender,unlockAmount);\r\n            emit GetFod(msg.sender,unlockAmount);\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n \r\n        function withdrawToken (address _tokenAddress,address _user,uint256 _tokenAmount)public onlyOwner returns (bool) {\r\n             IERC20 token =IERC20(_tokenAddress);\r\n             token.transfer(_user,_tokenAmount);\r\n            return true;\r\n        }\r\n\r\n\r\n        function changeFounder(address newFounder) public onlyOwner{\r\n            if (msg.sender!=founder) revert();\r\n            founder = newFounder; \r\n        }\r\n \r\n        modifier onlyOwner() {\r\n            require(msg.sender == founder);\r\n            _;\r\n        }\r\n   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_yieldRate\",\"type\":\"uint256\"}],\"name\":\"setYieldRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUnLockPledgeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveFod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUnlockInviteAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTotalPledgeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dateToYields\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inviteYieldRate\",\"type\":\"uint256\"}],\"name\":\"setInviteYieldRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"setDayMap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"setDateToYield\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTotalInviteAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inviteYieldRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInvitesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"useInviteCodeMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inviteCode\",\"type\":\"bytes4\"}],\"name\":\"useInviteCode\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToPledge\",\"outputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"investAmount\",\"type\":\"uint256\"},{\"name\":\"earnings\",\"type\":\"uint256\"},{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"dueTime\",\"type\":\"uint256\"},{\"name\":\"receivedDay\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPledgeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"depositeFod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAddrInviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inviteLogs\",\"outputs\":[{\"name\":\"userAddr\",\"type\":\"address\"},{\"name\":\"earnings\",\"type\":\"uint256\"},{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"dueTime\",\"type\":\"uint256\"},{\"name\":\"receivedDay\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"codeUsageCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTotalUnLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"inviteCodeMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"getAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GetFod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositeFod\",\"type\":\"event\"}]","ContractName":"Distribute","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://60d790e665b8adb75dc4fb74e79907c04b4ced84534a8a2ad4feb01350fdca90"}]}