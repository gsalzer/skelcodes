{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract FDCDapp {\r\n\r\n  string private version = \"v0.25\";\r\n\r\n  uint256 private DappReward = 100000;\r\n\r\n  address private FDCContract=0x311C6769461e1d2173481F8d789AF00B39DF6d75;\r\n\r\n  function dappCollectFreedomDividend(address Address) public returns (bool) {\r\n\r\n    (bool successBalance, bytes memory dataBalance) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('balanceOf(address)'))), address(this)));\r\n    require(successBalance, \"Freedom Dividend Collection balanceOf failed.\");\r\n    uint256 rewardLeft = abi.decode(dataBalance, (uint256));\r\n\r\n    if (rewardLeft >= DappReward) {\r\n      (bool successTransfer, bytes memory dataTransfer) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), Address, DappReward));\r\n      require(successTransfer, \"Freedom Dividend Collection reward failed.\");\r\n    }\r\n\r\n    (bool successFreedomDividend, bytes memory dataFreedomDividend) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('collectFreedomDividendWithAddress(address)'))), Address));\r\n    require(successFreedomDividend, \"Freedom Dividend Collection failed.\");\r\n\r\n    return true;\r\n  }\r\n\r\n  function getVersion() public view returns (string memory) {\r\n    return version;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"dappCollectFreedomDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FDCDapp","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1330afec20e706a16ca99d28f98b6f027b7552b9d08d8dcb6388897a5eb0145c"}]}