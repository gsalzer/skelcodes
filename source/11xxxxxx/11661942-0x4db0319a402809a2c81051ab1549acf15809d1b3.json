{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/root/RootChainManager/ATokenRootChainManager.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {ICheckpointManager} from \\\"../ICheckpointManager.sol\\\";\\r\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\r\\nimport {MerklePatriciaProof} from \\\"../../lib/MerklePatriciaProof.sol\\\";\\r\\nimport {Merkle} from \\\"../../lib/Merkle.sol\\\";\\r\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IStateSender} from \\\"../StateSender/IStateSender.sol\\\";\\r\\nimport {ICheckpointManager} from \\\"../ICheckpointManager.sol\\\";\\r\\n\\r\\n\\r\\ninterface ILendingPool {\\r\\n    function getReserveNormalizedIncome(address _asset) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IAToken {\\r\\n    function POOL() external returns(ILendingPool);\\r\\n    function UNDERLYING_ASSET_ADDRESS() external returns(address);\\r\\n}\\r\\n\\r\\ninterface IERC20Meta {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\nstruct AppStorage {\\r\\n    mapping(address => address) rootToChildToken;\\r\\n    mapping(address => address) childToRootToken;    \\r\\n    mapping(bytes32 => bool) processedExits;\\r\\n    bool inited;\\r\\n    IStateSender stateSender;\\r\\n    ICheckpointManager checkpointManager;\\r\\n    address childChainManagerAddress;\\r\\n    bytes32 childTokenBytecodeHash;\\r\\n    address owner;\\r\\n    address mapper;\\r\\n}\\r\\n\\r\\ncontract ATokenRootChainManager is            \\r\\n    ICheckpointManager,\\r\\n    NativeMetaTransaction,\\r\\n    ContextMixin\\r\\n{\\r\\n    using RLPReader for bytes;\\r\\n    using RLPReader for RLPReader.RLPItem;\\r\\n    using Merkle for bytes32;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    AppStorage s;\\r\\n\\r\\n    // maybe DEPOSIT and MAP_TOKEN can be reduced to bytes4\\r\\n    bytes32 public constant DEPOSIT = keccak256(\\\"DEPOSIT\\\");\\r\\n    bytes32 public constant MAP_TOKEN = keccak256(\\\"MAP_TOKEN\\\");    \\r\\n    bytes32 public constant MAPPER_ROLE = keccak256(\\\"MAPPER_ROLE\\\");\\r\\n    uint256 internal constant P27 = 1e27;\\r\\n    uint256 internal constant HALF_P27 = P27 / 2;\\r\\n    bytes32 public constant TRANSFER_EVENT_SIG = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\r\\n\\r\\n   event TokenMapped(\\r\\n        address indexed rootToken,\\r\\n        address indexed childToken,\\r\\n        bytes32 indexed tokenType\\r\\n    );\\r\\n\\r\\n    event LockedERC20(\\r\\n        address indexed depositor,\\r\\n        address indexed depositReceiver,\\r\\n        address indexed rootToken,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit ether by directly sending to the contract\\r\\n     * The account sending ether receives WETH on child chain\\r\\n     */\\r\\n    receive() external payable {\\r\\n        revert(\\\"Cannot send ETH over aToken bridge\\\");\\r\\n    }\\r\\n    \\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        address _stateSender,\\r\\n        address _checkpointManager,\\r\\n        address _childChainManagerAddress,\\r\\n        bytes32 _childTokenBytecodeHash\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        require(!s.inited, \\\"already inited\\\");\\r\\n        s.inited = true;\\r\\n        _initializeEIP712(\\\"ATokenRootChainManager\\\");        \\r\\n        s.owner = _owner; \\r\\n        s.mapper = _owner;        \\r\\n        s.stateSender = IStateSender(_stateSender);\\r\\n        s.checkpointManager = ICheckpointManager(_checkpointManager);\\r\\n        s.childChainManagerAddress = _childChainManagerAddress;\\r\\n        s.childTokenBytecodeHash = _childTokenBytecodeHash;        \\r\\n    }\\r\\n\\r\\n    function rootToChildToken(address _rootToken) external view returns (address) {\\r\\n        return s.rootToChildToken[_rootToken];\\r\\n    }\\r\\n    function childToRootToken(address _childToken) external view returns (address) {\\r\\n        return s.childToRootToken[_childToken];\\r\\n    }\\r\\n    function mapper() external view returns (address) {\\r\\n        return s.mapper;\\r\\n    }\\r\\n    function stateSender() external view returns (address) {\\r\\n        return address(s.stateSender);\\r\\n    }\\r\\n\\r\\n    // Old function here so as to not break existing functionality\\r\\n    function stateSenderAddress() external view returns (address) {\\r\\n        return address(s.stateSender);\\r\\n    }\\r\\n\\r\\n    function owner() external view returns (address) {\\r\\n        return s.owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == s.owner, \\\"Is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMapper() {\\r\\n        require(msg.sender == s.mapper || msg.sender == s.owner, \\\"Is not mapper\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyStateSender() {\\r\\n        require(msg.sender == address(s.stateSender), \\\"Is not state sender\\\");\\r\\n        _;\\r\\n    }   \\r\\n    \\r\\n    function processedExits(bytes32 _exitHash) external view returns (bool) {\\r\\n        return s.processedExits[_exitHash];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the state sender, callable only by admins\\r\\n     * @dev This should be the state sender from plasma contracts\\r\\n     * It is used to send bytes from root to child chain\\r\\n     * @param newStateSender address of state sender contract\\r\\n     */\\r\\n    function setStateSender(address newStateSender)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        s.stateSender = IStateSender(newStateSender);\\r\\n    }   \\r\\n\\r\\n    /**\\r\\n     * @notice Set the checkpoint manager, callable only by admins\\r\\n     * @dev This should be the plasma contract responsible for keeping track of checkpoints\\r\\n     * @param newCheckpointManager address of checkpoint manager contract\\r\\n     */\\r\\n    function setCheckpointManager(address newCheckpointManager)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        s.checkpointManager = ICheckpointManager(newCheckpointManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the address of contract set as checkpoint manager\\r\\n     * @return The address of checkpoint manager contract\\r\\n     */\\r\\n    function checkpointManagerAddress() external view returns (address) {\\r\\n        return address(s.checkpointManager);\\r\\n    }\\r\\n\\r\\n    event SetOwner(address indexed _previousOwner, address indexed _newOwner);\\r\\n    \\r\\n    function setOwner(address _newOwner) external onlyOwner {        \\r\\n        emit SetOwner(s.owner, _newOwner);\\r\\n        s.owner = _newOwner;\\r\\n    }\\r\\n\\r\\n    event SetMapper(address indexed _previousMapper, address indexed _newMapper);\\r\\n\\r\\n    function setMapper(address _newMapper) external onlyOwner {\\r\\n        emit SetMapper(s.mapper, _newMapper);\\r\\n        s.mapper = _newMapper;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the child chain manager, callable only by admins\\r\\n     * @dev This should be the contract responsible to receive deposit bytes on child chain\\r\\n     * @param newChildChainManager address of child chain manager contract\\r\\n     * @param newChildTokenBytecodeHash hash of bytecode used to create child token\\r\\n     */\\r\\n    function setChildChainManagerAddressAndChildTokenBytecodeHash(address newChildChainManager, bytes32 newChildTokenBytecodeHash)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(newChildChainManager != address(0x0), \\\"ATokenRootChainManager: INVALID_CHILD_CHAIN_ADDRESS\\\");\\r\\n        s.childChainManagerAddress = newChildChainManager;        \\r\\n        s.childTokenBytecodeHash = newChildTokenBytecodeHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the child chain manager, callable only by admins\\r\\n     * @dev This should be the contract responsible to receive deposit bytes on child chain\\r\\n     * @param newChildChainManager address of child chain manager contract     \\r\\n     */\\r\\n    function setChildChainManagerAddress(address newChildChainManager)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(newChildChainManager != address(0x0), \\\"ATokenRootChainManager: INVALID_CHILD_CHAIN_ADDRESS\\\");\\r\\n        s.childChainManagerAddress = newChildChainManager;                \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the child bytecode hash\\r\\n     * @dev This is used by a create2 call to precalculate the child token address\\r\\n     * @param newChildTokenBytecodeHash address of child chain manager contract     \\r\\n     */\\r\\n    function setChildTokenBytecodeHash(bytes32 newChildTokenBytecodeHash)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {        \\r\\n        s.childTokenBytecodeHash = newChildTokenBytecodeHash;                \\r\\n    }\\r\\n\\r\\n    \\r\\n    function childTokenAddress(address rootToken) public view returns (address childToken_) {\\r\\n        // precompute childToken address for mapping\\r\\n        childToken_ = address(uint160(uint(keccak256(abi.encodePacked(\\r\\n            bytes1(0xff),\\r\\n            s.childChainManagerAddress, // contract creating address\\r\\n            bytes32(bytes20(rootToken)), // salt\\r\\n            s.childTokenBytecodeHash // bytecode hash\\r\\n        )))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Map a token to enable its movement via the PoS Portal, callable only by mappers\\r\\n     * @param rootToken address of token on root chain     \\r\\n     */\\r\\n    function mapToken(\\r\\n        address rootToken        \\r\\n    ) external onlyMapper {\\r\\n        // explicit check if token is already mapped to avoid accidental remaps\\r\\n        require(\\r\\n            s.rootToChildToken[rootToken] == address(0),\\r\\n            \\\"ATokenRootChainManager: ALREADY_MAPPED\\\"\\r\\n        );\\r\\n        address childToken = childTokenAddress(rootToken);\\r\\n        _mapToken(rootToken, childToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remap a token that has already been mapped, properly cleans up old mapping\\r\\n     * Callable only by mappers\\r\\n     * @param rootToken address of token on root chain     \\r\\n     */\\r\\n    function remapToken(\\r\\n        address rootToken        \\r\\n    ) external onlyMapper {\\r\\n        address childToken = childTokenAddress(rootToken);\\r\\n        // cleanup old mapping\\r\\n        address oldChildToken = s.rootToChildToken[rootToken];\\r\\n        require(childToken != oldChildToken, \\\"ATokenRootChainManager: Child token is the same\\\");\\r\\n        address oldRootToken = s.childToRootToken[childToken];\\r\\n        if (s.rootToChildToken[oldRootToken] != address(0)) {\\r\\n            s.rootToChildToken[oldRootToken] = address(0);            \\r\\n        }\\r\\n\\r\\n        if (s.childToRootToken[oldChildToken] != address(0)) {\\r\\n            s.childToRootToken[oldChildToken] = address(0);\\r\\n        }      \\r\\n        _mapToken(rootToken, childToken);\\r\\n    }\\r\\n\\r\\n    function _mapToken(\\r\\n        address rootToken,\\r\\n        address childToken\\r\\n    ) private {                        \\r\\n        s.rootToChildToken[rootToken] = childToken;\\r\\n        s.childToRootToken[childToken] = rootToken;        \\r\\n\\r\\n        emit TokenMapped(rootToken, childToken, 0x0);\\r\\n\\r\\n        bytes memory syncData = abi.encode(            \\r\\n            rootToken, \\r\\n            abi.encodePacked('Matic ', IERC20Meta(rootToken).name()),\\r\\n            abi.encodePacked('m',IERC20Meta(rootToken).symbol()),\\r\\n            IERC20Meta(rootToken).decimals()\\r\\n        );\\r\\n        s.stateSender.syncState(\\r\\n            s.childChainManagerAddress,\\r\\n            abi.encode(MAP_TOKEN, syncData)\\r\\n        );\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @notice Move tokens from root to child chain\\r\\n     * @dev This mechanism supports arbitrary tokens as long as its predicate has been registered and the token is mapped\\r\\n     * @param user address of account that should receive this deposit on child chain\\r\\n     * @param rootToken address of token that is being deposited\\r\\n     * @param depositData bytes data that is sent to predicate and child token contracts to handle deposit\\r\\n     */\\r\\n    function depositFor(\\r\\n        address user,\\r\\n        address rootToken,\\r\\n        bytes memory depositData\\r\\n    ) public {        \\r\\n        require(s.rootToChildToken[rootToken] != address(0x0), \\\"ATokenRootChainManager: TOKEN_NOT_MAPPED\\\");\\r\\n        require(\\r\\n            user != address(0),\\r\\n            \\\"ATokenRootChainManager: INVALID_USER\\\"\\r\\n        );\\r\\n\\r\\n        uint256 aTokenValue = abi.decode(depositData, (uint256));\\r\\n        address depositor = msgSender();\\r\\n        emit LockedERC20(depositor, user, rootToken, aTokenValue);\\r\\n        IERC20(rootToken).safeTransferFrom(depositor, address(this), aTokenValue);\\r\\n\\r\\n        uint256 maTokenValue = getMATokenValue(rootToken, aTokenValue);\\r\\n        // replace aTokenValue with maTokenValue in depositData\\r\\n        // assembly increases start of bytes array and reduces the size by one uint256\\r\\n        uint256 depositDataLength = depositData.length;\\r\\n        assembly { \\r\\n            depositData := add(depositData, 32) \\r\\n            mstore(depositData, sub(depositDataLength, 32))\\r\\n        }        \\r\\n        depositData = abi.encodePacked(maTokenValue, depositData);        \\r\\n        bytes memory syncData = abi.encode(user, rootToken, depositData);\\r\\n        s.stateSender.syncState(\\r\\n            s.childChainManagerAddress,\\r\\n            abi.encode(DEPOSIT, syncData)\\r\\n        );\\r\\n    }    \\r\\n     \\r\\n     /**\\r\\n    * @dev Divides two 27 decimal percision values, rounding half up to the nearest decimal\\r\\n    * @param a 27 decimal percision value\\r\\n    * @param b 27 decimal percision value\\r\\n    * @return The result of a/b, in 27 decimal percision value\\r\\n    **/\\r\\n    function p27Div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"p27 division by 0\\\");\\r\\n        uint256 c = a * P27;\\r\\n        require(a == c / P27, \\\"p27 multiplication overflow\\\");      \\r\\n        uint256 bDividedByTwo = b / 2;\\r\\n        c += bDividedByTwo;\\r\\n        require(c >= bDividedByTwo, \\\"p27 multiplication addition overflow\\\");        \\r\\n        return c / b;\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n    * @dev Multiplies two 27 decimal percision values, rounding half up to the nearest decimal\\r\\n    * @param a 27 decimal percision value\\r\\n    * @param b 27 decimal percision value\\r\\n    * @return The result of a*b, in 27 decimal percision value\\r\\n    **/\\r\\n    function p27Mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        if(c == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        require(b == c / a, \\\"p27 multiplication overflow\\\");\\r\\n        c += HALF_P27;\\r\\n        require(c >= HALF_P27, \\\"p27 multiplication addition overflow\\\");\\r\\n        return c / P27;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Converts aToken value to maToken value\\r\\n    * @param _aTokenAddress aToken contract address\\r\\n    * @param _aTokenValue aToken value to convert\\r\\n    * @return maTokenValue_ The converted maToken value\\r\\n    **/\\r\\n    function getMATokenValue(address _aTokenAddress, uint256 _aTokenValue) public returns (uint256 maTokenValue_) {\\r\\n        ILendingPool pool = IAToken(_aTokenAddress).POOL();\\r\\n        uint256 liquidityIndex = pool.getReserveNormalizedIncome(IAToken(_aTokenAddress).UNDERLYING_ASSET_ADDRESS());\\r\\n        maTokenValue_ = p27Div(_aTokenValue, liquidityIndex);        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Converts maToken value to aToken value\\r\\n    * @param _aTokenAddress aToken contract address\\r\\n    * @param _maTokenValue maToken value to convert\\r\\n    * @return aTokenValue_ The converted aToken value\\r\\n    **/\\r\\n    function getATokenValue(address _aTokenAddress, uint256 _maTokenValue) public returns (uint256 aTokenValue_) {\\r\\n        ILendingPool pool = IAToken(_aTokenAddress).POOL();\\r\\n        uint256 liquidityIndex = pool.getReserveNormalizedIncome(IAToken(_aTokenAddress).UNDERLYING_ASSET_ADDRESS());\\r\\n        aTokenValue_ = p27Mul(_maTokenValue, liquidityIndex);        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice exit tokens by providing proof\\r\\n     * @dev This function verifies if the transaction actually happened on child chain\\r\\n     * the transaction log is then sent to token predicate to handle it accordingly\\r\\n     *\\r\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\r\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\r\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\r\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\r\\n     *  3 - blockTime - Reference tx block time\\r\\n     *  4 - txRoot - Transactions root of block\\r\\n     *  5 - receiptRoot - Receipts root of block\\r\\n     *  6 - receipt - Receipt of the reference transaction\\r\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\r\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\r\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\r\\n     */\\r\\n    function exit(bytes calldata inputData) external {\\r\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\\r\\n            .toRlpItem()\\r\\n            .toList();\\r\\n\\r\\n        // checking if exit has already been processed\\r\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\r\\n        bytes32 exitHash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                inputDataRLPList[2].toUint(), // blockNumber\\r\\n                // first 2 nibbles are dropped while generating nibble array\\r\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\r\\n                // so converting to nibble array and then hashing it\\r\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\r\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\r\\n            )\\r\\n        );\\r\\n        require(\\r\\n            s.processedExits[exitHash] == false,\\r\\n            \\\"ATokenRootChainManager: EXIT_ALREADY_PROCESSED\\\"\\r\\n        );\\r\\n        s.processedExits[exitHash] = true;\\r\\n\\r\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\\r\\n            .toBytes()\\r\\n            .toRlpItem()\\r\\n            .toList();\\r\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\\r\\n            .toList()[\\r\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\r\\n            ];\\r\\n\\r\\n        address childToken = RLPReader.toAddress(logRLP.toList()[0]); // log emitter address field\\r\\n        // log should be emmited only by the child token\\r\\n        address rootToken = s.childToRootToken[childToken];\\r\\n        require(\\r\\n            rootToken != address(0),\\r\\n            \\\"ATokenRootChainManager: TOKEN_NOT_MAPPED\\\"\\r\\n        );\\r\\n\\r\\n        // branch mask can be maximum 32 bits\\r\\n        require(\\r\\n            inputDataRLPList[8].toUint() &\\r\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 ==\\r\\n                0,\\r\\n            \\\"ATokenRootChainManager: INVALID_BRANCH_MASK\\\"\\r\\n        );\\r\\n\\r\\n        // verify receipt inclusion\\r\\n        require(\\r\\n            MerklePatriciaProof.verify(\\r\\n                inputDataRLPList[6].toBytes(), // receipt\\r\\n                inputDataRLPList[8].toBytes(), // branchMask\\r\\n                inputDataRLPList[7].toBytes(), // receiptProof\\r\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\r\\n            ),\\r\\n            \\\"ATokenRootChainManager: INVALID_PROOF\\\"\\r\\n        );\\r\\n\\r\\n        // verify checkpoint inclusion\\r\\n        _checkBlockMembershipInCheckpoint(\\r\\n            inputDataRLPList[2].toUint(), // blockNumber\\r\\n            inputDataRLPList[3].toUint(), // blockTime\\r\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\r\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\r\\n            inputDataRLPList[0].toUint(), // headerNumber\\r\\n            inputDataRLPList[1].toBytes() // blockProof\\r\\n        );         \\r\\n\\r\\n        exitTokens(\\r\\n            msgSender(),\\r\\n            s.childToRootToken[childToken],\\r\\n            logRLP.toRlpBytes()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function exitTokens(\\r\\n        address,\\r\\n        address rootToken,\\r\\n        bytes memory log\\r\\n    ) private {\\r\\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\\r\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\r\\n\\r\\n        require(\\r\\n            bytes32(logTopicRLPList[0].toUint()) == TRANSFER_EVENT_SIG, // topic0 is event sig\\r\\n            \\\"ATokenRootChainManager: INVALID_SIGNATURE\\\"\\r\\n        );\\r\\n\\r\\n        address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is from address\\r\\n\\r\\n        require(\\r\\n            address(logTopicRLPList[2].toUint()) == address(0), // topic2 is to address\\r\\n            \\\"ATokenRootChainManager: INVALID_RECEIVER\\\"\\r\\n        );\\r\\n\\r\\n        uint256 maTokenValue = logRLPList[2].toUint(); // log data field\\r\\n        uint256 aTokenValue = getATokenValue(rootToken, maTokenValue);\\r\\n\\r\\n        IERC20(rootToken).safeTransfer(\\r\\n            withdrawer,\\r\\n            aTokenValue\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _checkBlockMembershipInCheckpoint(\\r\\n        uint256 blockNumber,\\r\\n        uint256 blockTime,\\r\\n        bytes32 txRoot,\\r\\n        bytes32 receiptRoot,\\r\\n        uint256 headerNumber,\\r\\n        bytes memory blockProof\\r\\n    ) private view returns (uint256) {\\r\\n        (\\r\\n            bytes32 headerRoot,\\r\\n            uint256 startBlock,\\r\\n            ,\\r\\n            uint256 createdAt,\\r\\n\\r\\n        ) = s.checkpointManager.headerBlocks(headerNumber);\\r\\n\\r\\n        require(\\r\\n            keccak256(\\r\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\r\\n            )\\r\\n                .checkMembership(\\r\\n                blockNumber.sub(startBlock),\\r\\n                headerRoot,\\r\\n                blockProof\\r\\n            ),\\r\\n            \\\"ATokenRootChainManager: INVALID_HEADER\\\"\\r\\n        );\\r\\n        return createdAt;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/root/ICheckpointManager.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n\\r\\ncontract ICheckpointManager {\\r\\n    struct HeaderBlock {\\r\\n        bytes32 root;\\r\\n        uint256 start;\\r\\n        uint256 end;\\r\\n        uint256 createdAt;\\r\\n        address proposer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice mapping of checkpoint header numbers to block details\\r\\n     * @dev These checkpoints are submited by plasma contracts\\r\\n     */\\r\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/RLPReader.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n/*\\r\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\r\\n * Please reach out with any questions or concerns\\r\\n * https://github.com/hamdiallam/Solidity-RLP/blob/e681e25a376dbd5426b509380bc03446f05d0f97/contracts/RLPReader.sol\\r\\n */\\r\\n\\r\\nlibrary RLPReader {\\r\\n    uint8 constant STRING_SHORT_START = 0x80;\\r\\n    uint8 constant STRING_LONG_START = 0xb8;\\r\\n    uint8 constant LIST_SHORT_START = 0xc0;\\r\\n    uint8 constant LIST_LONG_START = 0xf8;\\r\\n    uint8 constant WORD_SIZE = 32;\\r\\n\\r\\n    struct RLPItem {\\r\\n        uint256 len;\\r\\n        uint256 memPtr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @param item RLP encoded bytes\\r\\n     */\\r\\n    function toRlpItem(bytes memory item)\\r\\n        internal\\r\\n        pure\\r\\n        returns (RLPItem memory)\\r\\n    {\\r\\n        require(item.length > 0, \\\"RLPReader: INVALID_BYTES_LENGTH\\\");\\r\\n        uint256 memPtr;\\r\\n        assembly {\\r\\n            memPtr := add(item, 0x20)\\r\\n        }\\r\\n\\r\\n        return RLPItem(item.length, memPtr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @param item RLP encoded list in bytes\\r\\n     */\\r\\n    function toList(RLPItem memory item)\\r\\n        internal\\r\\n        pure\\r\\n        returns (RLPItem[] memory)\\r\\n    {\\r\\n        require(isList(item), \\\"RLPReader: ITEM_NOT_LIST\\\");\\r\\n\\r\\n        uint256 items = numItems(item);\\r\\n        RLPItem[] memory result = new RLPItem[](items);\\r\\n        uint256 listLength = _itemLength(item.memPtr);\\r\\n        require(listLength == item.len, \\\"RLPReader: LIST_DECODED_LENGTH_MISMATCH\\\");\\r\\n\\r\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\r\\n        uint256 dataLen;\\r\\n        for (uint256 i = 0; i < items; i++) {\\r\\n            dataLen = _itemLength(memPtr);\\r\\n            result[i] = RLPItem(dataLen, memPtr);\\r\\n            memPtr = memPtr + dataLen;\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\r\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\r\\n        uint8 byte0;\\r\\n        uint256 memPtr = item.memPtr;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < LIST_SHORT_START) return false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** RLPItem conversions into data types **/\\r\\n\\r\\n    // @returns raw rlp encoding in bytes\\r\\n    function toRlpBytes(RLPItem memory item)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory result = new bytes(item.len);\\r\\n\\r\\n        uint256 ptr;\\r\\n        assembly {\\r\\n            ptr := add(0x20, result)\\r\\n        }\\r\\n\\r\\n        copy(item.memPtr, ptr, item.len);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\r\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_ADDRESS\\\");\\r\\n        // 1 byte for the length prefix\\r\\n        require(item.len == 21, \\\"RLPReader: INVALID_ADDRESS_LENGTH\\\");\\r\\n\\r\\n        return address(toUint(item));\\r\\n    }\\r\\n\\r\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\r\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_UINT\\\");\\r\\n        require(item.len <= 33, \\\"RLPReader: INVALID_UINT_LENGTH\\\");\\r\\n\\r\\n        uint256 itemLength = _itemLength(item.memPtr);\\r\\n        require(itemLength == item.len, \\\"RLPReader: UINT_DECODED_LENGTH_MISMATCH\\\");\\r\\n\\r\\n        uint256 offset = _payloadOffset(item.memPtr);\\r\\n        uint256 len = item.len - offset;\\r\\n        uint256 result;\\r\\n        uint256 memPtr = item.memPtr + offset;\\r\\n        assembly {\\r\\n            result := mload(memPtr)\\r\\n\\r\\n            // shfit to the correct location if neccesary\\r\\n            if lt(len, 32) {\\r\\n                result := div(result, exp(256, sub(32, len)))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // enforces 32 byte length\\r\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\r\\n        uint256 itemLength = _itemLength(item.memPtr);\\r\\n        require(itemLength == item.len, \\\"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\\\");\\r\\n        // one byte prefix\\r\\n        require(item.len == 33, \\\"RLPReader: INVALID_UINT_STRICT_LENGTH\\\");\\r\\n\\r\\n        uint256 result;\\r\\n        uint256 memPtr = item.memPtr + 1;\\r\\n        assembly {\\r\\n            result := mload(memPtr)\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\r\\n        uint256 listLength = _itemLength(item.memPtr);\\r\\n        require(listLength == item.len, \\\"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\\\");\\r\\n        uint256 offset = _payloadOffset(item.memPtr);\\r\\n\\r\\n        uint256 len = item.len - offset; // data length\\r\\n        bytes memory result = new bytes(len);\\r\\n\\r\\n        uint256 destPtr;\\r\\n        assembly {\\r\\n            destPtr := add(0x20, result)\\r\\n        }\\r\\n\\r\\n        copy(item.memPtr + offset, destPtr, len);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Private Helpers\\r\\n     */\\r\\n\\r\\n    // @return number of payload items inside an encoded list.\\r\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\r\\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\\r\\n        // require(isList(item), \\\"RLPReader: NUM_ITEMS_NOT_LIST\\\");\\r\\n\\r\\n        uint256 count = 0;\\r\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\r\\n        uint256 endPtr = item.memPtr + item.len;\\r\\n        while (currPtr < endPtr) {\\r\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\r\\n            require(currPtr <= endPtr, \\\"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\\\");\\r\\n            count++;\\r\\n        }\\r\\n\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    // @return entire rlp item byte length\\r\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\r\\n        uint256 itemLen;\\r\\n        uint256 byte0;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\r\\n        else if (byte0 < STRING_LONG_START)\\r\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\r\\n        else if (byte0 < LIST_SHORT_START) {\\r\\n            assembly {\\r\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\r\\n                memPtr := add(memPtr, 1) // skip over the first byte\\r\\n\\r\\n                /* 32 byte word size */\\r\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\r\\n                itemLen := add(dataLen, add(byteLen, 1))\\r\\n            }\\r\\n        } else if (byte0 < LIST_LONG_START) {\\r\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\r\\n        } else {\\r\\n            assembly {\\r\\n                let byteLen := sub(byte0, 0xf7)\\r\\n                memPtr := add(memPtr, 1)\\r\\n\\r\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\r\\n                itemLen := add(dataLen, add(byteLen, 1))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return itemLen;\\r\\n    }\\r\\n\\r\\n    // @return number of bytes until the data\\r\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\r\\n        uint256 byte0;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < STRING_SHORT_START) return 0;\\r\\n        else if (\\r\\n            byte0 < STRING_LONG_START ||\\r\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\r\\n        ) return 1;\\r\\n        else if (byte0 < LIST_SHORT_START)\\r\\n            // being explicit\\r\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\r\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @param src Pointer to source\\r\\n     * @param dest Pointer to destination\\r\\n     * @param len Amount of memory to copy from the source\\r\\n     */\\r\\n    function copy(\\r\\n        uint256 src,\\r\\n        uint256 dest,\\r\\n        uint256 len\\r\\n    ) private pure {\\r\\n        if (len == 0) return;\\r\\n\\r\\n        // copy as many word sizes as possible\\r\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n\\r\\n            src += WORD_SIZE;\\r\\n            dest += WORD_SIZE;\\r\\n        }\\r\\n\\r\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\r\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\r\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/MerklePatriciaProof.sol\": {\r\n      \"content\": \"/*\\r\\n * @title MerklePatriciaVerifier\\r\\n * @author Sam Mayo (sammayo888@gmail.com)\\r\\n *\\r\\n * @dev Library for verifing merkle patricia proofs.\\r\\n */\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\r\\n\\r\\nlibrary MerklePatriciaProof {\\r\\n    /*\\r\\n     * @dev Verifies a merkle patricia proof.\\r\\n     * @param value The terminating value in the trie.\\r\\n     * @param encodedPath The path in the trie leading to value.\\r\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\r\\n     * @param root The root hash of the trie.\\r\\n     * @return The boolean validity of the proof.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes memory value,\\r\\n        bytes memory encodedPath,\\r\\n        bytes memory rlpParentNodes,\\r\\n        bytes32 root\\r\\n    ) internal pure returns (bool) {\\r\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\r\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\r\\n\\r\\n        bytes memory currentNode;\\r\\n        RLPReader.RLPItem[] memory currentNodeList;\\r\\n\\r\\n        bytes32 nodeKey = root;\\r\\n        uint256 pathPtr = 0;\\r\\n\\r\\n        bytes memory path = _getNibbleArray(encodedPath);\\r\\n        if (path.length == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\r\\n            if (pathPtr > path.length) {\\r\\n                return false;\\r\\n            }\\r\\n\\r\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\r\\n            if (nodeKey != keccak256(currentNode)) {\\r\\n                return false;\\r\\n            }\\r\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\r\\n\\r\\n            if (currentNodeList.length == 17) {\\r\\n                if (pathPtr == path.length) {\\r\\n                    if (\\r\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\r\\n                        keccak256(value)\\r\\n                    ) {\\r\\n                        return true;\\r\\n                    } else {\\r\\n                        return false;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\r\\n                if (nextPathNibble > 16) {\\r\\n                    return false;\\r\\n                }\\r\\n                nodeKey = bytes32(\\r\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\r\\n                );\\r\\n                pathPtr += 1;\\r\\n            } else if (currentNodeList.length == 2) {\\r\\n                uint256 traversed = _nibblesToTraverse(\\r\\n                    RLPReader.toBytes(currentNodeList[0]),\\r\\n                    path,\\r\\n                    pathPtr\\r\\n                );\\r\\n                if (pathPtr + traversed == path.length) {\\r\\n                    //leaf node\\r\\n                    if (\\r\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\r\\n                        keccak256(value)\\r\\n                    ) {\\r\\n                        return true;\\r\\n                    } else {\\r\\n                        return false;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                //extension node\\r\\n                if (traversed == 0) {\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                pathPtr += traversed;\\r\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\r\\n            } else {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _nibblesToTraverse(\\r\\n        bytes memory encodedPartialPath,\\r\\n        bytes memory path,\\r\\n        uint256 pathPtr\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 len = 0;\\r\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\r\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\r\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\r\\n        bytes memory slicedPath = new bytes(partialPath.length);\\r\\n\\r\\n        // pathPtr counts nibbles in path\\r\\n        // partialPath.length is a number of nibbles\\r\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\r\\n            bytes1 pathNibble = path[i];\\r\\n            slicedPath[i - pathPtr] = pathNibble;\\r\\n        }\\r\\n\\r\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\r\\n            len = partialPath.length;\\r\\n        } else {\\r\\n            len = 0;\\r\\n        }\\r\\n        return len;\\r\\n    }\\r\\n\\r\\n    // bytes b must be hp encoded\\r\\n    function _getNibbleArray(bytes memory b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory nibbles = \\\"\\\";\\r\\n        if (b.length > 0) {\\r\\n            uint8 offset;\\r\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\r\\n            if (hpNibble == 1 || hpNibble == 3) {\\r\\n                nibbles = new bytes(b.length * 2 - 1);\\r\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\r\\n                nibbles[0] = oddNibble;\\r\\n                offset = 1;\\r\\n            } else {\\r\\n                nibbles = new bytes(b.length * 2 - 2);\\r\\n                offset = 0;\\r\\n            }\\r\\n\\r\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\r\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\r\\n            }\\r\\n        }\\r\\n        return nibbles;\\r\\n    }\\r\\n\\r\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\r\\n        private\\r\\n        pure\\r\\n        returns (bytes1)\\r\\n    {\\r\\n        return\\r\\n            bytes1(\\r\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Merkle.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n\\r\\n\\r\\nlibrary Merkle {\\r\\n    function checkMembership(\\r\\n        bytes32 leaf,\\r\\n        uint256 index,\\r\\n        bytes32 rootHash,\\r\\n        bytes memory proof\\r\\n    ) internal pure returns (bool) {\\r\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\r\\n        uint256 proofHeight = proof.length / 32;\\r\\n        // Proof of size n means, height of the tree is n+1.\\r\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\r\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\r\\n\\r\\n        bytes32 proofElement;\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\r\\n            assembly {\\r\\n                proofElement := mload(add(proof, i))\\r\\n            }\\r\\n\\r\\n            if (index % 2 == 0) {\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(computedHash, proofElement)\\r\\n                );\\r\\n            } else {\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(proofElement, computedHash)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            index = index / 2;\\r\\n        }\\r\\n        return computedHash == rootHash;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/NativeMetaTransaction.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {EIP712Base} from \\\"./EIP712Base.sol\\\";\\r\\n\\r\\ncontract NativeMetaTransaction is EIP712Base {\\r\\n    using SafeMath for uint256;\\r\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\r\\n        )\\r\\n    );\\r\\n    event MetaTransactionExecuted(\\r\\n        address userAddress,\\r\\n        address payable relayerAddress,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n    mapping(address => uint256) nonces;\\r\\n\\r\\n    /*\\r\\n     * Meta transaction structure.\\r\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\r\\n     * He should call the desired function directly in that case.\\r\\n     */\\r\\n    struct MetaTransaction {\\r\\n        uint256 nonce;\\r\\n        address from;\\r\\n        bytes functionSignature;\\r\\n    }\\r\\n\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public payable returns (bytes memory) {\\r\\n        MetaTransaction memory metaTx = MetaTransaction({\\r\\n            nonce: nonces[userAddress],\\r\\n            from: userAddress,\\r\\n            functionSignature: functionSignature\\r\\n        });\\r\\n\\r\\n        require(\\r\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n\\r\\n        // increase nonce for user (to avoid re-use)\\r\\n        nonces[userAddress] = nonces[userAddress].add(1);\\r\\n\\r\\n        emit MetaTransactionExecuted(\\r\\n            userAddress,\\r\\n            msg.sender,\\r\\n            functionSignature\\r\\n        );\\r\\n\\r\\n        // Append userAddress and relayer address at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(\\r\\n            abi.encodePacked(functionSignature, userAddress)\\r\\n        );\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    META_TRANSACTION_TYPEHASH,\\r\\n                    metaTx.nonce,\\r\\n                    metaTx.from,\\r\\n                    keccak256(metaTx.functionSignature)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getNonce(address user) public view returns (uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address signer,\\r\\n        MetaTransaction memory metaTx,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\r\\n        return\\r\\n            signer ==\\r\\n            ecrecover(\\r\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\r\\n                sigV,\\r\\n                sigR,\\r\\n                sigS\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/common/ContextMixin.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n\\r\\n\\r\\nabstract contract ContextMixin {\\r\\n    function msgSender()\\r\\n        internal\\r\\n        view\\r\\n        returns (address payable sender)\\r\\n    {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            sender = msg.sender;\\r\\n        }\\r\\n        return sender;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/root/StateSender/IStateSender.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n\\r\\ninterface IStateSender {\\r\\n    function syncState(address receiver, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/EIP712Base.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n\\r\\n\\r\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\r\\n\\r\\ncontract EIP712Base is Initializable {\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n        address verifyingContract;\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    string constant public ERC712_VERSION = \\\"1\\\";\\r\\n\\r\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\r\\n        )\\r\\n    );\\r\\n    bytes32 internal domainSeperator;\\r\\n\\r\\n    // supposed to be called once while initializing.\\r\\n    // one of the contractsa that inherits this contract follows proxy pattern\\r\\n    // so it is not possible to do this in a constructor\\r\\n    function _initializeEIP712(\\r\\n        string memory name\\r\\n    )\\r\\n        internal\\r\\n        initializer\\r\\n    {\\r\\n        _setDomainSeperator(name);\\r\\n    }\\r\\n\\r\\n    function _setDomainSeperator(string memory name) internal {\\r\\n        domainSeperator = keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(ERC712_VERSION)),\\r\\n                address(this),\\r\\n                bytes32(getChainId())\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getDomainSeperator() public view returns (bytes32) {\\r\\n        return domainSeperator;\\r\\n    }\\r\\n\\r\\n    function getChainId() public pure returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Accept message hash and returns hash message in EIP712 compatible form\\r\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\r\\n     * https://eips.ethereum.org/EIPS/eip-712\\r\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\r\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\r\\n     */\\r\\n    function toTypedMessageHash(bytes32 messageHash)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/Initializable.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\r\\n\\r\\ncontract Initializable {\\r\\n    bool inited = false;\\r\\n\\r\\n    modifier initializer() {\\r\\n        require(!inited, \\\"already inited\\\");\\r\\n        _;\\r\\n        inited = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousMapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newMapper\",\"type\":\"address\"}],\"name\":\"SetMapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenType\",\"type\":\"bytes32\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAPPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAP_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childToken\",\"type\":\"address\"}],\"name\":\"childToRootToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"}],\"name\":\"childTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"childToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maTokenValue\",\"type\":\"uint256\"}],\"name\":\"getATokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aTokenValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aTokenValue\",\"type\":\"uint256\"}],\"name\":\"getMATokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maTokenValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"headerBlocks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stateSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childChainManagerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_childTokenBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"}],\"name\":\"mapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_exitHash\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"}],\"name\":\"remapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rootToken\",\"type\":\"address\"}],\"name\":\"rootToChildToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCheckpointManager\",\"type\":\"address\"}],\"name\":\"setCheckpointManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildChainManager\",\"type\":\"address\"}],\"name\":\"setChildChainManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildChainManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"newChildTokenBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"setChildChainManagerAddressAndChildTokenBytecodeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newChildTokenBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"setChildTokenBytecodeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMapper\",\"type\":\"address\"}],\"name\":\"setMapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStateSender\",\"type\":\"address\"}],\"name\":\"setStateSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateSenderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ATokenRootChainManager","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}