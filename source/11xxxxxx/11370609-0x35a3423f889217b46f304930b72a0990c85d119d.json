{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\t\t// for accounts without code, i.e. `keccak256('')`\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly { codehash := extcodehash(account) }\r\n\t\treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain`call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t  return functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n\t}\r\n\r\n\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deprecated. This function has issues similar to the ones found in\r\n\t * {IERC20-approve}, and its usage is discouraged.\r\n\t *\r\n\t * Whenever possible, use {safeIncreaseAllowance} and\r\n\t * {safeDecreaseAllowance} instead.\r\n\t */\r\n\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\t\t// safeApprove should only be called when setting an initial allowance,\r\n\t\t// or when resetting it to zero. To increase and decrease it, use\r\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n\t\tbytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n\t\tif (returndata.length > 0) { // Return data is optional\r\n\t\t\t// solhint-disable-next-line max-line-length\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n\t// To implement this library for multiple types with as little code\r\n\t// repetition as possible, we write it in terms of a generic Set type with\r\n\t// bytes32 values.\r\n\t// The Set implementation uses private functions, and user-facing\r\n\t// implementations (such as AddressSet) are just wrappers around the\r\n\t// underlying Set.\r\n\t// This means that we can only create new EnumerableSets for types that fit\r\n\t// in bytes32.\r\n\r\n\tstruct Set {\r\n\t\t// Storage of set values\r\n\t\tbytes32[] _values;\r\n\r\n\t\t// Position of the value in the `values` array, plus 1 because index 0\r\n\t\t// means a value is not in the set.\r\n\t\tmapping (bytes32 => uint256) _indexes;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction _add(Set storage set, bytes32 value) private returns (bool) {\r\n\t\tif (!_contains(set, value)) {\r\n\t\t\tset._values.push(value);\r\n\t\t\t// The value is stored at length-1, but we add 1 to all indexes\r\n\t\t\t// and use 0 as a sentinel value\r\n\t\t\tset._indexes[value] = set._values.length;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction _remove(Set storage set, bytes32 value) private returns (bool) {\r\n\t\t// We read and store the value's index to prevent multiple reads from the same storage slot\r\n\t\tuint256 valueIndex = set._indexes[value];\r\n\r\n\t\tif (valueIndex != 0) { // Equivalent to contains(set, value)\r\n\t\t\t// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n\t\t\t// the array, and then remove the last element (sometimes called as 'swap and pop').\r\n\t\t\t// This modifies the order of the array, as noted in {at}.\r\n\r\n\t\t\tuint256 toDeleteIndex = valueIndex - 1;\r\n\t\t\tuint256 lastIndex = set._values.length - 1;\r\n\r\n\t\t\t// When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n\t\t\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n\t\t\tbytes32 lastvalue = set._values[lastIndex];\r\n\r\n\t\t\t// Move the last value to the index where the value to delete is\r\n\t\t\tset._values[toDeleteIndex] = lastvalue;\r\n\t\t\t// Update the index for the moved value\r\n\t\t\tset._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n\t\t\t// Delete the slot where the moved value was stored\r\n\t\t\tset._values.pop();\r\n\r\n\t\t\t// Delete the index for the deleted slot\r\n\t\t\tdelete set._indexes[value];\r\n\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n\t\treturn set._indexes[value] != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction _length(Set storage set) private view returns (uint256) {\r\n\t\treturn set._values.length;\r\n\t}\r\n\r\n   /**\r\n\t* @dev Returns the value stored at position `index` in the set. O(1).\r\n\t*\r\n\t* Note that there are no guarantees on the ordering of values inside the\r\n\t* array, and it may change when more values are added or removed.\r\n\t*\r\n\t* Requirements:\r\n\t*\r\n\t* - `index` must be strictly less than {length}.\r\n\t*/\r\n\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n\t\trequire(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n\t\treturn set._values[index];\r\n\t}\r\n\r\n\t// AddressSet\r\n\r\n\tstruct AddressSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values in the set. O(1).\r\n\t */\r\n\tfunction length(AddressSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n   /**\r\n\t* @dev Returns the value stored at position `index` in the set. O(1).\r\n\t*\r\n\t* Note that there are no guarantees on the ordering of values inside the\r\n\t* array, and it may change when more values are added or removed.\r\n\t*\r\n\t* Requirements:\r\n\t*\r\n\t* - `index` must be strictly less than {length}.\r\n\t*/\r\n\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n\t\treturn address(uint256(_at(set._inner, index)));\r\n\t}\r\n\r\n\r\n\t// UintSet\r\n\r\n\tstruct UintSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction length(UintSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n   /**\r\n\t* @dev Returns the value stored at position `index` in the set. O(1).\r\n\t*\r\n\t* Note that there are no guarantees on the ordering of values inside the\r\n\t* array, and it may change when more values are added or removed.\r\n\t*\r\n\t* Requirements:\r\n\t*\r\n\t* - `index` must be strictly less than {length}.\r\n\t*/\r\n\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n\t\treturn uint256(_at(set._inner, index));\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\taddress private _timelock;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor () internal {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\t_timelock = _owner;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_timelock == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tmapping (address => uint256) private _balances;\r\n\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n\t * a default value of 18.\r\n\t *\r\n\t * To select a different value for {decimals}, use {_setupDecimals}.\r\n\t *\r\n\t * All three of these values are immutable: they can only be set once during\r\n\t * construction.\r\n\t */\r\n\tconstructor (string memory name, string memory symbol) public {\r\n\t\t_name = name;\r\n\t\t_symbol = symbol;\r\n\t\t_decimals = 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n\t * called.\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t */\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {ERC20};\r\n\t *\r\n\t * Requirements:\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for ``sender``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n\t *\r\n\t * This is internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t * the total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `from` set to the zero address.\r\n\t *\r\n\t * Requirements\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n\t *\r\n\t * This is internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets {decimals} to a value other than the default one of 18.\r\n\t *\r\n\t * WARNING: This function should only be called from the constructor. Most\r\n\t * applications that interact with token contracts will not expect\r\n\t * {decimals} to ever change, and may work incorrectly if it does.\r\n\t */\r\n\tfunction _setupDecimals(uint8 decimals_) internal {\r\n\t\t_decimals = decimals_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * will be to transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/HoneyToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n// HoneyToken with Governance.\r\ncontract HoneyToken is ERC20(\"HoneyToken\", \"HONEY\"), Ownable {\r\n\t/// @notice Creates `_amount` token to `_to`. Must only be called by the owner (BeeHive).\r\n\tfunction mint(address _to, uint256 _amount) public onlyOwner {\r\n\t\t_mint(_to, _amount);\r\n\t\t_moveDelegates(address(0), _delegates[_to], _amount);\r\n\t}\r\n\r\n\t// Copied and modified from YAM code:\r\n\t// https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n\t// https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n\t// Which is copied and modified from COMPOUND:\r\n\t// https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n\t/// @notice A record of each accounts delegate\r\n\tmapping (address => address) internal _delegates;\r\n\r\n\t/// @notice A checkpoint for marking number of votes from a given block\r\n\tstruct Checkpoint {\r\n\t\tuint32 fromBlock;\r\n\t\tuint256 votes;\r\n\t}\r\n\r\n\t/// @notice A record of votes checkpoints for each account, by index\r\n\tmapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n\t/// @notice The number of checkpoints for each account\r\n\tmapping (address => uint32) public numCheckpoints;\r\n\r\n\t/// @notice The EIP-712 typehash for the contract's domain\r\n\tbytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n\t/// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n\tbytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n\t/// @notice A record of states for signing / validating signatures\r\n\tmapping (address => uint) public nonces;\r\n\r\n\t  /// @notice An event thats emitted when an account changes its delegate\r\n\tevent DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n\t/// @notice An event thats emitted when a delegate account's vote balance changes\r\n\tevent DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n\t/**\r\n\t * @notice Delegate votes from `msg.sender` to `delegatee`\r\n\t * @param delegator The address to get delegatee for\r\n\t */\r\n\tfunction delegates(address delegator)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address)\r\n\t{\r\n\t\treturn _delegates[delegator];\r\n\t}\r\n\r\n   /**\r\n\t* @notice Delegate votes from `msg.sender` to `delegatee`\r\n\t* @param delegatee The address to delegate votes to\r\n\t*/\r\n\tfunction delegate(address delegatee) external {\r\n\t\treturn _delegate(msg.sender, delegatee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Delegates votes from signatory to `delegatee`\r\n\t * @param delegatee The address to delegate votes to\r\n\t * @param nonce The contract state required to match the signature\r\n\t * @param expiry The time at which to expire the signature\r\n\t * @param v The recovery byte of the signature\r\n\t * @param r Half of the ECDSA signature pair\r\n\t * @param s Half of the ECDSA signature pair\r\n\t */\r\n\tfunction delegateBySig(\r\n\t\taddress delegatee,\r\n\t\tuint nonce,\r\n\t\tuint expiry,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t)\r\n\t\texternal\r\n\t{\r\n\t\tbytes32 domainSeparator = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tDOMAIN_TYPEHASH,\r\n\t\t\t\tkeccak256(bytes(name())),\r\n\t\t\t\tgetChainId(),\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tbytes32 structHash = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tDELEGATION_TYPEHASH,\r\n\t\t\t\tdelegatee,\r\n\t\t\t\tnonce,\r\n\t\t\t\texpiry\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tbytes32 digest = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\t\"\\x19\\x01\",\r\n\t\t\t\tdomainSeparator,\r\n\t\t\t\tstructHash\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\taddress signatory = ecrecover(digest, v, r, s);\r\n\t\trequire(signatory != address(0), \"HONEY::delegateBySig: invalid signature\");\r\n\t\trequire(nonce == nonces[signatory]++, \"HONEY::delegateBySig: invalid nonce\");\r\n\t\trequire(now <= expiry, \"HONEY::delegateBySig: signature expired\");\r\n\t\treturn _delegate(signatory, delegatee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Gets the current votes balance for `account`\r\n\t * @param account The address to get votes balance\r\n\t * @return The number of current votes for `account`\r\n\t */\r\n\tfunction getCurrentVotes(address account)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint32 nCheckpoints = numCheckpoints[account];\r\n\t\treturn nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Determine the prior number of votes for an account as of a block number\r\n\t * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n\t * @param account The address of the account to check\r\n\t * @param blockNumber The block number to get the vote balance at\r\n\t * @return The number of votes the account had as of the given block\r\n\t */\r\n\tfunction getPriorVotes(address account, uint blockNumber)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\trequire(blockNumber < block.number, \"HONEY::getPriorVotes: not yet determined\");\r\n\r\n\t\tuint32 nCheckpoints = numCheckpoints[account];\r\n\t\tif (nCheckpoints == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// First check most recent balance\r\n\t\tif (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n\t\t\treturn checkpoints[account][nCheckpoints - 1].votes;\r\n\t\t}\r\n\r\n\t\t// Next check implicit zero balance\r\n\t\tif (checkpoints[account][0].fromBlock > blockNumber) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint32 lower = 0;\r\n\t\tuint32 upper = nCheckpoints - 1;\r\n\t\twhile (upper > lower) {\r\n\t\t\tuint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n\t\t\tCheckpoint memory cp = checkpoints[account][center];\r\n\t\t\tif (cp.fromBlock == blockNumber) {\r\n\t\t\t\treturn cp.votes;\r\n\t\t\t} else if (cp.fromBlock < blockNumber) {\r\n\t\t\t\tlower = center;\r\n\t\t\t} else {\r\n\t\t\t\tupper = center - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn checkpoints[account][lower].votes;\r\n\t}\r\n\r\n\tfunction _delegate(address delegator, address delegatee)\r\n\t\tinternal\r\n\t{\r\n\t\taddress currentDelegate = _delegates[delegator];\r\n\t\tuint256 delegatorBalance = balanceOf(delegator); // balance of underlying HONEYs (not scaled);\r\n\t\t_delegates[delegator] = delegatee;\r\n\r\n\t\temit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n\t\t_moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n\t}\r\n\r\n\tfunction _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n\t\tif (srcRep != dstRep && amount > 0) {\r\n\t\t\tif (srcRep != address(0)) {\r\n\t\t\t\t// decrease old representative\r\n\t\t\t\tuint32 srcRepNum = numCheckpoints[srcRep];\r\n\t\t\t\tuint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n\t\t\t\tuint256 srcRepNew = srcRepOld.sub(amount);\r\n\t\t\t\t_writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n\t\t\t}\r\n\r\n\t\t\tif (dstRep != address(0)) {\r\n\t\t\t\t// increase new representative\r\n\t\t\t\tuint32 dstRepNum = numCheckpoints[dstRep];\r\n\t\t\t\tuint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n\t\t\t\tuint256 dstRepNew = dstRepOld.add(amount);\r\n\t\t\t\t_writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _writeCheckpoint(\r\n\t\taddress delegatee,\r\n\t\tuint32 nCheckpoints,\r\n\t\tuint256 oldVotes,\r\n\t\tuint256 newVotes\r\n\t)\r\n\t\tinternal\r\n\t{\r\n\t\tuint32 blockNumber = safe32(block.number, \"HONEY::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n\t\tif (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n\t\t\tcheckpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n\t\t} else {\r\n\t\t\tcheckpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n\t\t\tnumCheckpoints[delegatee] = nCheckpoints + 1;\r\n\t\t}\r\n\r\n\t\temit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n\t}\r\n\r\n\tfunction safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n\t\trequire(n < 2**32, errorMessage);\r\n\t\treturn uint32(n);\r\n\t}\r\n\r\n\tfunction getChainId() internal pure returns (uint) {\r\n\t\tuint256 chainId;\r\n\t\tassembly { chainId := chainid() }\r\n\t\treturn chainId;\r\n\t}\r\n}\r\n\r\n// File: contracts/BeeHive.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IMigratorChef {\r\n\t// Perform LP token migration from legacy UniswapV2 to HoneyDex.\r\n\t// Take the current LP token address and return the new LP token address.\r\n\t// Migrator should have full access to the caller's LP token.\r\n\t// Return the new LP token address.\r\n\t//\r\n\t// XXX Migrator must have allowance access to UniswapV2 LP tokens.\r\n\t// HoneyDex must mint EXACTLY the same amount of HoneyDex LP tokens or\r\n\t// else something bad will happen. Traditional UniswapV2 does not\r\n\t// do that so be careful!\r\n\tfunction migrate(IERC20 token) external returns (IERC20);\r\n}\r\n\r\n// BeeHive is the master of Honey. He can make Honey and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once HONEY is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract BeeHive is Ownable {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// Info of each user.\r\n\tstruct UserInfo {\r\n\t\tuint256 amount;     // How many LP tokens the user has provided.\r\n\t\tuint256 rewardDebt; // Reward debt. See explanation below.\r\n\t\t//\r\n\t\t// We do some fancy math here. Basically, any point in time, the amount of HONEYs\r\n\t\t// entitled to a user but is pending to be distributed is:\r\n\t\t//\r\n\t\t//   pending reward = (user.amount * pool.accHoneyPerShare) - user.rewardDebt\r\n\t\t//\r\n\t\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n\t\t//   1. The pool's `accHoneyPerShare` (and `lastRewardBlock`) gets updated.\r\n\t\t//   2. User receives the pending reward sent to his/her address.\r\n\t\t//   3. User's `amount` gets updated.\r\n\t\t//   4. User's `rewardDebt` gets updated.\r\n\t}\r\n\r\n\t// Info of each pool.\r\n\tstruct PoolInfo {\r\n\t\tIERC20 lpToken;           // Address of LP token contract.\r\n\t\tuint256 allocPoint;       // How many allocation points assigned to this pool. HONEYs to distribute per block.\r\n\t\tuint256 lastRewardBlock;  // Last block number that HONEYs distribution occurs.\r\n\t\tuint256 accHoneyPerShare; // Accumulated HONEYs per share, times 1e12. See below.\r\n\t}\r\n\r\n\t// The HONEY TOKEN!\r\n\tHoneyToken public honey;\r\n\t// Dev address.\r\n\taddress public devaddr;\r\n\t// Block number when bonus HONEY period ends.\r\n\tuint256 public bonusEndBlock;\r\n\t// HONEY tokens created per block.\r\n\tuint256 public honeyPerBlock;\r\n\t// Bonus muliplier for early honey makers.\r\n\tuint256 public constant BONUS_MULTIPLIER = 10;\r\n\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\r\n\tIMigratorChef public migrator;\r\n\r\n\t// Info of each pool.\r\n\tPoolInfo[] public poolInfo;\r\n\t// Info of each user that stakes LP tokens.\r\n\tmapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n\t// Total allocation points. Must be the sum of all allocation points in all pools.\r\n\tuint256 public totalAllocPoint = 0;\r\n\t// The block number when HONEY mining starts.\r\n\tuint256 public startBlock;\r\n\r\n\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n\tconstructor(\r\n\t\tHoneyToken _honey,\r\n\t\taddress _devaddr,\r\n\t\tuint256 _honeyPerBlock,\r\n\t\tuint256 _startBlock,\r\n\t\tuint256 _bonusEndBlock\r\n\t) public {\r\n\t\thoney = _honey;\r\n\t\tdevaddr = _devaddr;\r\n\t\thoneyPerBlock = _honeyPerBlock;\r\n\t\tbonusEndBlock = _bonusEndBlock;\r\n\t\tstartBlock = _startBlock;\r\n\t}\r\n\r\n\tfunction poolLength() external view returns (uint256) {\r\n\t\treturn poolInfo.length;\r\n\t}\r\n\r\n\t// Add a new lp to the pool. Can only be called by the owner.\r\n\t// XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n\tfunction add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\r\n\t\tif (_withUpdate) {\r\n\t\t\tmassUpdatePools();\r\n\t\t}\r\n\t\tuint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n\t\ttotalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n\t\tpoolInfo.push(PoolInfo({\r\n\t\t\tlpToken: _lpToken,\r\n\t\t\tallocPoint: _allocPoint,\r\n\t\t\tlastRewardBlock: lastRewardBlock,\r\n\t\t\taccHoneyPerShare: 0\r\n\t\t}));\r\n\t}\r\n\r\n\t// Update the given pool's HONEY allocation point. Can only be called by the owner.\r\n\tfunction set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n\t\tif (_withUpdate) {\r\n\t\t\tmassUpdatePools();\r\n\t\t}\r\n\t\ttotalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n\t\tpoolInfo[_pid].allocPoint = _allocPoint;\r\n\t}\r\n\r\n\t// Set the migrator contract. Can only be called by the owner.\r\n\tfunction setMigrator(IMigratorChef _migrator) public onlyOwner {\r\n\t\tmigrator = _migrator;\r\n\t}\r\n\r\n\t// Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\r\n\tfunction migrate(uint256 _pid) public {\r\n\t\trequire(address(migrator) != address(0), \"migrate: no migrator\");\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tIERC20 lpToken = pool.lpToken;\r\n\t\tuint256 bal = lpToken.balanceOf(address(this));\r\n\t\tlpToken.safeApprove(address(migrator), bal);\r\n\t\tIERC20 newLpToken = migrator.migrate(lpToken);\r\n\t\trequire(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\r\n\t\tpool.lpToken = newLpToken;\r\n\t}\r\n\r\n\t// Return reward multiplier over the given _from to _to block.\r\n\tfunction getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n\t\tif (_to <= bonusEndBlock) {\r\n\t\t\treturn _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n\t\t} else if (_from >= bonusEndBlock) {\r\n\t\t\treturn _to.sub(_from);\r\n\t\t} else {\r\n\t\t\treturn bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n\t\t\t\t_to.sub(bonusEndBlock)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t// View function to see pending HONEYs on frontend.\r\n\tfunction pendingHoney(uint256 _pid, address _user) external view returns (uint256) {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][_user];\r\n\t\tuint256 accHoneyPerShare = pool.accHoneyPerShare;\r\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\t\tif (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n\t\t\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n\t\t\tuint256 honeyReward = multiplier.mul(honeyPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\t\t\taccHoneyPerShare = accHoneyPerShare.add(honeyReward.mul(1e12).div(lpSupply));\r\n\t\t}\r\n\t\treturn user.amount.mul(accHoneyPerShare).div(1e12).sub(user.rewardDebt);\r\n\t}\r\n\r\n\t// Update reward variables for all pools. Be careful of gas spending!\r\n\tfunction massUpdatePools() public {\r\n\t\tuint256 length = poolInfo.length;\r\n\t\tfor (uint256 pid = 0; pid < length; ++pid) {\r\n\t\t\tupdatePool(pid);\r\n\t\t}\r\n\t}\r\n\r\n\t// Update reward variables of the given pool to be up-to-date.\r\n\tfunction updatePool(uint256 _pid) public {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tif (block.number <= pool.lastRewardBlock) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\t\tif (lpSupply == 0) {\r\n\t\t\tpool.lastRewardBlock = block.number;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n\t\tuint256 honeyReward = multiplier.mul(honeyPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\t\thoney.mint(devaddr, honeyReward.div(20));\r\n\t\thoney.mint(address(this), honeyReward);\r\n\t\tpool.accHoneyPerShare = pool.accHoneyPerShare.add(honeyReward.mul(1e12).div(lpSupply));\r\n\t\tpool.lastRewardBlock = block.number;\r\n\t}\r\n\r\n\t// Deposit LP tokens to BeeHive for HONEY allocation.\r\n\tfunction deposit(uint256 _pid, uint256 _amount) public {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tupdatePool(_pid);\r\n\t\tif (user.amount > 0) {\r\n\t\t\tuint256 pending = user.amount.mul(pool.accHoneyPerShare).div(1e12).sub(user.rewardDebt);\r\n\t\t\tif(pending > 0) {\r\n\t\t\t\tsafeHoneyTransfer(msg.sender, pending);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(_amount > 0) {\r\n\t\t\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\t\t\tuser.amount = user.amount.add(_amount);\r\n\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accHoneyPerShare).div(1e12);\r\n\t\temit Deposit(msg.sender, _pid, _amount);\r\n\t}\r\n\r\n\t// Withdraw LP tokens from BeeHive.\r\n\tfunction withdraw(uint256 _pid, uint256 _amount) public {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\trequire(user.amount >= _amount, \"withdraw: not good\");\r\n\t\tupdatePool(_pid);\r\n\t\tuint256 pending = user.amount.mul(pool.accHoneyPerShare).div(1e12).sub(user.rewardDebt);\r\n\t\tif(pending > 0) {\r\n\t\t\tsafeHoneyTransfer(msg.sender, pending);\r\n\t\t}\r\n\t\tif(_amount > 0) {\r\n\t\t\tuser.amount = user.amount.sub(_amount);\r\n\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accHoneyPerShare).div(1e12);\r\n\t\temit Withdraw(msg.sender, _pid, _amount);\r\n\t}\r\n\r\n\t// Withdraw without caring about rewards. EMERGENCY ONLY.\r\n\tfunction emergencyWithdraw(uint256 _pid) public {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tuint256 amount = user.amount;\r\n\t\tuser.amount = 0;\r\n\t\tuser.rewardDebt = 0;\r\n\t\tpool.lpToken.safeTransfer(address(msg.sender), amount);\r\n\t\temit EmergencyWithdraw(msg.sender, _pid, amount);\r\n\t}\r\n\r\n\t// Safe honey transfer function, just in case if rounding error causes pool to not have enough HONEYs.\r\n\tfunction safeHoneyTransfer(address _to, uint256 _amount) internal {\r\n\t\tuint256 honeyBal = honey.balanceOf(address(this));\r\n\t\tif (_amount > honeyBal) {\r\n\t\t\thoney.transfer(_to, honeyBal);\r\n\t\t} else {\r\n\t\t\thoney.transfer(_to, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\t// Update dev address by the previous dev.\r\n\tfunction dev(address _devaddr) public {\r\n\t\trequire(msg.sender == devaddr, \"dev: wut?\");\r\n\t\tdevaddr = _devaddr;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract HoneyToken\",\"name\":\"_honey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_honeyPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"honey\",\"outputs\":[{\"internalType\":\"contract HoneyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"honeyPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingHoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accHoneyPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BeeHive","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ad455adf5ea11749dd51960d2bc0fc66c8d4a5910000000000000000000000004401c6dbd0f46429617f3a16a7bf04a0332398820000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000ad97740000000000000000000000000000000000000000000000000000000000af1e14","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://832f7b89e414400e338edb715e611e884da98f4f6e3d2ce5a028d86bf1f9ca1c"}]}