{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ApproveAndCallReceiver.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\ninterface ApproveAndCallReceiver {\r\n    /**\r\n    * @dev This allows users to use their tokens to interact with contracts in one function call instead of two\r\n    * @param _from Address of the account transferring the tokens\r\n    * @param _amount The amount of tokens approved for in the transfer\r\n    * @param _token Address of the token contract calling this function\r\n    * @param _data Optional data that can be used to add signalling information in more complex staking applications\r\n    */\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _data) external;\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n// A library for performing overflow-safe math, courtesy of DappHub: https://github.com/dapphub/ds-math/blob/d0ef6d6a5f/src/math.sol\r\n// Modified to include only the essentials\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"MATH:ADD_OVERFLOW\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"MATH:SUB_UNDERFLOW\");\r\n    }\r\n}\r\n\r\n// File: contracts/ANTv2.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n// Lightweight token modelled after UNI-LP: https://github.com/Uniswap/uniswap-v2-core/blob/v1.0.1/contracts/UniswapV2ERC20.sol\r\n// Adds:\r\n//   - An exposed `mint()` with minting role\r\n//   - An exposed `burn()`\r\n//   - ERC-3009 (`transferWithAuthorization()`)\r\ncontract ANTv2 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // bytes32 private constant EIP712DOMAIN_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\n    bytes32 private constant EIP712DOMAIN_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\r\n    // bytes32 private constant NAME_HASH = keccak256(\"Aragon Network Token\")\r\n    bytes32 private constant NAME_HASH = 0x711a8013284a3c0046af6c0d6ed33e8bbc2c7a11d615cf4fdc8b1ac753bda618;\r\n    // bytes32 private constant VERSION_HASH = keccak256(\"1\")\r\n    bytes32 private constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\r\n\r\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    // bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH =\r\n    //     keccak256(\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\");\r\n    bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\r\n\r\n    string public constant name = \"Aragon Network Token\";\r\n    string public constant symbol = \"ANT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    address public minter;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // ERC-2612, ERC-3009 state\r\n    mapping (address => uint256) public nonces;\r\n    mapping (address => mapping (bytes32 => bool)) public authorizationState;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\r\n    event ChangeMinter(address indexed minter);\r\n\r\n    modifier onlyMinter {\r\n        require(msg.sender == minter, \"ANTV2:NOT_MINTER\");\r\n        _;\r\n    }\r\n\r\n    constructor(address initialMinter) public {\r\n        _changeMinter(initialMinter);\r\n    }\r\n\r\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                getDomainSeparator(),\r\n                encodeData\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\r\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \"ANTV2:INVALID_SIGNATURE\");\r\n    }\r\n\r\n    function _changeMinter(address newMinter) internal {\r\n        minter = newMinter;\r\n        emit ChangeMinter(newMinter);\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        // Balance is implicitly checked with SafeMath's underflow protection\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) private {\r\n        require(to != address(this) && to != address(0), \"ANTV2:RECEIVER_IS_TOKEN_OR_ZERO\");\r\n\r\n        // Balance is implicitly checked with SafeMath's underflow protection\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function getChainId() public pure returns (uint256 chainId) {\r\n        assembly { chainId := chainid() }\r\n    }\r\n\r\n    function getDomainSeparator() public view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                EIP712DOMAIN_HASH,\r\n                NAME_HASH,\r\n                VERSION_HASH,\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function mint(address to, uint256 value) external onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n\r\n    function changeMinter(address newMinter) external onlyMinter {\r\n        _changeMinter(newMinter);\r\n    }\r\n\r\n    function burn(uint256 value) external returns (bool) {\r\n        _burn(msg.sender, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n        uint256 fromAllowance = allowance[from][msg.sender];\r\n        if (fromAllowance != uint256(-1)) {\r\n            // Allowance is implicitly checked with SafeMath's underflow protection\r\n            allowance[from][msg.sender] = fromAllowance.sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline >= block.timestamp, \"ANTV2:AUTH_EXPIRED\");\r\n\r\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\r\n        _validateSignedData(owner, encodeData, v, r, s);\r\n\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function transferWithAuthorization(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n    {\r\n        require(block.timestamp > validAfter, \"ANTV2:AUTH_NOT_YET_VALID\");\r\n        require(block.timestamp < validBefore, \"ANTV2:AUTH_EXPIRED\");\r\n        require(!authorizationState[from][nonce],  \"ANTV2:AUTH_ALREADY_USED\");\r\n\r\n        bytes32 encodeData = keccak256(abi.encode(TRANSFER_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce));\r\n        _validateSignedData(from, encodeData, v, r, s);\r\n\r\n        authorizationState[from][nonce] = true;\r\n        emit AuthorizationUsed(from, nonce);\r\n\r\n        _transfer(from, to, value);\r\n    }\r\n}\r\n\r\n// File: contracts/ANTv2Migrator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\ncontract ANTv2Migrator is ApproveAndCallReceiver {\r\n    string private constant ERROR_NOT_INITATOR = \"ANTV2_MIG:NOT_INITIATOR\";\r\n    string private constant ERROR_WRONG_TOKEN = \"ANTV2_MIG:WRONG_TOKEN\";\r\n    string private constant ERROR_ZERO_AMOUNT = \"ANTV2_MIG:ZERO_AMOUNT\";\r\n    string private constant ERROR_TRANSFER_FAILED = \"ANTV2_MIG:TRANSFER_FAIL\";\r\n\r\n    address private constant BURNED_ADDR = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public owner;\r\n    IERC20 public antv1;\r\n    ANTv2 public antv2;\r\n\r\n    constructor(address _owner, IERC20 _antv1, ANTv2 _antv2) public {\r\n        owner = _owner;\r\n        antv1 = _antv1;\r\n        antv2 = _antv2;\r\n    }\r\n\r\n    function initiate() external {\r\n        require(msg.sender == owner, ERROR_NOT_INITATOR);\r\n\r\n        // Mint an equal supply of ANTv2 as ANTv1 to this migration contract\r\n        uint256 antv1Supply = antv1.totalSupply();\r\n        antv2.mint(address(this), antv1Supply);\r\n\r\n        // Transfer ANTv2 minting role to owner\r\n        antv2.changeMinter(owner);\r\n    }\r\n\r\n    function migrate(uint256 _amount) external {\r\n        _migrate(msg.sender, _amount);\r\n    }\r\n\r\n    function migrateAll() external {\r\n        uint256 amount = antv1.balanceOf(msg.sender);\r\n        _migrate(msg.sender, amount);\r\n    }\r\n\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata /*_data*/) external {\r\n        require(_token == msg.sender && _token == address(antv1), ERROR_WRONG_TOKEN);\r\n\r\n        uint256 fromBalance = antv1.balanceOf(_from);\r\n        uint256 migrationAmount = _amount > fromBalance ? fromBalance : _amount;\r\n\r\n        _migrate(_from, migrationAmount);\r\n    }\r\n\r\n    function _migrate(address _from, uint256 _amount) private {\r\n        require(_amount > 0, ERROR_ZERO_AMOUNT);\r\n\r\n        // Burn ANTv1\r\n        require(antv1.transferFrom(_from, BURNED_ADDR, _amount), ERROR_TRANSFER_FAILED);\r\n        // Return ANTv2\r\n        require(antv2.transfer(_from, _amount), ERROR_TRANSFER_FAILED);\r\n    }\r\n}\r\n\r\n// File: contracts/EscrowANTv2Migrator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract EscrowANTv2Migrator {\r\n    string private constant ERROR_NOT_ALLOWED = \"ESCROW_MIG:NOT_ALLOWED\";\r\n    string private constant ERROR_NO_BALANCE = \"ESCROW_MIG:NO_BALANCE\";\r\n    string private constant ERROR_MIGRATION_FAILED = \"ESCROW_MIG:MIGRATION_FAILED\";\r\n\r\n    IERC20 public constant antv1 = IERC20(0x960b236A07cf122663c4303350609A66A7B288C0);\r\n    IERC20 public constant antv2 = IERC20(0xa117000000f279D81A1D3cc75430fAA017FA5A2e);\r\n    ANTv2Migrator public constant antv2Migrator = ANTv2Migrator(0x078BEbC744B819657e1927bF41aB8C74cBBF912D);\r\n\r\n    address public recipient;\r\n    address public initiator;\r\n\r\n    /**\r\n    * @param _recipient Recipient of the migrated ANTv2 tokens\r\n    * @param _initiator Account that can initiate the migration of ANTv1 held in this contract\r\n    */\r\n    constructor(address _recipient, address _initiator) public {\r\n        recipient = _recipient;\r\n        initiator = _initiator;\r\n    }\r\n\r\n    /**\r\n    * @notice Migrate ANTv1 balance held by this contract into ANTv2 and transfer to recipient\r\n    */\r\n    function migrate() external {\r\n        require(msg.sender == initiator || initiator == address(0), ERROR_NOT_ALLOWED);\r\n\r\n        uint256 balance = antv1.balanceOf(address(this));\r\n        require(balance > 0, ERROR_NO_BALANCE);\r\n\r\n        // Approve migrator, migrate ANTv2 into here, and transfer ANTv2 to recipient\r\n        require(antv1.approve(address(antv2Migrator), balance), ERROR_MIGRATION_FAILED);\r\n        antv2Migrator.migrate(balance);\r\n        require(antv2.transfer(recipient, balance), ERROR_MIGRATION_FAILED);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"antv1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antv2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antv2Migrator\",\"outputs\":[{\"internalType\":\"contract ANTv2Migrator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EscrowANTv2Migrator","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000d7462523c516f8c86586a3a8747a0e9a61298e110000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://376e0cc5ee2767ad5a597f4776f19e6bc48d35d9c921ccbfbbdfa96de1d396b4"}]}