{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.2;\r\n\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;}\r\n}\r\n\r\n\r\nlibrary Math {\r\n\tfunction max(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? y : x;\r\n    }\r\n\t\r\n\tfunction min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC20M {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    \r\n\tfunction mint(address account, uint256 amount) external;\r\n\tfunction burn(uint256 amount) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    \r\n}\r\n\r\ninterface IRektsurance {\r\n    function startTimer() external;\r\n}\r\n\r\n\r\ncontract EulerStaker {\r\n    using SafeMath for uint256;\r\n\t\r\n\taddress internal immutable FACTORY;\r\n\taddress internal immutable UNIROUTER;\r\n    address internal immutable WETH;\r\n\taddress internal immutable EXP;\r\n    address internal immutable REKT;\r\n\taddress payable immutable REKTSURANCE;\r\n\taddress internal immutable ADMIN_ADDRESS;\r\n\r\n    constructor(address _FACTORY, address _UNIROUTER, address _WETH, address _EXP, address _REKT, address payable _REKTSURANCE) public {\r\n        FACTORY = _FACTORY;\r\n        UNIROUTER = _UNIROUTER;\r\n        WETH = _WETH;\r\n        EXP = _EXP;\r\n        REKT = _REKT;\r\n\t\tREKTSURANCE = _REKTSURANCE;\r\n\t\tADMIN_ADDRESS = msg.sender;\r\n    }\r\n    \r\n    mapping(address => uint256) public timePooled;\r\n    mapping(address => uint256) public LPTokenBalance;\r\n    mapping(address => uint256) public RektTokenBalance;\r\n\tmapping(address => uint256) public lockupTime;\r\n\tmapping(address => uint256) public currentAPY;\r\n\tmapping(address => uint256) public referralBonus;\r\n\tmapping(address => uint256) private internalTime;\r\n    mapping(address => uint256) private ETHContributed;\r\n    mapping(address => uint256) private rewards;\r\n    mapping(address => address) private referrer;\r\n\t\r\n\tbool public liquidityAdded = false;\r\n\tuint constant initialLiquidityETH = 50000000000000000000; \t//50 ETH\r\n\tuint constant initialLiquidityEXP = 2718281828459045235; \t//2.71828 EXP\r\n\tuint private initialLP = Math.sqrt(initialLiquidityEXP.mul(initialLiquidityETH)); \t//11.658219907985620016  UNI-V2 LP tokens\r\n\tuint private maxContributionETH = 2000000000000000000; \t\t//2 ETH\r\n\t\r\n\tuint private stakingStartTime = 1611736098;\r\n\tbool private allowStake = false;\r\n\t\r\n    receive() external payable {\r\n\t\tif(msg.sender != UNIROUTER){\r\n\t\t\tstake(address(0), 1);\r\n\t\t}\r\n    }\r\n    \r\n\t\r\n\t//function to send ether\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\t\r\n\t\r\n\t//calc optimal fraction of ETH to swap for token based on 0.3% Uniswap fee, 9 decimals precision\r\n\t//a amount of ether available to buy\r\n\t//b amount of ether in liquidity pool\r\n\tfunction calcEthBuy(uint a, uint b) internal pure returns(uint fraction) {\r\n\t\tuint sqroot = Math.sqrt((a.mul(a).mul(9)).add(b.mul(a).mul(4000000)).add(b.mul(b).mul(4000000)));\r\n\t\tuint x = (sqroot.add(a.mul(3)).sub(b.mul(2000))).mul(100000000000).div(a.mul(2000));\r\n\t\t\r\n\t\treturn x.mul(a).div(100000000000);\r\n\t}\r\n\t\r\n\t\r\n\t//calc APY based on lockup period, in percent\r\n\tfunction eulerAPY(uint lockupDays) internal pure returns(uint){\r\n\t\tuint lockup = lockupDays.mul(2);\r\n\t\treturn ( (271**lockup).div(100**lockup) );\r\n\t}\r\n\t\r\n\t\r\n\t//burn EXP dust\r\n\tfunction burnDust() public {\r\n\t    uint dustAmount = IERC20M(EXP).balanceOf(address(this));\r\n\t\tIERC20M(EXP).burn(dustAmount);\r\n\t}\r\n\t\r\n\t\r\n\t//ADMIN-function: allow staking\r\n\tfunction allowStaking() public {\r\n\t    require(msg.sender == ADMIN_ADDRESS, \"Caller is not admin.\");\r\n\t    allowStake = true;\r\n\t}\r\n\t\r\n    \r\n\t//ADMIN-function: create uniswap pair\r\n    function addInitialLiquidity() public {\r\n        require(!liquidityAdded, \"Uniswap pair has already been created.\");\r\n\t\trequire(msg.sender == ADMIN_ADDRESS, \"Caller is not admin.\");\r\n\t\trequire(IERC20M(EXP).approve(UNIROUTER, initialLiquidityEXP), \"Approve failed.\");\r\n        liquidityAdded = true;\r\n\t\t\r\n\t\t//mint initial supply\r\n        IERC20M(EXP).mint(address(this), initialLiquidityEXP);\r\n\t\t\r\n\t\t//add liquidity\r\n        IUniswapV2Router02(UNIROUTER).addLiquidityETH{ value: initialLiquidityETH }(EXP, initialLiquidityEXP, 1, 1, address(this), block.timestamp + 15 minutes);\r\n\t\t\r\n\t\t//start stake timer rektsurance\r\n\t\tIRektsurance(REKTSURANCE).startTimer();\r\n\t\t\r\n\t\t//set start time\r\n\t\tstakingStartTime = block.timestamp;\r\n    }\r\n\t\r\n\t\r\n\t//claim refund of initial contribution if no uniswap pair is created within 1 week\r\n\tfunction refundInitial() public {\r\n\t\trequire(!liquidityAdded, \"Uniswap pair created, no refunds possible.\");\r\n\t\trequire(block.timestamp >= timePooled[msg.sender] + 1 weeks, \"Refund will be possible 1 week after your contribution.\");\r\n\t\trequire(ETHContributed[msg.sender] > 0, \"You have not contributed anything.\");\r\n\t\t\r\n\t\t//get refundAmount and update values\r\n\t\tuint refundAmount = ETHContributed[msg.sender];\r\n\t\tLPTokenBalance[msg.sender] = 0;\r\n\t\tETHContributed[msg.sender] = 0;\r\n\t\trewards[msg.sender] = 0;\r\n\t\t\r\n\t\t//send ETH back to staker\r\n\t\tsendValue(msg.sender, refundAmount);\r\n\t}\r\n\t\r\n\t\r\n\t//stake\r\n\tfunction stake(address payable ref, uint256 lockup) public payable {\r\n\t\trequire(allowStake, \"Staking has not been activated yet.\");\r\n\t\trequire(lockup >= 1, \"You must stake at least one day.\");\r\n\t\trequire(msg.value > 0, \"You need to send ETH to stake.\");\r\n\t\t\r\n\t\t//remember referrer for later use\r\n\t\tif(referrer[msg.sender] == address(0)) {\r\n\t\t    if (ref != msg.sender) {\r\n\t\t        referrer[msg.sender] = ref;\r\n\t\t    }\r\n        }\r\n\t\t\r\n\t\t//if uniswap pair created stake normally\r\n\t\tif (liquidityAdded) {\r\n\t\t\tstakeUniswap();\r\n\t\t} else {\r\n\t\t\tstakeInitial();\r\n\t\t}\r\n\t\t\r\n\t\t//add recently earned reward\r\n\t\trewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\r\n\t\t//store information\r\n        timePooled[msg.sender] = block.timestamp; //start time\r\n        internalTime[msg.sender] = block.timestamp; //initialize internal time\r\n\t\t//if msg.sender is already staking and new lockup time is higher than previous one, replace it\r\n\t\t//if not leave it as is\r\n\t\tif(lockupTime[msg.sender] < lockup.mul(1 days)){\r\n\t\t\tlockupTime[msg.sender] = lockup.mul(1 days); //time the tokens are locked in days\r\n\t\t\tcurrentAPY[msg.sender] = eulerAPY(lockup);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t//staking pre uniswap pair creation\r\n\tfunction stakeInitial() internal {\r\n\t\tuint currentEthBalance = (address(this).balance).sub(msg.value);\r\n\t\trequire(ETHContributed[msg.sender] < maxContributionETH, \"You cannot contribute more than 2.5 ETH during initial staking.\");\r\n\t\trequire(currentEthBalance < initialLiquidityETH, \"Initial Liquidity Target reached. Please wait for Uniswap pair creation.\");\r\n\t\t\r\n\t\tuint validAmount;\r\n\t\t//maximum amount to be contributed\r\n\t\tuint maxAmount = Math.min(initialLiquidityETH.sub(currentEthBalance), maxContributionETH.sub(ETHContributed[msg.sender]));\r\n\t\t\r\n\r\n\t\t//check total contribution\r\n\t\tif (msg.value > maxAmount) {\r\n\t\t\tvalidAmount = maxAmount;\r\n\t\t\t//assign contributed ETH\r\n\t\t\tETHContributed[msg.sender] = ETHContributed[msg.sender].add(validAmount);\r\n\t\t\t//return remaining eth\r\n\t\t\tsendValue(msg.sender, (msg.value).sub(validAmount));\r\n\t\t} else {\r\n\t\t\tvalidAmount = msg.value;\r\n\t\t}\r\n\t\t\r\n\t\t//share of initial liquidity, 2 decimals precision\r\n\t\tuint lpShare = uint(10000).mul(validAmount).div(initialLiquidityETH);\r\n\t\t\r\n\t\t//amount of LP tokens \r\n\t\tuint lpTokenGot = initialLP.mul(lpShare).div(10000);\r\n\t\t\r\n\t\t//assign LP tokens\r\n        LPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].add(lpTokenGot);\r\n\t\t\r\n\t\t//assign contributed ETH\r\n\t\tETHContributed[msg.sender] = ETHContributed[msg.sender].add(validAmount);\r\n\t}\r\n\t\r\n\t\r\n\t//staking post uniswap pair creation\r\n    function stakeUniswap() internal {\r\n\t\t\r\n\t\t//send insurance fee (35%) to rektsurance contract\r\n\t\tsendValue(REKTSURANCE, address(this).balance.mul(35).div(100));\r\n        \r\n\t\t//get liquidity pool information\r\n\t\taddress pairAddress = IUniswapV2Factory(FACTORY).getPair(EXP, WETH);\r\n        uint ethAmount = IERC20M(WETH).balanceOf(pairAddress); //WETH in Uniswap\r\n\t\t\r\n\t\t//calc optimal amount of ETH to\r\n\t\tuint ethBuy = calcEthBuy(address(this).balance, ethAmount);\r\n\t\t\r\n\t\t//define swap path: ETH->WETH->EXP\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = WETH;\r\n\t\tpath[1] = EXP;\r\n\t\t//swap ETH for EXP\r\n\t\tuint[] memory amounts = IUniswapV2Router02(UNIROUTER).swapExactETHForTokens{value: ethBuy}(1, path, address(this), block.timestamp + 30 minutes);\r\n        \r\n\t\t//get amount of EXP bought\r\n        uint expAmount = amounts[amounts.length-1];\r\n\t\t\r\n\t\t//allow pool to get tokens\r\n\t\trequire(IERC20M(EXP).approve(UNIROUTER, expAmount), \"Approve failed.\");\r\n\t\t\r\n\t\t//if buy of EXP was successfull, add liquidity\r\n\t\trequire(expAmount > 0, \"EXP Buy was not successfull.\");\r\n\t\t(uint expAdded, ,uint lpTokenGot) = IUniswapV2Router02(UNIROUTER).addLiquidityETH{value: address(this).balance}(EXP, expAmount, 1, 1, address(this), block.timestamp + 15 minutes);\r\n\t\tuint expDust = expAmount.sub(expAdded);\r\n\t\t\r\n\t\t//add remaining EXP dust to rewards\r\n\t\trewards[msg.sender] = rewards[msg.sender].add(expDust);\r\n\t\t\r\n\t\t//map rektsurance tokens to msg.sender\r\n\t\tRektTokenBalance[msg.sender] = RektTokenBalance[msg.sender].add(msg.value);\r\n\t\t//mint 1.15*msg.value to this address; corresponds to 4.57% dev fee (15/115 * 35/100 = 21/460)\r\n\t\tIERC20M(REKT).mint(address(this), (msg.value).mul(115).div(100));\r\n\t\t\r\n\t\t//assign LP tokens\r\n        LPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].add(lpTokenGot);\r\n    }\r\n\r\n\r\n\t//Withdraw LP tokens\r\n    function withdrawLPTokens(uint amount) public {\r\n        require(Math.max(timePooled[msg.sender], stakingStartTime) + lockupTime[msg.sender] <= block.timestamp, \"You must wait longer.\");\r\n\t\trequire(LPTokenBalance[msg.sender] >= amount, \"Amount needs to be less than or equal to what is available.\");\r\n\t\t\r\n\t\t//withdraw amount in percent, 4 decimals precision\r\n\t\tuint withdrawPercent = amount.mul(1000000).div(LPTokenBalance[msg.sender]);\r\n\t\t\r\n        //update RektTokenBalance and burn REKT\r\n\t\tuint burnREKT = RektTokenBalance[msg.sender].mul(withdrawPercent).div(1000000);\r\n\t\tRektTokenBalance[msg.sender] = RektTokenBalance[msg.sender].sub(burnREKT);\r\n\t\tIERC20M(REKT).burn(burnREKT);\r\n\t\t//update staking reward\r\n        rewards[msg.sender] = viewExpTokenAmount(msg.sender);\r\n        //update LPTokenBalance\r\n        LPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].sub(amount);\r\n        \r\n        //send tokens\r\n        address pairAddress = IUniswapV2Factory(FACTORY).getPair(EXP, WETH);\r\n        require(IERC20M(pairAddress).transfer(msg.sender, amount), \"LP Token transfer failed.\");\r\n        \r\n        //update timer\r\n        lockupTime[msg.sender] = 0;\r\n\t\tinternalTime[msg.sender] = block.timestamp;\r\n    }\r\n    \r\n\t\r\n\t//Withdraw rewarded EXP\r\n    function withdrawRewardTokens(uint amount) public {\r\n        require(Math.max(timePooled[msg.sender], stakingStartTime) + lockupTime[msg.sender] <= block.timestamp, \"You must wait longer.\");\r\n        \r\n        //get current reward amount and check for balance\r\n        uint rewardAmount = viewExpTokenAmount(msg.sender);\r\n\t\trequire(rewardAmount >= amount, \"Amount needs to be less than or equal to what is available.\");\r\n\t\t\r\n\t\t//withdraw amount in percent, 4 decimals precision\r\n\t\tuint withdrawPercent = amount.mul(1000000).div(rewardAmount);\r\n\t\t\r\n        //update RektTokenBalance and burn REKT\r\n\t\tuint burnREKT = RektTokenBalance[msg.sender].mul(withdrawPercent).div(1000000);\r\n\t\tRektTokenBalance[msg.sender] = RektTokenBalance[msg.sender].sub(burnREKT);\r\n\t\tIERC20M(REKT).burn(burnREKT);\r\n\t\t//update staking reward\r\n        rewards[msg.sender] = rewardAmount.sub(amount); //staker\r\n        referralBonus[referrer[msg.sender]] = referralBonus[referrer[msg.sender]].add(amount.div(20)); //referrer\r\n        \r\n        //send reward to staker\r\n        IERC20M(EXP).mint(msg.sender, amount);\r\n        \r\n        //update timer\r\n        lockupTime[msg.sender] = 0;\r\n\t\tinternalTime[msg.sender] = block.timestamp;\r\n    }\r\n\t\r\n\t\r\n\t//Withdraw referral bonus\r\n\tfunction withdrawReferralEarned(uint amount) public{   \r\n\t\trequire(referralBonus[msg.sender] >= amount, \"Amount needs to be less than or equal to what is available.\");\r\n        referralBonus[msg.sender] = referralBonus[msg.sender].sub(amount);\r\n        IERC20M(EXP).mint(msg.sender, amount);\r\n    }\r\n\t\r\n\t\r\n\t//Withdraw insurance token\r\n\tfunction withdrawInsuranceToken(uint amount) public{\r\n\t\trequire(timePooled[msg.sender] + lockupTime[msg.sender] <= block.timestamp, \"You must wait longer.\");\r\n\t\trequire(RektTokenBalance[msg.sender] >= amount, \"Amount needs to be less than or equal to what is available.\");\r\n\t\t\r\n\t\t//remaining amount in percent, 4 decimals precision\r\n\t\tuint remainPercent = uint(1000000).sub(amount.mul(1000000).div(RektTokenBalance[msg.sender]));\r\n\t\t\r\n\t\t//update LPTokenBalance\r\n\t\tLPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].mul(remainPercent).div(1000000);\r\n\t\t//update staking reward\r\n        rewards[msg.sender] = (rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender))).mul(remainPercent).div(1000000);\r\n        //update RektTokenBalance\r\n\t\tRektTokenBalance[msg.sender] = RektTokenBalance[msg.sender].sub(amount);\r\n        \r\n        //send insurance token to staker\r\n        IERC20M(REKT).transfer(msg.sender, amount);\r\n        \r\n        //update timer\r\n        lockupTime[msg.sender] = 0;\r\n\t\tinternalTime[msg.sender] = block.timestamp;\r\n\t}\r\n\r\n\r\n\t//calc reward since last withdraw\r\n    function viewRecentRewardTokenAmount(address who) internal view returns (uint){\r\n\t\tuint stakedSeconds = block.timestamp.sub(internalTime[who]);\r\n        return (viewPooledExp(who).mul(currentAPY[who]).mul(stakedSeconds).div(365).div(100).div(1 days));\r\n    }\r\n    \r\n\t//get amount of pooled EXP of who\r\n    function viewPooledExp(address who) internal view returns (uint){\r\n        \r\n        if (liquidityAdded) {\r\n            address pairAddress = IUniswapV2Factory(FACTORY).getPair(EXP, WETH);\r\n            uint tokenAmount = IERC20M(EXP).balanceOf(pairAddress);\r\n            return (tokenAmount.mul(LPTokenBalance[who])).div(IERC20M(pairAddress).totalSupply());\r\n        } else {\r\n            return (initialLiquidityEXP.mul(LPTokenBalance[who]).div(initialLP));\r\n        }\r\n    }\r\n\t\r\n\t\r\n\t//get EXP token balance\r\n\tfunction viewExpTokenAmount(address who) public view returns (uint){\r\n        return rewards[who].add(viewRecentRewardTokenAmount(who));\r\n    }\r\n    \r\n\t\r\n\t//get total value locked (TVL)\r\n    function viewTotalValueLocked() public view returns (uint, uint){\r\n\t\r\n        address pairAddress = IUniswapV2Factory(FACTORY).getPair(EXP, WETH);\r\n\t\t\r\n        uint wethPool = IERC20M(WETH).balanceOf(pairAddress); //weth in uniswap pool\r\n        uint expPool = IERC20M(EXP).balanceOf(pairAddress); //exp in uniswap pool\r\n\t\tuint lpTokenAmount = IERC20M(pairAddress).balanceOf(address(this)); //lp token hold by contract\r\n\t\t\r\n\t\tuint wethShare = wethPool.mul(lpTokenAmount).div(IERC20M(pairAddress).totalSupply());\r\n\t\tuint expShare = expPool.mul(lpTokenAmount).div(IERC20M(pairAddress).totalSupply());\r\n        \r\n        return (wethShare, expShare);\r\n    }\r\n\t\r\n\t\r\n\t//get token release time\r\n\tfunction viewTokenReleaseTime(address who) public view returns (uint) {\r\n\t\treturn (Math.max(timePooled[who], stakingStartTime) + lockupTime[who]);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FACTORY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UNIROUTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_EXP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_REKT\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_REKTSURANCE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LPTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RektTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockupTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockup\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timePooled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewExpTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewTokenReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInsuranceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReferralEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EulerStaker","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a5098ada79157cb328b40f33b641df4eb2b203740000000000000000000000002bd77f56515cd9e29cbf1d687fa3b593ed4dc84400000000000000000000000077ec6f8dfb87b4f845622ca03a0e14b09ecf0253","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://864d7c0b1b57598daae60de70f569e0fa0179dd2ec3be0ea83cf616310a2d8c9"}]}