{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\ninterface IPlanetFarmConfig {\r\n\r\n    /// @dev Return the latest price for ETH-USD\r\n    function getLatestPrice() external view returns (int);\r\n    \r\n    /// @dev Return the amount of Testa wei rewarded if we are activate the progress function\r\n    function getTestaReward() external view returns (uint256);\r\n    \r\n    /// @dev Return the amount of Testa wei to spend upon harvesting reward\r\n    function getTestaFee(uint256 rewardETH) external view returns (uint256);\r\n    \r\n    /// @dev Return the liquidity value required to activate the progres function\r\n    function getRequiredLiquidity(uint256 startLiquidity) external view returns (uint256);\r\n\r\n    /// @dev Return the current liquidity value.\r\n    function getLiquidity() external view returns (uint112);\r\n\r\n    /// @dev Return the company's contract address\r\n    function getCompany() external view returns (address);\r\n    \r\n    /// @dev Return the first pay amount value\r\n    function getPayAmount() external view returns (uint256);\r\n\r\n    /// @dev Return the jTesta amount value\r\n    function getJTestaAmount() external view returns (uint256);\r\n    \r\n    /// @dev Return the (min, max) progress bar values.\r\n    function getProgressive() external view returns (int, int);\r\n    \r\n    /// @dev Return the amount of block required to activate the progress function.\r\n    function getActivateAtBlock() external view returns (uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract PlanetFarmConfig is IPlanetFarmConfig, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n \r\n    AggregatorV3Interface public priceFeed;\r\n    IUniswapV2Pair pair;\r\n    \r\n    address private company;\r\n    uint256 private payAmount;\r\n    uint256 private jTestaAmount;\r\n    int private minProgressive;\r\n    int private maxProgressive;\r\n    uint256 private activateAtBlock;\r\n\r\n    uint256 public activateReward;\r\n    uint256 public harvestFee;\r\n    uint256 public liquidityProgressRate;\r\n    \r\n    constructor(\r\n        address _priceFeed, \r\n        address _pair,\r\n        address _company,\r\n        uint256 _activateReward, \r\n        uint256 _harvestFee, \r\n        uint256 _liquidityProgressRate,\r\n        uint256 _payAmount,\r\n        uint256 _jTestaAmount,\r\n        uint256 _activateAtBlock,\r\n        int _minProgressive,\r\n        int _maxProgressive\r\n    ) public {\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n        pair = IUniswapV2Pair(_pair);\r\n        company = _company;\r\n        activateReward = _activateReward;\r\n        harvestFee = _harvestFee;\r\n        liquidityProgressRate = _liquidityProgressRate;\r\n        payAmount = _payAmount;\r\n        jTestaAmount = _jTestaAmount;\r\n        activateAtBlock = _activateAtBlock;\r\n        minProgressive = _minProgressive;\r\n        maxProgressive = _maxProgressive;\r\n    }\r\n    \r\n    /// @dev Set all the basic parameters. Must only be called by the owner.\r\n    /// @param _priceFeed The new address of Price Oracle.\r\n    /// @param _pair The new pair address.\r\n    /// @param _company The new company address.\r\n    /// @param _activateReward The new reward value in USD given to activator.\r\n    /// @param _harvestFee The new harvest fee rate given to company.\r\n    /// @param _liquidityProgressRate The new minimum rate required to increae the progress.\r\n    /// @param _payAmount The new amount to be paid on entry.\r\n    /// @param _jTestaAmount The new jTesta amount required to activate the progress function.\r\n    function setParem(\r\n        address _priceFeed,\r\n        address _pair,\r\n        address _company,\r\n        uint256 _activateReward,\r\n        uint256 _harvestFee,\r\n        uint256 _liquidityProgressRate,\r\n        uint256 _payAmount,\r\n        uint256 _jTestaAmount,\r\n        uint256 _activateAtBlock,\r\n        int _minProgressive,\r\n        int _maxProgressive\r\n    ) public onlyOwner {\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n        pair = IUniswapV2Pair(_pair);\r\n        company = _company;\r\n        activateReward = _activateReward;\r\n        harvestFee = _harvestFee;\r\n        liquidityProgressRate = _liquidityProgressRate;\r\n        payAmount = _payAmount;\r\n        jTestaAmount = _jTestaAmount;\r\n        activateAtBlock = _activateAtBlock;\r\n        minProgressive = _minProgressive;\r\n        maxProgressive = _maxProgressive;\r\n    }\r\n    \r\n    /// @dev Return the latest price for ETH-USD.\r\n    function getLatestPrice() public view override returns (int) {\r\n        ( , int price,, uint timeStamp, ) = priceFeed.latestRoundData();\r\n        // If the round is not complete yet, timestamp is 0\r\n        require(timeStamp > 0, \"Round not complete\");\r\n        return price;\r\n    }\r\n    \r\n    /// @dev Return the amount of Testa wei rewarded if we are activate the progress function.\r\n    function getTestaReward() public view override returns (uint256) {\r\n        ( uint112 _reserve0, uint112 _reserve1, ) = pair.getReserves();\r\n        uint256 reserve = uint256(_reserve0).mul(1e18).div(uint256(_reserve1));\r\n        uint256 ethPerDollar = uint256(getLatestPrice()).mul(1e10); // 1e8\r\n        uint256 testaPerDollar = ethPerDollar.mul(1e18).div(reserve);\r\n        \r\n        uint256 _activateReward = activateReward.mul(1e18);\r\n        uint256 testaAmount = _activateReward.mul(1e18).div(testaPerDollar);\r\n        return testaAmount;\r\n    }\r\n    \r\n    /// @dev Return the amount of Testa wei to spend upon harvesting reward.\r\n    function getTestaFee(uint256 rewardETH) public view override returns (uint256) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = pair.getReserves();\r\n        uint256 reserve = uint256(_reserve0).mul(1e18).div(uint256(_reserve1));\r\n        uint256 ethPerDollar = uint256(getLatestPrice()).mul(1e10); // 1e8\r\n        uint256 testaPerDollar = ethPerDollar.mul(1e18).div(reserve);\r\n        \r\n        uint256 ethFee = harvestFee.mul(rewardETH).div(10000).mul(ethPerDollar);\r\n        uint256 testaFee = ethFee.mul(1e18).div(testaPerDollar).div(1e18);\r\n        return testaFee;\r\n    }\r\n    \r\n    /// @dev Return the liquidity value required to activate the progres function.\r\n    function getRequiredLiquidity(uint256 startLiquidity) public view override returns (uint256) {\r\n        uint256 additionLiquidity = liquidityProgressRate.mul(startLiquidity).div(10000);\r\n        uint256 requiredLiquidity = additionLiquidity.add(startLiquidity);\r\n        return requiredLiquidity;\r\n    }\r\n\r\n    /// @dev Return the company's contract address\r\n    function getCompany() public view override returns (address) {\r\n        return company;\r\n    }\r\n\r\n    /// @dev Return the current liquidity value.\r\n    function getLiquidity() public view override returns (uint112) {\r\n        ( , uint112 _reserve1, ) = pair.getReserves();\r\n        return _reserve1;\r\n    }\r\n    \r\n    /// @dev Return the first pay amount value\r\n    function getPayAmount() public view override returns (uint256) {\r\n        return payAmount;\r\n    }\r\n\r\n    /// @dev Return the jTesta amount value\r\n    function getJTestaAmount() public view override returns (uint256) {\r\n        return jTestaAmount;\r\n    }\r\n    \r\n    /// @dev Return the (min, max) progress bar values.\r\n    function getProgressive() external view override returns (int, int) {\r\n        return (minProgressive, maxProgressive);\r\n    }\r\n    \r\n    /// @dev Return the amount of block required to activate the progress function.\r\n    function getActivateAtBlock() external view override returns (uint256) {\r\n        return activateAtBlock;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_activateReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityProgressRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jTestaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activateAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_minProgressive\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_maxProgressive\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivateAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompany\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJTestaAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProgressive\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startLiquidity\",\"type\":\"uint256\"}],\"name\":\"getRequiredLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardETH\",\"type\":\"uint256\"}],\"name\":\"getTestaFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTestaReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityProgressRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_activateReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityProgressRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jTestaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activateAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_minProgressive\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_maxProgressive\",\"type\":\"int256\"}],\"name\":\"setParem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PlanetFarmConfig","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000000778908a7d5503d8b8e35f63e25a349e663242d70000000000000000000000009c990df08cecd84f13a43d642e7f5a84d638f8ee000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a1f0a87470e8400000000000000000000000000000000000000000000000000042c96f409591400000000000000000000000000000000000000000000000000000000000000000005fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0000000000000000000000000000000000000000000000000000000000000003","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://231f3ddf2bc7b76df816e715edf849822c064f88a256ef0ca8b7fb49d06ac0e8"}]}