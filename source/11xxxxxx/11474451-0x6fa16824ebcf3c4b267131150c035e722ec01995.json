{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/avalanche/Avalanche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { AvalancheBase } from \\\"./AvalancheBase.sol\\\";\\nimport { IAvalanche } from \\\"../interfaces/IAvalanche.sol\\\";\\nimport { IPWDR } from \\\"../interfaces/IPWDR.sol\\\";\\nimport { ILoyalty } from \\\"../interfaces/ILoyalty.sol\\\";\\nimport { ISlopes } from \\\"../interfaces/ISlopes.sol\\\";\\n\\ncontract Avalanche is IAvalanche, AvalancheBase {\\n    event Activated(address indexed user);\\n    event Distribution(address indexed user, uint256 totalPwdrRewards, uint256 payoutPerDay);\\n    event Claim(address indexed user, uint256 pwdrAmount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event PwdrRewardAdded(address indexed user, uint256 pwdrReward);\\n    event EthRewardAdded(address indexed user, uint256 ethReward);\\n\\n    uint256 public constant PAYOUT_INTERVAL = 24 hours; // How often the payouts occur\\n    uint256 public constant TOTAL_PAYOUTS = 20; // How many payouts per distribution cycle\\n    \\n    uint256 public nextEpochPwdrReward; // accumulated pwdr for next distribution cycle\\n    uint256 public epochPwdrReward; // current epoch rewards\\n    uint256 public epochPwdrRewardPerDay; // 5% per day, 20 days\\n    uint256 public unstakingFee; // The unstaking fee that is used to increase locked liquidity and reward Avalanche stakers (1 = 0.1%). Defaults to 10%\\n    uint256 public buybackAmount; // The amount of PWDR-ETH LP tokens kept by the unstaking fee that will be converted to PWDR and distributed to stakers (1 = 0.1%). Defaults to 50%\\n\\n    bool public override active; // Becomes true once the 'activate' function called\\n\\n    uint256 public startTime; // When the first payout can be processed (timestamp). It will be 24 hours after the Avalanche contract is activated\\n    uint256 public lastPayout; // When the last payout was processed (timestamp)\\n    uint256 public lastReward; // timestamp when last pwdr reward was minted\\n    uint256 public totalPendingPwdr; // The total amount of pending PWDR available for stakers to claim\\n    uint256 public accPwdrPerShare; // Accumulated PWDR per share, times 1e12.\\n    uint256 public totalStaked; // The total amount of PWDR-ETH LP tokens staked in the contract\\n    uint256 public totalShares; // The total amount of pool shares\\n    uint256 public weight; // pool weight \\n\\n    modifier AvalancheActive {\\n        require(active, \\\"Avalanche is not active\\\");\\n        _;\\n    }\\n\\n    modifier SlopesActive {\\n        require(ISlopes(slopesAddress()).active(), \\\"Slopes are not active\\\");\\n        _;\\n    }\\n\\n    constructor(address addressRegistry) \\n        public \\n        AvalancheBase(addressRegistry)\\n    {\\n        unstakingFee = 100;\\n        buybackAmount = 500;\\n        weight = 5;\\n    }\\n\\n    // activate the avalanche distribution phase\\n    //  signified avalanche is open on first call and calcs\\n    //  all necessary rewards vars\\n    function activate() \\n        external\\n        override\\n        OnlyPWDR\\n    {\\n        if (!active) {\\n            active = true;\\n        }\\n\\n        // The first payout can be processed 24 hours after activation\\n        startTime = block.timestamp + getDistributionPayoutInterval(); \\n        lastPayout = startTime;\\n        epochPwdrReward = nextEpochPwdrReward;\\n        epochPwdrRewardPerDay = epochPwdrReward.div(getTotalDistributionPayouts());\\n        nextEpochPwdrReward = 0;\\n    }\\n\\n    // The _transfer function in the PWDR contract calls this to let the Avalanche contract know that it received the specified amount of PWDR to be distributed \\n    function addPwdrReward(address _from, uint256 _amount) \\n        external\\n        override\\n        // NonZeroAmount(_amount)\\n        SlopesActive\\n        OnlyPWDR\\n    {\\n        // if max supply is hit, distribute directly to pool\\n        // else always add reward to next epoch rewards.\\n        if (IPWDR(pwdrAddress()).maxSupplyHit()) {\\n            totalPendingPwdr = totalPendingPwdr.add(_amount);\\n            accPwdrPerShare = accPwdrPerShare.add(_amount.mul(1e12).div(totalShares));\\n        } else {\\n            nextEpochPwdrReward = nextEpochPwdrReward.add(_amount);\\n        }\\n\\n        emit PwdrRewardAdded(_from, _amount);\\n    }\\n\\n    receive() external payable {\\n        addEthReward();\\n    }\\n\\n    // Allows external sources to add ETH to the contract which is used to buy and then distribute PWDR to stakers\\n    function addEthReward() \\n        public \\n        payable\\n        SlopesActive\\n    {\\n        uint256 ethBalance = address(this).balance;\\n        require(ethBalance > 0, \\\"Must have eth to swap\\\");\\n        _swapExactETHForTokens(address(this).balance, pwdrAddress());\\n\\n        // The _transfer function in the PWDR contract calls the Avalanche contract's updateOwdrReward function \\n        // so we don't need to update the balances after buying the PWRD token\\n        emit EthRewardAdded(msg.sender, msg.value);\\n    }\\n\\n    function _updatePool() \\n        internal \\n        AvalancheActive\\n    {\\n        if (IPWDR(pwdrAddress()).accumulating()) {\\n            _processAccumulationPayouts();\\n        } else {\\n            _processDistributionPayouts();\\n        }\\n    }\\n\\n    // handles updating the pool during accumulation phases\\n    function _processAccumulationPayouts() internal {\\n        if (block.timestamp <= lastReward) {\\n            return;\\n        }\\n\\n        if (totalStaked == 0) {\\n            lastReward = block.timestamp;\\n            return;\\n        }\\n\\n        // Calculate the current PWDR rewards for a specific pool\\n        //  using fixed APR formula and Uniswap price\\n        uint256 tokenPrice = _getLpTokenPrice(pwdrPoolAddress());\\n        uint256 pwdrReward = _calculatePendingRewards(\\n            lastReward,\\n            totalShares,\\n            tokenPrice,\\n            weight\\n        );\\n\\n        // if we hit the max supply here, ensure no overflow \\n        //  epoch will be incremented from the token\\n        address pwdrAddress = pwdrAddress();\\n        uint256 pwdrTotalSupply = IERC20(pwdrAddress).totalSupply();\\n        if (pwdrTotalSupply.add(pwdrReward) >= IPWDR(pwdrAddress).currentMaxSupply()) {\\n            pwdrReward = IPWDR(pwdrAddress).currentMaxSupply().sub(pwdrTotalSupply);\\n        }\\n\\n        if (pwdrReward > 0) {\\n            IPWDR(pwdrAddress).mint(address(this), pwdrReward);\\n            accPwdrPerShare = accPwdrPerShare.add(pwdrReward.mul(1e12).div(totalShares));\\n            lastReward = block.timestamp;\\n        }\\n    }\\n\\n    // Handles paying out the fixed distribution payouts over 20 days\\n    // rewards directly added to accPwdrPerShare at max supply hit, becomes a direct calculation\\n    function _processDistributionPayouts() internal {\\n        if (!active || block.timestamp < startTime \\n            || block.timestamp <= lastReward\\n            || IPWDR(pwdrAddress()).maxSupplyHit() \\n            || epochPwdrReward == 0 || totalStaked == 0) \\n        {\\n            return;\\n        }\\n\\n        // How many days since last payout?\\n        uint256 daysSinceLastPayout = (block.timestamp - lastPayout) / getDistributionPayoutInterval();\\n\\n        // If less than 1, don't do anything\\n        if (daysSinceLastPayout == 0) {\\n            return;\\n        }\\n\\n        // Work out how many payouts have been missed\\n        uint256 payoutNumber = payoutNumber();\\n        uint256 previousPayoutNumber = payoutNumber - daysSinceLastPayout;\\n\\n        // Calculate how much additional reward we have to hand out\\n        uint256 pwdrReward = rewardAtPayout(payoutNumber) - rewardAtPayout(previousPayoutNumber);\\n        if (pwdrReward > epochPwdrReward) {\\n            pwdrReward = epochPwdrReward;\\n        }\\n        epochPwdrReward = epochPwdrReward.sub(pwdrReward);\\n\\n        // Payout the pwdrReward to the stakers\\n        totalPendingPwdr = totalPendingPwdr.add(pwdrReward);\\n        accPwdrPerShare = accPwdrPerShare.add(pwdrReward.mul(1e12).div(totalShares));\\n\\n        // Update lastPayout time\\n        lastPayout += (daysSinceLastPayout * getDistributionPayoutInterval());\\n        lastReward = block.timestamp;\\n\\n        if (payoutNumber >= getTotalDistributionPayouts()) {\\n            IPWDR(pwdrAddress()).updateEpoch(IPWDR(pwdrAddress()).currentEpoch() + 1, 0);\\n        }\\n    }\\n\\n    // Claim earned PWDR\\n    function claim()\\n        external\\n        override\\n    {        \\n        _updatePool();\\n        _claim(msg.sender);\\n    }\\n\\n    function claimFor(address _user)\\n        external\\n        override\\n        OnlyLoyalty\\n    {\\n        _updatePool();\\n        _claim(_user);\\n    }\\n\\n    function _claim(address _user)\\n        internal\\n        AvalancheActive\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.staked > 0) {\\n            uint256 pendingPwdrReward = user.shares.mul(accPwdrPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pendingPwdrReward > 0) {\\n                totalPendingPwdr = totalPendingPwdr.sub(pendingPwdrReward);\\n                user.claimed += pendingPwdrReward;\\n                user.rewardDebt = user.shares.mul(accPwdrPerShare).div(1e12);\\n\\n                // update user/pool shares\\n                uint256 shares = ILoyalty(loyaltyAddress()).getTotalShares(_user, user.staked);\\n                if (shares > user.shares) {\\n                    totalShares = totalShares.add(shares.sub(user.shares));\\n                } else if (shares < user.shares) {\\n                    totalShares = totalShares.sub(user.shares.sub(shares));\\n                }\\n                user.shares = shares;\\n\\n                _safeTokenTransfer(\\n                    pwdrAddress(),\\n                    _user,\\n                    pendingPwdrReward\\n                );\\n\\n                emit Claim(_user, pendingPwdrReward);\\n            }\\n        }\\n    }\\n\\n     // Stake PWDR-ETH LP tokens\\n    function deposit(uint256 _amount) \\n        external\\n        override\\n    {\\n        _deposit(msg.sender, msg.sender, _amount);\\n    }\\n\\n    // stake for another user, used to migrate to this pool\\n    function depositFor(address _from, address _user, uint256 _amount)\\n        external\\n        override\\n        OnlySlopes\\n    {\\n        _deposit(_from, _user, _amount);\\n    }\\n\\n    // Stake PWDR-ETH LP tokens for address\\n    function _deposit(address _from, address _user, uint256 _amount) \\n        internal \\n        AvalancheActive\\n        NonZeroAmount(_amount)\\n    {\\n        IERC20(pwdrPoolAddress()).safeTransferFrom(_from, address(this), _amount);\\n\\n        _updatePool();\\n\\n        _claim(_user);\\n\\n\\n        UserInfo storage user = userInfo[_user];\\n\\n        uint256 shares = ILoyalty(loyaltyAddress()).getTotalShares(_user, _amount);\\n        totalShares = totalShares.add(shares);\\n        user.shares = user.shares.add(shares);\\n\\n        totalStaked = totalStaked.add(_amount);\\n        user.staked = user.staked.add(_amount);\\n        user.rewardDebt = user.shares.mul(accPwdrPerShare).div(1e12);\\n\\n        emit Deposit(_user, _amount);\\n    }\\n\\n    // Unstake and withdraw PWDR-ETH LP tokens and any pending PWDR rewards. \\n    // There is a 10% unstaking fee, meaning the user will only receive 90% of their LP tokens back.\\n    \\n    // For the LP tokens kept by the unstaking fee, a % will get locked forever in the PWDR contract, and the rest will get converted to PWDR and distributed to stakers.\\n    //TODO -> change ratio to 75% convertion to rewards\\n    function withdraw(uint256 _amount)\\n        external\\n        override\\n    {\\n        _withdraw(_msgSender(), _amount);\\n    }\\n\\n    function _withdraw(address _user, uint256 _amount) \\n        internal\\n        AvalancheActive\\n        NonZeroAmount(_amount)\\n        HasStakedBalance(_user)\\n        HasWithdrawableBalance(_user, _amount)\\n    {\\n        _updatePool();\\n\\n        UserInfo storage user = userInfo[_user];\\n        \\n        uint256 unstakingFeeAmount = _amount.mul(unstakingFee).div(1000);\\n        uint256 remainingUserAmount = _amount.sub(unstakingFeeAmount);\\n\\n        // Some of the LP tokens kept by the unstaking fee will be locked forever in the PWDR contract, \\n        // the rest  will be converted to PWDR and distributed to stakers\\n        uint256 lpTokensToConvertToPwdr = unstakingFeeAmount.mul(buybackAmount).div(1000);\\n        uint256 lpTokensToLock = unstakingFeeAmount.sub(lpTokensToConvertToPwdr);\\n\\n        // Remove the liquidity from the Uniswap PWDR-ETH pool and buy PWDR with the ETH received\\n        // The _transfer function in the PWDR.sol contract automatically calls avalanche.addPwdrRewards()\\n        if (lpTokensToConvertToPwdr > 0) {\\n            _removeLiquidityETH(\\n                lpTokensToConvertToPwdr,\\n                pwdrPoolAddress(),\\n                pwdrAddress()\\n            );\\n            addEthReward();\\n        }\\n\\n        // Permanently lock the LP tokens in the PWDR contract\\n        if (lpTokensToLock > 0) {\\n            IERC20(pwdrPoolAddress()).safeTransfer(vaultAddress(), lpTokensToLock);\\n        }\\n\\n        // Claim any pending PWDR\\n        _claim(_user);\\n\\n        uint256 shares = ILoyalty(loyaltyAddress()).getTotalShares(_user, _amount);\\n        totalShares = totalShares.sub(shares);\\n        user.shares = user.shares.sub(shares);\\n\\n        totalStaked = totalStaked.sub(_amount);\\n        user.staked = user.staked.sub(_amount);\\n        user.rewardDebt = user.shares.mul(accPwdrPerShare).div(1e12); // update reward debt after balance change\\n\\n        IERC20(pwdrPoolAddress()).safeTransfer(_user, remainingUserAmount);\\n        emit Withdraw(_user, remainingUserAmount);\\n    }\\n\\n    function payoutNumber() \\n        public\\n        override\\n        view \\n        returns (uint256) \\n    {\\n        if (block.timestamp < startTime) {\\n            return 0;\\n        }\\n\\n        return (block.timestamp - startTime).div(getDistributionPayoutInterval());\\n    }\\n\\n    function timeUntilNextPayout()\\n        external\\n        override\\n        view \\n        returns (uint256) \\n    {\\n        if (epochPwdrReward == 0) {\\n            return 0;\\n        } else {\\n            uint256 payout = payoutNumber();\\n            uint256 nextPayout = startTime.add((payout + 1).mul(getDistributionPayoutInterval()));\\n            return nextPayout - block.timestamp;\\n        }\\n    }\\n\\n    function rewardAtPayout(uint256 _payoutNumber) \\n        public\\n        override\\n        view \\n        returns (uint256) \\n    {\\n        if (_payoutNumber == 0) {\\n            return 0;\\n        } else {\\n            return epochPwdrRewardPerDay * _payoutNumber;\\n        }\\n    }\\n\\n    function getTotalDistributionPayouts() public virtual pure returns (uint256) {\\n        return TOTAL_PAYOUTS;\\n    }\\n\\n    function getDistributionPayoutInterval() public virtual pure returns (uint256) {\\n        return PAYOUT_INTERVAL;\\n    }\\n\\n    function updatePool()\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _updatePool();\\n    }\\n\\n    // Sets the unstaking fee. Can't be higher than 50%.\\n    // _convertToPwdrAmount is the % of the LP tokens from the unstaking fee that will be converted to PWDR and distributed to stakers.\\n    // unstakingFee - unstakingFeeConvertToPwdrAmount = The % of the LP tokens from the unstaking fee that will be permanently locked in the PWDR contract\\n    function setUnstakingFee(uint256 _unstakingFee, uint256 _buybackAmount) \\n        external\\n        //override\\n        HasPatrol(\\\"ADMIN\\\") \\n    {\\n        require(_unstakingFee <= 500, \\\"over 50%\\\");\\n        require(_buybackAmount <= 1000, \\\"bad amount\\\");\\n        unstakingFee = _unstakingFee;\\n        buybackAmount = _buybackAmount;\\n    }\\n\\n    // Function to recover ERC20 tokens accidentally sent to the contract.\\n    // PWDR and PWDR-ETH LP tokens (the only 2 ERC2O's that should be in this contract) can't be withdrawn this way.\\n    function recoverERC20(address _tokenAddress) \\n        external\\n        //override\\n        HasPatrol(\\\"ADMIN\\\") \\n    {\\n        require(_tokenAddress != pwdrAddress() && _tokenAddress != pwdrPoolAddress());\\n        IERC20 token = IERC20(_tokenAddress);\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, tokenBalance);\\n    }\\n\\n     function getAvalancheStats(address _user) \\n        external \\n        view \\n        returns (bool _active, bool _accumulating, uint256[20] memory _stats)\\n    {\\n        _active = active;\\n        _accumulating = IPWDR(pwdrAddress()).accumulating();\\n        \\n        UserInfo storage user = userInfo[_user];\\n\\n        _stats[0] = weight * IPWDR(pwdrAddress()).currentBaseRate();\\n        _stats[1] = lastReward;\\n        _stats[2] = totalStaked;\\n        _stats[3] = totalShares;\\n        _stats[4] = accPwdrPerShare;\\n        _stats[5] = _getTokenPrice(pwdrAddress(), pwdrPoolAddress());\\n        _stats[6] = _getLpTokenPrice(pwdrPoolAddress());\\n\\n        _stats[7] = nextEpochPwdrReward;\\n        _stats[8] = epochPwdrReward;\\n        _stats[9] = epochPwdrRewardPerDay;\\n        _stats[10] = startTime;\\n        _stats[11] = lastPayout; \\n        _stats[12] = payoutNumber();\\n        _stats[13] = unstakingFee;\\n\\n        _stats[14] = IERC20(pwdrPoolAddress()).balanceOf(_user);\\n        _stats[15] = IERC20(pwdrPoolAddress()).allowance(_user, address(this));\\n        _stats[16] = user.staked;\\n        _stats[17] = user.shares;\\n        _stats[18] = user.shares.mul(accPwdrPerShare).div(1e12).sub(user.rewardDebt); // pending rewards\\n        _stats[19] = user.claimed;\\n    }\\n\\n    function setActive(bool _active)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        active = _active;\\n    }\\n\\n    function updateWeight(uint256 _weight)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        weight = _weight;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/avalanche/AvalancheBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { LiquidityPoolBase } from \\\"../pools/LiquidityPoolBase.sol\\\";\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport { SafeMath } from '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nabstract contract AvalancheBase is LiquidityPoolBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address addressRegistry) internal {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAccessControl {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAddressRegistry {\\n    event AvalancheUpdated(address indexed newAddress);\\n    event LGEUpdated(address indexed newAddress);\\n    event LodgeUpdated(address indexed newAddress);\\n    event LoyaltyUpdated(address indexed newAddress);\\n    event PwdrUpdated(address indexed newAddress);\\n    event PwdrPoolUpdated(address indexed newAddress);\\n    event SlopesUpdated(address indexed newAddress);\\n    event SnowPatrolUpdated(address indexed newAddress);\\n    event TreasuryUpdated(address indexed newAddress);\\n    event UniswapRouterUpdated(address indexed newAddress);\\n    event VaultUpdated(address indexed newAddress);\\n    event WethUpdated(address indexed newAddress);\\n    \\n    function getAvalanche() external view returns (address);\\n    function setAvalanche(address _address) external;\\n\\n    function getLGE() external view returns (address);\\n    function setLGE(address _address) external;\\n\\n    function getLodge() external view returns (address);\\n    function setLodge(address _address) external;\\n\\n    function getLoyalty() external view returns (address);\\n    function setLoyalty(address _address) external;\\n\\n    function getPwdr() external view returns (address);\\n    function setPwdr(address _address) external;\\n\\n    function getPwdrPool() external view returns (address);\\n    function setPwdrPool(address _address) external;\\n\\n    function getSlopes() external view returns (address);\\n    function setSlopes(address _address) external;\\n\\n    function getSnowPatrol() external view returns (address);\\n    function setSnowPatrol(address _address) external;\\n\\n    function getTreasury() external view returns (address payable);\\n    function setTreasury(address _address) external;\\n\\n    function getUniswapRouter() external view returns (address);\\n    function setUniswapRouter(address _address) external;\\n\\n    function getVault() external view returns (address);\\n    function setVault(address _address) external;\\n\\n    function getWeth() external view returns (address);\\n    function setWeth(address _address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAvalanche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAvalanche {\\n    event Activated(address indexed user);\\n    event Claim(address indexed user, uint256 pwdrAmount);    \\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event PwdrRewardAdded(address indexed user, uint256 pwdrReward);\\n    event EthRewardAdded(address indexed user, uint256 ethReward);\\n\\n    function active() external view returns (bool);\\n    function activate() external;\\n\\n    function addPwdrReward(address _from, uint256 _amount) external;\\n    // function addEthReward() external virtual payable;\\n    function deposit(uint256 _amount) external;\\n    function depositFor(address _from, address _user, uint256 _amount) external;\\n    function claim() external;\\n    function claimFor(address _user) external;\\n    function withdraw(uint256 _amount) external;\\n\\n    function payoutNumber() external view returns (uint256);\\n    function timeUntilNextPayout() external view returns (uint256); \\n    function rewardAtPayout(uint256 _payoutNumber) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ILoyalty {\\n    event TrancheUpdated(uint256 _tranche, uint256 _points);\\n    event LoyaltyUpdated(address indexed _user, uint256 _tranche, uint256 _points);\\n    event BaseFeeUpdated(address indexed _user, uint256 _baseFee);\\n    event ProtocolFeeUpdated(address indexed _user, uint256 _protocolFee);\\n    event DiscountMultiplierUpdated(address indexed _user, uint256 _multiplier);\\n    event Deposit(address indexed _user, uint256 _id, uint256 _amount);\\n    event Withdraw(address indexed _user, uint256 _id, uint256 _amount);\\n    \\n    function staked(uint256 _id, address _address) external view returns (uint256);\\n    function whitelistedTokens(uint256 _id) external view returns (bool);\\n\\n    function getTotalShares(address _user, uint256 _amount) external view returns (uint256);\\n    function getTotalFee(address _user, uint256 _amount) external view returns (uint256);\\n    function getProtocolFee(uint256 _amount) external view returns (uint256);\\n    function getBoost(address _user) external view returns (uint256);\\n    function deposit(uint256 _id, uint256 _amount) external;\\n    function withdraw(uint256 _id, uint256 _amount) external;\\n    function whitelistToken(uint256 _id) external;\\n    function blacklistToken(uint256 _id) external;\\n    function updatePoints(address _user) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPWDR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IPWDR {\\n    event EpochUpdated(address _address, uint256 _epoch, uint256 _phase);\\n\\n    function MAX_SUPPLY() external view returns (uint256);\\n    function maxSupplyHit() external view returns (bool);\\n    function transferFee() external view returns (uint256);\\n    function currentEpoch() external view returns (uint256);\\n    function currentPhase() external view returns (uint256);\\n    function epochMaxSupply(uint _epoch) external view returns (uint256);\\n    function epochBaseRate(uint _epoch) external view returns (uint256);\\n\\n    function accumulating() external view returns (bool);\\n    function currentMaxSupply() external view returns (uint256);\\n    function currentBaseRate() external view returns (uint256);\\n    // function incrementEpoch() external;\\n    // function incrementPhase() external;\\n    \\n    function updateEpoch(uint256 _epoch, uint256 _phase) external;\\n    function mint(address _to, uint256 _amount) external;\\n    function setTransferFee(uint256 _transferFee) external;\\n    function addToTransferWhitelist(bool _addToSenderWhitelist, address _address) external;\\n    function removeFromTransferWhitelist(bool _removeFromSenderWhitelist, address _address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISlopes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ISlopes {\\n    event Activated(address user);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Claim(address indexed user, uint256 indexed pid, uint256 pwdrAmount, uint256 tokenAmount);\\n    event ClaimAll(address indexed user, uint256 pwdrAmount, uint256[] tokenAmounts);\\n    event Migrate(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    // event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event PwdrPurchase(address indexed user, uint256 ethSpentOnPwdr, uint256 pwdrBought);\\n\\n    function active() external view returns (bool);\\n    function pwdrSentToAvalanche() external view returns (uint256);\\n    function stakingFee() external view returns (uint256);\\n    function roundRobinFee() external view returns (uint256);\\n    function protocolFee() external view returns (uint256);\\n\\n    function activate() external;\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n    // function addPwdrReward(address _from, uint256 _amount) external virtual;\\n    // function addEthReward() external virtual payable;\\n    function claim(uint256 _pid) external;\\n    function claimAll() external;\\n    function claimAllFor(address _user) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function migrate() external;\\n    function poolLength() external view returns (uint256);\\n    function addPool(address _token, address _lpToken, bool _lpStaked, uint256 _weight) external;\\n    function setWeight(uint256 _pid, uint256 _weight) external;\\n}\\n\\n// interface ISlopes {\\n    \\n\\n//     function activate() external;\\n//     function poolLength() external view returns (uint256);\\n//     function massUpdatePools() external;\\n//     function updatePool(uint256 _pid) external;\\n//     function deposit(uint256 _pid, uint256 _amount) external;\\n// }\"\r\n    },\r\n    \"contracts/interfaces/ISnowPatrol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AltitudeBase } from \\\"../utils/AltitudeBase.sol\\\";\\n\\ninterface ISnowPatrol {\\n    function ADMIN_ROLE() external pure returns (bytes32);\\n    function LGE_ROLE() external pure returns (bytes32);\\n    function PWDR_ROLE() external pure returns (bytes32);\\n    function SLOPES_ROLE() external pure returns (bytes32);\\n    function setCoreRoles() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IWETH {\\n    event Approval(address indexed src, address indexed guy, uint wad);\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\n    event Deposit(address indexed dst, uint wad);\\n    event Withdrawal(address indexed src, uint wad);\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n    function totalSupply() external view returns (uint);\\n    function approve(address guy, uint wad) external returns (bool);\\n    function transfer(address dst, uint wad) external returns (bool);\\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/pools/LiquidityPoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { PoolBase } from \\\"./PoolBase.sol\\\";\\n\\ncontract LiquidityPoolBase is PoolBase {\\n    struct UserInfo {\\n        uint256 shares; // How many pool shares user owns, equal to staked tokens with bonuses applied\\n        uint256 staked; // How many PWDR-ETH LP tokens the user has staked\\n        uint256 rewardDebt; // Reward debt. Works the same as in the Slopes contract\\n        uint256 claimed; // Tracks the amount of PWDR claimed by the user\\n    }\\n\\n    mapping (address => UserInfo) public userInfo; // Info of each user that stakes PWDR-ETH LP tokens\\n\\n    modifier HasStakedBalance(address _address) {\\n        require(userInfo[_address].staked > 0, \\\"Must have staked balance greater than zero\\\");\\n        _;\\n    }\\n\\n    modifier HasWithdrawableBalance(address _address, uint256 _amount) {\\n        require(userInfo[_address].staked >= _amount, \\\"Cannot withdraw more tokens than staked balance\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/pools/PoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { IAvalanche } from \\\"../interfaces/IAvalanche.sol\\\";\\nimport { IPWDR } from \\\"../interfaces/IPWDR.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { UniswapBase } from \\\"../utils/UniswapBase.sol\\\";\\n\\ncontract PoolBase is UniswapBase, ReentrancyGuard {\\n\\n    uint256 internal constant SECONDS_PER_YEAR = 360 * 24 * 60 * 60; // std business yr, used to calculatee APR\\n\\n    // Internal function to safely transfer tokens in case there is a rounding error\\n    function _safeTokenTransfer(\\n        address _token,\\n        address _to, \\n        uint256 _amount\\n    ) \\n        internal\\n    {\\n        uint256 tokenBalance = IERC20(_token).balanceOf(address(this));\\n        if (_amount > tokenBalance) {\\n            IERC20(_token).safeTransfer(_to, tokenBalance);\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    // shared function to calculate fixed apr pwdr rewards\\n    //  used in both avalanche and slopes\\n    function _calculatePendingRewards(\\n        uint256 _lastReward,\\n        uint256 _supply,\\n        uint256 _tokenPrice,\\n        uint256 _weight\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 secondsElapsed = block.timestamp - _lastReward;\\n\\n        // get PWDR uniswap price\\n        uint256 pwdrPrice = _getTokenPrice(pwdrAddress(), pwdrPoolAddress());\\n\\n        uint256 scaledTotalLiquidityValue = _supply * _tokenPrice; // total value pooled tokens\\n        uint256 fixedApr = _weight * IPWDR(pwdrAddress()).currentBaseRate();\\n        uint256 yearlyRewards = ((fixedApr / 100) * scaledTotalLiquidityValue) / pwdrPrice; // instantaneous yearly pwdr payout\\n        uint256 rewardsPerSecond = yearlyRewards / SECONDS_PER_YEAR; // instantaneous pwdr rewards per second \\n        return secondsElapsed * rewardsPerSecond;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/AddressBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { UtilitiesBase } from \\\"./UtilitiesBase.sol\\\";\\n\\nabstract contract AddressBase is UtilitiesBase {\\n    address internal _addressRegistry;\\n\\n    function _setAddressRegistry(address _address)\\n        internal\\n    {\\n        _addressRegistry = _address;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/AltitudeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { ISnowPatrol } from \\\"../interfaces/ISnowPatrol.sol\\\";\\nimport { AddressBase } from \\\"./AddressBase.sol\\\";\\n\\nabstract contract AltitudeBase is AddressBase {\\n    modifier OnlyLGE {\\n        require(\\n            _msgSender() == lgeAddress(), \\n            \\\"Only the LGE contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyLoyalty {\\n        require(\\n            _msgSender() == loyaltyAddress(), \\n            \\\"Only the Loyalty contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyPWDR {\\n        require(\\n            _msgSender() == pwdrAddress(),\\n            \\\"Only PWDR Contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlySlopes {\\n        require(\\n            _msgSender() == slopesAddress(), \\n            \\\"Only the Slopes contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function avalancheAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getAvalanche();\\n    }\\n\\n    function lgeAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLGE();\\n    }\\n\\n    function lodgeAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLodge();\\n    }\\n\\n    function loyaltyAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLoyalty();\\n    }\\n\\n    function pwdrAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getPwdr();\\n    }\\n\\n    function pwdrPoolAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getPwdrPool();\\n    }\\n\\n    function slopesAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getSlopes();\\n    }\\n\\n    function snowPatrolAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getSnowPatrol();\\n    }\\n\\n    function treasuryAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getTreasury();\\n    }\\n\\n    function uniswapRouterAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getUniswapRouter();\\n    }\\n\\n    function vaultAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getVault();\\n    }\\n\\n    function wethAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getWeth();\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/PatrolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AltitudeBase } from \\\"./AltitudeBase.sol\\\";\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { IAccessControl } from \\\"../interfaces/IAccessControl.sol\\\";\\n\\ncontract PatrolBase is AltitudeBase {\\n    modifier HasPatrol(bytes memory _patrol) {\\n        require(\\n            IAccessControl(snowPatrolAddress()).hasRole(keccak256(_patrol), address(_msgSender())),\\n            \\\"Account does not have sufficient role to call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function hasPatrol(bytes memory _patrol, address _address)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return IAccessControl(snowPatrolAddress()).hasRole(keccak256(_patrol), _address);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/UniswapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { ERC20 } from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport { SafeMath } from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport { IUniswapV2Pair } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport { IUniswapV2Router02 } from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\nimport { PatrolBase } from \\\"./PatrolBase.sol\\\";\\n\\nabstract contract UniswapBase is PatrolBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public deadlineTime = 5 minutes;\\n\\n    function _swapExactTokensForETH(\\n        uint256 _amount,\\n        address _token\\n    ) \\n        internal\\n        NonZeroTokenBalance(_token)\\n        NonZeroAmount(_amount)\\n        returns (uint256)\\n    {\\n        require(\\n            IERC20(_token).balanceOf(address(this)) >= _amount,\\n            \\\"Not enough tokens to swap\\\"\\n        );\\n\\n        address[] memory poolPath = new address[](2);\\n        poolPath[0] = address(_token);\\n        poolPath[1] = wethAddress();\\n\\n        uint256 balanceBefore = address(this).balance;\\n        address uniswapRouter = uniswapRouterAddress();\\n        IERC20(_token).safeApprove(uniswapRouter, 0);\\n        IERC20(_token).safeApprove(uniswapRouter, _amount);\\n        IUniswapV2Router02(uniswapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            _amount, \\n            0, \\n            poolPath, \\n            address(this), \\n            _getDeadline()\\n        );\\n        return address(this).balance.sub(balanceBefore);\\n    }\\n\\n    // swap eth for tokens, return amount of tokens bought\\n    function _swapExactETHForTokens(\\n        uint256 _amount,\\n        address _token\\n    ) \\n        internal\\n        NonZeroAmount(_amount)\\n        returns (uint256)\\n    {\\n        address[] memory pwdrPath = new address[](2);\\n        pwdrPath[0] = wethAddress();\\n        pwdrPath[1] = _token;\\n\\n        uint256 amountBefore = IERC20(_token).balanceOf(address(this));\\n        address uniswapRouter = uniswapRouterAddress();\\n        IERC20(wethAddress()).safeApprove(uniswapRouter, 0);\\n        IERC20(wethAddress()).safeApprove(uniswapRouter, _amount);\\n        IUniswapV2Router02(uniswapRouter)\\n            .swapExactETHForTokensSupportingFeeOnTransferTokens{ value: _amount }(\\n                0, \\n                pwdrPath, \\n                address(this), \\n                _getDeadline()\\n            );\\n        return IERC20(_token).balanceOf(address(this)).sub(amountBefore);\\n    }\\n\\n    // swap exact tokens for tokens, always using weth as middle address\\n    function _swapExactTokensForTokens(\\n        uint256 _amount,\\n        address _tokenIn,\\n        address _tokenOut\\n    )\\n        internal\\n        NonZeroTokenBalance(_tokenIn)\\n        returns (uint256)\\n    {\\n        address[] memory pwdrPath = new address[](3);\\n        pwdrPath[0] = _tokenIn; \\n        pwdrPath[1] = wethAddress();\\n        pwdrPath[2] = _tokenOut;\\n\\n        uint256 amountBefore = IERC20(_tokenOut).balanceOf(address(this));\\n        address uniswapRouter = uniswapRouterAddress();\\n        IERC20(_tokenIn).safeApprove(uniswapRouter, 0);\\n        IERC20(_tokenIn).safeApprove(uniswapRouter, _amount);\\n        IUniswapV2Router02(uniswapRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            _amount,\\n            0, \\n            pwdrPath, \\n            address(this), \\n            _getDeadline()\\n        );\\n\\n        uint256 amountAfter = IERC20(_tokenOut).balanceOf(address(this));\\n        return amountAfter.sub(amountBefore);\\n    }\\n\\n    // add liquidity on uniswap with _ethAmount, _tokenAmount to _token\\n    // return # lpTokens received\\n    function _addLiquidityETH(\\n        uint256 _ethAmount,\\n        uint256 _tokenAmount,\\n        address _token\\n    )\\n        internal\\n        NonZeroAmount(_ethAmount)\\n        NonZeroAmount(_tokenAmount)\\n        returns (uint256)\\n    {\\n        address uniswapRouter = IAddressRegistry(_addressRegistry).getUniswapRouter();\\n\\n        IERC20(_token).safeApprove(uniswapRouter, 0);\\n        IERC20(_token).safeApprove(uniswapRouter, _tokenAmount);\\n        ( , , uint256 lpTokensReceived) = IUniswapV2Router02(uniswapRouter).addLiquidityETH{value: _ethAmount}(\\n            _token, \\n            _tokenAmount, \\n            0, \\n            0, \\n            address(this), \\n            _getDeadline()\\n        );\\n\\n        return lpTokensReceived;\\n    }\\n    \\n    // remove liquidity from _token with owned _amount LP token _lpToken\\n    function _removeLiquidityETH(\\n        uint256 _amount,\\n        address _lpToken,\\n        address _token\\n    ) \\n        internal\\n        NonZeroAmount(_amount)\\n    {\\n        address uniswapRouter = uniswapRouterAddress();\\n        \\n        IERC20(_lpToken).safeApprove(uniswapRouter, 0);\\n        IERC20(_lpToken).safeApprove(uniswapRouter, _amount);\\n        IUniswapV2Router02(uniswapRouter).removeLiquidityETHSupportingFeeOnTransferTokens(\\n            _token, \\n            _amount, \\n            0, \\n            0, \\n            address(this), \\n            _getDeadline()\\n        );\\n    }\\n\\n    function _unwrapETH(uint256 _amount)\\n        internal\\n        NonZeroAmount(_amount)\\n    {\\n        IWETH(wethAddress()).withdraw(_amount);\\n    }\\n\\n    // internal view function to view price of any token in ETH\\n    function _getTokenPrice(\\n        address _token,\\n        address _lpToken\\n    ) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        if (_token == wethAddress()) {\\n            return 1e18;\\n        }\\n        \\n        uint256 tokenBalance = IERC20(_token).balanceOf(_lpToken);\\n        if (tokenBalance > 0) {\\n            uint256 wethBalance = IERC20(wethAddress()).balanceOf(_lpToken);\\n            uint256 adjuster = 36 - uint256(ERC20(_token).decimals()); // handle non-base 18 tokens\\n            uint256 tokensPerEth = tokenBalance.mul(10**adjuster).div(wethBalance);\\n            return uint256(1e36).div(tokensPerEth); // price in gwei of token\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _getLpTokenPrice(address _lpToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20(wethAddress()).balanceOf(_lpToken).mul(2).mul(1e18).div(IERC20(_lpToken).totalSupply());\\n    }\\n\\n    function _getDeadline()\\n        internal\\n        view\\n        returns (uint256) \\n    {\\n        return block.timestamp + 5 minutes;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/UtilitiesBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\nabstract contract UtilitiesBase is Context {\\n    modifier NonZeroAmount(uint256 _amount) {\\n        require(\\n            _amount > 0, \\n            \\\"Amount must be greater than zero\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NonZeroTokenBalance(address _address) {\\n        require(\\n            IERC20(_address).balanceOf(address(this)) > 0,\\n            \\\"No tokens to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NonZeroETHBalance(address _address) {\\n        require(\\n            address(this).balance > 0,\\n            \\\"No ETH to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyOrigin {\\n        require(\\n            tx.origin == address(this), \\n            \\\"Only origin contract can call this function\\\"\\n        );\\n        _;\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pwdrAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPwdrRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutPerDay\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReward\",\"type\":\"uint256\"}],\"name\":\"EthRewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pwdrReward\",\"type\":\"uint256\"}],\"name\":\"PwdrRewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAYOUT_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_PAYOUTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"_getLpTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"_getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accPwdrPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addEthReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addPwdrReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPwdrReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPwdrRewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAvalancheStats\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_accumulating\",\"type\":\"bool\"},{\"internalType\":\"uint256[20]\",\"name\":\"_stats\",\"type\":\"uint256[20]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionPayoutInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDistributionPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPwdrReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutNumber\",\"type\":\"uint256\"}],\"name\":\"rewardAtPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackAmount\",\"type\":\"uint256\"}],\"name\":\"setUnstakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUntilNextPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingPwdr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"updateWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Avalanche","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000001ec4a8b60191230c4c6b4db79e321441b63bd143","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}