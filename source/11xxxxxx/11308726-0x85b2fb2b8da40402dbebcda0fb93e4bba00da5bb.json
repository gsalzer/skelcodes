{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\n// MRconnect contracts\r\n\r\ncontract MSconnext  {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    uint256 startAt = 0; \r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    uint256 public contractTotalGroupStaked = 0;\r\n    uint256 mrTotalDeposit = 0;// mr 总质押\r\n    uint256 msTotalDeposit = 0;// ms 总质押\r\n    uint256 public daysOfProcess; // 默认为0\r\n    uint256 baseHalve = 1;\r\n\r\n    // 用于计算动态收益的抵押\r\n    // 系统临时变量\r\n    mapping(address => uint256) public  stakeForDynamic;\r\n    mapping(address => uint256) public  userRewardPerTokenPaidForDynamic;\r\n    mapping(address => uint256) public  rewardsForDynamic; \r\n    mapping(address => uint256) public  userRewardPerTokenPaid;\r\n    mapping(address => uint256) public  rewards; \r\n    mapping(uint256 => uint256) public  rewardsOfEveryDay;  //记录每日收获\r\n\r\n    // 我的团队质押\r\n    // 只拿五代\r\n    // 也包括我自己的\r\n    mapping(address => uint256)  public groupStaked; \r\n \r\n    uint256 public groupTeamTotalRelease;// 一共发放了多少星级奖励\r\n    uint256 public mrStaticRewardTotalRelease; // 一共发放了多少静态奖励\r\n    uint256 public mrDynamicRewardTotalRelease; //  一共发放了多少动态奖励\r\n    uint256 public usdtTotalRelease;  //  一共释放多少USDT\r\n\r\n    mapping(address => uint256) public mrDynamicRewardAlreadyRelase; \r\n    mapping(address => uint256) public mrStaticRewardAlreadyRelase; // mr 矿池个人静态奖励已经发放的\r\n    mapping(address => uint256) public usdtAlreadyWithdraw;   // usdt 已经提取的\r\n    mapping(address => uint256) public usdtAvailable;     // usdt 当前可以领取的\r\n    mapping(address => uint256) public usdtBaseOfEachUser;   // 用户的USDT的总基数\r\n\r\n    mapping(address => uint256) public groupTeamRelease;     // 个人星级矿池释放\r\n    uint256 public eachDayRelase = 1050 * 1e18;   \r\n\r\n    // 每秒静态收益\r\n    uint256 public staticRewardPerSecond = uint256(eachDayRelase).mul(40).div(86400).div(100);\r\n\r\n\r\n    // mr erc20 token\r\n    address public mrToken=address(0xE3323B78F5bF605949ae0eDf26c5AD9bFf4dDbB9); \r\n    // ms erc20 token\r\n    address public msToken=address(0xeDFFAdB79bc62737d6033594fAf56A5A3DF48aA2); \r\n    address public  usdtMsUniContract = address(0xCaBD18918115B98e2fA0bDcB77A24AE6aB3d9c9c);\r\n    // usdt 的erc20 地址\r\n    address public  usdtToken = address(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);\r\n\r\n\r\n\r\n    address public  owner;\r\n    // 推荐关系\r\n    mapping (address => address) public relationship;\r\n    // 用户的直接下级(只记录前6个)\r\n    mapping (address => address[]) public derives;\r\n\r\n\r\n    mapping (address => uint256) public  mrDeposit; // 个人 mr 总质押\r\n    mapping (address => uint256) public  mrTimestamp; // 个人最后一次 存入mr 的时间\r\n\r\n    mapping (address => uint256) public  msDeposit;     // 个人 ms 总质押\r\n    mapping (address => uint256) public  msTimestamp; // 个人最后一次存入 ms 的时间\r\n\r\n\r\n    event Deposit(address indexed user, uint256 amount); // 存入MR\r\n    event TeamReward(address indexed user,uint256 reward); // 领取团队奖励\r\n\r\n    event DepositMs(address indexed user,uint256 amount); // 存入MS\r\n    event Withdraw(address indexed user,uint256 amount); // 领取MS\r\n\r\n    event WithdrawUsdt(address indexed user,uint256 amount); // 领取USDT\r\n    event Exit(address indexed user,uint256 amount); // 退出关系\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        startAt = block.timestamp;\r\n        lastUpdateTime = block.timestamp;\r\n    }\r\n\r\n    function setRelationship(address _invitee) private{\r\n        // 记录推荐关系\r\n        if (relationship[msg.sender] == address(0)){\r\n            relationship[msg.sender] = _invitee;\r\n        }  \r\n\r\n        // 记录我的直接下级\r\n        if (derives[_invitee].length < 6){\r\n            derives[_invitee].push(msg.sender);\r\n        }\r\n    }\r\n\r\n    // 返回三个参数\r\n    // 总存入MS, 总基数USDT,我获得的USDT\r\n    function getMSbankInfo() public view returns (uint256,uint256,uint256){\r\n        return (msDeposit[msg.sender], usdtBaseOfEachUser[msg.sender],usdtAlreadyWithdraw[msg.sender]);\r\n    }\r\n\r\n    // 获取用户自己的MS\r\n    function getMs(address _user) public view returns (uint256) {\r\n        return rewards[_user].add(rewardsForDynamic[_user]).add(groupTeamRelease[_user]);\r\n\r\n    }\r\n\r\n    // 获取当前日挖出的\r\n    // 和星级矿池总挖出的\r\n    function getDailySoFar() public view returns (uint256,uint256) {\r\n        return (rewardsOfEveryDay[daysOfProcess],groupTeamTotalRelease.add(mrStaticRewardTotalRelease).add(mrDynamicRewardTotalRelease));\r\n    }\r\n\r\n    // 获取直接下级和自己的上级\r\n    function getDeriversAndUpper (address _user) public view returns (address[] memory,address  ){  \r\n        return (derives[_user],relationship[_user]);\r\n    }\r\n\r\n    // 质押 MR\r\n    function depositMR(uint256 _amount,address _invitee) public updateReward(msg.sender) checkhalve checkStart checkDays {\r\n        require(_amount > 0);\r\n        //质押MR\r\n       IERC20(mrToken).transferFrom(msg.sender,address(this),_amount);\r\n\r\n       setRelationship(_invitee);\r\n       mrDeposit[msg.sender]=mrDeposit[msg.sender].add(_amount);\r\n       mrTimestamp[msg.sender]=block.timestamp;\r\n       mrTotalDeposit=mrTotalDeposit.add(_amount);\r\n       if (mrDeposit[msg.sender] >= 1000 * 1e18){\r\n            updateRewardForDynamic(msg.sender,rewardPerTokenStored);\r\n            processForDynamic( _amount);  \r\n       }\r\n\r\n       calcGroup(_amount);\r\n       emit Deposit(msg.sender,_amount);\r\n    }\r\n\r\n\r\n    function processForDynamic(uint256 _amount) public {\r\n        require(_amount > 0);\r\n        rewardPerTokenStored = rewardPerToken();\r\n\r\n        // 上 1 级\r\n        address upper = relationship[msg.sender];\r\n        updateRewardForDynamic(upper,rewardPerTokenStored);\r\n        stakeForDynamic[upper] = stakeForDynamic[upper].add(_amount.div(2));// 记给上 1 级50%\r\n        \r\n        // 上 2 级\r\n        upper = relationship[upper];\r\n        if (upper == address(0)){\r\n            return;\r\n        }\r\n        updateRewardForDynamic(upper,rewardPerTokenStored);\r\n        stakeForDynamic[upper] = stakeForDynamic[upper].add(_amount.mul(3).div(10));// 记给上 2 级30%\r\n        \r\n        // 上 3 级\r\n        upper = relationship[upper];\r\n        if (upper == address(0)){\r\n            return;\r\n        }\r\n        updateRewardForDynamic(upper,rewardPerTokenStored);\r\n        stakeForDynamic[upper] = stakeForDynamic[upper].add(_amount.div(10));// 记给上 3 级 10%\r\n\r\n    }\r\n\r\n    // 计算团队收益\r\n    function calcGroup(uint256 _amount) public{\r\n        require(_amount > 0);\r\n        if (mrDeposit[msg.sender] < 10000 * 1e18){\r\n            return;\r\n        }\r\n        \r\n      // 大于 10000 才计算奖励\r\n      if (mrDeposit[msg.sender] >= 10000 * 1e18){\r\n        // 第一次记录的时候\r\n        if ( groupStaked[msg.sender] == 0){\r\n            groupStaked[msg.sender]=groupStaked[msg.sender].add(mrDeposit[msg.sender]);\r\n        }else {\r\n            groupStaked[msg.sender]=groupStaked[msg.sender].add(_amount);\r\n        }\r\n        uint256 affectedGroups = 1;\r\n        address user = msg.sender;\r\n\r\n        for (uint i=0;i<5;i++){\r\n            address upper = relationship[user];\r\n            if (upper == address(0)){\r\n                break;\r\n            }else{\r\n                groupStaked[upper]=groupStaked[upper].add(_amount);\r\n                user = upper;\r\n                affectedGroups=affectedGroups.add(1);\r\n            }\r\n        } \r\n      // 更新全网团队总质押\r\n      contractTotalGroupStaked=contractTotalGroupStaked.add(_amount.mul(affectedGroups));\r\n      } \r\n    }\r\n\r\n    // 返回参数\r\n    // 个人质押,团队质押\r\n    function queryStarRanks(address _user) public view returns (uint256,uint256) {\r\n        require(_user != address(0),\"address is not zero!\");\r\n        return (mrDeposit[_user],groupStaked[_user]);\r\n    }\r\n\r\n    // 申请发放星级奖励\r\n    function getTeamReward(uint _starRanks) public {\r\n        uint256 re = viewTeamRewrd(_starRanks,msg.sender);\r\n        if (re> 0){\r\n             safeTransfer(\r\n                msToken,\r\n                msg.sender,\r\n                re);\r\n                // 记录自己领取了多少奖励\r\n              groupTeamRelease[msg.sender] = groupTeamRelease[msg.sender].add(re);\r\n              groupTeamTotalRelease = groupTeamTotalRelease.add(re);\r\n              rewardsOfEveryDay[daysOfProcess] = rewardsOfEveryDay[daysOfProcess].add(groupTeamTotalRelease);\r\n              emit TeamReward(msg.sender,re);\r\n        }\r\n    }\r\n\r\n    function getUserRanks(address _user) public view returns (uint256){\r\n        // 100  代表用户没有等级\r\n        if (mrDeposit[_user] < 10000 * 1e18){\r\n                return 100;\r\n        }\r\n        uint256 userDeposit1=mrDeposit[_user];\r\n        uint256 userGroupDepost1=groupStaked[_user];\r\n        if (userDeposit1  >= 10000  * 1e18 \r\n            && userDeposit1  < 30000\r\n            &&  userGroupDepost1 >= 30000  * 1e18\r\n            &&  userGroupDepost1 < 100000  * 1e18){\r\n                        return 0;\r\n        }\r\n         if (userDeposit1  >= 30000  * 1e18 \r\n             && userDeposit1  < 50000  * 1e18 \r\n                    &&  userGroupDepost1 >= 100000  * 1e18\r\n                    && userGroupDepost1 <  500000  * 1e18 ){\r\n                        return 1;\r\n                    }\r\n         if (userDeposit1  >= 50000  * 1e18 \r\n            && userDeposit1  <  70000  * 1e18 \r\n                    &&  userGroupDepost1 >= 500000  * 1e18\r\n                    &&  userGroupDepost1 < 2000000  * 1e18){\r\n                        return 2;\r\n                    }\r\n\r\n         if (userDeposit1  >= 70000  * 1e18\r\n            &&  userDeposit1  < 100000  * 1e18  \r\n                    &&  userGroupDepost1 >= 2000000  * 1e18\r\n                     &&  userGroupDepost1 < 10000000  * 1e18){\r\n                        return 3;\r\n                    }\r\n\r\n         if (userDeposit1  >= 100000  * 1e18 \r\n                    &&  userGroupDepost1 >= 10000000  * 1e18){\r\n                        return 4;\r\n                    }\r\n        return 100;\r\n    }\r\n    \r\n    function viewTeamRewrd(uint _starRanks,address _user) public view returns (uint256 rewardTeamRelease){\r\n            require(_starRanks >=0 && _starRanks < 5,\"star ranks not illegal\");\r\n            if (mrDeposit[_user] < 10000 * 1e18){\r\n                return 0;\r\n            }\r\n            uint256 userDeposit1=mrDeposit[_user];\r\n            uint256 userGroupDepost1=groupStaked[_user];\r\n            uint256 userLastDepositTimestamp=mrTimestamp[_user];\r\n            \r\n            /*\r\n            *  第一级 \r\n            */\r\n            if (_starRanks == 0){\r\n                if ( userDeposit1  >= 10000  * 1e18 \r\n                    &&  userGroupDepost1>= 30000  * 1e18 ){\r\n                        rewardTeamRelease = userGroupDepost1\r\n                                                .div(contractTotalGroupStaked)\r\n                                                .div(86400)\r\n                                                .mul(eachDayRelase)\r\n                                                .div(50)\r\n                                                .mul((block.timestamp.sub(userLastDepositTimestamp)));\r\n\r\n                }\r\n            }\r\n            \r\n            /*\r\n            *  第二级 \r\n            */            \r\n            if (_starRanks == 1){\r\n                if ( userDeposit1  >= 30000  * 1e18 \r\n                    &&  userGroupDepost1>= 100000  * 1e18 ){\r\n                        rewardTeamRelease = userGroupDepost1\r\n                                                .div(contractTotalGroupStaked)\r\n                                                .div(86400)\r\n                                                .mul(eachDayRelase )\r\n                                                .mul(3)\r\n                                                .div(100)\r\n                                                .mul((block.timestamp.sub(userLastDepositTimestamp)));\r\n                }\r\n            }\r\n            /*\r\n            *  第三级 \r\n            */ \r\n            if (_starRanks == 2){\r\n                if ( userDeposit1  >= 50000  * 1e18 \r\n                    &&  userGroupDepost1>= 500000  * 1e18 ){\r\n                        rewardTeamRelease = userGroupDepost1\r\n                                                .div(contractTotalGroupStaked)\r\n                                                .div(86400)\r\n                                                .mul(eachDayRelase )\r\n                                                .div(25)\r\n                                                .mul((block.timestamp.sub(userLastDepositTimestamp)));\r\n                }\r\n            }  \r\n            /*\r\n            *  第四级 \r\n            */ \r\n            if (_starRanks == 3){\r\n                if ( userDeposit1  >= 70000  * 1e18 \r\n                    &&  userGroupDepost1>= 2000000  * 1e18 ){\r\n                        rewardTeamRelease = userGroupDepost1\r\n                                                .div(contractTotalGroupStaked)\r\n                                                .div(86400)\r\n                                                .mul(eachDayRelase )\r\n                                                .div(20)\r\n                                                .mul((block.timestamp.sub(userLastDepositTimestamp)));\r\n                }\r\n            }\r\n            /*\r\n            *  第五级 \r\n            */             \r\n            if (_starRanks == 4){\r\n                if ( userDeposit1  >= 100000  * 1e18 \r\n                    &&  userGroupDepost1>= 10000000 * 1e18 ){\r\n                        rewardTeamRelease = userGroupDepost1\r\n                                                .div(contractTotalGroupStaked)\r\n                                                .div(86400)\r\n                                                .mul(eachDayRelase)\r\n                                                .mul(3)\r\n                                                .div(50)\r\n                                                .mul((block.timestamp.sub(userLastDepositTimestamp)));\r\n                }\r\n            }\r\n        }\r\n\r\n    // 更新MS对应的USDT\r\n    modifier updateMSAvailable()  {\r\n        usdtAvailable[msg.sender]=msDeposit[msg.sender].add((usdtAvailable[msg.sender].mul(block.timestamp.sub(mrDeposit[msg.sender]))));\r\n    \r\n        _;\r\n    }\r\n    // 质押 MS\r\n    function depositMS(uint256 _amount,address _invitee) public updateMSAvailable  {\r\n        require(_amount > 0);\r\n        //质押Ms\r\n        IERC20(msToken).transferFrom(msg.sender,address(this),_amount);\r\n        setRelationship(_invitee);\r\n        uint256 usdtNumber = getMsPriceToUsdt(usdtMsUniContract);\r\n        // 设定一个返回的比列\r\n        uint256 usdtReleseOfPerseconds=usdtPerSeconds(usdtNumber);\r\n\r\n        // 返回 _amount 对应的USDT\r\n        usdtReleseOfPerseconds = usdtReleseOfPerseconds.mul(_amount);\r\n        usdtAvailable[msg.sender]=usdtAvailable[msg.sender].add(usdtReleseOfPerseconds);\r\n        usdtBaseOfEachUser[msg.sender] = usdtBaseOfEachUser[msg.sender].add(usdtReleseOfPerseconds);\r\n        msDeposit[msg.sender]=msDeposit[msg.sender].add(_amount);\r\n        msTimestamp[msg.sender]=block.timestamp;\r\n        msTotalDeposit=msTotalDeposit.add(_amount);\r\n        emit DepositMs( msg.sender, _amount);\r\n    }\r\n\r\n    // mr矿池计算静态奖励\r\n    function calcMrStaticReward(address _user) public view returns (uint256){\r\n        return \r\n            mrDeposit[_user]\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_user]))\r\n                .add(rewards[_user]);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (mrTotalDeposit == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return\r\n            rewardPerTokenStored.add(\r\n                    block.timestamp\r\n                    .sub(lastUpdateTime)\r\n                    .mul(staticRewardPerSecond)\r\n                    .div(mrTotalDeposit)\r\n            );\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        rewards[account] = calcMrStaticReward(account);\r\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        lastUpdateTime = block.timestamp;\r\n        _;\r\n    }\r\n\r\n   \r\n    modifier checkhalve(){\r\n        uint256 halveRate = (block.timestamp.sub(startAt)).div((uint256(86400)).mul(uint256(100)));\r\n        if ( halveRate < 1){\r\n            return;\r\n        }\r\n        eachDayRelase = uint256(1050 * 1e18).div(baseHalve.add(halveRate));\r\n        _;\r\n    }\r\n    modifier checkDays(){\r\n             daysOfProcess = (block.timestamp.sub(startAt)).div((uint256(86400))).add(1);\r\n            _;\r\n        }\r\n        \r\n    modifier checkStart(){\r\n        require(block.timestamp > startAt,\"not start\");\r\n        _;\r\n    }\r\n\r\n    // mr 矿池提取奖励\r\n    function getMrPoolReward() public updateReward(msg.sender)  checkhalve checkStart  checkDays { \r\n        uint256 reward = calcMrStaticReward(msg.sender);\r\n        uint256 rewardDynamic=calcMrDynamicReward(msg.sender);\r\n        if (reward > 0){\r\n            rewards[msg.sender] = 0;\r\n            if (rewardDynamic>0){\r\n                rewardsForDynamic[msg.sender] = 0;\r\n            }\r\n            uint256 amount = reward.add(rewardDynamic);\r\n\r\n            safeTransfer(\r\n                msToken,\r\n                msg.sender,\r\n                amount);\r\n            mrStaticRewardTotalRelease = mrStaticRewardTotalRelease.add(reward);\r\n\r\n            mrDynamicRewardTotalRelease = mrDynamicRewardTotalRelease.add(rewardDynamic);\r\n\r\n            rewardsOfEveryDay[daysOfProcess] = rewardsOfEveryDay[daysOfProcess].add(mrStaticRewardTotalRelease).add(mrDynamicRewardTotalRelease);\r\n\r\n            mrDynamicRewardAlreadyRelase[msg.sender] = mrDynamicRewardAlreadyRelase[msg.sender].add(reward);\r\n            mrStaticRewardAlreadyRelase[msg.sender]=mrStaticRewardAlreadyRelase[msg.sender].add(rewardDynamic);    \r\n            emit Withdraw(msg.sender,amount);            \r\n        }\r\n    }\r\n\r\n    // usdt per seconds\r\n    // 每秒每个ms\r\n    function usdtPerSeconds(uint256 _usdtNumber)  public pure returns(uint){\r\n        return \r\n        _usdtNumber\r\n        .div(86400)\r\n        .div(125)\r\n        ;\r\n    }\r\n\r\n    function getMsPriceToUsdt(address _contract) public view returns(uint){\r\n        (uint256 usdtValue ,uint256 msValue,) = IUniswapPair(_contract).getReservers();\r\n        return usdtValue.div(msValue).mul(2);\r\n    }\r\n\r\n    // 用户的 MS-MS BANK激励机制\r\n    function userMsBankRewards(address _user) public view returns (uint256){\r\n        return usdtAvailable[_user];     \r\n    }\r\n\r\n\r\n    // ms矿池提取奖励\r\n    function getMsPoolReward() public {\r\n        uint256 amount = usdtAvailable[msg.sender];\r\n        if (amount > 0){\r\n            usdtAvailable[msg.sender] = 0;\r\n            safeTransfer(usdtToken,msg.sender,amount);\r\n            emit WithdrawUsdt(msg.sender,amount);\r\n        }\r\n        // 记录所有已经释放的\r\n        usdtTotalRelease = usdtTotalRelease.add(amount);\r\n        usdtAlreadyWithdraw[msg.sender]=usdtAlreadyWithdraw[msg.sender].add(amount);\r\n    }     \r\n\r\n    // 退出Mr pool\r\n    function exitMrPool() public {\r\n        getMrPoolReward();\r\n\r\n        uint256 amount = mrDeposit[msg.sender];\r\n        uint256 amountExit=amount.mul(9).div(10);\r\n        exitMrForDynamic(amount);// 处理MR退出引起的动态变化\r\n        safeTransfer(mrToken,msg.sender,amountExit);\r\n        mrDeposit[msg.sender]=0;\r\n        mrTimestamp[msg.sender]=0;\r\n        mrTotalDeposit.sub(amountExit);\r\n        emit Exit(msg.sender,amountExit);\r\n    }  \r\n\r\n\r\n\r\n   // safeTransfer _contract address\r\n    function safeTransfer(address _contract, address _to, uint256 _amount) private {\r\n        uint256 balanceC = IERC20(_contract).balanceOf(address(this));\r\n        if (_amount > balanceC) {\r\n            IERC20(_contract).transfer(_to, balanceC);\r\n        } else {\r\n            IERC20(_contract).transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    \r\n    // mr矿池计算动态奖励\r\n    function calcMrDynamicReward(address _user) public view returns (uint256){\r\n        if (mrDeposit[_user] < 1000 * 1e18 ){\r\n            return 0;\r\n        }\r\n\r\n        uint256 rpt = rewardPerToken();\r\n        // 1,2,3 代正向部分\r\n        uint256 part123 = rpt.sub(userRewardPerTokenPaidForDynamic[_user]).mul(stakeForDynamic[_user]);\r\n        // 1 代反向部分\r\n        address upper = relationship[_user];\r\n        uint256 upperDeposit = mrDeposit[upper];\r\n        uint256 part_1 = rpt.sub(userRewardPerTokenPaid[upper]).mul(upperDeposit.div(10));\r\n        return part123.add(part_1);\r\n    }\r\n\r\n    function updateRewardForDynamic(address account,uint256 _amount) public{\r\n        rewardsForDynamic[account] = calcMrDynamicReward(account);\r\n        userRewardPerTokenPaidForDynamic[account] = _amount;\r\n    }\r\n\r\n    function exitMrForDynamic(uint256 _amount) public {\r\n        rewardPerTokenStored = rewardPerToken();\r\n\r\n        // 上 1 级\r\n        address upper = relationship[msg.sender];\r\n        updateRewardForDynamic(upper,rewardPerTokenStored);\r\n        stakeForDynamic[upper] = stakeForDynamic[upper].sub(_amount.div(2));// 记给上 1 级50%\r\n                rewardPerTokenStored = rewardPerToken();\r\n\r\n        // 上 2 级\r\n        upper = relationship[upper];\r\n        if (upper == address(0)){\r\n            return;\r\n        }\r\n        updateRewardForDynamic(upper,rewardPerTokenStored);\r\n        stakeForDynamic[upper] = stakeForDynamic[upper].add(_amount.mul(3).div(10));// 记给上 2 级30%\r\n        \r\n        // 上 3 级\r\n        upper = relationship[upper];\r\n        if (upper == address(0)){\r\n            return;\r\n        }\r\n        updateRewardForDynamic(upper,rewardPerTokenStored);\r\n        stakeForDynamic[upper] = stakeForDynamic[upper].add(_amount.div(10)); // 记给上 3 级 10%\r\n    }\r\n\r\n    // mr矿池计算动态奖励\r\n    function getMrPoolDynamicReward() public updateReward(msg.sender)   checkhalve checkStart checkDays{ \r\n   \r\n        uint256 reward = calcMrDynamicReward(msg.sender);\r\n            if (reward > 0){\r\n                rewardsForDynamic[msg.sender] = 0;\r\n                safeTransfer(\r\n                    msToken,\r\n                    msg.sender,\r\n                    reward);\r\n            }\r\n            mrDynamicRewardAlreadyRelase[msg.sender] = mrDynamicRewardAlreadyRelase[msg.sender].add(reward);\r\n\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n      //when valid contract will be something problem or others;\r\n    bool isValid;\r\n    function systemWithdraw(address _receive) public onlyOwner {\r\n        require(!isValid);\r\n        IERC20(usdtToken).transfer(_receive,IERC20(usdtToken).balanceOf(address(this)));\r\n        IERC20(mrToken).transfer(_receive,IERC20(mrToken).balanceOf(address(this)));\r\n        IERC20(msToken).transfer(_receive,IERC20(msToken).balanceOf(address(this)));\r\n    }\r\n    //if valid contract is ok,that will be change isvalid ;\r\n    function setValidOk() public onlyOwner {\r\n        require(!isValid);\r\n        isValid = true;\r\n    }\r\n\r\n    //  set mr\r\n    function setmrToken(address _mrToken) public onlyOwner {\r\n        require(_mrToken != address(0));\r\n        mrToken = _mrToken;\r\n    }\r\n      // set ms\r\n    function setmsTokens(address _msToken)public onlyOwner {\r\n        require(_msToken != address(0));\r\n        msToken = _msToken;\r\n   \r\n    }\r\n\r\n  function setStartAt(uint256 _startAt)public onlyOwner {\r\n        startAt = _startAt;\r\n    }\r\n\r\n    \r\n      //set usdt\r\n    function setusdtMsUniContract(address _usdtMsUniContract)public onlyOwner {\r\n        require(_usdtMsUniContract != address(0));\r\n        usdtMsUniContract = _usdtMsUniContract;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IUniswapPair{\r\n    function getReservers()external view  returns(uint,uint,uint);\r\n    function totalSupply()external view returns(uint);\r\n    function token0()external view returns(address);\r\n    function token1()external view returns(address);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function mint(address,uint) external;\r\n}\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"TeamReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUsdt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calcMrDynamicReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calcMrStaticReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalGroupStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysOfProcess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"depositMR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"depositMS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"derives\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eachDayRelase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exitMrForDynamic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitMrPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDailySoFar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDeriversAndUpper\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMSbankInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMrPoolDynamicReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMrPoolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMsPoolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getMsPriceToUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_starRanks\",\"type\":\"uint256\"}],\"name\":\"getTeamReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRanks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"groupStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"groupTeamRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupTeamTotalRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mrDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mrDynamicRewardAlreadyRelase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrDynamicRewardTotalRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mrStaticRewardAlreadyRelase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrStaticRewardTotalRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mrTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"msDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"msTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"processForDynamic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"queryStarRanks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relationship\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsForDynamic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsOfEveryDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startAt\",\"type\":\"uint256\"}],\"name\":\"setStartAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setValidOk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mrToken\",\"type\":\"address\"}],\"name\":\"setmrToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msToken\",\"type\":\"address\"}],\"name\":\"setmsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtMsUniContract\",\"type\":\"address\"}],\"name\":\"setusdtMsUniContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeForDynamic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receive\",\"type\":\"address\"}],\"name\":\"systemWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateRewardForDynamic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdtAlreadyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdtAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdtBaseOfEachUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtMsUniContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtNumber\",\"type\":\"uint256\"}],\"name\":\"usdtPerSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTotalRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userMsBankRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaidForDynamic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_starRanks\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewTeamRewrd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardTeamRelease\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MSconnext","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://27826abea6660296c386329413c4849a1b49b8e16b2816774df6920910b7b753"}]}