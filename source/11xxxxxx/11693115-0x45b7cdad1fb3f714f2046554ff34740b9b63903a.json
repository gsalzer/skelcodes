{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/vidor/Development/dhedge-staking/contracts/governance/DaoGovernable.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\n\\n/**\\n * @title   DaoGovernable\\n * @author  Stability Labs Pty. Ltd.\\n * @notice  Simple contract implementing an Ownable pattern.\\n * @dev     Derives from V2.3.0 @openzeppelin/contracts/ownership/Ownable.sol\\n *          Modified to have custom name and features\\n *              - Removed `renounceOwnership`\\n *              - Changes `_owner` to `_governor`\\n */\\ncontract DaoGovernable {\\n\\n    event DaoChanged(address indexed previousDao, address indexed newDao);\\n\\n    address private _dao;\\n\\n    /**\\n     * @dev Initializes the contract setting supplied address as the initial Dao.\\n     */\\n    // constructor (address _newDao) internal {\\n    //     _dao = _newDao;\\n    //     emit DaoChanged(address(0), _dao);\\n    // }\\n    \\n    function __DaoGovernable_init(address _newDao) internal {\\n        _dao = _newDao;\\n        emit DaoChanged(address(0), _dao);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Dao.\\n     */\\n    function dao() public view returns (address) {\\n        return _dao;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Dao.\\n     */\\n    modifier onlyDao() {\\n        require(isDao(), \\\"GOV: caller is not the Dao\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Dao.\\n     */\\n    function isDao() public view returns (bool) {\\n        return msg.sender == _dao;\\n    }\\n\\n    /**\\n     * @dev Transfers Dao of the contract to a new account (`newDao`).\\n     * Can only be called by the current Dao.\\n     * @param _newDao Address of the new Dao\\n     */\\n    function changeDao(address _newDao) external onlyDao {\\n        _changeDao(_newDao);\\n    }\\n\\n    /**\\n     * @dev Change Dao of the contract to a new account (`newDao`).\\n     * @param _newDao Address of the new Governor\\n     */\\n    function _changeDao(address _newDao) internal {\\n        require(_newDao != address(0), \\\"GOV: new Dao is address(0)\\\");\\n        emit DaoChanged(_dao, _newDao);\\n        _dao = _newDao;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n\\n}\\n\"\r\n    },\r\n    \"/Users/vidor/Development/dhedge-staking/contracts/governance/IncentivisedVotingLockup.sol\": {\r\n      \"content\": \"/* solium-disable security/no-block-members */\\npragma solidity 0.6.8;\\n\\nimport { IBasicToken } from \\\"../shared/IBasicToken.sol\\\";\\n\\nimport { DaoGovernable } from \\\"../governance/DaoGovernable.sol\\\";\\nimport { ProtocolDaoGovernable } from \\\"../governance/ProtocolDaoGovernable.sol\\\";\\n\\nimport { IIncentivisedVotingLockup } from \\\"../interfaces/IIncentivisedVotingLockup.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SignedSafeMath128 } from \\\"../shared/SignedSafeMath128.sol\\\";\\nimport { StableMath, SafeMath } from \\\"../shared/StableMath.sol\\\";\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @title  IncentivisedVotingLockup\\n * @author Voting Weight tracking & Decay\\n *             -> Curve Finance (MIT) - forked & ported to Solidity\\n *             -> https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy\\n *         osolmaz - Research & Reward distributions\\n *         alsco77 - Solidity implementation\\n * @notice Lockup MTA, receive vMTA (voting weight that decays over time), and earn\\n *         rewards based on staticWeight\\n * @dev    Supports:\\n *            1) Tracking MTA Locked up (LockedBalance)\\n *            2) Pull Based Reward allocations based on Lockup (Static Balance)\\n *            3) Decaying voting weight lookup through CheckpointedERC20 (balanceOf)\\n *            4) Ejecting fully decayed participants from reward allocation (eject)\\n *            5) Migration of points to v2 (used as multiplier in future) ***** (rewardsPaid)\\n *            6) Closure of contract (expire)\\n */\\ncontract IncentivisedVotingLockup is\\n    IIncentivisedVotingLockup,\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    DaoGovernable,\\n    ProtocolDaoGovernable\\n{\\n    using StableMath for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath128 for int128;\\n    using SafeERC20 for IERC20;\\n\\n    /** Shared Events */\\n    event Deposit(address indexed provider, uint256 value, uint256 locktime, LockAction indexed action, uint256 ts);\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n    event Expired();\\n\\n    /** Shared Globals */\\n    IERC20 public stakingToken;\\n    uint256 private constant WEEK = 7 days;\\n    uint256 public constant MAXTIME = 1095 days; //3 years\\n    uint256 public END;\\n    bool public expired;\\n\\n    /** Lockup */\\n    uint256 public globalEpoch;\\n    Point[] public pointHistory;\\n    mapping(address => Point[]) public userPointHistory;\\n    mapping(address => uint256) public userPointEpoch;\\n    mapping(uint256 => int128) public slopeChanges;\\n    mapping(address => LockedBalance) public locked;\\n\\n    // Voting token - Checkpointed view only ERC20\\n    string public name;\\n    string public symbol;\\n    uint256 public decimals;\\n    \\n    /** Structs */\\n    struct Point {\\n        int128 bias;\\n        int128 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    enum LockAction {\\n        CREATE_LOCK,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_LOCK_TIME\\n    }\\n\\n    // constructor(\\n    //     address _stakingToken,\\n    //     string memory _name,\\n    //     string memory _symbol,\\n    //     address _dao,\\n    //     address _protocolDao\\n    // )\\n    //     public\\n    //     DaoGovernable(_dao)\\n    //     ProtocolDaoGovernable(_protocolDao)\\n    // {\\n\\n    //     _initialize(_stakingToken, _name, _symbol);\\n\\n    // }\\n\\n    function initialize(\\n        address _stakingToken,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _dao,\\n        address _protocolDao\\n    )\\n        external\\n        initializer\\n    {\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        DaoGovernable.__DaoGovernable_init(_dao);\\n        ProtocolDaoGovernable.__ProtocolDaoGovernable_init(_protocolDao);\\n\\n        _initialize(_stakingToken, _name, _symbol);\\n    }\\n\\n    function _initialize(\\n        address _stakingToken,\\n        string memory _name,\\n        string memory _symbol\\n    )\\n        internal\\n    {\\n        stakingToken = IERC20(_stakingToken);\\n        Point memory init = Point({ bias: int128(0), slope: int128(0), ts: block.timestamp, blk: block.number});\\n        pointHistory.push(init);\\n\\n        decimals = IBasicToken(_stakingToken).decimals();\\n        require(decimals <= 18, \\\"Cannot have more than 18 decimals\\\");\\n\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = 18;\\n\\n        END = block.timestamp.add(MAXTIME);\\n\\n        expired = false;\\n\\n    }\\n\\n    /** @dev Modifier to ensure contract has not yet expired */\\n    modifier contractNotExpired(){\\n        require(!expired, \\\"Contract is expired\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Validates that the user has an expired lock && they still have capacity to earn\\n    * @param _addr User address to check\\n    */\\n    modifier lockupIsOver(address _addr) {\\n        LockedBalance memory userLock = locked[_addr];\\n        require(userLock.amount > 0 && block.timestamp >= userLock.end, \\\"Users lock didn't expire\\\");\\n        // This is removed because we are using the voting weight instead of the static weight\\n        // In this case when the lock end is reached the balance will automatically be 0\\n        // require(balanceOf(_addr) > 0, \\\"User must have existing bias\\\");\\n        _;\\n    }\\n\\n    /***************************************\\n                LOCKUP - GETTERS\\n    ****************************************/\\n\\n    /**\\n     * @dev Gets the last available user point\\n     * @param _addr User address\\n     * @return bias i.e. y\\n     * @return slope i.e. linear gradient\\n     * @return ts i.e. time point was logged\\n     */\\n    function getLastUserPoint(address _addr)\\n        override\\n        external\\n        view\\n        returns(\\n            int128 bias,\\n            int128 slope,\\n            uint256 ts\\n        )\\n    {\\n        uint256 uepoch = userPointEpoch[_addr];\\n        if(uepoch == 0){\\n            return (0, 0, 0);\\n        }\\n        Point memory point = userPointHistory[_addr][uepoch];\\n        return (point.bias, point.slope, point.ts);\\n    }\\n\\n    /***************************************\\n                    LOCKUP\\n    ****************************************/\\n\\n    /**\\n     * @dev Records a checkpoint of both individual and global slope\\n     * @param _addr User address, or address(0) for only global\\n     * @param _oldLocked Old amount that user had locked, or null for global\\n     * @param _newLocked new amount that user has locked, or null for global\\n     */\\n    function _checkpoint(\\n        address _addr,\\n        LockedBalance memory _oldLocked,\\n        LockedBalance memory _newLocked\\n    )\\n        internal\\n    {\\n        Point memory userOldPoint;\\n        Point memory userNewPoint;\\n        int128 oldSlopeDelta = 0;\\n        int128 newSlopeDelta = 0;\\n        uint256 epoch = globalEpoch;\\n\\n        if(_addr != address(0)){\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if(_oldLocked.end > block.timestamp && _oldLocked.amount > 0){\\n                userOldPoint.slope = _oldLocked.amount.div(int128(MAXTIME));\\n                userOldPoint.bias = userOldPoint.slope.mul(int128(_oldLocked.end.sub(block.timestamp)));\\n            }\\n            if(_newLocked.end > block.timestamp && _newLocked.amount > 0){\\n                userNewPoint.slope = _newLocked.amount.div(int128(MAXTIME));\\n                userNewPoint.bias = userNewPoint.slope.mul(int128(_newLocked.end.sub(block.timestamp)));\\n            }\\n\\n            // Moved from bottom final if statement to resolve stack too deep err\\n            // start {\\n            // Now handle user history\\n            uint256 uEpoch = userPointEpoch[_addr];\\n            if(uEpoch == 0){\\n                userPointHistory[_addr].push(userOldPoint);\\n            }\\n\\n            userPointEpoch[_addr] = uEpoch.add(1);\\n            userNewPoint.ts = block.timestamp;\\n            userNewPoint.blk = block.number;\\n            // userPointHistory[_addr][uEpoch.add(1)] = userNewPoint;\\n            userPointHistory[_addr].push(userNewPoint);\\n\\n            // } end\\n\\n            // Read values of scheduled changes in the slope\\n            // oldLocked.end can be in the past and in the future\\n            // newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            oldSlopeDelta = slopeChanges[_oldLocked.end];\\n            if(_newLocked.end != 0){\\n                if (_newLocked.end == _oldLocked.end) {\\n                    newSlopeDelta = oldSlopeDelta;\\n                } else {\\n                    newSlopeDelta = slopeChanges[_newLocked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory lastPoint = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\\n        if(epoch > 0){\\n            lastPoint = pointHistory[epoch];\\n        }\\n        uint256 lastCheckpoint = lastPoint.ts;\\n\\n        // initialLastPoint is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory initialLastPoint = Point({bias: 0, slope: 0, ts: lastPoint.ts, blk: lastPoint.blk});\\n        uint256 blockSlope = 0; // dblock/dt\\n        if(block.timestamp > lastPoint.ts){\\n            blockSlope = StableMath.scaleInteger(block.number.sub(lastPoint.blk)).div(block.timestamp.sub(lastPoint.ts));\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 iterativeTime = _floorToWeek(lastCheckpoint);\\n        for (uint256 i = 0; i < 255; i++){\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            iterativeTime = iterativeTime.add(WEEK);\\n            int128 dSlope = 0;\\n            if(iterativeTime > block.timestamp){\\n                iterativeTime = block.timestamp;\\n            } else {\\n                dSlope = slopeChanges[iterativeTime];\\n            }\\n            int128 biasDelta = lastPoint.slope.mul(int128(iterativeTime.sub(lastCheckpoint)));\\n            lastPoint.bias = lastPoint.bias.sub(biasDelta);\\n            lastPoint.slope = lastPoint.slope.add(dSlope);\\n            // This can happen\\n            if(lastPoint.bias < 0){\\n                lastPoint.bias = 0;\\n            }\\n            // This cannot happen - just in case\\n            if(lastPoint.slope < 0){\\n                lastPoint.slope = 0;\\n            }\\n            lastCheckpoint = iterativeTime;\\n            lastPoint.ts = iterativeTime;\\n            lastPoint.blk = initialLastPoint.blk.add(blockSlope.mulTruncate(iterativeTime.sub(initialLastPoint.ts)));\\n\\n            // when epoch is incremented, we either push here or after slopes updated below\\n            epoch = epoch.add(1);\\n            if(iterativeTime == block.timestamp) {\\n                lastPoint.blk = block.number;\\n                break;\\n            } else {\\n                // pointHistory[epoch] = lastPoint;\\n                pointHistory.push(lastPoint);\\n            }\\n        }\\n\\n        globalEpoch = epoch;\\n        // Now pointHistory is filled until t=now\\n\\n        if(_addr != address(0)){\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            lastPoint.slope = lastPoint.slope.add(userNewPoint.slope.sub(userOldPoint.slope));\\n            lastPoint.bias = lastPoint.bias.add(userNewPoint.bias.sub(userOldPoint.bias));\\n            if(lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            if(lastPoint.bias < 0){\\n                lastPoint.bias = 0;\\n            }\\n        }\\n\\n        // Record the changed point into history\\n        // pointHistory[epoch] = lastPoint;\\n        pointHistory.push(lastPoint);\\n\\n        if(_addr != address(0)){\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [new_locked.end]\\n            // and add old_user_slope to [old_locked.end]\\n            if(_oldLocked.end > block.timestamp){\\n                // oldSlopeDelta was <something> - userOldPoint.slope, so we cancel that\\n                oldSlopeDelta = oldSlopeDelta.add(userOldPoint.slope);\\n                if(_newLocked.end == _oldLocked.end) {\\n                    oldSlopeDelta = oldSlopeDelta.sub(userNewPoint.slope);  // It was a new deposit, not extension\\n                }\\n                slopeChanges[_oldLocked.end] = oldSlopeDelta;\\n            }\\n            if(_newLocked.end > block.timestamp) {\\n                if(_newLocked.end > _oldLocked.end){\\n                    newSlopeDelta = newSlopeDelta.sub(userNewPoint.slope);  // old slope disappeared at this point\\n                    slopeChanges[_newLocked.end] = newSlopeDelta;\\n                }\\n                // else: we recorded it already in oldSlopeDelta\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposits or creates a stake for a given address\\n     * @param _addr User address to assign the stake\\n     * @param _value Total units of StakingToken to lockup\\n     * @param _unlockTime Time at which the stake should unlock\\n     * @param _oldLocked Previous amount staked by this user\\n     * @param _action See LockAction enum\\n     */\\n    function _depositFor(\\n        address _addr,\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        LockedBalance memory _oldLocked,\\n        LockAction _action\\n    )\\n        internal\\n    {\\n        LockedBalance memory newLocked = LockedBalance({amount: _oldLocked.amount, end: _oldLocked.end});\\n\\n        // Adding to existing lock, or if a lock is expired - creating a new one\\n        newLocked.amount = newLocked.amount.add(int128(_value));\\n        if(_unlockTime != 0){\\n            newLocked.end = _unlockTime;\\n        }\\n        locked[_addr] = newLocked;\\n\\n        // Possibilities:\\n        // Both _oldLocked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // newLocked.end > block.timestamp (always)\\n        _checkpoint(_addr, _oldLocked, newLocked);\\n\\n        if(_value != 0) {\\n            stakingToken.safeTransferFrom(_addr, address(this), _value);\\n        }\\n\\n        emit Deposit(_addr, _value, newLocked.end, _action, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Public function to trigger global checkpoint\\n     */\\n    function checkpoint() external {\\n        LockedBalance memory empty;\\n        _checkpoint(address(0), empty, empty);\\n    }\\n\\n    /**\\n     * @dev Creates a new lock\\n     * @param _value Total units of StakingToken to lockup\\n     * @param _unlockTime Time at which the stake should unlock\\n     */\\n    function createLock(uint256 _value, uint256 _unlockTime)\\n        override\\n        external\\n        nonReentrant\\n        contractNotExpired\\n    {\\n        uint256 unlock_time = _floorToWeek(_unlockTime);  // Locktime is rounded down to weeks\\n        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\\n\\n        require(_value > 0, \\\"Must stake non zero amount\\\");\\n        require(locked_.amount == 0, \\\"Withdraw old tokens first\\\");\\n\\n        require(unlock_time > block.timestamp, \\\"Can only lock until time in the future\\\");\\n        require(unlock_time <= END, \\\"Voting lock can be 3 years max (until recol)\\\");\\n\\n        _depositFor(msg.sender, _value, unlock_time, locked_, LockAction.CREATE_LOCK);\\n    }\\n\\n    /**\\n     * @dev Increases amount of stake thats locked up & resets decay\\n     * @param _value Additional units of StakingToken to add to exiting stake\\n     */\\n    function increaseLockAmount(uint256 _value)\\n        override\\n        external\\n        nonReentrant\\n        contractNotExpired\\n    {\\n        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\\n\\n        require(_value > 0, \\\"Must stake non zero amount\\\");\\n        require(locked_.amount > 0, \\\"No existing lock found\\\");\\n        require(locked_.end > block.timestamp, \\\"Cannot add to expired lock. Withdraw\\\");\\n\\n        _depositFor(msg.sender, _value, 0, locked_, LockAction.INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    /**\\n     * @dev Increases length of lockup & resets decay\\n     * @param _unlockTime New unlocktime for lockup\\n     */\\n    function increaseLockLength(uint256 _unlockTime)\\n        override\\n        external\\n        nonReentrant\\n        contractNotExpired\\n    {\\n        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\\n        uint256 unlock_time = _floorToWeek(_unlockTime);  // Locktime is rounded down to weeks\\n\\n        require(locked_.amount > 0, \\\"Nothing is locked\\\");\\n        require(locked_.end > block.timestamp, \\\"Lock expired\\\");\\n        require(unlock_time > locked_.end, \\\"Can only increase lock WEEK\\\");\\n        require(unlock_time <= END, \\\"Voting lock can be 3 years max (until recol)\\\");\\n\\n        _depositFor(msg.sender, 0, unlock_time, locked_, LockAction.INCREASE_LOCK_TIME);\\n    }\\n\\n    /**\\n     * @dev Withdraws all the senders stake, providing lockup is over\\n     */\\n    function withdraw()\\n        override\\n        external\\n    {\\n        _withdraw(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Withdraws a given users stake, providing the lockup has finished\\n     * @param _addr User for which to withdraw\\n     */\\n    function _withdraw(address _addr)\\n        internal\\n        nonReentrant\\n    {\\n        LockedBalance memory oldLock = LockedBalance({ end: locked[_addr].end, amount: locked[_addr].amount });\\n        require(block.timestamp >= oldLock.end || expired, \\\"The lock didn't expire\\\");\\n        require(oldLock.amount > 0, \\\"Must have something to withdraw\\\");\\n\\n        uint256 value = uint256(oldLock.amount);\\n\\n        LockedBalance memory currentLock = LockedBalance({end: 0, amount: 0});\\n        locked[_addr] = currentLock;\\n\\n        // oldLocked can have either expired <= timestamp or zero end\\n        // currentLock has only 0 end\\n        // Both can have >= 0 amount\\n        if(!expired){\\n            _checkpoint(_addr, oldLock, currentLock);\\n        }\\n\\n        stakingToken.safeTransfer(_addr, value);\\n\\n        emit Withdraw(_addr, value, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Ends the contract, unlocking all stakes.\\n     * No more staking can happen. Only withdraw and Claim.\\n     */\\n    function expireContract()\\n        override\\n        external\\n        onlyProtocolDao\\n        contractNotExpired\\n    {\\n        expired = true;\\n\\n        emit Expired();\\n    }\\n\\n    /***************************************\\n                    GETTERS\\n    ****************************************/\\n\\n\\n    /** @dev Floors a timestamp to the nearest weekly increment */\\n    function _floorToWeek(uint256 _t)\\n        internal\\n        pure\\n        returns(uint256)\\n    {\\n        return _t.div(WEEK).mul(WEEK);\\n    }\\n\\n    /**\\n     * @dev Uses binarysearch to find the most recent point history preceeding block\\n     * @param _block Find the most recent point history before this block\\n     * @param _maxEpoch Do not search pointHistories past this index\\n     */\\n    function _findBlockEpoch(uint256 _block, uint256 _maxEpoch)\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        // Binary search\\n        uint256 min = 0;\\n        uint256 max = _maxEpoch;\\n        // Will be always enough for 128-bit numbers\\n        for(uint256 i = 0; i < 128; i++){\\n            if (min >= max)\\n                break;\\n            uint256 mid = (min.add(max).add(1)).div(2);\\n            if (pointHistory[mid].blk <= _block){\\n                min = mid;\\n            } else {\\n                max = mid.sub(1);\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /**\\n     * @dev Uses binarysearch to find the most recent user point history preceeding block\\n     * @param _addr User for which to search\\n     * @param _block Find the most recent point history before this block\\n     */\\n    function _findUserBlockEpoch(address _addr, uint256 _block)\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        uint256 min = 0;\\n        uint256 max = userPointEpoch[_addr];\\n        for(uint256 i = 0; i < 128; i++) {\\n            if(min >= max){\\n                break;\\n            }\\n            uint256 mid = (min.add(max).add(1)).div(2);\\n            if(userPointHistory[_addr][mid].blk <= _block){\\n                min = mid;\\n            } else {\\n                max = mid.sub(1);\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /**\\n     * @dev Gets curent user voting weight (aka effectiveStake)\\n     * @param _owner User for which to return the balance\\n     * @return uint256 Balance of user\\n     */\\n    function balanceOf(address _owner)\\n        override\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 epoch = userPointEpoch[_owner];\\n        if(epoch == 0){\\n            return 0;\\n        }\\n        Point memory lastPoint = userPointHistory[_owner][epoch];\\n        lastPoint.bias = lastPoint.bias.sub(lastPoint.slope.mul(int128(block.timestamp.sub(lastPoint.ts))));\\n        if(lastPoint.bias < 0) {\\n            lastPoint.bias = 0;\\n        }\\n        return uint256(lastPoint.bias);\\n    }\\n\\n    /**\\n     * @dev Gets a users votingWeight at a given blockNumber\\n     * @param _owner User for which to return the balance\\n     * @param _blockNumber Block at which to calculate balance\\n     * @return uint256 Balance of user\\n     */\\n    function balanceOfAt(address _owner, uint256 _blockNumber)\\n        override\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(_blockNumber <= block.number, \\\"Must pass block number in the past\\\");\\n\\n        // Get most recent user Point to block\\n        uint256 userEpoch = _findUserBlockEpoch(_owner, _blockNumber);\\n        if(userEpoch == 0){\\n            return 0;\\n        }\\n        Point memory upoint = userPointHistory[_owner][userEpoch];\\n\\n        // Get most recent global Point to block\\n        uint256 maxEpoch = globalEpoch;\\n        uint256 epoch = _findBlockEpoch(_blockNumber, maxEpoch);\\n        Point memory point0 = pointHistory[epoch];\\n\\n        // Calculate delta (block & time) between user Point and target block\\n        // Allowing us to calculate the average seconds per block between\\n        // the two points\\n        uint256 dBlock = 0;\\n        uint256 dTime = 0;\\n        if(epoch < maxEpoch){\\n            Point memory point1 = pointHistory[epoch.add(1)];\\n            dBlock = point1.blk.sub(point0.blk);\\n            dTime = point1.ts.sub(point0.ts);\\n        } else {\\n            dBlock = block.number.sub(point0.blk);\\n            dTime = block.timestamp.sub(point0.ts);\\n        }\\n        // (Deterministically) Estimate the time at which block _blockNumber was mined\\n        uint256 blockTime = point0.ts;\\n        if(dBlock != 0) {\\n            // blockTime += dTime * (_blockNumber - point0.blk) / dBlock;\\n            blockTime = blockTime.add(dTime.mul(_blockNumber.sub(point0.blk)).div(dBlock));\\n        }\\n        // Current Bias = most recent bias - (slope * time since update)\\n        upoint.bias = upoint.bias.sub(upoint.slope.mul(int128(blockTime.sub(upoint.ts))));\\n        if(upoint.bias >= 0){\\n            return uint256(upoint.bias);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates total supply of votingWeight at a given time _t\\n     * @param _point Most recent point before time _t\\n     * @param _t Time at which to calculate supply\\n     * @return totalSupply at given point in time\\n     */\\n    function _supplyAt(Point memory _point, uint256 _t)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        Point memory lastPoint = _point;\\n        // Floor the timestamp to weekly interval\\n        uint256 iterativeTime = _floorToWeek(lastPoint.ts);\\n        // Iterate through all weeks between _point & _t to account for slope changes\\n        for(uint256 i = 0; i < 255; i++){\\n            iterativeTime = iterativeTime.add(WEEK);\\n            int128 dSlope = 0;\\n            // If week end is after timestamp, then truncate & leave dSlope to 0\\n            if(iterativeTime > _t){\\n                iterativeTime = _t;\\n            }\\n            // else get most recent slope change\\n            else {\\n                dSlope = slopeChanges[iterativeTime];\\n            }\\n\\n            // lastPoint.bias -= lastPoint.slope * convert(iterativeTime - lastPoint.ts, int128)\\n            lastPoint.bias = lastPoint.bias.sub(lastPoint.slope.mul(int128(iterativeTime.sub(lastPoint.ts))));\\n            if(iterativeTime == _t){\\n                break;\\n            }\\n            lastPoint.slope = lastPoint.slope.add(dSlope);\\n            lastPoint.ts = iterativeTime;\\n        }\\n\\n        if (lastPoint.bias < 0){\\n            lastPoint.bias = 0;\\n        }\\n        return uint256(lastPoint.bias);\\n    }\\n\\n    /**\\n     * @dev Calculates current total supply of votingWeight\\n     * @return totalSupply of voting token weight\\n     */\\n    function totalSupply()\\n        override\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 epoch_ = globalEpoch;\\n        Point memory lastPoint = pointHistory[epoch_];\\n        return _supplyAt(lastPoint, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Calculates total supply of votingWeight at a given blockNumber\\n     * @param _blockNumber Block number at which to calculate total supply\\n     * @return totalSupply of voting token weight at the given blockNumber\\n     */\\n    function totalSupplyAt(uint256 _blockNumber)\\n        override\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(_blockNumber <= block.number, \\\"Must pass block number in the past\\\");\\n\\n        uint256 epoch = globalEpoch;\\n        uint256 targetEpoch = _findBlockEpoch(_blockNumber, epoch);\\n\\n        Point memory point = pointHistory[targetEpoch];\\n\\n        // If point.blk > _blockNumber that means we got the initial epoch & contract did not yet exist\\n        if(point.blk > _blockNumber){\\n            return 0;\\n        }\\n\\n        uint256 dTime = 0;\\n        if(targetEpoch < epoch){\\n            Point memory pointNext = pointHistory[targetEpoch.add(1)];\\n            if(point.blk != pointNext.blk) {\\n                dTime = (_blockNumber.sub(point.blk)).mul(pointNext.ts.sub(point.ts)).div(pointNext.blk.sub(point.blk));\\n            }\\n        } else if (point.blk != block.number){\\n            dTime = (_blockNumber.sub(point.blk)).mul(block.timestamp.sub(point.ts)).div(block.number.sub(point.blk));\\n        }\\n        // Now dTime contains info on how far are we beyond point\\n\\n        return _supplyAt(point, point.ts.add(dTime));\\n    }\\n\\n    function getDuration()\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return WEEK;\\n    }\\n    \\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    /**\\n     * @dev Allows the DAO to salvage the full amount of any ERC20 tokens \\n     * from the contract by supplying the token address.\\n     * @param _token Address of the token to be salvaged\\n     */\\n    function salvage(address _token)\\n        external\\n        onlyDao\\n    {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        \\n        require(\\n            IERC20(_token).transfer(dao(), balance)\\n        );\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n\\n}\\n\"\r\n    },\r\n    \"/Users/vidor/Development/dhedge-staking/contracts/governance/ProtocolDaoGovernable.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\n\\n/**\\n * @title   ProtocolDaoGovernable\\n * @author  Stability Labs Pty. Ltd.\\n * @notice  Simple contract implementing an Ownable pattern.\\n * @dev     Derives from V2.3.0 @openzeppelin/contracts/ownership/Ownable.sol\\n *          Modified to have custom name and features\\n *              - Removed `renounceOwnership`\\n *              - Changes `_owner` to `_governor`\\n */\\ncontract ProtocolDaoGovernable {\\n\\n    event ProtocolDaoChanged(address indexed previousProtocolDao, address indexed newProtocolDao);\\n\\n    address private _protocolDao;\\n\\n    /**\\n     * @dev Initializes the contract setting supplied address as the initial Protocol Dao.\\n     */\\n    // constructor (address _newProtocolDao) internal {\\n    //     _protocolDao = _newProtocolDao;\\n    //     emit ProtocolDaoChanged(address(0), _protocolDao);\\n    // }\\n\\n    function __ProtocolDaoGovernable_init(address _newProtocolDao) internal {\\n        _protocolDao = _newProtocolDao;\\n        emit ProtocolDaoChanged(address(0), _protocolDao);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Protocol Dao.\\n     */\\n    function protocolDao() public view returns (address) {\\n        return _protocolDao;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Protocol Dao.\\n     */\\n    modifier onlyProtocolDao() {\\n        require(isProtocolDao(), \\\"GOV: caller is not the Protocol Dao\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Protocol Dao.\\n     */\\n    function isProtocolDao() public view returns (bool) {\\n        return msg.sender == _protocolDao;\\n    }\\n\\n    /**\\n     * @dev Transfers Protocol Dao of the contract to a new account (`newProtocolDao`).\\n     * Can only be called by the current Protocol Dao.\\n     * @param _newProtocolDao Address of the new Protocol Dao\\n     */\\n    function changeProtocolDao(address _newProtocolDao) external onlyProtocolDao {\\n        _changeProtocolDao(_newProtocolDao);\\n    }\\n\\n    /**\\n     * @dev Change Protocol Dao of the contract to a new account (`newProtocolDao`).\\n     * @param _newProtocolDao Address of the new Governor\\n     */\\n    function _changeProtocolDao(address _newProtocolDao) internal {\\n        require(_newProtocolDao != address(0), \\\"GOV: new Protocol Dao is address(0)\\\");\\n        emit ProtocolDaoChanged(_protocolDao, _newProtocolDao);\\n        _protocolDao = _newProtocolDao;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n\\n}\\n\"\r\n    },\r\n    \"/Users/vidor/Development/dhedge-staking/contracts/interfaces/IIncentivisedVotingLockup.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\n\\nimport { IERC20WithCheckpointing } from \\\"../shared/IERC20WithCheckpointing.sol\\\";\\n\\ninterface IIncentivisedVotingLockup is IERC20WithCheckpointing {\\n\\n    function getLastUserPoint(address _addr) external view returns(int128 bias, int128 slope, uint256 ts);\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n    function withdraw() external;\\n    function increaseLockAmount(uint256 _value) external;\\n    function increaseLockLength(uint256 _unlockTime) external;\\n    function expireContract() external;\\n    \\n}\"\r\n    },\r\n    \"/Users/vidor/Development/dhedge-staking/contracts/shared/IBasicToken.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\n\\ninterface IBasicToken {\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/Users/vidor/Development/dhedge-staking/contracts/shared/IERC20WithCheckpointing.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\n\\n// From https://github.com/aragonone/voting-connectors\\ninterface IERC20WithCheckpointing {\\n    function balanceOf(address _owner) external view returns (uint256);\\n    function balanceOfAt(address _owner, uint256 _blockNumber) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n    function totalSupplyAt(uint256 _blockNumber) external view returns (uint256);\\n}\"\r\n    },\r\n    \"/Users/vidor/Development/dhedge-staking/contracts/shared/SignedSafeMath128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @title SignedSafeMath128\\n * @author OpenZeppelin > https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SignedSafeMath.sol\\n * @dev Signed math operations with safety checks that revert on error.\\n *      Reverted to solc 0.5.16 & updated from int256 to int128\\n */\\nlibrary SignedSafeMath128 {\\n    int128 constant private _INT128_MIN = -2**127;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int128 a, int128 b) internal pure returns (int128) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT128_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int128 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int128 a, int128 b) internal pure returns (int128) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT128_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int128 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int128 a, int128 b) internal pure returns (int128) {\\n        int128 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int128 a, int128 b) internal pure returns (int128) {\\n        int128 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\"\r\n    },\r\n    \"/Users/vidor/Development/dhedge-staking/contracts/shared/StableMath.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title   StableMath\\n * @author  Stability Labs Pty. Ltd.\\n * @notice  A library providing safe mathematical operations to multiply and\\n *          divide with standardised precision.\\n * @dev     Derives from OpenZeppelin's SafeMath lib and uses generic system\\n *          wide variables for managing precision.\\n */\\nlibrary StableMath {\\n\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /**\\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\\n     * @dev bAsset ratio unit for use in exact calculations,\\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\\n     */\\n    uint256 private constant RATIO_SCALE = 1e8;\\n\\n    /**\\n     * @dev Provides an interface to the scaling unit\\n     * @return Scaling unit (1e18 or 1 * 10**18)\\n     */\\n    function getFullScale() internal pure returns (uint256) {\\n        return FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Provides an interface to the ratio unit\\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\\n     */\\n    function getRatioScale() internal pure returns (uint256) {\\n        return RATIO_SCALE;\\n    }\\n\\n    /**\\n     * @dev Scales a given integer to the power of the full scale.\\n     * @param x   Simple uint256 to scale\\n     * @return    Scaled value a to an exact number\\n     */\\n    function scaleInteger(uint256 x)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return x.mul(FULL_SCALE);\\n    }\\n\\n    /***************************************\\n              PRECISE ARITHMETIC\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e38 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x     Left hand input to division\\n     * @param y     Right hand input to division\\n     * @return      Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n\\n\\n    /***************************************\\n                  RATIO FUNCS\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return c     Result after multiplying the two inputs and then dividing by the ratio scale\\n     */\\n    function mulRatioTruncate(uint256 x, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint256 c)\\n    {\\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, rounding up the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              ratio scale, rounded up to the closest base unit.\\n     */\\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. How much mAsset should I burn for this bAsset (x)?\\n        // 1e18 * 1e8 = 1e26\\n        uint256 scaled = x.mul(ratio);\\n        // 1e26 + 9.99e7 = 100..00.999e8\\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\\n        // return 100..00.999e8 / 1e8 = 1e18\\n        return ceil.div(RATIO_SCALE);\\n    }\\n\\n\\n    /**\\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\\n     *      i.e. How much bAsset is this mAsset worth?\\n     * @param x     Left hand operand in division\\n     * @param ratio bAsset ratio\\n     * @return c     Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divRatioPrecisely(uint256 x, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint256 c)\\n    {\\n        // e.g. 1e14 * 1e8 = 1e22\\n        uint256 y = x.mul(RATIO_SCALE);\\n        // return 1e22 / 1e12 = 1e10\\n        return y.div(ratio);\\n    }\\n\\n    /***************************************\\n                    HELPERS\\n    ****************************************/\\n\\n    /**\\n     * @dev Calculates minimum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Minimum of the two inputs\\n     */\\n    function min(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return x > y ? y : x;\\n    }\\n\\n    /**\\n     * @dev Calculated maximum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Maximum of the two inputs\\n     */\\n    function max(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return x > y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Clamps a value to an upper bound\\n     * @param x           Left hand input\\n     * @param upperBound  Maximum possible value to return\\n     * @return            Input x clamped to a maximum value, upperBound\\n     */\\n    function clamp(uint256 x, uint256 upperBound)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return x > upperBound ? upperBound : x;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"DaoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IncentivisedVotingLockup.LockAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Expired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousProtocolDao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolDao\",\"type\":\"address\"}],\"name\":\"ProtocolDaoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDao\",\"type\":\"address\"}],\"name\":\"changeDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProtocolDao\",\"type\":\"address\"}],\"name\":\"changeProtocolDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expireContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLastUserPoint\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseLockLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolDao\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtocolDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IncentivisedVotingLockup","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}