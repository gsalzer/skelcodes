{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"sbControllerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./sbStrongValuePoolInterface.sol\\\";\\n\\ncontract sbControllerV2 {\\n    using SafeMath for uint256;\\n\\n    bool public initDone;\\n    address public admin;\\n    address public pendingAdmin;\\n    address public superAdmin;\\n    address public pendingSuperAdmin;\\n    address public parameterAdmin;\\n\\n    IERC20 public strongToken;\\n    sbStrongValuePoolInterface public sbStrongValuePool;\\n    address public sbVotes;\\n\\n    address[] public valuePools;\\n    mapping(address =\\u003e bool) public valuePoolAccepted;\\n    mapping(address =\\u003e uint256[]) public valuePoolDays;\\n    mapping(address =\\u003e uint256[]) public valuePoolWeights;\\n    mapping(address =\\u003e uint256) public valuePoolVestingDays;\\n    mapping(address =\\u003e uint256) public valuePoolMiningFeeNumerator;\\n    mapping(address =\\u003e uint256) public valuePoolMiningFeeDenominator;\\n    mapping(address =\\u003e uint256) public valuePoolUnminingFeeNumerator;\\n    mapping(address =\\u003e uint256) public valuePoolUnminingFeeDenominator;\\n    mapping(address =\\u003e uint256) public valuePoolClaimingFeeNumerator;\\n    mapping(address =\\u003e uint256) public valuePoolClaimingFeeDenominator;\\n\\n    address[] public servicePools;\\n    mapping(address =\\u003e bool) public servicePoolAccepted;\\n    mapping(address =\\u003e uint256[]) public servicePoolDays;\\n    mapping(address =\\u003e uint256[]) public servicePoolWeights;\\n    mapping(address =\\u003e uint256) public servicePoolVestingDays;\\n    mapping(address =\\u003e uint256) public servicePoolRequestFeeInWei;\\n    mapping(address =\\u003e uint256) public servicePoolClaimingFeeNumerator;\\n    mapping(address =\\u003e uint256) public servicePoolClaimingFeeDenominator;\\n\\n    uint256 public voteCasterVestingDays;\\n    uint256 public voteReceiverVestingDays;\\n\\n    uint256[] public rewardDays;\\n    uint256[] public rewardAmounts;\\n\\n    uint256[] public valuePoolsDays;\\n    uint256[] public valuePoolsWeights;\\n\\n    uint256[] public servicePoolsDays;\\n    uint256[] public servicePoolsWeights;\\n\\n    uint256[] public voteCastersDays;\\n    uint256[] public voteCastersWeights;\\n\\n    uint256[] public voteReceiversDays;\\n    uint256[] public voteReceiversWeights;\\n\\n    uint256 public voteForServicePoolsCount;\\n    uint256 public voteForServicesCount;\\n\\n    uint256 public minerMinMineDays;\\n    uint256 public minerMinMineAmountInWei;\\n\\n    uint256 public serviceMinMineDays;\\n    uint256 public serviceMinMineAmountInWei;\\n\\n    function init(\\n        address strongTokenAddress,\\n        address sbStrongValuePoolAddress,\\n        address sbVotesAddress,\\n        address adminAddress,\\n        address superAdminAddress,\\n        address parameterAdminAddress\\n    ) public {\\n        require(!initDone);\\n        strongToken = IERC20(strongTokenAddress);\\n        sbStrongValuePool = sbStrongValuePoolInterface(\\n            sbStrongValuePoolAddress\\n        );\\n        sbVotes = sbVotesAddress;\\n        admin = adminAddress;\\n        superAdmin = superAdminAddress;\\n        parameterAdmin = parameterAdminAddress;\\n        initDone = true;\\n    }\\n\\n    // ADMIN\\n    // *************************************************************************************\\n    function removeTokens(address account, uint256 amount) public {\\n        require(msg.sender == superAdmin, \\\"not superAdmin\\\");\\n        strongToken.transfer(account, amount);\\n    }\\n\\n    function updateParameterAdmin(address newParameterAdmin) public {\\n        require(msg.sender == superAdmin);\\n        parameterAdmin = newParameterAdmin;\\n    }\\n\\n    function setPendingAdmin(address newPendingAdmin) public {\\n        require(msg.sender == admin);\\n        pendingAdmin = newPendingAdmin;\\n    }\\n\\n    function acceptAdmin() public {\\n        require(msg.sender == pendingAdmin \\u0026\\u0026 msg.sender != address(0));\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n\\n    function setPendingSuperAdmin(address newPendingSuperAdmin) public {\\n        require(msg.sender == superAdmin);\\n        pendingSuperAdmin = newPendingSuperAdmin;\\n    }\\n\\n    function acceptSuperAdmin() public {\\n        require(msg.sender == pendingSuperAdmin \\u0026\\u0026 msg.sender != address(0));\\n        superAdmin = pendingSuperAdmin;\\n        pendingSuperAdmin = address(0);\\n    }\\n\\n    // VESTING\\n    // *************************************************************************************\\n    function getValuePoolVestingDays(address valuePool)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(valuePoolAccepted[valuePool]);\\n        return valuePoolVestingDays[valuePool];\\n    }\\n\\n    function getServicePoolVestingDays(address servicePool)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(servicePoolAccepted[servicePool]);\\n        return servicePoolVestingDays[servicePool];\\n    }\\n\\n    function getVoteCasterVestingDays() public view returns (uint256) {\\n        return voteCasterVestingDays;\\n    }\\n\\n    function getVoteReceiverVestingDays() public view returns (uint256) {\\n        return voteReceiverVestingDays;\\n    }\\n\\n    function updateVoteCasterVestingDays(uint256 vestingDayCount)\\n        public\\n        returns (uint256)\\n    {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        voteCasterVestingDays = vestingDayCount;\\n    }\\n\\n    function updateVoteReceiverVestingDays(uint256 vestingDayCount)\\n        public\\n        returns (uint256)\\n    {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        voteReceiverVestingDays = vestingDayCount;\\n    }\\n\\n    function updateValuePoolVestingDays(\\n        address valuePool,\\n        uint256 vestingDayCount\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(valuePoolAccepted[valuePool]);\\n        valuePoolVestingDays[valuePool] = vestingDayCount;\\n    }\\n\\n    function updateServicePoolVestingDays(\\n        address servicePool,\\n        uint256 vestingDayCount\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(servicePoolAccepted[servicePool]);\\n        servicePoolVestingDays[servicePool] = vestingDayCount;\\n    }\\n\\n    // MIN MINING\\n    // *************************************************************************************\\n    function getMinerMinMineDays() public view returns (uint256) {\\n        return minerMinMineDays;\\n    }\\n\\n    function getServiceMinMineDays() public view returns (uint256) {\\n        return serviceMinMineDays;\\n    }\\n\\n    function getMinerMinMineAmountInWei() public view returns (uint256) {\\n        return minerMinMineAmountInWei;\\n    }\\n\\n    function getServiceMinMineAmountInWei() public view returns (uint256) {\\n        return serviceMinMineAmountInWei;\\n    }\\n\\n    function updateMinerMinMineDays(uint256 dayCount) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        minerMinMineDays = dayCount;\\n    }\\n\\n    function updateServiceMinMineDays(uint256 dayCount) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        serviceMinMineDays = dayCount;\\n    }\\n\\n    function updateMinerMinMineAmountInWei(uint256 amountInWei) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        minerMinMineAmountInWei = amountInWei;\\n    }\\n\\n    function updateServiceMinMineAmountInWei(uint256 amountInWei) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        serviceMinMineAmountInWei = amountInWei;\\n    }\\n\\n    // WEIGHTS\\n    // *************************************************************************************\\n    function getValuePoolsWeight(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 weight) = _get(valuePoolsDays, valuePoolsWeights, day);\\n        return weight;\\n    }\\n\\n    function getValuePoolWeight(address valuePool, uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        return _get(valuePoolDays[valuePool], valuePoolWeights[valuePool], day);\\n    }\\n\\n    function getServicePoolsWeight(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 weight) = _get(servicePoolsDays, servicePoolsWeights, day);\\n        return weight;\\n    }\\n\\n    function getServicePoolWeight(address servicePool, uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(servicePoolAccepted[servicePool], \\\"invalid servicePool\\\");\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        return\\n            _get(\\n                servicePoolDays[servicePool],\\n                servicePoolWeights[servicePool],\\n                day\\n            );\\n    }\\n\\n    function getVoteCastersWeight(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 weight) = _get(voteCastersDays, voteCastersWeights, day);\\n        return weight;\\n    }\\n\\n    function getVoteReceiversWeight(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 weight) = _get(voteReceiversDays, voteReceiversWeights, day);\\n        return weight;\\n    }\\n\\n    function getValuePoolsSumWeights(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        return _getValuePoolsSumWeights(day);\\n    }\\n\\n    function getServicePoolsSumWeights(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        return _getServicePoolsSumWeights(day);\\n    }\\n\\n    function getSumWeights(uint256 dayNumber) public view returns (uint256) {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        return _getSumWeights(day);\\n    }\\n\\n    function updateValuePoolsWeight(uint256 weight, uint256 day) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        _updateWeight(valuePoolsDays, valuePoolsWeights, day, weight);\\n    }\\n\\n    function updateServicePoolsWeight(uint256 weight, uint256 day) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        _updateWeight(servicePoolsDays, servicePoolsWeights, day, weight);\\n    }\\n\\n    function updateValuePoolWeight(\\n        address valuePool,\\n        uint256 weight,\\n        uint256 day\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        _updateWeight(\\n            valuePoolDays[valuePool],\\n            valuePoolWeights[valuePool],\\n            day,\\n            weight\\n        );\\n    }\\n\\n    function updateServicePoolWeight(\\n        address servicePool,\\n        uint256 weight,\\n        uint256 day\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(servicePoolAccepted[servicePool], \\\"invalid servicePool\\\");\\n        _updateWeight(\\n            servicePoolDays[servicePool],\\n            servicePoolWeights[servicePool],\\n            day,\\n            weight\\n        );\\n    }\\n\\n    function updateVoteCastersWeight(uint256 weight, uint256 day) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        _updateWeight(voteCastersDays, voteCastersWeights, day, weight);\\n    }\\n\\n    function updateVoteReceiversWeight(uint256 weight, uint256 day) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        _updateWeight(voteReceiversDays, voteReceiversWeights, day, weight);\\n    }\\n\\n    // FEES\\n    // *************************************************************************************\\n    function getValuePoolMiningFee(address valuePool)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        return (\\n            valuePoolMiningFeeNumerator[valuePool],\\n            valuePoolMiningFeeDenominator[valuePool]\\n        );\\n    }\\n\\n    function getValuePoolUnminingFee(address valuePool)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        return (\\n            valuePoolUnminingFeeNumerator[valuePool],\\n            valuePoolUnminingFeeDenominator[valuePool]\\n        );\\n    }\\n\\n    function getValuePoolClaimingFee(address valuePool)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        return (\\n            valuePoolClaimingFeeNumerator[valuePool],\\n            valuePoolClaimingFeeDenominator[valuePool]\\n        );\\n    }\\n\\n    function updateValuePoolMiningFee(\\n        address valuePool,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        require(denominator != 0, \\\"invalid value\\\");\\n        valuePoolMiningFeeNumerator[valuePool] = numerator;\\n        valuePoolMiningFeeDenominator[valuePool] = denominator;\\n    }\\n\\n    function updateValuePoolUnminingFee(\\n        address valuePool,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        require(denominator != 0, \\\"invalid value\\\");\\n        valuePoolUnminingFeeNumerator[valuePool] = numerator;\\n        valuePoolUnminingFeeDenominator[valuePool] = denominator;\\n    }\\n\\n    function updateValuePoolClaimingFee(\\n        address valuePool,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        require(denominator != 0, \\\"invalid value\\\");\\n        valuePoolClaimingFeeNumerator[valuePool] = numerator;\\n        valuePoolClaimingFeeDenominator[valuePool] = denominator;\\n    }\\n\\n    function getServicePoolRequestFeeInWei(address servicePool)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(servicePoolAccepted[servicePool], \\\"invalid servicePool\\\");\\n        return servicePoolRequestFeeInWei[servicePool];\\n    }\\n\\n    function getServicePoolClaimingFee(address servicePool)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(servicePoolAccepted[servicePool], \\\"invalid servicePool\\\");\\n        return (\\n            servicePoolClaimingFeeNumerator[servicePool],\\n            servicePoolClaimingFeeDenominator[servicePool]\\n        );\\n    }\\n\\n    function updateServicePoolRequestFeeInWei(\\n        address servicePool,\\n        uint256 feeInWei\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(servicePoolAccepted[servicePool], \\\"invalid servicePool\\\");\\n        servicePoolRequestFeeInWei[servicePool] = feeInWei;\\n    }\\n\\n    function updateServicePoolClaimingFee(\\n        address servicePool,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(servicePoolAccepted[servicePool], \\\"invalid servicePool\\\");\\n        require(denominator != 0, \\\"invalid value\\\");\\n        servicePoolClaimingFeeNumerator[servicePool] = numerator;\\n        servicePoolClaimingFeeDenominator[servicePool] = denominator;\\n    }\\n\\n    // REWARDS\\n    // *************************************************************************************\\n    function getRewards(uint256 dayNumber) public view returns (uint256) {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 rewards) = _get(rewardDays, rewardAmounts, day);\\n        return rewards;\\n    }\\n\\n    function getValuePoolsRewards(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 reward) = _get(rewardDays, rewardAmounts, day);\\n        uint256 weight = getValuePoolsWeight(day);\\n        uint256 sumWeight = _getSumWeights(day);\\n        return sumWeight == 0 ? 0 : reward.mul(weight).div(sumWeight);\\n    }\\n\\n    function getServicePoolsRewards(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 reward) = _get(rewardDays, rewardAmounts, day);\\n        uint256 weight = getServicePoolsWeight(day);\\n        uint256 sumWeight = _getSumWeights(day);\\n        return sumWeight == 0 ? 0 : reward.mul(weight).div(sumWeight);\\n    }\\n\\n    function getVoteCastersRewards(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 reward) = _get(rewardDays, rewardAmounts, day);\\n        uint256 weight = getVoteCastersWeight(day);\\n        uint256 sumWeight = _getSumWeights(day);\\n        return sumWeight == 0 ? 0 : reward.mul(weight).div(sumWeight);\\n    }\\n\\n    function getVoteReceiversRewards(uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        (, uint256 reward) = _get(rewardDays, rewardAmounts, day);\\n        uint256 weight = getVoteReceiversWeight(day);\\n        uint256 sumWeight = _getSumWeights(day);\\n        return sumWeight == 0 ? 0 : reward.mul(weight).div(sumWeight);\\n    }\\n\\n    function getValuePoolRewards(address valuePool, uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(valuePoolAccepted[valuePool], \\\"invalid valuePool\\\");\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        uint256 reward = getValuePoolsRewards(day);\\n        (, uint256 weight) = _get(\\n            valuePoolDays[valuePool],\\n            valuePoolWeights[valuePool],\\n            day\\n        );\\n        uint256 sumWeights = _getValuePoolsSumWeights(day);\\n        return sumWeights == 0 ? 0 : reward.mul(weight).div(sumWeights);\\n    }\\n\\n    function getServicePoolRewards(address servicePool, uint256 dayNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(servicePoolAccepted[servicePool], \\\"invalid servicePool\\\");\\n        uint256 day = dayNumber == 0 ? _getCurrentDay() : dayNumber;\\n        uint256 reward = getServicePoolsRewards(day);\\n        (, uint256 weight) = _get(\\n            servicePoolDays[servicePool],\\n            servicePoolWeights[servicePool],\\n            day\\n        );\\n        uint256 sumWeights = _getServicePoolsSumWeights(day);\\n        return sumWeights == 0 ? 0 : reward.mul(weight).div(sumWeights);\\n    }\\n\\n    function addReward(uint256 amount, uint256 day) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        if (rewardDays.length == 0) {\\n            require(day == _getCurrentDay(), \\\"1: invalid day\\\");\\n        } else {\\n            uint256 lastIndex = rewardDays.length.sub(1);\\n            uint256 lastDay = rewardDays[lastIndex];\\n            require(day != lastDay, \\\"2: invalid day\\\");\\n            require(day \\u003e= _getCurrentDay(), \\\"3: invalid day\\\");\\n        }\\n        rewardDays.push(day);\\n        rewardAmounts.push(amount);\\n    }\\n\\n    function updateReward(uint256 amount, uint256 day) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        require(rewardDays.length != 0, \\\"zero\\\");\\n        require(day \\u003e= _getCurrentDay(), \\\"1: invalid day\\\");\\n        (bool found, uint256 index) = _findIndex(rewardDays, day);\\n        require(found, \\\"2: invalid day\\\");\\n        rewardAmounts[index] = amount;\\n    }\\n\\n    function requestRewards(address miner, uint256 amount) public {\\n        require(\\n            valuePoolAccepted[msg.sender] ||\\n                servicePoolAccepted[msg.sender] ||\\n                msg.sender == sbVotes,\\n            \\\"invalid caller\\\"\\n        );\\n        strongToken.approve(address(sbStrongValuePool), amount);\\n        sbStrongValuePool.mineFor(miner, amount);\\n    }\\n\\n    // VALUE POOLS\\n    // *************************************************************************************\\n    function isValuePoolAccepted(address valuePool) public view returns (bool) {\\n        return valuePoolAccepted[valuePool];\\n    }\\n\\n    function getValuePools() public view returns (address[] memory) {\\n        return valuePools;\\n    }\\n\\n    function addValuePool(address valuePool) public {\\n        require(msg.sender == admin || msg.sender == superAdmin);\\n        require(!valuePoolAccepted[valuePool], \\\"exists\\\");\\n        valuePoolAccepted[valuePool] = true;\\n        valuePools.push(valuePool);\\n    }\\n\\n    // SERVICE POOLS\\n    // *************************************************************************************\\n    function isServicePoolAccepted(address servicePool)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return servicePoolAccepted[servicePool];\\n    }\\n\\n    function getServicePools() public view returns (address[] memory) {\\n        return servicePools;\\n    }\\n\\n    function addServicePool(address servicePool) public {\\n        require(msg.sender == admin || msg.sender == superAdmin);\\n        require(!servicePoolAccepted[servicePool], \\\"exists\\\");\\n        servicePoolAccepted[servicePool] = true;\\n        servicePools.push(servicePool);\\n    }\\n\\n    // VOTES\\n    // *************************************************************************************\\n    function getVoteForServicePoolsCount() public view returns (uint256) {\\n        return voteForServicePoolsCount;\\n    }\\n\\n    function getVoteForServicesCount() public view returns (uint256) {\\n        return voteForServicesCount;\\n    }\\n\\n    function updateVoteForServicePoolsCount(uint256 count) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        voteForServicePoolsCount = count;\\n    }\\n\\n    function updateVoteForServicesCount(uint256 count) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin\\n        );\\n        voteForServicesCount = count;\\n    }\\n\\n    // SUPPORT\\n    // *************************************************************************************\\n    function getCurrentDay() public view returns (uint256) {\\n        return _getCurrentDay();\\n    }\\n\\n    function _getCurrentDay() internal view returns (uint256) {\\n        return block.timestamp.div(1 days).add(1);\\n    }\\n\\n    function _getValuePoolsSumWeights(uint256 day)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 sum;\\n        for (uint256 i = 0; i \\u003c valuePools.length; i++) {\\n            address valuePool = valuePools[i];\\n            (, uint256 weight) = _get(\\n                valuePoolDays[valuePool],\\n                valuePoolWeights[valuePool],\\n                day\\n            );\\n            sum = sum.add(weight);\\n        }\\n        return sum;\\n    }\\n\\n    function _getServicePoolsSumWeights(uint256 day)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 sum;\\n        for (uint256 i = 0; i \\u003c servicePools.length; i++) {\\n            address servicePool = servicePools[i];\\n            (, uint256 weight) = _get(\\n                servicePoolDays[servicePool],\\n                servicePoolWeights[servicePool],\\n                day\\n            );\\n            sum = sum.add(weight);\\n        }\\n        return sum;\\n    }\\n\\n    function _getSumWeights(uint256 day) internal view returns (uint256) {\\n        (, uint256 vpWeight) = _get(valuePoolsDays, valuePoolsWeights, day);\\n        (, uint256 spWeight) = _get(servicePoolsDays, servicePoolsWeights, day);\\n        (, uint256 vcWeight) = _get(voteCastersDays, voteCastersWeights, day);\\n        (, uint256 vrWeight) = _get(\\n            voteReceiversDays,\\n            voteReceiversWeights,\\n            day\\n        );\\n        return vpWeight.add(spWeight).add(vcWeight).add(vrWeight);\\n    }\\n\\n    function _get(\\n        uint256[] memory _Days,\\n        uint256[] memory _Units,\\n        uint256 day\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 len = _Days.length;\\n        if (len == 0) {\\n            return (day, 0);\\n        }\\n        if (day \\u003c _Days[0]) {\\n            return (day, 0);\\n        }\\n        uint256 lastIndex = len.sub(1);\\n        uint256 lastDay = _Days[lastIndex];\\n        if (day \\u003e= lastDay) {\\n            return (day, _Units[lastIndex]);\\n        }\\n        return _find(_Days, _Units, day);\\n    }\\n\\n    function _find(\\n        uint256[] memory _Days,\\n        uint256[] memory _Units,\\n        uint256 day\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 left = 0;\\n        uint256 right = _Days.length.sub(1);\\n        uint256 middle = right.add(left).div(2);\\n        while (left \\u003c right) {\\n            if (_Days[middle] == day) {\\n                return (day, _Units[middle]);\\n            } else if (_Days[middle] \\u003e day) {\\n                if (middle \\u003e 0 \\u0026\\u0026 _Days[middle.sub(1)] \\u003c day) {\\n                    return (day, _Units[middle.sub(1)]);\\n                }\\n                if (middle == 0) {\\n                    return (day, 0);\\n                }\\n                right = middle.sub(1);\\n            } else if (_Days[middle] \\u003c day) {\\n                if (\\n                    middle \\u003c _Days.length.sub(1) \\u0026\\u0026 _Days[middle.add(1)] \\u003e day\\n                ) {\\n                    return (day, _Units[middle]);\\n                }\\n                left = middle.add(1);\\n            }\\n            middle = right.add(left).div(2);\\n        }\\n        if (_Days[middle] != day) {\\n            return (day, 0);\\n        } else {\\n            return (day, _Units[middle]);\\n        }\\n    }\\n\\n    function _findIndex(uint256[] memory _Array, uint256 element)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        uint256 left = 0;\\n        uint256 right = _Array.length.sub(1);\\n        while (left \\u003c= right) {\\n            uint256 middle = right.add(left).div(2);\\n            if (_Array[middle] == element) {\\n                return (true, middle);\\n            } else if (_Array[middle] \\u003e element) {\\n                right = middle.sub(1);\\n            } else if (_Array[middle] \\u003c element) {\\n                left = middle.add(1);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function _updateWeight(\\n        uint256[] storage _Days,\\n        uint256[] storage _Weights,\\n        uint256 day,\\n        uint256 weight\\n    ) internal {\\n        uint256 currentDay = _getCurrentDay();\\n        if (_Days.length == 0) {\\n            require(day == currentDay, \\\"1: invalid day\\\");\\n            _Days.push(day);\\n            _Weights.push(weight);\\n        } else {\\n            require(day \\u003e= currentDay, \\\"2: invalid day\\\");\\n            (bool found, uint256 index) = _findIndex(_Days, day);\\n            if (found) {\\n                _Weights[index] = weight;\\n            } else {\\n                _Days.push(day);\\n                _Weights.push(weight);\\n            }\\n        }\\n    }\\n}\\n\"},\"sbStrongValuePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface sbStrongValuePoolInterface {\\n  function mineFor(address miner, uint256 amount) external;\\n\\n  function getMinerMineData(address miner, uint256 day)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function getMineData(uint256 day)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function serviceMinMined(address miner) external view returns (bool);\\n\\n  function minerMinMined(address miner) external view returns (bool);\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"}],\"name\":\"addServicePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"}],\"name\":\"addValuePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinerMinMineAmountInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinerMinMineDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceMinMineAmountInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceMinMineDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"}],\"name\":\"getServicePoolClaimingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"}],\"name\":\"getServicePoolRequestFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getServicePoolRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"}],\"name\":\"getServicePoolVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getServicePoolWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServicePools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getServicePoolsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getServicePoolsSumWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getServicePoolsWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getSumWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"}],\"name\":\"getValuePoolClaimingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"}],\"name\":\"getValuePoolMiningFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getValuePoolRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"}],\"name\":\"getValuePoolUnminingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"}],\"name\":\"getValuePoolVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getValuePoolWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValuePools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getValuePoolsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getValuePoolsSumWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getValuePoolsWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteCasterVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getVoteCastersRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getVoteCastersWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteForServicePoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteForServicesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteReceiverVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getVoteReceiversRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNumber\",\"type\":\"uint256\"}],\"name\":\"getVoteReceiversWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strongTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sbStrongValuePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sbVotesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superAdminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parameterAdminAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"}],\"name\":\"isServicePoolAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"}],\"name\":\"isValuePoolAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerMinMineAmountInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerMinMineDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingSuperAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbStrongValuePool\",\"outputs\":[{\"internalType\":\"contract sbStrongValuePoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceMinMineAmountInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceMinMineDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"servicePoolAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"servicePoolClaimingFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"servicePoolClaimingFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"servicePoolDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"servicePoolRequestFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"servicePoolVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"servicePoolWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"servicePools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"servicePoolsDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"servicePoolsWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingSuperAdmin\",\"type\":\"address\"}],\"name\":\"setPendingSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"updateMinerMinMineAmountInWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayCount\",\"type\":\"uint256\"}],\"name\":\"updateMinerMinMineDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newParameterAdmin\",\"type\":\"address\"}],\"name\":\"updateParameterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"updateServiceMinMineAmountInWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayCount\",\"type\":\"uint256\"}],\"name\":\"updateServiceMinMineDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"updateServicePoolClaimingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"}],\"name\":\"updateServicePoolRequestFeeInWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingDayCount\",\"type\":\"uint256\"}],\"name\":\"updateServicePoolVestingDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"servicePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"updateServicePoolWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"updateServicePoolsWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"updateValuePoolClaimingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"updateValuePoolMiningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"updateValuePoolUnminingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingDayCount\",\"type\":\"uint256\"}],\"name\":\"updateValuePoolVestingDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"updateValuePoolWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"updateValuePoolsWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingDayCount\",\"type\":\"uint256\"}],\"name\":\"updateVoteCasterVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"updateVoteCastersWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"updateVoteForServicePoolsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"updateVoteForServicesCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingDayCount\",\"type\":\"uint256\"}],\"name\":\"updateVoteReceiverVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"updateVoteReceiversWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuePoolAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuePoolClaimingFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuePoolClaimingFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valuePoolDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuePoolMiningFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuePoolMiningFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuePoolUnminingFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuePoolUnminingFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuePoolVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valuePoolWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valuePools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valuePoolsDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valuePoolsWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteCasterVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteCastersDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteCastersWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteForServicePoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteForServicesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteReceiverVestingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteReceiversDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteReceiversWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"sbControllerV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://624a8b1d798bd54db5fdafef989b0c209acc2ff86f4ea2060b145f148a65a89e"}]}