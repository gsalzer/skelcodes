{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract EtherSeeds {\r\n    using SafeMath for uint256;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint8 currentLevel;\r\n        uint totalEarningEth;\r\n        address[] referral;\r\n        mapping(uint8 => uint) levelExpired;\r\n    }\r\n    \r\n    address public ownerAddress;\r\n    uint public adminFee = 5 ether;\r\n    uint public currentId = 0;\r\n    uint public PERIOD_LENGTH = 60 days;\r\n    uint referrer1Limit = 2;\r\n    bool public lockStatus;\r\n    \r\n    mapping (uint8 => uint) public LEVEL_PRICE;\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    mapping (address => mapping (uint8 => uint)) public EarnedEth;\r\n    mapping (address => uint) public loopCheck;\r\n    mapping (address => uint) public createdDate;\r\n    \r\n    event regLevelEvent(address indexed UserAddress, address indexed ReferrerAddress, uint Time);\r\n    event buyLevelEvent(address indexed UserAddress, uint Levelno, uint Time);\r\n    event getMoneyForLevelEvent(address indexed UserAddress, uint UserId, address indexed ReferrerAddress, uint ReferrerId, uint Levelno, uint LevelPrice, uint Time);\r\n    event lostMoneyForLevelEvent(address indexed UserAddress, uint UserId, address indexed ReferrerAddress, uint ReferrerId, uint Levelno, uint LevelPrice, uint Time);    \r\n    \r\n    constructor() public {\r\n        ownerAddress = msg.sender;\r\n        \r\n        // Level_Price\r\n        LEVEL_PRICE[1] = 0.04 ether;\r\n        LEVEL_PRICE[2] = 0.06 ether;\r\n        LEVEL_PRICE[3] = 0.12 ether;\r\n        LEVEL_PRICE[4] = 0.5 ether;\r\n        LEVEL_PRICE[5] = 1.20 ether;\r\n        LEVEL_PRICE[6] = 3 ether;\r\n        LEVEL_PRICE[7] = 6 ether;\r\n        LEVEL_PRICE[8] = 12 ether;\r\n        LEVEL_PRICE[9] = 24 ether;\r\n        LEVEL_PRICE[10] = 48 ether;\r\n        \r\n        UserStruct memory userStruct;\r\n        currentId = currentId.add(1);\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrerID: 0,\r\n            currentLevel:1,\r\n            totalEarningEth:0,\r\n            referral: new address[](0)\r\n        });\r\n        users[ownerAddress] = userStruct;\r\n        userList[currentId] = ownerAddress;\r\n\r\n        for(uint8 i = 1; i <= 10; i++) {\r\n            users[ownerAddress].currentLevel = i;\r\n            users[ownerAddress].levelExpired[i] = 55555555555;\r\n        }\r\n    }\r\n    \r\n    /** fallback */\r\n    function () external payable {\r\n        revert(\"Invalid Transaction\");\r\n    }\r\n    \r\n    /**\r\n     * @dev User registration\r\n     */ \r\n    function regUser(uint _referrerID) external payable {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(users[msg.sender].isExist == false, \"User exist\");\r\n        require(_referrerID > 0 && _referrerID <= currentId, \"Incorrect referrer Id\");\r\n        \r\n        uint adminProfit = (LEVEL_PRICE[1].mul(adminFee)).div(10**20);\r\n        require(msg.value == LEVEL_PRICE[1].add(adminProfit), \"Incorrect Value\");\r\n        \r\n        \r\n         // check \r\n        address UserAddress = msg.sender;\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(UserAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        \r\n        if (users[userList[_referrerID]].referral.length >= referrer1Limit) \r\n            _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n\r\n        UserStruct memory userStruct;\r\n        currentId = currentId.add(1);\r\n        \r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrerID: _referrerID,\r\n            currentLevel: 1,\r\n            totalEarningEth:0,\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currentId] = msg.sender;\r\n        users[msg.sender].levelExpired[1] = now.add(PERIOD_LENGTH);\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n        \r\n        loopCheck[msg.sender] = 0;\r\n        createdDate[msg.sender] = now;\r\n        payForLevel(0, 1, msg.sender, adminProfit, msg.value);\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n    \r\n    \r\n    function buyLevel(uint8 _level) external payable {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(users[msg.sender].isExist, \"User not exist\"); \r\n        require(_level > 0 && _level <= 10, \"Incorrect level\");\r\n\r\n        uint adminProfit = (LEVEL_PRICE[_level].mul(adminFee)).div(10**20);\r\n        require(msg.value == LEVEL_PRICE[_level].add(adminProfit), \"Incorrect Value\");\r\n        \r\n        if (_level == 1) \r\n            users[msg.sender].levelExpired[1] = users[msg.sender].levelExpired[1].add(PERIOD_LENGTH);\r\n        \r\n        else {\r\n            \r\n            for (uint8 i = _level - 1; i > 0; i--) \r\n                require(users[msg.sender].levelExpired[i] >= now, \"Buy the previous level\");\r\n            \r\n            if (users[msg.sender].levelExpired[_level] == 0) {\r\n                users[msg.sender].levelExpired[_level] = now.add(PERIOD_LENGTH);\r\n                users[msg.sender].currentLevel = _level;\r\n            }\r\n                \r\n            else \r\n                users[msg.sender].levelExpired[_level] = users[msg.sender].levelExpired[_level].add(PERIOD_LENGTH);\r\n        }\r\n        \r\n        loopCheck[msg.sender] = 0;\r\n        payForLevel(0, _level, msg.sender, adminProfit, msg.value);\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n    \r\n    /**\r\n     * @dev Contract balance withdraw\r\n     */ \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n            \r\n    /**\r\n     * @dev Update admin fee percentage\r\n     */ \r\n    function updateFeePercentage(uint256 _adminFee) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"only OwnerWallet\");\r\n\r\n        adminFee = _adminFee;\r\n        return true;  \r\n    }\r\n    \r\n    /**\r\n     * @dev Update level price\r\n     */ \r\n    function updatePrice(uint8 _level, uint _price) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"only OwnerWallet\");\r\n\r\n        LEVEL_PRICE[_level] = _price;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Update contract status\r\n     */ \r\n    function contractLock(bool _lockStatus) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"Invalid User\");\r\n\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n        \r\n    /**\r\n     * @dev View free Referrer Address\r\n     */ \r\n    function findFreeReferrer(address _userAddress) public view returns (address) {\r\n        if (users[_userAddress].referral.length < referrer1Limit) \r\n            return _userAddress;\r\n\r\n        address[] memory referrals = new address[](254);\r\n        referrals[0] = users[_userAddress].referral[0];\r\n        referrals[1] = users[_userAddress].referral[1];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for (uint i = 0; i < 254; i++) { \r\n            if (users[referrals[i]].referral.length == referrer1Limit) {\r\n                if (i < 126) {\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n        return freeReferrer;\r\n    }\r\n    \r\n    /**\r\n     * @dev Total earned ETH\r\n     */\r\n    function getTotalEarnedEther() public view returns (uint) {\r\n        uint totalEth;\r\n        for (uint i = 1; i <= currentId; i++) {\r\n            totalEth = totalEth.add(users[userList[i]].totalEarningEth);\r\n        }\r\n        return totalEth;\r\n    }\r\n        \r\n    /**\r\n     * @dev View referrals\r\n     */ \r\n    function viewUserReferral(address _userAddress) public view returns (address[] memory) {\r\n        return users[_userAddress].referral;\r\n    }\r\n    \r\n    /**\r\n     * @dev View level expired time\r\n     */ \r\n    function viewUserLevelExpired(address _userAddress,uint8 _level) public view returns (uint) {\r\n        return users[_userAddress].levelExpired[_level];\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function for payment\r\n     */ \r\n    function payForLevel(uint _flag, uint8 _level, address _userAddress, uint _adminPrice, uint256 _amt) internal {\r\n        address[6] memory referer;\r\n        \r\n        if (_flag == 0) {\r\n            if (_level == 1 || _level == 6) {\r\n                referer[0] = userList[users[_userAddress].referrerID];\r\n            } else if (_level == 2 || _level == 7) {\r\n                referer[1] = userList[users[_userAddress].referrerID];\r\n                referer[0] = userList[users[referer[1]].referrerID];\r\n            } else if (_level == 3 || _level == 8) {\r\n                referer[1] = userList[users[_userAddress].referrerID];\r\n                referer[2] = userList[users[referer[1]].referrerID];\r\n                referer[0] = userList[users[referer[2]].referrerID];\r\n            } else if (_level == 4 || _level == 9) {\r\n                referer[1] = userList[users[_userAddress].referrerID];\r\n                referer[2] = userList[users[referer[1]].referrerID];\r\n                referer[3] = userList[users[referer[2]].referrerID];\r\n                referer[0] = userList[users[referer[3]].referrerID];\r\n            } else if (_level == 5 || _level == 10) {\r\n                referer[1] = userList[users[_userAddress].referrerID];\r\n                referer[2] = userList[users[referer[1]].referrerID];\r\n                referer[3] = userList[users[referer[2]].referrerID];\r\n                referer[4] = userList[users[referer[3]].referrerID];\r\n                referer[0] = userList[users[referer[4]].referrerID];\r\n            }\r\n        } else if (_flag == 1) {\r\n            referer[0] = userList[users[_userAddress].referrerID];\r\n        }\r\n        \r\n        if (!users[referer[0]].isExist)\r\n            referer[0] = userList[1];\r\n        \r\n        if (loopCheck[msg.sender] >= 12) \r\n            referer[0] = userList[1];\r\n        \r\n        if (users[referer[0]].levelExpired[_level] >= now) {\r\n            \r\n            require((address(uint160(referer[0])).send(LEVEL_PRICE[_level])) && (address(uint160(ownerAddress)).send(_adminPrice)) ,\"Transaction Failure\");\r\n            users[referer[0]].totalEarningEth = users[referer[0]].totalEarningEth.add(LEVEL_PRICE[_level]);\r\n            EarnedEth[referer[0]][_level] = EarnedEth[referer[0]][_level].add(LEVEL_PRICE[_level]);\r\n            emit getMoneyForLevelEvent(msg.sender, users[msg.sender].id, referer[0], users[referer[0]].id, _level, LEVEL_PRICE[_level], now);\r\n            \r\n        } else {\r\n            \r\n            if (loopCheck[msg.sender] < 12) {\r\n                loopCheck[msg.sender] = loopCheck[msg.sender].add(1);\r\n                emit lostMoneyForLevelEvent(msg.sender, users[msg.sender].id, referer[0], users[referer[0]].id, _level, LEVEL_PRICE[_level], now);\r\n                payForLevel(1, _level, referer[0], _adminPrice, _amt);\r\n            }\r\n            \r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReferrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LevelPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReferrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LevelPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"EarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createdDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalEarnedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loopCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"}],\"name\":\"updateFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"currentLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalEarningEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtherSeeds","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dfc5fb526f4776746d80ee430f37a980ec81c9690be05429589f73d26329e1d2"}]}