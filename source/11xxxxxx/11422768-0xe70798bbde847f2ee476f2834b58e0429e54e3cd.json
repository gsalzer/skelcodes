{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\n/**\r\n * @title ColorPicker\r\n * @dev Store, update & retrieve a hex color. Costs 0.001 ETH to change it.\r\n */\r\ncontract ColorPicker {\r\n    address private immutable owner;\r\n    bytes3 private color;\r\n    uint private cost;\r\n\r\n    event ColorChanged(\r\n        address indexed _from,\r\n        bytes3 indexed _newColor,\r\n        uint indexed cost\r\n    );\r\n\r\n    constructor () {\r\n        // Owner is the contract deployer address\r\n        owner = msg.sender;\r\n\r\n        // Default color is white\r\n        color = 0xffffff;\r\n\r\n        // Default update cost is 0.001 ETH\r\n        cost = 1000000000000000;\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function\r\n     */\r\n    fallback() external payable {}\r\n    \r\n    /**\r\n     * @dev Receive ether function\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Get the contract owner\r\n     * @return the contract owner\r\n     */\r\n    function getOwner() public view returns(address) {\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current color\r\n     * @return the current color\r\n     */\r\n    function getColor() public view returns(bytes3) {\r\n        return color;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current cost of updating the color\r\n     * @return the current cost of updating the color\r\n     */\r\n    function getCost() public view returns(uint) {\r\n        return cost;\r\n    }\r\n\r\n    /**\r\n     * @dev Set newColor in color if the cost is payed.\r\n     * @param newColor value to store\r\n     */\r\n    function setColor(bytes3 newColor) public payable {\r\n        require(\r\n            msg.value == cost,\r\n            \"Payment does not equal cost.\"\r\n        );\r\n        color = newColor;\r\n        emit ColorChanged(msg.sender, newColor, cost);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the update cost if you're the owner\r\n     * @param newCost the new color update cost\r\n     */\r\n    function setCost(uint newCost) public {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Unauthorized access detected.\"\r\n        );\r\n        cost = newCost;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw the contract balance if you're the owner\r\n     */\r\n    function withdrawBalance() external {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Unauthorized access detected.\"\r\n        );\r\n        require(\r\n            address(this).balance > 0,\r\n            \"Contract balance is zero.\"\r\n        );\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes3\",\"name\":\"_newColor\",\"type\":\"bytes3\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"ColorChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3\",\"name\":\"newColor\",\"type\":\"bytes3\"}],\"name\":\"setColor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ColorPicker","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0c6d3d92725d4cfa8ef6167ae92e052c82e782df48f81265cc86f04a5ce42fb2"}]}