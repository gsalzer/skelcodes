{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.8.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// NBU token main contract (2020)\r\n//\r\n// Symbol       : NBU\r\n// Name         : Nimbus\r\n// Total supply : 1.000.000.000 (burnable)\r\n// Decimals     : 18\r\n// ----------------------------------------------------------------------------\r\n// SPDX-License-Identifier: MIT\r\n// ----------------------------------------------------------------------------\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) public onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(a, b, \"SafeMath: addition overflow\");\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract NBU is IERC20, Ownable, Pausable {\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n    \r\n    mapping (address => uint) private _unfrozenBalances;\r\n\r\n    mapping (address => uint) private _vestingNonces;\r\n    mapping (address => mapping (uint => uint)) private _vestingAmounts;\r\n    mapping (address => mapping (uint => uint)) private _unvestedAmounts;\r\n    mapping (address => mapping (uint => uint)) private _vestingTypes; //0 - multivest, 1 - single vest, > 2 give by vester id\r\n    mapping (address => mapping (uint => uint)) private _vestingReleaseStartDates;\r\n\r\n    uint private _totalSupply = 1_000_000_000e18;\r\n    string private constant _name = \"Nimbus\";\r\n    string private constant _symbol = \"NBU\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint private vestingFirstPeriod = 60 days;\r\n    uint private vestingSecondPeriod = 152 days;\r\n\r\n    uint public giveAmount;\r\n    mapping (address => bool) public vesters;\r\n\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    mapping (address => uint) public nonces;\r\n\r\n    event Unvest(address user, uint amount);\r\n\r\n    constructor () {\r\n        _unfrozenBalances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply); \r\n\r\n        uint chainId = block.chainid;\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(_name)),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n        giveAmount = _totalSupply / 10;\r\n    }\r\n\r\n    function approve(address spender, uint amount) external override whenNotPaused returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) external override whenNotPaused returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external override whenNotPaused returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"NBU::transferFrom: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external whenNotPaused {\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"NBU::permit: invalid signature\");\r\n        require(signatory == owner, \"NBU::permit: unauthorized\");\r\n        require(block.timestamp <= deadline, \"NBU::permit: signature expired\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"NBU::decreaseAllowance: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function unvest() external whenNotPaused returns (uint unvested) {\r\n        require (_vestingNonces[msg.sender] > 0, \"NBU::unvest:No vested amount\");\r\n        for (uint i = 1; i <= _vestingNonces[msg.sender]; i++) {\r\n            if (_vestingAmounts[msg.sender][i] == _unvestedAmounts[msg.sender][i]) continue;\r\n            if (_vestingReleaseStartDates[msg.sender][i] > block.timestamp) break;\r\n            uint toUnvest = block.timestamp.sub(_vestingReleaseStartDates[msg.sender][i]).mul(_vestingAmounts[msg.sender][i]) / vestingSecondPeriod;\r\n            if (toUnvest > _vestingAmounts[msg.sender][i]) {\r\n                toUnvest = _vestingAmounts[msg.sender][i];\r\n            } \r\n            uint totalUnvestedForNonce = toUnvest;\r\n            toUnvest = toUnvest.sub(_unvestedAmounts[msg.sender][i]);\r\n            unvested = unvested.add(toUnvest);\r\n            _unvestedAmounts[msg.sender][i] = totalUnvestedForNonce;\r\n        }\r\n        _unfrozenBalances[msg.sender] = _unfrozenBalances[msg.sender].add(unvested);\r\n        emit Unvest(msg.sender, unvested);\r\n    }\r\n\r\n    function give(address user, uint amount, uint vesterId) external {\r\n        require (giveAmount > amount, \"NBU::give: give finished\");\r\n        require (vesters[msg.sender], \"NBU::give: not vester\");\r\n        giveAmount = giveAmount.sub(amount);\r\n        _vest(user, amount, vesterId);\r\n     }\r\n\r\n    function vest(address user, uint amount) external {\r\n        require (vesters[msg.sender], \"NBU::vest: not vester\");\r\n        _vest(user, amount, 1);\r\n    }\r\n\r\n    function burnTokens(uint amount) external onlyOwner returns (bool success) {\r\n        require(amount <= _unfrozenBalances[owner], \"NBU::burnTokens: exceeds available amount\");\r\n        _unfrozenBalances[owner] = _unfrozenBalances[owner].sub(amount, \"NBU::burnTokens: transfer amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount, \"NBU::burnTokens: overflow\");\r\n        emit Transfer(owner, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint) {\r\n        uint amount = _unfrozenBalances[account];\r\n        if (_vestingNonces[account] == 0) return amount;\r\n        for (uint i = 1; i <= _vestingNonces[account]; i++) {\r\n            amount = amount.add(_vestingAmounts[account][i]).sub(_unvestedAmounts[account][i]);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function availableForUnvesting(address user) external view returns (uint unvestAmount) {\r\n        if (_vestingNonces[user] == 0) return 0;\r\n        for (uint i = 1; i <= _vestingNonces[user]; i++) {\r\n            if (_vestingAmounts[user][i] == _unvestedAmounts[user][i]) continue;\r\n            if (_vestingReleaseStartDates[user][i] > block.timestamp) break;\r\n            uint toUnvest = block.timestamp.sub(_vestingReleaseStartDates[user][i]).mul(_vestingAmounts[user][i]) / vestingSecondPeriod;\r\n            if (toUnvest > _vestingAmounts[user][i]) {\r\n                toUnvest = _vestingAmounts[user][i];\r\n            } \r\n            toUnvest = toUnvest.sub(_unvestedAmounts[user][i]);\r\n            unvestAmount = unvestAmount.add(toUnvest);\r\n        }\r\n    }\r\n\r\n    function availableForTransfer(address account) external view returns (uint) {\r\n        return _unfrozenBalances[account];\r\n    }\r\n\r\n    function vestingInfo(address user, uint nonce) external view returns (uint vestingAmount, uint unvestedAmount, uint vestingReleaseStartDate, uint vestType) {\r\n        vestingAmount = _vestingAmounts[user][nonce];\r\n        unvestedAmount = _unvestedAmounts[user][nonce];\r\n        vestingReleaseStartDate = _vestingReleaseStartDates[user][nonce];\r\n        vestType = _vestingTypes[user][nonce];\r\n    }\r\n\r\n    function vestingNonces(address user) external view returns (uint lastNonce) {\r\n        return _vestingNonces[user];\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint amount) private {\r\n        require(owner != address(0), \"NBU::_approve: approve from the zero address\");\r\n        require(spender != address(0), \"NBU::_approve: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint amount) private {\r\n        require(sender != address(0), \"NBU::_transfer: transfer from the zero address\");\r\n        require(recipient != address(0), \"NBU::_transfer: transfer to the zero address\");\r\n\r\n        _unfrozenBalances[sender] = _unfrozenBalances[sender].sub(amount, \"NBU::_transfer: transfer amount exceeds balance\");\r\n        _unfrozenBalances[recipient] = _unfrozenBalances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _vest(address user, uint amount, uint vestType) private {\r\n        uint nonce = ++_vestingNonces[user];\r\n        _vestingAmounts[user][nonce] = amount;\r\n        _vestingReleaseStartDates[user][nonce] = block.timestamp + vestingFirstPeriod;\r\n        _unfrozenBalances[owner] = _unfrozenBalances[owner].sub(amount);\r\n        _vestingTypes[user][nonce] = vestType;\r\n        emit Transfer(owner, user, amount);\r\n    }\r\n\r\n\r\n\r\n\r\n    function multisend(address[] memory to, uint[] memory values) external onlyOwner returns (uint) {\r\n        require(to.length == values.length);\r\n        require(to.length < 100);\r\n        uint sum;\r\n        for (uint j; j < values.length; j++) {\r\n            sum += values[j];\r\n        }\r\n        _unfrozenBalances[owner] = _unfrozenBalances[owner].sub(sum, \"NBU::multisend: transfer amount exceeds balance\");\r\n        for (uint i; i < to.length; i++) {\r\n            _unfrozenBalances[to[i]] = _unfrozenBalances[to[i]].add(values[i], \"NBU::multisend: transfer amount exceeds balance\");\r\n            emit Transfer(owner, to[i], values[i]);\r\n        }\r\n        return(to.length);\r\n    }\r\n\r\n    function multivest(address[] memory to, uint[] memory values) external onlyOwner returns (uint) { \r\n        require(to.length == values.length);\r\n        require(to.length < 100);\r\n        uint sum;\r\n        for (uint j; j < values.length; j++) {\r\n            sum += values[j];\r\n        }\r\n        _unfrozenBalances[owner] = _unfrozenBalances[owner].sub(sum, \"NBU::multivest: transfer amount exceeds balance\");\r\n        for (uint i; i < to.length; i++) {\r\n            uint nonce = ++_vestingNonces[to[i]];\r\n            _vestingAmounts[to[i]][nonce] = values[i];\r\n            _vestingReleaseStartDates[to[i]][nonce] = block.timestamp + vestingFirstPeriod;\r\n            _vestingTypes[to[i]][nonce] = 0;\r\n            emit Transfer(owner, to[i], values[i]);\r\n        }\r\n        return(to.length);\r\n    }\r\n\r\n    function updateVesters(address vester, bool isActive) external onlyOwner { \r\n        vesters[vester] = isActive;\r\n    }\r\n\r\n    function updateGiveAmount(uint amount) external onlyOwner { \r\n        require (_unfrozenBalances[owner] > amount, \"NBU::updateGiveAmount: exceed owner balance\");\r\n        giveAmount = amount;\r\n    }\r\n    \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) external onlyOwner returns (bool success) {\r\n        return IERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    function acceptOwnership() public override {\r\n        uint amount = _unfrozenBalances[owner];\r\n        _unfrozenBalances[newOwner] = amount;\r\n        _unfrozenBalances[owner] = 0;\r\n        emit Transfer(owner, newOwner, amount);\r\n        super.acceptOwnership();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableForTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableForUnvesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesterId\",\"type\":\"uint256\"}],\"name\":\"give\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multivest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateGiveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updateVesters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"vestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unvestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingReleaseStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"vestingNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NBU","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85e628f9b5334d822e68a8f3858e1bd5b5df6644928fbf8f7c2d058c85517f30"}]}