{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/interfaces/IUniRouter.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IUniRouter {\r\n    function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    \r\n}\r\n// File: localhost/contracts/utils/SafeERC20.sol\r\n\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IOneSplit.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n//import \"openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol\";\r\n\r\n\r\ninterface IOneSplit {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        //address fromToken,\r\n        //address destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 returnAmount, uint256[] memory distribution);\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n        \r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags\r\n    ) external payable returns (uint256 returnAmount);\r\n}\r\n\r\n// File: localhost/contracts/access/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: localhost/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: localhost/contracts/XChanger.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract XChanger is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    \r\n    //address public constant oneSplitAddress = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E; #1split.eth\r\n    address public constant oneSplitAddress = 0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e; //1proto.eth\r\n        \r\n    address\r\n        public constant uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    address constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    //address constant SPLIT_ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    enum Exchange {UNI, ONESPLIT}\r\n    \r\n    Exchange public exchange;\r\n    \r\n    uint private constant slippageFee = 100; //100 = 1% slippage\r\n    uint private constant parts = 1;  // oneSplit parts, 1-100 affects gas usage\r\n\r\n    //0x6B175474E89094C44Da98b954EedeAC495271d0F DAI\r\n    //\r\n    //0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 USDC\r\n    //\r\n    //  30000000000000000000\r\n    //  30000000\r\n\r\n    event NoDirectQuote(address, address);\r\n    event NoWETHQuote(address, address);\r\n    \r\n    bool private initialized;\r\n\r\n    function init() virtual public {\r\n        require(!initialized, \"Is already been initialized\");\r\n        initialized = true;\r\n        exchange = Exchange.UNI;\r\n        Ownable.initialize(); // Do not forget this call!\r\n    }\r\n    \r\n    function setExchange(Exchange _exchange) external onlyOwner {\r\n        exchange = _exchange;\r\n    }\r\n    \r\n        // to withdraw token from the contract\r\n    function transferTokenBack(address TokenAddress)\r\n        external\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        IERC20 Token = IERC20(TokenAddress);\r\n        uint256 balance = Token.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            Token.safeTransfer(msg.sender, balance);\r\n        }\r\n\r\n        uint256 ETHbalance = address(this).balance;\r\n        if (ETHbalance > 0) {\r\n            msg.sender.transfer(ETHbalance);\r\n        }\r\n\r\n        return balance;\r\n    }\r\n    \r\n    function swapSplit(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount,\r\n        uint256 flags,\r\n        bool slipProtect\r\n    ) internal returns (uint256) {\r\n        IERC20 _fromToken = IERC20(fromToken);\r\n        IERC20 _toToken = IERC20(toToken);\r\n        IOneSplit oneSplit = IOneSplit(oneSplitAddress);\r\n        (uint256 returnAmount0, uint256[] memory distribution) = oneSplit\r\n            .getExpectedReturn(_fromToken, IERC20(toToken), amount, parts, flags);\r\n\r\n        require(returnAmount0 > 0, \"ISplit has nothing to return\");\r\n\r\n        if (_fromToken.allowance(address(this), oneSplitAddress) != uint256(-1)) {\r\n            _fromToken.safeApprove(oneSplitAddress, uint256(-1));\r\n        }\r\n\r\n        uint256 returnAmount = oneSplit.swap(\r\n            _fromToken,\r\n            _toToken,\r\n            amount,\r\n            parts,\r\n            distribution,\r\n            flags\r\n        );\r\n        \r\n        if (slipProtect) {\r\n            uint256 feeSlippage = returnAmount.mul(slippageFee).div(10000);    \r\n            uint minAmount = returnAmount.sub(feeSlippage);\r\n            require (_toToken.balanceOf(address(this)) > minAmount, 'ISplit slippage is too high');\r\n        } \r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function swapUni(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount,\r\n        bool slipProtect\r\n    ) internal returns (uint256) {\r\n        \r\n        IERC20 _token = IERC20(fromToken);\r\n\r\n        IUniRouter UniswapV2Router02 = IUniRouter(uniRouter);\r\n\r\n        if (\r\n            _token.allowance(address(this), address(uniRouter)) != uint256(-1)\r\n        ) {\r\n            _token.safeApprove(address(uniRouter), uint256(-1));\r\n        }\r\n\r\n        (uint256 returnAmount, address[] memory path) = quote(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            Exchange.UNI\r\n        );\r\n        require(returnAmount > 0, \"Quote is wrong\");\r\n\r\n        //slippage protection 1% if enabled\r\n        uint minAmount = 0;\r\n        if (slipProtect) {\r\n            uint256 feeSlippage = returnAmount.mul(slippageFee).div(10000);    \r\n            minAmount = returnAmount.sub(feeSlippage);\r\n        } \r\n        \r\n        uint256[] memory amounts = UniswapV2Router02.swapExactTokensForTokens(\r\n            amount,\r\n            minAmount,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n        \r\n        return amounts[path.length - 1];\r\n    }\r\n\r\n    function _getOneSplitExpReturn(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        IERC20 fromIERC20 = IERC20(fromToken);\r\n        IERC20 toIERC20 = IERC20(toToken);\r\n        \r\n        IOneSplit oneSplit = IOneSplit(oneSplitAddress);\r\n        (uint256 returnAmount0, ) = oneSplit.getExpectedReturn(fromIERC20, toIERC20, amount, parts, 0x800000000000);\r\n\r\n        return returnAmount0;\r\n    }\r\n\r\n    function swap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount,\r\n        Exchange useExchange,\r\n        bool slipProtect\r\n    ) public payable returns (uint256) {\r\n        if (fromToken == toToken) {\r\n            return amount; // nothing to change\r\n        }\r\n        uint256 result;\r\n        if (useExchange == Exchange.ONESPLIT) {\r\n            result = swapSplit(fromToken, toToken, amount, 0, slipProtect);\r\n        } else {\r\n            result = swapUni(fromToken, toToken, amount, slipProtect);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function quote(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount,\r\n        Exchange useExchange\r\n    ) public view returns (uint256, address[] memory) {\r\n        uint256 returnAmount;\r\n        address[] memory returnPath;\r\n\r\n        if (fromToken == toToken) {\r\n            //nothing to change\r\n            return (amount, returnPath);\r\n        }\r\n\r\n        if (useExchange == Exchange.ONESPLIT) {\r\n            returnAmount = _getOneSplitExpReturn(\r\n                fromToken,\r\n                toToken,\r\n                amount\r\n            );\r\n            return (returnAmount, returnPath);\r\n        } else {\r\n            address[] memory path = new address[](2);\r\n            path[0] = fromToken;\r\n            path[1] = toToken;\r\n\r\n            IUniRouter UniswapV2Router02 = IUniRouter(uniRouter);\r\n\r\n            try UniswapV2Router02.getAmountsOut(amount, path) returns (\r\n                uint256[] memory amounts\r\n            ) {\r\n                if (amounts[1] > returnAmount) {\r\n                    returnAmount = amounts[1];\r\n                    returnPath = path;\r\n                }\r\n            } catch {}\r\n\r\n            if (toToken != WETH_ADDRESS) {\r\n                address[] memory pathWETH = new address[](3);\r\n                pathWETH[0] = fromToken;\r\n                pathWETH[1] = WETH_ADDRESS;\r\n                pathWETH[2] = toToken;\r\n\r\n                try UniswapV2Router02.getAmountsOut(amount, pathWETH) returns (\r\n                    uint256[] memory amountsWETH\r\n                ) {\r\n                    if (amountsWETH[2] > returnAmount) {\r\n                        returnAmount = amountsWETH[2];\r\n                        returnPath = pathWETH;\r\n                    }\r\n                } catch {}\r\n            }\r\n\r\n            return (returnAmount, returnPath);\r\n        }\r\n    }\r\n\r\n    function reverseQuote(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount\r\n    ) public view returns (uint256) {\r\n        if (fromToken == toToken) {\r\n            //nothing to change\r\n            return amount;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = fromToken;\r\n        path[1] = toToken;\r\n\r\n        IUniRouter UniswapV2Router02 = IUniRouter(uniRouter);\r\n\r\n        uint256 returnAmount = uint256(-1);\r\n        try UniswapV2Router02.getAmountsIn(amount, path) returns (\r\n            uint256[] memory amounts\r\n        ) {\r\n            if (amounts[0] < returnAmount) {\r\n                returnAmount = amounts[0];\r\n            }\r\n        } catch {}\r\n\r\n        if (toToken != WETH_ADDRESS) {\r\n            address[] memory pathWETH = new address[](3);\r\n            pathWETH[0] = fromToken;\r\n            pathWETH[1] = WETH_ADDRESS;\r\n            pathWETH[2] = toToken;\r\n\r\n            try UniswapV2Router02.getAmountsIn(amount, pathWETH) returns (\r\n                uint256[] memory amountsWETH\r\n            ) {\r\n                if (amountsWETH[0] < returnAmount) {\r\n                    returnAmount = amountsWETH[0];\r\n                }\r\n            } catch {}\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/interfaces/ICHI.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ICHI {\r\n    function freeFromUpTo(address from, uint256 value)\r\n        external\r\n        returns (uint256);\r\n\r\n    function freeUpTo(uint256 value) external returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function mint(uint256 value) external;\r\n}\r\n\r\n// File: localhost/contracts/CHIBurner.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract CHIBurner {\r\n    address\r\n        public constant CHI_ADDRESS = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\r\n\r\n    ICHI public constant chi = ICHI(CHI_ADDRESS);\r\n\r\n    modifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n\r\n        /*uint256 availableAmount = chi.balanceOf(msg.sender);\r\n        uint256 allowedAmount = chi.allowance(msg.sender, address(this));\r\n        if (allowedAmount < availableAmount) {\r\n            availableAmount = allowedAmount;\r\n        }\r\n        uint256 ourBalance = chi.balanceOf(address(this));\r\n\r\n        address sender;\r\n        if (ourBalance > availableAmount) {\r\n            sender = address(this);\r\n            ourBalance = availableAmount;\r\n        } else {\r\n            sender = msg.sender;\r\n        }\r\n\r\n        if (ourBalance > 0) {*/\r\n        uint256 gasLeft = gasleft();\r\n        uint256 gasSpent = 21000 + gasStart - gasLeft + 16 * msg.data.length;\r\n        //chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\r\n        chi.freeUpTo((gasSpent + 14154) / 41947);\r\n        //}\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IWETH.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n// File: localhost/contracts/interfaces/ISFToken.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ISFToken {\r\n    function rebase(uint256 totalSupply) external;\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 amount) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IExternalPool.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract IExternalPool {\r\n    address public enterToken;\r\n\r\n    function getPoolValue(address denominator)\r\n        external\r\n        virtual\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTokenStaked() external virtual view returns (uint256);\r\n\r\n    function addPosition() external virtual returns (uint256);\r\n\r\n    function exitPosition(uint256 amount) external virtual;\r\n\r\n    function transferTokenTo(\r\n        address TokenAddress,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual returns (uint256);\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    //event Approval(address indexed owner, address indexed spender, uint value);\r\n    //event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    //function name() external pure returns (string memory);\r\n    //function symbol() external pure returns (string memory);\r\n    //function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    //function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    //function approve(address spender, uint value) external returns (bool);\r\n    //function transfer(address to, uint value) external returns (bool);\r\n    //function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    //function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    //function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    //function nonces(address owner) external view returns (uint);\r\n\r\n    //function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    //event Mint(address indexed sender, uint amount0, uint amount1);\r\n    //event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    /*event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    */\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n    /*\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    */\r\n}\r\n\r\n// File: localhost/contracts/ValueHolder.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ValueHolder is XChanger, CHIBurner {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    \r\n    mapping(uint256 => address) public uniPools;\r\n    mapping(uint256 => address) public externalPools;\r\n\r\n    uint256 public uniLen;\r\n    uint256 public extLen;\r\n\r\n    address public denominateTo;\r\n    address public holderAddress;\r\n    address public SFToken;\r\n\r\n    address public votedUniPool;\r\n    address public votedExtPool;\r\n    uint256 public votedFee; // 1% = 100\r\n    uint256 public votedChi; // number of Chi to hold\r\n\r\n    uint256 private constant fpNumbers = 1e8;\r\n    \r\n    event LogValueManagerUpdated(address Manager);\r\n    event LogVoterUpdated(address Voter);\r\n    event LogVotedExtPoolUpdated(address pool);\r\n    event LogVotedUniPoolUpdated(address pool);\r\n    event LogSFTokenUpdated(address _NewSFToken);\r\n    event LogFeeUpdated(uint256 newFee);\r\n    event LogFeeTaken(uint256 feeAmount);\r\n    event LogMintTaken(uint256 fromTokenAmount);\r\n    event LogBurnGiven(uint256 toTokenAmount);\r\n    event LogChiToppedUpdated(uint256 spendAmount);\r\n\r\n    address public ValueManager;\r\n    modifier onlyValueManager() {\r\n        require(msg.sender == ValueManager, \"Not Value Manager\");\r\n        _;\r\n    }\r\n\r\n    address public Voter;\r\n    modifier onlyVoter() {\r\n        require(msg.sender == Voter, \"Not Voter\");\r\n        _;\r\n    }\r\n\r\n    function init(\r\n        address _uniPool,\r\n        address _extPool,\r\n        address _sfToken\r\n    ) public {\r\n        XChanger.init();\r\n\r\n        //0x3041CbD36888bECc7bbCBc0045E3B1f144466f5f UNI\r\n\r\n        uniPools[uniLen] = _uniPool;\r\n        uniLen++;\r\n\r\n        externalPools[extLen] = _extPool;\r\n        extLen++;\r\n\r\n        votedExtPool = _extPool;\r\n        emit LogVotedExtPoolUpdated(_extPool);\r\n\r\n        denominateTo = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // USDT\r\n        SFToken = _sfToken; //\r\n        ValueManager = msg.sender;\r\n        Voter = msg.sender;\r\n        holderAddress = ValueManager;\r\n        votedFee = 200;\r\n        votedChi = 20;\r\n    }\r\n\r\n    function setSFToken(address _NewSFToken) public onlyOwner {\r\n        SFToken = _NewSFToken;\r\n        emit LogSFTokenUpdated(_NewSFToken);\r\n    }\r\n\r\n    function setValueManager(address _ValueManager) external onlyOwner {\r\n        ValueManager = _ValueManager;\r\n        emit LogValueManagerUpdated(_ValueManager);\r\n    }\r\n\r\n    function setVoter(address _Voter) external onlyOwner {\r\n        Voter = _Voter;\r\n        emit LogVoterUpdated(_Voter);\r\n    }\r\n\r\n    function setVotedExtPool(address pool) public onlyVoter {\r\n        votedExtPool = pool;\r\n        emit LogVotedExtPoolUpdated(pool);\r\n    }\r\n\r\n    function setVotedUniPool(address pool) public onlyVoter {\r\n        votedUniPool = pool;\r\n        emit LogVotedUniPoolUpdated(pool);\r\n    }\r\n\r\n    function setVotedFee(uint256 _votedFee) public onlyVoter {\r\n        votedFee = _votedFee;\r\n        emit LogFeeUpdated(_votedFee);\r\n    }\r\n\r\n    function setVotedChi(uint256 _votedChi) public onlyVoter {\r\n        votedChi = _votedChi;\r\n    }\r\n\r\n    function topUpChi(address Token) public returns (uint256) {\r\n        uint256 currentChi = ICHI(CHI_ADDRESS).balanceOf(address(this));\r\n        if (currentChi < votedChi) {\r\n            //top up 1/2 votedChi\r\n            uint256 spendAmount = reverseQuote(\r\n                Token,\r\n                CHI_ADDRESS,\r\n                votedChi.div(2)\r\n            );\r\n            uint256 balance = IERC20(Token).balanceOf(address(this));\r\n            if (spendAmount > balance) {\r\n                spendAmount = balance;\r\n            }\r\n            \r\n            if (spendAmount > 0) {\r\n                swap(Token, CHI_ADDRESS, spendAmount, Exchange.UNI, false);\r\n                LogChiToppedUpdated(spendAmount);\r\n                return spendAmount;\r\n            } else {\r\n                return 0;\r\n            }\r\n        } else {\r\n            return 0;    \r\n        }\r\n    }\r\n\r\n    function mintQuote(\r\n        address fromToken,\r\n        uint256 amount\r\n    ) external view returns (uint256) {\r\n        if (votedExtPool != address(0)) {\r\n            address toToken = IExternalPool(votedExtPool).enterToken();\r\n\r\n            (uint256 returnAmount, ) = quote(\r\n                fromToken,\r\n                toToken,\r\n                amount,\r\n                exchange\r\n            );\r\n            \r\n            (returnAmount, ) = quote(\r\n                toToken,\r\n                denominateTo,\r\n                returnAmount,\r\n                exchange\r\n            );\r\n            \r\n            return returnAmount;\r\n        } else if (votedUniPool != address(0)) {\r\n            revert(\"not yet implemented\");\r\n        }\r\n    }\r\n\r\n    function mint(address fromToken, uint256 amount)\r\n        external\r\n        payable\r\n        discountCHI\r\n    {\r\n        if (fromToken != address(0)) {\r\n            IERC20 _fromToken = IERC20(fromToken);\r\n            require(\r\n                _fromToken.allowance(msg.sender, address(this)) >= amount,\r\n                \"Allowance is not enough\"\r\n            );\r\n            uint balanceBefore = _fromToken.balanceOf(address(this));\r\n            _fromToken.safeTransferFrom(msg.sender, address(this), amount);\r\n            //confirmed amount\r\n            amount = _fromToken.balanceOf(address(this)).sub(balanceBefore);\r\n        } else {\r\n            //convert to WETH\r\n            IWETH(WETH_ADDRESS).deposit{value: msg.value}();\r\n            amount = msg.value;\r\n            fromToken = WETH_ADDRESS;\r\n        }\r\n        \r\n        require(amount > 0, 'Mint does not make sense');\r\n        \r\n        emit LogMintTaken(amount);\r\n\r\n        amount = amount.sub(topUpChi(fromToken));\r\n\r\n        if (votedExtPool != address(0)) {\r\n            IExternalPool extPool = IExternalPool(votedExtPool);\r\n            address toToken = extPool.enterToken();\r\n\r\n            uint256 returnAmount = swap(\r\n                fromToken,\r\n                toToken,\r\n                amount,\r\n                Exchange.UNI,\r\n                false\r\n            );\r\n            IERC20 _toToken = IERC20(toToken);\r\n            \r\n            // we rebase before depositing token to pool as we dont want to count it yet\r\n            uint256 value = getTotalValue().add(1);\r\n            _rebase(value);\r\n\r\n            _toToken.safeTransfer(votedExtPool, returnAmount);\r\n\r\n            extPool.addPosition();\r\n            \r\n            // convert return amount to USDT (denominateTo)\r\n            (uint256 toMint, ) = quote(\r\n                toToken,\r\n                denominateTo,\r\n                returnAmount,\r\n                exchange\r\n            );\r\n\r\n            // mint that amount to sender\r\n            ISFToken(SFToken).mint(msg.sender, toMint);\r\n        } else if (votedUniPool != address(0)) {\r\n            revert(\"not yet implemented\");\r\n        }\r\n    }\r\n\r\n    function burn(address toToken, uint256 amount) external discountCHI {\r\n        if (votedExtPool != address(0)) {\r\n            ISFToken _SFToken = ISFToken(SFToken);\r\n            // get latest token value\r\n            \r\n            uint256 value = getTotalValue().add(1);\r\n            _rebase(value);\r\n            \r\n            // limit by existing balance\r\n            uint256 senderBalance = _SFToken.balanceOf(msg.sender);\r\n            if (senderBalance < amount) {\r\n                amount = senderBalance;\r\n            }\r\n\r\n            require(amount > 0, \"Not enough balance\");\r\n\r\n            IExternalPool extPool = IExternalPool(votedExtPool);\r\n            address poolToken = extPool.enterToken();\r\n\r\n            //get quote from sf token to pool token\r\n            // how much pool token (DAI) is needed to make this amount of denominateTo (USDT)\r\n            uint256 poolTokenWithdraw = reverseQuote(\r\n                poolToken,\r\n                denominateTo,\r\n                amount\r\n            );\r\n\r\n            require(\r\n                extPool.getTokenStaked() >= poolTokenWithdraw,\r\n                \"Not enough voted pool value to withdraw\"\r\n            );\r\n\r\n            uint256 feeTaken = poolTokenWithdraw.mul(votedFee).div(10000);\r\n            emit LogFeeTaken(feeTaken);\r\n            //discount with fee\r\n            //leave fee in the pool\r\n            poolTokenWithdraw = poolTokenWithdraw.sub(feeTaken);\r\n\r\n            //pull out pool tokens\r\n            extPool.exitPosition(poolTokenWithdraw);\r\n            //get them out from the pool here\r\n            uint256 returnPoolTokenAmount = extPool.transferTokenTo(\r\n                poolToken,\r\n                address(this),\r\n                poolTokenWithdraw\r\n            );\r\n            // topup with CHi\r\n            returnPoolTokenAmount = returnPoolTokenAmount.sub(\r\n                topUpChi(poolToken)\r\n            );\r\n            _SFToken.burn(msg.sender, amount);\r\n\r\n            if (toToken == address(0)) {\r\n                toToken = WETH_ADDRESS;\r\n            }\r\n\r\n            uint256 returnAmount = swap(\r\n                poolToken,\r\n                toToken,\r\n                returnPoolTokenAmount,\r\n                Exchange.UNI,\r\n                true\r\n            );\r\n\r\n            if (toToken != WETH_ADDRESS) {\r\n                IERC20(toToken).safeTransfer(msg.sender, returnAmount);\r\n            } else {\r\n                IWETH(WETH_ADDRESS).withdraw(returnAmount);\r\n                \r\n                //address whom = msg.sender;\r\n                //whom.sendValue(returnAmount);\r\n                msg.sender.transfer(returnAmount);\r\n            }\r\n\r\n            emit LogBurnGiven(returnAmount);\r\n        } else if (votedUniPool != address(0)) {\r\n            revert(\"not yet implemented\");\r\n        }\r\n    }\r\n\r\n    function _rebase(uint256 value) internal {\r\n        ISFToken SF = ISFToken(SFToken);\r\n        SF.rebase(value);\r\n    }\r\n    \r\n    function rebase() public discountCHI onlyValueManager {\r\n        uint256 value = getTotalValue().add(1);\r\n        _rebase(value);\r\n    }\r\n\r\n    function rebase(uint256 value) external onlyValueManager {\r\n        _rebase(value);\r\n    }\r\n\r\n    function getUniBalance(IUniswapV2Pair uniPool)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 uniBalance;\r\n        try uniPool.balanceOf(holderAddress) returns (uint256 uniBalanceHolder)\r\n        {\r\n            uniBalance = uniBalanceHolder.add(uniPool.balanceOf(address(this)));\r\n        } catch { }\r\n        \r\n        return uniBalance;\r\n    }\r\n\r\n    function getHolderPc(IUniswapV2Pair uniPool) public view returns (uint256) {\r\n        uint256 holderPc;\r\n        try uniPool.totalSupply() returns (uint256 uniTotalSupply)\r\n        {\r\n            holderPc = (getUniBalance(uniPool).mul(fpNumbers)).div(uniTotalSupply);    \r\n        } catch {}\r\n        \r\n        //uint256 uniTotalSupply = uniPool.totalSupply();\r\n        return holderPc;\r\n    }\r\n\r\n    function getUniReserve(IUniswapV2Pair uniPool)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 holderPc = getHolderPc(uniPool);\r\n\r\n        uint256 myreserve0;\r\n        uint256 myreserve1;\r\n\r\n        try uniPool.getReserves() returns (uint112 reserve0, uint112 reserve1, uint32) {\r\n        \r\n            myreserve0 = (uint256(reserve0).mul(holderPc)).div(fpNumbers);\r\n            myreserve1 = (uint256(reserve1).mul(holderPc)).div(fpNumbers);\r\n    \r\n        } catch {}\r\n        \r\n         //= uniPool.getReserves();\r\n\r\n        \r\n        return (myreserve0, myreserve1);\r\n    }\r\n\r\n    function getExternalValue() public view returns (uint256) {\r\n        uint256 totalReserve = 0;\r\n        for (uint256 j = 0; j < extLen; j++) {\r\n            address extAddress = externalPools[j];\r\n            if (extAddress != address(0)) {\r\n                IExternalPool externalPool = IExternalPool(extAddress);\r\n\r\n                totalReserve = totalReserve.add(\r\n                    externalPool.getPoolValue(denominateTo)\r\n                );\r\n            }\r\n        }\r\n        return totalReserve;\r\n    }\r\n\r\n    function getDenominatedValue(IUniswapV2Pair uniPool)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        (uint256 myreserve0, uint256 myreserve1) = getUniReserve(uniPool);\r\n\r\n        address token0 = uniPool.token0();\r\n        address token1 = uniPool.token1();\r\n\r\n        if (token0 != denominateTo) {\r\n            //get amount and convert to denominate addr;\r\n            if (token0 != SFToken) {\r\n                (myreserve0, ) = quote(uniPool.token0(), denominateTo, myreserve0, exchange);\r\n                \r\n            } else {\r\n                myreserve0 = 0;\r\n            }\r\n        }\r\n\r\n        if (uniPool.token1() != denominateTo) {\r\n            //get amount and convert to denominate addr;\r\n            if (token1 != SFToken) {\r\n                (myreserve1, ) = quote(uniPool.token1(), denominateTo, myreserve1, exchange);\r\n            } else {\r\n                myreserve1 = 0;\r\n            }\r\n        }\r\n        return (myreserve0, myreserve1);\r\n    }\r\n\r\n    function getTotalValue() public view returns (uint256) {\r\n        uint256 totalReserve = 0;\r\n\r\n        for (uint256 i = 0; i < uniLen; i++) {\r\n            address uniAddress = uniPools[i];\r\n            \r\n            if (uniAddress != address(0)) {\r\n                IUniswapV2Pair uniPool = IUniswapV2Pair(uniAddress);\r\n                (uint256 myreserve0, uint256 myreserve1) = getDenominatedValue(\r\n                    uniPool\r\n                );\r\n\r\n                totalReserve = totalReserve.add(myreserve0);\r\n                totalReserve = totalReserve.add(myreserve1);\r\n            }\r\n        }\r\n\r\n        totalReserve = totalReserve.add(getExternalValue());\r\n\r\n        return totalReserve;\r\n    }\r\n\r\n    function addUni(address pool) public onlyVoter {\r\n        uniPools[uniLen] = pool;\r\n        uniLen++;\r\n    }\r\n\r\n    function delUni(uint256 i) external onlyVoter {\r\n        uniPools[i] = address(0);\r\n    }\r\n\r\n    function addExt(address pool) public onlyVoter {\r\n        externalPools[extLen] = pool;\r\n        extLen++;\r\n    }\r\n\r\n    function delExt(uint256 i) external onlyVoter {\r\n        externalPools[i] = address(0);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogBurnGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spendAmount\",\"type\":\"uint256\"}],\"name\":\"LogChiToppedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"LogFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"LogFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogMintTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_NewSFToken\",\"type\":\"address\"}],\"name\":\"LogSFTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Manager\",\"type\":\"address\"}],\"name\":\"LogValueManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogVotedExtPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogVotedUniPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Voter\",\"type\":\"address\"}],\"name\":\"LogVoterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NoDirectQuote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NoWETHQuote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ValueManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract ICHI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"delExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"delUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominateTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"enum XChanger.Exchange\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"getDenominatedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExternalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"getHolderPc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"getUniBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"getUniReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_extPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sfToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneSplitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum XChanger.Exchange\",\"name\":\"useExchange\",\"type\":\"uint8\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reverseQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum XChanger.Exchange\",\"name\":\"_exchange\",\"type\":\"uint8\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NewSFToken\",\"type\":\"address\"}],\"name\":\"setSFToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ValueManager\",\"type\":\"address\"}],\"name\":\"setValueManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votedChi\",\"type\":\"uint256\"}],\"name\":\"setVotedChi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setVotedExtPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votedFee\",\"type\":\"uint256\"}],\"name\":\"setVotedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setVotedUniPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum XChanger.Exchange\",\"name\":\"useExchange\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"slipProtect\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"topUpChi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"transferTokenBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedChi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedExtPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votedUniPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ValueHolder","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://df94d61f9d08ea5f5288be488eed92ce0c324ddc5aaf442873f668ef36d3fbc6"}]}