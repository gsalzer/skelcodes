{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-04\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-10-04\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-10-01\r\n*/\r\n\r\npragma solidity 0.6.3;\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// MasterChef is the master of Lef. He can make Lef and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once Lef is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract MasterChef is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n\t\tuint256 pid;\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n\t\tuint256 reward;\r\n        uint256 rewardPaid; \r\n\t\tuint256 updateTime;\r\n\t\tuint256 userRewardPerTokenPaid;\r\n    }\r\n\t// Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n\t\r\n\t\r\n\t\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. Lefs to distribute per block.\r\n        uint256 lastRewardTime;  // Last block number that Lefs distribution occurs.\r\n        uint256 accLefPerShare; // Accumulated Lefs per share, times 1e18. See below.\r\n\t\tuint256 totalPool;\r\n    }\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n\t\r\n\r\n\tstruct VipPoolInfo {\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. Lefs to distribute per block.\r\n        uint256 lastTime;  // Last block number that Lefs distribution occurs.\r\n        uint256 rewardPerTokenStored; // Accumulated Lefs per share, times 1e18. See below.\r\n\t\tuint256 vipNumber;\r\n    }\r\n\r\n\tmapping(uint256 => VipPoolInfo) public vipPoolInfo;\r\n    \r\n\tstruct User {\r\n        uint id; \r\n        address referrer; \r\n\r\n\t\tuint256[] referAmount;\r\n\r\n\t\tuint256 referReward;\r\n\r\n        uint256 totalReward;\r\n\t\r\n\t\tuint256 referRewardPerTokenPaid;\r\n\r\n        uint256 vip;\r\n    }\t\r\n\tmapping(address => User) public users;\r\n\t\r\n\r\n\tuint public lastUserId = 2;\r\n\tmapping(uint256 => address) public regisUser;\r\n\r\n\tuint256[] DURATIONS =[3 days, 10 days, 22 days]; \r\n\t\r\n\t\r\n\t\r\n\r\n\tbool initialized = false;\r\n\r\n    //uint256 public initreward = 1250*1e18;\r\n\r\n    uint256 public starttime = 1599829200;//秒\r\n\r\n    uint256 public periodFinish = 0;\r\n\r\n    uint256 public rewardRate = 0;\r\n\r\n    uint256 public totalMinted = 0;\r\n\r\n\tuint256 public drawPending_threshold = 2000 * 10e18;\r\n\r\n\r\n\r\n\t\r\n\r\n\tmapping(uint => uint256) public vipLevel;\t\r\n\tuint32 vipLevalLength = 0;\r\n\r\n\r\n\t//The Lef TOKEN!\r\n\t//  IERC20 public lef = IERC20(0x54CF703014A82B4FF7E9a95DD45e453e1Ba13eb1);\r\n    IERC20 public lef ;\r\n\r\n\r\n\r\n\taddress public defaultReferAddr = address(0xCfCe2a772ae87c5Fae474b2dE0324ee19C2c145f);\r\n\t\r\n\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.总权重\r\n    uint256 public totalAllocPoint = 0;\r\n    // Bonus muliplier for early lef makers.早期挖矿的额外奖励\r\n    uint256 public constant BONUS_MULTIPLIER = 3;\r\n\r\n\r\n\r\n\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n\r\n \r\n    function initContract (IERC20 _lef,uint256 _rewardRate,uint256 _starttime,uint256 _periodFinish,address _defaultReferAddr) public onlyOwner{\t\r\n\t\trequire(initialized == false,\"has initialized\");\r\n        lef = _lef;\r\n\t\trewardRate = _rewardRate;\r\n\t\tstarttime = _starttime;\r\n\t\tperiodFinish = _periodFinish;\r\n\t\tdefaultReferAddr =  _defaultReferAddr;\r\n\t\r\n\t\tUser memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            referAmount:new uint256[](2),\r\n\t\t\treferReward:0,\r\n\t\t\ttotalReward:0,\r\n\t\t\treferRewardPerTokenPaid:0,\r\n\t\t\tvip:0\r\n        });\t\t\r\n\t\tusers[defaultReferAddr] = user;\t\r\n\t\t\r\n\t\tregisUser[1] = \tdefaultReferAddr;\r\n\t\tinitialized = true;\t\r\n    }\r\n\r\n\r\n\t\r\n\tfunction setVipLevel(uint level,uint256 amount) public onlyOwner {\r\n\r\n\t\tif(vipLevalLength < 3){\r\n\t\t\r\n\t\t\tvipLevalLength++;\r\n\t\t\r\n    \t//\tuint256 vip1 = 0;\r\n\t    //   uint256 vip2 = 0;\r\n\t\t//\tuint256 vip3 = 0;\r\n\t\t//  \r\n\t\t//\tfor(uint i = 1;i < vipLevalLength;i++){\r\n\t\t//\t\taddress regAddr = regisUser[i];\r\n\t\t//\t\tuint256 vip = getVipLeval(regAddr);\r\n\t\t//\t\tif(vip == 1){\r\n\t\t//\t\t    vip1 ++;\r\n\t\t//\t\t}else if(vip == 2){\r\n\t\t//\t\t    vip2 ++;\r\n\t\t//\t\t}else if(vip == 3){\r\n\t\t//\t\t    vip3 ++;\r\n\t\t//\t\t}\r\n\t\t//\t\t\r\n\t\t//\t}\r\n\t\t//\tvipPoolInfo[1].vipNumber = vip1;\r\n\t\t//\tvipPoolInfo[2].vipNumber = vip2;\r\n\t\t//\tvipPoolInfo[3].vipNumber = vip3;\r\n\t\t//\tfor(uint i = 1;i < vipLevalLength;i++){\r\n\t\t//\t\tupdateVipPool(regisUser[i]);\r\n\t\t//\t}\r\n\t\t}\r\n\t\tvipLevel[level] = amount;\r\n\t\t\r\n\t}\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\t\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n\t\treturn (users[user].id != 0);\r\n    }\r\n\t\r\n\r\n\t\r\n\tfunction registrationExt(address referrerAddress) external {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n       //require(msg.value == 0.05 ether, \"registration cost 0.05\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n\t\trequire(size == 0, \"cannot be a contract\");\r\n\r\n        \r\n \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n\t\t\treferAmount:new uint256[](2),\r\n\t\t\ttotalReward:0,\r\n\t\t\treferReward:0,\r\n\t\t\treferRewardPerTokenPaid:0,\r\n\t\t\tvip:0\r\n        });\r\n\t\t\r\n\t\tregisUser[lastUserId] = userAddress;\r\n        \r\n        users[userAddress] = user;\r\n\t\t\r\n        lastUserId++;\r\n        \r\n        emit  Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n\t\r\n\tfunction setDrawReferThreshold(uint256 _threshold) public onlyOwner{\r\n\t\tdrawPending_threshold = _threshold;\r\n\t}\r\n\r\n\tfunction drawReferPending() public{\r\n\t\trequire(isUserExists(msg.sender), \"user exists\");\r\n\t\t\r\n\r\n\t\trequire(getAllDeposit(msg.sender) > drawPending_threshold,\"must mt 2000 * 1e18\");\r\n\r\n\r\n\t\tuint256 pengdingReward = 0;\r\n\r\n\t\tuint256 vip = getVipLevel(msg.sender);\r\n\r\n\t\tif(vip >0){\t\t\r\n\t\t\tVipPoolInfo storage vipPool = vipPoolInfo[vip];\r\n\t\t\tUser storage user = users[msg.sender];\r\n\t\t\tuint256 rewardPerTokenStored = vipPool.rewardPerTokenStored;\r\n\t\t\tuint256 lpSupply = vipPool.vipNumber;\r\n\t\t\tif (block.timestamp > vipPool.lastTime && lpSupply != 0) {\r\n\t\t\t\tuint256 multiplier = getMultiplier(vipPool.lastTime, block.timestamp);\r\n\t\t\t\tuint256 lefReward = multiplier.mul(rewardRate).mul(vipPool.allocPoint).div(totalAllocPoint);\t\t\t\t\r\n\t\t\t\trewardPerTokenStored = rewardPerTokenStored.add(lefReward.div(lpSupply));\r\n\t\t\t}\t\t\t\t\r\n\t\t\t pengdingReward = rewardPerTokenStored.sub(user.referRewardPerTokenPaid).add(users[msg.sender].referReward);\r\n\t\t\t safeLefTransfer(msg.sender, pengdingReward);\r\n\t\t\t users[msg.sender].referReward = 0;\r\n\t\t\t users[msg.sender].totalReward += pengdingReward;\r\n\t\t\t user.referRewardPerTokenPaid = rewardPerTokenStored;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//\r\n\tfunction getReferReward(address _referrer) public view returns(uint256){\r\n\t//\trequire(isUserExists(_referrer), \"user exists\");\r\n\t\tuint256 pengdingReward = 0;\r\n\t\tif(!isUserExists(_referrer)){\r\n\t\t  return pengdingReward;\r\n\t\t}\r\n\t\tuint256 vip = getVipLevel(_referrer);\r\n\t\tpengdingReward = users[_referrer].referReward;\r\n\t\tif(vip >0){\t\t\r\n\r\n\t\t\tVipPoolInfo storage vipPool = vipPoolInfo[vip];\r\n\t\t\tUser storage user = users[_referrer];\r\n\t\t\tuint256 rewardPerTokenStored = vipPool.rewardPerTokenStored;\r\n\t\t\tuint256 lpSupply = vipPool.vipNumber;\r\n\t\t\tif (block.timestamp > vipPool.lastTime && lpSupply != 0) {\r\n\t\t\t\tuint256 multiplier = getMultiplier(vipPool.lastTime, block.timestamp);\r\n\t\t\t\tuint256 lefReward = multiplier.mul(rewardRate).mul(vipPool.allocPoint).div(totalAllocPoint);\t\t\t\t\r\n\t\t\t\trewardPerTokenStored = rewardPerTokenStored.add(lefReward.div(lpSupply));\r\n\t\t\t}\t\t\t\t\r\n\t\t\treturn rewardPerTokenStored.sub(user.referRewardPerTokenPaid).add(pengdingReward);\r\n\t\t}\r\n\t\treturn pengdingReward;\r\n\t}\r\n\t\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function addLp(uint256 _allocPoint, IERC20 _lpToken) public onlyOwner {   \r\n        uint256 lastRewardTime = block.timestamp > starttime ? block.timestamp : starttime;\r\n        //totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardTime: lastRewardTime,\r\n            accLefPerShare: 0,\r\n\t\t\ttotalPool:0\r\n        }));\t\t\r\n    }\r\n\t\r\n\t\r\n\tfunction addVipPoolPoint(uint256 _vipIndex,uint256 _allocPoint) public onlyOwner {\r\n        uint256 lastTime = block.timestamp > starttime ? block.timestamp : starttime;\r\n\t\tvipPoolInfo[_vipIndex].allocPoint = _allocPoint;\r\n\t\tif(vipPoolInfo[_vipIndex].lastTime == 0){\r\n\t\t\tvipPoolInfo[_vipIndex].lastTime = lastTime;\r\n\t\t}\r\n       // vipPoolInfo[_vipIndex] =VipPoolInfo({\r\n      //      allocPoint: _allocPoint,\r\n        //    lastTime:lastTime,\r\n         //   rewardPerTokenStored:0,\r\n         //   vipNumber:0\r\n      //  }); \r\n    }\r\n\r\n    // Update the given pool's Lef allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\r\n\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\t\r\n\tfunction setTotalAllocPoint(uint256 _totalAllocPoint) public onlyOwner{\r\n\t\ttotalAllocPoint = _totalAllocPoint;\r\n\t}\r\n\t\r\n\tfunction setRewardRate(uint256 _rewardRate) public onlyOwner {\r\n\t\trewardRate = _rewardRate;\t\r\n\t} \r\n\r\n\t\r\n  \r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        if (_to <= periodFinish) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= periodFinish) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return periodFinish.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                _to.sub(periodFinish)\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    function pendingLef(uint256 _pid, address _user) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accLefPerShare = pool.accLefPerShare;\r\n        uint256 lpSupply = pool.totalPool;\r\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\r\n            uint256 multiplier =  getMultiplier(pool.lastRewardTime, block.timestamp);\r\n            uint256 lefReward = multiplier.mul(rewardRate).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accLefPerShare = pool.accLefPerShare.add(lefReward.mul(1e18).div(lpSupply));\r\n        }\r\n        return user.amount.mul((accLefPerShare).sub(user.userRewardPerTokenPaid)).div(1e18).add(user.reward);\r\n    }\r\n\t\r\n\r\n\tfunction pendingAllLef(address _user) public view returns (uint256) {\r\n\t\tuint256  result = 0;\r\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\r\n\t\t\tresult = result.add(pendingLef(i,_user));\r\n\t\t}\r\n        return result;\r\n    }\r\n\t\r\n\r\n\tfunction allLefAmount(address _user) public view returns (uint256) {\r\n\t\tuint256 result = 0;\r\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\r\n\t\t\tUserInfo storage user = userInfo[i][_user];\r\n\t\t\tresult = result.add(pendingLef(i,_user).add(user.rewardPaid));\r\n\t\t}\r\n        return result;\r\n    }\r\n\t\r\n\r\n\tfunction getAllDeposit(address _user) public view returns (uint256) {\r\n\t\tuint256 result = 0;\r\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\r\n\t\t\tUserInfo storage user = userInfo[i][_user];\t\t\r\n\t\t\tresult = result.add(user.amount);\r\n\t\t}\r\n        return result;\r\n    }\r\n\r\n\r\n\tfunction updateVipPool(address _user) internal {\r\n\t\taddress _referrer = users[_user].referrer;\r\n\t\tfor(uint i = 1;i < 3;i++){\r\n\t\t\tif(isUserExists(_referrer) && _referrer != address(0)){\r\n\t\t\t\tuint256 vip = getVipLevel(_referrer);\r\n\t\t\t\tuint256 _vip = users[_referrer].vip;\r\n\t\t\t\tuint256 skip_num ;\r\n\t\t\t\tif(vip > _vip){\r\n\t\t\t\t\tskip_num =  vip.sub(_vip);\r\n\t\t\t\t}else if(vip < _vip){\r\n\t\t\t\t\tskip_num =  _vip.sub(vip);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(skip_num != 0){ \r\n\t\t\t\t\tbool gloryBonus = false; \r\n\t\t\t\t\tif(i == 2 && users[_user].vip >= 2 && vip >= 2){\r\n\t\t\t\t\t\tgloryBonus == true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(_vip != 0){\r\n\t\t\t\t\t\tVipPoolInfo storage _vpInfo =  vipPoolInfo[_vip];\r\n\t\t\t\t\t\tif(vipPoolInfo[_vip].vipNumber != 0){\r\n\t\t\t\t\t\t\tuint256 _multiplier = getMultiplier(_vpInfo.lastTime, block.timestamp);\r\n\t\t\t\t\t\t\tuint256 _lefReward;\r\n\t\t\t\t\t\t\tif(gloryBonus){\r\n\t\t\t\t\t\t\t\t_lefReward = _multiplier.mul(rewardRate).mul((_vpInfo.allocPoint).add(totalAllocPoint.mul(3).div(100))).div(totalAllocPoint);\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t_lefReward = _multiplier.mul(rewardRate).mul(_vpInfo.allocPoint).div(totalAllocPoint);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttotalMinted = totalMinted.add(_lefReward);\r\n\t\t\t\t\t\t\t//lef.mint(address(this), _lefReward);\r\n\t\t\t\t\t\t\t_vpInfo.rewardPerTokenStored = _vpInfo.rewardPerTokenStored.add(_lefReward.div(_vpInfo.vipNumber));\r\n\t\t\t\t\t\t\tusers[_referrer].referReward = ((_vpInfo.rewardPerTokenStored).sub(users[_referrer].referRewardPerTokenPaid)).add(users[_referrer].referReward);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t_vpInfo.vipNumber -= 1;\t\r\n\t\t\t\t\t\t\tusers[_referrer].referRewardPerTokenPaid = _vpInfo.rewardPerTokenStored;\r\n\t\t\t\t\t\t\t_vpInfo.lastTime = block.timestamp;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(vip != 0){\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tVipPoolInfo storage vpInfo =  vipPoolInfo[vip];\r\n\t\t\t\t\t\tif(vpInfo.vipNumber != 0){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tuint256 multiplier = getMultiplier(vpInfo.lastTime, block.timestamp);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tuint256 lefReward;\r\n\t\t\t\t\t\t\tif(gloryBonus){\r\n\t\t\t\t\t\t\t\tlefReward = multiplier.mul(rewardRate).mul((vpInfo.allocPoint).add(totalAllocPoint.mul(3).div(100))).div(totalAllocPoint);\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tlefReward = multiplier.mul(rewardRate).mul(vpInfo.allocPoint).div(totalAllocPoint);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttotalMinted = totalMinted.add(lefReward);\r\n\t\t\t\t\t\t//lef.mint(address(this), lefReward);\r\n\t\t\t\t\t\t\tvpInfo.rewardPerTokenStored = vpInfo.rewardPerTokenStored.add(lefReward.div(vpInfo.vipNumber));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//if(vpInfo.rewardPerTokenStored != 0){\r\n\t\t\t\t\t\t//\tusers[_referrer].referReward = ((vpInfo.rewardPerTokenStored).sub(users[_referrer].referRewardPerTokenPaid)).add(users[_referrer].referReward);\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t\tvpInfo.vipNumber += 1;\r\n\r\n\t\t\t\t\t\tusers[_referrer].referRewardPerTokenPaid = vpInfo.rewardPerTokenStored;\r\n\t\t\t\t\t\tvpInfo.lastTime = block.timestamp;\t\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\t\r\n\t\t\t\tusers[_referrer].vip= vip;\t\r\n\t\t\t\t_referrer = users[_referrer].referrer;\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t}\t\t\r\n\t}\r\n\r\n\t\r\n\tfunction getVipLevel(address _user) public view returns(uint256){\r\n\t\tuint256 vip = 0;\r\n\t\tif(isUserExists(_user)){\r\n\t\t\tuint256 directReferAmount = users[_user].referAmount[0];\r\n\t\t//\tuint256 indirectReferAmount = users[_user].referAmount[1];\r\n\t\t\tfor(uint256 i = 1;i<=3;i++){\r\n\t\t\t\tif(directReferAmount < vipLevel[i]){\r\n\t\t\t\t\treturn vip;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvip = i;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn vip;\r\n\t}\r\n\r\n\tfunction getReferAmount(address _user,uint256 _index) public view returns(uint256){\r\n\t\tif(isUserExists(_user)){\r\n\t\t\treturn\tusers[_user].referAmount[_index];\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid,address _user) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTime) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.totalPool;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardTime = block.timestamp;\r\n            return;\r\n        }\r\n\t\tUserInfo storage user = userInfo[_pid][_user];\r\n\t\t\r\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\r\n        uint256 lefReward = multiplier.mul(rewardRate).mul(pool.allocPoint).div(totalAllocPoint);\r\n        totalMinted = totalMinted.add(lefReward);\r\n\r\n\r\n\t\t//lef.mint(address(this), lefReward);\r\n        pool.accLefPerShare = pool.accLefPerShare.add(lefReward.mul(1e18).div(lpSupply));\r\n\t\t\r\n\t\tuser.reward = user.amount.mul((pool.accLefPerShare).sub(user.userRewardPerTokenPaid)).div(1e18).add(user.reward);\r\n\t\t\r\n\t\t\r\n\t\tuser.userRewardPerTokenPaid = pool.accLefPerShare;\r\n        pool.lastRewardTime = block.timestamp;\r\n    }\r\n\r\n\r\n    // Deposit LP tokens to MasterChef for lef allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public checkStart checkhalve{\r\n\r\n\t\trequire(isUserExists(msg.sender), \"user don't exists\");\t\t\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid,msg.sender);\t\r\n\t\t\r\n        if(_amount > 0) {\r\n           pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n\t\t\tuser.updateTime = block.timestamp;\r\n\t\t\tuser.pid = _pid;\r\n\t\t\tpool.totalPool = pool.totalPool.add(_amount);   \t\t\r\n\t\r\n\t\t\taddress _referrer = users[msg.sender].referrer;\r\n\t\t\tfor(uint256 i = 0;i<2;i++){\t\t\t\t\r\n\t\t\t\tif(_referrer!= address(0) && isUserExists(_referrer)){\r\n\t\t\t\t\tusers[_referrer].referAmount[i] += _amount;\t\t\t\t\t\r\n\t\t\t\t\t_referrer = users[_referrer].referrer;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\t\r\n        }\r\n\t\t//\r\n\t\tupdateVipPool(msg.sender);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\t\r\n\r\n    function getReward(uint256 _pid) public  {\r\n\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 accLefPerShare = pool.accLefPerShare;\r\n        uint256 lpSupply = pool.totalPool;\r\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\r\n            uint256 multiplier =  getMultiplier(pool.lastRewardTime, block.timestamp);\r\n            uint256 lefReward = multiplier.mul(rewardRate).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accLefPerShare = pool.accLefPerShare.add(lefReward.mul(10e18).div(lpSupply));\r\n        }\r\n        uint256 reward = user.amount.mul((accLefPerShare).sub(user.userRewardPerTokenPaid)).div(1e18).add(user.reward);\r\n\t\r\n        if (reward > 0) {\r\n\t\t\tsafeLefTransfer(msg.sender, reward);\r\n\t\t\tuser.rewardPaid = user.rewardPaid.add(reward);\r\n\t\t\tuser.reward = 0;\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\t\t\r\n\t\tuser.userRewardPerTokenPaid = accLefPerShare;\r\n    }\r\n\t\r\n\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public checkhalve{\r\n\t\t\r\n\t\t\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tif(_pid != 0 && _pid < 3){\r\n\t\t\trequire(block.timestamp > DURATIONS[_pid].add(user.updateTime),\"\");\t\r\n\t\t}\r\n\t\t\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        \r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid,msg.sender);\r\n               \r\n\r\n\t\tsafeLefTransfer(msg.sender, user.reward);\r\n\t\tuser.reward = 0;\r\n\t\tuser.rewardPaid = user.rewardPaid.add(user.reward);\r\n\t\temit RewardPaid(msg.sender, user.rewardPaid);\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tpool.totalPool -= _amount;   \r\n\t\t\t\r\n\t\r\n\t\t\taddress _referrer = users[msg.sender].referrer;\r\n\t\t\tfor(uint256 i = 0;i<2;i++){\r\n\t\t\t\tif(_referrer!= address(0) && isUserExists(_referrer)){\r\n\t\t\t\t\tusers[_referrer].referAmount[i] -= _amount;\t\t\t\t\t\r\n\t\t\t\t\t_referrer = users[_referrer].referrer;\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n        }\r\n\t\tupdateVipPool(msg.sender);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n   // function emergencyWithdraw(uint256 _pid) public {\r\n   //     PoolInfo storage pool = poolInfo[_pid];\r\n    //    UserInfo storage user = userInfo[_pid][msg.sender];\r\n   //     pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n   //     emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n  //      user.amount = 0;\r\n   // }\r\n\r\n    // Safe lef transfer function, just in case if rounding error causes pool to not have enough lefs.\r\n    function safeLefTransfer(address _to, uint256 _amount) internal {\r\n        uint256 lefBal = lef.balanceOf(address(this));\r\n        if (_amount > lefBal) {\r\n            lef.transfer(_to, lefBal);\r\n        } else {\r\n            lef.transfer(_to, _amount);\r\n        }\r\n    }   \r\n\tmodifier checkhalve(){\r\n        if (totalMinted >= 500000 *1e18) {\r\n\t\t\t\r\n\t//\t\tinitreward = initreward.mul(50).div(100);\r\n           rewardRate = rewardRate.mul(90).div(100);\r\n\t\t   totalMinted = 0;\r\n    //        periodFinish = periodFinish.add(DURATION);\r\n           \r\n        }\r\n       _;\r\n   }\r\n\t\r\n\tmodifier checkStart(){\r\n       require(block.timestamp  > starttime,\"not start\");\r\n       _;\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vipIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"addVipPoolPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allLefAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultReferAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawPending_threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawReferPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"getReferReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVipLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_defaultReferAddr\",\"type\":\"address\"}],\"name\":\"initContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lef\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAllLef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingLef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLefPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"regisUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setDrawReferThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAllocPoint\",\"type\":\"uint256\"}],\"name\":\"setTotalAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setVipLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referRewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vipLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vipPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vipNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MasterChef","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a625adb445bfc3d979eb2e71be4b162b61f4b9cafff71a163adfffbd54a43163"}]}