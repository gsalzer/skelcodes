{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Barn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"./libraries/LibDiamond.sol\\\";\\nimport \\\"./libraries/LibOwnership.sol\\\";\\nimport \\\"./libraries/LibDiamondStorage.sol\\\";\\nimport \\\"./interfaces/IERC165.sol\\\";\\nimport \\\"./interfaces/IERC173.sol\\\";\\n\\ncontract Barn {\\n    constructor(IDiamondCut.FacetCut[] memory _diamondCut, address _owner) payable {\\n        require(_owner != address(0), \\\"owner must not be 0x0\\\");\\n\\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\\n        LibOwnership.setContractOwner(_owner);\\n\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        // adding ERC165 data\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        address facet = address(bytes20(ds.facets[msg.sig].facetAddress));\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return (0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"./LibDiamondStorage.sol\\\";\\n\\nlibrary LibDiamond {\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        uint256 selectorCount = LibDiamondStorage.diamondStorage().selectors.length;\\n\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            selectorCount = executeDiamondCut(selectorCount, _diamondCut[facetIndex]);\\n        }\\n\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    // executeDiamondCut takes one single FacetCut action and executes it\\n    // if FacetCutAction can't be identified, it reverts\\n    function executeDiamondCut(uint256 selectorCount, IDiamondCut.FacetCut memory cut) internal returns (uint256) {\\n        require(cut.functionSelectors.length > 0, \\\"LibDiamond: No selectors in facet to cut\\\");\\n\\n        if (cut.action == IDiamondCut.FacetCutAction.Add) {\\n            require(cut.facetAddress != address(0), \\\"LibDiamond: add facet address can't be address(0)\\\");\\n            enforceHasContractCode(cut.facetAddress, \\\"LibDiamond: add facet must have code\\\");\\n\\n            return _handleAddCut(selectorCount, cut);\\n        }\\n\\n        if (cut.action == IDiamondCut.FacetCutAction.Replace) {\\n            require(cut.facetAddress != address(0), \\\"LibDiamond: remove facet address can't be address(0)\\\");\\n            enforceHasContractCode(cut.facetAddress, \\\"LibDiamond: remove facet must have code\\\");\\n\\n            return _handleReplaceCut(selectorCount, cut);\\n        }\\n\\n        if (cut.action == IDiamondCut.FacetCutAction.Remove) {\\n            require(cut.facetAddress == address(0), \\\"LibDiamond: remove facet address must be address(0)\\\");\\n\\n            return _handleRemoveCut(selectorCount, cut);\\n        }\\n\\n        revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n    }\\n\\n    // _handleAddCut executes a cut with the type Add\\n    // it reverts if the selector already exists\\n    function _handleAddCut(uint256 selectorCount, IDiamondCut.FacetCut memory cut) internal returns (uint256) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        for (uint256 selectorIndex; selectorIndex < cut.functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = cut.functionSelectors[selectorIndex];\\n\\n            address oldFacetAddress = ds.facets[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\n            ds.facets[selector] = LibDiamondStorage.Facet(\\n                cut.facetAddress,\\n                uint16(selectorCount)\\n            );\\n            ds.selectors.push(selector);\\n\\n            selectorCount++;\\n        }\\n\\n        return selectorCount;\\n    }\\n\\n    // _handleReplaceCut executes a cut with the type Replace\\n    // it does not allow replacing immutable functions\\n    // it does not allow replacing with the same function\\n    // it does not allow replacing a function that does not exist\\n    function _handleReplaceCut(uint256 selectorCount, IDiamondCut.FacetCut memory cut) internal returns (uint256) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        for (uint256 selectorIndex; selectorIndex < cut.functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = cut.functionSelectors[selectorIndex];\\n\\n            address oldFacetAddress = ds.facets[selector].facetAddress;\\n\\n            // only useful if immutable functions exist\\n            require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n            require(oldFacetAddress != cut.facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n\\n            // replace old facet address\\n            ds.facets[selector].facetAddress = cut.facetAddress;\\n        }\\n\\n        return selectorCount;\\n    }\\n\\n    // _handleRemoveCut executes a cut with the type Remove\\n    // for efficiency, the selector to be deleted is replaced with the last one and then the last one is popped\\n    // it reverts if the function doesn't exist or it's immutable\\n    function _handleRemoveCut(uint256 selectorCount, IDiamondCut.FacetCut memory cut) internal returns (uint256) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        for (uint256 selectorIndex; selectorIndex < cut.functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = cut.functionSelectors[selectorIndex];\\n\\n            LibDiamondStorage.Facet memory oldFacet = ds.facets[selector];\\n\\n            require(oldFacet.facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n            require(oldFacet.facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function.\\\");\\n\\n            // replace selector with last selector\\n            if (oldFacet.selectorPosition != selectorCount - 1) {\\n                bytes4 lastSelector = ds.selectors[selectorCount - 1];\\n                ds.selectors[oldFacet.selectorPosition] = lastSelector;\\n                ds.facets[lastSelector].selectorPosition = oldFacet.selectorPosition;\\n            }\\n\\n            // delete last selector\\n            ds.selectors.pop();\\n            delete ds.facets[selector];\\n\\n            selectorCount--;\\n        }\\n\\n        return selectorCount;\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but _calldata is not empty\\\");\\n            return;\\n        }\\n\\n        require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n        if (_init != address(this)) {\\n            enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        }\\n\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"LibDiamondCut: _init function reverted\\\");\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibOwnership.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\n\\nlibrary LibOwnership {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        address previousOwner = ds.contractOwner;\\n        require(previousOwner != _newOwner, \\\"Previous owner and new owner must be different\\\");\\n\\n        ds.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = LibDiamondStorage.diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() view internal {\\n        require(msg.sender == LibDiamondStorage.diamondStorage().contractOwner, \\\"Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == LibDiamondStorage.diamondStorage().contractOwner, \\\"Must be contract owner\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamondStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct Facet {\\n        address facetAddress;\\n        uint16 selectorPosition;\\n    }\\n\\n    struct DiamondStorage {\\n        // function selector => facet address and selector position in selectors array\\n        mapping(bytes4 => Facet) facets;\\n        bytes4[] selectors;\\n\\n        // ERC165\\n        mapping(bytes4 => bool) supportedInterfaces;\\n\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/facets/OwnershipFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport \\\"../libraries/LibOwnership.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\ncontract OwnershipFacet is IERC173 {\\n    function transferOwnership(address _newOwner) external override {\\n        LibOwnership.enforceIsContractOwner();\\n        LibOwnership.setContractOwner(_newOwner);\\n    }\\n\\n    function owner() external override view returns (address owner_) {\\n        owner_ = LibOwnership.contractOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondCutFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../libraries/LibOwnership.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibOwnership.enforceIsContractOwner();\\n\\n        uint256 selectorCount = LibDiamondStorage.diamondStorage().selectors.length;\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            FacetCut memory cut;\\n            cut.action = _diamondCut[facetIndex].action;\\n            cut.facetAddress = _diamondCut[facetIndex].facetAddress;\\n            cut.functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n\\n            selectorCount = LibDiamond.executeDiamondCut(selectorCount, cut);\\n        }\\n\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n\\n        LibDiamond.initializeDiamondCut(_init, _calldata);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondLoupeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 selectorCount = ds.selectors.length;\\n\\n        // create an array set to the maximum size possible\\n        facets_ = new Facet[](selectorCount);\\n\\n        // create an array for counting the number of selectors for each facet\\n        uint8[] memory numFacetSelectors = new uint8[](selectorCount);\\n\\n        // total number of facets\\n        uint256 numFacets;\\n\\n        // loop through function selectors\\n        for (uint256 selectorIndex; selectorIndex < selectorCount; selectorIndex++) {\\n            bytes4 selector = ds.selectors[selectorIndex];\\n            address facetAddress_ = ds.facets[selector].facetAddress;\\n            bool continueLoop = false;\\n\\n            // find the functionSelectors array for selector and add selector to it\\n            for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                if (facets_[facetIndex].facetAddress == facetAddress_) {\\n                    facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n                    // probably will never have more than 256 functions from one facet contract\\n                    require(numFacetSelectors[facetIndex] < 255);\\n                    numFacetSelectors[facetIndex]++;\\n                    continueLoop = true;\\n                    break;\\n                }\\n            }\\n\\n            // if functionSelectors array exists for selector then continue loop\\n            if (continueLoop) {\\n                continueLoop = false;\\n                continue;\\n            }\\n\\n            // create a new functionSelectors array for selector\\n            facets_[numFacets].facetAddress = facetAddress_;\\n            facets_[numFacets].functionSelectors = new bytes4[](selectorCount);\\n            facets_[numFacets].functionSelectors[0] = selector;\\n\\n            numFacetSelectors[numFacets] = 1;\\n            numFacets++;\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(facets_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory _facetFunctionSelectors) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        uint256 selectorCount = ds.selectors.length;\\n        uint256 numSelectors;\\n        _facetFunctionSelectors = new bytes4[](selectorCount);\\n\\n        // loop through function selectors\\n        for (uint256 selectorIndex; selectorIndex < selectorCount; selectorIndex++) {\\n            bytes4 selector = ds.selectors[selectorIndex];\\n            address facetAddress_ = ds.facets[selector].facetAddress;\\n            if (_facet == facetAddress_) {\\n                _facetFunctionSelectors[numSelectors] = selector;\\n                numSelectors++;\\n            }\\n        }\\n\\n        // Set the number of selectors in the array\\n        assembly {\\n            mstore(_facetFunctionSelectors, numSelectors)\\n        }\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\n        uint256 selectorCount = ds.selectors.length;\\n        // create an array set to the maximum size possible\\n        facetAddresses_ = new address[](selectorCount);\\n        uint256 numFacets;\\n\\n        // loop through function selectors\\n        for (uint256 selectorIndex; selectorIndex < selectorCount; selectorIndex++) {\\n            bytes4 selector = ds.selectors[selectorIndex];\\n            address facetAddress_ = ds.facets[selector].facetAddress;\\n            bool continueLoop = false;\\n\\n            // see if we have collected the address already and break out of loop if we have\\n            for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                if (facetAddress_ == facetAddresses_[facetIndex]) {\\n                    continueLoop = true;\\n                    break;\\n                }\\n            }\\n\\n            // continue loop if we already have the address\\n            if (continueLoop) {\\n                continueLoop = false;\\n                continue;\\n            }\\n\\n            // include address\\n            facetAddresses_[numFacets] = facetAddress_;\\n            numFacets++;\\n        }\\n\\n        // Set the number of facet addresses in the array\\n        assembly {\\n            mstore(facetAddresses_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets the facet address that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddress_ = ds.facets[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/ChangeRewardsFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/LibBarnStorage.sol\\\";\\nimport \\\"../libraries/LibOwnership.sol\\\";\\n\\ncontract ChangeRewardsFacet {\\n    function changeRewardsAddress(address _rewards) public {\\n        LibOwnership.enforceIsContractOwner();\\n\\n        LibBarnStorage.Storage storage ds = LibBarnStorage.barnStorage();\\n        ds.rewards = IRewards(_rewards);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibBarnStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IRewards.sol\\\";\\n\\nlibrary LibBarnStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"com.barnbridge.barn.storage\\\");\\n\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct Stake {\\n        uint256 timestamp;\\n        uint256 amount;\\n        uint256 expiryTimestamp;\\n        address delegatedTo;\\n    }\\n\\n    struct Storage {\\n        bool initialized;\\n\\n        // mapping of user address to history of Stake objects\\n        // every user action creates a new object in the history\\n        mapping(address => Stake[]) userStakeHistory;\\n\\n        // array of bond staked Checkpoint\\n        // deposits/withdrawals create a new object in the history (max one per block)\\n        Checkpoint[] bondStakedHistory;\\n\\n        // mapping of user address to history of delegated power\\n        // every delegate/stopDelegate call create a new checkpoint (max one per block)\\n        mapping(address => Checkpoint[]) delegatedPowerHistory;\\n\\n        IERC20 bond;\\n        IRewards rewards;\\n    }\\n\\n    function barnStorage() internal pure returns (Storage storage ds) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRewards {\\n    function registerUserAction(address user) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/BarnMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IRewards.sol\\\";\\n\\ncontract BarnMock {\\n    IRewards public r;\\n    uint256 public bondStaked;\\n    mapping(address => uint256) private balances;\\n\\n    function setRewards(address rewards) public {\\n        r = IRewards(rewards);\\n    }\\n\\n    function callRegisterUserAction(address user) public {\\n        return r.registerUserAction(user);\\n    }\\n\\n    function deposit(address user, uint256 amount) public {\\n        callRegisterUserAction(user);\\n\\n        balances[user] = balances[user] + amount;\\n        bondStaked = bondStaked + amount;\\n    }\\n\\n    function withdraw(address user, uint256 amount) public {\\n        require(balances[user] >= amount, \\\"insufficient balance\\\");\\n\\n        callRegisterUserAction(user);\\n\\n        balances[user] = balances[user] - amount;\\n        bondStaked = bondStaked - amount;\\n    }\\n\\n    function balanceOf(address user) public view returns (uint256) {\\n        return balances[user];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IBarn.sol\\\";\\n\\ncontract Rewards is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 constant decimals = 10 ** 18;\\n\\n    struct Pull {\\n        address source;\\n        uint256 startTs;\\n        uint256 endTs;\\n        uint256 totalDuration;\\n        uint256 totalAmount;\\n    }\\n\\n    Pull public pullFeature;\\n    bool public disabled;\\n    uint256 public lastPullTs;\\n\\n    uint256 public balanceBefore;\\n    uint256 public currentMultiplier;\\n\\n    mapping(address => uint256) public userMultiplier;\\n    mapping(address => uint256) public owed;\\n\\n    IBarn public barn;\\n    IERC20 public rewardToken;\\n\\n    event Claim(address indexed user, uint256 amount);\\n\\n    constructor(address _owner, address _token, address _barn) {\\n        require(_token != address(0), \\\"reward token must not be 0x0\\\");\\n        require(_barn != address(0), \\\"barn address must not be 0x0\\\");\\n\\n        transferOwnership(_owner);\\n\\n        rewardToken = IERC20(_token);\\n        barn = IBarn(_barn);\\n    }\\n\\n    // registerUserAction is called by the Barn every time the user does a deposit or withdrawal in order to\\n    // account for the changes in reward that the user should get\\n    // it updates the amount owed to the user without transferring the funds\\n    function registerUserAction(address user) public {\\n        require(msg.sender == address(barn), 'only callable by barn');\\n\\n        _calculateOwed(user);\\n    }\\n\\n    // claim calculates the currently owed reward and transfers the funds to the user\\n    function claim() public returns (uint256){\\n        _calculateOwed(msg.sender);\\n\\n        uint256 amount = owed[msg.sender];\\n        require(amount > 0, \\\"nothing to claim\\\");\\n\\n        owed[msg.sender] = 0;\\n\\n        rewardToken.transfer(msg.sender, amount);\\n\\n        // acknowledge the amount that was transferred to the user\\n        ackFunds();\\n\\n        emit Claim(msg.sender, amount);\\n\\n        return amount;\\n    }\\n\\n    // ackFunds checks the difference between the last known balance of `token` and the current one\\n    // if it goes up, the multiplier is re-calculated\\n    // if it goes down, it only updates the known balance\\n    function ackFunds() public {\\n        uint256 balanceNow = rewardToken.balanceOf(address(this));\\n\\n        if (balanceNow == 0 || balanceNow <= balanceBefore) {\\n            balanceBefore = balanceNow;\\n            return;\\n        }\\n\\n        uint256 totalStakedBond = barn.bondStaked();\\n        // if there's no bond staked, it doesn't make sense to ackFunds because there's nobody to distribute them to\\n        // and the calculation would fail anyways due to division by 0\\n        if (totalStakedBond == 0) {\\n            return;\\n        }\\n\\n        uint256 diff = balanceNow.sub(balanceBefore);\\n        uint256 multiplier = currentMultiplier.add(diff.mul(decimals).div(totalStakedBond));\\n\\n        balanceBefore = balanceNow;\\n        currentMultiplier = multiplier;\\n    }\\n\\n    // setupPullToken is used to setup the rewards system; only callable by contract owner\\n    // set source to address(0) to disable the functionality\\n    function setupPullToken(address source, uint256 startTs, uint256 endTs, uint256 amount) public {\\n        require(msg.sender == owner(), \\\"!owner\\\");\\n        require(!disabled, \\\"contract is disabled\\\");\\n\\n        if (pullFeature.source != address(0)) {\\n            require(source == address(0), \\\"contract is already set up, source must be 0x0\\\");\\n            disabled = true;\\n        } else {\\n            require(source != address(0), \\\"contract is not setup, source must be != 0x0\\\");\\n        }\\n\\n        if (source == address(0)) {\\n            require(startTs == 0, \\\"disable contract: startTs must be 0\\\");\\n            require(endTs == 0, \\\"disable contract: endTs must be 0\\\");\\n            require(amount == 0, \\\"disable contract: amount must be 0\\\");\\n        } else {\\n            require(endTs > startTs, \\\"setup contract: endTs must be greater than startTs\\\");\\n            require(amount > 0, \\\"setup contract: amount must be greater than 0\\\");\\n        }\\n\\n        pullFeature.source = source;\\n        pullFeature.startTs = startTs;\\n        pullFeature.endTs = endTs;\\n        pullFeature.totalDuration = endTs.sub(startTs);\\n        pullFeature.totalAmount = amount;\\n\\n        if (lastPullTs < startTs) {\\n            lastPullTs = startTs;\\n        }\\n    }\\n\\n    // setBarn sets the address of the BarnBridge Barn into the state variable\\n    function setBarn(address _barn) public {\\n        require(_barn != address(0), 'barn address must not be 0x0');\\n        require(msg.sender == owner(), '!owner');\\n\\n        barn = IBarn(_barn);\\n    }\\n\\n    // _pullToken calculates the amount based on the time passed since the last pull relative\\n    // to the total amount of time that the pull functionality is active and executes a transferFrom from the\\n    // address supplied as `pullTokenFrom`, if enabled\\n    function _pullToken() internal {\\n        if (\\n            pullFeature.source == address(0) ||\\n            block.timestamp < pullFeature.startTs\\n        ) {\\n            return;\\n        }\\n\\n        uint256 timestampCap = pullFeature.endTs;\\n        if (block.timestamp < pullFeature.endTs) {\\n            timestampCap = block.timestamp;\\n        }\\n\\n        if (lastPullTs >= timestampCap) {\\n            return;\\n        }\\n\\n        uint256 timeSinceLastPull = timestampCap.sub(lastPullTs);\\n        uint256 shareToPull = timeSinceLastPull.mul(decimals).div(pullFeature.totalDuration);\\n        uint256 amountToPull = pullFeature.totalAmount.mul(shareToPull).div(decimals);\\n\\n        lastPullTs = block.timestamp;\\n        rewardToken.transferFrom(pullFeature.source, address(this), amountToPull);\\n    }\\n\\n    // _calculateOwed calculates and updates the total amount that is owed to an user and updates the user's multiplier\\n    // to the current value\\n    // it automatically attempts to pull the token from the source and acknowledge the funds\\n    function _calculateOwed(address user) internal {\\n        _pullToken();\\n        ackFunds();\\n\\n        uint256 reward = _userPendingReward(user);\\n\\n        owed[user] = owed[user].add(reward);\\n        userMultiplier[user] = currentMultiplier;\\n    }\\n\\n    // _userPendingReward calculates the reward that should be based on the current multiplier / anything that's not included in the `owed[user]` value\\n    // it does not represent the entire reward that's due to the user unless added on top of `owed[user]`\\n    function _userPendingReward(address user) internal view returns (uint256) {\\n        uint256 multiplier = currentMultiplier.sub(userMultiplier[user]);\\n\\n        return barn.balanceOf(user).mul(multiplier).div(decimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBarn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/LibBarnStorage.sol\\\";\\n\\ninterface IBarn {\\n    // deposit allows a user to add more bond to his staked balance\\n    function deposit(uint256 amount) external;\\n\\n    // withdraw allows a user to withdraw funds if the balance is not locked\\n    function withdraw(uint256 amount) external;\\n\\n    // lock a user's currently staked balance until timestamp & add the bonus to his voting power\\n    function lock(uint256 timestamp) external;\\n\\n    // delegate allows a user to delegate his voting power to another user\\n    function delegate(address to) external;\\n\\n    // stopDelegate allows a user to take back the delegated voting power\\n    function stopDelegate() external;\\n\\n    // lock the balance of a proposal creator until the voting ends; only callable by DAO\\n    function lockCreatorBalance(address user, uint256 timestamp) external;\\n\\n    // balanceOf returns the current BOND balance of a user (bonus not included)\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    // balanceAtTs returns the amount of BOND that the user currently staked (bonus NOT included)\\n    function balanceAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // stakeAtTs returns the Stake object of the user that was valid at `timestamp`\\n    function stakeAtTs(address user, uint256 timestamp) external view returns (LibBarnStorage.Stake memory);\\n\\n    // votingPower returns the voting power (bonus included) + delegated voting power for a user at the current block\\n    function votingPower(address user) external view returns (uint256);\\n\\n    // votingPowerAtTs returns the voting power (bonus included) + delegated voting power for a user at a point in time\\n    function votingPowerAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // bondStaked returns the total raw amount of BOND staked at the current block\\n    function bondStaked() external view returns (uint256);\\n\\n    // bondStakedAtTs returns the total raw amount of BOND users have deposited into the contract\\n    // it does not include any bonus\\n    function bondStakedAtTs(uint256 timestamp) external view returns (uint256);\\n\\n    // delegatedPower returns the total voting power that a user received from other users\\n    function delegatedPower(address user) external view returns (uint256);\\n\\n    // delegatedPowerAtTs returns the total voting power that a user received from other users at a point in time\\n    function delegatedPowerAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // multiplierAtTs calculates the multiplier at a given timestamp based on the user's stake a the given timestamp\\n    // it includes the decay mechanism\\n    function multiplierAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // userLockedUntil returns the timestamp until the user's balance is locked\\n    function userLockedUntil(address user) external view returns (uint256);\\n\\n    // userDidDelegate returns the address to which a user delegated their voting power; address(0) if not delegated\\n    function userDelegatedTo(address user) external view returns (address);\\n\\n    // bondCirculatingSupply returns the current circulating supply of BOND\\n    function bondCirculatingSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/MulticallMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IBarn.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract MulticallMock {\\n    using SafeMath for uint256;\\n\\n    IBarn barn;\\n    IERC20 bond;\\n\\n    constructor(address _barn, address _bond) {\\n        barn = IBarn(_barn);\\n        bond = IERC20(_bond);\\n    }\\n\\n    function multiDelegate(uint256 amount, address user1, address user2) public {\\n        bond.approve(address(barn), amount);\\n\\n        barn.deposit(amount);\\n        barn.delegate(user1);\\n        barn.delegate(user2);\\n        barn.delegate(user1);\\n    }\\n\\n    function multiDeposit(uint256 amount) public {\\n        bond.approve(address(barn), amount.mul(3));\\n\\n        barn.deposit(amount);\\n        barn.deposit(amount);\\n        barn.deposit(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ERC20Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mock is ERC20(\\\"ERC20Mock\\\", \\\"MCK\\\") {\\n    bool public transferFromCalled = false;\\n\\n    bool public transferCalled = false;\\n    address public transferRecipient = address(0);\\n    uint256 public transferAmount = 0;\\n\\n    function mint(address user, uint256 amount) public {\\n        _mint(user, amount);\\n    }\\n\\n    function burnFrom(address user, uint256 amount) public {\\n        _burn(user, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        transferFromCalled = true;\\n\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        transferCalled = true;\\n        transferRecipient = recipient;\\n        transferAmount = amount;\\n\\n        return super.transfer(recipient, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/BarnFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IBarn.sol\\\";\\nimport \\\"../libraries/LibBarnStorage.sol\\\";\\nimport \\\"../libraries/LibOwnership.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract BarnFacet {\\n    using SafeMath for uint256;\\n\\n    uint256 constant public MAX_LOCK = 365 days;\\n    uint256 constant BASE_MULTIPLIER = 1e18;\\n\\n    event Deposit(address indexed user, uint256 amount, uint256 newBalance);\\n    event Withdraw(address indexed user, uint256 amountWithdrew, uint256 amountLeft);\\n    event Lock(address indexed user, uint256 timestamp);\\n    event Delegate(address indexed from, address indexed to);\\n    event DelegatedPowerIncreased(address indexed from, address indexed to, uint256 amount, uint256 to_newDelegatedPower);\\n    event DelegatedPowerDecreased(address indexed from, address indexed to, uint256 amount, uint256 to_newDelegatedPower);\\n\\n    function initBarn(address _bond, address _rewards) public {\\n        require(_bond != address(0), \\\"BOND address must not be 0x0\\\");\\n\\n        LibBarnStorage.Storage storage ds = LibBarnStorage.barnStorage();\\n\\n        require(!ds.initialized, \\\"Barn: already initialized\\\");\\n        LibOwnership.enforceIsContractOwner();\\n\\n        ds.initialized = true;\\n\\n        ds.bond = IERC20(_bond);\\n        ds.rewards = IRewards(_rewards);\\n    }\\n\\n    // deposit allows a user to add more bond to his staked balance\\n    function deposit(uint256 amount) public {\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        LibBarnStorage.Storage storage ds = LibBarnStorage.barnStorage();\\n        uint256 allowance = ds.bond.allowance(msg.sender, address(this));\\n        require(allowance >= amount, \\\"Token allowance too small\\\");\\n\\n        // this must be called before the user's balance is updated so the rewards contract can calculate\\n        // the amount owed correctly\\n        if (address(ds.rewards) != address(0)) {\\n            ds.rewards.registerUserAction(msg.sender);\\n        }\\n\\n        uint256 newBalance = balanceOf(msg.sender).add(amount);\\n        _updateUserBalance(ds.userStakeHistory[msg.sender], newBalance);\\n        _updateLockedBond(bondStakedAtTs(block.timestamp).add(amount));\\n\\n        address delegatedTo = userDelegatedTo(msg.sender);\\n        if (delegatedTo != address(0)) {\\n            uint256 newDelegatedPower = delegatedPower(delegatedTo).add(amount);\\n            _updateDelegatedPower(ds.delegatedPowerHistory[delegatedTo], newDelegatedPower);\\n\\n            emit DelegatedPowerIncreased(msg.sender, delegatedTo, amount, newDelegatedPower);\\n        }\\n\\n        ds.bond.transferFrom(msg.sender, address(this), amount);\\n\\n        emit Deposit(msg.sender, amount, newBalance);\\n    }\\n\\n    // withdraw allows a user to withdraw funds if the balance is not locked\\n    function withdraw(uint256 amount) public {\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(userLockedUntil(msg.sender) <= block.timestamp, \\\"User balance is locked\\\");\\n\\n        uint256 balance = balanceOf(msg.sender);\\n        require(balance >= amount, \\\"Insufficient balance\\\");\\n\\n        LibBarnStorage.Storage storage ds = LibBarnStorage.barnStorage();\\n\\n        // this must be called before the user's balance is updated so the rewards contract can calculate\\n        // the amount owed correctly\\n        if (address(ds.rewards) != address(0)) {\\n            ds.rewards.registerUserAction(msg.sender);\\n        }\\n\\n        _updateUserBalance(ds.userStakeHistory[msg.sender], balance.sub(amount));\\n        _updateLockedBond(bondStakedAtTs(block.timestamp).sub(amount));\\n\\n        address delegatedTo = userDelegatedTo(msg.sender);\\n        if (delegatedTo != address(0)) {\\n            uint256 newDelegatedPower = delegatedPower(delegatedTo).sub(amount);\\n            _updateDelegatedPower(ds.delegatedPowerHistory[delegatedTo], newDelegatedPower);\\n\\n            emit DelegatedPowerDecreased(msg.sender, delegatedTo, amount, newDelegatedPower);\\n        }\\n\\n        ds.bond.transfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, amount, balance.sub(amount));\\n    }\\n\\n    // lock a user's currently staked balance until timestamp & add the bonus to his voting power\\n    function lock(uint256 timestamp) public {\\n        require(timestamp > block.timestamp, \\\"Timestamp must be in the future\\\");\\n        require(timestamp <= block.timestamp + MAX_LOCK, \\\"Timestamp too big\\\");\\n        require(balanceOf(msg.sender) > 0, \\\"Sender has no balance\\\");\\n\\n        LibBarnStorage.Storage storage ds = LibBarnStorage.barnStorage();\\n        LibBarnStorage.Stake[] storage checkpoints = ds.userStakeHistory[msg.sender];\\n        LibBarnStorage.Stake storage currentStake = checkpoints[checkpoints.length - 1];\\n\\n        require(timestamp > currentStake.expiryTimestamp, \\\"New timestamp lower than current lock timestamp\\\");\\n\\n        _updateUserLock(checkpoints, timestamp);\\n\\n        emit Lock(msg.sender, timestamp);\\n    }\\n\\n    function depositAndLock(uint256 amount, uint256 timestamp) public {\\n        deposit(amount);\\n        lock(timestamp);\\n    }\\n\\n    // delegate allows a user to delegate his voting power to another user\\n    function delegate(address to) public {\\n        require(msg.sender != to, \\\"Can't delegate to self\\\");\\n\\n        uint256 senderBalance = balanceOf(msg.sender);\\n        require(senderBalance > 0, \\\"No balance to delegate\\\");\\n\\n        LibBarnStorage.Storage storage ds = LibBarnStorage.barnStorage();\\n\\n        emit Delegate(msg.sender, to);\\n\\n        address delegatedTo = userDelegatedTo(msg.sender);\\n        if (delegatedTo != address(0)) {\\n            uint256 newDelegatedPower = delegatedPower(delegatedTo).sub(senderBalance);\\n            _updateDelegatedPower(ds.delegatedPowerHistory[delegatedTo], newDelegatedPower);\\n\\n            emit DelegatedPowerDecreased(msg.sender, delegatedTo, senderBalance, newDelegatedPower);\\n        }\\n\\n        if (to != address(0)) {\\n            uint256 newDelegatedPower = delegatedPower(to).add(senderBalance);\\n            _updateDelegatedPower(ds.delegatedPowerHistory[to], newDelegatedPower);\\n\\n            emit DelegatedPowerIncreased(msg.sender, to, senderBalance, newDelegatedPower);\\n        }\\n\\n        _updateUserDelegatedTo(ds.userStakeHistory[msg.sender], to);\\n    }\\n\\n    // stopDelegate allows a user to take back the delegated voting power\\n    function stopDelegate() public {\\n        return delegate(address(0));\\n    }\\n\\n    // balanceOf returns the current BOND balance of a user (bonus not included)\\n    function balanceOf(address user) public view returns (uint256) {\\n        return balanceAtTs(user, block.timestamp);\\n    }\\n\\n    // balanceAtTs returns the amount of BOND that the user currently staked (bonus NOT included)\\n    function balanceAtTs(address user, uint256 timestamp) public view returns (uint256) {\\n        LibBarnStorage.Stake memory stake = stakeAtTs(user, timestamp);\\n\\n        return stake.amount;\\n    }\\n\\n    // stakeAtTs returns the Stake object of the user that was valid at `timestamp`\\n    function stakeAtTs(address user, uint256 timestamp) public view returns (LibBarnStorage.Stake memory) {\\n        LibBarnStorage.Storage storage ds = LibBarnStorage.barnStorage();\\n        LibBarnStorage.Stake[] storage stakeHistory = ds.userStakeHistory[user];\\n\\n        if (stakeHistory.length == 0 || timestamp < stakeHistory[0].timestamp) {\\n            return LibBarnStorage.Stake(block.timestamp, 0, block.timestamp, address(0));\\n        }\\n\\n        uint256 min = 0;\\n        uint256 max = stakeHistory.length - 1;\\n\\n        if (timestamp >= stakeHistory[max].timestamp) {\\n            return stakeHistory[max];\\n        }\\n\\n        // binary search of the value in the array\\n        while (max > min) {\\n            uint256 mid = (max + min + 1) / 2;\\n            if (stakeHistory[mid].timestamp <= timestamp) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n\\n        return stakeHistory[min];\\n    }\\n\\n    // votingPower returns the voting power (bonus included) + delegated voting power for a user at the current block\\n    function votingPower(address user) public view returns (uint256) {\\n        return votingPowerAtTs(user, block.timestamp);\\n    }\\n\\n    // votingPowerAtTs returns the voting power (bonus included) + delegated voting power for a user at a point in time\\n    function votingPowerAtTs(address user, uint256 timestamp) public view returns (uint256) {\\n        LibBarnStorage.Stake memory stake = stakeAtTs(user, timestamp);\\n\\n        uint256 ownVotingPower;\\n\\n        // if the user delegated his voting power to another user, then he doesn't have any voting power left\\n        if (stake.delegatedTo != address(0)) {\\n            ownVotingPower = 0;\\n        } else {\\n            uint256 balance = stake.amount;\\n            uint256 multiplier = _stakeMultiplier(stake, timestamp);\\n            ownVotingPower = balance.mul(multiplier).div(BASE_MULTIPLIER);\\n        }\\n\\n        uint256 delegatedVotingPower = delegatedPowerAtTs(user, timestamp);\\n\\n        return ownVotingPower.add(delegatedVotingPower);\\n    }\\n\\n    // bondStaked returns the total raw amount of BOND staked at the current block\\n    function bondStaked() public view returns (uint256) {\\n        return bondStakedAtTs(block.timestamp);\\n    }\\n\\n    // bondStakedAtTs returns the total raw amount of BOND users have deposited into the contract\\n    // it does not include any bonus\\n    function bondStakedAtTs(uint256 timestamp) public view returns (uint256) {\\n        return _checkpointsBinarySearch(LibBarnStorage.barnStorage().bondStakedHistory, timestamp);\\n    }\\n\\n    // delegatedPower returns the total voting power that a user received from other users\\n    function delegatedPower(address user) public view returns (uint256) {\\n        return delegatedPowerAtTs(user, block.timestamp);\\n    }\\n\\n    // delegatedPowerAtTs returns the total voting power that a user received from other users at a point in time\\n    function delegatedPowerAtTs(address user, uint256 timestamp) public view returns (uint256) {\\n        return _checkpointsBinarySearch(LibBarnStorage.barnStorage().delegatedPowerHistory[user], timestamp);\\n    }\\n\\n    // same as multiplierAtTs but for the current block timestamp\\n    function multiplierOf(address user) public view returns (uint256) {\\n        return multiplierAtTs(user, block.timestamp);\\n    }\\n\\n    // multiplierAtTs calculates the multiplier at a given timestamp based on the user's stake a the given timestamp\\n    // it includes the decay mechanism\\n    function multiplierAtTs(address user, uint256 timestamp) public view returns (uint256) {\\n        LibBarnStorage.Stake memory stake = stakeAtTs(user, timestamp);\\n\\n        return _stakeMultiplier(stake, timestamp);\\n    }\\n\\n    // userLockedUntil returns the timestamp until the user's balance is locked\\n    function userLockedUntil(address user) public view returns (uint256) {\\n        LibBarnStorage.Stake memory c = stakeAtTs(user, block.timestamp);\\n\\n        return c.expiryTimestamp;\\n    }\\n\\n    // userDelegatedTo returns the address to which a user delegated their voting power; address(0) if not delegated\\n    function userDelegatedTo(address user) public view returns (address) {\\n        LibBarnStorage.Stake memory c = stakeAtTs(user, block.timestamp);\\n\\n        return c.delegatedTo;\\n    }\\n\\n    // _checkpointsBinarySearch executes a binary search on a list of checkpoints that's sorted chronologically\\n    // looking for the closest checkpoint that matches the specified timestamp\\n    function _checkpointsBinarySearch(LibBarnStorage.Checkpoint[] storage checkpoints, uint256 timestamp) internal view returns (uint256) {\\n        if (checkpoints.length == 0 || timestamp < checkpoints[0].timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 min = 0;\\n        uint256 max = checkpoints.length - 1;\\n\\n        if (timestamp >= checkpoints[max].timestamp) {\\n            return checkpoints[max].amount;\\n        }\\n\\n        // binary search of the value in the array\\n        while (max > min) {\\n            uint256 mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].timestamp <= timestamp) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n\\n        return checkpoints[min].amount;\\n    }\\n\\n    // _stakeMultiplier calculates the multiplier for the given stake at the given timestamp\\n    function _stakeMultiplier(LibBarnStorage.Stake memory stake, uint256 timestamp) internal view returns (uint256) {\\n        if (timestamp >= stake.expiryTimestamp) {\\n            return BASE_MULTIPLIER;\\n        }\\n\\n        uint256 diff = stake.expiryTimestamp - timestamp;\\n        if (diff >= MAX_LOCK) {\\n            return BASE_MULTIPLIER.mul(2);\\n        }\\n\\n        return BASE_MULTIPLIER.add(diff.mul(BASE_MULTIPLIER).div(MAX_LOCK));\\n    }\\n\\n    // _updateUserBalance manages an array of checkpoints\\n    // if there's already a checkpoint for the same timestamp, the amount is updated\\n    // otherwise, a new checkpoint is inserted\\n    function _updateUserBalance(LibBarnStorage.Stake[] storage checkpoints, uint256 amount) internal {\\n        if (checkpoints.length == 0) {\\n            checkpoints.push(LibBarnStorage.Stake(block.timestamp, amount, block.timestamp, address(0)));\\n        } else {\\n            LibBarnStorage.Stake storage old = checkpoints[checkpoints.length - 1];\\n\\n            if (old.timestamp == block.timestamp) {\\n                old.amount = amount;\\n            } else {\\n                checkpoints.push(LibBarnStorage.Stake(block.timestamp, amount, old.expiryTimestamp, old.delegatedTo));\\n            }\\n        }\\n    }\\n\\n    // _updateUserLock updates the expiry timestamp on the user's stake\\n    // it assumes that if the user already has a balance, which is checked for in the lock function\\n    // then there must be at least 1 checkpoint\\n    function _updateUserLock(LibBarnStorage.Stake[] storage checkpoints, uint256 expiryTimestamp) internal {\\n        LibBarnStorage.Stake storage old = checkpoints[checkpoints.length - 1];\\n\\n        if (old.timestamp < block.timestamp) {\\n            checkpoints.push(LibBarnStorage.Stake(block.timestamp, old.amount, expiryTimestamp, old.delegatedTo));\\n        } else {\\n            old.expiryTimestamp = expiryTimestamp;\\n        }\\n    }\\n\\n    // _updateUserDelegatedTo updates the delegateTo property on the user's stake\\n    // it assumes that if the user already has a balance, which is checked for in the delegate function\\n    // then there must be at least 1 checkpoint\\n    function _updateUserDelegatedTo(LibBarnStorage.Stake[] storage checkpoints, address to) internal {\\n        LibBarnStorage.Stake storage old = checkpoints[checkpoints.length - 1];\\n\\n        if (old.timestamp < block.timestamp) {\\n            checkpoints.push(LibBarnStorage.Stake(block.timestamp, old.amount, old.expiryTimestamp, to));\\n        } else {\\n            old.delegatedTo = to;\\n        }\\n    }\\n\\n    // _updateDelegatedPower updates the power delegated TO the user in the checkpoints history\\n    function _updateDelegatedPower(LibBarnStorage.Checkpoint[] storage checkpoints, uint256 amount) internal {\\n        if (checkpoints.length == 0 || checkpoints[checkpoints.length - 1].timestamp < block.timestamp) {\\n            checkpoints.push(LibBarnStorage.Checkpoint(block.timestamp, amount));\\n        } else {\\n            LibBarnStorage.Checkpoint storage old = checkpoints[checkpoints.length - 1];\\n            old.amount = amount;\\n        }\\n    }\\n\\n    // _updateLockedBond stores the new `amount` into the BOND locked history\\n    function _updateLockedBond(uint256 amount) internal {\\n        LibBarnStorage.Storage storage ds = LibBarnStorage.barnStorage();\\n\\n        if (ds.bondStakedHistory.length == 0 || ds.bondStakedHistory[ds.bondStakedHistory.length - 1].timestamp < block.timestamp) {\\n            ds.bondStakedHistory.push(LibBarnStorage.Checkpoint(block.timestamp, amount));\\n        } else {\\n            LibBarnStorage.Checkpoint storage old = ds.bondStakedHistory[ds.bondStakedHistory.length - 1];\\n            old.amount = amount;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"changeRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChangeRewardsFacet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}