{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/ISakeSwapPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ISakeSwapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function stoken() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    function dealSlippageWithIn(address[] calldata path, uint amountIn, address to, bool ifmint) external returns (uint amountOut);\r\n    function dealSlippageWithOut(address[] calldata path, uint amountOut, address to, bool ifmint) external returns (uint extra);\r\n    function getAmountOutMarket(address token, uint amountIn) external view returns (uint _out, uint t0Price);\r\n    function getAmountInMarket(address token, uint amountOut) external view returns (uint _in, uint t0Price);\r\n    function getAmountOutFinal(address token, uint256 amountIn) external view returns (uint256 amountOut, uint256 stokenAmount);\r\n    function getAmountInFinal(address token, uint256 amountOut) external view returns (uint256 amountIn, uint256 stokenAmount);\r\n    function getTokenMarketPrice(address token) external view returns (uint price);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/SakeToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// SakeToken with Governance.\r\ncontract SakeToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name = \"SakeToken\";\r\n    string private _symbol = \"SAKE\";\r\n    uint8 private _decimals = 18;\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (SakeMaster).\r\n    function mint(address _to, uint256 _amount) public onlyOwner {\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n\r\n    // Copied and modified from YAM code:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // Which is copied and modified from COMPOUND:\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping (address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n   /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"SAKE::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"SAKE::delegateBySig: invalid nonce\");\r\n        require(now <= expiry, \"SAKE::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(blockNumber < block.number, \"SAKE::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee)\r\n        internal\r\n    {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying SAKEs (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    )\r\n        internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"SAKE::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IMigratorChef.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IMigratorChef {\r\n    // Perform LP token migration from legacy UniswapV2 to SakeSwap.\r\n    // Take the current LP token address and return the new LP token address.\r\n    // Migrator should have full access to the caller's LP token.\r\n    // Return the new LP token address.\r\n    //\r\n    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\r\n    // SakeSwap must mint EXACTLY the same amount of SakeSwap LP tokens or\r\n    // else something bad will happen. Traditional UniswapV2 does not\r\n    // do that so be careful!\r\n    function migrate(IERC20 token) external returns (IERC20);\r\n}\r\n\r\n// File: contracts/SakeMaster.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// SakeMaster is the master of Sake. He can make Sake and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once SAKE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract SakeMaster is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of SAKEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accSakePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accSakePerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SAKEs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that SAKEs distribution occurs.\r\n        uint256 accSakePerShare; // Accumulated SAKEs per share, times 1e12. See below.\r\n    }\r\n\r\n    // The SAKE TOKEN!\r\n    SakeToken public sake;\r\n    // Dev address.\r\n    address public devaddr;\r\n    // Block number when beta test period ends.\r\n    uint256 public betaTestEndBlock;\r\n    // Block number when bonus SAKE period ends.\r\n    uint256 public bonusEndBlock;\r\n    // Block number when mint SAKE period ends.\r\n    uint256 public mintEndBlock;\r\n    // SAKE tokens created per block.\r\n    uint256 public sakePerBlock;\r\n    // Bonus muliplier for 5~20 days sake makers.\r\n    uint256 public constant BONUSONE_MULTIPLIER = 20;\r\n    // Bonus muliplier for 20~35 sake makers.\r\n    uint256 public constant BONUSTWO_MULTIPLIER = 2;\r\n    // beta test block num,about 5 days.\r\n    uint256 public constant BETATEST_BLOCKNUM = 35000;\r\n    // Bonus block num,about 15 days.\r\n    uint256 public constant BONUS_BLOCKNUM = 100000;\r\n    // mint end block num,about 30 days.\r\n    uint256 public constant MINTEND_BLOCKNUM = 200000;\r\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\r\n    IMigratorChef public migrator;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Record whether the pair has been added.\r\n    mapping(address => uint256) public lpTokenPID;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when SAKE mining starts.\r\n    uint256 public startBlock;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(\r\n        SakeToken _sake,\r\n        address _devaddr,\r\n        uint256 _sakePerBlock,\r\n        uint256 _startBlock\r\n    ) public {\r\n        sake = _sake;\r\n        devaddr = _devaddr;\r\n        sakePerBlock = _sakePerBlock;\r\n        startBlock = _startBlock;\r\n        betaTestEndBlock = startBlock.add(BETATEST_BLOCKNUM);\r\n        bonusEndBlock = startBlock.add(BONUS_BLOCKNUM).add(BETATEST_BLOCKNUM);\r\n        mintEndBlock = startBlock.add(MINTEND_BLOCKNUM).add(BETATEST_BLOCKNUM);\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        require(lpTokenPID[address(_lpToken)] == 0, \"SakeMaster:duplicate add.\");\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accSakePerShare: 0\r\n            })\r\n        );\r\n        lpTokenPID[address(_lpToken)] = poolInfo.length;\r\n    }\r\n\r\n    // Update the given pool's SAKE allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Set the migrator contract. Can only be called by the owner.\r\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    // Handover the saketoken mintage right.\r\n    function handoverSakeMintage(address newOwner) public onlyOwner {\r\n        sake.transferOwnership(newOwner);\r\n    }\r\n\r\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\r\n    function migrate(uint256 _pid) public {\r\n        require(address(migrator) != address(0), \"migrate: no migrator\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        IERC20 lpToken = pool.lpToken;\r\n        uint256 bal = lpToken.balanceOf(address(this));\r\n        lpToken.safeApprove(address(migrator), bal);\r\n        IERC20 newLpToken = migrator.migrate(lpToken);\r\n        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\r\n        pool.lpToken = newLpToken;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        uint256 _toFinal = _to > mintEndBlock ? mintEndBlock : _to;\r\n        if (_toFinal <= betaTestEndBlock) {\r\n             return _toFinal.sub(_from);\r\n        }else if (_from >= mintEndBlock) {\r\n            return 0;\r\n        } else if (_toFinal <= bonusEndBlock) {\r\n            if (_from < betaTestEndBlock) {\r\n                return betaTestEndBlock.sub(_from).add(_toFinal.sub(betaTestEndBlock).mul(BONUSONE_MULTIPLIER));\r\n            } else {\r\n                return _toFinal.sub(_from).mul(BONUSONE_MULTIPLIER);\r\n            }\r\n        } else {\r\n            if (_from < betaTestEndBlock) {\r\n                return betaTestEndBlock.sub(_from).add(bonusEndBlock.sub(betaTestEndBlock).mul(BONUSONE_MULTIPLIER)).add(\r\n                    (_toFinal.sub(bonusEndBlock).mul(BONUSTWO_MULTIPLIER)));\r\n            } else if (betaTestEndBlock <= _from && _from < bonusEndBlock) {\r\n                return bonusEndBlock.sub(_from).mul(BONUSONE_MULTIPLIER).add(_toFinal.sub(bonusEndBlock).mul(BONUSTWO_MULTIPLIER));\r\n            } else {\r\n                return _toFinal.sub(_from).mul(BONUSTWO_MULTIPLIER);\r\n            }\r\n        } \r\n    }\r\n\r\n    // View function to see pending SAKEs on frontend.\r\n    function pendingSake(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSakePerShare = pool.accSakePerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 sakeReward = multiplier.mul(sakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accSakePerShare = accSakePerShare.add(sakeReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accSakePerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        if (multiplier == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 sakeReward = multiplier.mul(sakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        sake.mint(devaddr, sakeReward.div(15));\r\n        sake.mint(address(this), sakeReward);\r\n        pool.accSakePerShare = pool.accSakePerShare.add(sakeReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Deposit LP tokens to SakeMaster for SAKE allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSakePerShare).div(1e12).sub(user.rewardDebt);\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accSakePerShare).div(1e12);\r\n        if (pending > 0) safeSakeTransfer(msg.sender, pending);\r\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from SakeMaster.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSakePerShare).div(1e12).sub(user.rewardDebt);\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accSakePerShare).div(1e12);\r\n        safeSakeTransfer(msg.sender, pending);\r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount > 0, \"emergencyWithdraw: not good\");\r\n        uint256 _amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Safe sake transfer function, just in case if rounding error causes pool to not have enough SAKEs.\r\n    function safeSakeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 sakeBal = sake.balanceOf(address(this));\r\n        if (_amount > sakeBal) {\r\n            sake.transfer(_to, sakeBal);\r\n        } else {\r\n            sake.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/SakeBar.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract SakeBar is ERC20(\"SakeBar\", \"xSAKE\"){\r\n    using SafeMath for uint256;\r\n    IERC20 public sake;\r\n\r\n    constructor(IERC20 _sake) public {\r\n        require(address(_sake) != address(0), \"invalid address\");\r\n        sake = _sake;\r\n    }\r\n\r\n    // Enter the bar. Pay some SAKEs. Earn some shares.\r\n    function enter(uint256 _amount) public {\r\n        uint256 totalSake = sake.balanceOf(address(this));\r\n        uint256 totalShares = totalSupply();\r\n        if (totalShares == 0 || totalSake == 0) {\r\n            _mint(msg.sender, _amount);\r\n        } else {\r\n            uint256 what = _amount.mul(totalShares).div(totalSake);\r\n            _mint(msg.sender, what);\r\n        }\r\n        sake.transferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    // Leave the bar. Claim back your SAKEs.\r\n    function leave(uint256 _share) public {\r\n        uint256 totalShares = totalSupply();\r\n        uint256 what = _share.mul(sake.balanceOf(address(this))).div(totalShares);\r\n        _burn(msg.sender, _share);\r\n        sake.transfer(msg.sender, what);\r\n    }\r\n}\r\n\r\n// File: contracts/STokenMaster.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract STokenMaster is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many  tokens the user has provided,LP+SToken*multiplier.\r\n        uint256 amountStoken; // How many S tokens the user has provided.\r\n        uint256 amountLPtoken; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of SAKEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accSakePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws S tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accSakePerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        IERC20 sToken; // Address of S token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SAKEs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that SAKEs distribution occurs.\r\n        uint256 accSakePerShare; // Accumulated SAKEs per share, times 1e12. See below.\r\n        uint256 burnSakeAmount;\r\n        bool withdrawSwitch; // if true,user can withdraw lp,otherwise can not\r\n    }\r\n\r\n    // The SAKE TOKEN!\r\n    SakeToken public sake;\r\n    address public admin;\r\n    // The address to receive LP token fee and S token fee.\r\n    address public tokenFeeReceiver;\r\n    uint256 public sakePerBlock;\r\n    // S token converted to LP token's multiplier\r\n    uint256 public multiplierSToken;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when SAKE mining starts.\r\n    uint256 public startBlock;\r\n    // Block number of distributing bonus SAKE period ends.\r\n    uint256 public bonusEndBlock;\r\n    // The block number when SAKE mining ends.\r\n    uint256 public endBlock;\r\n    // bonus block num, about 30 days.\r\n    uint256 public constant BONUS_BLOCKNUM = 192000;\r\n    // Bonus muliplier.\r\n    uint256 public constant BONUS_MULTIPLIER = 2;\r\n    // The ratio of withdraw lp fee (1%)\r\n    uint8 public feeRatio = 1;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP Tokens and S tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amountLPtoken, uint256 amountStoken);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amountLPtoken, uint256 amountStoken);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amountLPtoken, uint256 amountStoken);\r\n    event BurnSakeForPool(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    constructor(\r\n        SakeToken _sake,\r\n        address _admin,\r\n        address _tokenFeeReceiver,\r\n        uint256 _multiplierSToken,\r\n        uint256 _sakePerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock\r\n    ) public {\r\n        sake = _sake;\r\n        admin = _admin;\r\n        tokenFeeReceiver = _tokenFeeReceiver;\r\n        multiplierSToken = _multiplierSToken;\r\n        sakePerBlock = _sakePerBlock;\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n        bonusEndBlock = startBlock.add(BONUS_BLOCKNUM);\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function _checkValidity(IERC20 _lpToken, IERC20 _sToken) internal view {\r\n        for (uint256 i = 0; i < poolInfo.length; i++) {\r\n            require(poolInfo[i].lpToken != _lpToken && poolInfo[i].sToken != _sToken, \"pool exist\");\r\n        }\r\n    }\r\n\r\n    // Add a new lp token and S token to the pool. Can only be called by the admin.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        IERC20 _sToken,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"add:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        _checkValidity(_lpToken, _sToken);\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                sToken: _sToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accSakePerShare: 0,\r\n                burnSakeAmount: 0,\r\n                withdrawSwitch: false\r\n            })\r\n        );\r\n    }\r\n\r\n    // Update the given pool's SAKE allocation point. Can only be called by the admin.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"set:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // set withdraw switch. Can only be called by the admin.\r\n    function setWithdrawSwitch(\r\n        uint256 _pid,\r\n        bool _withdrawSwitch,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"s:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        poolInfo[_pid].withdrawSwitch = _withdrawSwitch;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        uint256 _toFinal = _to > endBlock ? endBlock : _to;\r\n        if (_from >= endBlock) {\r\n            return 0;\r\n        } else {\r\n            if (_toFinal <= bonusEndBlock) {\r\n                return _toFinal.sub(_from).mul(BONUS_MULTIPLIER);\r\n            } else {\r\n                if (_from < bonusEndBlock) {\r\n                    return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(_toFinal.sub(bonusEndBlock));\r\n                } else {\r\n                    return _toFinal.sub(_from);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // View function to see pending SAKEs on frontend.\r\n    function pendingSake(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSakePerShare = pool.accSakePerShare;\r\n        uint256 lpTokenSupply = pool.lpToken.balanceOf(address(this));\r\n        uint256 sTokenSupply = pool.sToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpTokenSupply != 0) {\r\n            uint256 totalSupply = lpTokenSupply.add(sTokenSupply.mul(multiplierSToken));\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 sakeReward = multiplier.mul(sakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accSakePerShare = accSakePerShare.add(sakeReward.mul(1e12).div(totalSupply));\r\n        }\r\n        return user.amount.mul(accSakePerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpTokenSupply = pool.lpToken.balanceOf(address(this));\r\n        uint256 sTokenSupply = pool.sToken.balanceOf(address(this));\r\n\r\n        if (lpTokenSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        if (multiplier == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 totalSupply = lpTokenSupply.add(sTokenSupply.mul(multiplierSToken));\r\n        uint256 sakeReward = multiplier.mul(sakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        if (sake.owner() == address(this)) {\r\n            sake.mint(address(this), sakeReward);\r\n        }\r\n        pool.accSakePerShare = pool.accSakePerShare.add(sakeReward.mul(1e12).div(totalSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Deposit LP tokens and S tokens to STokenMaster for SAKE allocation.\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amountlpToken,\r\n        uint256 _amountsToken\r\n    ) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (_amountlpToken <= 0) {\r\n            require(user.amountLPtoken > 0, \"deposit:invalid\");\r\n        }\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSakePerShare).div(1e12).sub(user.rewardDebt);\r\n        user.amountLPtoken = user.amountLPtoken.add(_amountlpToken);\r\n        user.amountStoken = user.amountStoken.add(_amountsToken);\r\n        user.amount = user.amount.add(_amountlpToken.add(_amountsToken.mul(multiplierSToken)));\r\n        user.rewardDebt = user.amount.mul(pool.accSakePerShare).div(1e12);\r\n        if (pending > 0) _safeSakeTransfer(msg.sender, pending);\r\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amountlpToken);\r\n        pool.sToken.safeTransferFrom(address(msg.sender), address(this), _amountsToken);\r\n        emit Deposit(msg.sender, _pid, _amountlpToken, _amountsToken);\r\n    }\r\n\r\n    // Withdraw LP tokens from STokenMaster.\r\n    function withdraw(\r\n        uint256 _pid,\r\n        uint256 _amountLPtoken,\r\n        uint256 _amountStoken\r\n    ) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(pool.withdrawSwitch, \"withdraw: not allow\");\r\n        require(\r\n            user.amountLPtoken >= _amountLPtoken && user.amountStoken >= _amountStoken,\r\n            \"withdraw: amount not enough\"\r\n        );\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSakePerShare).div(1e12).sub(user.rewardDebt);\r\n        user.amount = user.amount.sub(_amountLPtoken).sub(_amountStoken.mul(multiplierSToken));\r\n        user.amountLPtoken = user.amountLPtoken.sub(_amountLPtoken);\r\n        user.amountStoken = user.amountStoken.sub(_amountStoken);\r\n        user.rewardDebt = user.amount.mul(pool.accSakePerShare).div(1e12);\r\n        if (pending > 0) _safeSakeTransfer(msg.sender, pending);\r\n        uint256 lpTokenFee = _amountLPtoken.mul(feeRatio).div(100);\r\n        uint256 lpTokenToUser = _amountLPtoken.sub(lpTokenFee);\r\n        pool.lpToken.safeTransfer(tokenFeeReceiver, lpTokenFee);\r\n        pool.lpToken.safeTransfer(address(msg.sender), lpTokenToUser);\r\n        uint256 sTokenFee = _amountStoken.mul(feeRatio).div(100);\r\n        uint256 sTokenToUser = _amountStoken.sub(sTokenFee);\r\n        pool.sToken.safeTransfer(tokenFeeReceiver, sTokenFee);\r\n        pool.sToken.safeTransfer(address(msg.sender), sTokenToUser);\r\n        emit Withdraw(msg.sender, _pid, lpTokenToUser, sTokenToUser);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(pool.withdrawSwitch, \"withdraw: not allow\");\r\n        require(user.amountLPtoken > 0 || user.amountStoken > 0, \"withdraw: amount not enough\");\r\n        uint256 _amountLPtoken = user.amountLPtoken;\r\n        uint256 _amountStoken = user.amountStoken;\r\n        user.amount = 0;\r\n        user.amountLPtoken = 0;\r\n        user.amountStoken = 0;\r\n        user.rewardDebt = 0;\r\n        uint256 lpTokenToUser;\r\n        uint256 sTokenToUser;\r\n        if (_amountLPtoken > 0) {\r\n            uint256 lpTokenFee = _amountLPtoken.mul(feeRatio).div(100);\r\n            lpTokenToUser = _amountLPtoken.sub(lpTokenFee);\r\n            pool.lpToken.safeTransfer(tokenFeeReceiver, lpTokenFee);\r\n            pool.lpToken.safeTransfer(address(msg.sender), lpTokenToUser);\r\n        }\r\n        if (_amountStoken > 0) {\r\n            uint256 sTokenFee = _amountStoken.mul(feeRatio).div(100);\r\n            sTokenToUser = _amountStoken.sub(sTokenFee);\r\n            pool.sToken.safeTransfer(tokenFeeReceiver, sTokenFee);\r\n            pool.sToken.safeTransfer(address(msg.sender), sTokenToUser);\r\n        }\r\n        emit EmergencyWithdraw(msg.sender, _pid, lpTokenToUser, sTokenToUser);\r\n    }\r\n\r\n    // Safe sake transfer function, just in case if rounding error causes pool to not have enough SAKEs.\r\n    function _safeSakeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 sakeBal = sake.balanceOf(address(this));\r\n        if (_amount > sakeBal) {\r\n            sake.transfer(_to, sakeBal);\r\n        } else {\r\n            sake.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update admin address by owner.\r\n    function setAdmin(address _adminaddr) public onlyOwner {\r\n        require(_adminaddr != address(0), \"invalid address\");\r\n        admin = _adminaddr;\r\n    }\r\n\r\n    // update endBlock by owner\r\n    function setEndBlock(uint256 _endBlock) public {\r\n        require(msg.sender == admin, \"end:Call must come from admin.\");\r\n        require(endBlock > startBlock, \"invalid endBlock\");\r\n        endBlock = _endBlock;\r\n    }\r\n\r\n    // Burn sake increase pool allocpoint\r\n    function burnSakeForPool(uint256 _pid, uint256 _amount) public {\r\n        require(_amount > 0, \"invalid amount\");\r\n        require(sake.transferFrom(msg.sender, address(2), _amount), \"transfer sake fail\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        pool.burnSakeAmount = pool.burnSakeAmount.add(_amount);\r\n        emit BurnSakeForPool(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // set multiplier for S token converted to LP token\r\n    function setMultiplierSToken(uint256 _multiplier) public {\r\n        require(msg.sender == admin, \"m:Call must come from admin.\");\r\n        require(_multiplier > 0, \"invalid multiplier\");\r\n        multiplierSToken = _multiplier;\r\n    }\r\n\r\n    // set sakePerBlock\r\n    function setSakePerBlock(uint256 _sakePerBlock) public {\r\n        require(msg.sender == admin, \"p:Call must come from admin.\");\r\n        require(_sakePerBlock > 0, \"invalid sakePerBlock\");\r\n        sakePerBlock = _sakePerBlock;\r\n    }\r\n}\r\n\r\n// File: contracts/SakeMasterV2.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// SakeMaster is the master of Sake. He can make Sake and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once SAKE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract SakeMasterV2 is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 amountStoken; // How many S tokens the user has provided.\r\n        uint256 amountLPtoken; // How many LP tokens the user has provided.\r\n        uint256 pengdingSake; // record sake amount when user withdraw lp.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 lastWithdrawBlock; // user last withdraw time;\r\n\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of SAKEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accSakePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accSakePerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        IERC20 sToken; // Address of S token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SAKEs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that SAKEs distribution occurs.\r\n        uint256 accSakePerShare; // Accumulated SAKEs per share, times 1e12. See below.\r\n        uint256 multiplierSToken; // times 1e8;\r\n        bool sakeLockSwitch; // true-have sake withdraw interval,default 1 months;false-no withdraw interval,but have sake withdraw fee,default 10%\r\n    }\r\n\r\n    // The SAKE TOKEN!\r\n    SakeToken public sake;\r\n    // sakeMaker address.\r\n    address public sakeMaker;\r\n    // admin address.\r\n    address public admin;\r\n    // receive sake fee address\r\n    address public sakeFeeAddress;\r\n    // Block number when trade mining speed up period ends.\r\n    uint256 public tradeMiningSpeedUpEndBlock;\r\n    // Block number when phase II yield farming period ends.\r\n    uint256 public yieldFarmingIIEndBlock;\r\n    // Block number when trade mining period ends.\r\n    uint256 public tradeMiningEndBlock;\r\n    // trade mining speed end block num,about 1 months.\r\n    uint256 public tradeMiningSpeedUpEndBlockNum = 192000;\r\n    // phase II yield farming end block num,about 6 months.\r\n    uint256 public yieldFarmingIIEndBlockNum = 1152000;\r\n    // trade mining end block num,about 12 months.\r\n    uint256 public tradeMiningEndBlockNum = 2304000;\r\n    // SAKE tokens created per block for phase II yield farming.\r\n    uint256 public sakePerBlockYieldFarming = 5 * 10**18;\r\n    // SAKE tokens created per block for trade mining.\r\n    uint256 public sakePerBlockTradeMining = 10 * 10**18;\r\n    // Bonus muliplier for trade mining.\r\n    uint256 public constant BONUS_MULTIPLIER = 2;\r\n    // withdraw block num interval,about 1 months.\r\n    uint256 public withdrawInterval = 192000;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when SAKE mining starts.\r\n    uint256 public startBlock;\r\n    // The ratio of withdraw lp fee(default is 0%)\r\n    uint8 public lpFeeRatio = 0;\r\n    // The ratio of withdraw sake fee if no withdraw interval(default is 10%)\r\n    uint8 public sakeFeeRatio = 10;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens and S tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amountLPtoken, uint256 amountStoken);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amountLPtoken);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amountLPtoken);\r\n\r\n    constructor(\r\n        SakeToken _sake,\r\n        address _admin,\r\n        address _sakeMaker,\r\n        address _sakeFeeAddress,\r\n        uint256 _startBlock\r\n    ) public {\r\n        sake = _sake;\r\n        admin = _admin;\r\n        sakeMaker = _sakeMaker;\r\n        sakeFeeAddress = _sakeFeeAddress;\r\n        startBlock = _startBlock;\r\n        tradeMiningSpeedUpEndBlock = startBlock.add(tradeMiningSpeedUpEndBlockNum);\r\n        yieldFarmingIIEndBlock = startBlock.add(yieldFarmingIIEndBlockNum);\r\n        tradeMiningEndBlock = startBlock.add(tradeMiningEndBlockNum);\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // XXX DO NOT add the same LP token more than once.\r\n    function _checkValidity(IERC20 _lpToken, IERC20 _sToken) internal view {\r\n        for (uint256 i = 0; i < poolInfo.length; i++) {\r\n            require(poolInfo[i].lpToken != _lpToken && poolInfo[i].sToken != _sToken, \"pool exist\");\r\n        }\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the admin.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        uint256 _multiplierSToken,\r\n        IERC20 _lpToken,\r\n        IERC20 _sToken,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"add:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        _checkValidity(_lpToken, _sToken);\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                sToken: _sToken,\r\n                allocPoint: _allocPoint,\r\n                multiplierSToken: _multiplierSToken,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accSakePerShare: 0,\r\n                sakeLockSwitch: true\r\n            })\r\n        );\r\n    }\r\n\r\n    // Update the given pool's SAKE allocation point. Can only be called by the admin.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"set:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function setMultiplierSToken(\r\n        uint256 _pid,\r\n        uint256 _multiplierSToken,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"sms:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        poolInfo[_pid].multiplierSToken = _multiplierSToken;\r\n    }\r\n\r\n    // set sake withdraw switch. Can only be called by the admin.\r\n    function setSakeLockSwitch(\r\n        uint256 _pid,\r\n        bool _sakeLockSwitch,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"s:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        poolInfo[_pid].sakeLockSwitch = _sakeLockSwitch;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256 multipY, uint256 multipT) {\r\n        uint256 _toFinalY = _to > yieldFarmingIIEndBlock ? yieldFarmingIIEndBlock : _to;\r\n        uint256 _toFinalT = _to > tradeMiningEndBlock ? tradeMiningEndBlock : _to;\r\n        // phase II yield farming multiplier\r\n        if (_from >= yieldFarmingIIEndBlock) {\r\n            multipY = 0;\r\n        } else {\r\n            multipY = _toFinalY.sub(_from);\r\n        }\r\n        // trade mining multiplier\r\n        if (_from >= tradeMiningEndBlock) {\r\n            multipT = 0;\r\n        } else {\r\n            if (_toFinalT <= tradeMiningSpeedUpEndBlock) {\r\n                multipT = _toFinalT.sub(_from).mul(BONUS_MULTIPLIER);\r\n            } else {\r\n                if (_from < tradeMiningSpeedUpEndBlock) {\r\n                    multipT = tradeMiningSpeedUpEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                        _toFinalT.sub(tradeMiningSpeedUpEndBlock)\r\n                    );\r\n                } else {\r\n                    multipT = _toFinalT.sub(_from);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSakePerBlock(uint256 blockNum) public view returns (uint256) {\r\n        if (blockNum <= tradeMiningSpeedUpEndBlock) {\r\n            return sakePerBlockYieldFarming.add(sakePerBlockTradeMining.mul(BONUS_MULTIPLIER));\r\n        } else if (blockNum > tradeMiningSpeedUpEndBlock && blockNum <= yieldFarmingIIEndBlock) {\r\n            return sakePerBlockYieldFarming.add(sakePerBlockTradeMining);\r\n        } else if (blockNum > yieldFarmingIIEndBlock && blockNum <= tradeMiningEndBlock) {\r\n            return sakePerBlockTradeMining;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // Handover the saketoken mintage right.\r\n    function handoverSakeMintage(address newOwner) public onlyOwner {\r\n        sake.transferOwnership(newOwner);\r\n    }\r\n\r\n    // View function to see pending SAKEs on frontend.\r\n    function pendingSake(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSakePerShare = pool.accSakePerShare;\r\n        uint256 lpTokenSupply = pool.lpToken.balanceOf(address(this));\r\n        uint256 sTokenSupply = pool.sToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpTokenSupply != 0) {\r\n            uint256 totalSupply = lpTokenSupply.add(sTokenSupply.mul(pool.multiplierSToken).div(1e8));\r\n            (uint256 multipY, uint256 multipT) = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 sakeRewardY = multipY.mul(sakePerBlockYieldFarming).mul(pool.allocPoint).div(totalAllocPoint);\r\n            uint256 sakeRewardT = multipT.mul(sakePerBlockTradeMining).mul(pool.allocPoint).div(totalAllocPoint);\r\n            uint256 sakeReward = sakeRewardY.add(sakeRewardT);\r\n            accSakePerShare = accSakePerShare.add(sakeReward.mul(1e12).div(totalSupply));\r\n        }\r\n        return user.amount.mul(accSakePerShare).div(1e12).add(user.pengdingSake).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpTokenSupply = pool.lpToken.balanceOf(address(this));\r\n        uint256 sTokenSupply = pool.sToken.balanceOf(address(this));\r\n        if (lpTokenSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        (uint256 multipY, uint256 multipT) = getMultiplier(pool.lastRewardBlock, block.number);\r\n        if (multipY == 0 && multipT == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 sakeRewardY = multipY.mul(sakePerBlockYieldFarming).mul(pool.allocPoint).div(totalAllocPoint);\r\n        uint256 sakeRewardT = multipT.mul(sakePerBlockTradeMining).mul(pool.allocPoint).div(totalAllocPoint);\r\n        uint256 sakeReward = sakeRewardY.add(sakeRewardT);\r\n        uint256 totalSupply = lpTokenSupply.add(sTokenSupply.mul(pool.multiplierSToken).div(1e8));\r\n        if (sake.owner() == address(this)) {\r\n            sake.mint(address(this), sakeRewardT);\r\n        }\r\n        pool.accSakePerShare = pool.accSakePerShare.add(sakeReward.mul(1e12).div(totalSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Deposit LP tokens to SakeMasterV2 for SAKE allocation.\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amountlpToken,\r\n        uint256 _amountsToken\r\n    ) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (_amountlpToken <= 0 && user.pengdingSake == 0) {\r\n            require(user.amountLPtoken > 0, \"deposit:invalid\");\r\n        }\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSakePerShare).div(1e12).add(user.pengdingSake).sub(user.rewardDebt);\r\n        uint256 _originAmountStoken = user.amountStoken;\r\n        user.amountLPtoken = user.amountLPtoken.add(_amountlpToken);\r\n        user.amountStoken = user.amountStoken.add(_amountsToken);\r\n        user.amount = user.amount.add(_amountlpToken.add(_amountsToken.mul(pool.multiplierSToken).div(1e8)));\r\n        user.pengdingSake = pending;\r\n        if (pool.sakeLockSwitch) {\r\n            if (block.number > (user.lastWithdrawBlock.add(withdrawInterval))) {\r\n                user.lastWithdrawBlock = block.number;\r\n                user.pengdingSake = 0;\r\n                user.amountStoken = _amountsToken;\r\n                user.amount = user.amountLPtoken.add(_amountsToken.mul(pool.multiplierSToken).div(1e8));\r\n                pool.sToken.safeTransfer(address(1), _originAmountStoken);\r\n                if (pending > 0) {\r\n                    _safeSakeTransfer(msg.sender, pending);\r\n                }\r\n            }\r\n        } else {\r\n            user.lastWithdrawBlock = block.number;\r\n            user.pengdingSake = 0;\r\n            if (_amountlpToken == 0 && _amountsToken == 0) {\r\n                user.amountStoken = 0;\r\n                user.amount = user.amountLPtoken;\r\n                pool.sToken.safeTransfer(address(1), _originAmountStoken);\r\n            }\r\n            if (pending > 0) {\r\n                uint256 sakeFee = pending.mul(sakeFeeRatio).div(100);\r\n                uint256 sakeToUser = pending.sub(sakeFee);\r\n                _safeSakeTransfer(msg.sender, sakeToUser);\r\n                _safeSakeTransfer(sakeFeeAddress, sakeFee);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accSakePerShare).div(1e12);\r\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amountlpToken);\r\n        pool.sToken.safeTransferFrom(address(msg.sender), address(this), _amountsToken);\r\n        emit Deposit(msg.sender, _pid, _amountlpToken, _amountsToken);\r\n    }\r\n\r\n    // Withdraw LP tokens from SakeMaster.\r\n    function withdraw(uint256 _pid, uint256 _amountLPtoken) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amountLPtoken >= _amountLPtoken, \"withdraw: LP amount not enough\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSakePerShare).div(1e12).add(user.pengdingSake).sub(user.rewardDebt);\r\n        user.amountLPtoken = user.amountLPtoken.sub(_amountLPtoken);\r\n        uint256 _amountStoken = user.amountStoken;\r\n        user.amountStoken = 0;\r\n        user.amount = user.amountLPtoken;\r\n        user.rewardDebt = user.amount.mul(pool.accSakePerShare).div(1e12);\r\n        if (pool.sakeLockSwitch) {\r\n            if (block.number > (user.lastWithdrawBlock.add(withdrawInterval))) {\r\n                user.lastWithdrawBlock = block.number;\r\n                user.pengdingSake = 0;\r\n                _safeSakeTransfer(msg.sender, pending);\r\n            } else {\r\n                user.pengdingSake = pending;\r\n            }\r\n        } else {\r\n            user.lastWithdrawBlock = block.number;\r\n            user.pengdingSake = 0;\r\n            uint256 sakeFee = pending.mul(sakeFeeRatio).div(100);\r\n            uint256 sakeToUser = pending.sub(sakeFee);\r\n            _safeSakeTransfer(msg.sender, sakeToUser);\r\n            _safeSakeTransfer(sakeFeeAddress, sakeFee);\r\n        }\r\n        uint256 lpTokenFee;\r\n        uint256 lpTokenToUser;\r\n        if (block.number < tradeMiningEndBlock) {\r\n            lpTokenFee = _amountLPtoken.mul(lpFeeRatio).div(100);\r\n            pool.lpToken.safeTransfer(sakeMaker, lpTokenFee);\r\n        }\r\n        lpTokenToUser = _amountLPtoken.sub(lpTokenFee);\r\n        pool.lpToken.safeTransfer(address(msg.sender), lpTokenToUser);\r\n        pool.sToken.safeTransfer(address(1), _amountStoken);\r\n        emit Withdraw(msg.sender, _pid, lpTokenToUser);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amountLPtoken > 0, \"withdraw: LP amount not enough\");\r\n        uint256 _amountLPtoken = user.amountLPtoken;\r\n        uint256 _amountStoken = user.amountStoken;\r\n        user.amount = 0;\r\n        user.amountLPtoken = 0;\r\n        user.amountStoken = 0;\r\n        user.rewardDebt = 0;\r\n\r\n        uint256 lpTokenFee;\r\n        uint256 lpTokenToUser;\r\n        if (block.number < tradeMiningEndBlock) {\r\n            lpTokenFee = _amountLPtoken.mul(lpFeeRatio).div(100);\r\n            pool.lpToken.safeTransfer(sakeMaker, lpTokenFee);\r\n        }\r\n        lpTokenToUser = _amountLPtoken.sub(lpTokenFee);\r\n        pool.lpToken.safeTransfer(address(msg.sender), lpTokenToUser);\r\n        pool.sToken.safeTransfer(address(1), _amountStoken);\r\n        emit EmergencyWithdraw(msg.sender, _pid, lpTokenToUser);\r\n    }\r\n\r\n    // Safe sake transfer function, just in case if rounding error causes pool to not have enough SAKEs.\r\n    function _safeSakeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 sakeBal = sake.balanceOf(address(this));\r\n        if (_amount > sakeBal) {\r\n            sake.transfer(_to, sakeBal);\r\n        } else {\r\n            sake.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update admin address by owner.\r\n    function setAdmin(address _adminaddr) public onlyOwner {\r\n        require(_adminaddr != address(0), \"invalid address\");\r\n        admin = _adminaddr;\r\n    }\r\n\r\n    // Update sakeMaker address by admin.\r\n    function setSakeMaker(address _sakeMaker) public {\r\n        require(msg.sender == admin, \"sm:Call must come from admin.\");\r\n        require(_sakeMaker != address(0), \"invalid address\");\r\n        sakeMaker = _sakeMaker;\r\n    }\r\n\r\n    // Update sakeFee address by admin.\r\n    function setSakeFeeAddress(address _sakeFeeAddress) public {\r\n        require(msg.sender == admin, \"sf:Call must come from admin.\");\r\n        require(_sakeFeeAddress != address(0), \"invalid address\");\r\n        sakeFeeAddress = _sakeFeeAddress;\r\n    }\r\n\r\n    // update tradeMiningSpeedUpEndBlock by owner\r\n    function setTradeMiningSpeedUpEndBlock(uint256 _endBlock) public {\r\n        require(msg.sender == admin, \"tmsu:Call must come from admin.\");\r\n        require(_endBlock > startBlock, \"invalid endBlock\");\r\n        tradeMiningSpeedUpEndBlock = _endBlock;\r\n    }\r\n\r\n    // update yieldFarmingIIEndBlock by owner\r\n    function setYieldFarmingIIEndBlock(uint256 _endBlock) public {\r\n        require(msg.sender == admin, \"yf:Call must come from admin.\");\r\n        require(_endBlock > startBlock, \"invalid endBlock\");\r\n        yieldFarmingIIEndBlock = _endBlock;\r\n    }\r\n\r\n    // update tradeMiningEndBlock by owner\r\n    function setTradeMiningEndBlock(uint256 _endBlock) public {\r\n        require(msg.sender == admin, \"tm:Call must come from admin.\");\r\n        require(_endBlock > startBlock, \"invalid endBlock\");\r\n        tradeMiningEndBlock = _endBlock;\r\n    }\r\n\r\n    function setSakeFeeRatio(uint8 newRatio) public {\r\n        require(msg.sender == admin, \"sfr:Call must come from admin.\");\r\n        require(newRatio >= 0 && newRatio <= 100, \"invalid ratio\");\r\n        sakeFeeRatio = newRatio;\r\n    }\r\n\r\n    function setLpFeeRatio(uint8 newRatio) public {\r\n        require(msg.sender == admin, \"lp:Call must come from admin.\");\r\n        require(newRatio >= 0 && newRatio <= 100, \"invalid ratio\");\r\n        lpFeeRatio = newRatio;\r\n    }\r\n\r\n    function setWithdrawInterval(uint256 _blockNum) public {\r\n        require(msg.sender == admin, \"i:Call must come from admin.\");\r\n        withdrawInterval = _blockNum;\r\n    }\r\n\r\n    // set sakePerBlock phase II yield farming\r\n    function setSakePerBlockYieldFarming(uint256 _sakePerBlockYieldFarming, bool _withUpdate) public {\r\n        require(msg.sender == admin, \"yield:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        sakePerBlockYieldFarming = _sakePerBlockYieldFarming;\r\n    }\r\n\r\n    // set sakePerBlock trade mining\r\n    function setSakePerBlockTradeMining(uint256 _sakePerBlockTradeMining, bool _withUpdate) public {\r\n        require(msg.sender == admin, \"trade:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        sakePerBlockTradeMining = _sakePerBlockTradeMining;\r\n    }\r\n}\r\n\r\n// File: contracts/SakeVoterCalc.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nstruct IndexValue {\r\n    uint256 keyIndex;\r\n    address lpaddr;\r\n}\r\nstruct KeyFlag {\r\n    uint256 key;\r\n    bool deleted;\r\n}\r\nstruct ItMap {\r\n    mapping(uint256 => IndexValue) data;\r\n    KeyFlag[] keys;\r\n    uint256 size;\r\n}\r\n\r\nlibrary IterableMapping {\r\n    function insert(\r\n        ItMap storage self,\r\n        uint256 key,\r\n        address lpaddr\r\n    ) internal returns (bool replaced) {\r\n        uint256 keyIndex = self.data[key].keyIndex;\r\n        self.data[key].lpaddr = lpaddr;\r\n        if (keyIndex > 0) return true;\r\n        else {\r\n            keyIndex = self.keys.length;\r\n            self.keys.push();\r\n            self.data[key].keyIndex = keyIndex + 1;\r\n            self.keys[keyIndex].key = key;\r\n            self.size++;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function remove(ItMap storage self, uint256 key) internal returns (bool success) {\r\n        uint256 keyIndex = self.data[key].keyIndex;\r\n        if (keyIndex == 0) return false;\r\n        delete self.data[key];\r\n        self.keys[keyIndex - 1].deleted = true;\r\n        self.size--;\r\n    }\r\n\r\n    function contains(ItMap storage self, uint256 key) internal view returns (bool) {\r\n        return self.data[key].keyIndex > 0;\r\n    }\r\n\r\n    function iterateStart(ItMap storage self) internal view returns (uint256 keyIndex) {\r\n        return iterateNext(self, uint256(-1));\r\n    }\r\n\r\n    function iterateValid(ItMap storage self, uint256 keyIndex) internal view returns (bool) {\r\n        return keyIndex < self.keys.length;\r\n    }\r\n\r\n    function iterateNext(ItMap storage self, uint256 keyIndex) internal view returns (uint256 rkeyIndex) {\r\n        keyIndex++;\r\n        while (keyIndex < self.keys.length && self.keys[keyIndex].deleted) keyIndex++;\r\n        return keyIndex;\r\n    }\r\n\r\n    function iterateGet(ItMap storage self, uint256 keyIndex) internal view returns (uint256 key, address lpaddr) {\r\n        key = self.keys[keyIndex].key;\r\n        lpaddr = self.data[key].lpaddr;\r\n    }\r\n}\r\n\r\ncontract SakeVoterCalc {\r\n    using SafeMath for uint256;\r\n    ItMap public voteLpPoolMap; //Voter LP Address\r\n    // Apply library functions to the data type.\r\n    using IterableMapping for ItMap;\r\n\r\n    IERC20 public sake;\r\n    SakeBar public bar;\r\n    STokenMaster public stoken;\r\n    SakeMaster public masterV1;\r\n    SakeMasterV2 public masterV2;\r\n    IERC20 public lpSakeEth = IERC20(0xAC10f17627Cd6bc22719CeEBf1fc524C9Cfdc255); //SAKE-ETH\r\n\r\n    address public owner;\r\n    uint256 public lpPow = 2;\r\n    uint256 public balancePow = 1;\r\n    uint256 public stakePow = 1;\r\n    bool public sqrtEnable = true;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Not Owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _tokenAddr,\r\n        address _barAddr,\r\n        address _stoken,\r\n        address _masterAddr,\r\n        address _masterV2Addr\r\n    ) public {\r\n        sake = IERC20(_tokenAddr);\r\n        bar = SakeBar(_barAddr);\r\n        stoken = STokenMaster(_stoken);\r\n        masterV1 = SakeMaster(_masterAddr);\r\n        masterV2 = SakeMasterV2(_masterV2Addr);\r\n        owner = msg.sender;\r\n        voteLpPoolMap.insert(voteLpPoolMap.size, 0xAC10f17627Cd6bc22719CeEBf1fc524C9Cfdc255); //SAKE-ETH\r\n        voteLpPoolMap.insert(voteLpPoolMap.size, 0x5B255e213bCcE0FA8Ad2948E3D7A6F6E76472db8); //SAKE-USDT\r\n        voteLpPoolMap.insert(voteLpPoolMap.size, 0xEc694c829CC192667cDAA6C7639Ef362f3cbF575); //SAKE-USDC\r\n        voteLpPoolMap.insert(voteLpPoolMap.size, 0x838ce8f4Da8b49EA72378427485CF827c08a0abf); //SAKE-DAI\r\n        voteLpPoolMap.insert(voteLpPoolMap.size, 0x49DE2D202fB703999c4D6a7e2dAA2F3700588f40); //SAKE-SUSHI\r\n        voteLpPoolMap.insert(voteLpPoolMap.size, 0x83970b5570E4cb5FC5e21eF9B9F3c4F8A129c2f2); //SAKE-UNI\r\n    }\r\n\r\n    function sqrt(uint256 x) public pure returns (uint256 y) {\r\n        uint256 z = x.add(1).div(2);\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = x.div(z).add(z).div(2);\r\n        }\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        uint256 voterTotal = 0;\r\n        uint256 _vCtSakes = 0;\r\n        uint256 totalBarSakes = 0;\r\n        address _vLpToken;\r\n\r\n        totalBarSakes = sake.balanceOf(address(bar));\r\n        for (\r\n            uint256 i = voteLpPoolMap.iterateStart();\r\n            voteLpPoolMap.iterateValid(i);\r\n            i = voteLpPoolMap.iterateNext(i)\r\n        ) {\r\n            //count lp contract sakenums\r\n            (, _vLpToken) = voteLpPoolMap.iterateGet(i);\r\n            _vCtSakes = _vCtSakes.add(sake.balanceOf(_vLpToken));\r\n        }\r\n\r\n        voterTotal =\r\n            sake.totalSupply().sub(totalBarSakes).sub(_vCtSakes).mul(balancePow) +\r\n            _vCtSakes.mul(lpPow) +\r\n            totalBarSakes.mul(stakePow);\r\n        if (sqrtEnable == true) {\r\n            return sqrt(voterTotal);\r\n        }\r\n        return voterTotal;\r\n    }\r\n\r\n    function _getUserLpSakes(address _voter, address _vLpTokenAddr) internal view returns (uint256) {\r\n        IERC20 _vtmpLpToken;\r\n        IERC20 _vLpToken;\r\n        uint256 _vUserLp = 0;\r\n        uint256 _vtmpUserLp = 0;\r\n        uint256 _vCtSakeNum = 0;\r\n        uint256 _vUserSakeNum = 0;\r\n        ISakeSwapPair _vPair;\r\n\r\n        if (sake.balanceOf(_vLpTokenAddr) == 0) {\r\n            return 0;\r\n        }\r\n        _vLpToken = IERC20(_vLpTokenAddr);\r\n        //v1 pool\r\n        for (uint256 j = 0; j < masterV1.poolLength(); j++) {\r\n            (_vtmpLpToken, , , ) = masterV1.poolInfo(j);\r\n            if (_vtmpLpToken == _vLpToken) {\r\n                (_vtmpUserLp, ) = masterV1.userInfo(j, _voter);\r\n                _vUserLp = _vUserLp.add(_vtmpUserLp);\r\n                break;\r\n            }\r\n        }\r\n        //v2 pool\r\n        for (uint256 j = 0; j < masterV2.poolLength(); j++) {\r\n            (_vtmpLpToken, , , , , , ) = masterV2.poolInfo(j);\r\n            if (_vtmpLpToken == _vLpToken) {\r\n                (, , _vtmpUserLp, , , ) = masterV2.userInfo(j, _voter);\r\n                _vUserLp = _vUserLp.add(_vtmpUserLp);\r\n                break;\r\n            }\r\n        }\r\n        //stokenmaster pool\r\n        if (lpSakeEth == _vLpToken) {\r\n            (, , _vtmpUserLp, ) = stoken.userInfo(0, _voter);\r\n            _vUserLp = _vUserLp.add(_vtmpUserLp);\r\n        }\r\n        //user balance lp\r\n        _vPair = ISakeSwapPair(_vLpTokenAddr);\r\n        _vUserLp = _vUserLp.add(_vPair.balanceOf(_voter));\r\n        //user deposit sakenum = user_lptoken*contract_sakenum/contract_lptokens\r\n        _vCtSakeNum = sake.balanceOf(address(_vLpToken));\r\n        _vUserSakeNum = _vUserLp.mul(_vCtSakeNum).div(_vPair.totalSupply());\r\n        return _vUserSakeNum;\r\n    }\r\n\r\n    //sum user deposit sakenum\r\n    function balanceOf(address _voter) external view returns (uint256) {\r\n        uint256 _votes = 0;\r\n        uint256 _vCtSakeNum = 0;\r\n        uint256 _vBarSakeNum = 0;\r\n        address _vLpTokenAddr;\r\n\r\n        for (\r\n            uint256 i = voteLpPoolMap.iterateStart();\r\n            voteLpPoolMap.iterateValid(i);\r\n            i = voteLpPoolMap.iterateNext(i)\r\n        ) {\r\n            (, _vLpTokenAddr) = voteLpPoolMap.iterateGet(i);\r\n            _vCtSakeNum = _vCtSakeNum.add(_getUserLpSakes(_voter, _vLpTokenAddr));\r\n        }\r\n\r\n        _vBarSakeNum = bar.balanceOf(_voter).mul(sake.balanceOf(address(bar))).div(bar.totalSupply());\r\n        _votes = _vCtSakeNum.mul(lpPow) + sake.balanceOf(_voter).mul(balancePow) + _vBarSakeNum.mul(stakePow);\r\n        if (sqrtEnable == true) {\r\n            return sqrt(_votes);\r\n        }\r\n        return _votes;\r\n    }\r\n\r\n    function addVotePool(address newLpAddr) public onlyOwner {\r\n        address _vTmpLpAddr;\r\n        uint256 key = 0;\r\n        for (\r\n            uint256 i = voteLpPoolMap.iterateStart();\r\n            voteLpPoolMap.iterateValid(i);\r\n            i = voteLpPoolMap.iterateNext(i)\r\n        ) {\r\n            (, _vTmpLpAddr) = voteLpPoolMap.iterateGet(i);\r\n            require(_vTmpLpAddr != newLpAddr, \"newLpAddr already exist\");\r\n        }\r\n        for (key = 0; voteLpPoolMap.iterateValid(key); key++) {\r\n            if (voteLpPoolMap.contains(key) == false) {\r\n                break;\r\n            }\r\n        }\r\n        voteLpPoolMap.insert(key, newLpAddr);\r\n    }\r\n\r\n    function delVotePool(address newLpAddr) public onlyOwner {\r\n        uint256 key = 0;\r\n        address _vTmpLpAddr;\r\n        for (\r\n            uint256 i = voteLpPoolMap.iterateStart();\r\n            voteLpPoolMap.iterateValid(i);\r\n            i = voteLpPoolMap.iterateNext(i)\r\n        ) {\r\n            (key, _vTmpLpAddr) = voteLpPoolMap.iterateGet(i);\r\n            if (_vTmpLpAddr == newLpAddr) {\r\n                voteLpPoolMap.remove(key);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getVotePool(address newLpAddr) external view returns (uint256) {\r\n        address _vTmpLpAddr;\r\n        uint256 key = 0;\r\n        for (\r\n            uint256 i = voteLpPoolMap.iterateStart();\r\n            voteLpPoolMap.iterateValid(i);\r\n            i = voteLpPoolMap.iterateNext(i)\r\n        ) {\r\n            (key, _vTmpLpAddr) = voteLpPoolMap.iterateGet(i);\r\n            if (_vTmpLpAddr == newLpAddr) {\r\n                return key;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function setSqrtEnable(bool enable) public onlyOwner {\r\n        if (sqrtEnable != enable) {\r\n            sqrtEnable = enable;\r\n        }\r\n    }\r\n\r\n    function setPow(\r\n        uint256 lPow,\r\n        uint256 bPow,\r\n        uint256 sPow\r\n    ) public onlyOwner {\r\n        //no need to check pow ?= 0\r\n        if (lPow != lpPow) {\r\n            lpPow = lPow;\r\n        }\r\n        if (bPow != balancePow) {\r\n            balancePow = bPow;\r\n        }\r\n        if (sPow != stakePow) {\r\n            stakePow = sPow;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_barAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterV2Addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLpAddr\",\"type\":\"address\"}],\"name\":\"addVotePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancePow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bar\",\"outputs\":[{\"internalType\":\"contract SakeBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLpAddr\",\"type\":\"address\"}],\"name\":\"delVotePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLpAddr\",\"type\":\"address\"}],\"name\":\"getVotePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSakeEth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterV1\",\"outputs\":[{\"internalType\":\"contract SakeMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterV2\",\"outputs\":[{\"internalType\":\"contract SakeMasterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sake\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lPow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bPow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sPow\",\"type\":\"uint256\"}],\"name\":\"setPow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSqrtEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sqrtEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stoken\",\"outputs\":[{\"internalType\":\"contract STokenMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteLpPoolMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SakeVoterCalc","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000066798d9ef0833ccc719076dab77199ecbd178b00000000000000000000000005fe808a4889b714496e7b821c8542e26be2f8f670000000000000000000000003a417237364fbe95955edf0b7351dc9c44e59fc70000000000000000000000000ec1f1573f3a2db0ad396c843e6a079e2a53e557000000000000000000000000bfb71eeb4d41af889a8b4dbc2c82e83e6d6a99ec","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5d4700996a40376e16d7d09f63c9d6b8ef633b28dd8203c5297833f9286dce20"}]}