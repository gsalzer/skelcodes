{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\ninterface Callable {\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n}\r\n\r\ninterface Router {\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction swapExactETHForTokens(uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory);\r\n}\r\n\r\ninterface SURF {\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction transfer(address, uint256) external returns (bool);\r\n\tfunction transferFrom(address, address, uint256) external returns (bool);\r\n}\r\n\r\ncontract WhirlpoolManager {\r\n\r\n\tuint256 constant private BOARD_DIVIDENDS_PERCENT = 10;\r\n\r\n\tstruct Info {\r\n\t\taddress whirlpool;\r\n\t\taddress boardDividends;\r\n\t\tSURF surf;\r\n\t\tSURF3d s3d;\r\n\t}\r\n\tInfo private info;\r\n\r\n\tconstructor(address _surf, address _whirlpool, address _boardDividends) public {\r\n\t\tinfo.whirlpool = _whirlpool;\r\n\t\tinfo.boardDividends = _boardDividends;\r\n\t\tinfo.surf = SURF(_surf);\r\n\t\tinfo.s3d = SURF3d(msg.sender);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction deposit() external {\r\n\t\tuint256 _balance = address(this).balance;\r\n\t\tif (_balance > 0) {\r\n\t\t\tinfo.s3d.deposit{value: _balance}();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction release() external {\r\n\t\tif (info.s3d.dividendsOf(address(this)) > 0) {\r\n\t\t\tinfo.s3d.withdraw();\r\n\t\t}\r\n\t\tuint256 _balance = info.surf.balanceOf(address(this));\r\n\t\tif (_balance > 0) {\r\n\t\t\tuint256 _boardDividends = _balance * BOARD_DIVIDENDS_PERCENT / 100;\r\n\t\t\tinfo.surf.transfer(info.boardDividends, _boardDividends); // Send 10% of divs to SURF Board holders\r\n\t\t\tinfo.surf.transfer(address(info.surf), _boardDividends); // Burn 10% of divs by sending them to the SURF token contract\r\n\t\t\tinfo.surf.transfer(info.whirlpool, _balance - _boardDividends - _boardDividends); // Send 80% of divs to the Whirlpool\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract SURF3d {\r\n\r\n\tuint256 constant private FLOAT_SCALAR = 2**64;\r\n\tuint256 constant private BUY_TAX = 15;\r\n\tuint256 constant private SELL_TAX = 15;\r\n\tuint256 constant private STARTING_PRICE = 1e17;\r\n\tuint256 constant private INCREMENT = 1e12;\r\n\r\n\tstring constant public name = \"SURF3d\";\r\n\tstring constant public symbol = \"S3D\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tint256 scaledPayout;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(address => User) users;\r\n\t\tuint256 scaledSurfPerToken;\r\n\t\tuint256 openingBlock;\r\n\t\taddress whirlpool;\r\n\t\taddress deployer;\r\n\t\tRouter router;\r\n\t\tSURF surf;\r\n\t}\r\n\tInfo private info;\r\n\r\n\tWhirlpoolManager public whirlpoolManager;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\tevent Buy(address indexed buyer, uint256 amountSpent, uint256 tokensReceived);\r\n\tevent Sell(address indexed seller, uint256 tokensSpent, uint256 amountReceived);\r\n\tevent Withdraw(address indexed user, uint256 amount);\r\n\tevent Reinvest(address indexed user, uint256 amount);\r\n\r\n\r\n\tconstructor(address _surf, address _whirlpool, address _boardDividends) public {\r\n\t\tinfo.router = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\tinfo.surf = SURF(_surf);\r\n\t\tinfo.whirlpool = _whirlpool;\r\n\t\tinfo.deployer = msg.sender;\r\n\t\twhirlpoolManager = new WhirlpoolManager(_surf, _whirlpool, _boardDividends);\r\n\t}\r\n\r\n\tfunction setOpeningBlock(uint256 _openingBlock, uint256 _firstBuyAmount) external {\r\n\t\trequire(info.openingBlock == 0 && msg.sender == info.deployer);\r\n\t\trequire(_openingBlock >= block.number + 500);\r\n\t\tif (_firstBuyAmount > 0) {\r\n\t\t\tbuyFor(_firstBuyAmount, address(whirlpoolManager));\r\n\t\t}\r\n\t\tinfo.openingBlock = _openingBlock;\r\n\t}\r\n\r\n\treceive() external payable {\r\n\t\tif (msg.sender == tx.origin) {\r\n\t\t\tdeposit();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction deposit() public payable returns (uint256) {\r\n\t\treturn depositFor(msg.sender);\r\n\t}\r\n\r\n\tfunction depositFor(address _user) public payable returns (uint256) {\r\n\t\trequire(msg.value > 0);\r\n\t\treturn _deposit(msg.value, _user);\r\n\t}\r\n\r\n\tfunction buy(uint256 _amount) external returns (uint256) {\r\n\t\treturn buyFor(_amount, msg.sender);\r\n\t}\r\n\r\n\tfunction buyFor(uint256 _amount, address _user) public returns (uint256) {\r\n\t\trequire(_amount > 0);\r\n\t\tuint256 _balanceBefore = info.surf.balanceOf(address(this));\r\n\t\tinfo.surf.transferFrom(msg.sender, address(this), _amount);\r\n\t\tuint256 _amountReceived = info.surf.balanceOf(address(this)) - _balanceBefore;\r\n\t\treturn _buy(_amountReceived, _user);\r\n\t}\r\n\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata) external returns (bool) {\r\n\t\trequire(msg.sender == address(info.surf));\r\n\t\trequire(_tokens > 0);\r\n\t\t_buy(_tokens, _from);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction sell(uint256 _tokens) external returns (uint256) {\r\n\t\trequire(balanceOf(msg.sender) >= _tokens);\r\n\t\treturn _sell(_tokens);\r\n\t}\r\n\r\n\tfunction withdraw() external returns (uint256) {\r\n\t\tuint256 _dividends = dividendsOf(msg.sender);\r\n\t\trequire(_dividends > 0);\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);\r\n\t\tinfo.surf.transfer(msg.sender, _dividends);\r\n\t\temit Withdraw(msg.sender, _dividends);\r\n\t\treturn _dividends;\r\n\t}\r\n\r\n\tfunction reinvest() external returns (uint256) {\r\n\t\tuint256 _dividends = dividendsOf(msg.sender);\r\n\t\trequire(_dividends > 0);\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);\r\n\t\temit Reinvest(msg.sender, _dividends);\r\n\t\treturn _buy(_dividends, msg.sender);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\treturn _transfer(msg.sender, _to, _tokens);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\treturn _transfer(_from, _to, _tokens);\r\n\t}\r\n\r\n\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction currentPrices() public view returns (uint256 truePrice, uint256 buyPrice, uint256 sellPrice) {\r\n\t\ttruePrice = STARTING_PRICE + INCREMENT * totalSupply() / 1e18;\r\n\t\tbuyPrice = truePrice * 100 / (100 - BUY_TAX);\r\n\t\tsellPrice = truePrice * (100 - SELL_TAX) / 100;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance;\r\n\t}\r\n\r\n\tfunction dividendsOf(address _user) public view returns (uint256) {\r\n\t\treturn uint256(int256(info.scaledSurfPerToken * balanceOf(_user)) - info.users[_user].scaledPayout) / FLOAT_SCALAR;\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) external view returns (uint256 contractBalance, uint256 totalTokenSupply, uint256 truePrice, uint256 buyPrice, uint256 sellPrice, uint256 openingBlock, uint256 currentBlock, uint256 userETH, uint256 userSURF, uint256 userBalance, uint256 userDividends, uint256 userLiquidValue) {\r\n\t\tcontractBalance = info.surf.balanceOf(address(this));\r\n\t\ttotalTokenSupply = totalSupply();\r\n\t\t(truePrice, buyPrice, sellPrice) = currentPrices();\r\n\t\topeningBlock = info.openingBlock;\r\n\t\tcurrentBlock = block.number;\r\n\t\tuserETH = _user.balance;\r\n\t\tuserSURF = info.surf.balanceOf(_user);\r\n\t\tuserBalance = balanceOf(_user);\r\n\t\tuserDividends = dividendsOf(_user);\r\n\t\tuserLiquidValue = calculateResult(userBalance, false, false) + userDividends;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) external view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction calculateResult(uint256 _amount, bool _buy, bool _inverse) public view returns (uint256) {\r\n\t\tuint256 _buyPrice;\r\n\t\tuint256 _sellPrice;\r\n\t\t( , _buyPrice, _sellPrice) = currentPrices();\r\n\t\tuint256 _rate = (_buy ? _buyPrice : _sellPrice);\r\n\t\tuint256 _increment = INCREMENT * (_buy ? 100 : (100 - SELL_TAX)) / (_buy ? (100 - BUY_TAX) : 100);\r\n\t\tif ((_buy && !_inverse) || (!_buy && _inverse)) {\r\n\t\t\tif (_inverse) {\r\n\t\t\t\treturn (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);\r\n\t\t\t} else {\r\n\t\t\t\treturn (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (_inverse) {\r\n\t\t\t\treturn (_rate * _amount + (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;\r\n\t\t\t} else {\r\n\t\t\t\treturn (_rate * _amount - (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\r\n\t\trequire(info.users[_from].balance >= _tokens);\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\tinfo.users[_from].scaledPayout -= int256(_tokens * info.scaledSurfPerToken);\r\n\t\tinfo.users[_to].balance += _tokens;\r\n\t\tinfo.users[_to].scaledPayout += int256(_tokens * info.scaledSurfPerToken);\r\n\t\temit Transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _deposit(uint256 _value, address _user) internal returns (uint256) {\r\n\t\tuint256 _balanceBefore = info.surf.balanceOf(address(this));\r\n\t\taddress[] memory _poolPath = new address[](2);\r\n\t\t_poolPath[0] = info.router.WETH();\r\n\t\t_poolPath[1] = address(info.surf);\r\n\t\tinfo.router.swapExactETHForTokens{value: _value}(0, _poolPath, address(this), block.timestamp + 5 minutes);\r\n\t\tuint256 _amount = info.surf.balanceOf(address(this)) - _balanceBefore;\r\n\t\treturn _buy(_amount, _user);\r\n\t}\r\n\r\n\tfunction _buy(uint256 _amount, address _user) internal returns (uint256 tokens) {\r\n\t\trequire((info.openingBlock == 0 && msg.sender == info.deployer) || (info.openingBlock != 0 && block.number >= info.openingBlock));\r\n\t\tuint256 _tax = _amount * BUY_TAX / 100;\r\n\t\ttokens = calculateResult(_amount, true, false);\r\n\t\tinfo.totalSupply += tokens;\r\n\t\tinfo.users[_user].balance += tokens;\r\n\t\tinfo.users[_user].scaledPayout += int256(tokens * info.scaledSurfPerToken);\r\n\t\tinfo.scaledSurfPerToken += _tax * FLOAT_SCALAR / info.totalSupply;\r\n\t\temit Transfer(address(0x0), _user, tokens);\r\n\t\temit Buy(_user, _amount, tokens);\r\n\t}\r\n\r\n\tfunction _sell(uint256 _tokens) internal returns (uint256 amount) {\r\n\t\trequire(info.users[msg.sender].balance >= _tokens);\r\n\t\tamount = calculateResult(_tokens, false, false);\r\n\t\tuint256 _tax = amount * SELL_TAX / (100 - SELL_TAX);\r\n\t\tinfo.totalSupply -= _tokens;\r\n\t\tinfo.users[msg.sender].balance -= _tokens;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_tokens * info.scaledSurfPerToken);\r\n\t\tinfo.scaledSurfPerToken += _tax * FLOAT_SCALAR / info.totalSupply;\r\n\t\tinfo.surf.transfer(msg.sender, amount);\r\n\t\temit Transfer(msg.sender, address(0x0), _tokens);\r\n\t\temit Sell(msg.sender, _tokens, amount);\r\n\t}\r\n\r\n\tfunction _sqrt(uint256 _n) internal pure returns (uint256 result) {\r\n\t\tuint256 _tmp = (_n + 1) / 2;\r\n\t\tresult = _n;\r\n\t\twhile (_tmp < result) {\r\n\t\t\tresult = _tmp;\r\n\t\t\t_tmp = (_n / _tmp + _tmp) / 2;\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_surf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whirlpool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boardDividends\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WhirlpoolManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ea319e87cf06203dae107dd8e5672175e3ee976c000000000000000000000000999b1e6edcb412b59ecf0c5e14c20948ce81f40b000000000000000000000000c456c79213d0d39fbb2bec1d8ec356c6d3970a2f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://476d9f014dae398eca49a1422114a65b00d3ae3b861eaba0c8c8ca3e73b80804"}]}