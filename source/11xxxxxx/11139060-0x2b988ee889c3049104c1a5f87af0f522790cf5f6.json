{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: contract-dependencies/Roles.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contract-dependencies/MinterRole.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\nabstract contract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    uint256 public mintersCount;\r\n    address[] public mintersArray;\r\n\r\n    Roles.Role private _minters;\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        mintersCount++;\r\n        mintersArray.push(account);\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        uint256 index;\r\n\r\n        for(uint256 i = 0; i < mintersArray.length; i++) {\r\n            if(mintersArray[i] == account) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        mintersArray[index] = mintersArray[mintersArray.length - 1];\r\n        mintersArray.pop();\r\n\r\n        mintersCount--;\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contract-dependencies/OwnerRole.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\nabstract contract OwnerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event OwnerAdded(address indexed account);\r\n    event OwnerRemoved(address indexed account);\r\n\r\n    uint256 public ownersCount;\r\n    address[] public ownersArray;\r\n\r\n    Roles.Role private _owners;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"OwnerRole: caller does not have the Owner role\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return _owners.has(account);\r\n    }\r\n\r\n    function addOwner(address account) public onlyOwner {\r\n        _addOwner(account);\r\n    }\r\n\r\n    function renounceOwner() public {\r\n        _removeOwner(msg.sender);\r\n    }\r\n\r\n    function _addOwner(address account) internal {\r\n        ownersCount++;\r\n        ownersArray.push(account);\r\n        _owners.add(account);\r\n        emit OwnerAdded(account);\r\n    }\r\n\r\n    function _removeOwner(address account) internal {\r\n        ownersCount--;\r\n\r\n        uint256 index;\r\n\r\n        for(uint256 i = 0; i < ownersArray.length; i++) {\r\n            if(ownersArray[i] == account) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        ownersArray[index] = ownersArray[ownersArray.length - 1];\r\n        ownersArray.pop();\r\n\r\n        _owners.remove(account);\r\n        emit OwnerRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contract-dependencies/ERC20Mintable.sol\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\nabstract contract ERC20Mintable is ERC20, MinterRole, OwnerRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    modifier onlyMinterOrOwner() {\r\n        require(\r\n            isMinter(msg.sender) || isOwner(msg.sender),\r\n            \"Caller is not a minter nor an owner.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function removeMinter(address account) external onlyOwner {\r\n        _removeMinter(account);\r\n    }\r\n\r\n    function addMinter(address account) external onlyOwner {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function mint(address account, uint256 amount)\r\n        external\r\n        onlyMinterOrOwner\r\n        returns (bool)\r\n    {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/eXRD.sol\r\n\r\n/*\r\n    The ERC20 E-RADIX tokens have been generated by Radix Tokens (Jersey) Limited. \r\n\r\n    The purchase possession, exchange and use and ownership of these tokens are subject \r\n    to the terms and conditions, risk warnings and disclaimers issued by Radix Token’s Jersey Limited \r\n    which can be found at www.radixtokens.com/terms/ERC20token and which shall be binding on all \r\n    persons who acquires or seeks to acquire possess or control the use custody exchange or ownership \r\n    of these tokens and all successors in title including anyone who may claim or be entitled to \r\n    an equitable right title or interest in these tokens or any of them.\r\n*/\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\ncontract eXRD is ERC20Burnable, ERC20Mintable {\r\n    constructor(address depositAddress, uint256 amount)\r\n        public\r\n        ERC20(\"E-RADIX\", \"eXRD\")\r\n    {\r\n        require(depositAddress != address(0));\r\n\r\n        _addOwner(msg.sender);\r\n        _mint(depositAddress, amount.mul((10**uint256(decimals()))));\r\n    }\r\n}\r\n\r\n// File: contracts/Vault.sol\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n/*\r\n    Stores a record of all allocations, and keeps track of unlocked amounts for different allocation groups.\r\n    \r\n    An allocation consists of a number of total tokens, the amount of already released tokens and an assignment to a group. \r\n    Allocations are created and funded (sending in tokens) in the same step. A group is a set of allocations that \r\n    all unlock in the same manner.\r\n\r\n    The primary function of the vault contract is to allow the owner of the vault contract to set\r\n    (increase only) the % unlocked (by group), making that % of each individual allocation within the group\r\n    available for release. Releases are initiated by beneficiaries, sending tokens to their ethereum address.\r\n\r\n    The owner of the contract also has the ability to revoke individual allocations, causing the\r\n    associated funds to be withdrawn to the owner.\r\n*/\r\n\r\ncontract Vault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    eXRD public token;\r\n\r\n    event AllocationRegistered(\r\n        address indexed beneficiary,\r\n        uint256 amount,\r\n        uint256 group\r\n    );\r\n    event AllocationFullyReleased(address indexed beneficiary, uint256 allocationIndex);\r\n    event Unlocked(uint256 indexed group, uint256 percentage);\r\n    event Revoked(address indexed beneficiary, uint256 allocationIndex);\r\n    event GroupAdded(string indexed name, uint256 indexed id);\r\n    event Released(address indexed beneficiary, uint256 allocationIndex);\r\n    event FundingAccountSet(address indexed account);\r\n\r\n    struct Allocation {\r\n        uint256 amount;\r\n        uint256 released;\r\n        uint256 group;\r\n        bool revoked;\r\n    }\r\n\r\n    struct AllocationReference {\r\n        address beneficiary;\r\n        uint256 index;\r\n    }\r\n\r\n    struct Group {\r\n        string name;\r\n        bool active;\r\n        uint256 allocationCount;\r\n        mapping(uint256 => AllocationReference) allocations;\r\n    }\r\n\r\n    mapping(address => Allocation[]) private beneficiaryAllocations;\r\n    mapping(address => uint256) private nbrOfAllocations;\r\n\r\n    address[] private registeredBeneficiaries;\r\n    mapping(address => bool) private isRegistered;\r\n\r\n    mapping(uint256 => uint256) private unlockedPercentages;\r\n\r\n    mapping(uint256 => Group) private groups;\r\n\r\n    uint256 private groupCount;\r\n\r\n    address private fundingAccount;\r\n\r\n    bool releasesPaused;\r\n\r\n    constructor(eXRD token_) public {\r\n        token = token_;\r\n    }\r\n\r\n    /*\r\n        Unlock a certain amount of tokens to a group.\r\n\r\n        Unlocking happens incrementally using percentages. Every allocation\r\n        for that group will have a percentage of its amount unlocked and ready to be released.\r\n    */\r\n    function unlock(uint256 group_, uint256 percentage_) external onlyOwner {\r\n        require(\r\n            group_ < groupCount,\r\n            \"Group does not exist.\"\r\n        );\r\n\r\n        require(\r\n            percentage_ > 0 && percentage_ <= 100,\r\n            \"Percentage parameter invalid. Need to be > 0 and <= 100.\"\r\n        );\r\n\r\n        require(\r\n            percentage_ > unlockedPercentages[group_],\r\n            \"Percentage has to be increasing.\"\r\n        );\r\n\r\n        unlockedPercentages[group_] = percentage_;\r\n\r\n        if (percentage_ == 100) {\r\n            groups[group_].active = false;\r\n        }\r\n\r\n        emit Unlocked(group_, percentage_);\r\n    }\r\n\r\n    function setFundingAccount(address account_) external onlyOwner {\r\n        require(\r\n            account_ != address(0),\r\n            \"Cannot set funding account to the zero address.\"\r\n        );\r\n\r\n        fundingAccount = account_;\r\n        emit FundingAccountSet(account_);\r\n    }\r\n\r\n    /*\r\n        Revoke an allocation for a beneficiary.\r\n\r\n        This sets the revoke flag in the allocation, preventing more releases.\r\n    */\r\n    function revoke(address beneficiary_, uint256 allocationIndex_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            beneficiary_ != address(0),\r\n            \"Cannot revoke for the zero address.\"\r\n        );\r\n\r\n        require(\r\n            isRegistered[beneficiary_] == true,\r\n            \"Beneficiary is not registered.\"\r\n        );\r\n\r\n        require(\r\n            nbrOfAllocations[beneficiary_] > allocationIndex_,\r\n            \"Allocation does not exist\"\r\n        );\r\n\r\n        Allocation storage allocation = beneficiaryAllocations[beneficiary_][allocationIndex_];\r\n\r\n        require(\r\n            allocation.revoked == false,\r\n            \"Allocation already revoked\"\r\n        );\r\n\r\n        allocation.revoked = true;\r\n        uint256 toBeReleased = allocation.amount.sub(allocation.released);\r\n        token.transfer(fundingAccount, toBeReleased);\r\n\r\n        emit Revoked(beneficiary_, allocationIndex_);\r\n    }\r\n\r\n    /*\r\n        Revoke allocations for a set of beneficiaries belonging to a specific group.\r\n    */\r\n    function revokeBeneficiariesInGroup(\r\n        address[] calldata beneficiaries_,\r\n        uint256 group_\r\n    ) external onlyOwner {\r\n        require(\r\n            group_ < groupCount,\r\n            \"Group not registered in contract.\"\r\n        );\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint256 i = 0; i < beneficiaries_.length; i++) {\r\n            address beneficiary = beneficiaries_[i];\r\n\r\n            require(\r\n                beneficiary != address(0),\r\n                \"Cannot revoke for the zero address.\"\r\n            );\r\n\r\n            require(\r\n                isRegistered[beneficiary] == true,\r\n                \"Beneficiary is not registered.\"\r\n            );\r\n\r\n            uint256 allocationCount = nbrOfAllocations[beneficiary];\r\n\r\n            for (\r\n                uint256 allocationIndex = 0;\r\n                allocationIndex < allocationCount;\r\n                allocationIndex++\r\n            ) {\r\n\r\n                Allocation storage allocation = beneficiaryAllocations[beneficiary][allocationIndex];\r\n\r\n                require(\r\n                    allocation.revoked == false,\r\n                    \"Allocation already revoked\"\r\n                );\r\n\r\n                if (allocation.group == group_) {\r\n                    allocation.revoked = true;\r\n                    uint256 toBeReleased = allocation.amount.sub(\r\n                        allocation.released\r\n                    );\r\n\r\n                    totalAmount += toBeReleased;\r\n\r\n                    emit Revoked(beneficiary, allocationIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        token.transfer(fundingAccount, totalAmount);\r\n    }\r\n\r\n    /*\r\n        Revoke all allocations for a specific group.\r\n    */\r\n    function revokeGroup(uint256 group_) external onlyOwner {\r\n        require(\r\n            group_ < groupCount,\r\n            \"Group not registered in contract.\"\r\n        );\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint256 i = 0; i < groups[group_].allocationCount; i++) {\r\n            AllocationReference memory allocationRef = groups[group_].allocations[i];\r\n            Allocation storage allocation = beneficiaryAllocations[allocationRef.beneficiary][allocationRef.index];\r\n\r\n            if(allocation.revoked == false) {\r\n                allocation.revoked = true;\r\n                uint256 toBeReleased = allocation.amount.sub(\r\n                    allocation.released\r\n                );\r\n\r\n                totalAmount += toBeReleased;\r\n\r\n                emit Revoked(allocationRef.beneficiary, allocationRef.index);\r\n            }            \r\n        }\r\n\r\n        token.transfer(fundingAccount, totalAmount);\r\n    }\r\n\r\n    /*\r\n        Adds a group and increments the group count.\r\n    */  \r\n    function addGroup(string calldata name_) external onlyOwner {\r\n        groups[groupCount] = Group(name_, true, 0);\r\n\r\n        emit GroupAdded(name_, groupCount);\r\n\r\n        groupCount++;\r\n    }\r\n\r\n    /*\r\n        Disable a group, preventing further allocations to be made in that group.\r\n    */\r\n    function disableGroup(uint256 group_) external onlyOwner {\r\n        require(\r\n            group_ < groupCount,\r\n            \"Group not registered in contract.\"\r\n        );\r\n\r\n        groups[group_].active = false;\r\n    }\r\n\r\n    /*\r\n        Enable a group.\r\n    */\r\n    function enableGroup(uint256 group_) external onlyOwner {\r\n        require(\r\n            group_ < groupCount,\r\n            \"Group not registered in contract.\"\r\n        );\r\n\r\n        require(\r\n            unlockedPercentages[group_] < 100,\r\n            \"Group has been fully unlocked.\"\r\n        );\r\n\r\n        groups[group_].active = true;\r\n    }\r\n\r\n    /*\r\n        Adds a number of allocations.\r\n\r\n        Pushes a new allocations to the allocation array for each beneficiary,\r\n        sets the beneficiary as registered, increments nbrOfAllocations for the beneficiary,\r\n        and transfers enough tokens to this contracts to be unlocked.\r\n    */\r\n    function addAllocations(\r\n        address[] calldata beneficiaries_,\r\n        uint256[] calldata amounts_,\r\n        uint256[] calldata groups_\r\n    ) external onlyOwner {\r\n        require(\r\n            beneficiaries_.length == amounts_.length &&\r\n                beneficiaries_.length == groups_.length,\r\n            \"Length of input arrays do not match.\"\r\n        );\r\n\r\n        require(\r\n            fundingAccount != address(0),\r\n            \"Funding account has to be set before allocating.\"\r\n        );\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint256 i = 0; i < beneficiaries_.length; i++) {\r\n            require(\r\n                beneficiaries_[i] != address(0),\r\n                \"Beneficiary cannot be 0 address.\"\r\n            );\r\n\r\n            require(\r\n                amounts_[i] > 0,\r\n                \"Cannot allocate zero amount.\"\r\n            );\r\n\r\n            Group memory registeredGroup = groups[groups_[i]];\r\n\r\n            require(\r\n                groups_[i] < groupCount,\r\n                \"Group not registered in contract.\"\r\n            );\r\n\r\n            require(registeredGroup.active == true, \"Group is not active.\");\r\n\r\n            // Add new allocation to beneficiary\r\n            beneficiaryAllocations[beneficiaries_[i]].push(Allocation(\r\n                amounts_[i],\r\n                0,\r\n                groups_[i],\r\n                false\r\n            ));\r\n            nbrOfAllocations[beneficiaries_[i]]++;\r\n\r\n            // Add reference to the allocation to group allocation array\r\n            groups[groups_[i]].allocations[groups[groups_[i]].allocationCount] = AllocationReference(\r\n                beneficiaries_[i],\r\n                beneficiaryAllocations[beneficiaries_[i]].length - 1\r\n            );\r\n            groups[groups_[i]].allocationCount++;\r\n            \r\n            if(!isRegistered[beneficiaries_[i]]) {\r\n                registeredBeneficiaries.push(beneficiaries_[i]);\r\n            }\r\n\r\n            isRegistered[beneficiaries_[i]] = true;\r\n\r\n            totalAmount += amounts_[i];\r\n\r\n            emit AllocationRegistered(beneficiaries_[i], amounts_[i], groups_[i]);\r\n        }\r\n        \r\n        token.transferFrom(fundingAccount, address(this), totalAmount);\r\n    }\r\n\r\n    /*\r\n        Calculates the amount of tokens that can be released for an allocation.\r\n    */\r\n    function releasableAmount(address beneficiary_, uint256 allocationIndex_)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            isRegistered[beneficiary_] == true,\r\n            \"You have to be a registered address in order to release tokens.\"\r\n        );\r\n        \r\n        require(\r\n            allocationIndex_ < nbrOfAllocations[beneficiary_],\r\n            \"No allocation found.\"\r\n        );\r\n\r\n        require(\r\n            beneficiaryAllocations[beneficiary_][allocationIndex_].revoked == false,\r\n            \"Allocation has been revoked.\"\r\n        );\r\n\r\n        uint256 amount = beneficiaryAllocations[beneficiary_][allocationIndex_].amount;\r\n        uint256 released = beneficiaryAllocations[beneficiary_][allocationIndex_].released;\r\n        uint256 group = beneficiaryAllocations[beneficiary_][allocationIndex_].group;\r\n        uint256 unlocked = unlockedPercentages[group];\r\n\r\n        uint256 amountUnlocked = amount.mul(unlocked).div(100);\r\n        uint256 releasable = amountUnlocked.sub(released);\r\n\r\n        return releasable;\r\n    }\r\n\r\n    /*\r\n        Sends the tokens that have been unlocked for an allocation to the beneficiary.\r\n    */\r\n    function release(uint256 allocationIndex_) public {\r\n        require(\r\n            isRegistered[msg.sender] == true,\r\n            \"You have to be a registered address in order to release tokens.\"\r\n        );\r\n\r\n        require(releasesPaused == false, \"Releases have been paused.\");\r\n\r\n        require(\r\n            allocationIndex_ < nbrOfAllocations[msg.sender],\r\n            \"No allocation found.\"\r\n        );\r\n\r\n        Allocation storage allocation = beneficiaryAllocations[msg.sender][allocationIndex_];\r\n\r\n        require(allocation.revoked == false, \"Allocation has been revoked.\");\r\n\r\n        require(\r\n            unlockedPercentages[allocation.group] > 0,\r\n            \"Group has not has any unlocked tokens yet.\"\r\n        );\r\n\r\n        uint256 releasable = releasableAmount(msg.sender, allocationIndex_);\r\n        \r\n        require(releasable > 0, \"Nothing to release\");\r\n\r\n        allocation.released = allocation.released.add(releasable);\r\n\r\n        emit Released(msg.sender, allocationIndex_);\r\n\r\n        if (allocation.released == allocation.amount) {\r\n            emit AllocationFullyReleased(msg.sender, allocationIndex_);\r\n        }\r\n\r\n        token.transfer(msg.sender, releasable);\r\n    }\r\n\r\n    function pauseReleases() external onlyOwner {\r\n        releasesPaused = true;\r\n    }\r\n\r\n    function unpauseReleases() external onlyOwner {\r\n        releasesPaused = false;\r\n    }\r\n\r\n    function getAllocationInGroup(uint256 group_, uint256 index_) public view returns (\r\n        address,\r\n        uint256\r\n    ) {\r\n        AllocationReference memory allocationRef = groups[group_].allocations[index_];\r\n        return (\r\n            allocationRef.beneficiary,\r\n            allocationRef.index\r\n        );\r\n    }\r\n\r\n    function getBeneficiaryAllocations(address beneficiary_, uint256 index_) public view returns (\r\n        uint256 amount,\r\n        uint256 released,\r\n        uint256 group,\r\n        bool revoked\r\n    ) {\r\n        Allocation memory allocation = beneficiaryAllocations[beneficiary_][index_];\r\n        return (\r\n            allocation.amount,\r\n            allocation.released,\r\n            allocation.group,\r\n            allocation.revoked\r\n        );\r\n    }\r\n\r\n    function getNbrOfAllocations(address beneficiary_) public view returns (uint256) {\r\n        return nbrOfAllocations[beneficiary_];\r\n    }\r\n\r\n    function getRegisteredBeneficiaries(uint256 index_) public view returns (address) {\r\n        return registeredBeneficiaries[index_];\r\n    }\r\n\r\n    function getIsRegistered(address beneficiary_) public view returns (bool) {\r\n        return isRegistered[beneficiary_];\r\n    }\r\n\r\n    function getUnlockedPercentages(uint256 group_) public view returns (uint256) {\r\n        return unlockedPercentages[group_];\r\n    }\r\n\r\n    function getGroup(uint256 group_) public view returns (\r\n        string memory name,\r\n        bool active,\r\n        uint256 allocationCount\r\n    ) {\r\n        Group memory group = groups[group_];\r\n        return (\r\n            group.name,\r\n            group.active,\r\n            group.allocationCount\r\n        );\r\n    }\r\n\r\n    function getGroupCount() public view returns (uint256) {\r\n        return groupCount;\r\n    }\r\n\r\n    function getFundingAccount() public view returns (address) {\r\n        return fundingAccount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract eXRD\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationIndex\",\"type\":\"uint256\"}],\"name\":\"AllocationFullyReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"}],\"name\":\"AllocationRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FundingAccountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"GroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationIndex\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationIndex\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"groups_\",\"type\":\"uint256[]\"}],\"name\":\"addAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"addGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group_\",\"type\":\"uint256\"}],\"name\":\"disableGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group_\",\"type\":\"uint256\"}],\"name\":\"enableGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getAllocationInGroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getBeneficiaryAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group_\",\"type\":\"uint256\"}],\"name\":\"getGroup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"allocationCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGroupCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"name\":\"getIsRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"name\":\"getNbrOfAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getRegisteredBeneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group_\",\"type\":\"uint256\"}],\"name\":\"getUnlockedPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseReleases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocationIndex_\",\"type\":\"uint256\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocationIndex_\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocationIndex_\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"group_\",\"type\":\"uint256\"}],\"name\":\"revokeBeneficiariesInGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group_\",\"type\":\"uint256\"}],\"name\":\"revokeGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"setFundingAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract eXRD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage_\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseReleases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006468e79a80c0eab0f9a2b574c8d5bc374af59414","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://60b3ba425588b7250287b3c69c04f24dbb544379f8362ac05c4bde2b459e38a1"}]}