{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\r\n    external returns (bytes4);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\introspection\\IERC165.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// File: orchestrator\\IEthItemOrchestrator.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ninterface IEthItemOrchestrator is IERC721Receiver, IERC1155Receiver {\r\n\r\n    function factories() external view returns(address[] memory);\r\n\r\n    function factory() external view returns(address);\r\n\r\n    function setFactory(address newFactory) external;\r\n\r\n    function knowledgeBases() external view returns(address[] memory);\r\n\r\n    function knowledgeBase() external view returns(address);\r\n\r\n    function setKnowledgeBase(address newKnowledgeBase) external;\r\n\r\n    /**\r\n     * @dev GET - The DoubleProxy of the DFO linked to this Contract\r\n     */\r\n    function doubleProxy() external view returns (address);\r\n\r\n    /**\r\n     * @dev SET - The DoubleProxy of the DFO linked to this Contract\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     * @param newDoubleProxy the new DoubleProxy address\r\n     */\r\n    function setDoubleProxy(address newDoubleProxy) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setEthItemERC20WrapperModel(address ethItemERC20WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setERC1155Model(address erc1155ModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\r\n\r\n    function createERC1155(bytes calldata modelInitPayload)\r\n        external\r\n        returns (address newNFT1155Address, bytes memory modelInitCallResponse);\r\n}\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: orchestrator\\IEthItemOrchestratorDependantElement.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IEthItemOrchestratorDependantElement is IERC165 {\r\n\r\n    /**\r\n     * @dev GET - The DoubleProxy of the DFO linked to this Contract\r\n     */\r\n    function doubleProxy() external view returns (address);\r\n\r\n    /**\r\n     * @dev SET - The DoubleProxy of the DFO linked to this Contract\r\n     * It can be done only by the Factory controller\r\n     * @param newDoubleProxy the new DoubleProxy address\r\n     */\r\n    function setDoubleProxy(address newDoubleProxy) external;\r\n\r\n    function isAuthorizedOrchestrator(address operator) external view returns(bool);\r\n}\r\n\r\n// File: factory\\IEthItemFactory.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IEthItemFactory\r\n * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\r\n */\r\ninterface IEthItemFactory is IEthItemOrchestratorDependantElement {\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\r\n     */\r\n    function ethItemERC20WrapperModel() external view returns (address ethItemERC20WrapperModelAddress);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setEthItemERC20WrapperModel(address ethItemERC20WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the ERC1155 NFT-Based EthItems.\r\n     * Every EthItem will have its own address, but the code will be cloned from this one.\r\n     */\r\n    function erc1155Model() external view returns (address erc1155ModelAddress, uint256 erc1155ModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC1155Model(address erc1155ModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 EthItems.\r\n     * Every EthItem will have its own address, but the code will be cloned from this one.\r\n     */\r\n    function erc1155WrapperModel() external view returns (address erc1155WrapperModelAddress, uint256 erc1155WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\r\n     */\r\n    function erc20WrapperModel() external view returns (address erc20WrapperModelAddress, uint256 erc20WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\r\n     */\r\n    function erc721WrapperModel() external view returns (address erc721WrapperModelAddress, uint256 erc721WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every new Minted EthItem\r\n     */\r\n    function mintFeePercentage() external view returns (uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator);\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\r\n\r\n    /**\r\n     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount.\r\n     * @param erc20WrapperAmount The amount of minted EthItem\r\n     */\r\n    function calculateMintFee(uint256 erc20WrapperAmount) external view returns (uint256 mintFee, address dfoWalletAddress);\r\n\r\n    /**\r\n     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every Burned EthItem\r\n     */\r\n    function burnFeePercentage() external view returns (uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator);\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\r\n\r\n    /**\r\n     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the burned EthItem amount.\r\n     * @param erc20WrapperAmount The amount of burned EthItem\r\n     */\r\n    function calculateBurnFee(uint256 erc20WrapperAmount) external view returns (uint256 burnFee, address dfoWalletAddress);\r\n\r\n    /**\r\n     * @dev Business Logic to create a brand-new EthItem.\r\n     * It raises the 'NewERC1155Created' event.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createERC1155(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewERC1155Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC1155Created' event.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC1155(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC1155Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC20 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC20Created' event.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC20(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC20Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC721 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC721Created' event.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC721(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC721Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n}\r\n\r\n// File: knowledgeBase\\IKnowledgeBase.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IKnowledgeBase\r\n * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\r\n */\r\ninterface IKnowledgeBase is IEthItemOrchestratorDependantElement {\r\n\r\n    function setEthItem(address ethItem) external;\r\n\r\n    function isEthItem(address ethItem) external view returns(bool);\r\n\r\n    function setWrapped(address wrappedAddress, address ethItem) external;\r\n\r\n    function wrapper(address wrappedAddress, uint256 version) external returns (address ethItem);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\introspection\\ERC165.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: orchestrator\\EthItemOrchestrator.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract EthItemOrchestrator is IEthItemOrchestrator, ERC165 {\r\n\r\n    address private _doubleProxy;\r\n    address[] private _factories;\r\n    address[] private _knowledgeBases;\r\n\r\n    constructor(\r\n        address doubleProxy,\r\n        address[] memory factoriesArray,\r\n        address[] memory knowledgeBasesArray\r\n    ) public {\r\n        _doubleProxy = doubleProxy;\r\n        _factories = factoriesArray;\r\n        _knowledgeBases = knowledgeBasesArray;\r\n    }\r\n\r\n    function factories() public view override returns(address[] memory) {\r\n        return _factories;\r\n    }\r\n\r\n    function factory() public view override returns(address) {\r\n        return _factories[_factories.length - 1];\r\n    }\r\n\r\n    function knowledgeBases() public view override returns(address[] memory) {\r\n        return _knowledgeBases;\r\n    }\r\n\r\n    function knowledgeBase() public view override returns(address) {\r\n        return _knowledgeBases[_knowledgeBases.length - 1];\r\n    }\r\n\r\n    modifier byDFO virtual {\r\n        require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \"Unauthorized Action!\");\r\n        _;\r\n    }\r\n\r\n    function doubleProxy() public view override returns (address) {\r\n        return _doubleProxy;\r\n    }\r\n\r\n    function setDoubleProxy(address newDoubleProxy) public override byDFO {\r\n        _doubleProxy = newDoubleProxy;\r\n        for(uint256 i = 0; i < _factories.length; i++) {\r\n            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_factories[i]);\r\n            if(element.supportsInterface(this.setDoubleProxy.selector)) {\r\n                element.setDoubleProxy(_doubleProxy);\r\n            }\r\n        }\r\n        for(uint256 i = 0; i < _knowledgeBases.length; i++) {\r\n            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_knowledgeBases[i]);\r\n            if(element.supportsInterface(this.setDoubleProxy.selector)) {\r\n                element.setDoubleProxy(_doubleProxy);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) public override byDFO {\r\n        for(uint256 i = 0; i < _factories.length; i++) {\r\n            IEthItemFactory element = IEthItemFactory(_factories[i]);\r\n            if(element.supportsInterface(this.setMintFeePercentage.selector)) {\r\n                element.setMintFeePercentage(mintFeePercentageNumerator, mintFeePercentageDenominator);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) public override byDFO {\r\n        for(uint256 i = 0; i < _factories.length; i++) {\r\n            IEthItemFactory element = IEthItemFactory(_factories[i]);\r\n            if(element.supportsInterface(this.setBurnFeePercentage.selector)) {\r\n                element.setBurnFeePercentage(burnFeePercentageNumerator, burnFeePercentageDenominator);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setFactory(address newFactory) public override byDFO {\r\n        require(IEthItemOrchestratorDependantElement(newFactory).doubleProxy() == _doubleProxy, \"Wrong Double Proxy\");\r\n        _factories.push(newFactory);\r\n    }\r\n\r\n    function setKnowledgeBase(address newKnowledgeBase) public override byDFO {\r\n        require(IEthItemOrchestratorDependantElement(newKnowledgeBase).doubleProxy() == _doubleProxy, \"Wrong Double Proxy\");\r\n        _knowledgeBases.push(newKnowledgeBase);\r\n    }\r\n\r\n    function setEthItemERC20WrapperModel(address ethItemERC20WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setEthItemERC20WrapperModel.selector)) {\r\n            element.setEthItemERC20WrapperModel(ethItemERC20WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function setERC1155Model(address erc1155ModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setERC1155Model.selector)) {\r\n            element.setERC1155Model(erc1155ModelAddress);\r\n        }\r\n    }\r\n\r\n    function setERC1155WrapperModel(address erc1155WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setERC1155WrapperModel.selector)) {\r\n            element.setERC1155WrapperModel(erc1155WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function setERC20WrapperModel(address erc20WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setERC20WrapperModel.selector)) {\r\n            element.setERC20WrapperModel(erc20WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function setERC721WrapperModel(address erc721WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setERC721WrapperModel.selector)) {\r\n            element.setERC721WrapperModel(erc721WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address operator,\r\n        address owner,\r\n        uint256 objectId,\r\n        uint256 amount,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address owner,\r\n        uint256[] memory objectIds,\r\n        uint256[] memory amounts,\r\n        bytes memory payload\r\n    ) public virtual override returns (bytes4) {\r\n        for(uint256 i = 0; i < objectIds.length; i++) {\r\n            onERC1155Received(operator, owner, objectIds[i], amounts[i], payload);\r\n        }\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address owner,\r\n        uint256 objectId,\r\n        bytes memory payload\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function createERC1155(bytes memory modelInitCallPayload) public override\r\n        returns (address newNFT1155Address, bytes memory modelInitCallResponse) {\r\n        (newNFT1155Address, modelInitCallResponse) = IEthItemFactory(factory()).createERC1155(modelInitCallPayload);\r\n        IKnowledgeBase(knowledgeBase()).setEthItem(newNFT1155Address);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doubleProxy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"factoriesArray\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"knowledgeBasesArray\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"modelInitCallPayload\",\"type\":\"bytes\"}],\"name\":\"createERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newNFT1155Address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knowledgeBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knowledgeBases\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"objectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageDenominator\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDoubleProxy\",\"type\":\"address\"}],\"name\":\"setDoubleProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155ModelAddress\",\"type\":\"address\"}],\"name\":\"setERC1155Model\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC1155WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC20WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC721WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethItemERC20WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setEthItemERC20WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKnowledgeBase\",\"type\":\"address\"}],\"name\":\"setKnowledgeBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageDenominator\",\"type\":\"uint256\"}],\"name\":\"setMintFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EthItemOrchestrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b451103a905144a0cd9c98ce4b1feeda82b1a720000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000059d122ecc9ae61dd930f4706bcaab239f671d6110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000428ce05ca432587062c949b4f37ab0029c1ab76f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e579451d84f098f83444b7ae2320b54a9e054bce95d482ad67b4c57eaae639d6"}]}