{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.1 https://hardhat.org\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n// SPDX-License-Identifier: JOE-MAMA\r\n// COPYRIGHT Joe Mama\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IWETH.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/v612/DildoPrinter.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract IdiotAgregatorsStartUsingTWAPPrice {\r\n    using SafeMath for uint256;\r\n\r\n    IWETH public constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IUniswapV2Factory public constant uniFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n\r\n    constructor () public {\r\n        //shuup compiler lol\r\n    }\r\n\r\n    fallback() external payable {\r\n        if(msg.sender != address(WETH)) revert();\r\n    }\r\n\r\n\r\n\r\n    function printDildoUpAndRefundRest(address forToken, uint256 timesCurrentPrice) public payable {\r\n        require(msg.value > 0, \"More money pls\");\r\n        require(forToken != 0x62359Ed7505Efc61FF1D56fEF82158CcaffA23D7, \"Not a shitcoin\");\r\n        require(timesCurrentPrice > 0, \"Times higher pls\");\r\n        address pairAddy = uniFactory.getPair(address(WETH), forToken);\r\n        require(pairAddy != address(0), \"No pair with eth bro\");\r\n        WETH.deposit{value : msg.value}();\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddy);\r\n        address token0 = pair.token0();\r\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n\r\n        // We want to get shitcoin out\r\n        uint256 transferWETHAmt;\r\n        if(token0 == address(WETH)) {\r\n            // Reserve0 is weth\r\n            // So we want to get token1\r\n                                              // amountOut, reserveIn , reserveout\r\n            uint256 getAmountInWETHFor1UnitOfToken = getAmountIn(1, reserve0, reserve1);\r\n            transferWETHAmt = getAmountInWETHFor1UnitOfToken*timesCurrentPrice;\r\n            WETH.transfer(address(pair),transferWETHAmt);\r\n            pair.swap(0, 1, msg.sender, \"\");\r\n\r\n\r\n        } else {\r\n            uint256 getAmountInWETHFor1UnitOfToken = getAmountIn(1, reserve1, reserve0);\r\n            transferWETHAmt = getAmountInWETHFor1UnitOfToken*timesCurrentPrice;\r\n            WETH.transfer(address(pair), transferWETHAmt);\r\n            pair.swap(1, 0, msg.sender, \"\");\r\n\r\n        }\r\n        // console.log(\"Bought for \",transferWETHAmt);\r\n        WETH.withdraw(msg.value.sub(transferWETHAmt));\r\n        (bool success,) = msg.sender.call.value(address(this).balance)(\"\");\r\n    }\r\n\r\n    function printDildoDownAndRefundRest(address forToken, uint256 timesLowerCurrentPrice) public payable {\r\n        require(msg.value > 0, \"More money pls\");\r\n        require(forToken != 0x62359Ed7505Efc61FF1D56fEF82158CcaffA23D7, \"Not a shitcoin\");\r\n        require(timesLowerCurrentPrice > 0, \"Times higher pls\");\r\n        address pairAddy = uniFactory.getPair(address(WETH), forToken);\r\n        require(pairAddy != address(0), \"No pair with eth bro\");\r\n        WETH.deposit{value : msg.value}();\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddy);\r\n        address token0 = pair.token0();\r\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n        uint256 transferWETHAmt;\r\n\r\n        if(token0 == address(WETH)) { \r\n            /// Reserve0 is weth                          // amountOut, reserveIn , reserveout\r\n            uint256 getAmountCoinsNeededToBuy1WETHUnit = getAmountIn(1, reserve1, reserve0);\r\n            if(getAmountCoinsNeededToBuy1WETHUnit == 0) getAmountCoinsNeededToBuy1WETHUnit = 1;\r\n\r\n            // We add 10% for buffer\r\n            uint256 getAmountCoinsNeededToBuy1WETHUnitAdjusted = ((getAmountCoinsNeededToBuy1WETHUnit * 110) / 100) * timesLowerCurrentPrice;\r\n                                                             // amountOut, reserveIn , reserveout\r\n            transferWETHAmt = getAmountIn(getAmountCoinsNeededToBuy1WETHUnitAdjusted, reserve0, reserve1);\r\n            WETH.transfer(address(pair), transferWETHAmt);\r\n            // Get coin\r\n            pair.swap(0, getAmountCoinsNeededToBuy1WETHUnitAdjusted, address(this), \"\");\r\n            IERC20(forToken).transfer(address(pair), getAmountCoinsNeededToBuy1WETHUnitAdjusted);\r\n            pair.swap(1, 0 , msg.sender, \"\");\r\n\r\n        } else {\r\n            /// Reserve1 is weth                          // amountOut, reserveIn , reserveout\r\n            uint256 getAmountCoinsNeededToBuy1WETHUnit = getAmountIn(1, reserve0, reserve1);\r\n            if(getAmountCoinsNeededToBuy1WETHUnit == 0) getAmountCoinsNeededToBuy1WETHUnit = 1;\r\n            // We add 10% for buffer\r\n            uint256 getAmountCoinsNeededToBuy1WETHUnitAdjusted = ((getAmountCoinsNeededToBuy1WETHUnit * 150) / 100) * timesLowerCurrentPrice;\r\n                                                             // amountOut, reserveIn , reserveout\r\n            transferWETHAmt = getAmountIn(getAmountCoinsNeededToBuy1WETHUnitAdjusted, reserve1, reserve0);\r\n            WETH.transfer(address(pair), transferWETHAmt);\r\n            // Get coin\r\n            pair.swap(getAmountCoinsNeededToBuy1WETHUnitAdjusted, 0, address(this), \"\");\r\n            IERC20(forToken).transfer(address(pair), getAmountCoinsNeededToBuy1WETHUnitAdjusted);\r\n            pair.swap(0, 1 , msg.sender, \"\");\r\n        }\r\n        // console.log(\"Bought for \",transferWETHAmt);\r\n\r\n        WETH.withdraw(msg.value.sub(transferWETHAmt));\r\n        (bool success,) = msg.sender.call.value(address(this).balance)(\"\");\r\n    }\r\n\r\n\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n  \r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timesLowerCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"printDildoDownAndRefundRest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timesCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"printDildoUpAndRefundRest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IdiotAgregatorsStartUsingTWAPPrice","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"6969","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://077c7d5932a24f7ce54c970d6059b30010f61bf0e425c72a9bf92efc5916c150"}]}