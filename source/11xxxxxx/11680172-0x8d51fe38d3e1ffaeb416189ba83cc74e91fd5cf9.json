{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.6 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n// File contracts/uniswapv2/libraries/TransferHelper.sol\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/uniswapv2/libraries/SafeMath.sol\r\n\r\n\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMathUniswap {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol\r\n\r\n\r\n\r\ninterface IUniswapV2ERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\n// File contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/SushiYieldToken.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SushiYieldToken {\r\n    using SafeMathUniswap for uint256;\r\n    using TransferHelper for address;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Mint(address indexed sender, uint256 amount);\r\n    event Burn(address indexed sender, uint256 amount, address indexed to);\r\n\r\n    /**\r\n     * @return address of YieldTokenFactory\r\n     */\r\n    address public factory;\r\n    /**\r\n     * @return address of lp token\r\n     */\r\n    address public lpToken;\r\n    /**\r\n     * @return data to be used when `mint`ing/`burn`ing\r\n     */\r\n    bytes public data;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"locked\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function initialize(address _lpToken, bytes memory _data) external {\r\n        require(msg.sender == factory, \"forbidden\");\r\n        lpToken = _lpToken;\r\n        data = _data;\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\r\n        string memory symbol0 = IUniswapV2ERC20(pair.token0()).symbol();\r\n        string memory symbol1 = IUniswapV2ERC20(pair.token1()).symbol();\r\n        name = string(abi.encodePacked(symbol0, \"-\", symbol1, \" SushiSwap Yield Token\"));\r\n        symbol = string(abi.encodePacked(symbol0, \"-\", symbol1, \" SYD\"));\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"expired\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"invalid-signature\");\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function mint(address to) external lock returns (uint256 amount) {\r\n        amount = IUniswapV2ERC20(lpToken).balanceOf(address(this));\r\n        require(amount > 0, \"insufficient-balance\");\r\n\r\n        (bool success,) = factory.delegatecall(abi.encodeWithSignature(\"deposit(bytes,uint256,address)\", data, amount, to));\r\n        require(success, \"failed-to-deposit\");\r\n\r\n        _mint(to, amount);\r\n\r\n        emit Mint(msg.sender, amount);\r\n    }\r\n\r\n    function burn(address to) external lock returns (uint256 amount) {\r\n        amount = balanceOf[address(this)];\r\n        require(amount > 0, \"insufficient-balance\");\r\n\r\n        (bool success,) = factory.delegatecall(abi.encodeWithSignature(\"withdraw(bytes,uint256,address)\", data, amount, to));\r\n        require(success, \"failed-to-withdraw\");\r\n\r\n        _burn(address(this), amount);\r\n\r\n        emit Burn(msg.sender, amount, to);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/SousChef.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IYieldTokenFactory {\r\n    function getYieldToken(uint256 pid) external view returns (address yieldToken);\r\n}\r\n\r\ncontract SousChef {\r\n    using TransferHelper for address;\r\n    using SafeMathUniswap for uint;\r\n\r\n    event Deposited(address yieldToken, uint256 amount, address to);\r\n    event Withdrawn(address yieldToken, uint256 amount, address to);\r\n\r\n    address public factory;\r\n    address public weth;\r\n\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'expired');\r\n        _;\r\n    }\r\n\r\n    constructor(address _yieldTokenFactory) public {\r\n        factory = _yieldTokenFactory;\r\n    }\r\n\r\n    function depositMultipleWithPermit(\r\n        uint256[] calldata pids,\r\n        uint256[] calldata amounts,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8[] calldata v,\r\n        bytes32[] calldata r,\r\n        bytes32[] calldata s\r\n    ) external ensure(deadline) {\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            address yieldToken = _getYieldToken(pids[i]);\r\n            _depositWithPermit(yieldToken, amounts[i], to, deadline, v[i], r[i], s[i]);\r\n        }\r\n    }\r\n\r\n    function depositWithPermit(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external ensure(deadline) {\r\n        address yieldToken = _getYieldToken(pid);\r\n        _depositWithPermit(yieldToken, amount, to, deadline, v, r, s);\r\n    }\r\n\r\n    function _depositWithPermit(\r\n        address yieldToken,\r\n        uint256 amount,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        address lpToken = SushiYieldToken(yieldToken).lpToken();\r\n        _permit(lpToken, amount, deadline, v, r, s);\r\n        _deposit(yieldToken, amount, to);\r\n    }\r\n\r\n    function deposit(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to\r\n    ) external {\r\n        address yieldToken = _getYieldToken(pid);\r\n        _deposit(yieldToken, amount, to);\r\n    }\r\n\r\n    function _deposit(\r\n        address yieldToken,\r\n        uint256 amount,\r\n        address to\r\n    ) internal {\r\n        address lpToken = SushiYieldToken(yieldToken).lpToken();\r\n        lpToken.safeTransferFrom(msg.sender, yieldToken, amount);\r\n        SushiYieldToken(yieldToken).mint(to);\r\n\r\n        emit Deposited(yieldToken, amount, to);\r\n    }\r\n\r\n    function withdrawMultipleWithPermit(\r\n        uint256[] calldata pids,\r\n        uint256[] calldata amounts,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8[] calldata v,\r\n        bytes32[] calldata r,\r\n        bytes32[] calldata s\r\n    ) external ensure(deadline) {\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            address yieldToken = _getYieldToken(pids[i]);\r\n            _withdrawWithPermit(yieldToken, amounts[i], to, deadline, v[i], r[i], s[i]);\r\n        }\r\n    }\r\n\r\n    function withdrawWithPermit(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external ensure(deadline) {\r\n        address yieldToken = _getYieldToken(pid);\r\n        _withdrawWithPermit(yieldToken, amount, to, deadline, v, r, s);\r\n    }\r\n\r\n    function _withdrawWithPermit(\r\n        address yieldToken,\r\n        uint256 amount,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        _permit(yieldToken, amount, deadline, v, r, s);\r\n        _withdraw(yieldToken, amount, to);\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to\r\n    ) external {\r\n        address yieldToken = _getYieldToken(pid);\r\n        _withdraw(yieldToken, amount, to);\r\n    }\r\n\r\n    function _withdraw(\r\n        address yieldToken,\r\n        uint256 amount,\r\n        address to\r\n    ) internal {\r\n        yieldToken.safeTransferFrom(msg.sender, yieldToken, amount);\r\n        SushiYieldToken(yieldToken).burn(to);\r\n\r\n        emit Withdrawn(yieldToken, amount, to);\r\n    }\r\n\r\n    function _getYieldToken(uint256 pid) internal view returns (address) {\r\n        address yieldToken = IYieldTokenFactory(factory).getYieldToken(pid);\r\n        require(yieldToken != address(0), \"invalid-pid\");\r\n        return yieldToken;\r\n    }\r\n\r\n    function _permit(address token, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal {\r\n        IUniswapV2ERC20(token).permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldTokenFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"depositMultipleWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawMultipleWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SousChef","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e5085eb63ba62eb7edf609f63c2ce889cc122ea3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://565ef20e35b58eba25ecf477511601c26e299ac7538f51008f6abd94fe8ed99d"}]}