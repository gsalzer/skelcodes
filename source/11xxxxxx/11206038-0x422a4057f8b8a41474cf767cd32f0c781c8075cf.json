{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n\n\n\ninterface IStakingRewards {\n    // Views\n    function lastTimeRewardApplicable(address rewardToken) external view returns (uint256);\n\n    function rewardPerToken(address rewardToken) external view returns (uint256);\n\n    function earned(address account, address rewardToken) external view returns (uint256);\n\n    function getRewardForDuration(address rewardToken) external view returns (uint256);\n\n    function totalStakesAmount() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    // Mutative\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n\n    function exit() external;\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20Detailed {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n\n\n\n/**\n * @title SafeERC20Detailed\n * @dev Wrappers around SafeERC20Detailed operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20Detailed for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Detailed {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20Detailed token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Detailed token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20Detailed token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Detailed token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Detailed token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20Detailed token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n// SPDX-License-Identifier: MIT\n\n\ncontract RewardsDistributionRecipient {\n    address public rewardsDistributor;\n\n    function start() external;\n\n    modifier onlyRewardsDistributor() {\n        require(msg.sender == rewardsDistributor, \"Caller is not RewardsDistribution contract\");\n        _;\n    }\n}// SPDX-License-Identifier: MIT\n\n\n\n\n\n\n\n\ncontract StakingRewards is\n    IStakingRewards,\n    RewardsDistributionRecipient,\n    ReentrancyGuard\n{\n    using SafeMath for uint256;\n    using SafeERC20Detailed for IERC20Detailed;\n\n    /* ========== STATE VARIABLES ========== */\n\n    // staking\n    IERC20Detailed public stakingToken;\n    uint256 private _totalStakesAmount;\n    mapping(address => uint256) private _balances;\n\n    // reward\n    struct RewardInfo {\n        uint256 rewardRate;\n        uint256 latestRewardPerTokenSaved;\n        uint256 periodFinish;\n        uint256 lastUpdateTime;\n        uint256 rewardDuration;\n\n        // user rewards\n        mapping(address => uint256) userRewardPerTokenRecorded;\n        mapping(address => uint256) rewards;\n    }\n\n    mapping(address => RewardInfo) public rewardsTokensMap; // structure for fast access to token's data\n    address[] public rewardsTokensArr; // structure to iterate over\n    uint256[] public rewardsAmountsArr;\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(address[] token, uint256[] reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 rewardAmount);\n    event RewardExtended(\n        address indexed rewardToken,\n        uint256 rewardAmount,\n        uint256 date,\n        uint256 periodToExtend\n    );\n\n    /* ========== CONSTRUCTOR ========== */\n\n    /** @dev Function called once on deployment time\n    * @param _rewardsTokens The addresses of the tokens the rewards will be paid in\n    * @param _rewardsAmounts The reward amounts for each reward token\n    * @param _stakingToken The address of the token being staked\n    * @param _rewardsDuration Rewards duration in seconds\n     */\n    constructor(\n        address[] memory _rewardsTokens,\n        uint256[] memory _rewardsAmounts,\n        address _stakingToken,\n        uint256 _rewardsDuration\n    ) public {\n        for (uint i = 0; i < _rewardsTokens.length; i++) {\n            rewardsTokensMap[_rewardsTokens[i]] = RewardInfo(0, 0, 0, 0, _rewardsDuration);\n        }\n        rewardsTokensArr = _rewardsTokens;\n        rewardsAmountsArr = _rewardsAmounts;\n        stakingToken = IERC20Detailed(_stakingToken);\n\n        rewardsDistributor = msg.sender;\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    /** @dev Modifier that re-calculates the rewards per user on user action.\n     */\n    modifier updateReward(address account) {\n        for (uint i = 0; i < rewardsTokensArr.length; i++) {\n            address token = rewardsTokensArr[i];\n            RewardInfo storage ri = rewardsTokensMap[token];\n\n            ri.latestRewardPerTokenSaved = rewardPerToken(token); // Calculate the reward until now\n            ri.lastUpdateTime = lastTimeRewardApplicable(token); // Update the last update time to now (or end date) for future calculations\n\n            if (account != address(0)) {\n                ri.rewards[account] = earned(account, token);\n                ri.userRewardPerTokenRecorded[account] = ri.latestRewardPerTokenSaved;\n            }\n        }\n        _;\n    }\n\n    /* ========== FUNCTIONS ========== */\n\n    /** @dev Return the length of Rewards tokens array.\n     */\n    function getRewardsTokensCount()\n        external\n        view\n        returns (uint)\n    {\n        return rewardsTokensArr.length;\n    }\n\n    /** @dev Returns reward per token for a specific user and specific reward token.\n     * @param rewardToken The reward token\n     * @param rewardToken The address of user\n     */\n    function getUserRewardPerTokenRecorded(address rewardToken, address user)\n        external\n        view\n        returns (uint256)\n    {\n        return rewardsTokensMap[rewardToken].userRewardPerTokenRecorded[user];\n    }\n\n    /** @dev Returns reward for a specific user and specific reward token.\n     * @param rewardToken The reward token\n     * @param rewardToken The address of user\n     */\n    function getUserReward(address rewardToken, address user)\n        external\n        view\n        returns (uint256)\n    {\n        return rewardsTokensMap[rewardToken].rewards[user];\n    }\n\n    /** @dev Returns the total amount of stakes.\n     */\n    function totalStakesAmount() external view returns (uint256) {\n        return _totalStakesAmount;\n    }\n\n    /** @dev Returns the balance of specific user.\n     */\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    /** @dev Calculates the rewards for this distribution.\n     * @param rewardToken The reward token for which calculations will be made for\n     */\n    function getRewardForDuration(address rewardToken) external view returns (uint256) {\n        RewardInfo storage ri = rewardsTokensMap[rewardToken];\n        return ri.rewardRate.mul(ri.rewardDuration);\n    }\n\n    /** @dev Checks if staking period has been started.\n     */\n    function hasPeriodStarted()\n        external\n        view\n        returns (bool)\n    {\n        for (uint i = 0; i < rewardsTokensArr.length; i++) {\n            if (rewardsTokensMap[rewardsTokensArr[i]].periodFinish != 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /** @dev Providing LP tokens to stake, start calculating rewards for user.\n     * @param amount The amount to be staked\n     */\n    function stake(uint256 amount)\n        external\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        require(amount != 0, \"Cannot stake 0\");\n        _totalStakesAmount = _totalStakesAmount.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    /** @dev Withdrawing the stake and claiming the rewards for the user\n     */\n    function exit() external {\n        withdraw(_balances[msg.sender]);\n        getReward();\n    }\n\n    /** @dev Makes the needed calculations and starts the staking/rewarding.\n     */\n    function start()\n        external\n        onlyRewardsDistributor\n        updateReward(address(0))\n    {\n        for (uint i = 0; i < rewardsTokensArr.length; i++) {\n            address token = rewardsTokensArr[i];\n            RewardInfo storage ri = rewardsTokensMap[token];\n\n            ri.rewardRate = rewardsAmountsArr[i].div(ri.rewardDuration);\n            // Ensure the provided reward amount is not more than the balance in the contract.\n            // This keeps the reward rate in the right range, preventing overflows due to\n            // very high values of rewardRate in the earned and rewardsPerToken functions;\n            // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n            uint256 balance = IERC20Detailed(token).balanceOf(address(this));\n            require(\n                ri.rewardRate <= balance.div(ri.rewardDuration),\n                \"Provided reward too high\"\n            );\n\n            ri.lastUpdateTime = block.timestamp;\n            ri.periodFinish = block.timestamp.add(ri.rewardDuration);\n        }\n\n        emit RewardAdded(rewardsTokensArr, rewardsAmountsArr);\n    }\n\n    /** @dev Add's more rewards and updates the duration of the rewards distribution.\n     * @param rewardToken The token in which the additional reward amount will be distributed. Must be already known token.\n     * @param rewardAmount The additional reward amount\n     */\n    function addRewards(address rewardToken, uint256 rewardAmount)\n        external\n        updateReward(address(0))\n        onlyRewardsDistributor\n    {\n        uint256 periodToExtend = getPeriodsToExtend(rewardToken, rewardAmount);\n        IERC20Detailed(rewardToken).safeTransferFrom(msg.sender, address(this), rewardAmount);\n\n        RewardInfo storage ri = rewardsTokensMap[rewardToken];\n        ri.periodFinish = ri.periodFinish.add(periodToExtend);\n        ri.rewardDuration = ri.rewardDuration.add(periodToExtend);\n\n        emit RewardExtended(rewardToken, rewardAmount, block.timestamp, periodToExtend);\n    }\n\n    /** @dev Calculates the last time reward could be paid up until this moment for specific reward token.\n     * @param rewardToken The reward token for which calculations will be made for\n     */\n    function lastTimeRewardApplicable(address rewardToken) public view returns (uint256) {\n        return Math.min(block.timestamp, rewardsTokensMap[rewardToken].periodFinish);\n    }\n\n    /** @dev Calculates how many rewards tokens you should get per 1 staked token until last applicable time (in most cases it is now) for specific token\n     * @param rewardToken The reward token for which calculations will be made for\n     */\n    function rewardPerToken(address rewardToken) public view returns (uint256) {\n        RewardInfo storage ri = rewardsTokensMap[rewardToken];\n\n        if (_totalStakesAmount == 0) {\n            return ri.latestRewardPerTokenSaved;\n        }\n\n        uint256 timeSinceLastSave = lastTimeRewardApplicable(rewardToken).sub(\n            ri.lastUpdateTime\n        );\n\n        uint256 rewardPerTokenSinceLastSave = timeSinceLastSave\n            .mul(ri.rewardRate)\n            .mul(10 ** uint256(IERC20Detailed(address(stakingToken)).decimals()))\n            .div(_totalStakesAmount);\n\n        return ri.latestRewardPerTokenSaved.add(rewardPerTokenSinceLastSave);\n    }\n\n    /** @dev Calculates how much rewards a user has earned.\n     * @param account The user for whom calculations will be done\n     * @param rewardToken The reward token for which calculations will be made for\n     */\n    function earned(address account, address rewardToken) public view returns (uint256) {\n        RewardInfo storage ri = rewardsTokensMap[rewardToken];\n\n        uint256 userRewardPerTokenSinceRecorded = rewardPerToken(rewardToken).sub(\n            ri.userRewardPerTokenRecorded[account]\n        );\n\n        uint256 newReward = _balances[account]\n            .mul(userRewardPerTokenSinceRecorded)\n            .div(10 ** uint256(IERC20Detailed(address(stakingToken)).decimals()));\n\n        return ri.rewards[account].add(newReward);\n    }\n\n    /** @dev Calculates the finish period extension based on the new reward amount added\n     * @param rewardAmount The additional reward amount\n     */\n    function getPeriodsToExtend(address rewardToken, uint256 rewardAmount)\n        public\n        view\n        returns (uint256 periodToExtend)\n    {\n        require(rewardAmount != 0, \"Rewards should be greater than zero\");\n\n        RewardInfo storage ri = rewardsTokensMap[rewardToken];\n        require(ri.rewardRate != 0, \"Staking is not yet started\");\n\n        periodToExtend = rewardAmount.div(ri.rewardRate);\n    }\n\n    /** @dev Checks if staking period for every reward token has expired.\n     * Returns false if atleast one reward token has not yet finished\n     */\n    function hasPeriodFinished()\n        public\n        view\n        returns (bool)\n    {\n        for (uint i = 0; i < rewardsTokensArr.length; i++) {\n            // on first token for which the period has not expired, returns false.\n            if (block.timestamp < rewardsTokensMap[rewardsTokensArr[i]].periodFinish) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /** @dev Withdrawing/removing the staked tokens back to the user's wallet\n     * @param amount The amount to be withdrawn\n     */\n    function withdraw(uint256 amount)\n        public\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        require(amount != 0, \"Cannot withdraw 0\");\n        _totalStakesAmount = _totalStakesAmount.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    /** @dev Claiming earned rewards up to now\n     */\n    function getReward()\n        public\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        uint256 tokenArrLength = rewardsTokensArr.length;\n        for (uint i = 0; i < tokenArrLength; i++) {\n            address token = rewardsTokensArr[i];\n            RewardInfo storage ri = rewardsTokensMap[token];\n\n            uint256 reward = ri.rewards[msg.sender];\n            if (reward != 0) {\n                ri.rewards[msg.sender] = 0;\n                IERC20Detailed(token).safeTransfer(msg.sender, reward);\n                emit RewardPaid(msg.sender, token, reward);\n            }\n        }\n    }\n}\n// SPDX-License-Identifier: MIT\n\n\n\ncontract StakingRewardsFactory is Ownable {\n    using SafeERC20Detailed for IERC20Detailed;\n\n    uint256 public stakingRewardsGenesis;\n\n    /** @dev the staking tokens for which the rewards contract has been deployed\n     */\n    address[] public stakingTokens;\n\n    /** @dev Mapping holding information about a particular Staking Rewards Contract Address by Staking Token\n     */\n    mapping(address => address) public stakingRewardsByStakingToken;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    /** @dev Function called once on deployment time\n     * @param _stakingRewardsGenesis Timestamp after which the staking can start\n     */\n    constructor(\n        uint256 _stakingRewardsGenesis\n    ) public {\n        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n\n        stakingRewardsGenesis = _stakingRewardsGenesis;\n    }\n\n    /* ========== Permissioned FUNCTIONS ========== */\n\n    /** @dev Deploy a staking reward contract for the staking token, and store the reward amount,the reward will be distributed to the staking reward contract no sooner than the genesis\n     * @param _stakingToken The address of the token being staked\n     * @param _rewardsTokens The addresses of the tokens the rewards will be paid in\n     * @param _rewardsAmounts The reward amounts\n     * @param _rewardsDuration Rewards duration in seconds\n     */\n    function deploy(\n        address            _stakingToken,\n        address[] calldata _rewardsTokens,\n        uint256[] calldata _rewardsAmounts,\n        uint256            _rewardsDuration\n    ) external onlyOwner {\n        require(stakingRewardsByStakingToken[_stakingToken] == address(0), 'StakingRewardsFactory::deploy: already deployed');\n        require(_rewardsDuration != 0, 'StakingRewardsFactory::deploy:The Duration should be greater than zero');\n        require(_rewardsTokens.length != 0, 'StakingRewardsFactory::deploy: RewardsTokens and RewardsAmounts arrays could not be empty');\n        require(_rewardsTokens.length == _rewardsAmounts.length, 'StakingRewardsFactory::deploy: RewardsTokens and RewardsAmounts should have a matching sizes');\n\n        for (uint256 i = 0; i < _rewardsTokens.length; i++) {\n            require(_rewardsTokens[i] != address(0), 'StakingRewardsFactory::deploy: Reward token address could not be invalid');\n            require(_rewardsAmounts[i] != 0, 'StakingRewardsFactory::deploy: Reward must be greater than zero');\n        }\n\n        stakingRewardsByStakingToken[_stakingToken] = address(new StakingRewards(_rewardsTokens, _rewardsAmounts, _stakingToken, _rewardsDuration));\n\n        stakingTokens.push(_stakingToken);\n    }\n\n    /** @dev Function that will extend the rewards period, but not change the reward rate, for a given staking contract.\n     * @param stakingToken The address of the token being staked\n     * @param extendRewardToken The address of the token the rewards will be paid in\n     * @param extendRewardAmount The additional reward amount\n     */\n    function extendRewardPeriod(\n        address stakingToken,\n        address extendRewardToken,\n        uint256 extendRewardAmount\n    )\n        external\n        onlyOwner\n    {\n        require(extendRewardAmount != 0, 'StakingRewardsFactory::extendRewardPeriod: Reward must be greater than zero');\n\n        address sr = stakingRewardsByStakingToken[stakingToken]; // StakingRewards\n\n        require(sr != address(0), 'StakingRewardsFactory::extendRewardPeriod: not deployed');\n        require(hasStakingStarted(sr), 'StakingRewardsFactory::extendRewardPeriod: Staking has not started');\n\n        (uint256 rate, , , ,) = StakingRewards(sr).rewardsTokensMap(extendRewardToken);\n\n        require(rate != 0, 'StakingRewardsFactory::extendRewardPeriod: Token for extending reward is not known'); // its expected that valid token should have a valid rate\n\n        IERC20Detailed(extendRewardToken).safeApprove(sr, extendRewardAmount);\n        StakingRewards(sr).addRewards(extendRewardToken, extendRewardAmount);\n    }\n\n    /* ========== Permissionless FUNCTIONS ========== */\n\n    /** @dev Calls startStakings for all staking tokens.\n     */\n    function startStakings() external {\n        require(stakingTokens.length != 0, 'StakingRewardsFactory::startStakings: called before any deploys');\n\n        for (uint256 i = 0; i < stakingTokens.length; i++) {\n            startStaking(stakingTokens[i]);\n        }\n    }\n\n    /** @dev Function to determine whether the staking and rewards distribution has stared for a given StakingRewards contract\n     * @param stakingRewards The address of the staking rewards contract\n     */\n    function hasStakingStarted(address stakingRewards)\n        public\n        view\n        returns (bool)\n    {\n        return StakingRewards(stakingRewards).hasPeriodStarted();\n    }\n\n    /** @dev Starts the staking and rewards distribution for a given staking token. This is a fallback in case the startStakings() costs too much gas to call for all contracts\n     * @param stakingToken The address of the token being staked\n     */\n    function startStaking(address stakingToken) public {\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::startStaking: not ready');\n\n        address sr = stakingRewardsByStakingToken[stakingToken]; // StakingRewards\n\n        StakingRewards srInstance = StakingRewards(sr);\n        require(sr != address(0), 'StakingRewardsFactory::startStaking: not deployed');\n        require(!hasStakingStarted(sr), 'StakingRewardsFactory::startStaking: Staking has started');\n\n        uint256 rtsSize = srInstance.getRewardsTokensCount();\n        for (uint256 i = 0; i < rtsSize; i++) {\n            require(\n                IERC20Detailed(srInstance.rewardsTokensArr(i))\n                    .transfer(sr, srInstance.rewardsAmountsArr(i)),\n                'StakingRewardsFactory::startStaking: transfer failed'\n            );\n        }\n\n        srInstance.start();\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingRewardsGenesis\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardsTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"extendRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extendRewardAmount\",\"type\":\"uint256\"}],\"name\":\"extendRewardPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"}],\"name\":\"hasStakingStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewardsByStakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRewardsGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"startStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startStakings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingRewardsFactory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005fa5b6ad","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}