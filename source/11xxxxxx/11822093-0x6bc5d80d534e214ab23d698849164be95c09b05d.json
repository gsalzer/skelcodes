{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\modules\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'SafeMath: addition overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'SafeMath: substraction underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: multiplication overflow');\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\SafeInt256.sol\r\n\r\npragma solidity =0.5.16;\r\nlibrary SafeInt256 {\r\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require(((z = x + y) >= x) == (y >= 0), 'SafeInt256: addition overflow');\r\n    }\r\n\r\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require(((z = x - y) <= x) == (y >= 0), 'SafeInt256: substraction underflow');\r\n    }\r\n\r\n    function mul(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'SafeInt256: multiplication overflow');\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Halt.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract Halt is Ownable {\r\n    \r\n    bool private halted = false; \r\n    \r\n    modifier notHalted() {\r\n        require(!halted,\"This contract is halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(halted,\"This contract is not halted\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice function Emergency situation that requires \r\n    /// @notice contribution period to stop or not.\r\n    function setHalt(bool halt) \r\n        public \r\n        onlyOwner\r\n    {\r\n        halted = halt;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\whiteList.sol\r\n\r\npragma solidity =0.5.16;\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible uint32.\r\n     */\r\nlibrary whiteListUint32 {\r\n    /**\r\n     * @dev add uint32 into white list.\r\n     * @param whiteList the storage whiteList.\r\n     * @param temp input value\r\n     */\r\n\r\n    function addWhiteListUint32(uint32[] storage whiteList,uint32 temp) internal{\r\n        if (!isEligibleUint32(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    /**\r\n     * @dev remove uint32 from whitelist.\r\n     */\r\n    function removeWhiteListUint32(uint32[] storage whiteList,uint32 temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible uint256.\r\n     */\r\nlibrary whiteListUint256 {\r\n    // add whiteList\r\n    function addWhiteListUint256(uint256[] storage whiteList,uint256 temp) internal{\r\n        if (!isEligibleUint256(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListUint256(uint256[] storage whiteList,uint256 temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible address.\r\n     */\r\nlibrary whiteListAddress {\r\n    // add whiteList\r\n    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\r\n        if (!isEligibleAddress(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexAddress(address[] memory whiteList,address temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\AddressWhiteList.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n    /**\r\n     * @dev Implementation of a whitelist filters a eligible address.\r\n     */\r\ncontract AddressWhiteList is Halt {\r\n\r\n    using whiteListAddress for address[];\r\n    uint256 constant internal allPermission = 0xffffffff;\r\n    uint256 constant internal allowBuyOptions = 1;\r\n    uint256 constant internal allowSellOptions = 1<<1;\r\n    uint256 constant internal allowExerciseOptions = 1<<2;\r\n    uint256 constant internal allowAddCollateral = 1<<3;\r\n    uint256 constant internal allowRedeemCollateral = 1<<4;\r\n    // The eligible adress list\r\n    address[] internal whiteList;\r\n    mapping(address => uint256) internal addressPermission;\r\n    /**\r\n     * @dev Implementation of add an eligible address into the whitelist.\r\n     * @param addAddress new eligible address.\r\n     */\r\n    function addWhiteList(address addAddress)public onlyOwner{\r\n        whiteList.addWhiteListAddress(addAddress);\r\n        addressPermission[addAddress] = allPermission;\r\n    }\r\n    function modifyPermission(address addAddress,uint256 permission)public onlyOwner{\r\n        addressPermission[addAddress] = permission;\r\n    }\r\n    /**\r\n     * @dev Implementation of revoke an invalid address from the whitelist.\r\n     * @param removeAddress revoked address.\r\n     */\r\n    function removeWhiteList(address removeAddress)public onlyOwner returns (bool){\r\n        addressPermission[removeAddress] = 0;\r\n        return whiteList.removeWhiteListAddress(removeAddress);\r\n    }\r\n    /**\r\n     * @dev Implementation of getting the eligible whitelist.\r\n     */\r\n    function getWhiteList()public view returns (address[] memory){\r\n        return whiteList;\r\n    }\r\n    /**\r\n     * @dev Implementation of testing whether the input address is eligible.\r\n     * @param tmpAddress input address for testing.\r\n     */    \r\n    function isEligibleAddress(address tmpAddress) public view returns (bool){\r\n        return whiteList.isEligibleAddress(tmpAddress);\r\n    }\r\n    function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){\r\n        return  (addressPermission[tmpAddress]&state) == state;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\ReentrancyGuard.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\OptionsPool\\IOptionsPool.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IOptionsPool {\r\n//    function getOptionBalances(address user) external view returns(uint256[]);\r\n\r\n    function getExpirationList()external view returns (uint32[] memory);\r\n    function createOptions(address from,address settlement,uint256 type_ly_expiration,\r\n        uint128 strikePrice,uint128 underlyingPrice,uint128 amount,uint128 settlePrice) external returns(uint256);\r\n    function setSharedState(uint256 newFirstOption,int256[] calldata latestNetWorth,address[] calldata whiteList) external;\r\n    function getAllTotalOccupiedCollateral() external view returns (uint256,uint256);\r\n    function getCallTotalOccupiedCollateral() external view returns (uint256);\r\n    function getPutTotalOccupiedCollateral() external view returns (uint256);\r\n    function getTotalOccupiedCollateral() external view returns (uint256);\r\n//    function buyOptionCheck(uint32 expiration,uint32 underlying)external view;\r\n    function burnOptions(address from,uint256 id,uint256 amount,uint256 optionPrice)external;\r\n    function getOptionsById(uint256 optionsId)external view returns(uint256,address,uint8,uint32,uint256,uint256,uint256);\r\n    function getExerciseWorth(uint256 optionsId,uint256 amount)external view returns(uint256);\r\n    function calculatePhaseOptionsFall(uint256 lastOption,uint256 begin,uint256 end,address[] calldata whiteList) external view returns(int256[] memory);\r\n    function getOptionInfoLength()external view returns (uint256);\r\n    function getNetWrothCalInfo(address[] calldata whiteList)external view returns(uint256,int256[] memory);\r\n    function calRangeSharedPayment(uint256 lastOption,uint256 begin,uint256 end,address[] calldata whiteList)external view returns(int256[] memory,uint256[] memory,uint256);\r\n    function getNetWrothLatestWorth(address settlement)external view returns(int256);\r\n    function getBurnedFullPay(uint256 optionID,uint256 amount) external view returns(address,uint256);\r\n\r\n}\r\ncontract ImportOptionsPool is Ownable{\r\n    IOptionsPool internal _optionsPool;\r\n    function getOptionsPoolAddress() public view returns(address){\r\n        return address(_optionsPool);\r\n    }\r\n    function setOptionsPoolAddress(address optionsPool)public onlyOwner{\r\n        _optionsPool = IOptionsPool(optionsPool);\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IFNXOracle.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IFNXOracle {\r\n    /**\r\n  * @notice retrieves price of an asset\r\n  * @dev function to get price for an asset\r\n  * @param asset Asset for which to get the price\r\n  * @return uint mantissa of asset price (scaled by 1e8) or zero if unset or contract paused\r\n  */\r\n    function getPrice(address asset) external view returns (uint256);\r\n    function getUnderlyingPrice(uint256 cToken) external view returns (uint256);\r\n    function getPrices(uint256[] calldata assets) external view returns (uint256[]memory);\r\n    function getAssetAndUnderlyingPrice(address asset,uint256 underlying) external view returns (uint256,uint256);\r\n//    function getSellOptionsPrice(address oToken) external view returns (uint256);\r\n//    function getBuyOptionsPrice(address oToken) external view returns (uint256);\r\n}\r\ncontract ImportOracle is Ownable{\r\n    IFNXOracle internal _oracle;\r\n    function oraclegetPrices(uint256[] memory assets) internal view returns (uint256[]memory){\r\n        uint256[] memory prices = _oracle.getPrices(assets);\r\n        uint256 len = assets.length;\r\n        for (uint i=0;i<len;i++){\r\n        require(prices[i] >= 100 && prices[i] <= 1e30);\r\n        }\r\n        return prices;\r\n    }\r\n    function oraclePrice(address asset) internal view returns (uint256){\r\n        uint256 price = _oracle.getPrice(asset);\r\n        require(price >= 100 && price <= 1e30);\r\n        return price;\r\n    }\r\n    function oracleUnderlyingPrice(uint256 cToken) internal view returns (uint256){\r\n        uint256 price = _oracle.getUnderlyingPrice(cToken);\r\n        require(price >= 100 && price <= 1e30);\r\n        return price;\r\n    }\r\n    function oracleAssetAndUnderlyingPrice(address asset,uint256 cToken) internal view returns (uint256,uint256){\r\n        (uint256 price1,uint256 price2) = _oracle.getAssetAndUnderlyingPrice(asset,cToken);\r\n        require(price1 >= 100 && price1 <= 1e30);\r\n        require(price2 >= 100 && price2 <= 1e30);\r\n        return (price1,price2);\r\n    }\r\n    function getOracleAddress() public view returns(address){\r\n        return address(_oracle);\r\n    }\r\n    function setOracleAddress(address oracle)public onlyOwner{\r\n        _oracle = IFNXOracle(oracle);\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IOptionsPrice.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IOptionsPrice {\r\n    function getOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration,uint32 underlying,uint8 optType)external view returns (uint256);\r\n    function getOptionsPrice_iv(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\r\n                uint256 ivNumerator,uint8 optType)external view returns (uint256);\r\n    function calOptionsPriceRatio(uint256 selfOccupied,uint256 totalOccupied,uint256 totalCollateral) external view returns (uint256);\r\n}\r\ncontract ImportOptionsPrice is Ownable{\r\n    IOptionsPrice internal _optionsPrice;\r\n    function getOptionsPriceAddress() public view returns(address){\r\n        return address(_optionsPrice);\r\n    }\r\n    function setOptionsPriceAddress(address optionsPrice)public onlyOwner{\r\n        _optionsPrice = IOptionsPrice(optionsPrice);\r\n    }\r\n}\r\n\r\n// File: contracts\\CollateralPool\\ICollateralPool.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface ICollateralPool {\r\n    function getFeeRateAll()external view returns (uint32[] memory);\r\n    function getUserPayingUsd(address user)external view returns (uint256);\r\n    function getUserInputCollateral(address user,address collateral)external view returns (uint256);\r\n    //function getNetWorthBalance(address collateral)external view returns (int256);\r\n    function getCollateralBalance(address collateral)external view returns (uint256);\r\n\r\n    //add\r\n    function addUserPayingUsd(address user,uint256 amount)external;\r\n    function addUserInputCollateral(address user,address collateral,uint256 amount)external;\r\n    function addNetWorthBalance(address collateral,int256 amount)external;\r\n    function addCollateralBalance(address collateral,uint256 amount)external;\r\n    //sub\r\n    function subUserPayingUsd(address user,uint256 amount)external;\r\n    function subUserInputCollateral(address user,address collateral,uint256 amount)external;\r\n    function subNetWorthBalance(address collateral,int256 amount)external;\r\n    function subCollateralBalance(address collateral,uint256 amount)external;\r\n        //set\r\n    function setUserPayingUsd(address user,uint256 amount)external;\r\n    function setUserInputCollateral(address user,address collateral,uint256 amount)external;\r\n    function setNetWorthBalance(address collateral,int256 amount)external;\r\n    function setCollateralBalance(address collateral,uint256 amount)external;\r\n    function transferPaybackAndFee(address recieptor,address settlement,uint256 payback,uint256 feeType)external;\r\n\r\n    function buyOptionsPayfor(address payable recieptor,address settlement,uint256 settlementAmount,uint256 allPay)external;\r\n    function transferPayback(address recieptor,address settlement,uint256 payback)external;\r\n    function transferPaybackBalances(address account,uint256 redeemWorth,address[] calldata tmpWhiteList,uint256[] calldata colBalances,\r\n        uint256[] calldata PremiumBalances,uint256[] calldata prices)external;\r\n    function getCollateralAndPremiumBalances(address account,uint256 userTotalWorth,address[] calldata tmpWhiteList,\r\n        uint256[] calldata _RealBalances,uint256[] calldata prices) external view returns(uint256[] memory,uint256[] memory);\r\n    function addTransactionFee(address collateral,uint256 amount,uint256 feeType)external returns (uint256);\r\n\r\n    function getAllRealBalance(address[] calldata whiteList)external view returns(int256[] memory);\r\n    function getRealBalance(address settlement)external view returns(int256);\r\n    function getNetWorthBalance(address settlement)external view returns(uint256);\r\n}\r\ncontract ImportCollateralPool is Ownable{\r\n    ICollateralPool internal _collateralPool;\r\n    function getCollateralPoolAddress() public view returns(address){\r\n        return address(_collateralPool);\r\n    }\r\n    function setCollateralPoolAddress(address collateralPool)public onlyOwner{\r\n        _collateralPool = ICollateralPool(collateralPool);\r\n    }\r\n}\r\n\r\n// File: contracts\\FPTCoin\\IFPTCoin.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IFPTCoin {\r\n    function lockedBalanceOf(address account) external view returns (uint256);\r\n    function lockedWorthOf(address account) external view returns (uint256);\r\n    function getLockedBalance(address account) external view returns (uint256,uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function mint(address account, uint256 amount) external;\r\n    function burn(address account, uint256 amount) external;\r\n    function addlockBalance(address account, uint256 amount,uint256 lockedWorth)external; \r\n    function getTotalLockedWorth() external view returns (uint256);\r\n    function addMinerBalance(address account,uint256 amount) external;\r\n    function redeemLockedCollateral(address account,uint256 tokenAmount,uint256 leftCollateral)external returns (uint256,uint256);\r\n}\r\ncontract ImportIFPTCoin is Ownable{\r\n    IFPTCoin internal _FPTCoin;\r\n    function getFPTCoinAddress() public view returns(address){\r\n        return address(_FPTCoin);\r\n    }\r\n    function setFPTCoinAddress(address FPTCoinAddr)public onlyOwner{\r\n        _FPTCoin = IFPTCoin(FPTCoinAddr);\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\ImputRange.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract ImputRange is Ownable {\r\n    \r\n    //The maximum input amount limit.\r\n    uint256 private maxAmount = 1e30;\r\n    //The minimum input amount limit.\r\n    uint256 private minAmount = 1e2;\r\n    \r\n    modifier InRange(uint256 amount) {\r\n        require(maxAmount>=amount && minAmount<=amount,\"input amount is out of input amount range\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Determine whether the input amount is within the valid range\r\n     * @param Amount Test value which is user input\r\n     */\r\n    function isInputAmountInRange(uint256 Amount)public view returns (bool){\r\n        return(maxAmount>=Amount && minAmount<=Amount);\r\n    }\r\n    /*\r\n    function isInputAmountSmaller(uint256 Amount)public view returns (bool){\r\n        return maxAmount>=amount;\r\n    }\r\n    function isInputAmountLarger(uint256 Amount)public view returns (bool){\r\n        return minAmount<=amount;\r\n    }\r\n    */\r\n    modifier Smaller(uint256 amount) {\r\n        require(maxAmount>=amount,\"input amount is larger than maximium\");\r\n        _;\r\n    }\r\n    modifier Larger(uint256 amount) {\r\n        require(minAmount<=amount,\"input amount is smaller than maximium\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev get the valid range of input amount\r\n     */\r\n    function getInputAmountRange() public view returns(uint256,uint256) {\r\n        return (minAmount,maxAmount);\r\n    }\r\n    /**\r\n     * @dev set the valid range of input amount\r\n     * @param _minAmount the minimum input amount limit\r\n     * @param _maxAmount the maximum input amount limit\r\n     */\r\n    function setInputAmountRange(uint256 _minAmount,uint256 _maxAmount) public onlyOwner{\r\n        minAmount = _minAmount;\r\n        maxAmount = _maxAmount;\r\n    }        \r\n}\r\n\r\n// File: contracts\\modules\\Allowances.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * each operator can be granted exclusive access to specific functions.\r\n *\r\n */\r\ncontract Allowances is Ownable {\r\n    mapping (address => uint256) internal allowances;\r\n    bool internal bValid = false;\r\n    /**\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public onlyOwner{\r\n        allowances[spender] = amount;\r\n    }\r\n    function allowance(address spender) public view returns (uint256) {\r\n        return allowances[spender];\r\n    }\r\n    function setValid(bool _bValid) public onlyOwner{\r\n        bValid = _bValid;\r\n    }\r\n    function checkAllowance(address spender, uint256 amount) public view returns(bool){\r\n        return (!bValid) || (allowances[spender] >= amount);\r\n    }\r\n    modifier sufficientAllowance(address spender, uint256 amount){\r\n        require((!bValid) || (allowances[spender] >= amount),\"Allowances : user's allowance is unsufficient!\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20\\IERC20.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\OptionsManager\\ManagerData.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title collateral calculate module\r\n * @dev A smart-contract which has operations of collateral and methods of calculate collateral occupation.\r\n *\r\n */\r\ncontract ManagerData is ReentrancyGuard,ImputRange,AddressWhiteList,Allowances,ImportIFPTCoin,\r\n                ImportOracle,ImportOptionsPool,ImportCollateralPool,ImportOptionsPrice {\r\n    // The minimum collateral rate for options. This value is thousandths.\r\n    mapping (address=>uint256) collateralRate;\r\n//    uint256 private collateralRate = 5000;\r\n    /**\r\n     * @dev Emitted when `from` added `amount` collateral and minted `tokenAmount` FPTCoin.\r\n     */\r\n    event AddCollateral(address indexed from,address indexed collateral,uint256 amount,uint256 tokenAmount);\r\n    /**\r\n     * @dev Emitted when `from` redeemed `allRedeem` collateral.\r\n     */\r\n    event RedeemCollateral(address indexed from,address collateral,uint256 allRedeem);\r\n    event DebugEvent(uint256 id,uint256 value1,uint256 value2);\r\n        /**\r\n    * @dev input price valid range rate, thousandths.\r\n    * the input price must greater than current price * minPriceRate /1000\r\n    *       and less  than current price * maxPriceRate /1000 \r\n    * maxPriceRate is the maximum limit of the price valid range rate\r\n    * maxPriceRate is the minimum limit of the price valid range rage\r\n    */   \r\n    uint256 internal maxPriceRate = 1500;\r\n    uint256 internal minPriceRate = 500;\r\n    /**\r\n     * @dev Emitted when `from` buy `optionAmount` option and create new option.\r\n     * @param from user's account\r\n     * @param settlement user's input settlement paid for buy new option.\r\n     * @param optionPrice option's paid price\r\n     * @param settlementAmount settement cost\r\n     * @param optionAmount mint option token amount.\r\n     */  \r\n    event BuyOption(address indexed from,address indexed settlement,uint256 optionPrice,uint256 settlementAmount,uint256 optionAmount);\r\n    /**\r\n     * @dev Emitted when `from` sell `amount` option whose id is `optionId` and received sellValue,priced in usd.\r\n     */  \r\n    event SellOption(address indexed from,uint256 indexed optionId,uint256 amount,uint256 sellValue);\r\n    /**\r\n     * @dev Emitted when `from` exercise `amount` option whose id is `optionId` and received sellValue,priced in usd.\r\n     */  \r\n    event ExerciseOption(address indexed from,uint256 indexed optionId,uint256 amount,uint256 sellValue);\r\n}\r\n\r\n// File: contracts\\modules\\Address.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(value )(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20\\safeErc20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\OptionsManager\\CollateralCal.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title collateral calculate module\r\n * @dev A smart-contract which has operations of collateral and methods of calculate collateral occupation.\r\n *\r\n */\r\ncontract CollateralCal is ManagerData {\r\n    using SafeMath for uint256;\r\n    using SafeInt256 for int256;\r\n\r\n    /**\r\n     * @dev  The foundation owner want to set the minimum collateral occupation rate.\r\n     * @param collateral collateral coin address\r\n     * @param colRate The thousandths of the minimum collateral occupation rate.\r\n     */\r\n    function setCollateralRate(address collateral,uint256 colRate) public onlyOwner {\r\n        addWhiteList(collateral);\r\n        collateralRate[collateral] = colRate;\r\n//        collateralRate = colRate;\r\n\r\n    }\r\n    /**\r\n     * @dev Get the minimum collateral occupation rate.\r\n     */\r\n    function getCollateralRate(address collateral)public view returns (uint256) {\r\n        return collateralRate[collateral];\r\n    }\r\n    /**\r\n     * @dev Retrieve user's cost of collateral, priced in USD.\r\n     * @param user input retrieved account \r\n     */\r\n    function getUserPayingUsd(address user)public view returns (uint256){\r\n        return _collateralPool.getUserPayingUsd(user);\r\n        //userCollateralPaying[user];\r\n    }\r\n    /**\r\n     * @dev Retrieve user's amount of the specified collateral.\r\n     * @param user input retrieved account \r\n     * @param collateral input retrieved collateral coin address \r\n     */\r\n    function userInputCollateral(address user,address collateral)public view returns (uint256){\r\n        return _collateralPool.getUserInputCollateral(user,collateral);\r\n        //return userInputCollateral[user][collateral];\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve user's current total worth, priced in USD.\r\n     * @param account input retrieve account\r\n     */\r\n    function getUserTotalWorth(address account)public view returns (uint256){\r\n        return getTokenNetworth().mul(_FPTCoin.balanceOf(account)).add(_FPTCoin.lockedWorthOf(account));\r\n    }\r\n    /**\r\n     * @dev Retrieve FPTCoin's net worth, priced in USD.\r\n     */\r\n    function getTokenNetworth() public view returns (uint256){\r\n        uint256 _totalSupply = _FPTCoin.totalSupply();\r\n        if (_totalSupply == 0){\r\n            return 1e8;\r\n        }\r\n        uint256 netWorth = getUnlockedCollateral()/_totalSupply;\r\n        return netWorth>100 ? netWorth : 100;\r\n    }\r\n    /**\r\n     * @dev Deposit collateral in this pool from user.\r\n     * @param collateral The collateral coin address which is in whitelist.\r\n     * @param amount the amount of collateral to deposit.\r\n     */\r\n    function addCollateral(address collateral,uint256 amount) nonReentrant notHalted  public payable {\r\n        amount = getPayableAmount(collateral,amount);\r\n        uint256 fee = _collateralPool.addTransactionFee(collateral,amount,3);\r\n        amount = amount-fee;\r\n        uint256 price = oraclePrice(collateral);\r\n        uint256 userPaying = price*amount;\r\n        require(checkAllowance(msg.sender,(_collateralPool.getUserPayingUsd(msg.sender)+userPaying)/1e8),\r\n            \"Allowances : user's allowance is unsufficient!\");\r\n        uint256 mintAmount = userPaying/getTokenNetworth();\r\n        _collateralPool.addUserPayingUsd(msg.sender,userPaying);\r\n        _collateralPool.addUserInputCollateral(msg.sender,collateral,amount);\r\n        emit AddCollateral(msg.sender,collateral,amount,mintAmount);\r\n        _FPTCoin.mint(msg.sender,mintAmount);\r\n    }\r\n    /**\r\n     * @dev redeem collateral from this pool, user can input the prioritized collateral,he will get this coin,\r\n     * if this coin is unsufficient, he will get others collateral which in whitelist.\r\n     * @param tokenAmount the amount of FPTCoin want to redeem.\r\n     * @param collateral The prioritized collateral coin address.\r\n     */\r\n    function redeemCollateral(uint256 tokenAmount,address collateral) nonReentrant notHalted InRange(tokenAmount) public {\r\n        require(checkAddressPermission(collateral,allowRedeemCollateral) , \"settlement is unsupported token\");\r\n        uint256 lockedAmount = _FPTCoin.lockedBalanceOf(msg.sender);\r\n        require(_FPTCoin.balanceOf(msg.sender)+lockedAmount>=tokenAmount,\"SCoin balance is insufficient!\");\r\n        uint256 userTotalWorth = getUserTotalWorth(msg.sender);\r\n        uint256 leftCollateral = getLeftCollateral();\r\n        (uint256 burnAmount,uint256 redeemWorth) = _FPTCoin.redeemLockedCollateral(msg.sender,tokenAmount,leftCollateral);\r\n        tokenAmount -= burnAmount;\r\n        burnAmount = 0;\r\n        if (tokenAmount > 0){\r\n            leftCollateral -= redeemWorth;\r\n            \r\n            if (lockedAmount > 0){\r\n                tokenAmount = tokenAmount > lockedAmount ? tokenAmount - lockedAmount : 0;\r\n            }\r\n            (uint256 newRedeem,uint256 newWorth) = _redeemCollateral(tokenAmount,leftCollateral);\r\n            if(newRedeem>0){\r\n                burnAmount = newRedeem;\r\n                redeemWorth += newWorth;\r\n            }\r\n        }\r\n        _redeemCollateralWorth(collateral,redeemWorth,userTotalWorth);\r\n        if (burnAmount>0){\r\n            _FPTCoin.burn(msg.sender, burnAmount);\r\n        }\r\n    }\r\n    /**\r\n     * @dev The subfunction of redeem collateral.\r\n     * @param leftAmount the left amount of FPTCoin want to redeem.\r\n     * @param leftCollateral The left collateral which can be redeemed, priced in USD.\r\n     */\r\n    function _redeemCollateral(uint256 leftAmount,uint256 leftCollateral)internal returns (uint256,uint256){\r\n        uint256 tokenNetWorth = getTokenNetworth();\r\n        uint256 leftWorth = leftAmount*tokenNetWorth;        \r\n        if (leftWorth > leftCollateral){\r\n            uint256 newRedeem = leftCollateral/tokenNetWorth;\r\n            uint256 newWorth = newRedeem*tokenNetWorth;\r\n            uint256 locked = leftAmount - newRedeem;\r\n            _FPTCoin.addlockBalance(msg.sender,locked,locked*tokenNetWorth);\r\n            return (newRedeem,newWorth);\r\n        }\r\n        return (leftAmount,leftWorth);\r\n    }\r\n    /**\r\n     * @dev The auxiliary function of collateral calculation.\r\n     * @param collateral the prioritized collateral which user input.\r\n     * @return the collateral whitelist, in which the prioritized collateral is at the front.\r\n     */\r\n    function getTempWhiteList(address collateral) internal view returns (address[] memory) {\r\n        address[] memory tmpWhiteList = whiteList;\r\n        uint256 index = whiteListAddress._getEligibleIndexAddress(tmpWhiteList,collateral);\r\n        if (index != 0){\r\n            tmpWhiteList[index] = tmpWhiteList[0];\r\n            tmpWhiteList[0] = collateral;\r\n        }\r\n        return tmpWhiteList;\r\n    }\r\n    /**\r\n     * @dev The subfunction of redeem collateral. Calculate all redeem count and tranfer.\r\n     * @param collateral the prioritized collateral which user input.\r\n     * @param redeemWorth user redeem worth, priced in USD.\r\n     * @param userTotalWorth user total worth, priced in USD.\r\n     */\r\n    function _redeemCollateralWorth(address collateral,uint256 redeemWorth,uint256 userTotalWorth) internal {\r\n        if (redeemWorth == 0){\r\n            return;\r\n        }\r\n        emit RedeemCollateral(msg.sender,collateral,redeemWorth);\r\n        address[] memory tmpWhiteList = getTempWhiteList(collateral);\r\n        (uint256[] memory colBalances,uint256[] memory PremiumBalances,uint256[] memory prices) = \r\n                _getCollateralAndPremiumBalances(msg.sender,userTotalWorth,tmpWhiteList);\r\n        _collateralPool.transferPaybackBalances(msg.sender,redeemWorth,tmpWhiteList,colBalances,\r\n                PremiumBalances,prices);\r\n    }\r\n    /**\r\n     * @dev Retrieve user's collateral worth in all collateral coin. \r\n     * If user want to redeem all his collateral,and the vacant collateral is sufficient,\r\n     * He can redeem each collateral amount in return list.\r\n     * @param account the retrieve user's account;\r\n     */\r\n    function calCollateralWorth(address account)public view returns(uint256[] memory){\r\n        uint256 worth = getUserTotalWorth(account);\r\n        (uint256[] memory colBalances,uint256[] memory PremiumBalances,) = \r\n        _getCollateralAndPremiumBalances(account,worth,whiteList);\r\n        uint256 whiteLen = whiteList.length;\r\n        for (uint256 i=0; i<whiteLen;i++){\r\n            colBalances[i] = colBalances[i].add(PremiumBalances[i]);\r\n        }\r\n        return colBalances;\r\n    }\r\n    /**\r\n     * @dev The auxiliary function for redeem collateral calculation. \r\n     * @param account the retrieve user's account;\r\n     * @param userTotalWorth user's total worth, priced in USD.\r\n     * @param tmpWhiteList the collateral white list.\r\n     * @return user's total worth in each collateral, priced in USD.\r\n     */\r\n    function _getCollateralAndPremiumBalances(address account,uint256 userTotalWorth,address[] memory tmpWhiteList) internal view returns(uint256[] memory,uint256[] memory,uint256[] memory){\r\n        uint256[] memory prices = new uint256[](tmpWhiteList.length);\r\n        uint256[] memory netWorthBalances = new uint256[](tmpWhiteList.length);\r\n        for (uint256 i=0; i<tmpWhiteList.length;i++){\r\n            if (checkAddressPermission(tmpWhiteList[i],0x0002)){\r\n                netWorthBalances[i] = getNetWorthBalance(tmpWhiteList[i]);\r\n            }\r\n            prices[i] = oraclePrice(tmpWhiteList[i]);\r\n        }\r\n        (uint256[] memory colBalances,uint256[] memory PremiumBalances) = _collateralPool.getCollateralAndPremiumBalances(account,userTotalWorth,tmpWhiteList,\r\n                netWorthBalances,prices);\r\n        return (colBalances,PremiumBalances,prices);\r\n    } \r\n\r\n    /**\r\n     * @dev Retrieve the occupied collateral worth, multiplied by minimum collateral rate, priced in USD. \r\n     */\r\n    function getOccupiedCollateral() public view returns(uint256){\r\n        uint256 totalOccupied = _optionsPool.getTotalOccupiedCollateral();\r\n        return calculateCollateral(totalOccupied);\r\n    }\r\n    /**\r\n     * @dev Retrieve the available collateral worth, the worth of collateral which can used for buy options, priced in USD. \r\n     */\r\n    function getAvailableCollateral()public view returns(uint256){\r\n        return safeSubCollateral(getUnlockedCollateral(),getOccupiedCollateral());\r\n    }\r\n    /**\r\n     * @dev Retrieve the left collateral worth, the worth of collateral which can used for redeem collateral, priced in USD. \r\n     */\r\n    function getLeftCollateral()public view returns(uint256){\r\n        return safeSubCollateral(getTotalCollateral(),getOccupiedCollateral());\r\n    }\r\n    /**\r\n     * @dev Retrieve the unlocked collateral worth, the worth of collateral which currently used for options, priced in USD. \r\n     */\r\n    function getUnlockedCollateral()public view returns(uint256){\r\n        return safeSubCollateral(getTotalCollateral(),_FPTCoin.getTotalLockedWorth());\r\n    }\r\n    /**\r\n     * @dev The auxiliary function for collateral worth subtraction. \r\n     */\r\n    function safeSubCollateral(uint256 allCollateral,uint256 subCollateral)internal pure returns(uint256){\r\n        return allCollateral > subCollateral ? allCollateral - subCollateral : 0;\r\n    }\r\n    /**\r\n     * @dev The auxiliary function for calculate option occupied. \r\n     * @param strikePrice option's strike price\r\n     * @param underlyingPrice option's underlying price\r\n     * @param amount option's amount\r\n     * @param optType option's type, 0 for call, 1 for put.\r\n     */\r\n    function calOptionsOccupied(uint256 strikePrice,uint256 underlyingPrice,uint256 amount,uint8 optType)public view returns(uint256){\r\n        uint256 totalOccupied = 0;\r\n        if ((optType == 0) == (strikePrice>underlyingPrice)){ // call\r\n            totalOccupied = strikePrice*amount;\r\n        } else {\r\n            totalOccupied = underlyingPrice*amount;\r\n        }\r\n        return calculateCollateral(totalOccupied);\r\n    }\r\n    /**\r\n     * @dev Retrieve the total collateral worth, priced in USD. \r\n     */\r\n    function getTotalCollateral()public view returns(uint256){\r\n        int256 totalNum = 0;\r\n        uint whiteListLen = whiteList.length;\r\n        for (uint256 i=0;i<whiteListLen;i++){\r\n            address addr = whiteList[i];\r\n            int256 price = int256(oraclePrice(addr));\r\n            int256 netWorth = _collateralPool.getRealBalance(addr);\r\n            if (netWorth != 0){\r\n                totalNum = totalNum.add(price.mul(netWorth));\r\n            }\r\n        }\r\n        return totalNum>=0 ? uint256(totalNum) : 0;  \r\n    }\r\n    function getAllRealBalance()public view returns(int256[] memory){\r\n        return _collateralPool.getAllRealBalance(whiteList);\r\n    }\r\n    /**\r\n     * @dev Retrieve the balance of collateral, the auxiliary function for the total collateral calculation. \r\n     */\r\n    function getRealBalance(address settlement)public view returns(int256){\r\n        return _collateralPool.getRealBalance(settlement);\r\n    }\r\n    function getNetWorthBalance(address settlement)public view returns(uint256){\r\n        return _collateralPool.getNetWorthBalance(settlement);\r\n    }\r\n    /**\r\n     * @dev the auxiliary function for payback. \r\n     */\r\n    function _paybackWorth(uint256 worth,uint256 feeType) internal {\r\n        uint256 totalPrice = 0;\r\n        uint whiteLen = whiteList.length;\r\n        uint256[] memory balances = new uint256[](whiteLen);\r\n        uint256 i=0;\r\n        for(;i<whiteLen;i++){\r\n            address addr = whiteList[i];\r\n            if (checkAddressPermission(addr,allowSellOptions)){\r\n                uint256 price = oraclePrice(addr);\r\n                balances[i] = getNetWorthBalance(addr);\r\n                //balances[i] = netWorthBalances[addr];\r\n                totalPrice = totalPrice.add(price.mul(balances[i]));\r\n            }\r\n        }\r\n        require(totalPrice>=worth && worth > 0,\"payback settlement is insufficient!\");\r\n        for (i=0;i<whiteLen;i++){\r\n            uint256 _payBack = balances[i].mul(worth)/totalPrice;\r\n            _collateralPool.transferPaybackAndFee(msg.sender,whiteList[i],_payBack,feeType);\r\n            //addr = whiteList[i];\r\n            //netWorthBalances[addr] = balances[i].sub(_payBack);\r\n            //_transferPaybackAndFee(msg.sender,addr,_payBack,feeType);\r\n        } \r\n    }\r\n\r\n    /**\r\n     * @dev the auxiliary function for getting user's transer\r\n     */\r\n    function getPayableAmount(address settlement,uint256 settlementAmount) internal returns (uint256) {\r\n        require(checkAddressPermission(settlement,allowBuyOptions) , \"settlement is unsupported token\");\r\n        if (settlement == address(0)){\r\n            settlementAmount = msg.value;\r\n            address payable poolAddr = address(uint160(address(_collateralPool)));\r\n            poolAddr.transfer(settlementAmount);\r\n        }else if (settlementAmount > 0){\r\n            IERC20 oToken = IERC20(settlement);\r\n            uint256 preBalance = oToken.balanceOf(address(_collateralPool));\r\n            SafeERC20.safeTransferFrom(oToken,msg.sender, address(_collateralPool), settlementAmount);\r\n//            oToken.transferFrom(msg.sender, address(_collateralPool), settlementAmount);\r\n            uint256 afterBalance = oToken.balanceOf(address(_collateralPool));\r\n            require(afterBalance-preBalance==settlementAmount,\"settlement token transfer error!\");\r\n        }\r\n        require(isInputAmountInRange(settlementAmount),\"input amount is out of input amount range\");\r\n        return settlementAmount;\r\n    }\r\n    /**\r\n     * @dev collateral occupation rate calculation\r\n     *      collateral occupation rate = sum(collateral Rate * collateral balance) / sum(collateral balance)\r\n     */\r\n    function getCollateralAndRate()internal view returns (uint256,uint256){\r\n        int256 totalNum = 0;\r\n        uint256 totalCollateral = 0;\r\n        uint256 totalRate = 0;\r\n        uint whiteListLen = whiteList.length;\r\n        for (uint256 i=0;i<whiteListLen;i++){\r\n            address addr = whiteList[i];\r\n            int256 balance = _collateralPool.getRealBalance(addr);\r\n            if (balance != 0){\r\n                balance = balance*(int256(oraclePrice(addr)));\r\n                if (balance > 0 && collateralRate[addr] > 0){\r\n                    totalNum = totalNum.add(balance);\r\n                    totalCollateral = totalCollateral.add(uint256(balance));\r\n                    totalRate = totalRate.add(uint256(balance)/collateralRate[addr]);\r\n                } \r\n            }\r\n        }\r\n        if (totalRate > 0){\r\n            totalRate = totalCollateral/totalRate;\r\n        }else{\r\n            totalRate = 5000;\r\n        }\r\n        return (totalNum>=0 ? uint256(totalNum) : 0,totalRate);  \r\n    }\r\n    /**\r\n     * @dev collateral occupation rate calculation\r\n     *      collateral occupation rate = sum(collateral Rate * collateral balance) / sum(collateral balance)\r\n     */\r\n\r\n    function calculateCollateralRate()public view returns (uint256){\r\n        uint256 totalCollateral = 0;\r\n        uint256 totalRate = 0;\r\n        uint whiteLen = whiteList.length;\r\n        uint256 i=0;\r\n        for(;i<whiteLen;i++){\r\n            address addr = whiteList[i];\r\n            uint256 balance = getNetWorthBalance(addr);\r\n            if (balance > 0 && collateralRate[addr] > 0){\r\n                balance = oraclePrice(addr)*balance;\r\n                totalCollateral = totalCollateral.add(balance);\r\n                totalRate = totalRate.add(balance/collateralRate[addr]);\r\n            }\r\n        }\r\n        if (totalRate > 0){\r\n            return totalCollateral/totalRate;\r\n        }else{\r\n            return 5000;\r\n        }\r\n    }\r\n    /**\r\n     * @dev the auxiliary function for collateral calculation\r\n     */\r\n    function calculateCollateral(uint256 amount)internal view returns (uint256){\r\n        return calculateCollateralRate()*amount/1000;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\tuple64.sol\r\n\r\npragma solidity =0.5.16;\r\nlibrary tuple64 {\r\n    // add whiteList\r\n    function getValue0(uint256 input) internal pure returns (uint256){\r\n        return uint256(uint64(input));\r\n    }\r\n    function getValue1(uint256 input) internal pure returns (uint256){\r\n        return uint256(uint64(input>>64));\r\n    }\r\n    function getValue2(uint256 input) internal pure returns (uint256){\r\n        return uint256(uint64(input>>128));\r\n    }\r\n    function getValue3(uint256 input) internal pure returns (uint256){\r\n        return uint256(uint64(input>>192));\r\n    }\r\n    function getTuple(uint256 input0,uint256 input1,uint256 input2,uint256 input3) internal pure returns (uint256){\r\n        return input0+(input1<<64)+(input2<<128)+(input3<<192);\r\n    }\r\n    function getTuple3(uint256 input0,uint256 input1,uint256 input2) internal pure returns (uint256){\r\n        return input0+(input1<<64)+(input2<<128);\r\n    }\r\n    function getTuple2(uint256 input0,uint256 input1) internal pure returns (uint256){\r\n        return input0+(input1<<64);\r\n    }\r\n}\r\n\r\n// File: contracts\\OptionsManager\\OptionsManagerV2.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @title Options manager contract for finnexus proposal v2.\r\n * @dev A Smart-contract to manage Options pool, collatral pool, mine pool, FPTCoin, etc.\r\n *\r\n */\r\ncontract OptionsManagerV2 is CollateralCal {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Options manager constructor. set other contract address\r\n    * @param oracleAddr fnx oracle contract address.\r\n    * @param optionsPriceAddr options price contract address\r\n    * @param optionsPoolAddr optoins pool contract address\r\n    * @param FPTCoinAddr FPTCoin contract address\r\n    */\r\n    constructor (address oracleAddr,address optionsPriceAddr,address optionsPoolAddr,address collateralPoolAddr,address FPTCoinAddr) public{\r\n        _oracle = IFNXOracle(oracleAddr);\r\n        _optionsPrice = IOptionsPrice(optionsPriceAddr);\r\n        _optionsPool = IOptionsPool(optionsPoolAddr);\r\n        _collateralPool = ICollateralPool(collateralPoolAddr);\r\n        _FPTCoin = IFPTCoin(FPTCoinAddr);\r\n    }\r\n    function initialize() onlyOwner public {\r\n        \r\n    }\r\n    function update() onlyOwner public {\r\n        \r\n    }\r\n    /**\r\n    * @dev retrieve input price valid range rate, thousandths.\r\n    */ \r\n    function getPriceRateRange() public view returns(uint256,uint256) {\r\n        return (minPriceRate,maxPriceRate);\r\n    }\r\n    /**\r\n    * @dev set input price valid range rate, thousandths.\r\n    */ \r\n    function setPriceRateRange(uint256 _minPriceRate,uint256 _maxPriceRate) public onlyOwner{\r\n        require(_minPriceRate<_maxPriceRate,\"minimum Price rate must be smaller than maximum price rate\");\r\n        minPriceRate = _minPriceRate;\r\n        maxPriceRate = _maxPriceRate;\r\n    }\r\n    /**\r\n    * @dev check user input price is in valid range.\r\n    * @param strikePrice user input strikePrice\r\n    * @param underlyingPrice current underlying price.\r\n    */ \r\n    function checkStrikePrice(uint256 strikePrice,uint256 underlyingPrice)internal view{\r\n        require(underlyingPrice*maxPriceRate/1000>=strikePrice && underlyingPrice*minPriceRate/1000<=strikePrice,\r\n                \"strikePrice is out of price range\");\r\n    }\r\n    /**\r\n    * @dev user buy option and create new option.\r\n    * @param settlement user's settement coin address\r\n    * @param settlementAmount amount of settlement user want fo pay.\r\n    * @param strikePrice user input option's strike price\r\n    * @param underlying user input option's underlying id, 1 for BTC,2 for ETH\r\n    * @param expiration user input expiration,time limit from now\r\n    * @param amount user input amount of new option user want to buy.\r\n    * @param optType user input option type\r\n    */ \r\n    function buyOption(address settlement,uint256 settlementAmount, uint256 strikePrice,uint32 underlying,\r\n                uint32 expiration,uint256 amount,uint8 optType) nonReentrant notHalted InRange(amount) public payable{\r\n        uint256 type_ly_expiration = optType+(uint256(underlying)<<64)+(uint256(expiration)<<128);\r\n        (uint256 settlePrice,uint256 underlyingPrice) = oracleAssetAndUnderlyingPrice(settlement,underlying);\r\n        checkStrikePrice(strikePrice,underlyingPrice);\r\n        uint256 optRate = _getOptionsPriceRate(underlyingPrice,strikePrice,amount,optType);\r\n\r\n        uint256 optPrice = _optionsPool.createOptions(msg.sender,settlement,type_ly_expiration,\r\n            uint128(strikePrice),uint128(underlyingPrice),uint128(amount),uint128((settlePrice<<32)/optRate));\r\n        optPrice = (optPrice*optRate)>>32;\r\n        buyOption_sub(settlement,settlementAmount,optPrice,settlePrice,amount);\r\n    }\r\n    /**\r\n    * @dev subfunction of buy option.\r\n    * @param settlement user's settement coin address\r\n    * @param settlementAmount amount of settlement user want fo pay.\r\n    * @param optionPrice new option's price\r\n    * @param amount user input amount of new option user want to buy.\r\n    */ \r\n    function buyOption_sub(address settlement,uint256 settlementAmount,\r\n            uint256 optionPrice,uint256 settlePrice,uint256 amount)internal{\r\n        settlementAmount = getPayableAmount(settlement,settlementAmount);\r\n        amount = uint256(uint128(amount));\r\n        uint256 allPay = amount*optionPrice;\r\n        uint256 allPayUSd = allPay/1e8;\r\n        allPay = allPay/settlePrice;\r\n        _collateralPool.buyOptionsPayfor(msg.sender,settlement,settlementAmount,allPay);\r\n        //_FPTCoin.addMinerBalance(msg.sender,allPayUSd);\r\n        emit BuyOption(msg.sender,settlement,optionPrice,allPay,amount); \r\n    }\r\n    /**\r\n    * @dev User sell option.\r\n    * @param optionsId option's ID which was wanted to sell, must owned by user\r\n    * @param amount user input amount of option user want to sell.\r\n    */ \r\n    function sellOption(uint256 optionsId,uint256 amount) nonReentrant notHalted InRange(amount) public{\r\n        require(false,\"sellOption is not supported\");\r\n        // (,,uint8 optType,uint32 underlying,uint256 expiration,uint256 strikePrice,) = _optionsPool.getOptionsById(optionsId);\r\n        // expiration = expiration.sub(now);\r\n        // uint256 currentPrice = oracleUnderlyingPrice(underlying);\r\n        // uint256 optPrice = _optionsPrice.getOptionsPrice(currentPrice,strikePrice,expiration,underlying,optType);\r\n        // _optionsPool.burnOptions(msg.sender,optionsId,amount,optPrice);\r\n        // uint256 allPay = optPrice*amount;\r\n        // (address settlement,uint256 fullPay) = _optionsPool.getBurnedFullPay(optionsId,amount);\r\n        // _collateralPool.addNetWorthBalance(settlement,int256(fullPay));\r\n        // _paybackWorth(allPay,1);\r\n        // emit SellOption(msg.sender,optionsId,amount,allPay);\r\n    }\r\n    /**\r\n    * @dev User exercise option.\r\n    * @param optionsId option's ID which was wanted to exercise, must owned by user\r\n    * @param amount user input amount of option user want to exercise.\r\n    */ \r\n    function exerciseOption(uint256 optionsId,uint256 amount) nonReentrant notHalted InRange(amount) public{\r\n        uint256 allPay = _optionsPool.getExerciseWorth(optionsId,amount);\r\n        require(allPay > 0,\"This option cannot exercise\");\r\n        (,,uint8 optType,uint32 underlying,uint256 expiration,uint256 strikePrice,) = _optionsPool.getOptionsById(optionsId);\r\n        expiration = expiration.sub(now);\r\n        uint256 currentPrice = oracleUnderlyingPrice(underlying);\r\n        uint256 optPrice = _optionsPrice.getOptionsPrice(currentPrice,strikePrice,expiration,underlying,optType);\r\n        _optionsPool.burnOptions(msg.sender,optionsId,amount,optPrice);\r\n        (address settlement,uint256 fullPay) = _optionsPool.getBurnedFullPay(optionsId,amount);\r\n        _collateralPool.addNetWorthBalance(settlement,int256(fullPay));\r\n        _paybackWorth(allPay,2);\r\n        emit ExerciseOption(msg.sender,optionsId,amount,allPay);\r\n    }\r\n    function getOptionsPrice(uint256 underlyingPrice, uint256 strikePrice, uint256 expiration,\r\n                    uint32 underlying,uint256 amount,uint8 optType) public view returns(uint256){  \r\n        require(underlyingPrice<1e40 && strikePrice < 1e40 && expiration < 1e30 && amount < 1e40 , \"Input number is too large\");\r\n        uint256 ratio = _getOptionsPriceRate(underlyingPrice,strikePrice,amount,optType);\r\n        uint256 optPrice = _optionsPrice.getOptionsPrice(underlyingPrice,strikePrice,expiration,underlying,optType);\r\n        return (optPrice*ratio)>>32;\r\n    }\r\n    function _getOptionsPriceRate(uint256 underlyingPrice, uint256 strikePrice,uint256 amount,uint8 optType) internal view returns(uint256){\r\n        (uint256 totalCollateral,uint256 rate) = getCollateralAndRate();\r\n        uint256 lockedWorth = _FPTCoin.getTotalLockedWorth();\r\n        require(totalCollateral>=lockedWorth,\"collateral is insufficient!\");\r\n        totalCollateral = totalCollateral - lockedWorth;\r\n        uint256 buyOccupied = ((optType == 0) == (strikePrice>underlyingPrice)) ? strikePrice*amount:underlyingPrice*amount;\r\n        (uint256 callCollateral,uint256 putCollateral) = _optionsPool.getAllTotalOccupiedCollateral();\r\n        uint256 totalOccupied = (callCollateral + putCollateral + buyOccupied)*rate/1000;\r\n        buyOccupied = ((optType == 0 ? callCollateral : putCollateral) + buyOccupied)*rate/1000;\r\n        require(totalCollateral>=totalOccupied,\"collateral is insufficient!\");\r\n        return calOptionsPriceRatio(buyOccupied,totalOccupied,totalCollateral);\r\n    }\r\n    function calOptionsPriceRatio(uint256 selfOccupied,uint256 totalOccupied,uint256 totalCollateral) internal pure returns (uint256){\r\n        //r1 + 0.5\r\n        if (selfOccupied*2<=totalOccupied){\r\n            return 4294967296;\r\n        }\r\n        uint256 r1 = (selfOccupied<<32)/totalOccupied-2147483648;\r\n        uint256 r2 = (totalOccupied<<32)/totalCollateral*2;\r\n        //r1*r2*1.5\r\n        r1 = (r1*r2)>>32;\r\n        return ((r1*r1*r1)>>64)*3+4294967296;\r\n//        return SmallNumbers.pow(r1,r2);\r\n    }\r\n        // totalCollateral,OccupiedCollateral,lockedCollateral,unlockedCollateral,LeftCollateral,AvailableCollateral\r\n    function getALLCollateralinfo(address user)public view \r\n        returns(uint256[] memory,int256[] memory,uint32[] memory,uint32[] memory){\r\n        uint256[] memory values = new uint256[](13); \r\n        values[0] = getTotalCollateral();\r\n        values[1] = getOccupiedCollateral();\r\n        values[2] = _FPTCoin.getTotalLockedWorth();\r\n        values[3] = safeSubCollateral(values[0],values[2]);\r\n        values[4] = safeSubCollateral(values[0],values[1]);\r\n        values[5] = safeSubCollateral(values[3],values[1]);\r\n        values[6] = getTokenNetworth();\r\n        values[7] = getUserPayingUsd(user);\r\n        values[8] = _FPTCoin.totalSupply();\r\n        values[9] = _FPTCoin.balanceOf(user);\r\n        values[10] = calculateCollateralRate();\r\n\r\n        (values[11],values[12]) = getPriceRateRange();\r\n        return (values,\r\n                _collateralPool.getAllRealBalance(whiteList),\r\n                _collateralPool.getFeeRateAll(),\r\n                _optionsPool.getExpirationList());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionsPriceAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionsPoolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralPoolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FPTCoinAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"settlement\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionAmount\",\"type\":\"uint256\"}],\"name\":\"BuyOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"name\":\"DebugEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellValue\",\"type\":\"uint256\"}],\"name\":\"ExerciseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allRedeem\",\"type\":\"uint256\"}],\"name\":\"RedeemCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellValue\",\"type\":\"uint256\"}],\"name\":\"SellOption\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addAddress\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"settlementAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"underlying\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"optType\",\"type\":\"uint8\"}],\"name\":\"buyOption\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calCollateralWorth\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"optType\",\"type\":\"uint8\"}],\"name\":\"calOptionsOccupied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tmpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"checkAddressPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exerciseOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getALLCollateralinfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRealBalance\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCollateralPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFPTCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInputAmountRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLeftCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlement\",\"type\":\"address\"}],\"name\":\"getNetWorthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOccupiedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOptionsPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"underlying\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"optType\",\"type\":\"uint8\"}],\"name\":\"getOptionsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOptionsPriceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceRateRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"settlement\",\"type\":\"address\"}],\"name\":\"getRealBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenNetworth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnlockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPayingUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserTotalWorth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tmpAddress\",\"type\":\"address\"}],\"name\":\"isEligibleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"isInputAmountInRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permission\",\"type\":\"uint256\"}],\"name\":\"modifyPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"removeAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralPool\",\"type\":\"address\"}],\"name\":\"setCollateralPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"colRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"FPTCoinAddr\",\"type\":\"address\"}],\"name\":\"setFPTCoinAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setInputAmountRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionsPool\",\"type\":\"address\"}],\"name\":\"setOptionsPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionsPrice\",\"type\":\"address\"}],\"name\":\"setOptionsPriceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceRate\",\"type\":\"uint256\"}],\"name\":\"setPriceRateRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bValid\",\"type\":\"bool\"}],\"name\":\"setValid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"userInputCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OptionsManagerV2","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000043bd92bf3bb25ebb3bdc2524cbd6156e3fdd41f30000000000000000000000005e5114738ff0e6a36c289ecddd46c1975cefc272000000000000000000000000e12a03aea96dc56fb8007ec54fcfbdd61965d925000000000000000000000000ff60d81287bf425f7b2838a61274e926440ddaa600000000000000000000000016305b9ec0bdbe32cf8a0b5c142ceb3682db9d2d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://acea4b1469925e7565880f8a4141792c353e883e8e1b4fb563560aa97760798b"}]}