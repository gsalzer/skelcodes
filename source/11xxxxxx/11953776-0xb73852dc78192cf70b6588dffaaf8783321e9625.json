{"status":"1","message":"OK","result":[{"SourceCode":"// Spent ETH Oracle for Stabinol\r\n// This oracle collects eth data from various whitelisted data sources to generate a database of eth spent data for users\r\n// The ETH spent data will be used by the Stabinol Claimer to determine how much cashback to reward to STOL LP holders\r\n// \r\n// Governace can update whitelisted addresses, change eth spent balances per user and update the iteration of the oracle (which resets all balances to 0)\r\n\r\npragma solidity =0.6.6;\r\n\r\ncontract StabinolSpentETHOracle {\r\n\r\n    address public governance;\r\n    uint256 private _globalIteration; // This resets all the balances back to 0\r\n    \r\n    mapping(address => UserInfo) private allUsersInfo;\r\n    mapping(address => bool) private providers; // This will be a list of all providers eligible\r\n    \r\n    event GovernanceUpdated(address _add);\r\n    event ProviderAdded(address _add);\r\n    event ProviderRemoved(address _add);\r\n    \r\n    // Structs\r\n    struct UserInfo {\r\n        uint256 ethSpent; // The amount of eth spent since last claim\r\n        uint256 iteration; // The iteration version of the user\r\n    }\r\n\r\n    constructor() public {\r\n        governance = msg.sender;\r\n    }\r\n    \r\n    modifier onlyGovernance() {\r\n        require(governance == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function getCurrentIteration() external view returns (uint256) {\r\n        return _globalIteration;\r\n    }\r\n    \r\n    function getUserETHSpent(address _add) external view returns (uint256) {\r\n        if(allUsersInfo[_add].iteration < _globalIteration){\r\n            return 0; // The user is on an old iteration of this oracle\r\n        }else{\r\n            return allUsersInfo[_add].ethSpent; // Get the eth septn\r\n        }\r\n    }\r\n    \r\n    function getUserIteration(address _add) external view returns (uint256) {\r\n        return allUsersInfo[_add].iteration;\r\n    }\r\n    \r\n    function isAddressProvider(address _add) public view returns (bool) {\r\n        return providers[_add];\r\n    }\r\n    \r\n    // Write functions\r\n    // Whitelisted contracts can call this oracle to update the amount the user spent to perform a call\r\n    function addUserETHSpent(address _add, uint256 _ethback) external returns (bool) {\r\n        if(isAddressProvider(msg.sender) == false){\r\n            return false; // Don't revert, just return false instead\r\n        }\r\n        if(allUsersInfo[_add].iteration < _globalIteration){\r\n            allUsersInfo[_add].iteration = _globalIteration;\r\n            allUsersInfo[_add].ethSpent = 0;\r\n        }\r\n        allUsersInfo[_add].ethSpent = allUsersInfo[_add].ethSpent + _ethback; // Overflow is ok\r\n        return true; // This function will never revert so safe to be integrated\r\n    }\r\n    \r\n    // Governance functions\r\n    function updateGovernanceAddress(address _add) external onlyGovernance {\r\n        require(_add != address(0), \"Can't set to 0 address\");\r\n        governance = _add;\r\n        emit GovernanceUpdated(_add);\r\n    }\r\n    \r\n    function governanceUpdateUserETHSpent(address _add, uint256 amount) external onlyGovernance {\r\n        // Governance can update users balances manually in case of errors\r\n        allUsersInfo[_add].iteration = _globalIteration; // Set to the current iteration\r\n        allUsersInfo[_add].ethSpent = amount;\r\n    }\r\n    \r\n    function governanceAddToProviders(address _add) external onlyGovernance {\r\n        providers[_add] = true;\r\n        emit ProviderAdded(_add);\r\n    }\r\n    \r\n    function governanceRemoveFromProviders(address _add) external onlyGovernance {\r\n        providers[_add] = false;\r\n        emit ProviderRemoved(_add);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethback\",\"type\":\"uint256\"}],\"name\":\"addUserETHSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentIteration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getUserETHSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getUserIteration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"governanceAddToProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"governanceRemoveFromProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"governanceUpdateUserETHSpent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"isAddressProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"updateGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StabinolSpentETHOracle","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0f4cdc9abb6d42bb1bfa89199fe34ed2933f07fdacf339194cb685958014a12d"}]}