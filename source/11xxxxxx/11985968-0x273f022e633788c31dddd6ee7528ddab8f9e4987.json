{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.7.0 <0.8.0;\r\n\r\ncontract SmartMatrixStarry{\r\n    struct User{\r\n        address Id;\r\n        address Introducer;\r\n    }\r\n    \r\n    struct Table{\r\n        uint Fee;\r\n        uint Bonus;\r\n    }\r\n\r\n    struct TableDetail{\r\n        uint TableId;\r\n        address A;\r\n        address B;\r\n        address C;\r\n        address D;\r\n        address E;\r\n        address F;\r\n        address G;\r\n        uint Fee;\r\n        uint Bonus;\r\n        uint Status;\r\n    }\r\n\r\n    mapping(uint => Table) tables;\r\n    mapping(uint => TableDetail) tableDetails;\r\n    mapping(address => User) users;\r\n    \r\n    address payable _owner = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\r\n    uint detailId = 0;\r\n    \r\n    function init() public{\r\n        tables[1] = Table(1,2);\r\n        tables[2] = Table(10,20);\r\n        \r\n        detailId += 1;\r\n        tableDetails[detailId] = TableDetail(1,address(0),address(0),address(0),address(0),address(0),address(0),address(0),tables[1].Fee,tables[1].Bonus,0);\r\n        detailId += 1;\r\n        tableDetails[detailId] = TableDetail(2,address(0),address(0),address(0),address(0),address(0),address(0),address(0),tables[1].Fee,tables[1].Bonus,0);\r\n    }\r\n\r\n    function register(address introducer) public {\r\n        users[address(this)] = User(address(this),introducer);\r\n    }\r\n    \r\n    function openTable(address user,uint tableId) public{\r\n        address introducer = users[user].Introducer;\r\n        require(introducer == address(0), \"user is not exists.\");\r\n        \r\n        active(tables[tableId].Fee);\r\n        \r\n        for(uint i = 1;i<=detailId;i++){\r\n            if(tableDetails[i].Status == 0 && tableDetails[i].TableId == tableId &&\r\n               (tableDetails[i].A == introducer ||\r\n                tableDetails[i].B == introducer ||\r\n                tableDetails[i].C == introducer ||\r\n                tableDetails[i].D == introducer ||\r\n                tableDetails[i].E == introducer ||\r\n                tableDetails[i].F == introducer)){\r\n                    if(tableDetails[i].D == address(0)){\r\n                        tableDetails[i].D = user;\r\n                    }else if(tableDetails[i].E == address(0)){\r\n                        tableDetails[i].E= user;\r\n                    }else if(tableDetails[i].F == address(0)){\r\n                        tableDetails[i].F = user;\r\n                    }else{\r\n                        tableDetails[i].G = user;\r\n                        tableDetails[i].Status = 1;\r\n                        //finished \r\n                        detailId +=1;\r\n                        tableDetails[detailId].A = tableDetails[i].B;\r\n                        tableDetails[detailId].B = tableDetails[i].D;\r\n                        tableDetails[detailId].C = tableDetails[i].E;\r\n                        tableDetails[detailId].Fee = tables[tableId].Fee;\r\n                        tableDetails[detailId].Bonus = tables[tableId].Bonus;\r\n                        \r\n                        detailId +=1;\r\n                        tableDetails[detailId].A = tableDetails[i].C;\r\n                        tableDetails[detailId].B = tableDetails[i].F;\r\n                        tableDetails[detailId].C = tableDetails[i].G;\r\n                        tableDetails[detailId].Fee = tables[tableId].Fee;\r\n                        tableDetails[detailId].Bonus = tables[tableId].Bonus;\r\n                        \r\n                        sendBonus(tableDetails[i].Bonus,tableDetails[i].A) ;\r\n                        \r\n                        if(tableId == 1){\r\n                            openTable(tableDetails[i].A,2);\r\n                        }else{\r\n                            openTable(tableDetails[i].A,tableId);\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n    \r\n    function sendBonus(uint bonus,address user)  public{\r\n         address(uint160(user)).transfer(bonus);\r\n    }\r\n    \r\n    function active(uint fee) public {\r\n        _owner.transfer(fee);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"active\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"}],\"name\":\"openTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"introducer\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"sendBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartMatrixStarry","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://421dff6b6c75ceb7029eddb4ebbcabc2ca2e19a5b6d5c92af0a3d60aa6ecf7a6"}]}