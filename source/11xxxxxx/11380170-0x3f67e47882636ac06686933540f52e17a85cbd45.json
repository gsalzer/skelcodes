{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOwnableOrGuardian.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\r\n *          UPGRADEABLE CONTRACTS.\r\n */\r\ncontract IOwnableOrGuardian is Initializable {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event GuardianTransferred(address indexed previousGuardian, address indexed newGuardian);\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier onlyOwnerOrGuardian {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _guardian,\r\n            \"OwnableOrGuardian: UNAUTHORIZED_OWNER_OR_GUARDIAN\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"OwnableOrGuardian: UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n    // *********************************************\r\n    // ***** State Variables DO NOT CHANGE OR MOVE\r\n    // *********************************************\r\n\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n    address internal _owner;\r\n    address internal _guardian;\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n\r\n    // ******************************\r\n    // ***** Misc Functions\r\n    // ******************************\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function guardian() external view returns (address) {\r\n        return _guardian;\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Admin Functions\r\n    // ******************************\r\n\r\n    function initialize(\r\n        address __owner,\r\n        address __guardian\r\n    )\r\n    public\r\n    initializer {\r\n        _transferOwnership(__owner);\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function transferOwnership(\r\n        address __owner\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __owner != address(0),\r\n            \"OwnableOrGuardian::transferOwnership: INVALID_OWNER\"\r\n        );\r\n        _transferOwnership(__owner);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferGuardian(\r\n        address __guardian\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __guardian != address(0),\r\n            \"OwnableOrGuardian::transferGuardian: INVALID_OWNER\"\r\n        );\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function renounceGuardian() public onlyOwnerOrGuardian {\r\n        _transferGuardian(address(0));\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    function _transferOwnership(\r\n        address __owner\r\n    )\r\n    internal {\r\n        address previousOwner = _owner;\r\n        _owner = __owner;\r\n        emit OwnershipTransferred(previousOwner, __owner);\r\n    }\r\n\r\n    function _transferGuardian(\r\n        address __guardian\r\n    )\r\n    internal {\r\n        address previousGuardian = _guardian;\r\n        _guardian = __guardian;\r\n        emit GuardianTransferred(previousGuardian, __guardian);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/governance/dmg/IDMGToken.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface IDMGToken {\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint128);\r\n\r\n    function getCurrentVotes(address account) external view returns (uint128);\r\n\r\n    function delegates(address delegator) external view returns (address);\r\n\r\n    function burn(uint amount) external returns (bool);\r\n\r\n    function approveBySig(\r\n        address spender,\r\n        uint rawAmount,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/AssetIntroducerData.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerData is Initializable, IOwnableOrGuardian {\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    // *************************\r\n    // ***** V1 State Variables\r\n    // *************************\r\n\r\n    /// For preventing reentrancy attacks\r\n    uint64 internal _guardCounter;\r\n\r\n    AssetIntroducerStateV1 internal _assetIntroducerStateV1;\r\n\r\n    ERC721StateV1 internal _erc721StateV1;\r\n\r\n    VoteStateV1 internal _voteStateV1;\r\n\r\n    // *************************\r\n    // ***** Data Structures\r\n    // *************************\r\n\r\n    enum AssetIntroducerType {\r\n        PRINCIPAL, AFFILIATE\r\n    }\r\n\r\n    struct AssetIntroducerStateV1 {\r\n        /// The timestamp at which this contract was initialized\r\n        uint64 initTimestamp;\r\n\r\n        /// True if the DMM Foundation purchased its token for the bootstrapped pool, false otherwise.\r\n        bool isDmmFoundationSetup;\r\n\r\n        /// Total amount of DMG locked in this contract\r\n        uint128 totalDmgLocked;\r\n\r\n        /// For calculating the results of off-chain signature requests\r\n        bytes32 domainSeparator;\r\n\r\n        /// Address of the DMG token\r\n        address dmg;\r\n\r\n        /// Address of the DMM Controller\r\n        address dmmController;\r\n\r\n        /// Address of the DMM token valuator, which gets the USD value of a token\r\n        address underlyingTokenValuator;\r\n\r\n        /// Address of the implementation for the discount\r\n        address assetIntroducerDiscount;\r\n\r\n        /// Address of the implementation for the staking purchaser contract. Used to buy NFTs at a steep discount by\r\n        /// staking mTokens.\r\n        address stakingPurchaser;\r\n\r\n        /// Mapping from NFT ID to the asset introducer struct.\r\n        mapping(uint => AssetIntroducer) idToAssetIntroducer;\r\n\r\n        /// Mapping from country code to asset introducer type to token IDs\r\n        mapping(bytes3 => mapping(uint8 => uint[])) countryCodeToAssetIntroducerTypeToTokenIdsMap;\r\n\r\n        /// A mapping from the country code to asset introducer type to the cost needed to buy one. The cost is represented\r\n        /// in USD (with 18 decimals) and is purchased using DMG, so a conversion is needed using Chainlink.\r\n        mapping(bytes3 => mapping(uint8 => uint96)) countryCodeToAssetIntroducerTypeToPriceUsd;\r\n\r\n        /// The dollar amount that has actually been deployed by the asset introducer\r\n        mapping(uint => mapping(address => uint)) tokenIdToUnderlyingTokenToWithdrawnAmount;\r\n\r\n        /// Mapping for the count of each user's off-chain signed messages. 0-indexed.\r\n        mapping(address => uint) ownerToNonceMap;\r\n    }\r\n\r\n    struct ERC721StateV1 {\r\n        /// Total number of NFTs created\r\n        uint64 totalSupply;\r\n\r\n        /// The proxy address created by OpenSea, which is used to enable a smoother trading experience\r\n        address openSeaProxyRegistry;\r\n\r\n        /// The last token ID in the linked list.\r\n        uint lastTokenId;\r\n\r\n        /// The base URI for getting NFT information by token ID.\r\n        string baseURI;\r\n\r\n        /// Mapping of all token IDs. Works as a linked list such that previous key --> next value. The 0th key in the\r\n        /// list is LINKED_LIST_GUARD.\r\n        mapping(uint => uint) allTokens;\r\n\r\n        /// Mapping from NFT ID to owner address.\r\n        mapping(uint256 => address) idToOwnerMap;\r\n\r\n        /// Mapping from NFT ID to approved address.\r\n        mapping(uint256 => address) idToSpenderMap;\r\n\r\n        /// Mapping from owner to an operator that can spend all of owner's NFTs.\r\n        mapping(address => mapping(address => bool)) ownerToOperatorToIsApprovedMap;\r\n\r\n        /// Mapping from owner address to all owned token IDs. Works as a linked list such that previous key --> next value.\r\n        /// The 0th key in the list is LINKED_LIST_GUARD.\r\n        mapping(address => mapping(uint => uint)) ownerToTokenIds;\r\n\r\n        /// Mapping from owner address to a count of all owned NFTs.\r\n        mapping(address => uint32) ownerToTokenCount;\r\n\r\n        /// Mapping from an interface to whether or not it's supported.\r\n        mapping(bytes4 => bool) interfaceIdToIsSupportedMap;\r\n    }\r\n\r\n    /// Used for storing information about voting\r\n    struct VoteStateV1 {\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => mapping(uint64 => Checkpoint)) ownerToCheckpointIndexToCheckpointMap;\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => uint64) ownerToCheckpointCountMap;\r\n    }\r\n\r\n    /// Tightly-packed, this data structure is 2 slots; 64 bytes\r\n    struct AssetIntroducer {\r\n        bytes3 countryCode;\r\n        AssetIntroducerType introducerType;\r\n        /// True if the asset introducer has been purchased yet, false if it hasn't and is thus\r\n        bool isOnSecondaryMarket;\r\n        /// True if the asset introducer can withdraw tokens from mToken deposits, false if it cannot yet. This value\r\n        /// must only be changed to `true` via governance vote\r\n        bool isAllowedToWithdrawFunds;\r\n        /// 1-based index at which the asset introducer was created. Used for optics\r\n        uint16 serialNumber;\r\n        uint96 dmgLocked;\r\n        /// How much this asset introducer can manage\r\n        uint96 dollarAmountToManage;\r\n        uint tokenId;\r\n    }\r\n\r\n    /// Used for tracking delegation and number of votes each user has at a given block height.\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// Used to prevent the \"stack too deep\" error and make code more readable\r\n    struct DmgApprovalStruct {\r\n        address spender;\r\n        uint rawAmount;\r\n        uint nonce;\r\n        uint expiry;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    struct DiscountStruct {\r\n        uint64 initTimestamp;\r\n    }\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n\r\n        _;\r\n\r\n        require(\r\n            localCounter == _guardCounter,\r\n            \"AssetIntroducerData: REENTRANCY\"\r\n        );\r\n    }\r\n\r\n    /// Enforces that an NFT has NOT been sold to a user yet\r\n    modifier requireIsPrimaryMarketNft(uint __tokenId) {\r\n        require(\r\n            !_assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_SECONDARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /// Enforces that an NFT has been sold to a user\r\n    modifier requireIsSecondaryMarketNft(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_PRIMARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsValidNft(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] != address(0),\r\n            \"AssetIntroducerData: INVALID_NFT\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsNftOwner(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] == msg.sender,\r\n            \"AssetIntroducerData: INVALID_NFT_OWNER\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireCanWithdrawFunds(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerData: NFT_NOT_ACTIVATED\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsStakingPurchaser() {\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser != address(0),\r\n            \"AssetIntroducerData: STAKING_PURCHASER_NOT_SETUP\"\r\n        );\r\n\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser == msg.sender,\r\n            \"AssetIntroducerData: INVALID_SENDER_FOR_STAKING\"\r\n        );\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IAssetIntroducerDiscount.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IAssetIntroducerDiscount {\r\n\r\n    function getAssetIntroducerDiscount(\r\n        AssetIntroducerData.DiscountStruct calldata data\r\n    ) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/AssetIntroducerDiscountV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerDiscountV1 is IAssetIntroducerDiscount {\r\n\r\n    using SafeMath for uint;\r\n\r\n    function getAssetIntroducerDiscount(\r\n        AssetIntroducerData.DiscountStruct memory data\r\n    ) public view returns (uint) {\r\n        uint elapsedTime = block.timestamp.sub(data.initTimestamp);\r\n        // 18 months or 540 days\r\n        uint discountDurationInSeconds = 86400 * 30 * 18;\r\n        if (elapsedTime > discountDurationInSeconds) {\r\n            // The discount expired\r\n            return 0;\r\n        } else {\r\n            // Discount is 90% at t=0\r\n            uint originalDiscount = 0.9 ether;\r\n            return originalDiscount.mul(discountDurationInSeconds.sub(elapsedTime)).div(discountDurationInSeconds);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"initTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct AssetIntroducerData.DiscountStruct\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"getAssetIntroducerDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AssetIntroducerDiscountV1","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b1d37e6f519b378c30e07dceab21d443b1304aa026aecd8a96256331c8fa259c"}]}