{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/aaveV2/saver/AaveSaverProxyV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../AaveHelperV2.sol\\\";\\nimport \\\"../../exchangeV3/DFSExchangeCore.sol\\\";\\nimport \\\"../../interfaces/IAToken.sol\\\";\\nimport \\\"../../interfaces/TokenInterface.sol\\\";\\nimport \\\"../../loggers/DefisaverLogger.sol\\\";\\nimport \\\"../../utils/GasBurner.sol\\\";\\n\\ncontract AaveSaverProxyV2 is DFSExchangeCore, AaveHelperV2, GasBurner {\\n\\n\\taddress public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\\n\\n\\tfunction repay(address _market, ExchangeData memory _data, uint _rateMode, uint _gasCost) public payable burnGas(20) {\\n\\t\\taddress lendingPool = ILendingPoolAddressesProviderV2(_market).getLendingPool();\\n\\t\\taddress payable user = payable(getUserAddress());\\n\\n\\t\\tILendingPoolV2(lendingPool).withdraw(_data.srcAddr, _data.srcAmount, address(this));\\n\\n\\t\\tuint256 destAmount = _data.srcAmount;\\n\\t\\tif (_data.srcAddr != _data.destAddr) {\\n\\t\\t\\t_data.user = user;\\n\\t\\t\\t\\n\\t\\t\\t_data.dfsFeeDivider = MANUAL_SERVICE_FEE;\\n\\t\\t\\tif (BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin)) {\\n            \\t_data.dfsFeeDivider = AUTOMATIC_SERVICE_FEE;\\n        \\t}\\n\\t\\t\\t\\n\\t\\t\\t// swap\\n\\t\\t\\t(, destAmount) = _sell(_data);\\n\\t\\t}\\n\\n\\t\\t// take gas cost at the end\\n\\t\\tdestAmount -= getGasCost(ILendingPoolAddressesProviderV2(_market).getPriceOracle(), destAmount, user, _gasCost, _data.destAddr);\\n\\n\\t\\t// payback\\n\\t\\tif (_data.destAddr == WETH_ADDRESS) {\\n\\t\\t\\tTokenInterface(WETH_ADDRESS).deposit.value(destAmount)();\\n\\t\\t}\\n\\n\\t\\tapproveToken(_data.destAddr, lendingPool);\\n\\t\\tILendingPoolV2(lendingPool).repay(_data.destAddr, destAmount, _rateMode, payable(address(this)));\\n\\n\\t\\t// first return 0x fee to tx.origin as it is the address that actually sent 0x fee\\n\\t\\tsendContractBalance(ETH_ADDR, tx.origin, min(address(this).balance, msg.value));\\n\\t\\t// send all leftovers from dest addr to proxy owner\\n\\t\\tsendFullContractBalance(_data.destAddr, user);\\n\\n\\t\\tDefisaverLogger(DEFISAVER_LOGGER).Log(address(this), msg.sender, \\\"AaveRepay\\\", abi.encode(_data.srcAddr, _data.destAddr, _data.srcAmount, destAmount));\\n\\t}\\n\\n\\tfunction boost(address _market, ExchangeData memory _data, uint _rateMode, uint _gasCost) public payable burnGas(20) {\\n\\t\\taddress lendingPool = ILendingPoolAddressesProviderV2(_market).getLendingPool();\\n\\t\\tIAaveProtocolDataProviderV2 dataProvider = getDataProvider(_market);\\n\\t\\taddress payable user = payable(getUserAddress());\\n\\n\\t\\t// borrow amount\\n\\t\\tILendingPoolV2(lendingPool).borrow(_data.srcAddr, _data.srcAmount, _rateMode, AAVE_REFERRAL_CODE, address(this));\\n\\n\\t\\t// take gas cost at the beginning\\n\\t\\t_data.srcAmount -= getGasCost(ILendingPoolAddressesProviderV2(_market).getPriceOracle(), _data.srcAmount, user, _gasCost, _data.srcAddr);\\n\\n\\t\\tuint256 destAmount;\\n\\t\\tif (_data.destAddr != _data.srcAddr) {\\n\\t\\t\\t_data.user = user;\\n\\t\\t\\t\\n\\t\\t\\t_data.dfsFeeDivider = MANUAL_SERVICE_FEE;\\n\\t\\t\\tif (BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin)) {\\n            \\t_data.dfsFeeDivider = AUTOMATIC_SERVICE_FEE;\\n        \\t}\\n        \\t\\n\\t\\t\\t(, destAmount) = _sell(_data);\\n\\t\\t} else {\\n\\t\\t\\tdestAmount = _data.srcAmount;\\n\\t\\t}\\n\\n\\t\\tif (_data.destAddr == WETH_ADDRESS) {\\n\\t\\t\\tTokenInterface(WETH_ADDRESS).deposit.value(destAmount)();\\n\\t\\t}\\n\\n\\t\\tapproveToken(_data.destAddr, lendingPool);\\n\\t\\tILendingPoolV2(lendingPool).deposit(_data.destAddr, destAmount, address(this), AAVE_REFERRAL_CODE);\\n\\n\\n\\t\\t(,,,,,,,,bool collateralEnabled) = dataProvider.getUserReserveData(_data.destAddr, address(this));\\n\\t\\tif (!collateralEnabled) {\\n            ILendingPoolV2(lendingPool).setUserUseReserveAsCollateral(_data.destAddr, true);\\n        }\\n\\n\\t\\t// returning to msg.sender as it is the address that actually sent 0x fee\\n\\t\\tsendContractBalance(ETH_ADDR, tx.origin, min(address(this).balance, msg.value));\\n\\t\\t// send all leftovers from dest addr to proxy owner\\n\\t\\tsendFullContractBalance(_data.destAddr, user);\\n\\n\\t\\tDefisaverLogger(DEFISAVER_LOGGER).Log(address(this), msg.sender, \\\"AaveBoost\\\", abi.encode(_data.srcAddr, _data.destAddr, _data.srcAmount, destAmount));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/aaveV2/AaveHelperV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../DS/DSMath.sol\\\";\\nimport \\\"../DS/DSProxy.sol\\\";\\nimport \\\"../utils/Discount.sol\\\";\\nimport \\\"../interfaces/IAToken.sol\\\";\\nimport \\\"../interfaces/ILendingPoolV2.sol\\\";\\nimport \\\"../interfaces/IPriceOracleGetterAave.sol\\\";\\nimport \\\"../interfaces/IAaveProtocolDataProviderV2.sol\\\";\\n\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../utils/BotRegistry.sol\\\";\\n\\ncontract AaveHelperV2 is DSMath {\\n\\n    using SafeERC20 for ERC20;\\n\\n    address payable public constant WALLET_ADDR = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\\n    address public constant DISCOUNT_ADDR = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // mainnet\\n\\n    uint public constant MANUAL_SERVICE_FEE = 400; // 0.25% Fee\\n    uint public constant AUTOMATIC_SERVICE_FEE = 333; // 0.3% Fee\\n\\n    address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\\n\\n\\taddress public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint public constant NINETY_NINE_PERCENT_WEI = 990000000000000000;\\n    uint16 public constant AAVE_REFERRAL_CODE = 64;\\n\\n    /// @notice Calculates the gas cost for transaction\\n    /// @param _oracleAddress address of oracle used\\n    /// @param _amount Amount that is converted\\n    /// @param _user Actuall user addr not DSProxy\\n    /// @param _gasCost Ether amount of gas we are spending for tx\\n    /// @param _tokenAddr token addr. of token we are getting for the fee\\n    /// @return gasCost The amount we took for the gas cost\\n    function getGasCost(address _oracleAddress, uint _amount, address _user, uint _gasCost, address _tokenAddr) internal returns (uint gasCost) {\\n        if (_gasCost != 0) {\\n            uint256 price = IPriceOracleGetterAave(_oracleAddress).getAssetPrice(_tokenAddr);\\n\\n            _gasCost = wdiv(_gasCost, price) / (10 ** (18 - _getDecimals(_tokenAddr)));\\n\\n            gasCost = _gasCost;\\n        }\\n\\n        // gas cost can't go over 10% of the whole amount\\n        if (gasCost > (_amount / 10)) {\\n            gasCost = _amount / 10;\\n        }\\n\\n        if (_tokenAddr == ETH_ADDR) {\\n            WALLET_ADDR.transfer(gasCost);\\n        } else {\\n            ERC20(_tokenAddr).safeTransfer(WALLET_ADDR, gasCost);\\n        }\\n    }\\n\\n\\n    /// @notice Returns the owner of the DSProxy that called the contract\\n    function getUserAddress() internal view returns (address) {\\n        DSProxy proxy = DSProxy(payable(address(this)));\\n\\n        return proxy.owner();\\n    }\\n\\n    /// @notice Approves token contract to pull underlying tokens from the DSProxy\\n    /// @param _tokenAddr Token we are trying to approve\\n    /// @param _caller Address which will gain the approval\\n    function approveToken(address _tokenAddr, address _caller) internal {\\n        if (_tokenAddr != ETH_ADDR) {\\n            ERC20(_tokenAddr).safeApprove(_caller, uint256(-1));\\n        }\\n    }\\n\\n    /// @notice Send specific amount from contract to specific user\\n    /// @param _token Token we are trying to send\\n    /// @param _user User that should receive funds\\n    /// @param _amount Amount that should be sent\\n    function sendContractBalance(address _token, address _user, uint _amount) internal {\\n        if (_amount == 0) return;\\n\\n        if (_token == ETH_ADDR) {\\n            payable(_user).transfer(_amount);\\n        } else {\\n            ERC20(_token).safeTransfer(_user, _amount);\\n        }\\n    }\\n\\n    function sendFullContractBalance(address _token, address _user) internal {\\n        if (_token == ETH_ADDR) {\\n            sendContractBalance(_token, _user, address(this).balance);\\n        } else {\\n            sendContractBalance(_token, _user, ERC20(_token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _getDecimals(address _token) internal view returns (uint256) {\\n        if (_token == ETH_ADDR) return 18;\\n\\n        return ERC20(_token).decimals();\\n    }\\n\\n    function getDataProvider(address _market) internal view returns(IAaveProtocolDataProviderV2) {\\n        return IAaveProtocolDataProviderV2(ILendingPoolAddressesProviderV2(_market).getAddress(0x0100000000000000000000000000000000000000000000000000000000000000));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchangeV3/DFSExchangeCore.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../DS/DSMath.sol\\\";\\nimport \\\"../interfaces/TokenInterface.sol\\\";\\nimport \\\"../interfaces/ExchangeInterfaceV3.sol\\\";\\nimport \\\"../utils/ZrxAllowlist.sol\\\";\\nimport \\\"./DFSExchangeData.sol\\\";\\nimport \\\"./DFSExchangeHelper.sol\\\";\\nimport \\\"../exchange/SaverExchangeRegistry.sol\\\";\\nimport \\\"../interfaces/OffchainWrapperInterface.sol\\\";\\n\\ncontract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\\n\\n    string public constant ERR_SLIPPAGE_HIT = \\\"Slippage hit\\\";\\n    string public constant ERR_DEST_AMOUNT_MISSING = \\\"Dest amount missing\\\";\\n    string public constant ERR_WRAPPER_INVALID = \\\"Wrapper invalid\\\";\\n    string public constant ERR_NOT_ZEROX_EXCHANGE = \\\"Zerox exchange invalid\\\";\\n\\n    /// @notice Internal method that preforms a sell on 0x/on-chain\\n    /// @dev Usefull for other DFS contract to integrate for exchanging\\n    /// @param exData Exchange data struct\\n    /// @return (address, uint) Address of the wrapper used and destAmount\\n    function _sell(ExchangeData memory exData) internal returns (address, uint) {\\n\\n        address wrapper;\\n        uint swapedTokens;\\n        bool success;\\n\\n        // if selling eth, convert to weth\\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\\n            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\\n        }\\n\\n        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\\n\\n        // Try 0x first and then fallback on specific wrapper\\n        if (exData.offchainData.price > 0) {\\n            (success, swapedTokens) = takeOrder(exData, ActionType.SELL);\\n\\n            if (success) {\\n                wrapper = exData.offchainData.exchangeAddr;\\n            }\\n        }\\n\\n        // fallback to desired wrapper if 0x failed\\n        if (!success) {\\n            swapedTokens = saverSwap(exData, ActionType.SELL);\\n            wrapper = exData.wrapper;\\n        }\\n\\n        require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\\n\\n        // if anything is left in weth, pull it to user as eth\\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\\n            );\\n        }\\n\\n        return (wrapper, swapedTokens);\\n    }\\n\\n    /// @notice Internal method that preforms a buy on 0x/on-chain\\n    /// @dev Usefull for other DFS contract to integrate for exchanging\\n    /// @param exData Exchange data struct\\n    /// @return (address, uint) Address of the wrapper used and srcAmount\\n    function _buy(ExchangeData memory exData) internal returns (address, uint) {\\n\\n        address wrapper;\\n        uint swapedTokens;\\n        bool success;\\n\\n        require(exData.destAmount != 0, ERR_DEST_AMOUNT_MISSING);\\n\\n        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\\n\\n        // if selling eth, convert to weth\\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\\n            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\\n        }\\n\\n        if (exData.offchainData.price > 0) {\\n            (success, swapedTokens) = takeOrder(exData, ActionType.BUY);\\n\\n            if (success) {\\n                wrapper = exData.offchainData.exchangeAddr;\\n            }\\n        }\\n\\n        // fallback to desired wrapper if 0x failed\\n        if (!success) {\\n            swapedTokens = saverSwap(exData, ActionType.BUY);\\n            wrapper = exData.wrapper;\\n        }\\n\\n        require(getBalance(exData.destAddr) >= exData.destAmount, ERR_SLIPPAGE_HIT);\\n\\n        // if anything is left in weth, pull it to user as eth\\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\\n            );\\n        }\\n\\n        return (wrapper, getBalance(exData.destAddr));\\n    }\\n\\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\\n    /// @param _exData Exchange data\\n    function takeOrder(\\n        ExchangeData memory _exData,\\n        ActionType _type\\n    ) private returns (bool success, uint256) {\\n        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\\n            return (false, 0);\\n        }\\n\\n        if (SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)) {\\n            return (false, 0);\\n        }\\n\\n        // send src amount\\n        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\\n\\n        return OffchainWrapperInterface(_exData.offchainData.wrapper).takeOrder{value: _exData.offchainData.protocolFee}(_exData, _type);\\n    }\\n\\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\\n    /// @param _exData Exchange data struct\\n    /// @param _type Type of action SELL|BUY\\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\\n    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\\n        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), ERR_WRAPPER_INVALID);\\n\\n        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\\n\\n        if (_type == ActionType.SELL) {\\n            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\\n                    sell(_exData.srcAddr, _exData.destAddr, _exData.srcAmount, _exData.wrapperData);\\n        } else {\\n            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\\n                    buy(_exData.srcAddr, _exData.destAddr, _exData.destAmount, _exData.wrapperData);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external virtual payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nabstract contract IAToken {\\n    function redeem(uint256 _amount) external virtual;\\n    function balanceOf(address _owner) external virtual view returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/TokenInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nabstract contract TokenInterface {\\n\\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    \\n    function allowance(address, address) public virtual returns (uint256);\\n\\n    function balanceOf(address) public virtual returns (uint256);\\n\\n    function approve(address, uint256) public virtual;\\n\\n    function transfer(address, uint256) public virtual returns (bool);\\n\\n    function transferFrom(address, address, uint256) public virtual returns (bool);\\n\\n    function deposit() public virtual payable;\\n\\n    function withdraw(uint256) public virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/loggers/DefisaverLogger.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ncontract DefisaverLogger {\\n    event LogEvent(\\n        address indexed contractAddress,\\n        address indexed caller,\\n        string indexed logName,\\n        bytes data\\n    );\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\\n        public\\n    {\\n        emit LogEvent(_contract, _caller, _logName, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/GasBurner.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/GasTokenInterface.sol\\\";\\n\\ncontract GasBurner {\\n    // solhint-disable-next-line const-name-snakecase\\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\\n\\n    modifier burnGas(uint _amount) {\\n        if (gasToken.balanceOf(address(this)) >= _amount) {\\n            gasToken.free(_amount);\\n        }\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DS/DSMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x / y;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DS/DSProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./DSAuth.sol\\\";\\nimport \\\"./DSNote.sol\\\";\\n\\n\\nabstract contract DSProxy is DSAuth, DSNote {\\n    DSProxyCache public cache; // global cache for contracts\\n\\n    constructor(address _cacheAddr) public {\\n        require(setCache(_cacheAddr));\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    // use the proxy to execute calldata _data on contract _code\\n    // function execute(bytes memory _code, bytes memory _data)\\n    //     public\\n    //     payable\\n    //     virtual\\n    //     returns (address target, bytes32 response);\\n\\n    function execute(address _target, bytes memory _data)\\n        public\\n        payable\\n        virtual\\n        returns (bytes32 response);\\n\\n    //set new cache\\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\\n}\\n\\n\\ncontract DSProxyCache {\\n    mapping(bytes32 => address) cache;\\n\\n    function read(bytes memory _code) public view returns (address) {\\n        bytes32 hash = keccak256(_code);\\n        return cache[hash];\\n    }\\n\\n    function write(bytes memory _code) public returns (address target) {\\n        assembly {\\n            target := create(0, add(_code, 0x20), mload(_code))\\n            switch iszero(extcodesize(target))\\n                case 1 {\\n                    // throw if contract failed to deploy\\n                    revert(0, 0)\\n                }\\n        }\\n        bytes32 hash = keccak256(_code);\\n        cache[hash] = target;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Discount.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ncontract Discount {\\n    address public owner;\\n    mapping(address => CustomServiceFee) public serviceFees;\\n\\n    uint256 constant MAX_SERVICE_FEE = 400;\\n\\n    struct CustomServiceFee {\\n        bool active;\\n        uint256 amount;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function isCustomFeeSet(address _user) public view returns (bool) {\\n        return serviceFees[_user].active;\\n    }\\n\\n    function getCustomServiceFee(address _user) public view returns (uint256) {\\n        return serviceFees[_user].amount;\\n    }\\n\\n    function setServiceFee(address _user, uint256 _fee) public {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\\n\\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\\n    }\\n\\n    function disableServiceFee(address _user) public {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n\\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProviderV2 {\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\\ninterface ILendingPoolV2 {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleGetterAave.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/************\\n@title IPriceOracleGetterAave interface\\n@notice Interface for the Aave price oracle.*/\\nabstract contract IPriceOracleGetterAave {\\n    function getAssetPrice(address _asset) external virtual view returns (uint256);\\n    function getAssetsPrices(address[] calldata _assets) external virtual view returns(uint256[] memory);\\n    function getSourceOfAsset(address _asset) external virtual view returns(address);\\n    function getFallbackOracle() external virtual view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAaveProtocolDataProviderV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IAaveProtocolDataProviderV2 {\\n\\n  struct TokenData {\\n    string symbol;\\n    address tokenAddress;\\n  }\\n\\n  function getAllReservesTokens() external virtual view returns (TokenData[] memory);\\n\\n  function getAllATokens() external virtual view returns (TokenData[] memory);\\n\\n  function getReserveConfigurationData(address asset)\\n    external virtual\\n    view\\n    returns (\\n      uint256 decimals,\\n      uint256 ltv,\\n      uint256 liquidationThreshold,\\n      uint256 liquidationBonus,\\n      uint256 reserveFactor,\\n      bool usageAsCollateralEnabled,\\n      bool borrowingEnabled,\\n      bool stableBorrowRateEnabled,\\n      bool isActive,\\n      bool isFrozen\\n    );\\n\\n  function getReserveData(address asset)\\n    external virtual\\n    view\\n    returns (\\n      uint256 availableLiquidity,\\n      uint256 totalStableDebt,\\n      uint256 totalVariableDebt,\\n      uint256 liquidityRate,\\n      uint256 variableBorrowRate,\\n      uint256 stableBorrowRate,\\n      uint256 averageStableBorrowRate,\\n      uint256 liquidityIndex,\\n      uint256 variableBorrowIndex,\\n      uint40 lastUpdateTimestamp\\n    );\\n\\n  function getUserReserveData(address asset, address user)\\n    external virtual\\n    view\\n    returns (\\n      uint256 currentATokenBalance,\\n      uint256 currentStableDebt,\\n      uint256 currentVariableDebt,\\n      uint256 principalStableDebt,\\n      uint256 scaledVariableDebt,\\n      uint256 stableBorrowRate,\\n      uint256 liquidityRate,\\n      uint40 stableRateLastUpdated,\\n      bool usageAsCollateralEnabled\\n    );\\n\\n  function getReserveTokensAddresses(address asset)\\n    external virtual\\n    view\\n    returns (\\n      address aTokenAddress,\\n      address stableDebtTokenAddress,\\n      address variableDebtTokenAddress\\n    );\\n}\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     */\\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/BotRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../auth/AdminAuth.sol\\\";\\n\\ncontract BotRegistry is AdminAuth {\\n\\n    mapping (address => bool) public botList;\\n\\n    constructor() public {\\n        botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;\\n\\n        botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;\\n        botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;\\n        botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;\\n        botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;\\n    }\\n\\n    function setBot(address _botAddr, bool _state) public onlyOwner {\\n        botList[_botAddr] = _state;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/DS/DSAuth.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./DSAuthority.sol\\\";\\n\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority public authority;\\n    address public owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_) public auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_) public auth {\\n        authority = authority_;\\n        emit LogSetAuthority(address(authority));\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender, msg.sig));\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(0)) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, address(this), sig);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DS/DSNote.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4 indexed sig,\\n        address indexed guy,\\n        bytes32 indexed foo,\\n        bytes32 indexed bar,\\n        uint256 wad,\\n        bytes fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n        }\\n\\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DS/DSAuthority.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\nabstract contract DSAuthority {\\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ERC20 {\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    function decimals() external view returns (uint256 digits);\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/auth/AdminAuth.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\ncontract AdminAuth {\\n\\n    using SafeERC20 for ERC20;\\n\\n    address public owner;\\n    address public admin;\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender);\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\\n    /// @param _admin Address of multisig that becomes admin\\n    function setAdminByOwner(address _admin) public {\\n        require(msg.sender == owner);\\n        require(admin == address(0));\\n\\n        admin = _admin;\\n    }\\n\\n    /// @notice Admin is able to set new admin\\n    /// @param _admin Address of multisig that becomes new admin\\n    function setAdminByAdmin(address _admin) public {\\n        require(msg.sender == admin);\\n\\n        admin = _admin;\\n    }\\n\\n    /// @notice Admin is able to change owner\\n    /// @param _owner Address of new owner\\n    function setOwnerByAdmin(address _owner) public {\\n        require(msg.sender == admin);\\n\\n        owner = _owner;\\n    }\\n\\n    /// @notice Destroy the contract\\n    function kill() public onlyOwner {\\n        selfdestruct(payable(owner));\\n    }\\n\\n    /// @notice  withdraw stuck funds\\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            payable(owner).transfer(_amount);\\n        } else {\\n            ERC20(_token).safeTransfer(owner, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ExchangeInterfaceV3.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ExchangeInterfaceV3 {\\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external payable returns (uint);\\n\\n    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external payable returns(uint);\\n\\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\\n\\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ZrxAllowlist.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../auth/AdminAuth.sol\\\";\\n\\ncontract ZrxAllowlist is AdminAuth {\\n\\n    mapping (address => bool) public zrxAllowlist;\\n    mapping(address => bool) private nonPayableAddrs;\\n\\n    constructor() public {\\n        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\\n        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\\n        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\\n        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\\n\\n        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\\n    }\\n\\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\\n        zrxAllowlist[_zrxAddr] = _state;\\n    }\\n\\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\\n        return zrxAllowlist[_zrxAddr];\\n    }\\n\\n    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\\n\\t\\tnonPayableAddrs[_nonPayableAddr] = true;\\n\\t}\\n\\n\\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\\n\\t\\tnonPayableAddrs[_nonPayableAddr] = false;\\n\\t}\\n\\n\\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\\n\\t\\treturn nonPayableAddrs[_addr];\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/exchangeV3/DFSExchangeData.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract DFSExchangeData {\\n\\n    // first is empty to keep the legacy order in place\\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\\n\\n    enum ActionType { SELL, BUY }\\n\\n    struct OffchainData {\\n        address wrapper;\\n        address exchangeAddr;\\n        address allowanceTarget;\\n        uint256 price;\\n        uint256 protocolFee;\\n        bytes callData;\\n    }\\n\\n    struct ExchangeData {\\n        address srcAddr;\\n        address destAddr;\\n        uint256 srcAmount;\\n        uint256 destAmount;\\n        uint256 minPrice;\\n        uint256 dfsFeeDivider; // service fee divider\\n        address user; // user to check special fee\\n        address wrapper;\\n        bytes wrapperData;\\n        OffchainData offchainData;\\n    }\\n\\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\\n        return abi.encode(_exData);\\n    }\\n\\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\\n        _exData = abi.decode(_data, (ExchangeData));\\n    }\\n}\"\r\n    },\r\n    \"contracts/exchangeV3/DFSExchangeHelper.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Discount.sol\\\";\\n\\ncontract DFSExchangeHelper {\\n\\n    string public constant ERR_OFFCHAIN_DATA_INVALID = \\\"Offchain data invalid\\\";\\n\\n    using SafeERC20 for ERC20;\\n\\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant EXCHANGE_WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\\n    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\\n\\n    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\\n\\n\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        if (_token == KYBER_ETH_ADDRESS) return 18;\\n\\n        return ERC20(_token).decimals();\\n    }\\n\\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\\n            balance = address(this).balance;\\n        } else {\\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\\n        }\\n    }\\n\\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\\n        // send back any leftover ether or tokens\\n        if (address(this).balance > 0) {\\n            _to.transfer(address(this).balance);\\n        }\\n\\n        if (getBalance(_srcAddr) > 0) {\\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\\n        }\\n\\n        if (getBalance(_destAddr) > 0) {\\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\\n        }\\n    }\\n\\n    /// @notice Takes a feePercentage and sends it to wallet\\n    /// @param _amount Dai amount of the whole trade\\n    /// @param _user Address of the user\\n    /// @param _token Address of the token\\n    /// @param _dfsFeeDivider Dfs fee divider\\n    /// @return feeAmount Amount in Dai owner earned on the fee\\n    function getFee(uint256 _amount, address _user, address _token, uint256 _dfsFeeDivider) internal returns (uint256 feeAmount) {\\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\\n            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\\n        }\\n\\n        if (_dfsFeeDivider == 0) {\\n            feeAmount = 0;\\n        } else {\\n            feeAmount = _amount / _dfsFeeDivider;\\n\\n            // fee can't go over 10% of the whole amount\\n            if (feeAmount > (_amount / 10)) {\\n                feeAmount = _amount / 10;\\n            }\\n\\n            if (_token == KYBER_ETH_ADDRESS) {\\n                WALLET_ID.transfer(feeAmount);\\n            } else {\\n                ERC20(_token).safeTransfer(WALLET_ID, feeAmount);\\n            }\\n        }\\n    }\\n\\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n        require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n\\n        uint256 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n\\n        return x;\\n    }\\n\\n        function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\\n        if (_b.length < _index + 32) {\\n            revert(ERR_OFFCHAIN_DATA_INVALID);\\n        }\\n\\n        bytes32 input = bytes32(_input);\\n\\n        _index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(_b, _index), input)\\n        }\\n    }\\n\\n    /// @notice Converts Kybers Eth address -> Weth\\n    /// @param _src Input address\\n    function ethToWethAddr(address _src) internal pure returns (address) {\\n        return _src == KYBER_ETH_ADDRESS ? EXCHANGE_WETH_ADDRESS : _src;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/SaverExchangeRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../auth/AdminAuth.sol\\\";\\n\\ncontract SaverExchangeRegistry is AdminAuth {\\n\\n\\tmapping(address => bool) private wrappers;\\n\\n\\tconstructor() public {\\n\\t\\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\\n\\t\\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\\n\\t\\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\\n\\t}\\n\\n\\tfunction addWrapper(address _wrapper) public onlyOwner {\\n\\t\\twrappers[_wrapper] = true;\\n\\t}\\n\\n\\tfunction removeWrapper(address _wrapper) public onlyOwner {\\n\\t\\twrappers[_wrapper] = false;\\n\\t}\\n\\n\\tfunction isWrapper(address _wrapper) public view returns(bool) {\\n\\t\\treturn wrappers[_wrapper];\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/OffchainWrapperInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../exchangeV3/DFSExchangeData.sol\\\";\\n\\nabstract contract OffchainWrapperInterface is DFSExchangeData {\\n    function takeOrder(\\n        ExchangeData memory _exData,\\n        ActionType _type\\n    ) virtual public payable returns (bool success, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/GasTokenInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\nabstract contract GasTokenInterface is ERC20 {\\n    function free(uint256 value) public virtual returns (bool success);\\n\\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\\n\\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\\n\\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"AAVE_REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTOMATIC_SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOT_REGISTRY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFISAVER_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_DEST_AMOUNT_MISSING\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_NOT_ZEROX_EXCHANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_OFFCHAIN_DATA_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_SLIPPAGE_HIT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_WRAPPER_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANUAL_SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NINETY_NINE_PERCENT_WEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAVER_EXCHANGE_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZRX_ALLOWLIST_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_rateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"contract GasTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"name\":\"packExchangeData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_rateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unpackExchangeData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AaveSaverProxyV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}