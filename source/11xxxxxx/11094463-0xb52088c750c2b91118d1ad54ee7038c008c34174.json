{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts/IMultisigCarrier.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract IMultisigCarrier {\n\n    function vaultParties(\n        address vaultAddress\n    ) public view returns (address[] memory);\n\n    function approveFrom(\n        address caller,\n        address payable destination,\n        address currencyAddress,\n        uint256 amount\n    ) public returns (bool);\n\n}\n\n// File: contracts/MultisigVault.sol\n\npragma solidity ^0.5.0;\n\n\ncontract MultisigVault {\n\n    address private _carrier;\n\n    constructor() public {\n        _carrier = msg.sender;\n    }\n\n    function parties() public view returns (address[] memory) {\n        IMultisigCarrier multisigCarrier = IMultisigCarrier(_carrier);\n        return multisigCarrier.vaultParties(address(this));\n    }\n\n    function carrier() public view returns (address) {\n        return _carrier;\n    }\n\n    function approve(\n        address payable destination,\n        address currencyAddress,\n        uint256 amount\n    ) public returns (bool) {\n        IMultisigCarrier multisigCarrier = IMultisigCarrier(_carrier);\n        return multisigCarrier.approveFrom(msg.sender, destination, currencyAddress, amount);\n    }\n\n    function external_call(address destination, uint value, bytes memory data) public returns (bool) {\n        require(msg.sender == _carrier, \"Carriable: caller is not the carrier\");\n\n        bool result;\n        assembly {\n            let dataLength := mload(data)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                0,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n\n    function () external payable {}\n}\n","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carrier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"external_call\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parties\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultisigVault","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}