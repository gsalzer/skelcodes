{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface BullSwapToken {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Freeze(address indexed from, uint256 value);\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n\tfunction balanceOf(address) external view returns(uint256);\r\n    function transfer(address _to, uint256 _value) external;\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function burn(uint256 _value) external returns (bool success);\r\n\tfunction freeze(uint256 _value) external returns (bool success);\r\n\tfunction unfreeze(uint256 _value) external returns (bool success);\r\n\tfunction withdrawEther(uint256 amount) external;\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction balanceOf(address) external view returns(uint256);\r\n    function transfer(address _to, uint256 _value) external;\r\n}\r\n\r\ncontract BullSwapILO {\r\n    uint256 public tokenPerETH;\r\n    uint256 public discountTokenPerETH;\r\n    address public token;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => bool) public discount;\r\n\r\n    address payable private owner;\r\n\r\n    constructor(address _token) public {\r\n        owner = msg.sender;\r\n        token = _token;\r\n    }\r\n\r\n    function requireOwner() private view {\r\n        require(msg.sender == owner, \"Bullswap ILO: require owner address\");\r\n    }\r\n    \r\n    function setDiscount(address payable _address) public {\r\n        requireOwner();\r\n        discount[_address] = true;\r\n    }\r\n    \r\n     function unSetdiscount(address payable _address) public {\r\n        requireOwner();\r\n        discount[_address] = false;\r\n    }\r\n\r\n    function start(uint256 _tokenPerETH, uint256 _discountTokenPerETH) public {\r\n        requireOwner();\r\n        tokenPerETH = _tokenPerETH;\r\n        discountTokenPerETH = _discountTokenPerETH;\r\n    }\r\n\r\n    function stop() public {\r\n        requireOwner();\r\n        uint256 balance = forSale();\r\n        BullSwapToken t = BullSwapToken(token);\r\n        t.burn(balance);\r\n    }\r\n\r\n    function withdrawal() public {\r\n        requireOwner();\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function getToken(address _token) public {\r\n        requireOwner();\r\n        IERC20 t = IERC20(_token);\r\n        t.transfer(owner, t.balanceOf(address(this)));\r\n    }\r\n\r\n    function forSale() public view returns (uint256) {\r\n        BullSwapToken t = BullSwapToken(token);\r\n        uint256 balance = t.balanceOf(address(this));\r\n        return balance;\r\n    }\r\n\r\n    receive() external payable {\r\n        uint256 currentTokenPerETH = tokenPerETH;\r\n        if (discount[msg.sender]) {\r\n            // sale off\r\n            currentTokenPerETH = discountTokenPerETH;\r\n        }\r\n        \r\n        uint256 tokenAmount = msg.value * currentTokenPerETH;\r\n        uint256 balance = forSale();\r\n        require(balance >= tokenAmount, \"Bullswap ILO: not enough token for sale\");\r\n        BullSwapToken t = BullSwapToken(token);\r\n        t.transfer(msg.sender, tokenAmount);\r\n        balances[msg.sender] += tokenAmount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountTokenPerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountTokenPerETH\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unSetdiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BullSwapILO","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e7d324b2677440608fb871981b220eca062c3fbf","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://78d2174aaa69bb829c9e762b11f58990f549acc78364920fe294560d8f486ccf"}]}