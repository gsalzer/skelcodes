{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/konstantinovv/source/pollen/investment-fund-dao/contracts/StakeholdersWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IERC20Min {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\n// It distributes ERC-20 tokens from its balance to stakeholders\\ncontract StakeholdersWallet {\\n\\n    struct StakeHolder {\\n        address wallet;\\n        uint32 stake;\\n    }\\n\\n    // Reserved storage space for possible proxies' use\\n    uint256[100] __gap;\\n\\n    // Sum of stakes scaled by 1e4\\n    uint256 public stakesSum;\\n\\n    // Mapping from stakeholder ID (index starting from 1) to stakeholder data\\n    mapping(uint256 => StakeHolder) public stakeholders;\\n    uint public numOfStakes;\\n\\n    bool private _notEntered;\\n\\n    event Stakeholder(uint256 indexed id, address wellet, uint256 stake);\\n    event WalletUpdate(uint256 id, address newWallet);\\n    event Distributed(uint256 indexed id, address token, uint256 amount);\\n\\n    constructor (StakeHolder[] memory _stakeholders) public\\n    {\\n        _notEntered = true;\\n\\n        // To minimize 'out of gas' risk on distributions\\n        require(_stakeholders.length <= 20, \\\"too many stakeholders\\\");\\n\\n        for (uint i = 0 ; i < _stakeholders.length; i++) {\\n            _revertZeroAddress(_stakeholders[i].wallet);\\n            require(\\n                _stakeholders[i].stake != 0 && _stakeholders[i].stake < 2**32,\\n                \\\"invalid stake\\\"\\n            );\\n\\n            stakeholders[i + 1] = _stakeholders[i];\\n\\n            // can't overflow (no safeMath needed)\\n            numOfStakes = numOfStakes + 1;\\n            stakesSum = stakesSum + _stakeholders[i].stake;\\n\\n            emit Stakeholder(i + 1, _stakeholders[i].wallet, _stakeholders[i].stake);\\n        }\\n    }\\n\\n    // Distribute this contract balance between stakeholders (anyone can call)\\n    function distribute(IERC20Min token) external {\\n        require(_notEntered, \\\"reentrant call\\\");\\n        _notEntered = false;\\n\\n        _revertZeroAddress(address(token));\\n        require(stakesSum != 0, \\\"no stakes to distribute between\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n        // division by zero impossible\\n        uint256 scaledShare = _mul(balance, 1e4) / stakesSum;\\n\\n        require(scaledShare != 0, \\\"nothing to distribute\\\");\\n\\n        for (uint256 i = 1; i <= numOfStakes; i++) {\\n            StakeHolder memory holder = stakeholders[i];\\n\\n            uint256 amount = _mul(scaledShare, holder.stake) / 1e4;\\n            _safeTransfer(token, holder.wallet, amount);\\n\\n            emit Distributed(i, address(token), amount);\\n        }\\n\\n        _notEntered = true;\\n    }\\n\\n    // Update wallet address of a stakeholder (only the stakeholder may call)\\n    function updateWallet(uint stakeholderID, address newWallet) external {\\n        require(stakeholders[stakeholderID].wallet == msg.sender, \\\"unauthorized\\\");\\n        _revertZeroAddress(newWallet);\\n        stakeholders[stakeholderID].wallet = newWallet;\\n        emit WalletUpdate(stakeholderID, newWallet);\\n    }\\n\\n    // Borrowed from SafeERC20 by @openzeppelin\\n    function _safeTransfer(IERC20Min token, address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: operation did not succeed\\\"\\n            );\\n        }\\n    }\\n\\n    function _mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        if (a == 0) return 0;\\n        c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n    }\\n\\n    function _revertZeroAddress(address _address) private pure {\\n        require(_address != address(0), \\\"zero address\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stake\",\"type\":\"uint32\"}],\"internalType\":\"struct StakeholdersWallet.StakeHolder[]\",\"name\":\"_stakeholders\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wellet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"Stakeholder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20Min\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stake\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeholderID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeholdersWallet","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009c4bd82dd0cad34f1428e9c0dacb8d2c6ca21c10000000000000000000000000000000000000000000000000000000000002e9a00000000000000000000000066d4d5e3a910e55f58af8bf7bad581ab283b1a2b0000000000000000000000000000000000000000000000000000000000000e06000000000000000000000000d81634fb888c076256e8848986c30d6d618caa060000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000604691f1a097fb4f571dded725805bfc3035f7e50000000000000000000000000000000000000000000000000000000000002396000000000000000000000000fab23f6239e27d812495579784bc1cc4352c54090000000000000000000000000000000000000000000000000000000000001b2600000000000000000000000091615d4f4bdda59cb8ffcf2d27b77d831b2fd0690000000000000000000000000000000000000000000000000000000000002da000000000000000000000000054d35908413cea0b84845c3936b6792b1aff56cf000000000000000000000000000000000000000000000000000000000000033e000000000000000000000000324f099c5b98c0c9964071481c7762b6635d67330000000000000000000000000000000000000000000000000000000000000096000000000000000000000000179286f577cdc83260ac2bf0f93f5108d177928000000000000000000000000000000000000000000000000000000000000038cc0000000000000000000000009a4931eb54dec1831b301c06899f78c82a967065000000000000000000000000000000000000000000000000000000000000136a0000000000000000000000009264ebbdb6a072885d8f403c7a70a705906694b400000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000008f32bfe28b8e9fd1904fc0905353985ece36e23100000000000000000000000000000000000000000000000000000000000080e8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}