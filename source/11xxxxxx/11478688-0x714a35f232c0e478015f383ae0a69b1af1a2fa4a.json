{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-09\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface ISett {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function getPricePerFullShare() external view returns(uint);\r\n}\r\n\r\ninterface IGeyser {\r\n    function totalStakedFor(address owner) external view returns (uint);\r\n}\r\n\r\ncontract BadgerVotingShare {\r\n    IERC20 constant badger = IERC20(0x3472A5A71965499acd81997a54BBA8D852C6E53d);    \r\n    ISett constant sett_badger = ISett(0x19D97D8fA813EE2f51aD4B4e04EA08bAf4DFfC28);\r\n    IGeyser constant geyser_badger = IGeyser(0xa9429271a28F8543eFFfa136994c0839E7d7bF77);\r\n    \r\n    //Badger is token1\r\n    IUniswapV2Pair constant badger_wBTC_UniV2 = IUniswapV2Pair(0xcD7989894bc033581532D2cd88Da5db0A4b12859);\r\n    ISett constant sett_badger_wBTC_UniV2 = ISett(0x235c9e24D3FB2FAFd58a2E49D454Fdcd2DBf7FF1);\r\n    IGeyser constant geyser_badger_wBTC_UniV2 = IGeyser(0xA207D69Ea6Fb967E54baA8639c408c31767Ba62D);  \r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return uint8(18);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return \"Badger Voting Share\";\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"Badger VS\";\r\n    }\r\n\r\n    function totalSupply() external view returns (uint) {\r\n        return badger.totalSupply();\r\n    }\r\n    \r\n    /*\r\n        The voter can have Badger in Uniswap in 3 configurations:\r\n         * Staked bUni-V2 in Geyser\r\n         * Unstaked bUni-V2 (same as staked Uni-V2 in Sett)\r\n         * Unstaked Uni-V2\r\n        The top two correspond to more than 1 Uni-V2, so they are multiplied by pricePerFullShare.\r\n        After adding all 3 balances we calculate how much BADGER it corresponds to using the pool's reserves.\r\n    */\r\n    function _uniswapBalanceOf(address _voter) internal view returns(uint) {\r\n        uint bUniV2PricePerShare = sett_badger_wBTC_UniV2.getPricePerFullShare();\r\n        (, uint112 reserve1, ) = badger_wBTC_UniV2.getReserves();\r\n        uint totalUniBalance = badger_wBTC_UniV2.balanceOf(_voter)\r\n            + sett_badger_wBTC_UniV2.balanceOf(_voter) * bUniV2PricePerShare / 1e18 \r\n            + geyser_badger_wBTC_UniV2.totalStakedFor(_voter) * bUniV2PricePerShare / 1e18;\r\n        return totalUniBalance * reserve1 / badger_wBTC_UniV2.totalSupply();\r\n    }\r\n    \r\n    /*\r\n        The voter can have regular Badger in 3 configurations as well:\r\n         * Staked bBadger in Geyser\r\n         * Unstaked bBadger (same as staked Badger in Sett)\r\n         * Unstaked Badger\r\n    */\r\n    function _badgerBalanceOf(address _voter) internal view returns(uint) {\r\n        uint bBadgerPricePerShare = sett_badger.getPricePerFullShare();\r\n        return badger.balanceOf(_voter)\r\n            + sett_badger.balanceOf(_voter) * bBadgerPricePerShare / 1e18 \r\n            + geyser_badger.totalStakedFor(_voter) * bBadgerPricePerShare / 1e18;\r\n    }\r\n\r\n    function balanceOf(address _voter) external view returns (uint) {\r\n        return _badgerBalanceOf(_voter) + _uniswapBalanceOf(_voter);\r\n    }\r\n\r\n    constructor() {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BadgerVotingShare","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://73c2aaf7c984d419b87f439fcad5823d058e603eafebfd41ed631313cc4f643d"}]}