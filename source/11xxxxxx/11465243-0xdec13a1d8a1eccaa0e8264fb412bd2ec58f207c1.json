{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.11;\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function approve(address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ninterface StakingPool {\r\n    function disburseRewardTokens() external;\r\n    function burnRewardTokens() external;\r\n    function transferOwnership(address) external;\r\n}\r\n\r\n/**\r\n * @title Governance\r\n * @dev Governance smart contract for staking pools\r\n * Takes in DYP as votes\r\n * Allows addition and removal of votes during a proposal is open\r\n * Allows withdrawal of all dyp once the latest voted proposal of a user is closed\r\n * Has a QUORUM requirement for proposals to be executed\r\n * CONTRACT VARIABLES must be changed to appropriate values before live deployment\r\n */\r\ncontract Governance {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n    // Contracts are not allowed to deposit, claim or withdraw\r\n    modifier noContractsAllowed() {\r\n        require(!(address(msg.sender).isContract()) && tx.origin == msg.sender, \"No Contracts Allowed!\");\r\n        _;\r\n    }\r\n    \r\n    // ============== CONTRACT VARIABLES ==============\r\n    \r\n    // voting token contract address\r\n    address public constant TRUSTED_TOKEN_ADDRESS = 0x961C8c0B1aaD0c0b10a51FeF6a867E3091BCef17;\r\n    \r\n    // minimum number of votes required for a result to be valid\r\n    // 1 token = 1 vote\r\n    uint public constant QUORUM = 50000e18;\r\n    \r\n    // minimum number of tokens required to initialize a proposal\r\n    uint public constant MIN_BALANCE_TO_INIT_PROPOSAL = 10000e18;\r\n    \r\n    // duration since proposal creation till users can vote\r\n    uint public constant VOTE_DURATION = 3 days;\r\n    \r\n    // duration after voting, since a proposal has passed\r\n    // during which the proposed action may be executed\r\n    uint public constant RESULT_EXECUTION_ALLOWANCE_PERIOD = 3 days;\r\n    \r\n    // ============ END CONTRACT VARIABLES ============\r\n    \r\n    enum Action {\r\n        DISBURSE_OR_BURN,\r\n        UPGRADE_GOVERNANCE\r\n    }\r\n    enum Option {\r\n        ONE, // disburse | yes\r\n        TWO // burn | no\r\n    }\r\n    \r\n    // proposal id => action\r\n    mapping (uint => Action) public actions;\r\n    \r\n    // proposal id => option one votes\r\n    mapping (uint => uint) public optionOneVotes;\r\n    \r\n    // proposal id => option two votes\r\n    mapping (uint => uint) public optionTwoVotes;\r\n    \r\n    // proposal id => staking pool\r\n    mapping (uint => StakingPool) public stakingPools;\r\n    \r\n    // proposal id => newGovernance\r\n    mapping (uint => address) public newGovernances;\r\n    \r\n    // proposal id => unix time for proposal start\r\n    mapping (uint => uint) public proposalStartTime;\r\n    \r\n    // proposal id => bool\r\n    mapping (uint => bool) public isProposalExecuted;\r\n    \r\n    // address user => total deposited DYP\r\n    mapping (address => uint) public totalDepositedTokens;\r\n    \r\n    // address user => uint proposal id => uint vote amounts\r\n    mapping (address => mapping (uint => uint)) public votesForProposalByAddress;\r\n    \r\n    // address user => uint proposal id => Option voted for option\r\n    mapping (address => mapping (uint => Option)) public votedForOption;\r\n    \r\n    // address user => uint proposal id for the latest proposal the user voted on\r\n    mapping (address => uint) public lastVotedProposalStartTime;\r\n    \r\n    // uint last proposal id\r\n    // proposal ids start at 1\r\n    uint public lastIndex = 0;\r\n    \r\n    // view function to get proposal details\r\n    function getProposal(uint proposalId) external view returns (\r\n        uint _proposalId, \r\n        Action _proposalAction,\r\n        uint _optionOneVotes,\r\n        uint _optionTwoVotes,\r\n        StakingPool _stakingPool,\r\n        address _newGovernance,\r\n        uint _proposalStartTime,\r\n        bool _isProposalExecuted\r\n        ) {\r\n        _proposalId = proposalId;\r\n        _proposalAction = actions[proposalId];\r\n        _optionOneVotes = optionOneVotes[proposalId];\r\n        _optionTwoVotes = optionTwoVotes[proposalId];\r\n        _stakingPool = stakingPools[proposalId];\r\n        _newGovernance = newGovernances[proposalId];\r\n        _proposalStartTime = proposalStartTime[proposalId];\r\n        _isProposalExecuted = isProposalExecuted[proposalId];\r\n    }\r\n    \r\n    // Any DYP holder with a minimum required DYP balance may initiate a proposal\r\n    // to with the DISBURSE_OR_BURN action for a given staking pool\r\n    function proposeDisburseOrBurn(StakingPool pool) external noContractsAllowed {\r\n        require(Token(TRUSTED_TOKEN_ADDRESS).balanceOf(msg.sender) >= MIN_BALANCE_TO_INIT_PROPOSAL, \"Insufficient Governance Token Balance\");\r\n        lastIndex = lastIndex.add(1);\r\n        stakingPools[lastIndex] = pool;\r\n        proposalStartTime[lastIndex] = now;\r\n        actions[lastIndex] = Action.DISBURSE_OR_BURN;\r\n    }\r\n    \r\n    // Any DYP holder with a minimum required DYP balance may initiate a proposal\r\n    // to with the UPGRADE_GOVERNANCE action for a given staking pool\r\n    function proposeUpgradeGovernance(StakingPool pool, address newGovernance) external noContractsAllowed {\r\n        require(Token(TRUSTED_TOKEN_ADDRESS).balanceOf(msg.sender) >= MIN_BALANCE_TO_INIT_PROPOSAL, \"Insufficient Governance Token Balance\");\r\n        lastIndex = lastIndex.add(1);\r\n        stakingPools[lastIndex] = pool;\r\n        newGovernances[lastIndex] = newGovernance;\r\n        proposalStartTime[lastIndex] = now;\r\n        actions[lastIndex] = Action.UPGRADE_GOVERNANCE;\r\n    }\r\n    \r\n    // Any DYP holder may add votes for a particular open proposal, \r\n    // with options YES / NO | DISBURSE / BURN | ONE / TWO\r\n    // with `amount` DYP, each DYP unit corresponds to one vote unit\r\n    \r\n    // If user has already voted for a proposal with an option,\r\n    // user may not add votes with another option, \r\n    // they will need to add votes for the same option\r\n    function addVotes(uint proposalId, Option option, uint amount) external noContractsAllowed {\r\n        require(amount > 0, \"Cannot add 0 votes!\");\r\n        require(isProposalOpen(proposalId), \"Proposal is closed!\");\r\n        \r\n        require(Token(TRUSTED_TOKEN_ADDRESS).transferFrom(msg.sender, address(this), amount), \"transferFrom failed!\");\r\n        \r\n        // if user is voting for this proposal first time\r\n        if (votesForProposalByAddress[msg.sender][proposalId] == 0) {\r\n            votedForOption[msg.sender][proposalId] = option;\r\n        } else {\r\n            if (votedForOption[msg.sender][proposalId] != option) {\r\n                revert(\"Cannot vote for both options!\");\r\n            }\r\n        }\r\n        \r\n        if (option == Option.ONE) {\r\n            optionOneVotes[proposalId] = optionOneVotes[proposalId].add(amount);\r\n        } else {\r\n            optionTwoVotes[proposalId] = optionTwoVotes[proposalId].add(amount);\r\n        }\r\n        totalDepositedTokens[msg.sender] = totalDepositedTokens[msg.sender].add(amount);\r\n        votesForProposalByAddress[msg.sender][proposalId] = votesForProposalByAddress[msg.sender][proposalId].add(amount);\r\n        \r\n        if (lastVotedProposalStartTime[msg.sender] < proposalStartTime[proposalId]) {\r\n            lastVotedProposalStartTime[msg.sender] = proposalStartTime[proposalId];\r\n        }\r\n    }\r\n    \r\n    // Any voter may remove their votes (DYP) from any proposal they voted for \r\n    // only when the proposal is open - removing votes refund DYP to user and deduct their votes\r\n    function removeVotes(uint proposalId, uint amount) external noContractsAllowed {\r\n        require(amount > 0, \"Cannot remove 0 votes!\");\r\n        require(isProposalOpen(proposalId), \"Proposal is closed!\");\r\n        \r\n        require(amount <= votesForProposalByAddress[msg.sender][proposalId], \"Cannot remove more tokens than deposited!\");\r\n        \r\n        votesForProposalByAddress[msg.sender][proposalId] = votesForProposalByAddress[msg.sender][proposalId].sub(amount);\r\n        totalDepositedTokens[msg.sender] = totalDepositedTokens[msg.sender].sub(amount);\r\n        \r\n        if (votedForOption[msg.sender][proposalId] == Option.ONE) {\r\n            optionOneVotes[proposalId] = optionOneVotes[proposalId].sub(amount);\r\n        } else {\r\n            optionTwoVotes[proposalId] = optionTwoVotes[proposalId].sub(amount);\r\n        }\r\n        \r\n        require(Token(TRUSTED_TOKEN_ADDRESS).transfer(msg.sender, amount), \"transfer failed\");\r\n    }\r\n\r\n    // After the latest proposal the user voted for, is closed for voting,\r\n    // The user may remove all DYP they added to this contract\r\n    function withdrawAllTokens() external noContractsAllowed {\r\n        require(now > lastVotedProposalStartTime[msg.sender].add(VOTE_DURATION), \"Tokens are still in voting!\");\r\n        require(Token(TRUSTED_TOKEN_ADDRESS).transfer(msg.sender, totalDepositedTokens[msg.sender]), \"transfer failed!\");\r\n        totalDepositedTokens[msg.sender] = 0;\r\n    }\r\n    \r\n    // After votes for a proposal are closed, the proposal may be executed by anyone\r\n    // If QUORUM is not reached, transaction must revert\r\n    // If winning option has more votes than losing option, winning action is executed\r\n    // Else losing action is executed\r\n    // Each proposal may be executed only once\r\n    function executeProposal(uint proposalId) external noContractsAllowed {\r\n        require(isProposalExecutible(proposalId), \"Proposal Expired!\");\r\n        isProposalExecuted[proposalId] = true;\r\n        \r\n        Option winningOption;\r\n        uint winningOptionVotes;\r\n        \r\n        if (optionOneVotes[proposalId] > optionTwoVotes[proposalId]) {\r\n            winningOption = Option.ONE;\r\n            winningOptionVotes = optionOneVotes[proposalId];\r\n        } else {\r\n            winningOption = Option.TWO;\r\n            winningOptionVotes = optionTwoVotes[proposalId];\r\n        }\r\n        \r\n        // no action will be taken if winningOptionVotes are less than QUORUM\r\n        if (winningOptionVotes < QUORUM) {\r\n            revert(\"QUORUM not reached!\");\r\n        }\r\n        \r\n        if (actions[proposalId] == Action.DISBURSE_OR_BURN) {\r\n            if (winningOption == Option.ONE) {\r\n                stakingPools[proposalId].disburseRewardTokens();\r\n            } else {\r\n                stakingPools[proposalId].burnRewardTokens();\r\n            }\r\n        } else if (actions[proposalId] == Action.UPGRADE_GOVERNANCE) {\r\n            if (winningOption == Option.ONE) {\r\n                stakingPools[proposalId].transferOwnership(newGovernances[proposalId]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // view function to know whether voting for a particular proposal is open\r\n    function isProposalOpen(uint proposalId) public view returns (bool) {\r\n        if (now < proposalStartTime[proposalId].add(VOTE_DURATION)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // View function to know whether voting for a proposal is closed AND \r\n    // The proposal is within the RESULT_EXECUTION_ALLOWANCE_PERIOD AND\r\n    // Has not been executed yet\r\n    function isProposalExecutible(uint proposalId) public view returns (bool) {\r\n        if ((!isProposalOpen(proposalId)) && \r\n            (now < proposalStartTime[proposalId].add(VOTE_DURATION).add(RESULT_EXECUTION_ALLOWANCE_PERIOD)) &&\r\n            !isProposalExecuted[proposalId]) {\r\n                return true;\r\n            }\r\n        return false;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"name\":\"MIN_BALANCE_TO_INIT_PROPOSAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUORUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESULT_EXECUTION_ALLOWANCE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTED_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actions\",\"outputs\":[{\"internalType\":\"enum Governance.Action\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum Governance.Option\",\"name\":\"option\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum Governance.Action\",\"name\":\"_proposalAction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_optionOneVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_optionTwoVotes\",\"type\":\"uint256\"},{\"internalType\":\"contract StakingPool\",\"name\":\"_stakingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isProposalExecuted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isProposalExecutible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isProposalOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastVotedProposalStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newGovernances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionOneVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionTwoVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"proposeDisburseOrBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"proposeUpgradeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedForOption\",\"outputs\":[{\"internalType\":\"enum Governance.Option\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votesForProposalByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Governance","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6b4891946a743f89069267eeedace8be837cedf4e6536268dac1d46488b0310a"}]}