{"status":"1","message":"OK","result":[{"SourceCode":"// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transfer(address dst, uint amt) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n}\r\n\r\ninterface IMPool {\r\n    function controller() external returns (address);\r\n    function totalSupply() external view returns (uint);\r\n    function isBound(address t) external view returns (bool);\r\n    function getFinalTokens() external view returns(address[] memory);\r\n    function getBalance(address token) external view returns (uint);\r\n    function getDenormalizedWeight(address token) external view returns (uint);\r\n    function setSwapFee(uint swapFee) external;\r\n    function setController(address controller) external;\r\n    function setPair(address pair) external;\r\n    function bind(address token, uint balance, uint denorm) external;\r\n    function finalize(address beneficiary, uint256 initAmount) external;\r\n    function updatePairGPInfo(address[] calldata gps, uint[] calldata shares) external;\r\n    function joinPool(address beneficiary, uint poolAmountOut) external;\r\n    function rebind(address token, uint balance, uint denorm) external;\r\n}\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IPairToken {\r\n    function setController(address _controller) external ;\r\n}\r\n\r\ninterface IMFactory {\r\n    function newMPool() external returns (IMPool);\r\n}\r\n\r\ninterface IPairFactory {\r\n    function newPair(address pool, uint256 perBlock, uint256 rate) external returns (IPairToken);\r\n    function getPairToken(address pool) external view returns (address);\r\n}\r\n\r\n\r\n\r\n/********************************** WARNING **********************************/\r\n//                                                                           //\r\n// This contract is only meant to be used in conjunction with ds-proxy.      //\r\n// Calling this contract directly will lead to loss of funds.                //\r\n//                                                                           //\r\n/********************************** WARNING **********************************/\r\n\r\ncontract MActions {\r\n\r\n    function createWithPair(\r\n        IMFactory factory,\r\n        IPairFactory pairFactory,\r\n        address[] calldata tokens,\r\n        uint[] calldata balances,\r\n        uint[] calldata denorms,\r\n        address[] calldata gps,\r\n        uint[] calldata shares,\r\n        uint swapFee,\r\n        uint gpRate\r\n    ) external payable returns (IMPool pool) {\r\n        pool = create(factory, tokens, balances, denorms, swapFee, 0, false);\r\n\r\n        IPairToken pair = pairFactory.newPair(address(pool), 4 * 10 ** 18, gpRate);\r\n\r\n        pool.setPair(address(pair));\r\n        if (gpRate > 0 && gpRate <= 15 && gps.length != 0 && gps.length == shares.length) {\r\n            pool.updatePairGPInfo(gps, shares);\r\n        }\r\n        pool.finalize(msg.sender, 0);\r\n        pool.setController(msg.sender);\r\n        pair.setController(msg.sender);\r\n    }\r\n\r\n    function create(\r\n        IMFactory factory,\r\n        address[] memory tokens,\r\n        uint[] memory balances,\r\n        uint[] memory denorms,\r\n        uint swapFee,\r\n        uint initLpSupply,\r\n        bool finalize\r\n    ) public payable returns (IMPool pool) {\r\n        require(tokens.length == balances.length, \"ERR_LENGTH_MISMATCH\");\r\n        require(tokens.length == denorms.length, \"ERR_LENGTH_MISMATCH\");\r\n\r\n        pool = factory.newMPool();\r\n        pool.setSwapFee(swapFee);\r\n\r\n        address ETH = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n        address weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            address inToken = tokens[i];\r\n            if (inToken == ETH) {\r\n                require(msg.value == balances[i], \"ERR_LIMIT_IN\");\r\n                TokenInterface(weth).deposit.value(msg.value)();\r\n                inToken = weth;\r\n            } else {\r\n                safeTransferFrom(inToken, msg.sender, address(this), balances[i]);\r\n            }\r\n            IERC20 token = IERC20(inToken);\r\n            if (token.allowance(address(this), address(pool)) > 0) {\r\n                safeApprove(inToken, address(pool), 0);\r\n            }\r\n            safeApprove(inToken, address(pool), balances[i]);\r\n            pool.bind(inToken, balances[i], denorms[i]);\r\n        }\r\n        if (finalize) {\r\n            pool.finalize(msg.sender, initLpSupply);\r\n            pool.setController(msg.sender);\r\n        }\r\n\r\n    }\r\n\r\n    function joinPool(\r\n        IMPool pool,\r\n        uint poolAmountOut,\r\n        uint[] calldata maxAmountsIn\r\n    ) external payable {\r\n        address[] memory tokens = pool.getFinalTokens();\r\n        require(maxAmountsIn.length == tokens.length, \"ERR_LENGTH_MISMATCH\");\r\n        uint poolTotal = pool.totalSupply();\r\n        uint ratio = bdiv(poolAmountOut, poolTotal);\r\n        require(ratio != 0, \"ERR_MATH_APPROX\");\r\n        address _weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            address t = tokens[i];\r\n            uint bal = pool.getBalance(t);\r\n            uint tokenAmountIn = bmul(ratio, bal);\r\n            require(tokenAmountIn != 0, \"ERR_MATH_APPROX\");\r\n            require(tokenAmountIn <= maxAmountsIn[i], \"ERR_LIMIT_IN\");\r\n            address from = msg.sender;\r\n            if (msg.value > 0 && t == _weth) {\r\n                require(msg.value <= maxAmountsIn[i], \"ERR_ETH_IN\");\r\n                TokenInterface weth = TokenInterface(_weth);\r\n                weth.deposit.value(tokenAmountIn)();\r\n                t = address(weth);\r\n                from = address(this);\r\n                if (msg.value > tokenAmountIn) {\r\n                    safeTransferETH(msg.sender, bsub(msg.value, tokenAmountIn));\r\n                }\r\n            }\r\n            safeTransferFrom(t, from, address(pool), tokenAmountIn);\r\n        }\r\n        pool.joinPool(msg.sender, poolAmountOut);\r\n    }\r\n\r\n    function rebind(\r\n        IMPool pool,\r\n        uint[] memory balances,\r\n        uint initLpSupply\r\n    ) public payable {\r\n        require(address(pool) != address(0), \"ERR_POOL_INVALID\");\r\n        address[] memory tokens = pool.getFinalTokens();\r\n        require(tokens.length == balances.length, \"ERR_LENGTH_MISMATCH\");\r\n        TokenInterface weth = TokenInterface(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n        bool costETH = false;\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            address inToken = tokens[i];\r\n            if (inToken == address(weth) && msg.value > 0) {\r\n                require(msg.value == balances[i], \"ERR_LIMIT_IN\");\r\n                weth.deposit.value(msg.value)();\r\n                costETH = true;\r\n            } else {\r\n                safeTransferFrom(inToken, msg.sender, address(this), balances[i]);\r\n            }\r\n            IERC20 token = IERC20(inToken);\r\n            if (token.allowance(address(this), address(pool)) > 0) {\r\n                safeApprove(inToken, address(pool), 0);\r\n            }\r\n            safeApprove(inToken, address(pool), balances[i]);\r\n            pool.rebind(inToken, balances[i], pool.getDenormalizedWeight(inToken));\r\n        }\r\n        if(msg.value > 0 && !costETH){\r\n            safeTransferETH(msg.sender, msg.value);\r\n        }\r\n        pool.finalize(msg.sender, initLpSupply);\r\n        pool.setController(msg.sender);\r\n    }\r\n\r\n    // when sender transfer controller to dproxy, dproxy could transfer controller back to msg.sender;\r\n    // note: mustn't transfer pool's controller to MActions.\r\n    function transferController(IMPool pool) external {\r\n        require(pool.controller() == address(this), \"ERR_POOL_CONTROOLER\");\r\n        pool.setController(msg.sender);\r\n    }\r\n\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, ) = to.call.value(value)(\"\");\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n\r\n    function setController(IMPool pool, address newController) external {\r\n        pool.setController(newController);\r\n    }\r\n\r\n\r\n    function bdiv(uint a, uint b)\r\n    internal pure\r\n    returns (uint)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * 10 ** 18;\r\n        require(a == 0 || c0 / a == 1 * 10 ** 18, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    function bmul(uint a, uint b)\r\n    internal pure\r\n    returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint c1 = c0 + (1 * 10 ** 18) / 2;\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint c2 = c1 / (1 * 10 ** 18);\r\n        return c2;\r\n    }\r\n\r\n    function bsub(uint a, uint b)\r\n    internal pure\r\n    returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsubSign(uint a, uint b)\r\n    internal pure\r\n    returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IMFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denorms\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initLpSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalize\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IMPool\",\"name\":\"pool\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IMFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IPairFactory\",\"name\":\"pairFactory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denorms\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"gps\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gpRate\",\"type\":\"uint256\"}],\"name\":\"createWithPair\",\"outputs\":[{\"internalType\":\"contract IMPool\",\"name\":\"pool\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IMPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IMPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"initLpSupply\",\"type\":\"uint256\"}],\"name\":\"rebind\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IMPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IMPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"transferController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MActions","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://10d43eb45af8d761ebeb87b0fa42ef12640d666c9c6991a1dee1790c3e333183"}]}