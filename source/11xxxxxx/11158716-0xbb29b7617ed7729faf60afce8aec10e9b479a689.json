{"status":"1","message":"OK","result":[{"SourceCode":"{\"myfi.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2020-09-14\\r\\n*/\\r\\n\\r\\npragma solidity ^0.5.1;\\r\\n\\r\\n\\r\\n/*\\r\\n    * Moon YFI contract is ERC20 with PolkaDot and Moonbeam swap comopatibility.\\r\\n*/\\r\\n\\r\\ninterface ERC20 {\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    function transfer(address _to, uint256 _value) external returns (bool);\\r\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\r\\n    function approve(address _spender, uint256 _value) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n/*\\r\\n    * SafeMath\\r\\n    \\r\\n*/\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b \\u003c= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\n/*\\r\\n    * Swap logic to Moonbeam PolkaDot 1:1 swap\\r\\n    \\r\\n        Create ERC20 Contract in code below with PolkaDot and Moonbeam contract comopatibility.\\r\\n        ERC20 Moon YFI token holders will receive 1:1 swap of Moonbeam Moon YFI staking tokens.  \\r\\n        Moonbeam Testnet live Q3 2020. \\r\\n*/\\r\\ncontract MoonYFI is ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    address private deployer;\\r\\n    string public name = \\\"Moon YFI\\\";\\r\\n    string public symbol = \\\"MYFI\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint256 private constant decimalFactor = 10 ** uint256(decimals);\\r\\n    uint256 public constant startingSupply = 30000 * decimalFactor;\\r\\n    uint256 public burntTokens = 0;\\r\\n    bool public minted = false;\\r\\n    bool public unlocked = false;\\r\\n    mapping (address =\\u003e uint256) balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\r\\n\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(deployer == msg.sender, \\\"Caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        deployer = msg.sender;\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return deployer;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        uint256 currentTokens = startingSupply.sub(burntTokens);\\r\\n        return currentTokens;\\r\\n    }\\r\\n    \\r\\n    function mint(address _owner) public onlyOwner returns (bool) {\\r\\n        require(minted != true, \\\"Tokens already minted\\\");\\r\\n        balances[_owner] = startingSupply;\\r\\n        emit Transfer(address(0), _owner, startingSupply);\\r\\n        minted = true;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function unlockTokens() public onlyOwner returns (bool) {\\r\\n        require(unlocked != true, \\\"Tokens already unlocked\\\");\\r\\n        unlocked = true;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    \\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0));\\r\\n        balances[account] = balances[account].sub(amount);\\r\\n        burntTokens = burntTokens.add(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[msg.sender]);\\r\\n        require(unlocked == true, \\\"Tokens not unlocked yet\\\");\\r\\n        uint256 tokensToBurn = _value.div(100);\\r\\n        uint256 tokensToSend = _value.sub(tokensToBurn);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(tokensToSend);\\r\\n        _burn(msg.sender, tokensToBurn);\\r\\n        balances[_to] = balances[_to].add(tokensToSend);\\r\\n        \\r\\n        emit Transfer(msg.sender, _to, tokensToSend);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[_from]);\\r\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\r\\n        require(unlocked == true, \\\"Tokens not unlocked yet\\\");\\r\\n        uint256 tokensToBurn = _value.div(100);\\r\\n        uint256 tokensToSend = _value.sub(tokensToBurn);\\r\\n        balances[_from] = balances[_from].sub(tokensToSend);\\r\\n        balances[_to] = balances[_to].add(tokensToSend);\\r\\n        _burn(_from, tokensToBurn);\\r\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n        emit Transfer(_from, _to, tokensToSend);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\r\\n        uint oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subtractedValue \\u003e oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"staking.sol\":{\"content\":\"pragma solidity \\u003c=7.0.2;\\r\\n\\r\\nimport \\u0027./myfi.sol\\u0027;\\r\\n\\r\\ncontract Math {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b \\u003c= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\n \\r\\ncontract Staking is Math {\\r\\n    MoonYFI public myfi;\\r\\n    uint256[4] public rFactors = [0,210000000000,130000000000,90000000000];\\r\\n    uint256 public currentLevel = 0;\\r\\n    uint256 public nextLevel = 0;\\r\\n    address public owner;\\r\\n\\r\\n    constructor(address contract_address) public{\\r\\n        myfi = MoonYFI(contract_address);\\r\\n        currentLevel = currentLevel + 1;\\r\\n        nextLevel = nextLevel + 180 days;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    struct User {\\r\\n        uint256 currentStake;\\r\\n        uint256 rewardsClaimed;\\r\\n        uint256 totalClaimed;\\r\\n        uint256 block;\\r\\n        bool active;\\r\\n    }\\r\\n    \\r\\n    struct History{\\r\\n        uint256 staked;\\r\\n        uint256 claimed;\\r\\n        uint256 startingBlock;\\r\\n        uint256 endingBlock;\\r\\n        uint256 time;\\r\\n    }\\r\\n    \\r\\n    mapping(address =\\u003e User) public users;\\r\\n    \\r\\n    mapping(address =\\u003e mapping(uint256 =\\u003e History)) public history;\\r\\n    \\r\\n    function stake(uint256 amount_stake) public returns(bool){\\r\\n        require(myfi.allowance(msg.sender,address(this))\\u003e=amount_stake,\\u0027Allowance Exceeded\\u0027);\\r\\n        User storage u = users[msg.sender];\\r\\n        require(u.currentStake == 0,\\u0027Already Staked\\u0027);\\r\\n        u.currentStake = amount_stake;\\r\\n        u.block = block.number;\\r\\n        u.active = true;\\r\\n        myfi.transferFrom(msg.sender,address(this),amount_stake);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function claim() public returns(bool){\\r\\n        User storage u = users[msg.sender];\\r\\n        require(u.active == true,\\u0027Invalid User\\u0027);\\r\\n        uint256 d = Math.sub(block.number,u.block);\\r\\n        uint256 f = Math.mul(d,rFactors[currentLevel]);\\r\\n        uint256 r1 = Math.mul(u.currentStake,f);\\r\\n        uint256 r = Math.div(r1,10**18);\\r\\n        uint256 s = Math.add(r,u.currentStake);\\r\\n        myfi.transfer(msg.sender,s);\\r\\n        History storage h = history[msg.sender][u.totalClaimed];\\r\\n        h.staked = u.currentStake;\\r\\n        h.claimed = s;\\r\\n        h.startingBlock = u.block;\\r\\n        h.endingBlock = block.number;\\r\\n        h.time = block.timestamp;\\r\\n        if(block.timestamp \\u003e nextLevel \\u0026\\u0026 currentLevel \\u003c 4){currentLevel=currentLevel+1;nextLevel = nextLevel + 180 days;}\\r\\n        u.rewardsClaimed = u.rewardsClaimed + r;\\r\\n        u.block = 0;\\r\\n        u.currentStake = 0;\\r\\n        u.totalClaimed = u.totalClaimed + 1;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function fetchUnclaimed() public view returns(uint256){\\r\\n        User storage u = users[msg.sender];\\r\\n        require(u.active == true,\\u0027Invalid User\\u0027);\\r\\n        require(u.currentStake \\u003e= 0,\\u0027No Stake\\u0027);\\r\\n        uint256 d = Math.sub(block.number,u.block);\\r\\n        uint256 f = Math.mul(d,rFactors[currentLevel]);\\r\\n        uint256 r1 = Math.mul(u.currentStake,f);\\r\\n        uint256 r = Math.div(r1,10**18);\\r\\n        return(r);\\r\\n    }\\r\\n    \\r\\n    function fetchRewardHistory(uint256 id) public view returns(uint256 staked, uint256 claimed, uint256 startingBlock, uint256 endingBlock, uint256 time){\\r\\n        History storage h = history[msg.sender][id];\\r\\n        return (h.staked,h.claimed,h.startingBlock,h.endingBlock,h.time);\\r\\n    }\\r\\n    \\r\\n    function updateReward() public returns(bool){\\r\\n        require(msg.sender == owner, \\u0027Caller not owner\\u0027);\\r\\n        currentLevel=currentLevel+1;\\r\\n        nextLevel = nextLevel + 180 days;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function fetchBlockNumber() public view returns(uint256){\\r\\n        return block.number;\\r\\n    }\\r\\n    \\r\\n    function drain() public returns(bool){\\r\\n        require(msg.sender == owner);\\r\\n        uint256 b = myfi.balanceOf(address(this));\\r\\n        myfi.transfer(owner,b);\\r\\n        return true;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"fetchRewardHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myfi\",\"outputs\":[{\"internalType\":\"contract MoonYFI\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rFactors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_stake\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001efb2286bf89f01488c6b2a22b2556c0f45e972b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ae68ea63d430e00beeae8bc53bb436e700033488947874de7ea5c05788c3c2a5"}]}