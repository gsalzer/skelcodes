{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"PoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StrongPoolInterface.sol\\\";\\n\\ncontract PoolV2 {\\n    event Mined(address indexed miner, uint256 amount);\\n    event Unmined(address indexed miner, uint256 amount);\\n    event Claimed(address indexed miner, uint256 reward);\\n\\n    using SafeMath for uint256;\\n\\n    bool public initDone;\\n    address public admin;\\n    address public pendingAdmin;\\n    address public superAdmin;\\n    address public pendingSuperAdmin;\\n    address public parameterAdmin;\\n    address payable public feeCollector;\\n\\n    IERC20 public token;\\n    IERC20 public strongToken;\\n    StrongPoolInterface public strongPool;\\n\\n    mapping(address =\\u003e uint256) public minerBalance;\\n    uint256 public totalBalance;\\n    mapping(address =\\u003e uint256) public minerBlockLastClaimedOn;\\n\\n    uint256 public rewardBalance;\\n\\n    uint256 public rewardPerBlockNumerator;\\n    uint256 public rewardPerBlockDenominator;\\n\\n    uint256 public miningFeeNumerator;\\n    uint256 public miningFeeDenominator;\\n\\n    uint256 public unminingFeeNumerator;\\n    uint256 public unminingFeeDenominator;\\n\\n    uint256 public claimingFeeNumerator;\\n    uint256 public claimingFeeDenominator;\\n\\n    uint256 public claimingFeeInWei;\\n\\n    function init(\\n        address strongTokenAddress,\\n        address tokenAddress,\\n        address strongPoolAddress,\\n        address adminAddress,\\n        address superAdminAddress,\\n        uint256 rewardPerBlockNumeratorValue,\\n        uint256 rewardPerBlockDenominatorValue,\\n        uint256 miningFeeNumeratorValue,\\n        uint256 miningFeeDenominatorValue,\\n        uint256 unminingFeeNumeratorValue,\\n        uint256 unminingFeeDenominatorValue,\\n        uint256 claimingFeeNumeratorValue,\\n        uint256 claimingFeeDenominatorValue\\n    ) public {\\n        require(!initDone, \\\"init done\\\");\\n        strongToken = IERC20(strongTokenAddress);\\n        token = IERC20(tokenAddress);\\n        strongPool = StrongPoolInterface(strongPoolAddress);\\n        admin = adminAddress;\\n        superAdmin = superAdminAddress;\\n        rewardPerBlockNumerator = rewardPerBlockNumeratorValue;\\n        rewardPerBlockDenominator = rewardPerBlockDenominatorValue;\\n        miningFeeNumerator = miningFeeNumeratorValue;\\n        miningFeeDenominator = miningFeeDenominatorValue;\\n        unminingFeeNumerator = unminingFeeNumeratorValue;\\n        unminingFeeDenominator = unminingFeeDenominatorValue;\\n        claimingFeeNumerator = claimingFeeNumeratorValue;\\n        claimingFeeDenominator = claimingFeeDenominatorValue;\\n        initDone = true;\\n    }\\n\\n    // ADMIN\\n    // *************************************************************************************\\n    function updateParameterAdmin(address newParameterAdmin) public {\\n        require(newParameterAdmin != address(0), \\\"zero\\\");\\n        require(msg.sender == superAdmin);\\n        parameterAdmin = newParameterAdmin;\\n    }\\n\\n    function setPendingAdmin(address newPendingAdmin) public {\\n        require(newPendingAdmin != address(0), \\\"zero\\\");\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        pendingAdmin = newPendingAdmin;\\n    }\\n\\n    function acceptAdmin() public {\\n        require(\\n            msg.sender == pendingAdmin \\u0026\\u0026 msg.sender != address(0),\\n            \\\"not pendingAdmin\\\"\\n        );\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n\\n    function setPendingSuperAdmin(address newPendingSuperAdmin) public {\\n        require(newPendingSuperAdmin != address(0), \\\"zero\\\");\\n        require(msg.sender == superAdmin, \\\"not superAdmin\\\");\\n        pendingSuperAdmin = newPendingSuperAdmin;\\n    }\\n\\n    function acceptSuperAdmin() public {\\n        require(\\n            msg.sender == pendingSuperAdmin \\u0026\\u0026 msg.sender != address(0),\\n            \\\"not pendingSuperAdmin\\\"\\n        );\\n        superAdmin = pendingSuperAdmin;\\n        pendingSuperAdmin = address(0);\\n    }\\n\\n    // REWARD\\n    // *************************************************************************************\\n    function updateRewardPerBlock(uint256 numerator, uint256 denominator)\\n        public\\n    {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin,\\n            \\\"not an admin\\\"\\n        );\\n        require(denominator != 0, \\\"invalid value\\\");\\n        rewardPerBlockNumerator = numerator;\\n        rewardPerBlockDenominator = denominator;\\n    }\\n\\n    function deposit(uint256 amount) public {\\n        require(msg.sender == superAdmin, \\\"not an admin\\\");\\n        require(amount \\u003e 0, \\\"zero\\\");\\n        strongToken.transferFrom(msg.sender, address(this), amount);\\n        rewardBalance = rewardBalance.add(amount);\\n    }\\n\\n    function withdraw(address destination, uint256 amount) public {\\n        require(msg.sender == superAdmin, \\\"not an admin\\\");\\n        require(amount \\u003e 0, \\\"zero\\\");\\n        require(rewardBalance \\u003e= amount, \\\"not enough\\\");\\n        strongToken.transfer(destination, amount);\\n        rewardBalance = rewardBalance.sub(amount);\\n    }\\n\\n    // FEES\\n    // *************************************************************************************\\n    function updateFeeCollector(address payable newFeeCollector) public {\\n        require(newFeeCollector != address(0), \\\"zero\\\");\\n        require(msg.sender == superAdmin);\\n        feeCollector = newFeeCollector;\\n    }\\n\\n    function updateMiningFee(uint256 numerator, uint256 denominator) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin,\\n            \\\"not an admin\\\"\\n        );\\n        require(denominator != 0, \\\"invalid value\\\");\\n        miningFeeNumerator = numerator;\\n        miningFeeDenominator = denominator;\\n    }\\n\\n    function updateUnminingFee(uint256 numerator, uint256 denominator) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin,\\n            \\\"not an admin\\\"\\n        );\\n        require(denominator != 0, \\\"invalid value\\\");\\n        unminingFeeNumerator = numerator;\\n        unminingFeeDenominator = denominator;\\n    }\\n\\n    function updateClaimingFee(uint256 feeInWei) public {\\n        require(\\n            msg.sender == admin ||\\n                msg.sender == parameterAdmin ||\\n                msg.sender == superAdmin,\\n            \\\"not an admin\\\"\\n        );\\n        claimingFeeInWei = feeInWei;\\n    }\\n\\n    // CORE\\n    // *************************************************************************************\\n    function mine(uint256 amount) public payable {\\n        require(amount \\u003e 0, \\\"zero\\\");\\n        uint256 fee = amount.mul(miningFeeNumerator).div(miningFeeDenominator);\\n        require(msg.value == fee, \\\"invalid fee\\\");\\n        feeCollector.transfer(msg.value);\\n        if (block.number \\u003e minerBlockLastClaimedOn[msg.sender]) {\\n            uint256 reward = getReward(msg.sender);\\n            if (reward \\u003e 0) {\\n                rewardBalance = rewardBalance.sub(reward);\\n                strongToken.approve(address(strongPool), reward);\\n                strongPool.mineFor(msg.sender, reward);\\n                minerBlockLastClaimedOn[msg.sender] = block.number;\\n            }\\n        }\\n        token.transferFrom(msg.sender, address(this), amount);\\n        minerBalance[msg.sender] = minerBalance[msg.sender].add(amount);\\n        totalBalance = totalBalance.add(amount);\\n        if (minerBlockLastClaimedOn[msg.sender] == 0) {\\n            minerBlockLastClaimedOn[msg.sender] = block.number;\\n        }\\n        emit Mined(msg.sender, amount);\\n    }\\n\\n    function unmine(uint256 amount) public payable {\\n        require(amount \\u003e 0, \\\"zero\\\");\\n        uint256 fee = amount.mul(unminingFeeNumerator).div(\\n            unminingFeeDenominator\\n        );\\n        require(msg.value == fee, \\\"invalid fee\\\");\\n        require(minerBalance[msg.sender] \\u003e= amount, \\\"not enough\\\");\\n        feeCollector.transfer(msg.value);\\n        if (block.number \\u003e minerBlockLastClaimedOn[msg.sender]) {\\n            uint256 reward = getReward(msg.sender);\\n            if (reward \\u003e 0) {\\n                rewardBalance = rewardBalance.sub(reward);\\n                strongToken.approve(address(strongPool), reward);\\n                strongPool.mineFor(msg.sender, reward);\\n                minerBlockLastClaimedOn[msg.sender] = block.number;\\n            }\\n        }\\n        minerBalance[msg.sender] = minerBalance[msg.sender].sub(amount);\\n        totalBalance = totalBalance.sub(amount);\\n        token.transfer(msg.sender, amount);\\n        if (minerBalance[msg.sender] == 0) {\\n            minerBlockLastClaimedOn[msg.sender] = 0;\\n        }\\n        emit Unmined(msg.sender, amount);\\n    }\\n\\n    function claim() public payable {\\n        require(minerBlockLastClaimedOn[msg.sender] != 0, \\\"error\\\");\\n        require(block.number \\u003e minerBlockLastClaimedOn[msg.sender], \\\"too soon\\\");\\n        uint256 reward = getReward(msg.sender);\\n        require(reward \\u003e 0, \\\"no reward\\\");\\n        require(msg.value == claimingFeeInWei, \\\"invalid fee\\\");\\n        feeCollector.transfer(msg.value);\\n        strongToken.approve(address(strongPool), reward);\\n        strongPool.mineFor(msg.sender, reward);\\n        rewardBalance = rewardBalance.sub(reward);\\n        minerBlockLastClaimedOn[msg.sender] = block.number;\\n        emit Claimed(msg.sender, reward);\\n    }\\n\\n    function getReward(address miner) public view returns (uint256) {\\n        if (totalBalance == 0) return 0;\\n        if (minerBlockLastClaimedOn[miner] == 0) return 0;\\n        uint256 blockResult = block.number.sub(minerBlockLastClaimedOn[miner]);\\n        uint256 rewardPerBlockResult = blockResult\\n            .mul(rewardPerBlockNumerator)\\n            .div(rewardPerBlockDenominator);\\n        return rewardPerBlockResult.mul(minerBalance[miner]).div(totalBalance);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"StrongPoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface StrongPoolInterface {\\n  function mineFor(address miner, uint256 amount) external;\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unmined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strongTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strongPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superAdminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlockNumeratorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlockDenominatorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningFeeNumeratorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningFeeDenominatorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unminingFeeNumeratorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unminingFeeDenominatorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimingFeeNumeratorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimingFeeDenominatorValue\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minerBlockLastClaimedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingSuperAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingSuperAdmin\",\"type\":\"address\"}],\"name\":\"setPendingSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongPool\",\"outputs\":[{\"internalType\":\"contract StrongPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unmine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unminingFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unminingFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"}],\"name\":\"updateClaimingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"updateMiningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newParameterAdmin\",\"type\":\"address\"}],\"name\":\"updateParameterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"updateUnminingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb0846bc25adc6e19cbdf2af1ce33c45bd57dc0d7ecf63804762d6fefb18adea"}]}