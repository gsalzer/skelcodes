{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: bsl-1.1\r\n\r\n/*\r\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.7.1;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @notice Interface of the autogenerated views of the `VaultParameters`.\r\n */\r\ninterface IVaultParametersViewer {\r\n\r\n    function stabilityFee(address asset) external view returns (uint);\r\n\r\n    function liquidationFee(address asset) external view returns (uint);\r\n\r\n    function tokenDebtLimit(address asset) external view returns (uint);\r\n\r\n    function isOracleTypeEnabled(uint _type, address asset) external view returns (bool);\r\n\r\n\r\n    function vault() external view returns (address payable);\r\n\r\n    function foundation() external view returns (address);\r\n\r\n\r\n    function canModifyVault(address who) external view returns (bool);\r\n\r\n    function isManager(address who) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @notice Interface of the autogenerated views of the `VaultManagerParameters`.\r\n */\r\ninterface IVaultManagerParametersViewer {\r\n\r\n    function vaultParameters() external view returns (address);\r\n\r\n\r\n    function minColPercent(address asset) external view returns (uint);\r\n\r\n    function maxColPercent(address asset) external view returns (uint);\r\n\r\n    function initialCollateralRatio(address asset) external view returns (uint);\r\n\r\n    function liquidationRatio(address asset) external view returns (uint);\r\n\r\n    function liquidationDiscount(address asset) external view returns (uint);\r\n\r\n    function devaluationPeriod(address asset) external view returns (uint);\r\n}\r\n\r\n\r\n/**\r\n * @notice Views collaterals in one request to save node requests and speed up dapps.\r\n *\r\n * @dev It makes no sense to clog a node with hundreds of RPC requests and slow a client app/dapp. Since usually\r\n *      a huge amount of gas is available to node static calls, we can aggregate asset data in a huge batch on the\r\n *      node's side and pull it to the client.\r\n */\r\ncontract AssetParametersViewer {\r\n    IVaultParametersViewer public immutable vaultParameters;\r\n\r\n    IVaultManagerParametersViewer public immutable vaultManagerParameters;\r\n\r\n    struct AssetParameters {\r\n        // asset address\r\n        address asset;\r\n\r\n        // Percentage with 3 decimals\r\n        uint stabilityFee;\r\n\r\n        // Percentage with 0 decimals\r\n        uint liquidationFee;\r\n\r\n        // Percentage with 0 decimals\r\n        uint initialCollateralRatio;\r\n\r\n        // Percentage with 0 decimals\r\n        uint liquidationRatio;\r\n\r\n        // Percentage with 3 decimals\r\n        uint liquidationDiscount;\r\n\r\n        // Devaluation period in blocks\r\n        uint devaluationPeriod;\r\n\r\n        // USDP mint limit\r\n        uint tokenDebtLimit;\r\n\r\n        // Oracle types enabled for this asset\r\n        uint[] oracles;\r\n\r\n        // Percentage with 0 decimals\r\n        uint minColPercent;\r\n\r\n        // Percentage with 0 decimals\r\n        uint maxColPercent;\r\n    }\r\n\r\n\r\n    constructor(address _vaultManagerParameters) {\r\n        IVaultManagerParametersViewer vmp = IVaultManagerParametersViewer(_vaultManagerParameters);\r\n        vaultManagerParameters = vmp;\r\n        vaultParameters = IVaultParametersViewer(vmp.vaultParameters());\r\n    }\r\n\r\n    /**\r\n     * @notice Get parameters of one asset\r\n     * @param asset asset address\r\n     * @param maxOracleTypesToSearch since complete list of oracle types is unknown, we'll check types up to this number\r\n     */\r\n    function getAssetParameters(address asset, uint maxOracleTypesToSearch)\r\n        public\r\n        view\r\n        returns (AssetParameters memory r)\r\n    {\r\n        r.asset = asset;\r\n        r.stabilityFee = vaultParameters.stabilityFee(asset);\r\n        r.liquidationFee = vaultParameters.liquidationFee(asset);\r\n\r\n        r.initialCollateralRatio = vaultManagerParameters.initialCollateralRatio(asset);\r\n        r.liquidationRatio = vaultManagerParameters.liquidationRatio(asset);\r\n        r.liquidationDiscount = vaultManagerParameters.liquidationDiscount(asset);\r\n        r.devaluationPeriod = vaultManagerParameters.devaluationPeriod(asset);\r\n\r\n        r.tokenDebtLimit = vaultParameters.tokenDebtLimit(asset);\r\n\r\n        r.minColPercent = vaultManagerParameters.minColPercent(asset);\r\n        r.maxColPercent = vaultManagerParameters.maxColPercent(asset);\r\n\r\n        // Memory arrays can't be reallocated so we'll overprovision\r\n        uint[] memory foundOracleTypes = new uint[](maxOracleTypesToSearch);\r\n        uint actualOraclesCount = 0;\r\n\r\n        for (uint _type = 0; _type < maxOracleTypesToSearch; ++_type) {\r\n            if (vaultParameters.isOracleTypeEnabled(_type, asset)) {\r\n                foundOracleTypes[actualOraclesCount++] = _type;\r\n            }\r\n        }\r\n\r\n        r.oracles = new uint[](actualOraclesCount);\r\n        for (uint i = 0; i < actualOraclesCount; ++i) {\r\n            r.oracles[i] = foundOracleTypes[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get parameters of many assets\r\n     * @param assets asset addresses\r\n     * @param maxOracleTypesToSearch since complete list of oracle types is unknown, we'll check types up to this number\r\n     */\r\n    function getMultiAssetParameters(address[] calldata assets, uint maxOracleTypesToSearch)\r\n        external\r\n        view\r\n        returns (AssetParameters[] memory r)\r\n    {\r\n        uint length = assets.length;\r\n        r = new AssetParameters[](length);\r\n        for (uint i = 0; i < length; ++i) {\r\n            r[i] = getAssetParameters(assets[i], maxOracleTypesToSearch);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManagerParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxOracleTypesToSearch\",\"type\":\"uint256\"}],\"name\":\"getAssetParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devaluationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDebtLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"oracles\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minColPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxColPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetParametersViewer.AssetParameters\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxOracleTypesToSearch\",\"type\":\"uint256\"}],\"name\":\"getMultiAssetParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devaluationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDebtLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"oracles\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minColPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxColPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetParametersViewer.AssetParameters[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParametersViewer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract IVaultParametersViewer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AssetParametersViewer","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000203153522b9eaef4ae17c6e99851ee7b2f7d312e","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb3e57d7850bf2bb8175165e5857c7e172db37609f28527ac2e1436e5fdfcd51"}]}