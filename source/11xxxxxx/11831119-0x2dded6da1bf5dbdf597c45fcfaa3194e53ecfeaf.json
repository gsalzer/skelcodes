{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n\"\"\"\r\n@title Curve IronBank Pool\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2021 - all rights reserved\r\n@notice Pool for swapping between cyTokens (cyDAI, cyUSDC, cyUSDT)\r\n\"\"\"\r\n\r\n# External Contracts\r\ninterface cyToken:\r\n    def transfer(_to: address, _value: uint256) -> bool: nonpayable\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: nonpayable\r\n    def mint(mintAmount: uint256) -> uint256: nonpayable\r\n    def redeem(redeemTokens: uint256) -> uint256: nonpayable\r\n    def exchangeRateStored() -> uint256: view\r\n    def exchangeRateCurrent() -> uint256: nonpayable\r\n    def supplyRatePerBlock() -> uint256: view\r\n    def accrualBlockNumber() -> uint256: view\r\n\r\ninterface CurveToken:\r\n    def mint(_to: address, _value: uint256) -> bool: nonpayable\r\n    def burnFrom(_to: address, _value: uint256) -> bool: nonpayable\r\n\r\ninterface ERC20:\r\n    def transfer(_to: address, _value: uint256): nonpayable\r\n    def transferFrom(_from: address, _to: address, _value: uint256): nonpayable\r\n    def totalSupply() -> uint256: view\r\n    def balanceOf(_addr: address) -> uint256: view\r\n\r\n# Events\r\nevent TokenExchange:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent TokenExchangeUnderlying:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent AddLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityOne:\r\n    provider: indexed(address)\r\n    token_amount: uint256\r\n    coin_amount: uint256\r\n\r\nevent RemoveLiquidityImbalance:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent CommitNewAdmin:\r\n    deadline: indexed(uint256)\r\n    admin: indexed(address)\r\n\r\nevent NewAdmin:\r\n    admin: indexed(address)\r\n\r\nevent CommitNewFee:\r\n    deadline: indexed(uint256)\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent NewFee:\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent RampA:\r\n    old_A: uint256\r\n    new_A: uint256\r\n    initial_time: uint256\r\n    future_time: uint256\r\n\r\nevent StopRampA:\r\n    A: uint256\r\n    t: uint256\r\n\r\n\r\n# These constants must be set prior to compiling\r\nN_COINS: constant(int128) = 3\r\nPRECISION_MUL: constant(uint256[N_COINS]) = [1, 1000000000000, 1000000000000]\r\n\r\n# fixed constants\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nPRECISION: constant(uint256) = 10 ** 18  # The precision to convert to\r\n\r\nMAX_ADMIN_FEE: constant(uint256) = 10 * 10 ** 9\r\nMAX_FEE: constant(uint256) = 5 * 10 ** 9\r\nMAX_A: constant(uint256) = 10 ** 6\r\nMAX_A_CHANGE: constant(uint256) = 10\r\n\r\nADMIN_ACTIONS_DELAY: constant(uint256) = 3 * 86400\r\nMIN_RAMP_TIME: constant(uint256) = 86400\r\n\r\ncoins: public(address[N_COINS])\r\nunderlying_coins: public(address[N_COINS])\r\nbalances: public(uint256[N_COINS])\r\n\r\nprevious_balances: public(uint256[N_COINS])\r\nblock_timestamp_last: public(uint256)\r\n\r\nfee: public(uint256)  # fee * 1e10\r\nadmin_fee: public(uint256)  # admin_fee * 1e10\r\n\r\nowner: public(address)\r\nlp_token: public(address)\r\n\r\nA_PRECISION: constant(uint256) = 100\r\ninitial_A: public(uint256)\r\nfuture_A: public(uint256)\r\ninitial_A_time: public(uint256)\r\nfuture_A_time: public(uint256)\r\n\r\nadmin_actions_deadline: public(uint256)\r\ntransfer_ownership_deadline: public(uint256)\r\nfuture_fee: public(uint256)\r\nfuture_admin_fee: public(uint256)\r\nfuture_owner: public(address)\r\n\r\nis_killed: bool\r\nkill_deadline: uint256\r\nKILL_DEADLINE_DT: constant(uint256) = 2 * 30 * 86400\r\n\r\n@external\r\ndef __init__(\r\n    _owner: address,\r\n    _coins: address[N_COINS],\r\n    _underlying_coins: address[N_COINS],\r\n    _pool_token: address,\r\n    _A: uint256,\r\n    _fee: uint256,\r\n    _admin_fee: uint256,\r\n):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _owner Contract owner address\r\n    @param _coins Addresses of ERC20 contracts of wrapped coins\r\n    @param _underlying_coins Addresses of ERC20 contracts of underlying coins\r\n    @param _pool_token Address of the token representing LP share\r\n    @param _A Amplification coefficient multiplied by n * (n - 1)\r\n    @param _fee Fee to charge for exchanges\r\n    @param _admin_fee Admin fee\r\n    \"\"\"\r\n    for i in range(N_COINS):\r\n        assert _coins[i] != ZERO_ADDRESS\r\n        assert _underlying_coins[i] != ZERO_ADDRESS\r\n\r\n        # approve underlying coins for infinite transfers\r\n        _response: Bytes[32] = raw_call(\r\n            _underlying_coins[i],\r\n            concat(\r\n                method_id(\"approve(address,uint256)\"),\r\n                convert(_coins[i], bytes32),\r\n                convert(MAX_UINT256, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(_response) > 0:\r\n            assert convert(_response, bool)\r\n\r\n    self.coins = _coins\r\n    self.underlying_coins = _underlying_coins\r\n    self.initial_A = _A * A_PRECISION\r\n    self.future_A = _A * A_PRECISION\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n    self.owner = _owner\r\n    self.kill_deadline = block.timestamp + KILL_DEADLINE_DT\r\n    self.lp_token = _pool_token\r\n\r\n\r\n@view\r\n@internal\r\ndef _A() -> uint256:\r\n    \"\"\"\r\n    Handle ramping A up or down\r\n    \"\"\"\r\n    t1: uint256 = self.future_A_time\r\n    A1: uint256 = self.future_A\r\n\r\n    if block.timestamp < t1:\r\n        A0: uint256 = self.initial_A\r\n        t0: uint256 = self.initial_A_time\r\n        # Expressions in uint256 cannot have negative numbers, thus \"if\"\r\n        if A1 > A0:\r\n            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\r\n        else:\r\n            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\r\n\r\n    else:  # when t1 == 0 or block.timestamp >= t1\r\n        return A1\r\n\r\n\r\n@view\r\n@external\r\ndef A() -> uint256:\r\n    return self._A() / A_PRECISION\r\n\r\n\r\n@view\r\n@external\r\ndef A_precise() -> uint256:\r\n    return self._A()\r\n\r\n\r\n@view\r\n@internal\r\ndef _stored_rates() -> uint256[N_COINS]:\r\n    # exchangeRateStored * (1 + supplyRatePerBlock * (getBlockNumber - accrualBlockNumber) / 1e18)\r\n    result: uint256[N_COINS] = PRECISION_MUL\r\n    for i in range(N_COINS):\r\n        coin: address = self.coins[i]\r\n        rate: uint256 = cyToken(coin).exchangeRateStored()\r\n        rate += rate * cyToken(coin).supplyRatePerBlock() * (block.number - cyToken(coin).accrualBlockNumber()) / PRECISION\r\n        result[i] *= rate\r\n    return result\r\n\r\n\r\n@internal\r\ndef _update():\r\n    \"\"\"\r\n    Commits pre-change balances for the previous block\r\n    Can be used to compare against current values for flash loan checks\r\n    \"\"\"\r\n    if block.timestamp > self.block_timestamp_last:\r\n        self.previous_balances = self.balances\r\n        self.block_timestamp_last = block.timestamp\r\n\r\n\r\n@internal\r\ndef _current_rates() -> uint256[N_COINS]:\r\n    self._update()\r\n    result: uint256[N_COINS] = PRECISION_MUL\r\n    for i in range(N_COINS):\r\n        result[i] *= cyToken(self.coins[i]).exchangeRateCurrent()\r\n    return result\r\n\r\n\r\n@view\r\n@internal\r\ndef _xp(rates: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        result[i] = rates[i] * self.balances[i] / PRECISION\r\n    return result\r\n\r\n@pure\r\n@internal\r\ndef get_D(xp: uint256[N_COINS], amp: uint256) -> uint256:\r\n    S: uint256 = 0\r\n    Dprev: uint256 = 0\r\n\r\n    for _x in xp:\r\n        S += _x\r\n    if S == 0:\r\n        return 0\r\n\r\n    D: uint256 = S\r\n    Ann: uint256 = amp * N_COINS\r\n    for _i in range(255):\r\n        D_P: uint256 = D\r\n        for _x in xp:\r\n            D_P = D_P * D / (_x * N_COINS)  # If division by 0, this will be borked: only withdrawal will work. And that is good\r\n        Dprev = D\r\n        D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                return D\r\n        else:\r\n            if Dprev - D <= 1:\r\n                return D\r\n    # convergence typically occurs in 4 rounds or less, this should be unreachable!\r\n    # if it does happen the pool is borked and LPs can withdraw via `remove_liquidity`\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef get_D_mem(rates: uint256[N_COINS], _balances: uint256[N_COINS], _amp: uint256) -> uint256:\r\n    xp: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        xp[i] = rates[i] * _balances[i] / PRECISION\r\n\r\n    return self.get_D(xp, _amp)\r\n\r\n\r\n@view\r\n@external\r\ndef get_virtual_price() -> uint256:\r\n    \"\"\"\r\n    @notice The current virtual price of the pool LP token\r\n    @dev Useful for calculating profits\r\n    @return LP token virtual price normalized to 1e18\r\n    \"\"\"\r\n    D: uint256 = self.get_D(self._xp(self._stored_rates()), self._A())\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    return D * PRECISION / ERC20(self.lp_token).totalSupply()\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(amounts: uint256[N_COINS], is_deposit: bool) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n    @dev This calculation accounts for slippage, but not fees.\r\n         Needed to prevent front-running, not for precise calculations!\r\n    @param amounts Amount of each coin being deposited\r\n    @param is_deposit set True for deposits, False for withdrawals\r\n    @return Expected amount of LP tokens received\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    _balances: uint256[N_COINS] = self.balances\r\n    D0: uint256 = self.get_D_mem(rates, _balances, amp)\r\n    for i in range(N_COINS):\r\n        _amount: uint256 = amounts[i]\r\n        if is_deposit:\r\n            _balances[i] += _amount\r\n        else:\r\n            _balances[i] -= _amount\r\n    D1: uint256 = self.get_D_mem(rates, _balances, amp)\r\n    token_amount: uint256 = ERC20(self.lp_token).totalSupply()\r\n    diff: uint256 = 0\r\n    if is_deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * token_amount / D0\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef add_liquidity(\r\n    _amounts: uint256[N_COINS],\r\n    _min_mint_amount: uint256,\r\n    _use_underlying: bool = False\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit coins into the pool\r\n    @param _amounts List of amounts of coins to deposit\r\n    @param _min_mint_amount Minimum amount of LP tokens to mint from the deposit\r\n    @param _use_underlying If True, deposit underlying assets instead of cyTokens\r\n    @return Amount of LP tokens received by depositing\r\n    \"\"\"\r\n    assert not self.is_killed\r\n\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = self._current_rates()\r\n    _lp_token: address = self.lp_token\r\n    token_supply: uint256 = ERC20(_lp_token).totalSupply()\r\n\r\n    # Initial invariant\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\r\n\r\n    # Take coins from the sender\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n\r\n        if amount == 0:\r\n            assert token_supply > 0\r\n        else:\r\n            coin: address = self.coins[i]\r\n            if _use_underlying:\r\n                ERC20(self.underlying_coins[i]).transferFrom(msg.sender, self, amount)\r\n                before: uint256 = ERC20(coin).balanceOf(self)\r\n                assert cyToken(coin).mint(amount) == 0\r\n                amount = ERC20(coin).balanceOf(self) - before\r\n            else:\r\n                assert cyToken(coin).transferFrom(msg.sender, self, amount)\r\n            amounts[i] = amount\r\n            new_balances[i] += amount\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user's share\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    mint_amount: uint256 = 0\r\n    if token_supply != 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n        _admin_fee: uint256 = self.admin_fee\r\n        difference: uint256 = 0\r\n        for i in range(N_COINS):\r\n            new_balance: uint256 = new_balances[i]\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            if ideal_balance > new_balance:\r\n                difference = ideal_balance - new_balance\r\n            else:\r\n                difference = new_balance - ideal_balance\r\n            fees[i] = _fee * difference / FEE_DENOMINATOR\r\n            self.balances[i] = new_balance - (fees[i] * _admin_fee / FEE_DENOMINATOR)\r\n            new_balances[i] -= fees[i]\r\n        D2: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n        mint_amount = token_supply * (D2 - D0) / D0\r\n    else:\r\n        self.balances = new_balances\r\n        mint_amount = D1  # Take the dust if there was any\r\n\r\n    assert mint_amount >= _min_mint_amount, \"Slippage screwed you\"\r\n\r\n    # Mint pool tokens\r\n    CurveToken(_lp_token).mint(msg.sender, mint_amount)\r\n\r\n    log AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount)\r\n\r\n    return mint_amount\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(i: int128, j: int128, x: uint256, xp_: uint256[N_COINS]) -> uint256:\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS\r\n\r\n    A_: uint256 = self._A()\r\n    D: uint256 = self.get_D(xp_, A_)\r\n    Ann: uint256 = A_ * N_COINS\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n\r\n    for _i in range(N_COINS):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp_[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann  # - D\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    # dx and dy in c-units\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n\r\n    x: uint256 = xp[i] + dx * rates[i] / PRECISION\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = xp[j] - y - 1\r\n    return (dy - (self.fee * dy / FEE_DENOMINATOR)) * PRECISION / rates[j]\r\n\r\n\r\n@view\r\n@external\r\ndef get_dx(i: int128, j: int128, dy: uint256) -> uint256:\r\n    # dx and dy in c-units\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n\r\n    y: uint256 = xp[j] - (dy * FEE_DENOMINATOR / (FEE_DENOMINATOR - self.fee)) * rates[j] / PRECISION\r\n    x: uint256 = self.get_y(j, i, y, xp)\r\n    return (x - xp[i]) * PRECISION / rates[i]\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy_underlying(i: int128, j: int128, dx: uint256) -> uint256:\r\n    # dx and dy in underlying units\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n\r\n    x: uint256 = xp[i] + dx * precisions[i]\r\n    dy: uint256 = xp[j] - self.get_y(i, j, x, xp) - 1\r\n    _fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return (dy - _fee) / precisions[j]\r\n\r\n\r\n@external\r\n@view\r\ndef get_dx_underlying(i: int128, j: int128, dy: uint256) -> uint256:\r\n    # dx and dy in underlying units\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n\r\n    y: uint256 = xp[j] - (dy * FEE_DENOMINATOR / (FEE_DENOMINATOR - self.fee)) * precisions[j]\r\n    return (self.get_y(j, i, y, xp) - xp[i]) / precisions[i]\r\n\r\n@internal\r\ndef _exchange(i: int128, j: int128, dx: uint256) -> uint256:\r\n    assert not self.is_killed\r\n    # dx and dy are in cy tokens\r\n\r\n    rates: uint256[N_COINS] = self._current_rates()\r\n    old_balances: uint256[N_COINS] = self.balances\r\n\r\n    xp: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for k in range(N_COINS):\r\n        xp[k] = rates[k] * old_balances[k] / PRECISION\r\n\r\n    x: uint256 = xp[i] + dx * rates[i] / PRECISION\r\n    dy: uint256 = xp[j] - self.get_y(i, j, x, xp) - 1  # -1 just in case there were some rounding errors\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n    dy = (dy - dy_fee) * PRECISION / rates[j]\r\n    dy_admin_fee: uint256 = dy_fee * self.admin_fee / FEE_DENOMINATOR\r\n    dy_admin_fee = dy_admin_fee * PRECISION / rates[j]\r\n\r\n    self.balances[i] = old_balances[i] + dx\r\n    self.balances[j] = old_balances[j] - dy - dy_admin_fee\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Perform an exchange between two coins\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @param min_dy Minimum amount of `j` to receive\r\n    @return Actual amount of `j` received\r\n    \"\"\"\r\n    dy: uint256 = self._exchange(i, j, dx)\r\n    assert dy >= min_dy, \"Too few coins in result\"\r\n\r\n    assert cyToken(self.coins[i]).transferFrom(msg.sender, self, dx)\r\n    assert cyToken(self.coins[j]).transfer(msg.sender, dy)\r\n\r\n    log TokenExchange(msg.sender, i, dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange_underlying(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Perform an exchange between two underlying coins\r\n    @dev Index values can be found via the `underlying_coins` public getter method\r\n    @param i Index value for the underlying coin to send\r\n    @param j Index valie of the underlying coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @param min_dy Minimum amount of `j` to receive\r\n    @return Actual amount of `j` received\r\n    \"\"\"\r\n\r\n    ERC20(self.underlying_coins[i]).transferFrom(msg.sender, self, dx)\r\n\r\n    coin: address = self.coins[i]\r\n\r\n    dx_: uint256 = ERC20(coin).balanceOf(self)\r\n    assert cyToken(coin).mint(dx) == 0\r\n    dx_ = ERC20(coin).balanceOf(self) - dx_\r\n    dy_: uint256 = self._exchange(i, j, dx_)\r\n\r\n    assert cyToken(self.coins[j]).redeem(dy_) == 0\r\n\r\n    underlying: address = self.underlying_coins[j]\r\n\r\n    dy: uint256 = ERC20(underlying).balanceOf(self)\r\n    assert dy >= min_dy, \"Too few coins in result\"\r\n\r\n    ERC20(underlying).transfer(msg.sender, dy)\r\n\r\n    log TokenExchangeUnderlying(msg.sender, i, dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity(\r\n    _amount: uint256,\r\n    _min_amounts: uint256[N_COINS],\r\n    _use_underlying: bool = False\r\n) -> uint256[N_COINS]:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool\r\n    @dev Withdrawal amounts are based on current deposit ratios\r\n    @param _amount Quantity of LP tokens to burn in the withdrawal\r\n    @param _min_amounts Minimum amounts of underlying coins to receive\r\n    @param _use_underlying If True, withdraw underlying assets instead of cyTokens\r\n    @return List of amounts of coins that were withdrawn\r\n    \"\"\"\r\n    self._update()\r\n    _lp_token: address = self.lp_token\r\n    total_supply: uint256 = ERC20(_lp_token).totalSupply()\r\n    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\r\n\r\n    for i in range(N_COINS):\r\n        _balance: uint256 = self.balances[i]\r\n        value: uint256 = _balance * _amount / total_supply\r\n        self.balances[i] = _balance - value\r\n        amounts[i] = value\r\n\r\n        coin: address = self.coins[i]\r\n        if _use_underlying:\r\n            assert cyToken(coin).redeem(value) == 0\r\n            underlying: address = self.underlying_coins[i]\r\n            value = ERC20(underlying).balanceOf(self)\r\n            ERC20(underlying).transfer(msg.sender, value)\r\n        else:\r\n            assert cyToken(coin).transfer(msg.sender, value)\r\n\r\n        assert value >= _min_amounts[i]\r\n\r\n    CurveToken(_lp_token).burnFrom(msg.sender, _amount)  # Will raise if not enough\r\n\r\n    log RemoveLiquidity(msg.sender, amounts, empty(uint256[N_COINS]), total_supply - _amount)\r\n\r\n    return amounts\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_imbalance(\r\n    _amounts: uint256[N_COINS],\r\n    _max_burn_amount: uint256,\r\n    _use_underlying: bool = False\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool in an imbalanced amount\r\n    @param _amounts List of amounts of underlying coins to withdraw\r\n    @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\r\n    @param _use_underlying If True, withdraw underlying assets instead of cyTokens\r\n    @return Actual amount of the LP token burned in the withdrawal\r\n    \"\"\"\r\n    assert not self.is_killed\r\n\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = self._current_rates()\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\r\n\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    amounts: uint256[N_COINS] = _amounts\r\n\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n    for i in range(N_COINS):\r\n        amount: uint256 = amounts[i]\r\n        if amount > 0:\r\n            if _use_underlying:\r\n                amount = amount * precisions[i] * PRECISION / rates[i]\r\n                amounts[i] = amount\r\n            new_balances[i] -= amount\r\n\r\n    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    _admin_fee: uint256 = self.admin_fee\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        new_balance: uint256 = new_balances[i]\r\n        difference: uint256 = 0\r\n        if ideal_balance > new_balance:\r\n            difference = ideal_balance - new_balance\r\n        else:\r\n            difference = new_balance - ideal_balance\r\n        coin_fee: uint256 = _fee * difference / FEE_DENOMINATOR\r\n        self.balances[i] = new_balance - (coin_fee * _admin_fee / FEE_DENOMINATOR)\r\n        new_balances[i] -= coin_fee\r\n        fees[i] = coin_fee\r\n    D2: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n\r\n    lp_token: address = self.lp_token\r\n    token_supply: uint256 = ERC20(lp_token).totalSupply()\r\n    token_amount: uint256 = (D0 - D2) * token_supply / D0\r\n    assert token_amount != 0\r\n    assert token_amount <= _max_burn_amount, \"Slippage screwed you\"\r\n\r\n    CurveToken(lp_token).burnFrom(msg.sender, token_amount)  # dev: insufficient funds\r\n    for i in range(N_COINS):\r\n        amount: uint256 = amounts[i]\r\n        if amount != 0:\r\n            coin: address = self.coins[i]\r\n            if _use_underlying:\r\n                assert cyToken(coin).redeem(amount) == 0\r\n                underlying: address = self.underlying_coins[i]\r\n                ERC20(underlying).transfer(msg.sender, ERC20(underlying).balanceOf(self))\r\n            else:\r\n                assert cyToken(coin).transfer(msg.sender, amount)\r\n\r\n    log RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, token_supply - token_amount)\r\n\r\n    return token_amount\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_y_D(A_: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    \"\"\"\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i >= 0  # dev: i below zero\r\n    assert i < N_COINS  # dev: i above N_COINS\r\n\r\n    Ann: uint256 = A_ * N_COINS\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n\r\n    for _i in range(N_COINS):\r\n        if _i != i:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef _calc_withdraw_one_coin(_token_amount: uint256, i: int128, _use_underlying: bool, _rates: uint256[N_COINS]) -> uint256[2]:\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n    amp: uint256 = self._A()\r\n    xp: uint256[N_COINS] = self._xp(_rates)\r\n    D0: uint256 = self.get_D(xp, amp)\r\n\r\n    total_supply: uint256 = ERC20(self.lp_token).totalSupply()\r\n\r\n    D1: uint256 = D0 - _token_amount * D0 / total_supply\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\r\n\r\n    xp_reduced: uint256[N_COINS] = xp\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    rate: uint256 = _rates[i]\r\n\r\n    for j in range(N_COINS):\r\n        dx_expected: uint256 = 0\r\n        xp_j: uint256 = xp[j]\r\n        if j == i:\r\n            dx_expected = xp_j * D1 / D0 - new_y\r\n        else:\r\n            dx_expected = xp_j - xp_j * D1 / D0\r\n        xp_reduced[j] -= _fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\r\n    dy = (dy - 1) * PRECISION / rate  # Withdraw less to account for rounding errors\r\n    dy_fee: uint256 = ((xp[i] - new_y) * PRECISION / rate) - dy\r\n    if _use_underlying:\r\n        # this branch is only reachable when called via `calc_withdraw_one_coin`, which\r\n        # only needs `dy` - so we don't bother converting `dy_fee` to the underlying\r\n        precisions: uint256[N_COINS] = PRECISION_MUL\r\n        dy = dy * rate / precisions[i] / PRECISION\r\n\r\n    return [dy, dy_fee]\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_token_amount: uint256, i: int128, _use_underlying: bool = False) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the amount received when withdrawing a single coin\r\n    @param _token_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    return self._calc_withdraw_one_coin(_token_amount, i, _use_underlying, self._stored_rates())[0]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_one_coin(\r\n    _token_amount: uint256,\r\n    i: int128,\r\n    _min_amount: uint256,\r\n    _use_underlying: bool = False\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw a single coin from the pool\r\n    @param _token_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @param _min_amount Minimum amount of coin to receive\r\n    @param _use_underlying If True, withdraw underlying assets instead of cyTokens\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    dy: uint256[2] = self._calc_withdraw_one_coin(_token_amount, i, False, self._current_rates())\r\n    amount: uint256 = dy[0]\r\n\r\n    self.balances[i] -= (dy[0] + dy[1] * self.admin_fee / FEE_DENOMINATOR)\r\n    CurveToken(self.lp_token).burnFrom(msg.sender, _token_amount)  # dev: insufficient funds\r\n    coin: address = self.coins[i]\r\n    if _use_underlying:\r\n        assert cyToken(coin).redeem(dy[0]) == 0\r\n        underlying: address = self.underlying_coins[i]\r\n        amount = ERC20(underlying).balanceOf(self)\r\n        ERC20(underlying).transfer(msg.sender, amount)\r\n    else:\r\n        assert cyToken(coin).transfer(msg.sender, amount)\r\n\r\n    assert amount >= _min_amount, \"Not enough coins removed\"\r\n    log RemoveLiquidityOne(msg.sender, _token_amount, dy[0])\r\n\r\n    return dy[0]\r\n\r\n\r\n### Admin functions ###\r\n@external\r\ndef ramp_A(_future_A: uint256, _future_time: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\r\n    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\r\n\r\n    _initial_A: uint256 = self._A()\r\n    _future_A_p: uint256 = _future_A * A_PRECISION\r\n\r\n    assert _future_A > 0 and _future_A < MAX_A\r\n    if _future_A_p < _initial_A:\r\n        assert _future_A_p * MAX_A_CHANGE >= _initial_A\r\n    else:\r\n        assert _future_A_p <= _initial_A * MAX_A_CHANGE\r\n\r\n    self.initial_A = _initial_A\r\n    self.future_A = _future_A_p\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = _future_time\r\n\r\n    log RampA(_initial_A, _future_A_p, block.timestamp, _future_time)\r\n\r\n\r\n@external\r\ndef stop_ramp_A():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    current_A: uint256 = self._A()\r\n    self.initial_A = current_A\r\n    self.future_A = current_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = block.timestamp\r\n    # now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n    log StopRampA(current_A, block.timestamp)\r\n\r\n\r\n@external\r\ndef commit_new_fee(new_fee: uint256, new_admin_fee: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.admin_actions_deadline == 0  # dev: active action\r\n    assert new_fee <= MAX_FEE  # dev: fee exceeds maximum\r\n    assert new_admin_fee <= MAX_ADMIN_FEE  # dev: admin fee exceeds maximum\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.admin_actions_deadline = _deadline\r\n    self.future_fee = new_fee\r\n    self.future_admin_fee = new_admin_fee\r\n\r\n    log CommitNewFee(_deadline, new_fee, new_admin_fee)\r\n\r\n\r\n@external\r\ndef apply_new_fee():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.admin_actions_deadline  # dev: insufficient time\r\n    assert self.admin_actions_deadline != 0  # dev: no active action\r\n\r\n    self.admin_actions_deadline = 0\r\n    _fee: uint256 = self.future_fee\r\n    _admin_fee: uint256 = self.future_admin_fee\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n\r\n    log NewFee(_fee, _admin_fee)\r\n\r\n\r\n@external\r\ndef revert_new_parameters():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.admin_actions_deadline = 0\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_owner: address):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.transfer_ownership_deadline == 0  # dev: active transfer\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.transfer_ownership_deadline = _deadline\r\n    self.future_owner = _owner\r\n\r\n    log CommitNewAdmin(_deadline, _owner)\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.transfer_ownership_deadline  # dev: insufficient time\r\n    assert self.transfer_ownership_deadline != 0  # dev: no active transfer\r\n\r\n    self.transfer_ownership_deadline = 0\r\n    _owner: address = self.future_owner\r\n    self.owner = _owner\r\n\r\n    log NewAdmin(_owner)\r\n\r\n\r\n@external\r\ndef revert_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.transfer_ownership_deadline = 0\r\n\r\n\r\n@view\r\n@external\r\ndef admin_balances(i: uint256) -> uint256:\r\n    return ERC20(self.coins[i]).balanceOf(self) - self.balances[i]\r\n\r\n\r\n@external\r\ndef withdraw_admin_fees():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    for i in range(N_COINS):\r\n        coin: address = self.coins[i]\r\n        value: uint256 = ERC20(coin).balanceOf(self) - self.balances[i]\r\n        if value > 0:\r\n            assert cyToken(coin).transfer(msg.sender, value)\r\n\r\n\r\n@external\r\ndef kill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.kill_deadline > block.timestamp  # dev: deadline has passed\r\n    self.is_killed = True\r\n\r\n\r\n@external\r\ndef unkill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.is_killed = False","ABI":"[{\"name\":\"TokenExchange\",\"inputs\":[{\"type\":\"address\",\"name\":\"buyer\",\"indexed\":true},{\"type\":\"int128\",\"name\":\"sold_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"tokens_sold\",\"indexed\":false},{\"type\":\"int128\",\"name\":\"bought_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"tokens_bought\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokenExchangeUnderlying\",\"inputs\":[{\"type\":\"address\",\"name\":\"buyer\",\"indexed\":true},{\"type\":\"int128\",\"name\":\"sold_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"tokens_sold\",\"indexed\":false},{\"type\":\"int128\",\"name\":\"bought_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"tokens_bought\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddLiquidity\",\"inputs\":[{\"type\":\"address\",\"name\":\"provider\",\"indexed\":true},{\"type\":\"uint256[3]\",\"name\":\"token_amounts\",\"indexed\":false},{\"type\":\"uint256[3]\",\"name\":\"fees\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"invariant\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"token_supply\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidity\",\"inputs\":[{\"type\":\"address\",\"name\":\"provider\",\"indexed\":true},{\"type\":\"uint256[3]\",\"name\":\"token_amounts\",\"indexed\":false},{\"type\":\"uint256[3]\",\"name\":\"fees\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"token_supply\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityOne\",\"inputs\":[{\"type\":\"address\",\"name\":\"provider\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"token_amount\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"coin_amount\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityImbalance\",\"inputs\":[{\"type\":\"address\",\"name\":\"provider\",\"indexed\":true},{\"type\":\"uint256[3]\",\"name\":\"token_amounts\",\"indexed\":false},{\"type\":\"uint256[3]\",\"name\":\"fees\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"invariant\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"token_supply\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewAdmin\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"deadline\",\"indexed\":true},{\"type\":\"address\",\"name\":\"admin\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewAdmin\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewFee\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"deadline\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"fee\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"admin_fee\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewFee\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"fee\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"admin_fee\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RampA\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"old_A\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"new_A\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"initial_time\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"future_time\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StopRampA\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"A\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"t\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address[3]\",\"name\":\"_coins\"},{\"type\":\"address[3]\",\"name\":\"_underlying_coins\"},{\"type\":\"address\",\"name\":\"_pool_token\"},{\"type\":\"uint256\",\"name\":\"_A\"},{\"type\":\"uint256\",\"name\":\"_fee\"},{\"type\":\"uint256\",\"name\":\"_admin_fee\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"A\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":5199},{\"name\":\"A_precise\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":5161},{\"name\":\"get_virtual_price\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1198966},{\"name\":\"calc_token_amount\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256[3]\",\"name\":\"amounts\"},{\"type\":\"bool\",\"name\":\"is_deposit\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":4731095},{\"name\":\"add_liquidity\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256[3]\",\"name\":\"_amounts\"},{\"type\":\"uint256\",\"name\":\"_min_mint_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"add_liquidity\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256[3]\",\"name\":\"_amounts\"},{\"type\":\"uint256\",\"name\":\"_min_mint_amount\"},{\"type\":\"bool\",\"name\":\"_use_underlying\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"get_dy\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dx\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2814151},{\"name\":\"get_dx\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dy\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2814012},{\"name\":\"get_dy_underlying\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dx\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2813991},{\"name\":\"get_dx_underlying\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dy\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2813825},{\"name\":\"exchange\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dx\"},{\"type\":\"uint256\",\"name\":\"min_dy\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":6347170},{\"name\":\"exchange_underlying\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dx\"},{\"type\":\"uint256\",\"name\":\"min_dy\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":6354444},{\"name\":\"remove_liquidity\",\"outputs\":[{\"type\":\"uint256[3]\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"uint256[3]\",\"name\":\"_min_amounts\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"remove_liquidity\",\"outputs\":[{\"type\":\"uint256[3]\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"uint256[3]\",\"name\":\"_min_amounts\"},{\"type\":\"bool\",\"name\":\"_use_underlying\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"remove_liquidity_imbalance\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256[3]\",\"name\":\"_amounts\"},{\"type\":\"uint256\",\"name\":\"_max_burn_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"remove_liquidity_imbalance\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256[3]\",\"name\":\"_amounts\"},{\"type\":\"uint256\",\"name\":\"_max_burn_amount\"},{\"type\":\"bool\",\"name\":\"_use_underlying\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"calc_withdraw_one_coin\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_token_amount\"},{\"type\":\"int128\",\"name\":\"i\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"name\":\"calc_withdraw_one_coin\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_token_amount\"},{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"bool\",\"name\":\"_use_underlying\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"name\":\"remove_liquidity_one_coin\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_token_amount\"},{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"uint256\",\"name\":\"_min_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"remove_liquidity_one_coin\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_token_amount\"},{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"uint256\",\"name\":\"_min_amount\"},{\"type\":\"bool\",\"name\":\"_use_underlying\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"ramp_A\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_future_A\"},{\"type\":\"uint256\",\"name\":\"_future_time\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":151984},{\"name\":\"stop_ramp_A\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":148745},{\"name\":\"commit_new_fee\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"new_fee\"},{\"type\":\"uint256\",\"name\":\"new_admin_fee\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":110581},{\"name\":\"apply_new_fee\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":97362},{\"name\":\"revert_new_parameters\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":22015},{\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":74753},{\"name\":\"apply_transfer_ownership\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":60830},{\"name\":\"revert_transfer_ownership\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":22105},{\"name\":\"admin_balances\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"i\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":3601},{\"name\":\"withdraw_admin_fees\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":12875},{\"name\":\"kill_me\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38088},{\"name\":\"unkill_me\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":22225},{\"name\":\"coins\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2310},{\"name\":\"underlying_coins\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2340},{\"name\":\"balances\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2370},{\"name\":\"previous_balances\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2400},{\"name\":\"block_timestamp_last\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2321},{\"name\":\"fee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2351},{\"name\":\"admin_fee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2381},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2411},{\"name\":\"lp_token\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2441},{\"name\":\"initial_A\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2471},{\"name\":\"future_A\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2501},{\"name\":\"initial_A_time\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2531},{\"name\":\"future_A_time\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2561},{\"name\":\"admin_actions_deadline\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2591},{\"name\":\"transfer_ownership_deadline\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2621},{\"name\":\"future_fee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2651},{\"name\":\"future_admin_fee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2681},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2711}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a0000000000000000000000008e595470ed749b85c6f7669de83eae304c2ec68f00000000000000000000000076eb2fe28b36b3ee97f3adae0c69606eedb2a37c00000000000000000000000048759f220ed983db51fa7a8c0d2aab8f3ce4166a0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000005282a4ef67d9c33135340fb3289cc1711c13638c000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000003d0900000000000000000000000000000000000000000000000000000000012a05f200","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}