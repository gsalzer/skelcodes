{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/oracle/ICADConversionOracle.sol\r\n\r\n\r\n/**\r\n * @title ICADRateOracle\r\n * @notice provides interface for converting USD stable coins to CAD\r\n*/\r\ninterface ICADConversionOracle {\r\n\r\n    /**\r\n     * @notice convert USD amount to CAD amount\r\n     * @param amount     amount of USD in 18 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdToCad(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert Dai amount to CAD amount\r\n     * @param amount     amount of dai in 18 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function daiToCad(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert USDC amount to CAD amount\r\n     * @param amount     amount of USDC in 6 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdcToCad(uint256 amount) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice convert USDT amount to CAD amount\r\n     * @param amount     amount of USDT in 6 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdtToCad(uint256 amount) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice convert CAD amount to USD amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USD in 18 decimal places\r\n     */\r\n    function cadToUsd(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to Dai amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of Dai in 18 decimal places\r\n     */\r\n    function cadToDai(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to USDC amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USDC in 6 decimal places\r\n     */\r\n    function cadToUsdc(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to USDT amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USDT in 6 decimal places\r\n     */\r\n    function cadToUsdt(uint256 amount) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/acquisition/IAsyncRedemption.sol\r\n\r\n\r\n/**\r\n * @title IAsyncRedemption\r\n * @notice provides interface for token redemptions\r\n*/\r\ninterface IAsyncRedemption {\r\n\r\n    /**\r\n    * @notice redeem tokens instantly\r\n    * @param tokenAmount     amount of token to redeem\r\n    * @return true if success\r\n    */\r\n    function instantRedemption(uint256 tokenAmount) external returns (bool);\r\n\r\n    /**\r\n    * @notice redeem tokens asynchronously\r\n    * @param tokenAmount     amount of token to redeem\r\n    * @return true if success\r\n    */\r\n    function asyncRedemption(uint256 tokenAmount) external returns (bool);\r\n\r\n    /**\r\n    * @notice see how much funds is currently available for redemption\r\n    * @return funds amount in 18 decimals\r\n    */\r\n    function fundsAvailable() external view returns (uint256);\r\n\r\n    /**\r\n    * @notice view the max number of tokens that can be instantly redeemed\r\n    * @return amount of tokens instantly redeemable\r\n    */\r\n    function maxTokenForInstantRedemption() external view returns (uint256);\r\n\r\n    /**\r\n    * @notice see the total token balance awaiting redemptions for a given account\r\n    * @param account     account that has tokens pending\r\n    * @return token amount in 18 decimals\r\n    */\r\n    function tokensPending(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/acquisition/ManagedAsyncDaiRedemptionPool.sol\r\n\r\n\r\n\r\n/**\r\n * @title ManagedAsyncDaiRedemptionPool\r\n * @notice Token to Dai pool to facilitate immediate and asynchronous redemptions\r\n*/\r\ncontract ManagedAsyncDaiRedemptionPool is IAsyncRedemption {\r\n    using SafeMath for uint256;\r\n\r\n    event Redeemed(address indexed holder, uint256 tokenAmount, uint256 daiAmount);\r\n    event RedemptionPending(address indexed holder, uint256 tokenAmount);\r\n\r\n    event Capitalized(uint256 usdAmount);\r\n\r\n    // source where the Dai comes from\r\n    address public _poolSource;\r\n\r\n    // address of the wToken\r\n    IERC20 public _wToken;\r\n\r\n    // address of the USD to CAD oracle\r\n    ICADConversionOracle public _cadOracle;\r\n\r\n    // wTokens, if fix-priced in CAD, will not require more than 2 decimals\r\n    uint256 public _fixedPriceCADCent;\r\n\r\n    // Dai contract\r\n    IERC20 public _daiContract;\r\n\r\n\r\n    /**\r\n    * @dev records each asynchronous redemption request\r\n    **/\r\n    struct AsyncRedemptionRequest {\r\n        // account that submitted the request\r\n        address account;\r\n\r\n        // amount of tokens to redeem\r\n        uint256 tokenAmount;\r\n    }\r\n\r\n    // array of redemption requests to keep track of\r\n    AsyncRedemptionRequest[] internal _asyncRequests;\r\n\r\n    // index of the first un-fulfilled async redemption request\r\n    uint256 public _asyncIndex = 0;\r\n\r\n\r\n    constructor(\r\n        address poolSource,\r\n        address tokenAddress,\r\n        address cadOracleAddress,\r\n        uint256 fixedPriceCADCent,\r\n\r\n        address daiContractddress\r\n    ) public {\r\n        _poolSource = poolSource;\r\n\r\n        _wToken = IERC20(tokenAddress);\r\n        _cadOracle = ICADConversionOracle(cadOracleAddress);\r\n        _fixedPriceCADCent = fixedPriceCADCent;\r\n\r\n        _daiContract = IERC20(daiContractddress);\r\n    }\r\n\r\n     /**\r\n    * @notice redeem tokens instantly\r\n    * @param tokenAmount     amount of token to redeem\r\n    * @return true if success\r\n    */\r\n    function instantRedemption(uint256 tokenAmount) external virtual override returns (bool) {\r\n        require(tokenAmount > 0, \"Token amount must be greater than 0\");\r\n\r\n        uint256 requestDaiAmount = _cadOracle\r\n            .cadToDai(tokenAmount.mul(_fixedPriceCADCent))\r\n            .div(100);\r\n\r\n        require(requestDaiAmount <= fundsAvailable(), \"Insufficient Dai for instant redemption\");\r\n\r\n\r\n        _wToken.transferFrom(msg.sender, _poolSource, tokenAmount);\r\n        _daiContract.transfer(msg.sender, requestDaiAmount);\r\n\r\n        emit Redeemed(msg.sender, tokenAmount, requestDaiAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice redeem tokens asynchronously\r\n    * @param tokenAmount     amount of token to redeem\r\n    * @return true if success\r\n    */\r\n    function asyncRedemption(uint256 tokenAmount) external virtual override returns (bool) {\r\n        require(tokenAmount >= 5e19, \"Token amount must be greater than or equal to 50\");\r\n\r\n        AsyncRedemptionRequest memory newRequest = AsyncRedemptionRequest(msg.sender, tokenAmount);\r\n        _asyncRequests.push(newRequest);\r\n\r\n        _wToken.transferFrom(msg.sender, address(this), tokenAmount);\r\n\r\n        emit RedemptionPending(msg.sender, tokenAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice deposit Dai to faciliate redemptions\r\n    * @param maxDaiAmount    max amount of Dai to pay for redemptions\r\n    * @return true if success\r\n    */\r\n    function capitalize(uint256 maxDaiAmount) external returns (bool) {\r\n        uint256 daiAmountRemaining = maxDaiAmount;\r\n        uint256 newIndex = _asyncIndex;\r\n        uint256 requestLength = _asyncRequests.length;\r\n\r\n        for (; newIndex < requestLength; newIndex = newIndex.add(1)) {\r\n            AsyncRedemptionRequest storage request = _asyncRequests[newIndex];\r\n\r\n            uint256 requestDaiAmount = _cadOracle\r\n                .cadToDai(request.tokenAmount.mul(_fixedPriceCADCent))\r\n                .div(100);\r\n\r\n            // if cannot completely redeem a request, then do not perform partial redemptions\r\n            if (requestDaiAmount > daiAmountRemaining) {\r\n                break;\r\n            }\r\n\r\n            daiAmountRemaining = daiAmountRemaining.sub(requestDaiAmount);\r\n\r\n            _wToken.transfer(_poolSource, request.tokenAmount);\r\n            _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);\r\n\r\n            emit Redeemed(request.account, request.tokenAmount, requestDaiAmount);\r\n        }\r\n\r\n        // if all async requests have been redeemed, add Dai to this contract as reserve\r\n        if (newIndex == requestLength && daiAmountRemaining > 0) {\r\n            _daiContract.transferFrom(msg.sender, address(this), daiAmountRemaining);\r\n            emit Capitalized(daiAmountRemaining);\r\n        }\r\n\r\n        // update redemption index to the latest\r\n        _asyncIndex = newIndex;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice withdraw Dai reserves back to source\r\n    * @return true if success\r\n    */\r\n    function withdrawReserve(uint256 daiAmount) external returns (bool) {\r\n        require(msg.sender == _poolSource, \"Only designated source can withdraw reserves\");\r\n\r\n        _daiContract.transfer(_poolSource, daiAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @notice view how many tokens are currently available\r\n    * @return amount of tokens available in the pool\r\n    */\r\n    function fundsAvailable() public view virtual override returns (uint256) {\r\n        return _daiContract.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @notice view the max number of tokens that can be instantly redeemed\r\n    * @return amount of tokens instantly redeemable\r\n    */\r\n    function maxTokenForInstantRedemption() external view virtual override returns (uint256) {\r\n        return _cadOracle\r\n            .daiToCad(fundsAvailable().mul(100))\r\n            .div(_fixedPriceCADCent);\r\n    }\r\n\r\n    /**\r\n    * @notice see the total token balance awaiting redemptions for a given account\r\n    * @dev IMPORTANT this function involves unbounded loop, should NOT be used in critical logical paths\r\n    * @param account     account that has tokens pending\r\n    * @return token amount in 18 decimals\r\n    */\r\n    function tokensPending(address account) external view virtual override returns (uint256) {\r\n        uint256 pendingAmount = 0;\r\n        uint256 requestLength = _asyncRequests.length;\r\n\r\n        for (uint256 i = _asyncIndex; i < requestLength; i = i.add(1)) {\r\n            AsyncRedemptionRequest storage request = _asyncRequests[i];\r\n\r\n            if (request.account == account) {\r\n                pendingAmount = pendingAmount.add(request.tokenAmount);\r\n            }\r\n        }\r\n\r\n        return pendingAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice view a specific async redemption request\r\n    * @param index     index of the async redemption request\r\n    * @return account and tokenAmount in the request\r\n    */\r\n    function requestAtIndex(uint256 index) external view returns (address, uint256) {\r\n        AsyncRedemptionRequest storage request = _asyncRequests[index];\r\n        return (request.account, request.tokenAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice view the current async redemption request index\r\n    * @return the index\r\n    */\r\n    function currentRequestIndex() external view returns (uint256) {\r\n        return _asyncIndex;\r\n    }\r\n\r\n    /**\r\n    * @notice view the number of total async redemption requests\r\n    * @return total number of all async requests\r\n    */\r\n    function numberOfRequests() external view returns (uint256) {\r\n        return _asyncRequests.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cadOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceCADCent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daiContractddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"Capitalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"RedemptionPending\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_asyncIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cadOracle\",\"outputs\":[{\"internalType\":\"contract ICADConversionOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_daiContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fixedPriceCADCent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_poolSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"asyncRedemption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDaiAmount\",\"type\":\"uint256\"}],\"name\":\"capitalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"instantRedemption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenForInstantRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"requestAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ManagedAsyncDaiRedemptionPool","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000038e63793993ae54be374d129f34a3faf2c382e97000000000000000000000000058843c1d91f611db374a1ffcbbcc61a74f613cc000000000000000000000000b101c8c418b09c5943fcc060e74cee743132d4ba00000000000000000000000000000000000000000000000000000000000000640000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d35d3b5319b565d01605cd3f5c13068f9d1e611d00950afc284d1bbe7aec46aa"}]}