{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ETH2POS is Ownable{\r\n    using SafeMath for uint;\r\n\r\n\r\n    mapping (address => address) public vipLevelToUp;\r\n    mapping (address => address[]) public vipLevelToDown;\r\n\r\n    mapping (address => uint) private _stakeMap;\r\n    mapping (address => uint) private _profitMap;\r\n    uint256 private _totalStake;\r\n    uint256 private _totalProfit;\r\n\r\n    mapping (uint32  => address) private _userList;\r\n    uint32 private _currentUserCount;\r\n\r\n    event Deposit(address indexed from, uint256 amount);\r\n    event VipLevelPro(address indexed from, address indexed to,uint256 amount, uint8 level);\r\n    event AddAdviser(address indexed down, address indexed up);\r\n    event GovWithdraw(address indexed to, uint256 value);\r\n\r\n    uint constant private minDepositValue = 100 finney;\r\n    uint constant private maxDepositValue = 32 ether;\r\n    uint constant private vipBaseProfit = 3;\r\n    uint constant private vipExtraStakeRate = 10 ether;\r\n\r\n    constructor()public {\r\n    }\r\n\r\n    function depositWithAdviser(address _adviser) public payable{\r\n        require(_adviser != address(0) , \"zero address input\");\r\n        if(_stakeMap[msg.sender] == 0){\r\n            if( _adviser != msg.sender && isUser(_adviser)){\r\n                vipLevelToUp[msg.sender] = _adviser;\r\n                emit AddAdviser(msg.sender,_adviser);\r\n            }\r\n        }\r\n        deposit();\r\n    }\r\n\r\n    function deposit() public payable{\r\n        uint oldValue = _stakeMap[msg.sender];\r\n        uint newValue = oldValue.add(msg.value);\r\n        require(msg.value >= minDepositValue, \"!min deposit value\");\r\n        require(newValue <= maxDepositValue, \"!max deposit value\");\r\n\r\n        if(oldValue==0){\r\n            _userList[_currentUserCount] = msg.sender;\r\n            _currentUserCount++;\r\n        }\r\n        _stakeMap[msg.sender] = newValue;\r\n        _totalStake = _totalStake.add(msg.value);\r\n        doVipLevelProfit(oldValue, msg.value);\r\n\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    function doVipLevelProfit(uint oldValue, uint addValue) private {\r\n        address current = msg.sender;\r\n        for(uint8 i = 1;i<=3;i++){\r\n            address upper = vipLevelToUp[current];\r\n            if(upper == address(0)){\r\n                return;\r\n            }\r\n            if(oldValue == 0){\r\n                vipLevelToDown[upper].push(msg.sender);\r\n            }\r\n            uint profit = vipBaseProfit*i* addValue /100;\r\n            _profitMap[upper] = _profitMap[upper].add(profit);\r\n            _totalProfit = _totalProfit.add(profit);\r\n            emit VipLevelPro(msg.sender,upper,profit,i);\r\n            current = upper;\r\n        }\r\n    }\r\n\r\n    function govWithdraw(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        msg.sender.transfer(_amount);\r\n        emit GovWithdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function isUser(address account) private view returns (bool) {\r\n        return _stakeMap[account]>0;\r\n    }\r\n\r\n    function pureStakeOf(address account) public view returns (uint) {\r\n        return _stakeMap[account];\r\n    }\r\n\r\n    function profitOf(address account) public view returns (uint) {\r\n        return _profitMap[account];\r\n    }\r\n\r\n    function stakeOf(address account) public view returns (uint) {\r\n        return _stakeMap[account]+ _profitMap[account];\r\n    }\r\n\r\n    function totalStake() public view returns (uint) {\r\n        return _totalStake+_totalProfit;\r\n    }\r\n\r\n    function currentUserCount() public view returns (uint32) {\r\n        return _currentUserCount;\r\n    }\r\n\r\n    function userList(uint32 i) public view returns (address) {\r\n        return _userList[i];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"down\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"up\",\"type\":\"address\"}],\"name\":\"AddAdviser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"VipLevelPro\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adviser\",\"type\":\"address\"}],\"name\":\"depositWithAdviser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pureStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"i\",\"type\":\"uint32\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vipLevelToDown\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipLevelToUp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ETH2POS","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bcdc8679f666fb7b2edb0623d45e54edfa491dd39c1fbf83c4a4f6086e04c0af"}]}