{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ninterface IStakingFountain {\r\n    event Deposit(address indexed from, address indexed to, uint value);\r\n    event Withdraw(address indexed from, address indexed to, uint value);\r\n     \r\n    function addTokne(address token) external returns (bool);\r\n    function deleteTokne(address token) external returns (bool);\r\n    function deposit(address token, string calldata from, uint256 amount) external returns (bool);\r\n    function withdraw() external returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract StakingFountainToken is IStakingFountain {\r\n    using SafeMath for uint256;\r\n    struct LockBin {\r\n\t\tuint256 start;\r\n\t\tuint256 amount;\r\n\t\tuint256 lpUsdAmount;\r\n\t\tuint256 lpEthAmount;\r\n\t\tuint256 count;\r\n\t\taddress token;\r\n\t\tuint8   state;\r\n\t\tstring  tx;\r\n\t\taddress from;\r\n\t\taddress to;\r\n\t}\r\n    address[]       public tokens;\r\n    address[]       public recordAddr;\r\n    uint256         public usdStakingAmount;    // day get ftn \r\n    uint256         public ethStakingAmount;\r\n    uint256         public lpUsdAmount;         // user staking lp token \r\n    uint256         public lpEthAmount;\r\n    uint256         public usdSendAmount;      // send to user ftn\r\n    uint256         public ethSendAmount;\r\n    uint256         public lpUsdWeekAmount;    // week\r\n    uint256         public lpEthWeekAmount;\r\n    address         private fountainToken;\r\n    uint256         public recordCount;\r\n    address         private owner = msg.sender;\r\n    address         private contractAddr = address(this);\r\n    uint256         private lpWeekTime = now;\r\n    address[]       private stakingAddr;\r\n    address         private usdToken;\r\n    address         private ethToken;\r\n    mapping(address => mapping(uint256 => LockBin)) public lockbins;\r\n    \r\n    function _addAddr(address addr) private {\r\n        recordAddr.push(addr);\r\n        bool flag = false;\r\n        for (uint8 i = 0; i < stakingAddr.length; i++) {\r\n            if(addr == stakingAddr[i]) {\r\n                flag = true;\r\n                break;\r\n            }\r\n        }\r\n        if (flag) {\r\n            stakingAddr.push(addr);\r\n        }\r\n    }\r\n    \r\n    function _deleteAddr(address addr) private {\r\n        for (uint i= 0; i < stakingAddr.length; i++) {\r\n            if(addr == stakingAddr[i]) {\r\n                 delete stakingAddr[i];\r\n                 stakingAddr.length --;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _autoStaking() private {\r\n        uint256 pairAmount;\r\n        for (uint i = 0; i < stakingAddr.length; i++) {\r\n            address addr = stakingAddr[i];\r\n            mapping(uint256 => LockBin) storage locks = lockbins[addr];\r\n            LockBin storage info = locks[0];\r\n            uint8 state = info.state;\r\n            uint256 getAmount;\r\n            if (state == 1) {\r\n                uint index = info.count;\r\n                for (uint8 j = 1; j <= index; j++)  {\r\n                    LockBin storage tmpInfo =  locks[j];\r\n                    uint8 tmpState          = tmpInfo.state;\r\n                    if (tmpState == 1) {\r\n                        address dToken          = tmpInfo.token;\r\n                        uint256 lpAmount        = tmpInfo.lpUsdAmount.add(tmpInfo.lpEthAmount);\r\n                        uint256 inTime          = tmpInfo.start;\r\n                        uint256 dayStaking      = now / inTime;\r\n                        if (dToken == usdToken) {\r\n                            if (dayStaking >= 1) {\r\n                                pairAmount      = lpAmount.div(ethStakingAmount);\r\n                                getAmount       = dayStaking.mul(pairAmount);\r\n                                usdSendAmount   = usdSendAmount.add(getAmount);\r\n                            }\r\n                        }else {\r\n                            if (dayStaking > 1) {\r\n                                pairAmount      = lpAmount.div(ethStakingAmount);\r\n                                getAmount       = dayStaking.mul(pairAmount);\r\n                                ethSendAmount   = ethSendAmount.add(getAmount);\r\n                            }\r\n                        }\r\n                        if (getAmount > 0) {\r\n                             info.amount        = info.amount.add(getAmount);\r\n                             tmpInfo.start      = now;\r\n                        }\r\n                    }\r\n                 }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setStakingAmount(uint256 amount, address token) external returns(bool) {\r\n        require(msg.sender == owner, 'Fountain: NO_OWNER_ADDRESS');\r\n        require(amount > 0, 'Fountain: AMOUNT_INVALID');\r\n        if (token == usdToken) {\r\n            usdStakingAmount = amount;\r\n        }else if (token == ethToken) {\r\n            ethStakingAmount = amount;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function setFountainToken(address token) external returns(bool) {\r\n        require(msg.sender == owner, 'AddLPtoken: NO_OWNER_ADDRESS');\r\n        fountainToken = token;\r\n        return true;\r\n    }\r\n    \r\n    function addTokne(address token) external  returns (bool) {\r\n        require(token != address(0), 'Fountain: ZERO_ADDRESS');\r\n        require(msg.sender == owner, 'Fountain: NO_OWNER_ADDRESS');\r\n        tokens.push(token);\r\n        for(uint8 i=0; i < tokens.length; i++) {\r\n            if (i==0){\r\n                usdToken = tokens[i];\r\n            }else if(i==1) {\r\n                ethToken = tokens[i];\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function deleteTokne(address token) external returns (bool) {\r\n        require(msg.sender == owner, 'Fountain: NO_OWNER_ADDRESS');\r\n        for(uint8 i=0; i < tokens.length; i++) {\r\n            if(token == tokens[i]) {\r\n                delete tokens[i];\r\n                tokens.length --;\r\n                if (token == usdToken) {\r\n                    usdToken = address(0);\r\n                }else if (token == ethToken) {\r\n                    ethToken = address(0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function deposit(address token,  string calldata tx, uint256 amount) external  returns (bool) {\r\n        uint256 uniLen      = tokens.length;\r\n        require(uniLen > 0, 'Fountain: UIN_TOKEN_ERROR');\r\n        if (token == usdToken) {\r\n        }else if(token == ethToken) {\r\n            require(IERC20(token).balanceOf(address(contractAddr)).sub(lpEthAmount) >= amount, 'Fountain: ETH_LP_AMOUNT_INVALID');\r\n        } else {\r\n            require(false, 'Fountain: TOKNE_INVALID');\r\n        }\r\n        uint256 weekTmp = 0;\r\n        uint256 nowTime = now;\r\n        mapping(uint256 => LockBin) storage locks = lockbins[msg.sender];\r\n        LockBin storage info = locks[0];\r\n                        uint256 index = info.count + 1;\r\n                        locks[index] = LockBin({\r\n                        start:      now,\r\n                        amount:     amount,\r\n                        lpUsdAmount:   0,\r\n                        lpEthAmount:   0,\r\n                        count:      index,\r\n                        token:      token,\r\n                        state:      1,\r\n                        tx:         tx,\r\n                        from:       msg.sender,\r\n                        to:         contractAddr\r\n        });\r\n        info.start  = now;\r\n        info.count  = index;\r\n        info.token  = fountainToken;\r\n        info.state  = 1;\r\n        info.token  = fountainToken;\r\n        info.from   = contractAddr;\r\n        info.to     = msg.sender;        \r\n        weekTmp     = nowTime.div(lpWeekTime);\r\n        \r\n        _addAddr(msg.sender);\r\n        weekTmp = 0;\r\n        recordCount = recordCount.add(1);\r\n        if (token == usdToken) {\r\n            lpUsdAmount = lpUsdAmount.add(amount);\r\n            locks[index].lpUsdAmount = amount;\r\n            info.lpUsdAmount = info.lpUsdAmount.add(amount);\r\n            if (weekTmp <= 7) {\r\n                lpUsdWeekAmount = lpUsdWeekAmount.add(amount);\r\n            }else {\r\n                lpWeekTime      = now;\r\n                lpUsdWeekAmount    = 0;\r\n            }\r\n        }else if(token == ethToken) {\r\n            lpEthAmount = lpEthAmount.add(amount);\r\n            locks[index].lpEthAmount = amount;\r\n            info.lpEthAmount = info.lpEthAmount.add(amount);\r\n            if (weekTmp <= 7) {\r\n                lpEthWeekAmount = lpEthWeekAmount.add(amount);\r\n            }else {\r\n                lpWeekTime      = now;\r\n                lpEthWeekAmount    = 0;\r\n            }\r\n        }\r\n        emit Deposit(msg.sender, address(this), amount);\r\n        _autoStaking();\r\n       return true;\r\n    }\r\n    \r\n    function withdraw() external returns (bool) {\r\n        mapping(uint256 => LockBin) storage locks = lockbins[msg.sender];\r\n        LockBin storage info = locks[0];\r\n        info.state = 0;\r\n        info.start = now;\r\n        uint index = info.count + 1;\r\n        uint256 ftnAmount = info.amount;\r\n        uint256 usdTokenAmount = 0;\r\n        uint256 ethTokenAmount = 0;\r\n        for (uint i = 0; i < index; i++) {\r\n            if(i == 0 && ftnAmount != 0) {\r\n                TransferHelper.safeTransfer(locks[i].token, msg.sender, locks[i].amount);\r\n                emit Withdraw(address(this), msg.sender, locks[i].amount);\r\n            }else if(i > 0) {\r\n                address token =  locks[i].token;\r\n                if (token == usdToken) {\r\n                    usdTokenAmount = usdTokenAmount.add(locks[i].lpUsdAmount);\r\n                }else {\r\n                    ethTokenAmount = ethTokenAmount.add(locks[i].lpEthAmount);\r\n                }\r\n                locks[i].state = 0;\r\n                if (i == info.count) {\r\n                    if (usdTokenAmount > 0) {\r\n                        TransferHelper.safeTransfer(usdToken, msg.sender, usdTokenAmount);\r\n                        lpUsdAmount = lpUsdAmount.sub(usdTokenAmount);\r\n                        emit Withdraw(address(this), msg.sender, usdTokenAmount);\r\n                    }\r\n                    if (ethTokenAmount > 0) {\r\n                        TransferHelper.safeTransfer(ethToken, msg.sender, usdTokenAmount);\r\n                        lpEthAmount = lpEthAmount.sub(usdTokenAmount);\r\n                        emit Withdraw(address(this), msg.sender, usdTokenAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        info.lpUsdAmount    = 0;\r\n        info.lpEthAmount    = 0;\r\n        info.amount         = 0;\r\n        _deleteAddr(msg.sender);\r\n        _autoStaking();\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n    \r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n}\r\n\r\n// a library for performing overflow-safe math)\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addTokne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deleteTokne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tx\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethSendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockbins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpUsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tx\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpEthWeekAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpUsdAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpUsdWeekAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recordAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setFountainToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setStakingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdSendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingFountainToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4106cbe421a8f23edf29c263298b4232452fb3c49d13955da448f1e2cb661844"}]}