{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAddressRegistry {\\n    event AvalancheUpdated(address indexed newAddress);\\n    event LGEUpdated(address indexed newAddress);\\n    event LodgeUpdated(address indexed newAddress);\\n    event LoyaltyUpdated(address indexed newAddress);\\n    event PwdrUpdated(address indexed newAddress);\\n    event PwdrPoolUpdated(address indexed newAddress);\\n    event SlopesUpdated(address indexed newAddress);\\n    event SnowPatrolUpdated(address indexed newAddress);\\n    event TreasuryUpdated(address indexed newAddress);\\n    event UniswapRouterUpdated(address indexed newAddress);\\n    event VaultUpdated(address indexed newAddress);\\n    event WethUpdated(address indexed newAddress);\\n    \\n    function getAvalanche() external view returns (address);\\n    function setAvalanche(address _address) external;\\n\\n    function getLGE() external view returns (address);\\n    function setLGE(address _address) external;\\n\\n    function getLodge() external view returns (address);\\n    function setLodge(address _address) external;\\n\\n    function getLoyalty() external view returns (address);\\n    function setLoyalty(address _address) external;\\n\\n    function getPwdr() external view returns (address);\\n    function setPwdr(address _address) external;\\n\\n    function getPwdrPool() external view returns (address);\\n    function setPwdrPool(address _address) external;\\n\\n    function getSlopes() external view returns (address);\\n    function setSlopes(address _address) external;\\n\\n    function getSnowPatrol() external view returns (address);\\n    function setSnowPatrol(address _address) external;\\n\\n    function getTreasury() external view returns (address payable);\\n    function setTreasury(address _address) external;\\n\\n    function getUniswapRouter() external view returns (address);\\n    function setUniswapRouter(address _address) external;\\n\\n    function getVault() external view returns (address);\\n    function setVault(address _address) external;\\n\\n    function getWeth() external view returns (address);\\n    function setWeth(address _address) external;\\n}\"\r\n    },\r\n    \"contracts/registry/AddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { AddressStorage } from \\\"./AddressStorage.sol\\\";\\n\\ncontract AddressRegistry is IAddressRegistry, Ownable, AddressStorage {\\n    event AvalancheUpdated(address indexed newAddress);\\n    event LGEUpdated(address indexed newAddress);\\n    event LodgeUpdated(address indexed newAddress);\\n    event LoyaltyUpdated(address indexed newAddress);\\n    event PwdrUpdated(address indexed newAddress);\\n    event PwdrPoolUpdated(address indexed newAddress);\\n    event SlopesUpdated(address indexed newAddress);\\n    event SnowPatrolUpdated(address indexed newAddress);\\n    event TreasuryUpdated(address indexed newAddress);\\n    event UniswapRouterUpdated(address indexed newAddress);\\n    event VaultUpdated(address indexed newAddress);\\n    event WethUpdated(address indexed newAddress);\\n\\n    bytes32 private constant AVALANCHE_KEY = \\\"AVALANCHE\\\";\\n    bytes32 private constant LGE_KEY = \\\"LGE\\\";\\n    bytes32 private constant LODGE_KEY = \\\"LODGE\\\";\\n    bytes32 private constant LOYALTY_KEY = \\\"LOYALTY\\\";\\n    bytes32 private constant PWDR_KEY = \\\"PWDR\\\";\\n    bytes32 private constant PWDR_POOL_KEY = \\\"PWDR_POOL\\\";\\n    bytes32 private constant SLOPES_KEY = \\\"SLOPES\\\";\\n    bytes32 private constant SNOW_PATROL_KEY = \\\"SNOW_PATROL\\\";\\n    bytes32 private constant TREASURY_KEY = \\\"TREASURY\\\";\\n    bytes32 private constant UNISWAP_ROUTER_KEY = \\\"UNISWAP_ROUTER\\\";\\n    bytes32 private constant WETH_KEY = \\\"WETH\\\";\\n    bytes32 private constant VAULT_KEY = \\\"VAULT\\\";\\n\\n    function getAvalanche() public override view returns (address) {\\n        return getAddress(AVALANCHE_KEY);\\n    }\\n\\n    function setAvalanche(address _address) public override onlyOwner {\\n        _setAddress(AVALANCHE_KEY, _address);\\n        emit AvalancheUpdated(_address);\\n    }\\n\\n    function getLGE() public override view returns (address) {\\n        return getAddress(LGE_KEY);\\n    }\\n\\n    function setLGE(address _address) public override onlyOwner {\\n        _setAddress(LGE_KEY, _address);\\n        emit LGEUpdated(_address);\\n    }\\n\\n    function getLodge() public override view returns (address) {\\n        return getAddress(LODGE_KEY);\\n    }\\n\\n    function setLodge(address _address) public override onlyOwner {\\n        _setAddress(LODGE_KEY, _address);\\n        emit LodgeUpdated(_address);\\n    }\\n\\n    function getLoyalty() public override view returns (address) {\\n        return getAddress(LOYALTY_KEY);\\n    }\\n\\n    function setLoyalty(address _address) public override onlyOwner {\\n        _setAddress(LOYALTY_KEY, _address);\\n        emit LoyaltyUpdated(_address);\\n    }\\n\\n    function getPwdr() public override view returns (address) {\\n        return getAddress(PWDR_KEY);\\n    }\\n\\n    function setPwdr(address _address) public override onlyOwner {\\n        _setAddress(PWDR_KEY, _address);\\n        emit PwdrUpdated(_address);\\n    }\\n\\n    function getPwdrPool() public override view returns (address) {\\n        return getAddress(PWDR_POOL_KEY);\\n    }\\n\\n    function setPwdrPool(address _address) public override onlyOwner {\\n        _setAddress(PWDR_POOL_KEY, _address);\\n        emit PwdrPoolUpdated(_address);\\n    }\\n\\n    function getSlopes() public override view returns (address) {\\n        return getAddress(SLOPES_KEY);\\n    }\\n\\n    function setSlopes(address _address) public override onlyOwner {\\n        _setAddress(SLOPES_KEY, _address);\\n        emit SlopesUpdated(_address);\\n    }\\n\\n    function getSnowPatrol() public override view returns (address) {\\n        return getAddress(SNOW_PATROL_KEY);\\n    }\\n\\n    function setSnowPatrol(address _address) public override onlyOwner {\\n        _setAddress(SNOW_PATROL_KEY, _address);\\n        emit SnowPatrolUpdated(_address);\\n    }\\n\\n    function getTreasury() public override view returns (address payable) {\\n        address payable _address = address(uint160(getAddress(TREASURY_KEY)));\\n        return _address;\\n    }\\n\\n    function setTreasury(address _address) public override onlyOwner {\\n        _setAddress(TREASURY_KEY, _address);\\n        emit TreasuryUpdated(_address);\\n    }\\n\\n    function getUniswapRouter() public override view returns (address) {\\n        return getAddress(UNISWAP_ROUTER_KEY);\\n    }\\n\\n    function setUniswapRouter(address _address) public override onlyOwner {\\n        _setAddress(UNISWAP_ROUTER_KEY, _address);\\n        emit UniswapRouterUpdated(_address);\\n    }\\n\\n    function getVault() public override view returns (address) {\\n        return getAddress(VAULT_KEY);\\n    }\\n\\n    function setVault(address _address) public override onlyOwner {\\n        _setAddress(VAULT_KEY, _address);\\n        emit VaultUpdated(_address);\\n    }\\n\\n    function getWeth() public override view returns (address) {\\n        return getAddress(WETH_KEY);\\n    }\\n\\n    function setWeth(address _address) public override onlyOwner {\\n        _setAddress(WETH_KEY, _address);\\n        emit WethUpdated(_address);\\n    }\\n}\"\r\n    },\r\n    \"contracts/registry/AddressRegistryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { AddressRegistry } from \\\"../registry/AddressRegistry.sol\\\";\\n\\n// AddressRegistry Owner which enforces a 48hr timelock on address changes\\ncontract AddressRegistryManager is Ownable {\\n    event TimelockInitialized(address indexed user, bytes32 method);\\n\\n    bytes32 private constant AVALANCHE_KEY = \\\"AVALANCHE\\\";\\n    bytes32 private constant LGE_KEY = \\\"LGE\\\";\\n    bytes32 private constant LODGE_KEY = \\\"LODGE\\\";\\n    bytes32 private constant LOYALTY_KEY = \\\"LOYALTY\\\";\\n    bytes32 private constant OWNERSHIP_KEY = \\\"OWNERSHIP\\\";\\n    bytes32 private constant PWDR_KEY = \\\"PWDR\\\";\\n    bytes32 private constant PWDR_POOL_KEY = \\\"PWDR_POOL\\\";\\n    bytes32 private constant SLOPES_KEY = \\\"SLOPES\\\";\\n    bytes32 private constant SNOW_PATROL_KEY = \\\"SNOW_PATROL\\\";\\n    bytes32 private constant TREASURY_KEY = \\\"TREASURY\\\";\\n    bytes32 private constant UNISWAP_ROUTER_KEY = \\\"UNISWAP_ROUTER\\\";\\n    bytes32 private constant WETH_KEY = \\\"WETH\\\";\\n    bytes32 private constant VAULT_KEY = \\\"VAULT\\\";\\n\\n    uint256 private constant TIMELOCK_PERIOD = 48 hours;\\n    address internal addressRegistry;\\n    mapping(bytes32 => uint256) public accessTimestamps;\\n\\n    constructor(address _addressRegistry) public {\\n        addressRegistry = _addressRegistry;\\n    }\\n\\n    function setTimelock(bytes32 method) private returns (bool) {\\n        if (accessTimestamps[method] == 0) {\\n            accessTimestamps[method] = block.timestamp + getTimelockPeriod();\\n            emit TimelockInitialized(msg.sender, method);\\n            return false;\\n        } else if (block.timestamp < accessTimestamps[method]) {\\n            revert(\\\"Timelock period has not concluded\\\");\\n        } else {\\n            accessTimestamps[method] = 0;\\n            return true;\\n        }\\n    }\\n\\n    function returnOwnership() public onlyOwner {\\n        if (setTimelock(OWNERSHIP_KEY)) {\\n            AddressRegistry registry = AddressRegistry(addressRegistry);\\n            registry.transferOwnership(msg.sender);\\n        }\\n    }\\n\\n    function setAvalanche(address _address) public onlyOwner {\\n        if (setTimelock(AVALANCHE_KEY)) {\\n            IAddressRegistry(addressRegistry).setAvalanche(_address);\\n        }\\n    }\\n\\n    function setLGE(address _address) public onlyOwner {\\n        if (setTimelock(LGE_KEY)) {\\n            IAddressRegistry(addressRegistry).setLGE(_address);\\n        }\\n    }\\n\\n    function setLodge(address _address) public onlyOwner {\\n        if (setTimelock(LODGE_KEY)) {\\n            IAddressRegistry(addressRegistry).setLodge(_address);\\n        }\\n    }\\n\\n    function setLoyalty(address _address) public onlyOwner {\\n        if (setTimelock(LOYALTY_KEY)) {\\n            IAddressRegistry(addressRegistry).setLoyalty(_address);\\n        }\\n    }\\n\\n    function setPwdr(address _address) public onlyOwner {\\n        if (setTimelock(PWDR_KEY)) {\\n            IAddressRegistry(addressRegistry).setPwdr(_address);\\n        }\\n    }\\n\\n    function setPwdrPool(address _address) public onlyOwner {\\n        if (setTimelock(PWDR_POOL_KEY)) {\\n            IAddressRegistry(addressRegistry).setPwdrPool(_address);\\n        }\\n    }\\n\\n    function setSlopes(address _address) public onlyOwner {\\n        if (setTimelock(SLOPES_KEY)) {\\n            IAddressRegistry(addressRegistry).setSlopes(_address);\\n        }\\n    }\\n\\n    function setSnowPatrol(address _address) public onlyOwner {\\n        if (setTimelock(SNOW_PATROL_KEY)) {\\n            IAddressRegistry(addressRegistry).setSnowPatrol(_address);\\n        }\\n    }\\n\\n    function setTreasury(address _address) public onlyOwner {\\n        if (setTimelock(TREASURY_KEY)) {\\n            IAddressRegistry(addressRegistry).setTreasury(_address);\\n        }\\n    }\\n\\n    function setUniswapRouter(address _address) public onlyOwner {\\n        if (setTimelock(UNISWAP_ROUTER_KEY)) {\\n            IAddressRegistry(addressRegistry).setUniswapRouter(_address);\\n        }\\n    }\\n\\n    function setVault(address _address) public onlyOwner {\\n        if (setTimelock(VAULT_KEY)) {\\n            IAddressRegistry(addressRegistry).setVault(_address);\\n        }\\n    }\\n\\n    function setWeth(address _address) public onlyOwner {\\n        if (setTimelock(WETH_KEY)) {\\n            IAddressRegistry(addressRegistry).setWeth(_address);\\n        }\\n    }\\n\\n    function getTimelockPeriod() public virtual pure returns (uint256) {\\n        return TIMELOCK_PERIOD;\\n    }\\n}\"\r\n    },\r\n    \"contracts/registry/AddressStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ncontract AddressStorage {\\n    mapping(bytes32 => address) private addresses;\\n\\n    function getAddress(bytes32 _key) public view returns (address) {\\n        return addresses[_key];\\n    }\\n\\n    function _setAddress(bytes32 _key, address _value) internal {\\n        addresses[_key] = _value;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"method\",\"type\":\"bytes32\"}],\"name\":\"TimelockInitialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"accessTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAvalanche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLodge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPwdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPwdrPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSlopes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSnowPatrol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AddressRegistryManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ec4a8b60191230c4c6b4db79e321441b63bd143","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}