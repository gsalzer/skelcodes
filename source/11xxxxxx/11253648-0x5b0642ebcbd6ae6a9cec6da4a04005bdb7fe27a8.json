{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n0**********************************************************************************************************************************0\r\n0******00000000****00000000******************00000000****************************00******************************00****************0\r\n0****000000000000000000000000**************000000000000*********************000000000000*********************0000000000************0\r\n0***0000******000000******0000************0000******0000******************000000****000000*****************00000****00000**********0\r\n0**000*********0000*********000**********0000********0000****************00000********000000*************00000********00000********0\r\n0**000**********00**********000**********0000********0000**************00000************00000**********00000************00000******0\r\n0***000********************0000*******0000000********0000000**********0000****************0000*******00000****************00000****0\r\n0***0000******************0000******000000**************000000*******0000******************0000*****0000********************0000***0\r\n0****0000****************0000******0000********************0000*****0000********************0000*****00000****************00000****0\r\n0*****0000**************0000*******000**********************000*****000**********************000*******00000************00000******0\r\n0******00000**********00000********0000********0000********0000*****0000********0000********0000*********00000********00000********0\r\n0********00000******00000***********00000***000000000****00000*******00000000000000000000000000************00000****00000**********0\r\n0**********00000**000000*************000000000000000000000000**********0000000000000000000000****************0000000000************0\r\n0************000000000*******************0000*000000*0000**********************000000**************************000000**************0\r\n0**************0000***************************000000***************************000000****************************00****************0\r\n0**********************************************************************************************************************************0\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*/\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address target) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address target, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed target, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) return 0;\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function ceil(uint256 m, uint256 n) internal pure returns (uint256) {\r\n    uint256 a = add(m, n);\r\n    uint256 b = sub(a, 1);\r\n    return mul(div(b, n), n);\r\n  }\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n\r\n  uint8 public _decimal;\r\n  string public _name;\r\n  string public _symbol;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _decimal = decimals;\r\n    _name = name;\r\n    _symbol = symbol; \r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimal;\r\n  }\r\n}\r\ncontract PokerTableINC is ERC20(\"PokerTableINC\", \"CHIP\", 18) {\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) public _CHIPBalance;\r\n  mapping (address => mapping (address => uint256)) public _allowed;\r\n  \r\n  uint256 private max_chip = 1000;\r\n  uint256 private max_in_table = 500;\r\n  uint256 private buyinfee = 50; \r\n  uint256 private _totalSupply = max_chip * 10 ** uint256(18);\r\n  address private host;\r\n\r\n  constructor() public{\r\n    host = msg.sender;\r\n    _mint(host, _totalSupply);\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _CHIPBalance[owner];\r\n  }\r\n    \r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _CHIPBalance[msg.sender]);\r\n    require(to != address(0));\r\n    uint256 charged = value.div(buyinfee);\r\n    uint256 chargeable = _totalSupply - max_in_table * 10 ** uint256(18);\r\n    if (chargeable <= 0) {\r\n        charged = 0;\r\n    }else if (chargeable < charged){\r\n        charged = chargeable;\r\n    }\r\n    uint256 receive = value.sub(charged);\r\n    _CHIPBalance[msg.sender] = _CHIPBalance[msg.sender].sub(value);\r\n    _CHIPBalance[to] = _CHIPBalance[to].add(receive);\r\n    _totalSupply = _totalSupply.sub(charged);\r\n\r\n    emit Transfer(msg.sender, to, receive);\r\n    emit Transfer(msg.sender, address(0), charged);\r\n\r\n    return true;\r\n  }\r\n  function allowance(address owner, address target) public view returns (uint256) {\r\n    return _allowed[owner][target];\r\n  }\r\n\r\n  function approve(address target, uint256 value) public returns (bool) {\r\n    require(target != address(0));\r\n    _allowed[msg.sender][target] = value;\r\n    emit Approval(msg.sender, target, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _CHIPBalance[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _CHIPBalance[from] = _CHIPBalance[from].sub(value);\r\n    uint256 charged = value.div(buyinfee);\r\n    uint256 chargeable = _totalSupply - max_in_table * 10 ** uint256(18);\r\n    \r\n    if (chargeable <= 0) {\r\n        charged = 0;\r\n    }else if (chargeable < charged){\r\n        charged = chargeable;\r\n    }\r\n    uint256 receive = value.sub(charged);\r\n    _CHIPBalance[to] = _CHIPBalance[to].add(receive);\r\n    _totalSupply = _totalSupply.sub(charged);\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, receive);\r\n    emit Transfer(from, address(0), charged);\r\n\r\n    return true;\r\n  }\r\n  \r\n  function increaseAllowance(address target, uint256 addedValue) public returns (bool) {\r\n    require(target != address(0));\r\n    _allowed[msg.sender][target] = (_allowed[msg.sender][target].add(addedValue));\r\n    emit Approval(msg.sender, target, _allowed[msg.sender][target]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address target, uint256 val) public returns (bool) {\r\n    require(target != address(0));\r\n    _allowed[msg.sender][target] = (_allowed[msg.sender][target].sub(val));\r\n    emit Approval(msg.sender, target, _allowed[msg.sender][target]);\r\n    return true;\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _CHIPBalance[account] = _CHIPBalance[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) external {\r\n    _drop(msg.sender, amount);\r\n  }\r\n\r\n  function _drop(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _CHIPBalance[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _CHIPBalance[account] = _CHIPBalance[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _drop(account, amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_CHIPBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PokerTableINC","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4bceff77bf6f718f09ffc54ff7d8a3d9edf27c5e0ff5566985918413d17431b5"}]}