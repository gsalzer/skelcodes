{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: bsl-1.1\r\n\r\npragma solidity ^0.8.1;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IKeep3rV1Quote {\r\n    struct LiquidityParams {\r\n        uint sReserveA;\r\n        uint sReserveB;\r\n        uint uReserveA;\r\n        uint uReserveB;\r\n        uint sLiquidity;\r\n        uint uLiquidity;\r\n    }\r\n    \r\n    struct QuoteParams {\r\n        uint quoteOut;\r\n        uint amountOut;\r\n        uint currentOut;\r\n        uint sTWAP;\r\n        uint uTWAP;\r\n        uint sCUR;\r\n        uint uCUR;\r\n    }\r\n    \r\n    function assetToUsd(address tokenIn, uint amountIn, uint granularity) external returns (QuoteParams memory q, LiquidityParams memory l);\r\n    function assetToEth(address tokenIn, uint amountIn, uint granularity) external view returns (QuoteParams memory q, LiquidityParams memory l);\r\n    function ethToUsd(uint amountIn, uint granularity) external view returns (QuoteParams memory q, LiquidityParams memory l);\r\n    function pairFor(address tokenA, address tokenB) external pure returns (address sPair, address uPair);\r\n    function sPairFor(address tokenA, address tokenB) external pure returns (address sPair);\r\n    function uPairFor(address tokenA, address tokenB) external pure returns (address uPair);\r\n    function getLiquidity(address tokenA, address tokenB) external view returns (LiquidityParams memory l);\r\n    function assetToAsset(address tokenIn, uint amountIn, address tokenOut, uint granularity) external view returns (QuoteParams memory q, LiquidityParams memory l);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract SynthetixAMM  {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    address public governance;\r\n    address public pendingGovernance;\r\n    \r\n    mapping(address => address) synths;\r\n    \r\n    IKeep3rV1Quote public constant exchange = IKeep3rV1Quote(0x31B06AaA465C7e7003b8D658A786d573D2216e1c);\r\n    \r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    \r\n    constructor() {\r\n        governance = msg.sender;\r\n    }\r\n    \r\n    function setGovernance(address _gov) external {\r\n        require(msg.sender == governance);\r\n        pendingGovernance = _gov;\r\n    } \r\n    \r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance);\r\n        governance = pendingGovernance;\r\n    }\r\n    \r\n    function withdraw(address token, uint amount) external {\r\n        require(msg.sender == governance);\r\n        IERC20(token).safeTransfer(governance, amount);\r\n    }\r\n    \r\n    function withdrawAll(address token) external {\r\n        require(msg.sender == governance);\r\n        IERC20(token).safeTransfer(governance, IERC20(token).balanceOf(address(this)));\r\n    }\r\n    \r\n    function addSynth(address synth, address token) external {\r\n        require(msg.sender == governance);\r\n        synths[synth] = token;\r\n    }\r\n    \r\n    function quote(address synthIn, uint amountIn, address synthOut) external view returns (uint) {\r\n        address _tokenOut = synths[synthOut];\r\n        (IKeep3rV1Quote.QuoteParams memory q,) = exchange.assetToAsset(synths[synthIn], amountIn, _tokenOut, 2);\r\n        return q.quoteOut;\r\n    }\r\n    \r\n    function swap(address synthIn, uint amountIn, address synthOut, address recipient) external returns (uint) {\r\n        (IKeep3rV1Quote.QuoteParams memory q,) = exchange.assetToAsset(synths[synthIn], amountIn, synths[synthOut], 2);\r\n        IERC20(synthIn).safeTransferFrom(msg.sender, address(this), amountIn);\r\n        IERC20(synthOut).safeTransfer(recipient, q.quoteOut);\r\n        emit Swap(msg.sender, amountIn, 0, 0, q.quoteOut, recipient);\r\n        return q.quoteOut;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"synth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addSynth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Quote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"synthIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"synthOut\",\"type\":\"address\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"synthIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"synthOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SynthetixAMM","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c7b3671c864991b0f21ddfeefa21b4a8370b4291557c3ba30f8fd412ca1c3c9e"}]}