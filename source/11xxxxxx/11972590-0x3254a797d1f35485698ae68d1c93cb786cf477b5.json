{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/SocialBets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract SocialBets is Ownable, Pausable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using Address for address payable;\\n\\n    // Type definitions\\n    enum BetStates {WaitingParty2, WaitingFirstVote, WaitingSecondVote, WaitingMediator}\\n    enum BetCancellationReasons {Party2Timeout, VotesTimeout, Tie, MediatorTimeout, MediatorCancelled}\\n    enum BetFinishReasons {AnswersMatched, MediatorFinished}\\n    enum Answers {Unset, FirstPartyWins, SecondPartyWins, Tie}\\n    struct Bet {\\n        string metadata;\\n        address payable firstParty;\\n        address payable secondParty;\\n        address payable mediator;\\n        uint256 firstBetValue;\\n        uint256 secondBetValue;\\n        uint256 mediatorFee;\\n        uint256 secondPartyTimeframe;\\n        uint256 resultTimeframe;\\n        BetStates state;\\n        Answers firstPartyAnswer; // answers: 0 - unset, 1 - first party wins, 2 - second party wins, 3 - tie\\n        Answers secondPartyAnswer;\\n    }\\n\\n    // Storage\\n\\n    //betId => bet\\n    mapping(uint256 => Bet) public bets;\\n\\n    // user => active bets[]\\n    mapping(address => uint256[]) public firstPartyActiveBets;\\n    // user => (betId => bet index in the active bets[])\\n    mapping(address => mapping(uint256 => uint256)) public firstPartyActiveBetsIndexes;\\n    // user => active bets[]\\n    mapping(address => uint256[]) public secondPartyActiveBets;\\n    // user => (betId => bet index in the active bets[])\\n    mapping(address => mapping(uint256 => uint256)) public secondPartyActiveBetsIndexes;\\n    // user => active bets[]\\n    mapping(address => uint256[]) public mediatorActiveBets;\\n    // user => (betId => bet index in the active bets[])\\n    mapping(address => mapping(uint256 => uint256)) public mediatorActiveBetsIndexes;\\n\\n    // fee value collected fot the owner to withdraw\\n    uint256 public collectedFee;\\n\\n    // Storage: Admin Settings\\n    uint256 public minBetValue;\\n    // bet creation fee\\n    uint256 public feePercentage;\\n    // mediator settings\\n    address payable public defaultMediator;\\n    uint256 public defaultMediatorFee;\\n    uint256 public mediationTimeLimit = 7 days;\\n\\n    // Constants\\n    uint256 public constant FEE_DECIMALS = 2;\\n    uint256 public constant FEE_PERCENTAGE_DIVISION = 10000;\\n    uint256 public constant MEDIATOR_FEE_DIVISION = 10000;\\n\\n    // Events\\n\\n    event NewBetCreated(\\n        uint256 indexed _betId,\\n        address indexed _firstParty,\\n        address indexed _secondParty,\\n        string _metadata,\\n        address _mediator,\\n        uint256 _mediatorFee,\\n        uint256 _firstBetValue,\\n        uint256 _secondBetValue,\\n        uint256 _secondPartyTimeframe,\\n        uint256 _resultTimeframe\\n    );\\n\\n    event SecondPartyParticipated(uint256 indexed _betId, address indexed _firstParty, address indexed _secondParty);\\n\\n    event Voted(uint256 indexed _betId, address indexed _voter, Answers indexed _answer);\\n\\n    event WaitingMediator(uint256 indexed _betId, address indexed _mediator);\\n\\n    event Finished(uint256 indexed _betId, address indexed _winner, BetFinishReasons indexed _reason, uint256 _reward);\\n\\n    event Cancelled(uint256 indexed _betId, BetCancellationReasons indexed _reason);\\n\\n    event Completed(\\n        address indexed _firstParty,\\n        address indexed _secondParty,\\n        address indexed _mediator,\\n        uint256 _betId\\n    );\\n\\n    //Constructor\\n    constructor(\\n        uint256 _feePercentage,\\n        uint256 _minBetValue,\\n        uint256 _defaultMediatorFee,\\n        address payable _defaultMediator\\n    ) public {\\n        require(_feePercentage <= FEE_PERCENTAGE_DIVISION, \\\"Bad fee\\\");\\n        require(_defaultMediatorFee <= MEDIATOR_FEE_DIVISION, \\\"Bad mediator fee\\\");\\n        require(_defaultMediator != address(0) && !_defaultMediator.isContract(), \\\"Bad mediator\\\");\\n        minBetValue = _minBetValue;\\n        feePercentage = _feePercentage;\\n        defaultMediatorFee = _defaultMediatorFee;\\n        defaultMediator = _defaultMediator;\\n    }\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Checks if bet exists in the bet mapping\\n     */\\n    modifier onlyExistingBet(uint256 _betId) {\\n        require(isBetExists(_betId), \\\"Bet doesn't exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks is sender isn't contract\\n     * [IMPORTANT]\\n     * ====\\n     * This modifier will allow the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    modifier onlyNotContract() {\\n        require(!msg.sender.isContract(), \\\"Contracts are prohibited\\\");\\n        _;\\n    }\\n\\n    // Getters\\n\\n    /**\\n     * @dev Returns first party active bets\\n     */\\n    function getFirstPartyActiveBets(address _firstParty) external view returns (uint256[] memory betsIds) {\\n        betsIds = firstPartyActiveBets[_firstParty];\\n    }\\n\\n    /**\\n     * @dev Returns second party active bets\\n     */\\n    function getSecondPartyActiveBets(address _secondParty) external view returns (uint256[] memory betsIds) {\\n        betsIds = secondPartyActiveBets[_secondParty];\\n    }\\n\\n    /**\\n     * @dev Returns mediator active bets\\n     */\\n    function getMediatorActiveBets(address _mediator) external view returns (uint256[] memory betsIds) {\\n        betsIds = mediatorActiveBets[_mediator];\\n    }\\n\\n    /**\\n     * @dev Returns bet ID calculated from constant bet properties\\n     */\\n    function calculateBetId(\\n        string memory _metadata,\\n        address _firstParty,\\n        uint256 _firstBetValue,\\n        uint256 _secondBetValue,\\n        uint256 _secondPartyTimeframe,\\n        uint256 _resultTimeframe\\n    ) public pure returns (uint256 betId) {\\n        betId = uint256(\\n            keccak256(\\n                abi.encode(\\n                    _metadata,\\n                    _firstParty,\\n                    _firstBetValue,\\n                    _secondBetValue,\\n                    _secondPartyTimeframe,\\n                    _resultTimeframe\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Check if bet exists\\n     */\\n    function isBetExists(uint256 _betId) public view returns (bool isExists) {\\n        isExists = bets[_betId].firstParty != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns fee value from bet values\\n     */\\n    function calculateFee(uint256 _firstBetValue, uint256 _secondBetValue) public view returns (uint256 fee) {\\n        fee = _firstBetValue.add(_secondBetValue).mul(feePercentage).div(FEE_PERCENTAGE_DIVISION);\\n    }\\n\\n    /**\\n     * @dev Returns mediator fee value\\n     */\\n    function calculateMediatorFee(uint256 _betId) public view returns (uint256 mediatorFeeValue) {\\n        Bet storage bet = bets[_betId];\\n        mediatorFeeValue = bet.firstBetValue.add(bet.secondBetValue).mul(bet.mediatorFee).div(MEDIATOR_FEE_DIVISION);\\n    }\\n\\n    // Admin functionality\\n\\n    /**\\n     * @dev Set new min bet value\\n     */\\n    function setMinBetValue(uint256 _minBetValue) external onlyOwner {\\n        minBetValue = _minBetValue;\\n    }\\n\\n    /**\\n     * @dev Set new fee percentage\\n     */\\n    function setFeePercentage(uint256 _feePercentage) external onlyOwner {\\n        require(_feePercentage <= FEE_PERCENTAGE_DIVISION, \\\"Bad fee\\\");\\n        feePercentage = _feePercentage;\\n    }\\n\\n    /**\\n     * @dev Set new default mediator fee\\n     */\\n    function setDefaultMediatorFee(uint256 _defaultMediatorFee) external onlyOwner {\\n        require(_defaultMediatorFee <= MEDIATOR_FEE_DIVISION, \\\"Bad mediator fee\\\");\\n        defaultMediatorFee = _defaultMediatorFee;\\n    }\\n\\n    /**\\n     * @dev Set new default mediator\\n     */\\n    function setDefaultMediator(address payable _defaultMediator) external onlyOwner {\\n        require(_defaultMediator != address(0) && !_defaultMediator.isContract(), \\\"Bad mediator\\\");\\n        defaultMediator = _defaultMediator;\\n    }\\n\\n    /**\\n     * @dev Set new mediation time limit\\n     */\\n    function setMediationTimeLimit(uint256 _mediationTimeLimit) external onlyOwner {\\n        require(_mediationTimeLimit > 0, \\\"Bad mediationTimeLimit\\\");\\n        mediationTimeLimit = _mediationTimeLimit;\\n    }\\n\\n    /**\\n     * @dev Pause the contract. This will disable new bet creation functionality\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract. This will enable new bet creation functionality\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Withdraws collected fee\\n     */\\n    function withdrawFee() external onlyOwner {\\n        require(collectedFee > 0, \\\"No fee to withdraw\\\");\\n        uint256 callValue = collectedFee;\\n        collectedFee = 0;\\n        (bool success, ) = msg.sender.call{value:callValue}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    // Users functionality\\n\\n    /**\\n     * @dev Creates new bet with specified characteristics. msg.sender will be set as the first party,\\n     *      so creation needs to be payed with first party bet value + fee.\\n     */\\n    function createBet(\\n        string memory _metadata,\\n        address payable _secondParty,\\n        address payable _mediator,\\n        uint256 _mediatorFee,\\n        uint256 _firstBetValue,\\n        uint256 _secondBetValue,\\n        uint256 _secondPartyTimeframe,\\n        uint256 _resultTimeframe\\n    ) external payable whenNotPaused onlyNotContract nonReentrant returns (uint256 betId) {\\n        require(_firstBetValue >= minBetValue && _secondBetValue >= minBetValue, \\\"Too small bet value\\\");\\n        require(_secondPartyTimeframe > now, \\\"2nd party timeframe < now\\\");\\n        require(_resultTimeframe > now, \\\"Result timeframe < now\\\");\\n        require(_resultTimeframe > _secondPartyTimeframe, \\\"Result < 2nd party timeframe\\\");\\n        require(\\n            msg.sender != _secondParty &&\\n                msg.sender != _mediator &&\\n                (_secondParty != _mediator || _secondParty == address(0)),\\n            \\\"Bad mediator or second party\\\"\\n        );\\n        uint256 fee = calculateFee(_firstBetValue, _secondBetValue);\\n        require(msg.value == _firstBetValue.add(fee), \\\"Bad eth value\\\");\\n        collectedFee = collectedFee.add(fee);\\n\\n        betId = calculateBetId(\\n            _metadata,\\n            msg.sender,\\n            _firstBetValue,\\n            _secondBetValue,\\n            _secondPartyTimeframe,\\n            _resultTimeframe\\n        );\\n        require(!isBetExists(betId), \\\"Bet already exists\\\");\\n\\n        Bet storage newBet = bets[betId];\\n        newBet.metadata = _metadata;\\n        newBet.firstParty = msg.sender;\\n        newBet.secondParty = _secondParty;\\n\\n        if (_mediator == address(0) || _mediator == defaultMediator) {\\n            newBet.mediator = defaultMediator;\\n            newBet.mediatorFee = defaultMediatorFee;\\n        } else {\\n            newBet.mediator = _mediator;\\n            require(_mediatorFee <= MEDIATOR_FEE_DIVISION, \\\"Bad mediator fee\\\");\\n            newBet.mediatorFee = _mediatorFee;\\n        }\\n        newBet.firstBetValue = _firstBetValue;\\n        newBet.secondBetValue = _secondBetValue;\\n        newBet.secondPartyTimeframe = _secondPartyTimeframe;\\n        newBet.resultTimeframe = _resultTimeframe;\\n\\n        firstPartyActiveBets[msg.sender].push(betId);\\n        firstPartyActiveBetsIndexes[msg.sender][betId] = firstPartyActiveBets[msg.sender].length.sub(1);\\n\\n        emit NewBetCreated(\\n            betId,\\n            newBet.firstParty,\\n            newBet.secondParty,\\n            newBet.metadata,\\n            newBet.mediator,\\n            newBet.mediatorFee,\\n            newBet.firstBetValue,\\n            newBet.secondBetValue,\\n            newBet.secondPartyTimeframe,\\n            newBet.resultTimeframe\\n        );\\n    }\\n\\n    /**\\n     * @dev Second party participating function. Cancels bet if party 2 is late for participating\\n     */\\n    function participate(uint256 _betId)\\n        external\\n        payable\\n        onlyExistingBet(_betId)\\n        onlyNotContract\\n        nonReentrant\\n        returns (bool success)\\n    {\\n        Bet storage bet = bets[_betId];\\n        require(bet.state == BetStates.WaitingParty2, \\\"Party 2 already joined\\\");\\n        require(msg.sender != bet.firstParty && msg.sender != bet.mediator, \\\"You are first party or mediator\\\");\\n        require(bet.secondParty == address(0) || bet.secondParty == msg.sender, \\\"Private bet\\\");\\n        require(msg.value == bet.secondBetValue, \\\"Bad eth value\\\");\\n\\n        if (bet.secondPartyTimeframe > now) {\\n            success = true;\\n            bet.secondParty = msg.sender;\\n            bet.state = BetStates.WaitingFirstVote;\\n\\n            secondPartyActiveBets[msg.sender].push(_betId);\\n            secondPartyActiveBetsIndexes[msg.sender][_betId] = secondPartyActiveBets[msg.sender].length.sub(1);\\n\\n            emit SecondPartyParticipated(_betId, bet.firstParty, bet.secondParty);\\n        } else {\\n            success = false;\\n            cancelBet(_betId, BetCancellationReasons.Party2Timeout);\\n            (bool transferSuccess, ) = msg.sender.call{value: msg.value}(\\\"\\\");\\n            require(transferSuccess, \\\"Transfer failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev First and second partie's function for setting answer.\\n     *      If answer waiting time has expired and nobody set the answer then bet cancels.\\n     *      If one party didn't set the answer before timeframe the bet waits for mediator.\\n     */\\n    function vote(uint256 _betId, Answers _answer) external nonReentrant onlyExistingBet(_betId) {\\n        Bet storage bet = bets[_betId];\\n\\n        require(_answer != Answers.Unset, \\\"Wrong answer\\\");\\n        require(\\n            bet.state == BetStates.WaitingFirstVote || bet.state == BetStates.WaitingSecondVote,\\n            \\\"Bet isn't waiting for votes\\\"\\n        );\\n        require(msg.sender == bet.firstParty || msg.sender == bet.secondParty, \\\"You aren't participating\\\");\\n\\n        if (bet.resultTimeframe < now) {\\n            if (bet.state == BetStates.WaitingFirstVote) {\\n                cancelBet(_betId, BetCancellationReasons.VotesTimeout);\\n                return;\\n            } else {\\n                bet.state = BetStates.WaitingMediator;\\n\\n                addMediatorActiveBet(bet.mediator, _betId);\\n\\n                emit WaitingMediator(_betId, bet.mediator);\\n                return;\\n            }\\n        }\\n\\n        if (bet.firstParty == msg.sender && bet.firstPartyAnswer == Answers.Unset) {\\n            bet.firstPartyAnswer = _answer;\\n        } else if (bet.secondParty == msg.sender && bet.secondPartyAnswer == Answers.Unset) {\\n            bet.secondPartyAnswer = _answer;\\n        } else {\\n            revert(\\\"You can't change your answer\\\");\\n        }\\n        emit Voted(_betId, msg.sender, _answer);\\n\\n        if (bet.state == BetStates.WaitingFirstVote) {\\n            bet.state = BetStates.WaitingSecondVote;\\n            return;\\n        } else {\\n            if (bet.firstPartyAnswer != bet.secondPartyAnswer) {\\n                bet.state = BetStates.WaitingMediator;\\n\\n                addMediatorActiveBet(bet.mediator, _betId);\\n\\n                emit WaitingMediator(_betId, bet.mediator);\\n                return;\\n            } else {\\n                finishBet(_betId, bet.firstPartyAnswer, BetFinishReasons.AnswersMatched);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mediator's setting an answer function. If mediating time has expired\\n     *      then bet will be cancelled\\n     */\\n    function mediate(uint256 _betId, Answers _answer) external nonReentrant onlyNotContract onlyExistingBet(_betId) {\\n        Bet storage bet = bets[_betId];\\n        require(_answer != Answers.Unset, \\\"Wrong answer\\\");\\n        require(bet.state == BetStates.WaitingMediator, \\\"Bet isn't waiting for mediator\\\");\\n        require(bet.mediator == msg.sender, \\\"You can't mediate this bet\\\");\\n\\n        if (now > bet.resultTimeframe && now.sub(bet.resultTimeframe) > mediationTimeLimit) {\\n            cancelBet(_betId, BetCancellationReasons.MediatorTimeout);\\n            return;\\n        }\\n\\n        payToMediator(_betId);\\n        finishBet(_betId, _answer, BetFinishReasons.MediatorFinished);\\n    }\\n\\n    // Management handlers\\n\\n    /**\\n     * @dev Checks secondPartyTimeframe. Cancels bet if party 2 is late for participating\\n     */\\n    function party2TimeoutHandler(uint256 _betId) external nonReentrant onlyExistingBet(_betId) {\\n        Bet storage bet = bets[_betId];\\n        require(bet.state == BetStates.WaitingParty2, \\\"Bet isn't waiting for party 2\\\");\\n        require(bet.secondPartyTimeframe <= now, \\\"There is no timeout\\\");\\n        cancelBet(_betId, BetCancellationReasons.Party2Timeout);\\n    }\\n\\n    /**\\n     * @dev Checks bet's resultTimeframe. If answer waiting time has expired and nobody set the answer then bet cancels.\\n     *      If one party didn't set the answer before timeframe the bet waits for mediator.\\n     */\\n    function votesTimeoutHandler(uint256 _betId) external nonReentrant onlyExistingBet(_betId) {\\n        Bet storage bet = bets[_betId];\\n        require(\\n            bet.state == BetStates.WaitingFirstVote || bet.state == BetStates.WaitingSecondVote,\\n            \\\"Bet isn't waiting for votes\\\"\\n        );\\n        require(bet.resultTimeframe < now, \\\"There is no timeout\\\");\\n\\n        if (bet.state == BetStates.WaitingFirstVote) {\\n            cancelBet(_betId, BetCancellationReasons.VotesTimeout);\\n            return;\\n        } else {\\n            bet.state = BetStates.WaitingMediator;\\n\\n            addMediatorActiveBet(bet.mediator, _betId);\\n\\n            emit WaitingMediator(_betId, bet.mediator);\\n            return;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks mediator timeframe (resultTimeframe + mediationTimeLimit) and cancels bet if time has expired\\n     */\\n    function mediatorTimeoutHandler(uint256 _betId) external nonReentrant onlyExistingBet(_betId) {\\n        Bet storage bet = bets[_betId];\\n        require(bet.state == BetStates.WaitingMediator, \\\"Bet isn't waiting for mediator\\\");\\n        require(now > bet.resultTimeframe && now.sub(bet.resultTimeframe) > mediationTimeLimit, \\\"There is no timeout\\\");\\n        cancelBet(_betId, BetCancellationReasons.MediatorTimeout);\\n    }\\n\\n    //Internals\\n\\n    /**\\n     * @dev Finish bet and pay to the winner or cancel if tie\\n     */\\n    function finishBet(\\n        uint256 _betId,\\n        Answers _answer,\\n        BetFinishReasons _reason\\n    ) internal {\\n        Bet storage bet = bets[_betId];\\n        address payable firstParty = bet.firstParty;\\n        address payable mediator = bet.mediator;\\n        address payable secondParty = bet.secondParty;\\n        uint256 firstBetValue = bet.firstBetValue;\\n        uint256 secondBetValue = bet.secondBetValue;\\n        address payable winner;\\n        uint256 mediatorFeeValue = 0;\\n        if (_reason == BetFinishReasons.MediatorFinished) {\\n            mediatorFeeValue = calculateMediatorFee(_betId);\\n\\n            deleteMediatorActiveBet(mediator, _betId);\\n        }\\n        if (_answer == Answers.FirstPartyWins) {\\n            winner = firstParty;\\n        } else if (_answer == Answers.SecondPartyWins) {\\n            winner = secondParty;\\n        } else {\\n            if (_reason == BetFinishReasons.MediatorFinished) {\\n                cancelBet(_betId, BetCancellationReasons.MediatorCancelled);\\n            } else {\\n                cancelBet(_betId, BetCancellationReasons.Tie);\\n            }\\n            return;\\n        }\\n\\n        delete bets[_betId];\\n\\n        deleteFirstPartyActiveBet(firstParty, _betId);\\n        deleteSecondPartyActiveBet(secondParty, _betId);\\n\\n        (bool success, ) = winner.call{value: firstBetValue.add(secondBetValue).sub(mediatorFeeValue)}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit Finished(_betId, winner, _reason, firstBetValue.add(secondBetValue).sub(mediatorFeeValue));\\n        emit Completed(firstParty, secondParty, mediator, _betId);\\n    }\\n\\n    /**\\n     * @dev Cancel bet and return money to the parties.\\n     */\\n    function cancelBet(uint256 _betId, BetCancellationReasons _reason) internal {\\n        Bet storage bet = bets[_betId];\\n        uint256 mediatorFeeValue = 0;\\n        address payable mediator = bet.mediator;\\n\\n        if (_reason == BetCancellationReasons.MediatorCancelled) {\\n            mediatorFeeValue = calculateMediatorFee(_betId);\\n        }\\n\\n        if (_reason == BetCancellationReasons.MediatorTimeout) {\\n            deleteMediatorActiveBet(mediator, _betId);\\n        }\\n\\n        address payable firstParty = bet.firstParty;\\n        address payable secondParty = bet.secondParty;\\n        bool isSecondPartyParticipating = bet.state != BetStates.WaitingParty2;\\n        uint256 firstBetValue = bet.firstBetValue;\\n        uint256 secondBetValue = bet.secondBetValue;\\n\\n        delete bets[_betId];\\n        uint256 firstPartyMediatorFeeValue = mediatorFeeValue.div(2);\\n\\n        (bool success, ) = firstParty.call{value: firstBetValue.sub(firstPartyMediatorFeeValue)}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        deleteFirstPartyActiveBet(firstParty, _betId);\\n\\n        if (isSecondPartyParticipating) {\\n            (success, ) = secondParty.call{value: secondBetValue.sub(mediatorFeeValue.sub(firstPartyMediatorFeeValue))}(\\n                \\\"\\\"\\n            );\\n            require(success, \\\"Transfer failed\\\");\\n            deleteSecondPartyActiveBet(secondParty, _betId);\\n        }\\n        emit Cancelled(_betId, _reason);\\n        emit Completed(firstParty, secondParty, mediator, _betId);\\n    }\\n\\n    /**\\n     * @dev Add new active bet to mediator\\n     */\\n    function addMediatorActiveBet(address _mediator, uint256 _betId) internal {\\n        mediatorActiveBets[_mediator].push(_betId);\\n        mediatorActiveBetsIndexes[_mediator][_betId] = mediatorActiveBets[_mediator].length.sub(1);\\n    }\\n\\n    /**\\n     * @dev Delete active bet from mediator's active bet's\\n     */\\n    function deleteMediatorActiveBet(address _mediator, uint256 _betId) internal {\\n        if (mediatorActiveBets[_mediator].length == 0) return;\\n        uint256 index = mediatorActiveBetsIndexes[_mediator][_betId];\\n        delete mediatorActiveBetsIndexes[_mediator][_betId];\\n        uint256 lastIndex = mediatorActiveBets[_mediator].length.sub(1);\\n        if (lastIndex != index) {\\n            uint256 movedBet = mediatorActiveBets[_mediator][lastIndex];\\n            mediatorActiveBetsIndexes[_mediator][movedBet] = index;\\n            mediatorActiveBets[_mediator][index] = mediatorActiveBets[_mediator][lastIndex];\\n        }\\n        mediatorActiveBets[_mediator].pop();\\n    }\\n\\n    /**\\n     * @dev Delete active bet from first partie's active bet's\\n     */\\n    function deleteFirstPartyActiveBet(address _firstParty, uint256 _betId) internal {\\n        if (firstPartyActiveBets[_firstParty].length == 0) return;\\n        uint256 index = firstPartyActiveBetsIndexes[_firstParty][_betId];\\n        delete firstPartyActiveBetsIndexes[_firstParty][_betId];\\n        uint256 lastIndex = firstPartyActiveBets[_firstParty].length.sub(1);\\n        if (lastIndex != index) {\\n            uint256 movedBet = firstPartyActiveBets[_firstParty][lastIndex];\\n            firstPartyActiveBetsIndexes[_firstParty][movedBet] = index;\\n            firstPartyActiveBets[_firstParty][index] = firstPartyActiveBets[_firstParty][lastIndex];\\n        }\\n        firstPartyActiveBets[_firstParty].pop();\\n    }\\n\\n    /**\\n     * @dev Delete active bet from second partie's active bet's\\n     */\\n    function deleteSecondPartyActiveBet(address _secondParty, uint256 _betId) internal {\\n        if (secondPartyActiveBets[_secondParty].length == 0) return;\\n        uint256 index = secondPartyActiveBetsIndexes[_secondParty][_betId];\\n        delete secondPartyActiveBetsIndexes[_secondParty][_betId];\\n        uint256 lastIndex = secondPartyActiveBets[_secondParty].length.sub(1);\\n        if (lastIndex != index) {\\n            uint256 movedBet = secondPartyActiveBets[_secondParty][lastIndex];\\n            secondPartyActiveBetsIndexes[_secondParty][movedBet] = index;\\n            secondPartyActiveBets[_secondParty][index] = secondPartyActiveBets[_secondParty][lastIndex];\\n        }\\n        secondPartyActiveBets[_secondParty].pop();\\n    }\\n\\n    /**\\n     * @dev Transfers mediator fee to the mediator\\n     */\\n    function payToMediator(uint256 _betId) internal {\\n        Bet storage bet = bets[_betId];\\n        uint256 value = calculateMediatorFee(_betId);\\n        (bool success, ) = bet.mediator.call{value: value}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultMediatorFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_defaultMediator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum SocialBets.BetCancellationReasons\",\"name\":\"_reason\",\"type\":\"uint8\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstParty\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_secondParty\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_mediator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum SocialBets.BetFinishReasons\",\"name\":\"_reason\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Finished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstParty\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_secondParty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_mediator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mediatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_firstBetValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_secondBetValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_secondPartyTimeframe\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_resultTimeframe\",\"type\":\"uint256\"}],\"name\":\"NewBetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstParty\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_secondParty\",\"type\":\"address\"}],\"name\":\"SecondPartyParticipated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum SocialBets.Answers\",\"name\":\"_answer\",\"type\":\"uint8\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_mediator\",\"type\":\"address\"}],\"name\":\"WaitingMediator\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PERCENTAGE_DIVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEDIATOR_FEE_DIVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"firstParty\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"secondParty\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstBetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondBetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondPartyTimeframe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultTimeframe\",\"type\":\"uint256\"},{\"internalType\":\"enum SocialBets.BetStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum SocialBets.Answers\",\"name\":\"firstPartyAnswer\",\"type\":\"uint8\"},{\"internalType\":\"enum SocialBets.Answers\",\"name\":\"secondPartyAnswer\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_firstParty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_firstBetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondBetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondPartyTimeframe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resultTimeframe\",\"type\":\"uint256\"}],\"name\":\"calculateBetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstBetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondBetValue\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"calculateMediatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mediatorFeeValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_secondParty\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_mediator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mediatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstBetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondBetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondPartyTimeframe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resultTimeframe\",\"type\":\"uint256\"}],\"name\":\"createBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMediator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMediatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"firstPartyActiveBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"firstPartyActiveBetsIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstParty\",\"type\":\"address\"}],\"name\":\"getFirstPartyActiveBets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"betsIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mediator\",\"type\":\"address\"}],\"name\":\"getMediatorActiveBets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"betsIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secondParty\",\"type\":\"address\"}],\"name\":\"getSecondPartyActiveBets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"betsIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"isBetExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"enum SocialBets.Answers\",\"name\":\"_answer\",\"type\":\"uint8\"}],\"name\":\"mediate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediationTimeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mediatorActiveBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mediatorActiveBetsIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"mediatorTimeoutHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"participate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"party2TimeoutHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"secondPartyActiveBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"secondPartyActiveBetsIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_defaultMediator\",\"type\":\"address\"}],\"name\":\"setDefaultMediator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultMediatorFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultMediatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mediationTimeLimit\",\"type\":\"uint256\"}],\"name\":\"setMediationTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBetValue\",\"type\":\"uint256\"}],\"name\":\"setMinBetValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"enum SocialBets.Answers\",\"name\":\"_answer\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"votesTimeoutHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SocialBets","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000e072da84000c0565f85ed4893794dd5991e6b085","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://12332fe89896e10ccf35de62810d982fdf52863ac6ed3bf0e4f81b9246ecddb0"}]}