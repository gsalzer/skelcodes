{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.3;\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface Token {\r\n    function tokensSold(address buyer, uint256 amount) external  returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function burn(uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract VRGSale is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public psalePrice;\r\n    uint256 public csalePrice;\r\n    uint256 public totalSold;\r\n    address public tokenAddress;\r\n    address payable public walletAddress;\r\n    uint256 public crowdSaleStart = 1609002000;\r\n    uint256 public crowdSaleEnd = 1609693200;\r\n    event TokensSold(address indexed to, uint256 amount);\r\n    \r\n    constructor() {\r\n        csalePrice = uint256(30000000000000);\r\n        walletAddress = 0x0296dfbfF01C81FA7E2eB4D6cE035e555ce62Fe4;\r\n        tokenAddress = address(0x0);\r\n    }\r\n    \r\n    receive() external payable {\r\n        buy();\r\n    }\r\n    \r\n    function setToken(address _tokenAddress) onlyOwner public {\r\n        require(tokenAddress == address(0x0), \"Token is set\");\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    function buy() public payable {\r\n        require(((block.timestamp > crowdSaleStart) && (block.timestamp < crowdSaleEnd)), \"Contract is not selling tokens\");\r\n        uint256 weiValue = msg.value;\r\n        require(weiValue >= (10 ** 17));\r\n        require(weiValue <= 15 ether, \"Maximum amount on crowdsale is 15ETH\");\r\n        uint256 amount = 0;\r\n        amount = weiValue.div(csalePrice)  * (1 ether);\r\n        Token token = Token(tokenAddress);\r\n        require(walletAddress.send(weiValue));\r\n        require(token.tokensSold(msg.sender, amount));\r\n        totalSold += amount;\r\n        emit TokensSold(msg.sender, amount);\r\n    }\r\n    \r\n    function burnUnsold() onlyOwner public {\r\n        require(block.timestamp > crowdSaleEnd);\r\n        Token token = Token(tokenAddress);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        token.burn(amount);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnUnsold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"csalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VRGSale","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f1be0ba616d79a4740b08544f312a4a2af1f4a795e66e21bd9ce1eaf42aeddb5"}]}