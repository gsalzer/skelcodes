{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n}\r\n\r\ninterface IORACLE {\r\n  function price0Last(address _pair) external view returns (uint amountOut);\r\n  function update(address _pair) external;\r\n  function isUpdateRequired(address _pair) external view returns(bool);\r\n  function initialize() external;\r\n  function addPair(address _pair, uint _startTime) external;\r\n  function nextUpdateAt(address _pair) external view returns(uint);\r\n  function PERIOD() external view returns(uint);\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() internal {\r\n    owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), owner);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(owner, address(0));\r\n    owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract UpDownMarket is Ownable, ReentrancyGuard {\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint public constant MIN_BID_TIME = 1 minutes;\r\n\r\n  IORACLE public oracle;\r\n  address public oraclePair;\r\n  address public feeRecipient;\r\n\r\n  uint public latestBidTime = 30 minutes; // before resolution\r\n\r\n  mapping (uint => uint) public resolvedTo; // per epoch: 1 = up, 2 = down\r\n  mapping (uint => uint) public totalSharesUp; // per epoch\r\n  mapping (uint => uint) public totalSharesDown; // per epoch\r\n  mapping (uint => uint) public purchasedEpoch; // per epoch\r\n  mapping (uint => mapping (address => uint)) public purchasedOfUp; // epoch[account]\r\n  mapping (uint => mapping (address => uint)) public purchasedOfDown; // epoch[account]\r\n  mapping (uint => mapping (address => uint)) public sharesOfUp; // epoch[account]\r\n  mapping (uint => mapping (address => uint)) public sharesOfDown; // epoch[account]\r\n\r\n  // For the sake of simplicity, purchasedOf* and sharesOfUp* had different values in the previous implementation\r\n  // but are equal in this implementation\r\n\r\n  uint public currentEpoch = 0;\r\n  uint public lastTWAP;\r\n  uint public feeBps = 0;\r\n  uint public maxSupply = 200e18; // ETH\r\n\r\n  modifier checkTime() {\r\n    require(isTimeOpen(block.timestamp), \"UpDownMarket: buying is closed\");\r\n    _;\r\n  }\r\n\r\n  modifier enforceLimits() {\r\n    _;\r\n    require(purchasedEpoch[currentEpoch] <= maxSupply, \"UpDownMarket: maxSupply reached\");\r\n  }\r\n\r\n  constructor(IORACLE _oracle, address _oraclePair, uint _startTime) public {\r\n    oracle = _oracle;\r\n    oraclePair = _oraclePair;\r\n    oracle.initialize();\r\n    oracle.addPair(oraclePair, _startTime);\r\n    lastTWAP = oracle.price0Last(oraclePair);\r\n  }\r\n\r\n  function buyUp(uint _minShares) public payable checkTime enforceLimits nonReentrant {\r\n    _mintUp(msg.sender, currentEpoch, msg.value, _minShares);\r\n  }\r\n\r\n  function buyDown(uint _minShares) public payable checkTime enforceLimits nonReentrant {\r\n    _mintDown(msg.sender, currentEpoch, msg.value, _minShares);\r\n  }\r\n\r\n  function claim(uint _epoch) public nonReentrant {\r\n    uint transferAmount = winAmount(_epoch, msg.sender);\r\n    require(transferAmount > 0, \"UpDownMarket: not a winner\");\r\n\r\n    uint fee = transferAmount.mul(feeBps).div(10000);\r\n    _sendEth(feeRecipient, _epoch, fee);\r\n    transferAmount = transferAmount.sub(fee);\r\n\r\n    _sendEth(msg.sender, _epoch, transferAmount);\r\n    _burnAll(msg.sender, _epoch);\r\n  }\r\n\r\n  function resolve() public {\r\n    require(oracle.isUpdateRequired(oraclePair), \"UpDownMarket: too early\");\r\n    \r\n    oracle.update(oraclePair);\r\n\r\n    uint currentTWAP = oracle.price0Last(oraclePair);\r\n\r\n    if (currentTWAP > lastTWAP) {\r\n      resolvedTo[currentEpoch] = 1;\r\n      _claimDustUp(currentEpoch);\r\n\r\n    } else if (currentTWAP < lastTWAP) {\r\n      resolvedTo[currentEpoch] = 2;\r\n      _claimDustDown(currentEpoch);\r\n    \r\n    } else {\r\n      revert(\"UpDownMarket: twap not changed yet\");\r\n    }\r\n\r\n    currentEpoch = currentEpoch.add(1);\r\n    lastTWAP = currentTWAP;\r\n  }\r\n\r\n  function setFeeBps(uint _value) public onlyOwner {\r\n    feeBps = _value;\r\n  }\r\n\r\n  function setFeeRecipent(address _feeRecipient) public onlyOwner {\r\n    feeRecipient = _feeRecipient;\r\n  }\r\n\r\n  function setLatestBidTime(uint _latestBidTime) public onlyOwner {\r\n    require(latestBidTime > MIN_BID_TIME, \"UpDownMarket: latestBidTime too short\");\r\n    latestBidTime = _latestBidTime;\r\n  }\r\n\r\n  function setMaxSupply(uint _maxSupply) public onlyOwner {\r\n    maxSupply = _maxSupply;\r\n  }\r\n\r\n  function totalSupplyEpoch(uint _epoch) public view returns(uint) {\r\n    return totalSharesUp[_epoch].add(totalSharesDown[_epoch]);\r\n  }\r\n\r\n  function winAmount(uint _epoch, address _account) public view returns(uint) {\r\n\r\n    // Up won\r\n    if (resolvedTo[_epoch] == 1) {\r\n      if (totalSharesUp[_epoch] == 0) {\r\n        return 0;\r\n      } else {\r\n        return purchasedEpoch[_epoch].mul(sharesOfUp[_epoch][_account]).div(totalSharesUp[_epoch]);\r\n      }\r\n\r\n    // Down won\r\n    } else if (resolvedTo[_epoch] == 2) {\r\n      if (totalSharesDown[_epoch] == 0) {\r\n        return 0;\r\n      } else {\r\n        return purchasedEpoch[_epoch].mul(sharesOfDown[_epoch][_account]).div(totalSharesDown[_epoch]);\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Buying closes latestBidTime seconds before resolution\r\n  function isTimeOpen(uint _timestamp) public view returns(bool) {\r\n    return block.timestamp < oracle.nextUpdateAt(oraclePair).sub(latestBidTime);\r\n  }\r\n\r\n  // UP wins but there is nobody to collect the winnings = claim as fees\r\n  function _claimDustUp(uint _epoch) internal {\r\n    if (totalSharesUp[_epoch] == 0) {\r\n      _sendEth(feeRecipient, _epoch, purchasedEpoch[_epoch]);\r\n      purchasedEpoch[_epoch] = 0;\r\n    }\r\n  }\r\n\r\n  // DOWN wins but there is nobody to collect the winnings = claim as fees\r\n  function _claimDustDown(uint _epoch) internal {\r\n    if (totalSharesDown[_epoch] == 0) {\r\n      _sendEth(feeRecipient, _epoch, purchasedEpoch[_epoch]);\r\n      purchasedEpoch[_epoch] = 0;\r\n    }\r\n  }\r\n\r\n  function _mintUp(address _account, uint _epoch, uint _amount, uint _minShares) internal {\r\n    uint shares = _shares(_amount, _minShares);\r\n    purchasedOfUp[_epoch][_account] = purchasedOfUp[_epoch][_account].add(_amount);\r\n    purchasedEpoch[_epoch] = purchasedEpoch[_epoch].add(_amount);\r\n    totalSharesUp[_epoch] = totalSharesUp[_epoch].add(shares);\r\n    sharesOfUp[_epoch][_account] = sharesOfUp[_epoch][_account].add(shares);\r\n  }\r\n\r\n  function _mintDown(address _account, uint _epoch, uint _amount, uint _minShares) internal {\r\n    uint shares = _shares(_amount, _minShares);\r\n    purchasedOfDown[_epoch][_account] = purchasedOfDown[_epoch][_account].add(_amount);\r\n    purchasedEpoch[_epoch] = purchasedEpoch[_epoch].add(_amount);\r\n    totalSharesDown[_epoch] = totalSharesDown[_epoch].add(shares);\r\n    sharesOfDown[_epoch][_account] = sharesOfDown[_epoch][_account].add(shares);\r\n  }\r\n\r\n  function _shares(uint _amount, uint _minShares) internal view returns(uint) {\r\n    uint shares = _amount;\r\n    require(shares > _minShares, \"UpDownMarket: shares > _minShares\");\r\n    return shares;\r\n  }\r\n\r\n  function _burnUp(address _account, uint _epoch, uint _amount) internal {\r\n    totalSharesUp[_epoch] = totalSharesUp[_epoch].sub(_amount);\r\n    sharesOfUp[_epoch][_account] = sharesOfUp[_epoch][_account].sub(_amount);\r\n  }\r\n\r\n  function _burnDown(address _account, uint _epoch, uint _amount) internal {\r\n    totalSharesDown[_epoch] = totalSharesDown[_epoch].sub(_amount);\r\n    sharesOfDown[_epoch][_account] = sharesOfDown[_epoch][_account].sub(_amount);\r\n  }\r\n\r\n  function _burnAll(address _account, uint _epoch) internal {\r\n    _burnUp(_account, _epoch, sharesOfUp[_epoch][_account]);\r\n    _burnDown(_account, _epoch, sharesOfDown[_epoch][_account]);\r\n  }\r\n\r\n  function _sendEth(address _recipient, uint _epoch, uint _amount) internal {\r\n    purchasedEpoch[_epoch] = purchasedEpoch[_epoch].sub(_amount);\r\n    address(_recipient).call { value: _amount } (new bytes(0));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IORACLE\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oraclePair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_BID_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minShares\",\"type\":\"uint256\"}],\"name\":\"buyDown\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minShares\",\"type\":\"uint256\"}],\"name\":\"buyUp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isTimeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBidTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IORACLE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedOfDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedOfUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolvedTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_latestBidTime\",\"type\":\"uint256\"}],\"name\":\"setLatestBidTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesOfDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesOfUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSharesDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSharesUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"totalSupplyEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"winAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UpDownMarket","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000013252c8bf26647ceccd70a7dd49cf64e70ad3bf000000000000000000000000066e33d2605c5fb25ebb7cd7528e7997b0afa55e8000000000000000000000000000000000000000000000000000000005fd32700","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dbea95a1a3336c7321fa2d6f12be1bbef740f3b40cccc23dec00639f5e05f6de"}]}