{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Protocol adapter abstract contract.\\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\nabstract contract ProtocolAdapter {\\n\\n    /**\\n     * @dev MUST return amount and type of the given token\\n     * locked on the protocol by the given account.\\n     */\\n    function getBalance(\\n        address token,\\n        address account\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/compound/CompoundAssetAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport { ERC20 } from \\\"../../shared/ERC20.sol\\\";\\nimport { ProtocolAdapter } from \\\"../ProtocolAdapter.sol\\\";\\n\\n\\n/**\\n * @title Asset adapter for Compound protocol.\\n * @dev Implementation of ProtocolAdapter abstract contract.\\n * Base contract for Compound Asset interactive adapter.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ncontract CompoundAssetAdapter is ProtocolAdapter {\\n\\n    /**\\n     * @return Amount of CTokens held by the given account.\\n     * @dev Implementation of ProtocolAdapter abstract contract function.\\n     */\\n    function getBalance(\\n        address token,\\n        address account\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return ERC20(token).balanceOf(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/compound/CompoundRegistry.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\n\\n\\n/**\\n * @title Registry for Compound contracts.\\n * @dev Implements the only function - getCToken(address).\\n * @notice Call getCToken(token) function and get address\\n * of CToken contract for the given token address.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ncontract CompoundRegistry {\\n\\n    mapping (address => address) internal cTokens;\\n\\n    constructor() {\\n        cTokens[0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359] = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\\n        cTokens[0x1985365e9f78359a9B6AD760e32412f4a445E862] = 0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1;\\n        cTokens[0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE] = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n        cTokens[0x6B175474E89094C44Da98b954EedeAC495271d0F] = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n        cTokens[0x0D8775F648430679A709E98d2b0Cb6250d2887EF] = 0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E;\\n        cTokens[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4;\\n        cTokens[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\\n        cTokens[0xE41d2489571d322189246DaFA5ebDe1F4699F498] = 0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407;\\n    }\\n\\n    function getCToken(address token) external view returns (address) {\\n        return cTokens[token];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/interactiveAdapters/InteractiveAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport { ProtocolAdapter } from \\\"../adapters/ProtocolAdapter.sol\\\";\\nimport { TokenAmount, AmountType } from \\\"../shared/Structs.sol\\\";\\nimport { ERC20 } from \\\"../shared/ERC20.sol\\\";\\n\\n\\n/**\\n * @title Base contract for interactive protocol adapters.\\n * @dev deposit() and withdraw() functions MUST be implemented\\n * as well as all the functions from ProtocolAdapter abstract contract.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\nabstract contract InteractiveAdapter is ProtocolAdapter {\\n\\n    uint256 internal constant DELIMITER = 1e18;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @dev The function must deposit assets to the protocol.\\n     * @return MUST return assets to be sent back to the `msg.sender`.\\n     */\\n    function deposit(\\n        TokenAmount[] calldata tokenAmounts,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n        virtual\\n        returns (address[] memory);\\n\\n    /**\\n     * @dev The function must withdraw assets from the protocol.\\n     * @return MUST return assets to be sent back to the `msg.sender`.\\n     */\\n    function withdraw(\\n        TokenAmount[] calldata tokenAmounts,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n        virtual\\n        returns (address[] memory);\\n\\n    function getAbsoluteAmountDeposit(\\n        TokenAmount calldata tokenAmount\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        address token = tokenAmount.token;\\n        uint256 amount = tokenAmount.amount;\\n        AmountType amountType = tokenAmount.amountType;\\n\\n        require(\\n            amountType == AmountType.Relative || amountType == AmountType.Absolute,\\n            \\\"IA: bad amount type\\\"\\n        );\\n        if (amountType == AmountType.Relative) {\\n            require(amount <= DELIMITER, \\\"IA: bad amount\\\");\\n\\n            uint256 balance;\\n            if (token == ETH) {\\n                balance = address(this).balance;\\n            } else {\\n                balance = ERC20(token).balanceOf(address(this));\\n            }\\n\\n            if (amount == DELIMITER) {\\n                return balance;\\n            } else {\\n                return mul(balance, amount) / DELIMITER;\\n            }\\n        } else {\\n            return amount;\\n        }\\n    }\\n\\n    function getAbsoluteAmountWithdraw(\\n        TokenAmount calldata tokenAmount\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        address token = tokenAmount.token;\\n        uint256 amount = tokenAmount.amount;\\n        AmountType amountType = tokenAmount.amountType;\\n\\n        require(\\n            amountType == AmountType.Relative || amountType == AmountType.Absolute,\\n            \\\"IA: bad amount type\\\"\\n        );\\n        if (amountType == AmountType.Relative) {\\n            require(amount <= DELIMITER, \\\"IA: bad amount\\\");\\n\\n            uint256 balance = getBalance(token, address(this));\\n            if (amount == DELIMITER) {\\n                return balance;\\n            } else {\\n                return mul(balance, amount) / DELIMITER;\\n            }\\n        } else {\\n            return amount;\\n        }\\n    }\\n\\n    function mul(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"IA: mul overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/interactiveAdapters/compound/CompoundAssetInteractiveAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport { ERC20 } from \\\"../../shared/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"../../shared/SafeERC20.sol\\\";\\nimport { TokenAmount } from \\\"../../shared/Structs.sol\\\";\\nimport { CompoundAssetAdapter } from \\\"../../adapters/compound/CompoundAssetAdapter.sol\\\";\\nimport { CompoundRegistry } from \\\"../../adapters/compound/CompoundRegistry.sol\\\";\\nimport { InteractiveAdapter } from \\\"../InteractiveAdapter.sol\\\";\\nimport { CToken } from \\\"../../interfaces/CToken.sol\\\";\\nimport { CEther } from \\\"../../interfaces/CEther.sol\\\";\\n\\n\\n/**\\n * @title Interactive adapter for Compound protocol.\\n * @dev Implementation of InteractiveAdapter abstract contract.\\n */\\ncontract CompoundAssetInteractiveAdapter is InteractiveAdapter, CompoundAssetAdapter {\\n    using SafeERC20 for ERC20;\\n\\n    address internal constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    address internal constant REGISTRY = 0xE6881a7d699d3A350Ce5bba0dbD59a9C36778Cb7;\\n\\n    /**\\n     * @notice Deposits tokens to the Compound protocol.\\n     * @param tokenAmounts Array with one element - TokenAmount struct with\\n     * underlying token address, underlying token amount to be deposited, and amount type.\\n     * @return tokensToBeWithdrawn Array with two elements - cToken and COMP addresses.\\n     * @dev Implementation of InteractiveAdapter function.\\n     */\\n    function deposit(\\n        TokenAmount[] calldata tokenAmounts,\\n        bytes calldata\\n    )\\n        external\\n        payable\\n        override\\n        returns (address[] memory tokensToBeWithdrawn)\\n    {\\n        require(tokenAmounts.length == 1, \\\"CAIA: should be 1 tokenAmount[1]\\\");\\n\\n        address token = tokenAmounts[0].token;\\n        uint256 amount = getAbsoluteAmountDeposit(tokenAmounts[0]);\\n\\n        tokensToBeWithdrawn = new address[](2);\\n        tokensToBeWithdrawn[0] = COMP;\\n\\n        if (token == ETH) {\\n            tokensToBeWithdrawn[1] = CETH;\\n\\n            CEther(CETH).mint{value: amount}();\\n        } else {\\n            address cToken = CompoundRegistry(REGISTRY).getCToken(token);\\n            tokensToBeWithdrawn[1] = cToken;\\n\\n            ERC20(token).safeApprove(cToken, amount, \\\"CAIA\\\");\\n            require(CToken(cToken).mint(amount) == 0, \\\"CAIA: deposit failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from the Compound protocol.\\n     * @param tokenAmounts Array with one element - TokenAmount struct with\\n     * cToken address, cToken amount to be redeemed, and amount type.\\n     * @return tokensToBeWithdrawn Array with two elements - underlying token and COMP addresses.\\n     * @dev Implementation of InteractiveAdapter function.\\n     */\\n    function withdraw(\\n        TokenAmount[] calldata tokenAmounts,\\n        bytes calldata\\n    )\\n        external\\n        payable\\n        override\\n        returns (address[] memory tokensToBeWithdrawn)\\n    {\\n        require(tokenAmounts.length == 1, \\\"CAIA: should be 1 tokenAmount[2]\\\");\\n\\n        address token = tokenAmounts[0].token;\\n        uint256 amount = getAbsoluteAmountWithdraw(tokenAmounts[0]);\\n\\n        tokensToBeWithdrawn = new address[](2);\\n        tokensToBeWithdrawn[0] = COMP;\\n\\n        if (token == CETH) {\\n            tokensToBeWithdrawn[1] = ETH;\\n        } else {\\n            tokensToBeWithdrawn[1] = CToken(token).underlying();\\n        }\\n\\n        require(CToken(token).redeem(amount) == 0, \\\"CAIA: withdraw failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/interfaces/CEther.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\n\\n\\n/**\\n * @dev CEther contract interface.\\n * The CEther contract is available here\\n * github.com/compound-finance/compound-protocol/blob/master/contracts/CEther.sol.\\n */\\ninterface CEther {\\n    function mint() external payable;\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/interfaces/CToken.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\n\\n\\n/**\\n * @dev CToken contract interface.\\n * The CToken contract is available here\\n * github.com/compound-finance/compound-protocol/blob/master/contracts/CToken.sol.\\n */\\ninterface CToken {\\n    function borrowBalanceStored(address) external view returns (uint256);\\n    function exchangeRateStored() external view returns (uint256);\\n    function underlying() external view returns (address);\\n    function mint(uint256) external returns (uint256);\\n    function redeem(uint256) external returns (uint256);\\n    function borrowIndex() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/shared/ERC20.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ERC20 {\\n    function approve(address, uint256) external returns (bool);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/shared/SafeERC20.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token contract\\n * returns false). Tokens that return no value (and instead revert or throw on failure)\\n * are also supported, non-reverting calls are assumed to be successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 value,\\n        string memory location\\n    )\\n        internal\\n    {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.transfer.selector,\\n                to,\\n                value\\n            ),\\n            \\\"transfer\\\",\\n            location\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        string memory location\\n    )\\n        internal\\n    {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.transferFrom.selector,\\n                from,\\n                to,\\n                value\\n            ),\\n            \\\"transferFrom\\\",\\n            location\\n        );\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address spender,\\n        uint256 value,\\n        string memory location\\n    )\\n        internal\\n    {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: bad approve call\\\"\\n        );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                value\\n            ),\\n            \\\"approve\\\",\\n            location\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\\n     * relaxing the requirement on the return value: the return value is optional\\n     * (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     * @param location Location of the call (for debug).\\n     */\\n    function callOptionalReturn(\\n        ERC20 token,\\n        bytes memory data,\\n        string memory functionName,\\n        string memory location\\n    )\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking\\n        // mechanism, since we're implementing it ourselves.\\n\\n        // We implement two-steps call as callee is a contract is a responsibility of a caller.\\n        //  1. The call itself is made, and success asserted\\n        //  2. The return value is decoded, which in turn checks the size of the returned data.\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(\\n            success,\\n            string(\\n                abi.encodePacked(\\n                    \\\"SafeERC20: \\\",\\n                    functionName,\\n                    \\\" failed in \\\",\\n                    location\\n                )\\n            )\\n        );\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                string(\\n                    abi.encodePacked(\\n                        \\\"SafeERC20: \\\",\\n                        functionName,\\n                        \\\" returned false in \\\",\\n                        location\\n                    )\\n                )\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/shared/Structs.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n\\n// The struct consists of AbsoluteTokenAmount structs for\\n// (base) token and its underlying tokens (if any).\\nstruct FullAbsoluteTokenAmount {\\n    AbsoluteTokenAmountMeta base;\\n    AbsoluteTokenAmountMeta[] underlying;\\n}\\n\\n\\n// The struct consists of AbsoluteTokenAmount struct\\n// with token address and absolute amount\\n// and ERC20Metadata struct with ERC20-style metadata.\\n// NOTE: 0xEeee...EEeE address is used for ETH.\\nstruct AbsoluteTokenAmountMeta {\\n    AbsoluteTokenAmount absoluteTokenAmount;\\n    ERC20Metadata erc20metadata;\\n}\\n\\n\\n// The struct consists of ERC20-style token metadata.\\nstruct ERC20Metadata {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n}\\n\\n\\n// The struct consists of protocol adapter's name\\n// and array of AbsoluteTokenAmount structs\\n// with token addresses and absolute amounts.\\nstruct AdapterBalance {\\n    bytes32 protocolAdapterName;\\n    AbsoluteTokenAmount[] absoluteTokenAmounts;\\n}\\n\\n\\n// The struct consists of token address\\n// and its absolute amount.\\nstruct AbsoluteTokenAmount {\\n    address token;\\n    uint256 amount;\\n}\\n\\n\\n// The struct consists of token address,\\n// and price per full share (1e18).\\nstruct Component {\\n    address token;\\n    uint256 rate;\\n}\\n\\n\\n//=============================== Interactive Adapters Structs ====================================\\n\\n\\nstruct TransactionData {\\n    Action[] actions;\\n    TokenAmount[] inputs;\\n    Fee fee;\\n    AbsoluteTokenAmount[] requiredOutputs;\\n    uint256 nonce;\\n}\\n\\n\\nstruct Action {\\n    bytes32 protocolAdapterName;\\n    ActionType actionType;\\n    TokenAmount[] tokenAmounts;\\n    bytes data;\\n}\\n\\n\\nstruct TokenAmount {\\n    address token;\\n    uint256 amount;\\n    AmountType amountType;\\n}\\n\\n\\nstruct Fee {\\n    uint256 share;\\n    address beneficiary;\\n}\\n\\n\\nenum ActionType { None, Deposit, Withdraw }\\n\\n\\nenum AmountType { None, Relative, Absolute }\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AmountType\",\"name\":\"amountType\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensToBeWithdrawn\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AmountType\",\"name\":\"amountType\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensToBeWithdrawn\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CompoundAssetInteractiveAdapter","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}