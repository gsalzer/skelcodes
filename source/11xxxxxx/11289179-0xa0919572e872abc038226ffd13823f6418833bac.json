{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/token/ISimpleToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/** Interface for any Siren SimpleToken\r\n */\r\ninterface ISimpleToken is IERC20 {\r\n    function initialize(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 amount) external;\r\n\r\n    function selfDestructToken(address payable refundAddress) external;\r\n}\r\n\r\n// File: contracts/market/IMarket.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/** Interface for any Siren Market\r\n */\r\ninterface IMarket {\r\n    /** Tracking the different states of the market */\r\n    enum MarketState {\r\n        /**\r\n         * New options can be created\r\n         * Redemption token holders can redeem their options for collateral\r\n         * Collateral token holders can't do anything\r\n         */\r\n        OPEN,\r\n        /**\r\n         * No new options can be created\r\n         * Redemption token holders can't do anything\r\n         * Collateral tokens holders can re-claim their collateral\r\n         */\r\n        EXPIRED,\r\n        /**\r\n         * 180 Days after the market has expired, it will be set to a closed state.\r\n         * Once it is closed, the owner can sweeep any remaining tokens and destroy the contract\r\n         * No new options can be created\r\n         * Redemption token holders can't do anything\r\n         * Collateral tokens holders can't do anything\r\n         */\r\n        CLOSED\r\n    }\r\n\r\n    /** Specifies the manner in which options can be redeemed */\r\n    enum MarketStyle {\r\n        /**\r\n         * Options can only be redeemed 30 minutes prior to the option's expiration date\r\n         */\r\n        EUROPEAN_STYLE,\r\n        /**\r\n         * Options can be redeemed any time between option creation\r\n         * and the option's expiration date\r\n         */\r\n        AMERICAN_STYLE\r\n    }\r\n\r\n    function state() external view returns (MarketState);\r\n\r\n    function mintOptions(uint256 collateralAmount) external;\r\n\r\n    function calculatePaymentAmount(uint256 collateralAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calculateFee(uint256 amount, uint16 basisPoints)\r\n        external\r\n        pure\r\n        returns (uint256);\r\n\r\n    function exerciseOption(uint256 collateralAmount) external;\r\n\r\n    function claimCollateral(uint256 collateralAmount) external;\r\n\r\n    function closePosition(uint256 collateralAmount) external;\r\n\r\n    function recoverTokens(IERC20 token) external;\r\n\r\n    function selfDestructMarket(address payable refundAddress) external;\r\n\r\n    function updateRestrictedMinter(address _restrictedMinter) external;\r\n\r\n    function marketName() external view returns (string memory);\r\n\r\n    function priceRatio() external view returns (uint256);\r\n\r\n    function expirationDate() external view returns (uint256);\r\n\r\n    function collateralToken() external view returns (IERC20);\r\n\r\n    function wToken() external view returns (ISimpleToken);\r\n\r\n    function bToken() external view returns (ISimpleToken);\r\n\r\n    function updateImplementation(address newImplementation) external;\r\n\r\n    function initialize(\r\n        string calldata _marketName,\r\n        address _collateralToken,\r\n        address _paymentToken,\r\n        MarketStyle _marketStyle,\r\n        uint256 _priceRatio,\r\n        uint256 _expirationDate,\r\n        uint16 _exerciseFeeBasisPoints,\r\n        uint16 _closeFeeBasisPoints,\r\n        uint16 _claimFeeBasisPoints,\r\n        address _tokenImplementation\r\n    ) external;\r\n}\r\n\r\n// File: contracts/proxy/Proxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Proxy {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n    uint256 constant PROXY_MEM_SLOT = 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n\r\n    constructor(address contractLogic) public {\r\n        // Verify a valid address was passed in\r\n        require(contractLogic != address(0), \"Contract Logic cannot be 0x0\");\r\n\r\n        // save the code address\r\n        assembly {\r\n            // solium-disable-line\r\n            sstore(PROXY_MEM_SLOT, contractLogic)\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        assembly {\r\n            // solium-disable-line\r\n            let contractLogic := sload(PROXY_MEM_SLOT)\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0x0, calldatasize())\r\n            let success := delegatecall(\r\n                gas(),\r\n                contractLogic,\r\n                ptr,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            let retSz := returndatasize()\r\n            returndatacopy(ptr, 0, retSz)\r\n            switch success\r\n                case 0 {\r\n                    revert(ptr, retSz)\r\n                }\r\n                default {\r\n                    return(ptr, retSz)\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/proxy/Proxiable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n    uint256 constant PROXY_MEM_SLOT = 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n\r\n    event CodeAddressUpdated(address newAddress);\r\n\r\n    function _updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(PROXY_MEM_SLOT) == Proxiable(newAddress).proxiableUUID(),\r\n            \"Not compatible\"\r\n        );\r\n        assembly {\r\n            // solium-disable-line\r\n            sstore(PROXY_MEM_SLOT, newAddress)\r\n        }\r\n\r\n        emit CodeAddressUpdated(newAddress);\r\n    }\r\n\r\n    function getLogicAddress() public view returns (address logicAddress) {\r\n        assembly {\r\n            // solium-disable-line\r\n            logicAddress := sload(PROXY_MEM_SLOT)\r\n        }\r\n    }\r\n\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return bytes32(PROXY_MEM_SLOT);\r\n    }\r\n}\r\n\r\n// File: contracts/market/Market.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A market is an instance of an options contract market.\r\n * A single market represents a specific option definition with a token pair, expiration, and strike price.\r\n * A market has 2 states:\r\n * 0) OPEN - The options contract is open and new option tokens can be minted.  Holders of bTokens can exercise the tokens for collateral with payment.\r\n * 1) EXPIRED - The options contract cannot mint any new options.  bTokens cannot be exercised.  wTokens can redeem collateral and any payments.\r\n * All parameters must be set by the Initialize function before the option market is live.\r\n *\r\n * This contract is ownable.  By default, the address that deployed it will be the owner.\r\n */\r\ncontract Market is IMarket, OwnableUpgradeSafe, Proxiable {\r\n    /** Use safe ERC20 functions for any token transfers since people don't follow the ERC20 standard */\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /** @dev the display name of the market - should be in the form of payment.collateral.expire.option_type.strike */\r\n    string public override marketName;\r\n    /** @dev the collateral token that must be locked up in this contract until expiry or redemption */\r\n    IERC20 public override collateralToken;\r\n    /** @dev the token paid to exercise an option */\r\n    IERC20 public paymentToken;\r\n    /** @dev the manner in which the options are redeemed */\r\n    MarketStyle public marketStyle;\r\n\r\n    /**\r\n     * @dev the price ratio for base units of the payment token to the collateral token\r\n     * Instead of storing the strike price, this allows easy partial redemption calcs\r\n     * The ratio will be denomitated in 10**18 == 1 -> this allows a ratio below and above 1\r\n     * E.g. A strike price of 2000 would be \"2000 * 10**18\"... a strike price of 0.5 would be \"5 * 10**17\" (assuming equal token decimals)\r\n     */\r\n    uint256 public override priceRatio;\r\n    /** @dev the date where the option expires (seconds since epoch) */\r\n    uint256 public override expirationDate;\r\n\r\n    /** @dev the fee deducted when options are exercised */\r\n    uint16 public exerciseFeeBasisPoints;\r\n    /** @dev the fee deducted when options are closed */\r\n    uint16 public closeFeeBasisPoints;\r\n    /** @dev the fee deducted when options are claimed */\r\n    uint16 public claimFeeBasisPoints;\r\n\r\n    /** The token that represents collateral ownership */\r\n    ISimpleToken public override wToken;\r\n    /** The token that represents the redemption ownership */\r\n    ISimpleToken public override bToken;\r\n\r\n    /** If the restrictedMinter address is set, lock down minting to only that address */\r\n    address public restrictedMinter;\r\n\r\n    /** Enum to track Fee Events */\r\n    enum FeeType {EXERCISE_FEE, CLOSE_FEE, CLAIM_FEE}\r\n\r\n    /** Emitted when the market is created */\r\n    event MarketInitialized(\r\n        string marketName,\r\n        MarketStyle marketStyle,\r\n        address wToken,\r\n        address bToken\r\n    );\r\n\r\n    /** Emitted when a new option contract is minted */\r\n    event OptionMinted(address indexed minter, uint256 value);\r\n\r\n    /** Emitted when a bToken is exercised for collateral */\r\n    event OptionExercised(address indexed redeemer, uint256 value);\r\n\r\n    /** Emitted when a wToken is redeemed after expiration */\r\n    event CollateralClaimed(address indexed redeemer, uint256 value);\r\n\r\n    /** Emitted when an equal amount of wToken and bToken is redeemed for original collateral */\r\n    event OptionClosed(address indexed redeemer, uint256 value);\r\n\r\n    /** Emitted when a fee is paid to the owner account */\r\n    event FeePaid(\r\n        FeeType indexed feeType,\r\n        address indexed token,\r\n        uint256 value\r\n    );\r\n\r\n    /** Emitted when tokens are recovered */\r\n    event TokensRecovered(\r\n        address indexed token,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    /** Emitted when contract is destroyed */\r\n    event MarketDestroyed();\r\n\r\n    event RestrictedMinterUpdated(address newRestrictedMinter);\r\n\r\n    /**\r\n     * Called to set this contract up\r\n     * Creation and initialization should be called in a single transaction.\r\n     */\r\n    function initialize(\r\n        string calldata _marketName,\r\n        address _collateralToken,\r\n        address _paymentToken,\r\n        MarketStyle _marketStyle,\r\n        uint256 _priceRatio,\r\n        uint256 _expirationDate,\r\n        uint16 _exerciseFeeBasisPoints,\r\n        uint16 _closeFeeBasisPoints,\r\n        uint16 _claimFeeBasisPoints,\r\n        address _tokenImplementation\r\n    ) public override {\r\n        __Market_init(\r\n            _marketName,\r\n            _collateralToken,\r\n            _paymentToken,\r\n            _marketStyle,\r\n            _priceRatio,\r\n            _expirationDate,\r\n            _exerciseFeeBasisPoints,\r\n            _closeFeeBasisPoints,\r\n            _claimFeeBasisPoints,\r\n            _tokenImplementation\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev data structures for local computations in the __Market_init() method.\r\n     */\r\n    struct MarketInitLocalVars {\r\n        uint8 decimals;\r\n        Proxy wTokenProxy;\r\n        string wTokenName;\r\n        Proxy bTokenProxy;\r\n        string bTokenName;\r\n    }\r\n\r\n    /**\r\n     * Initialization function that only allows itself to be called once\r\n     */\r\n    function __Market_init(\r\n        string calldata _marketName,\r\n        address _collateralToken,\r\n        address _paymentToken,\r\n        MarketStyle _marketStyle,\r\n        uint256 _priceRatio,\r\n        uint256 _expirationDate,\r\n        uint16 _exerciseFeeBasisPoints,\r\n        uint16 _closeFeeBasisPoints,\r\n        uint16 _claimFeeBasisPoints,\r\n        address _tokenImplementation\r\n    ) internal initializer {\r\n        require(_collateralToken != address(0x0), \"Invalid _collateralToken\");\r\n        require(_paymentToken != address(0x0), \"Invalid _paymentToken\");\r\n        require(_tokenImplementation != address(0x0), \"Invalid _tokenImplementation\");\r\n\r\n        // Usage of a memory struct of vars to avoid \"Stack too deep\" errors due to\r\n        // too many local variables\r\n        MarketInitLocalVars memory localVars;\r\n\r\n        // Save off variables\r\n        marketName = _marketName;\r\n\r\n        // Tokens\r\n        collateralToken = IERC20(_collateralToken);\r\n        paymentToken = IERC20(_paymentToken);\r\n\r\n        // Market Style\r\n        marketStyle = _marketStyle;\r\n\r\n        // Price and expiration\r\n        priceRatio = _priceRatio;\r\n        expirationDate = _expirationDate;\r\n\r\n        // Fees\r\n        exerciseFeeBasisPoints = _exerciseFeeBasisPoints;\r\n        closeFeeBasisPoints = _closeFeeBasisPoints;\r\n        claimFeeBasisPoints = _claimFeeBasisPoints;\r\n\r\n        // wToken and bToken will be denominated in same decimals as collateral\r\n        localVars.decimals = ERC20UpgradeSafe(address(collateralToken))\r\n            .decimals();\r\n\r\n        // Initialize the W token\r\n        localVars.wTokenProxy = new Proxy(_tokenImplementation);\r\n        wToken = ISimpleToken(address(localVars.wTokenProxy));\r\n        localVars.wTokenName = string(abi.encodePacked(\"W-\", _marketName));\r\n        wToken.initialize(\r\n            localVars.wTokenName,\r\n            localVars.wTokenName,\r\n            localVars.decimals\r\n        );\r\n\r\n        // Initialize the B token\r\n        localVars.bTokenProxy = new Proxy(_tokenImplementation);\r\n        bToken = ISimpleToken(address(localVars.bTokenProxy));\r\n        localVars.bTokenName = string(abi.encodePacked(\"B-\", _marketName));\r\n        bToken.initialize(\r\n            localVars.bTokenName,\r\n            localVars.bTokenName,\r\n            localVars.decimals\r\n        );\r\n\r\n        // Set up the initialization of the inherited ownable contract\r\n        __Ownable_init();\r\n\r\n        // Emit the event\r\n        emit MarketInitialized(\r\n            marketName,\r\n            marketStyle,\r\n            address(wToken),\r\n            address(bToken)\r\n        );\r\n    }\r\n\r\n    /** Getter for the current state of the market (open, expired, or closed) */\r\n    function state() public override view returns (MarketState) {\r\n        // Before the expiration\r\n        if (now < expirationDate) {\r\n            return MarketState.OPEN;\r\n        }\r\n\r\n        // After expiration but not 180 days have passed\r\n        if (now < expirationDate.add(180 days)) {\r\n            return MarketState.EXPIRED;\r\n        }\r\n\r\n        // Contract can be cleaned up\r\n        return MarketState.CLOSED;\r\n    }\r\n\r\n    /**\r\n     * Mint new option contract\r\n     * The collateral amount must already be approved by the caller to transfer into this contract\r\n     * The caller will lock up collateral and get an equal number of bTokens and wTokens\r\n     */\r\n    function mintOptions(uint256 collateralAmount) public override {\r\n        require(\r\n            state() == MarketState.OPEN,\r\n            \"Option contract must be in Open State to mint\"\r\n        );\r\n\r\n        // Save off the calling address\r\n        address minter = _msgSender();\r\n\r\n        // If the restrictedMinter address is set, then only that address can mint options\r\n        if (restrictedMinter != address(0)) {\r\n            require(\r\n                restrictedMinter == minter,\r\n                \"mintOptions: only restrictedMinter can mint\"\r\n            );\r\n        }\r\n\r\n        // Transfer the collateral into this contract from the caller - this should revert if it fails\r\n        collateralToken.safeTransferFrom(\r\n            minter,\r\n            address(this),\r\n            collateralAmount\r\n        );\r\n\r\n        // Mint new bTokens and wTokens to the caller\r\n        wToken.mint(minter, collateralAmount);\r\n        bToken.mint(minter, collateralAmount);\r\n\r\n        // Emit the event\r\n        emit OptionMinted(minter, collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * If an bToken is redeemed for X collateral, calculate the payment token amount.\r\n     */\r\n    function calculatePaymentAmount(uint256 collateralAmount)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return collateralAmount.mul(priceRatio).div(10**18);\r\n    }\r\n\r\n    /**\r\n     * A Basis Point is 1 / 100 of a percent. e.g. 10 basis points (e.g. 0.1%) on 5000 is 5000 * 0.001 => 5\r\n     */\r\n    function calculateFee(uint256 amount, uint16 basisPoints)\r\n        public\r\n        override\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return amount.mul(basisPoints).div(10000);\r\n    }\r\n\r\n    /**\r\n     * Redeem an bToken for collateral.\r\n     * Can be done only while option contract is open\r\n     * bToken amount must be approved before calling\r\n     * Payment token amount must be approved before calling\r\n     */\r\n    function exerciseOption(uint256 collateralAmount) public override {\r\n        require(\r\n            state() == MarketState.OPEN,\r\n            \"Option contract must be in Open State to exercise\"\r\n        );\r\n        if (marketStyle == IMarket.MarketStyle.EUROPEAN_STYLE) {\r\n            // hardcode the date after which European-style options can\r\n            // be exercised to be 1 day prior to expiration\r\n            require(\r\n                now >= expirationDate - 1 days,\r\n                \"Option contract cannot yet be exercised\"\r\n            );\r\n        }\r\n\r\n        // Save off the caller\r\n        address redeemer = _msgSender();\r\n\r\n        // Burn the bToken amount from the callers account - this will be the same amount as the collateral that is requested\r\n        bToken.burn(redeemer, collateralAmount);\r\n\r\n        // Move the payment amount from the caller into this contract's address\r\n        uint256 paymentAmount = calculatePaymentAmount(collateralAmount);\r\n        paymentToken.safeTransferFrom(redeemer, address(this), paymentAmount);\r\n\r\n        // Calculate the redeem Fee and move it if it is valid\r\n        uint256 feeAmount = calculateFee(\r\n            collateralAmount,\r\n            exerciseFeeBasisPoints\r\n        );\r\n        if (feeAmount > 0) {\r\n            // First set the collateral amount that will be left over to send out\r\n            collateralAmount = collateralAmount.sub(feeAmount);\r\n\r\n            // Send the fee Amount to the owner\r\n            collateralToken.safeTransfer(owner(), feeAmount);\r\n\r\n            // Emit the fee event\r\n            emit FeePaid(\r\n                FeeType.EXERCISE_FEE,\r\n                address(collateralToken),\r\n                feeAmount\r\n            );\r\n        }\r\n\r\n        // Send the collateral to the caller's address\r\n        collateralToken.safeTransfer(redeemer, collateralAmount);\r\n\r\n        // Emit the Redeem Event\r\n        emit OptionExercised(redeemer, collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * Redeem the wToken for collateral and payment tokens\r\n     * Can only be done after contract has expired\r\n     */\r\n    function claimCollateral(uint256 collateralAmount) public override {\r\n        require(\r\n            state() == MarketState.EXPIRED,\r\n            \"Option contract must be in EXPIRED State to claim collateral\"\r\n        );\r\n\r\n        // Save off the caller\r\n        address redeemer = _msgSender();\r\n\r\n        // Save off the total supply of collateral tokens\r\n        uint256 wTokenSupply = wToken.totalSupply();\r\n\r\n        // Burn the collateral token for the amount they are claiming\r\n        wToken.burn(redeemer, collateralAmount);\r\n\r\n        // Get the total collateral in this contract\r\n        uint256 totalCollateralAmount = collateralToken.balanceOf(\r\n            address(this)\r\n        );\r\n\r\n        // If there is a balance, send their share to the redeemer\r\n        if (totalCollateralAmount > 0) {\r\n            // Redeemer gets the percentage of all collateral in this contract based on wToken are redeeming\r\n            uint256 owedCollateralAmount = collateralAmount.mul(totalCollateralAmount).div(wTokenSupply);\r\n\r\n            // Calculate the claim Fee and move it if it is valid\r\n            uint256 feeAmount = calculateFee(\r\n                owedCollateralAmount,\r\n                claimFeeBasisPoints\r\n            );\r\n            if (feeAmount > 0) {\r\n                // First set the collateral amount that will be left over to send out\r\n                owedCollateralAmount = owedCollateralAmount.sub(feeAmount);\r\n\r\n                // Send the fee Amount to the owner\r\n                collateralToken.safeTransfer(owner(), feeAmount);\r\n\r\n                // Emit the fee event\r\n                emit FeePaid(\r\n                    FeeType.CLAIM_FEE,\r\n                    address(collateralToken),\r\n                    feeAmount\r\n                );\r\n            }\r\n\r\n            // Verify the amount to send is not less than the balance due to rounding for the last user claiming funds.\r\n            // If so, just send the remaining amount in the contract.\r\n            uint256 currentBalance = collateralToken.balanceOf(address(this));\r\n            if(currentBalance < owedCollateralAmount){\r\n                owedCollateralAmount = currentBalance;\r\n            }\r\n\r\n            // Send the remainder to redeemer\r\n            collateralToken.safeTransfer(redeemer, owedCollateralAmount);\r\n        }\r\n\r\n        // Get the total of payments in this contract\r\n        uint256 totalPaymentAmount = paymentToken.balanceOf(address(this));\r\n\r\n        // If there is a balance, send their share to the redeemer\r\n        if (totalPaymentAmount > 0) {\r\n            // Redeemer gets the percentage of all collateral in this contract based on wToken are redeeming\r\n            uint256 owedPaymentAmount = collateralAmount.mul(totalPaymentAmount).div(wTokenSupply);\r\n\r\n            // Calculate the claim Fee and move it if it is valid\r\n            uint256 feeAmount = calculateFee(\r\n                owedPaymentAmount,\r\n                claimFeeBasisPoints\r\n            );\r\n            if (feeAmount > 0) {\r\n                // First set the collateral amount that will be left over to send out\r\n                owedPaymentAmount = owedPaymentAmount.sub(feeAmount);\r\n\r\n                // Send the fee Amount to the owner\r\n                paymentToken.safeTransfer(owner(), feeAmount);\r\n\r\n                // Emit the fee event\r\n                emit FeePaid(\r\n                    FeeType.CLAIM_FEE,\r\n                    address(paymentToken),\r\n                    feeAmount\r\n                );\r\n            }\r\n\r\n            // Verify the amount to send is not less than the balance due to rounding for the last user claiming funds.\r\n            // If so, just send the remaining amount in the contract.\r\n            uint256 currentBalance = paymentToken.balanceOf(address(this));\r\n            if(currentBalance < owedPaymentAmount){\r\n                owedPaymentAmount = currentBalance;\r\n            }\r\n\r\n            // Send the remainder to redeemer\r\n            paymentToken.safeTransfer(redeemer, owedPaymentAmount);\r\n        }\r\n\r\n        // Emit event\r\n        emit CollateralClaimed(redeemer, collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * Close the position and take back collateral\r\n     * Can only be done while the contract is open\r\n     * Caller must have an amount of both wToken and bToken that will be burned before\r\n     * the collateral is sent back to them\r\n     */\r\n    function closePosition(uint256 collateralAmount) public override {\r\n        require(\r\n            state() == MarketState.OPEN,\r\n            \"Option contract must be in Open State to close a position\"\r\n        );\r\n\r\n        // Save off the caller\r\n        address redeemer = _msgSender();\r\n\r\n        // Burn the bToken and wToken amounts\r\n        bToken.burn(redeemer, collateralAmount);\r\n        wToken.burn(redeemer, collateralAmount);\r\n\r\n        // Calculate the claim Fee and move it if it is valid\r\n        uint256 feeAmount = calculateFee(collateralAmount, closeFeeBasisPoints);\r\n        if (feeAmount > 0) {\r\n            // First set the collateral amount that will be left over to send out\r\n            collateralAmount = collateralAmount.sub(feeAmount);\r\n\r\n            // Send the fee Amount to the owner\r\n            collateralToken.safeTransfer(owner(), feeAmount);\r\n\r\n            // Emit the fee event\r\n            emit FeePaid(\r\n                FeeType.CLOSE_FEE,\r\n                address(collateralToken),\r\n                feeAmount\r\n            );\r\n        }\r\n\r\n        // Send the collateral to the caller's address\r\n        collateralToken.safeTransfer(redeemer, collateralAmount);\r\n\r\n        // Emit the Closed Event\r\n        emit OptionClosed(redeemer, collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * After the market is closed, anyone can trigger tokens to be swept to the owner\r\n     */\r\n    function recoverTokens(IERC20 token) public override {\r\n        require(\r\n            state() == MarketState.CLOSED,\r\n            \"ERC20s can't be recovered until the market is closed\"\r\n        );\r\n\r\n        // Get the balance\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        // Sweep out\r\n        token.safeTransfer(owner(), balance);\r\n\r\n        // Emit the event\r\n        emit TokensRecovered(address(token), owner(), balance);\r\n    }\r\n\r\n    /**\r\n     * After the market is closed the owner can destroy\r\n     */\r\n    function selfDestructMarket(address payable refundAddress)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(refundAddress != address(0x0), \"Invalid refundAddress\");\r\n\r\n        require(\r\n            state() == MarketState.CLOSED,\r\n            \"Markets can't be destroyed until it is closed\"\r\n        );\r\n\r\n        // Sweep out any remaining collateral token\r\n        uint256 collateralBalance = collateralToken.balanceOf(address(this));\r\n        if(collateralBalance > 0){\r\n            collateralToken.transfer(owner(), collateralBalance);\r\n        }\r\n\r\n        // Sweep out any remaining payment token\r\n        uint256 paymentTokenBalance = paymentToken.balanceOf(address(this));\r\n        if(paymentTokenBalance > 0){\r\n            paymentToken.transfer(owner(), paymentTokenBalance);\r\n        }\r\n\r\n        // Destroy the tokens\r\n        wToken.selfDestructToken(refundAddress);\r\n        bToken.selfDestructToken(refundAddress);\r\n\r\n        // Emit the event\r\n        emit MarketDestroyed();\r\n\r\n        // Destroy the contract and forward any ETH\r\n        selfdestruct(refundAddress);\r\n    }\r\n\r\n    /**\r\n     * Update the logic address of this Market\r\n     */\r\n    function updateImplementation(address newImplementation) public override onlyOwner {\r\n        require(newImplementation != address(0x0), \"Invalid newImplementation\");\r\n\r\n        _updateCodeAddress(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * The owner address can set a restricted minter address that will then prevent any\r\n     * other addresses from minting new options.\r\n     * This CAN be set to 0x0 to disable the restriction.\r\n     */\r\n    function updateRestrictedMinter(address _restrictedMinter)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        restrictedMinter = _restrictedMinter;\r\n\r\n        emit RestrictedMinterUpdated(restrictedMinter);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CodeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CollateralClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum Market.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MarketDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum IMarket.MarketStyle\",\"name\":\"marketStyle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"}],\"name\":\"MarketInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OptionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OptionExercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OptionMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRestrictedMinter\",\"type\":\"address\"}],\"name\":\"RestrictedMinterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bToken\",\"outputs\":[{\"internalType\":\"contract ISimpleToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"basisPoints\",\"type\":\"uint16\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePaymentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exerciseFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"exerciseOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirationDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"logicAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"enum IMarket.MarketStyle\",\"name\":\"_marketStyle\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_priceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_exerciseFeeBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_closeFeeBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_claimFeeBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_tokenImplementation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketStyle\",\"outputs\":[{\"internalType\":\"enum IMarket.MarketStyle\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"mintOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictedMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"selfDestructMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IMarket.MarketState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"updateImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_restrictedMinter\",\"type\":\"address\"}],\"name\":\"updateRestrictedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"contract ISimpleToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Market","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://32f6d5f67b96b9b99a5ce6d11ccc828d7869d7e44c9e8fb71f6a5423f76135ff"}]}