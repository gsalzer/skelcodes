{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only allowed by owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\ncontract PreSale is Owned {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    uint256 saleStartDate = 1611327600; // 22 January 2021, 3 pm GMT\r\n    uint256 saleEndDate = 1612069200; // 31 January 2021, 5 am GMT\r\n    uint256 tokenRatePerEth = 3200; // 3200 tokens per ether\r\n    uint256 public totalInvestments;\r\n    \r\n    uint256 HARD_CAP = 600 ether;\r\n    address beneficiaryAddress1 = 0x1Ed589022D5A8d090638f6E1492769855c5dC4f0;\r\n    address beneficiaryAddress2 = 0x64E620Bb431c15CaAfCC3c60F606dA7Ef929d166;\r\n    \r\n    struct Investor{\r\n        uint256 investment;\r\n        uint256 tokens;\r\n    }\r\n    mapping(address => Investor) public investor;\r\n\r\n    modifier isHardCapReached{\r\n        require(totalInvestments.add(msg.value) <= HARD_CAP, \"Exceeding the hard cap\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = 0xbB2935C4AcBb6B0C7a93c45890557CF1DdfE6908;\r\n    }\r\n    \r\n    receive() external payable{\r\n        Invest();\r\n    }\r\n    \r\n    function Invest() public payable isHardCapReached{\r\n        require( now > saleStartDate && now < saleEndDate , \"Sale is closed\");\r\n        uint256 tokens = getTokenAmount(msg.value);\r\n        investor[msg.sender].investment += msg.value;\r\n        investor[msg.sender].tokens += tokens;\r\n        totalInvestments += msg.value;\r\n        uint256 eachBeneficiaryAmount = (msg.value).div(2);\r\n        payable(beneficiaryAddress1).transfer(eachBeneficiaryAmount);\r\n        payable(beneficiaryAddress2).transfer(eachBeneficiaryAmount);\r\n    }\r\n\r\n    function getTokenAmount(uint256 amount) internal view returns(uint256){\r\n        return amount * tokenRatePerEth;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PreSale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6d12c8962d587577b1f0179c9a256eccf95a994a1647801052b2d57e97bb3771"}]}