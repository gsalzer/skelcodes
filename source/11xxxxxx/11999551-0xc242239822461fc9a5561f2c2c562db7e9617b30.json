{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/sushi/XSushiStrategyUpgradeableMainnet.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./XSushiStrategyUpgradeable.sol\\\";\\n\\ncontract XSushiStrategyUpgradeableMainnet is XSushiStrategyUpgradeable {\\n\\n  address public xSushiStrategyUpgradeableMainnet; // just a differentiator for the bytecode\\n\\n  constructor() public {}\\n\\n  function initializeStrategy(\\n    address _storage,\\n    address _vault\\n  ) public initializer {\\n    address __sushi = address(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\n    address __xsushi = address(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272);\\n    address __lendingPoolProvider = address(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n    address __protocolDataProvider = address(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n    uint256 __defaultCap = 0;\\n    XSushiStrategyUpgradeable.initializeStrategy(\\n      _storage, __sushi, _vault, __xsushi, __lendingPoolProvider, __protocolDataProvider, __defaultCap\\n    );\\n  }\\n}\"\r\n    },\r\n    \"contracts/strategies/sushi/XSushiStrategyUpgradeable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"../../base/interface/IStrategy.sol\\\";\\nimport \\\"../../base/interface/IVault.sol\\\";\\nimport \\\"../../base/interface/IController.sol\\\";\\nimport \\\"../../base/inheritance/ControllableInit.sol\\\";\\nimport \\\"../../base/upgradability/BaseUpgradeableStrategy.sol\\\";\\nimport \\\"../aave/AaveInteractorInit.sol\\\";\\nimport \\\"./interface/SushiBar.sol\\\";\\n\\n\\ncontract XSushiStrategyUpgradeable is IStrategy, Initializable, BaseUpgradeableStrategy, AaveInteractorInit {\\n\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  bytes32 internal constant _X_SUSHI_SLOT = 0x1c8fae71a564f5ee0ef3c480d3c56ad130c3dbb93e02cc33ab794f7a7f21ea57;\\n  bytes32 internal constant _AAVE_WRAP_CAP_SLOT = 0x01682d4ae8f38d11336fb93e5996230fbcbe142ceb30f4641320e2ad3ce20efe;\\n\\n  constructor() public {\\n    require(_X_SUSHI_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.xsushi\\\")) - 1));\\n    require(_AAVE_WRAP_CAP_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.aaveWrapCap\\\")) - 1));\\n  }\\n\\n  function initializeStrategy(\\n    address _storage,\\n    address _underlying,\\n    address _vault,\\n    address _xsushi,\\n    address _lendingPoolProvider,\\n    address _protocolDataProvider,\\n    uint256 _aaveWrapCap\\n  ) public initializer {\\n    BaseUpgradeableStrategy.initialize(\\n      _storage,\\n      _underlying,\\n      _vault,\\n      address(0), // unused\\n      address(0), // unused\\n      0, // unused\\n      0, // unused\\n      false, // unused\\n      0, // unused\\n      12 hours\\n    );\\n    AaveInteractorInit.initialize(\\n      _xsushi, _lendingPoolProvider, _protocolDataProvider\\n    );\\n    require(IVault(_vault).underlying() == _underlying, \\\"vault does not support sushi\\\");\\n    setAddress(_X_SUSHI_SLOT, _xsushi);\\n    setAaveCap(_aaveWrapCap);\\n  }\\n\\n  function xsushi() public view returns (address) {\\n    return getAddress(_X_SUSHI_SLOT);\\n  }\\n\\n  function depositArbCheck() public view returns (bool) {\\n    return true;\\n  }\\n\\n  function unsalvagableTokens(address _token) public view returns(bool) {\\n    return _token == underlying() || _token == xsushi() || _token == aTokenAddress();\\n  }\\n\\n  function setAaveCap(uint256 _newCap) public onlyGovernance {\\n    setUint256(_AAVE_WRAP_CAP_SLOT, _newCap);\\n  }\\n\\n  function aaveCap() public view returns(uint256) {\\n    return getUint256(_AAVE_WRAP_CAP_SLOT);\\n  }\\n\\n  function wrap() public restricted {\\n    uint256 balance = IERC20(underlying()).balanceOf(address(this));\\n    if (balance > 0) {\\n      IERC20(underlying()).safeApprove(xsushi(), 0);\\n      IERC20(underlying()).safeApprove(xsushi(), balance);\\n      SushiBar(xsushi()).enter(balance);\\n    }\\n\\n    uint256 xBalance = IERC20(xsushi()).balanceOf(address(this));\\n    uint256 alreadyDeposited = IERC20(aTokenAddress()).balanceOf(address(this));\\n    if (alreadyDeposited < aaveCap()) {\\n      uint256 toDeposit = Math.min(xBalance, aaveCap().sub(alreadyDeposited));\\n      if (toDeposit > 0) {\\n        _aaveDeposit(toDeposit);\\n      }\\n    }\\n  }\\n\\n  function unwrap() public restricted {\\n    uint256 aBalance = IERC20(aTokenAddress()).balanceOf(address(this));\\n    if (aBalance > 0) {\\n      _aaveWithdraw(aBalance);\\n    }\\n\\n    uint256 balance = IERC20(xsushi()).balanceOf(address(this));\\n    if (balance > 0) {\\n      SushiBar(xsushi()).leave(balance);\\n    }\\n  }\\n\\n  function withdrawAllToVault() external restricted {\\n    unwrap();\\n    uint256 balance = IERC20(underlying()).balanceOf(address(this));\\n    if (balance > 0) {\\n      IERC20(underlying()).safeTransfer(vault(), balance);\\n    }\\n  }\\n\\n  function withdrawToVault(uint256 amountUnderlying) external restricted {\\n    // this is similarly gas-efficient as making the calculation for exact xsushi to withdraw\\n    unwrap();\\n    require(IERC20(underlying()).balanceOf(address(this)) >= amountUnderlying, \\\"insufficient balance for the withdrawal\\\");\\n    IERC20(underlying()).safeTransfer(vault(), amountUnderlying);\\n    wrap();\\n  }\\n\\n  function salvage(address recipient, address token, uint256 amount) public onlyGovernance {\\n    // To make sure that governance cannot come in and take away the coins\\n    require(!unsalvagableTokens(token), \\\"token is defined as not salvageable\\\");\\n    IERC20(token).safeTransfer(recipient, amount);\\n  }\\n\\n  function doHardWork() public restricted {\\n    // this should not be needed ever\\n    // xsushi appreciates on its own\\n    unwrap();\\n    wrap();\\n  }\\n\\n  function investAllUnderlying() public restricted {\\n    // the method is implemented just for consistency\\n    wrap();\\n  }\\n\\n  function investedUnderlyingBalance() external view returns (uint256) {\\n    // adjusted xsushi code for exit\\n    // https://etherscan.io/address/0x8798249c2e607446efb7ad49ec89dd1865ff4272#code\\n    uint256 axSushi = IERC20(aTokenAddress()).balanceOf(address(this));\\n    uint256 share = IERC20(xsushi()).balanceOf(address(this)).add(axSushi);\\n    uint256 totalShares = IERC20(xsushi()).totalSupply();\\n    uint256 sushiBalance = IERC20(underlying()).balanceOf(address(this));\\n    return (share.mul(IERC20(underlying()).balanceOf(xsushi())).div(totalShares)).add(sushiBalance);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStrategy {\\n    \\n    function unsalvagableTokens(address tokens) external view returns (bool);\\n    \\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function vault() external view returns (address);\\n\\n    function withdrawAllToVault() external;\\n    function withdrawToVault(uint256 amount) external;\\n\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\n\\n    // should only be called by controller\\n    function salvage(address recipient, address token, uint256 amount) external;\\n\\n    function doHardWork() external;\\n    function depositArbCheck() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVault {\\n\\n    function initializeVault(\\n      address _storage,\\n      address _underlying,\\n      uint256 _toInvestNumerator,\\n      uint256 _toInvestDenominator\\n    ) external ;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    // function store() external view returns (address);\\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n    function announceStrategyUpdate(address _strategy) external;\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\n\\n    function deposit(uint256 amountWei) external;\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256 numberOfShares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IController {\\n    // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    // This grey list is only used in Vault.sol, see the code there for reference\\n    function greyList(address _target) external view returns(bool);\\n\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\n    function doHardWork(address _vault) external;\\n    function hasVault(address _vault) external returns(bool);\\n\\n    function salvage(address _token, uint256 amount) external;\\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\\n\\n    function notifyFee(address _underlying, uint256 fee) external;\\n    function profitSharingNumerator() external view returns (uint256);\\n    function profitSharingDenominator() external view returns (uint256);\\n\\n    function feeRewardForwarder() external view returns(address);\\n    function setFeeRewardForwarder(address _value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/ControllableInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./GovernableInit.sol\\\";\\n\\n// A clone of Governable supporting the Initializable interface and pattern\\ncontract ControllableInit is GovernableInit {\\n\\n  constructor() public {\\n  }\\n\\n  function initialize(address _storage) public initializer {\\n    GovernableInit.initialize(_storage);\\n  }\\n\\n  modifier onlyController() {\\n    require(Storage(_storage()).isController(msg.sender), \\\"Not a controller\\\");\\n    _;\\n  }\\n\\n  modifier onlyControllerOrGovernance(){\\n    require((Storage(_storage()).isController(msg.sender) || Storage(_storage()).isGovernance(msg.sender)),\\n      \\\"The caller must be controller or governance\\\");\\n    _;\\n  }\\n\\n  function controller() public view returns (address) {\\n    return Storage(_storage()).controller();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/upgradability/BaseUpgradeableStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./BaseUpgradeableStrategyStorage.sol\\\";\\nimport \\\"../inheritance/ControllableInit.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract BaseUpgradeableStrategy is Initializable, ControllableInit, BaseUpgradeableStrategyStorage {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  event ProfitsNotCollected(bool sell, bool floor);\\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n\\n  modifier restricted() {\\n    require(msg.sender == vault() || msg.sender == controller()\\n      || msg.sender == governance(),\\n      \\\"The sender has to be the controller, governance, or vault\\\");\\n    _;\\n  }\\n\\n  // This is only used in `investAllUnderlying()`\\n  // The user can still freely withdraw from the strategy\\n  modifier onlyNotPausedInvesting() {\\n    require(!pausedInvesting(), \\\"Action blocked as the strategy is in emergency state\\\");\\n    _;\\n  }\\n\\n  constructor() public BaseUpgradeableStrategyStorage() {\\n  }\\n\\n  function initialize(\\n    address _storage,\\n    address _underlying,\\n    address _vault,\\n    address _rewardPool,\\n    address _rewardToken,\\n    uint256 _profitSharingNumerator,\\n    uint256 _profitSharingDenominator,\\n    bool _sell,\\n    uint256 _sellFloor,\\n    uint256 _implementationChangeDelay\\n  ) public initializer {\\n    ControllableInit.initialize(\\n      _storage\\n    );\\n    _setUnderlying(_underlying);\\n    _setVault(_vault);\\n    _setRewardPool(_rewardPool);\\n    _setRewardToken(_rewardToken);\\n    _setProfitSharingNumerator(_profitSharingNumerator);\\n    _setProfitSharingDenominator(_profitSharingDenominator);\\n\\n    _setSell(_sell);\\n    _setSellFloor(_sellFloor);\\n    _setNextImplementationDelay(_implementationChangeDelay);\\n    _setPausedInvesting(false);\\n  }\\n\\n  /**\\n  * Schedules an upgrade for this vault's proxy.\\n  */\\n  function scheduleUpgrade(address impl) public onlyGovernance {\\n    _setNextImplementation(impl);\\n    _setNextImplementationTimestamp(block.timestamp.add(nextImplementationDelay()));\\n  }\\n\\n  function _finalizeUpgrade() internal {\\n    _setNextImplementation(address(0));\\n    _setNextImplementationTimestamp(0);\\n  }\\n\\n  function shouldUpgrade() external view returns (bool, address) {\\n    return (\\n      nextImplementationTimestamp() != 0\\n        && block.timestamp > nextImplementationTimestamp()\\n        && nextImplementation() != address(0),\\n      nextImplementation()\\n    );\\n  }\\n\\n  // reward notification\\n\\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator()).div(profitSharingDenominator());\\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\\n      IERC20(rewardToken()).safeApprove(controller(), 0);\\n      IERC20(rewardToken()).safeApprove(controller(), feeAmount);\\n\\n      IController(controller()).notifyFee(\\n        rewardToken(),\\n        feeAmount\\n      );\\n    } else {\\n      emit ProfitLogInReward(0, 0, block.timestamp);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/aave/AaveInteractorInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./interface/ILendingPool.sol\\\";\\nimport \\\"./interface/ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"./interface/IAaveProtocolDataProvider.sol\\\";\\n\\ncontract AaveInteractorInit is Initializable {\\n\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  bytes32 internal constant _AAVE_UNDERLYING_SLOT = 0xf84ef7729628122ca33db47d58190140a6c7bd099adee2733cb18ff7e845a056;\\n  bytes32 internal constant _A_TOKEN_ADDRESS_SLOT = 0x9002ea3817e190ead1c1611e1af7f0342b23e4f547aae36df43f9832921befa3;\\n  bytes32 internal constant _LENDING_POOL_PROVIDER_SLOT = 0x0df3ecbeae4dcb3be9657d4c0aa360d493a956e4fdcc6f1a28b9290eed644efb;\\n  bytes32 internal constant _PROTOCOL_DATA_PROVIDER_SLOT = 0xd81bb2d702e605477e8373b22f131ee9512514c5595fb93b099ee74ca2fa6104;\\n\\n  constructor() public {\\n    require(_AAVE_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.aaveInteractorInit.aaveUnderlying\\\")) - 1));\\n    require(_A_TOKEN_ADDRESS_SLOT == bytes32(uint256(keccak256(\\\"eip1967.aaveInteractorInit.aTokenAddress\\\")) - 1));\\n    require(_LENDING_POOL_PROVIDER_SLOT == bytes32(uint256(keccak256(\\\"eip1967.aaveInteractorInit.lendingPoolProvider\\\")) - 1));\\n    require(_PROTOCOL_DATA_PROVIDER_SLOT == bytes32(uint256(keccak256(\\\"eip1967.aaveInteractorInit.protocolDataProvider\\\")) - 1));\\n  }\\n\\n  function initialize(\\n    address _underlying,\\n    address _lendingPoolProvider,\\n    address _protocolDataProvider\\n  ) public initializer {\\n    setAddress(_AAVE_UNDERLYING_SLOT, _underlying);\\n    setAddress(_LENDING_POOL_PROVIDER_SLOT, _lendingPoolProvider);\\n    setAddress(_PROTOCOL_DATA_PROVIDER_SLOT, _protocolDataProvider);\\n    setAddress(_A_TOKEN_ADDRESS_SLOT, aToken());\\n  }\\n\\n  function lendingPool() public view returns (address) {\\n    return ILendingPoolAddressesProvider(lendingPoolProvider()).getLendingPool();\\n  }\\n\\n  function aToken() public view returns (address) {\\n    (address newATokenAddress,,) =\\n      IAaveProtocolDataProvider(protocolDataProvider()).getReserveTokensAddresses(aaveUnderlying());\\n    return newATokenAddress;\\n  }\\n\\n  function _aaveDeposit(uint256 amount) internal {\\n    address lendPool = lendingPool();\\n    IERC20(aaveUnderlying()).safeApprove(lendPool, 0);\\n    IERC20(aaveUnderlying()).safeApprove(lendPool, amount);\\n\\n    ILendingPool(lendPool).deposit(\\n      aaveUnderlying(),\\n      amount,\\n      address(this),\\n      0 // referral code\\n    );\\n  }\\n\\n  function _aaveWithdrawAll() internal {\\n    _aaveWithdraw(uint256(-1));\\n  }\\n\\n  function _aaveWithdraw(uint256 amount) internal {\\n    address lendPool = lendingPool();\\n    IERC20(aTokenAddress()).safeApprove(lendPool, 0);\\n    IERC20(aTokenAddress()).safeApprove(lendPool, amount);\\n    uint256 maxAmount = IERC20(aTokenAddress()).balanceOf(address(this));\\n\\n    uint256 amountWithdrawn = ILendingPool(lendPool).withdraw(\\n      aaveUnderlying(),\\n      amount,\\n      address(this)\\n    );\\n\\n    require(\\n      amountWithdrawn == amount ||\\n      (amount == uint256(-1) && maxAmount == IERC20(aaveUnderlying()).balanceOf(address(this))),\\n      \\\"Did not withdraw requested amount\\\"\\n    );\\n  }\\n\\n  function aaveUnderlying() public view returns(address) {\\n    return getAddress(_AAVE_UNDERLYING_SLOT);\\n  }\\n\\n  function aTokenAddress() public view returns(address) {\\n    return getAddress(_A_TOKEN_ADDRESS_SLOT);\\n  }\\n\\n  function lendingPoolProvider() public view returns(address) {\\n    return getAddress(_LENDING_POOL_PROVIDER_SLOT);\\n  }\\n\\n  function protocolDataProvider() public view returns(address) {\\n    return getAddress(_PROTOCOL_DATA_PROVIDER_SLOT);\\n  }\\n\\n  function setAddress(bytes32 slot, address _address) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, _address)\\n    }\\n  }\\n\\n  function getAddress(bytes32 slot) internal view returns (address str) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/sushi/interface/SushiBar.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface SushiBar {\\n  function enter(uint256 _amount) external;\\n  function leave(uint256 _share) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/GovernableInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\n// A clone of Governable supporting the Initializable interface and pattern\\ncontract GovernableInit is Initializable {\\n\\n  bytes32 internal constant _STORAGE_SLOT = 0xa7ec62784904ff31cbcc32d09932a58e7f1e4476e1d041995b37c917990b16dc;\\n\\n  modifier onlyGovernance() {\\n    require(Storage(_storage()).isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  constructor() public {\\n    assert(_STORAGE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.governableInit.storage\\\")) - 1));\\n  }\\n\\n  function initialize(address _store) public initializer {\\n    _setStorage(_store);\\n  }\\n\\n  function _setStorage(address newStorage) private {\\n    bytes32 slot = _STORAGE_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, newStorage)\\n    }\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    _setStorage(_store);\\n  }\\n\\n  function _storage() internal view returns (address str) {\\n    bytes32 slot = _STORAGE_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n\\n  function governance() public view returns (address) {\\n    return Storage(_storage()).governance();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() public {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/upgradability/BaseUpgradeableStrategyStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\ncontract BaseUpgradeableStrategyStorage {\\n\\n  bytes32 internal constant _UNDERLYING_SLOT = 0xa1709211eeccf8f4ad5b6700d52a1a9525b5f5ae1e9e5f9e5a0c2fc23c86e530;\\n  bytes32 internal constant _VAULT_SLOT = 0xefd7c7d9ef1040fc87e7ad11fe15f86e1d11e1df03c6d7c87f7e1f4041f08d41;\\n\\n  bytes32 internal constant _REWARD_TOKEN_SLOT = 0xdae0aafd977983cb1e78d8f638900ff361dc3c48c43118ca1dd77d1af3f47bbf;\\n  bytes32 internal constant _REWARD_POOL_SLOT = 0x3d9bb16e77837e25cada0cf894835418b38e8e18fbec6cfd192eb344bebfa6b8;\\n  bytes32 internal constant _SELL_FLOOR_SLOT = 0xc403216a7704d160f6a3b5c3b149a1226a6080f0a5dd27b27d9ba9c022fa0afc;\\n  bytes32 internal constant _SELL_SLOT = 0x656de32df98753b07482576beb0d00a6b949ebf84c066c765f54f26725221bb6;\\n  bytes32 internal constant _PAUSED_INVESTING_SLOT = 0xa07a20a2d463a602c2b891eb35f244624d9068572811f63d0e094072fb54591a;\\n\\n  bytes32 internal constant _PROFIT_SHARING_NUMERATOR_SLOT = 0xe3ee74fb7893020b457d8071ed1ef76ace2bf4903abd7b24d3ce312e9c72c029;\\n  bytes32 internal constant _PROFIT_SHARING_DENOMINATOR_SLOT = 0x0286fd414602b432a8c80a0125e9a25de9bba96da9d5068c832ff73f09208a3b;\\n\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_SLOT = 0x29f7fcd4fe2517c1963807a1ec27b0e45e67c60a874d5eeac7a0b1ab1bb84447;\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_TIMESTAMP_SLOT = 0x414c5263b05428f1be1bfa98e25407cc78dd031d0d3cd2a2e3d63b488804f22e;\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_DELAY_SLOT = 0x82b330ca72bcd6db11a26f10ce47ebcfe574a9c646bccbc6f1cd4478eae16b31;\\n\\n  constructor() public {\\n    assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.underlying\\\")) - 1));\\n    assert(_VAULT_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.vault\\\")) - 1));\\n    assert(_REWARD_TOKEN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.rewardToken\\\")) - 1));\\n    assert(_REWARD_POOL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.rewardPool\\\")) - 1));\\n    assert(_SELL_FLOOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.sellFloor\\\")) - 1));\\n    assert(_SELL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.sell\\\")) - 1));\\n    assert(_PAUSED_INVESTING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.pausedInvesting\\\")) - 1));\\n\\n    assert(_PROFIT_SHARING_NUMERATOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.profitSharingNumerator\\\")) - 1));\\n    assert(_PROFIT_SHARING_DENOMINATOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.profitSharingDenominator\\\")) - 1));\\n\\n    assert(_NEXT_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementation\\\")) - 1));\\n    assert(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementationTimestamp\\\")) - 1));\\n    assert(_NEXT_IMPLEMENTATION_DELAY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementationDelay\\\")) - 1));\\n  }\\n\\n  function _setUnderlying(address _address) internal {\\n    setAddress(_UNDERLYING_SLOT, _address);\\n  }\\n\\n  function underlying() public view returns (address) {\\n    return getAddress(_UNDERLYING_SLOT);\\n  }\\n\\n  function _setRewardPool(address _address) internal {\\n    setAddress(_REWARD_POOL_SLOT, _address);\\n  }\\n\\n  function rewardPool() public view returns (address) {\\n    return getAddress(_REWARD_POOL_SLOT);\\n  }\\n\\n  function _setRewardToken(address _address) internal {\\n    setAddress(_REWARD_TOKEN_SLOT, _address);\\n  }\\n\\n  function rewardToken() public view returns (address) {\\n    return getAddress(_REWARD_TOKEN_SLOT);\\n  }\\n\\n  function _setVault(address _address) internal {\\n    setAddress(_VAULT_SLOT, _address);\\n  }\\n\\n  function vault() public view returns (address) {\\n    return getAddress(_VAULT_SLOT);\\n  }\\n\\n  // a flag for disabling selling for simplified emergency exit\\n  function _setSell(bool _value) internal {\\n    setBoolean(_SELL_SLOT, _value);\\n  }\\n\\n  function sell() public view returns (bool) {\\n    return getBoolean(_SELL_SLOT);\\n  }\\n\\n  function _setPausedInvesting(bool _value) internal {\\n    setBoolean(_PAUSED_INVESTING_SLOT, _value);\\n  }\\n\\n  function pausedInvesting() public view returns (bool) {\\n    return getBoolean(_PAUSED_INVESTING_SLOT);\\n  }\\n\\n  function _setSellFloor(uint256 _value) internal {\\n    setUint256(_SELL_FLOOR_SLOT, _value);\\n  }\\n\\n  function sellFloor() public view returns (uint256) {\\n    return getUint256(_SELL_FLOOR_SLOT);\\n  }\\n\\n  function _setProfitSharingNumerator(uint256 _value) internal {\\n    setUint256(_PROFIT_SHARING_NUMERATOR_SLOT, _value);\\n  }\\n\\n  function profitSharingNumerator() public view returns (uint256) {\\n    return getUint256(_PROFIT_SHARING_NUMERATOR_SLOT);\\n  }\\n\\n  function _setProfitSharingDenominator(uint256 _value) internal {\\n    setUint256(_PROFIT_SHARING_DENOMINATOR_SLOT, _value);\\n  }\\n\\n  function profitSharingDenominator() public view returns (uint256) {\\n    return getUint256(_PROFIT_SHARING_DENOMINATOR_SLOT);\\n  }\\n\\n  // upgradeability\\n\\n  function _setNextImplementation(address _address) internal {\\n    setAddress(_NEXT_IMPLEMENTATION_SLOT, _address);\\n  }\\n\\n  function nextImplementation() public view returns (address) {\\n    return getAddress(_NEXT_IMPLEMENTATION_SLOT);\\n  }\\n\\n  function _setNextImplementationTimestamp(uint256 _value) internal {\\n    setUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT, _value);\\n  }\\n\\n  function nextImplementationTimestamp() public view returns (uint256) {\\n    return getUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT);\\n  }\\n\\n  function _setNextImplementationDelay(uint256 _value) internal {\\n    setUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT, _value);\\n  }\\n\\n  function nextImplementationDelay() public view returns (uint256) {\\n    return getUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT);\\n  }\\n\\n  function setBoolean(bytes32 slot, bool _value) internal {\\n    setUint256(slot, _value ? 1 : 0);\\n  }\\n\\n  function getBoolean(bytes32 slot) internal view returns (bool) {\\n    return (getUint256(slot) == 1);\\n  }\\n\\n  function setAddress(bytes32 slot, address _address) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, _address)\\n    }\\n  }\\n\\n  function setUint256(bytes32 slot, uint256 _value) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, _value)\\n    }\\n  }\\n\\n  function getAddress(bytes32 slot) internal view returns (address str) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n\\n  function getUint256(bytes32 slot) internal view returns (uint256 str) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/aave/interface/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.5.16;\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  // function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n  // function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/aave/interface/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.5.16;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/aave/interface/IAaveProtocolDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.5.16;\\n\\ncontract IAaveProtocolDataProvider {\\n\\n  function getReserveTokensAddresses(address asset)\\n    external\\n    view\\n    returns (\\n      address aTokenAddress,\\n      address stableDebtTokenAddress,\\n      address variableDebtTokenAddress\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLogInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"floor\",\"type\":\"bool\"}],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aaveCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aaveUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sellFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_implementationChangeDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingPoolProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolDataProvider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initializeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xsushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingPoolProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolDataProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aaveWrapCap\",\"type\":\"uint256\"}],\"name\":\"initializeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investAllUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingPoolProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedInvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"scheduleUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setAaveCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shouldUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unwrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xSushiStrategyUpgradeableMainnet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xsushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"XSushiStrategyUpgradeableMainnet","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}