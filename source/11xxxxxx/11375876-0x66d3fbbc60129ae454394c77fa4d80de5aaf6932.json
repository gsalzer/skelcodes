{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ERC20 {\\n    function approve(address, uint256) external returns (bool);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Protocol adapter interface.\\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ninterface ProtocolAdapter {\\n\\n    /**\\n     * @dev MUST return \\\"Asset\\\" or \\\"Debt\\\".\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function adapterType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return token type (default is \\\"ERC20\\\").\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function tokenType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\\n     */\\n    function getBalance(address token, address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/aave/AaveV2VariableDebtAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport { ERC20 } from \\\"../../ERC20.sol\\\";\\nimport { ProtocolAdapter } from \\\"../ProtocolAdapter.sol\\\";\\n\\n\\nstruct ReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\n\\nstruct ReserveData {\\n    ReserveConfigurationMap configuration;\\n    uint128 liquidityIndex;\\n    uint128 variableBorrowIndex;\\n    uint128 currentLiquidityRate;\\n    uint128 currentVariableBorrowRate;\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    address interestRateStrategyAddress;\\n    uint8 id;\\n}\\n\\n\\n/**\\n * @dev LendingPoolAddressesProvider contract interface.\\n * Only the functions required for AaveV2VariableDebtAdapter contract are added.\\n */\\ninterface LendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (LendingPoolV2);\\n}\\n\\n\\n/**\\n * @dev LendingPool contract interface.\\n * Only the functions required for AaveV2VariableDebtAdapter contract are added.\\n */\\ninterface LendingPoolV2 {\\n    function getReserveData(address) external view returns (ReserveData memory);\\n}\\n\\n\\n/**\\n * @title Debt adapter for Aave protocol (V2, variable debt).\\n * @dev Implementation of ProtocolAdapter interface.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ncontract AaveV2VariableDebtAdapter is ProtocolAdapter {\\n\\n    string public constant override adapterType = \\\"Debt\\\";\\n\\n    string public constant override tokenType = \\\"ERC20\\\";\\n\\n    address internal immutable addressesProvider_;\\n\\n    constructor(address addressesProvider) public {\\n        require(addressesProvider != address(0), \\\"Av2VDA: empty addressesProvider\\\");\\n\\n        addressesProvider_ = addressesProvider;\\n    }\\n\\n    /**\\n     * @return Amount of debt of the given account for the protocol.\\n     * @dev Implementation of ProtocolAdapter interface function.\\n     */\\n    function getBalance(address token, address account) external view override returns (uint256) {\\n        LendingPoolV2 pool = LendingPoolAddressesProvider(addressesProvider_).getLendingPool();\\n\\n        address stableDebtTokenAddress = pool.getReserveData(token).stableDebtTokenAddress;\\n\\n        return ERC20(stableDebtTokenAddress).balanceOf(account);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adapterType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AaveV2VariableDebtAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000b53c1a33016b2dc2ff3653530bff1848a515c8c5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}