{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/wz/c_r_y_p_t_o/l7l/contracts/ResolutionAlarmCron.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity >=0.6.0;\\n\\nimport { GovernanceInterface } from \\\"./interfaces/GovernanceInterface.sol\\\";\\nimport { LotteryInterface } from \\\"./interfaces/LotteryInterface.sol\\\";\\n\\n/** \\n * @title Helper contract to restart lotteries after fixed periods of time using external cronjob.\\n * @dev Resolve lottery results periodically.\\n */\\ncontract ResolutionAlarmCron {\\n    GovernanceInterface public immutable TrustedGovernance;\\n    LotteryInterface public TrustedLottery;\\n\\n    mapping(address => bool) public alarmNodes;\\n\\n    modifier onlyAlarmNodes() {\\n        require(alarmNodes[msg.sender], \\\"Only alarm nodes\\\");\\n        _;\\n    }\\n\\n    modifier onlyDAO() {\\n        require(msg.sender == TrustedGovernance.owner(), \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /** \\n     * @dev L7L DAO should be in charge of Alarm contract.\\n     *\\n     * @param _governance Governance contract address.\\n     */\\n    constructor(address _governance) public {\\n        TrustedGovernance = GovernanceInterface(_governance);\\n    }\\n\\n    /**\\n     * @dev Set lottery contract controlled by this alarm,\\n     * unprotected because called once.\\n     *\\n     * @param _lottery Lottery contract to be alarmed.\\n     */\\n    function initialize(address _lottery) external {\\n        require(address(TrustedLottery) == address(0), \\\"Lottery is immutable\\\");\\n\\n        TrustedLottery = LotteryInterface(_lottery);\\n    }\\n\\n    /**\\n     * @dev Lottery should fulfill in lotteryPeriod minutes, \\n     * not used in cron resolvers, preserved for interface consistency.\\n     * \\n     * Lottery period is defined on alarm node side.\\n     *\\n     * @param _period Minutes until lottery resolution.\\n     */\\n    function setAlarm(uint32 _period) external {}\\n\\n    /** \\n     * @dev Checks if game is ready for resolution.\\n     */\\n    function canResolve() public view returns (bool) {\\n        TrustedLottery.canResolve();\\n    }\\n\\n    /** \\n     * @dev Call resolution lottery function when alarm notification comes from Chainlink.\\n     */\\n    function fulfillAlarm() external onlyAlarmNodes {\\n        TrustedLottery.results();\\n    }\\n\\n    /** \\n     * @dev Checks if game is ready to continue after resolution.\\n     */\\n    function canContinue() public view returns (bool) {\\n        TrustedLottery.canContinue();\\n    }\\n\\n    /** \\n     * @dev Call resolution lottery function when alarm notification comes from Chainlink.\\n     */\\n    function continueGame() external onlyAlarmNodes {\\n        TrustedLottery.continueGame();\\n    }\\n\\n    /** \\n     * @dev Register alarm node.\\n     *\\n     * @param _alarmNode Enable alarm node.\\n     */\\n    function enableAlarmNode(address _alarmNode) external onlyDAO {\\n        alarmNodes[_alarmNode] = true;\\n    }\\n\\n    /** \\n     * @dev Unregister alarm node.\\n     *\\n     * @param _alarmNode Disable alarm node.\\n     */\\n    function disableAlarmNode(address _alarmNode) external onlyDAO {\\n        alarmNodes[_alarmNode] = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/wz/c_r_y_p_t_o/l7l/contracts/interfaces/GovernanceInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity >=0.6.0;\\n\\ninterface GovernanceInterface {\\n    function owner() external view returns (address);\\n    function manager() external view returns (address);\\n    function isManagement(address) external view returns (bool);\\n    function beneficiary() external view returns (address payable);\\n    function treasuryContract() external view returns (address);\\n    function lotteryContracts(address) external view returns (bool);\\n    function timeToClaimBooty() external view returns (uint);\\n}\"\r\n    },\r\n    \"/Users/wz/c_r_y_p_t_o/l7l/contracts/interfaces/LotteryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity >=0.6.0;\\n\\ninterface LotteryInterface {\\n    function fulfillRandom(uint) external;\\n    function canResolve() external view returns(bool);\\n    function results() external;\\n    function canContinue() external view returns(bool);\\n    function continueGame() external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TrustedGovernance\",\"outputs\":[{\"internalType\":\"contract GovernanceInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TrustedLottery\",\"outputs\":[{\"internalType\":\"contract LotteryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alarmNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canContinue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canResolve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"continueGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alarmNode\",\"type\":\"address\"}],\"name\":\"disableAlarmNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alarmNode\",\"type\":\"address\"}],\"name\":\"enableAlarmNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fulfillAlarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lottery\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"setAlarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ResolutionAlarmCron","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e60fb30a5988495789281dafd8ab47f62af0fee3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}