{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ERC20 {\\n    function approve(address, uint256) external returns (bool);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Protocol adapter interface.\\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ninterface ProtocolAdapter {\\n\\n    /**\\n     * @dev MUST return \\\"Asset\\\" or \\\"Debt\\\".\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function adapterType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return token type (default is \\\"ERC20\\\").\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function tokenType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\\n     */\\n    function getBalance(address token, address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/harvest/HarvestStakingAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport { ERC20 } from \\\"../../ERC20.sol\\\";\\nimport { ProtocolAdapter } from \\\"../ProtocolAdapter.sol\\\";\\n\\n\\n/**\\n * @dev StakingRewards contract interface.\\n * Only the functions required for YearnStakingV1Adapter contract are added.\\n * The StakingRewards contract is available here\\n * github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol.\\n */\\ninterface StakingRewards {\\n    function earned(address) external view returns (uint256);\\n}\\n\\n\\n/**\\n * @title Adapter for Harvest protocol.\\n * @dev Implementation of ProtocolAdapter interface.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ncontract HarvestStakingAdapter is ProtocolAdapter {\\n\\n    string public constant override adapterType = \\\"Asset\\\";\\n\\n    string public constant override tokenType = \\\"ERC20\\\";\\n\\n    address internal constant FARM = 0xa0246c9032bC3A600820415aE600c6388619A14D;\\n    address internal constant UNI_FARM_USDC = 0x514906FC121c7878424a5C928cad1852CC545892;\\n    address internal constant F_WBTC = 0x5d9d25c7C457dD82fc8668FFC6B9746b674d4EcB;\\n    address internal constant F_WETH = 0xFE09e53A81Fe2808bc493ea64319109B5bAa573e;\\n    address internal constant F_DAI = 0xab7FA2B2985BCcfC13c6D86b1D5A17486ab1e04C;\\n    address internal constant F_USDC = 0xf0358e8c3CD5Fa238a29301d0bEa3D63A17bEdBE;\\n    address internal constant F_USDT = 0x053c80eA73Dc6941F518a68E2FC52Ac45BDE7c9C;\\n    address internal constant F_RENBTC = 0xC391d1b08c1403313B0c28D47202DFDA015633C4;\\n    address internal constant F_CRV_RENWBTC = 0x9aA8F427A17d6B0d91B6262989EdC7D45d6aEdf8;\\n    address internal constant F_UNI_WETH_USDT = 0x7DDc3ffF0612E75Ea5ddC0d6Bd4e268f70362Cff;\\n    address internal constant F_UNI_WETH_USDC = 0xA79a083FDD87F73c2f983c5551EC974685D6bb36;\\n    address internal constant F_UNI_WETH_DAI = 0x307E2752e8b8a9C29005001Be66B1c012CA9CDB7;\\n    address internal constant F_UNI_WETH_WBTC = 0x01112a60f427205dcA6E229425306923c3Cc2073;\\n    address internal constant F_TUSD = 0x7674622c63Bee7F46E86a4A5A18976693D54441b;\\n    address internal constant F_SUSHI_WBTC_TBTC = 0xF553E1f826f42716cDFe02bde5ee76b2a52fc7EB;\\n\\n    address internal constant FARM_POOL = 0x8f5adC58b32D4e5Ca02EAC0E293D35855999436C;\\n    address internal constant FARM_POOL_V2 = 0x25550Cccbd68533Fa04bFD3e3AC4D09f9e00Fc50;\\n    address internal constant UNI_FARM_USDC_POOL = 0x99b0d6641A63Ce173E6EB063b3d3AED9A35Cf9bf;\\n    address internal constant F_WBTC_POOL = 0x917d6480Ec60cBddd6CbD0C8EA317Bcc709EA77B;\\n    address internal constant F_WETH_POOL = 0x3DA9D911301f8144bdF5c3c67886e5373DCdff8e;\\n    address internal constant F_DAI_POOL = 0x15d3A64B2d5ab9E152F16593Cdebc4bB165B5B4A;\\n    address internal constant F_USDC_POOL = 0x4F7c28cCb0F1Dbd1388209C67eEc234273C878Bd;\\n    address internal constant F_USDT_POOL = 0x6ac4a7AB91E6fD098E13B7d347c6d4d1494994a2;\\n    address internal constant F_RENBTC_POOL = 0x7b8Ff8884590f44e10Ea8105730fe637Ce0cb4F6;\\n    address internal constant F_CRV_RENWBTC_POOL = 0xA3Cf8D1CEe996253FAD1F8e3d68BDCba7B3A3Db5;\\n    address internal constant F_UNI_WETH_USDT_POOL = 0x75071F2653fBC902EBaff908d4c68712a5d1C960;\\n    address internal constant F_UNI_WETH_USDC_POOL = 0x156733b89Ac5C704F3217FEe2949A9D4A73764b5;\\n    address internal constant F_UNI_WETH_DAI_POOL = 0x7aeb36e22e60397098C2a5C51f0A5fB06e7b859c;\\n    address internal constant F_UNI_WETH_WBTC_POOL = 0xF1181A71CC331958AE2cA2aAD0784Acfc436CB93;\\n    address internal constant F_TUSD_POOL = 0xeC56a21CF0D7FeB93C25587C12bFfe094aa0eCdA;\\n    address internal constant F_SUSHI_WBTC_TBTC_POOL = 0x9523FdC055F503F73FF40D7F66850F409D80EF34;\\n\\n\\n    /**\\n     * @return Amount of staked tokens / rewards earned after staking for a given account.\\n     * @dev Implementation of ProtocolAdapter interface function.\\n     */\\n    function getBalance(address token, address account) external view override returns (uint256) {\\n        if (token == FARM) {\\n            uint256 totalRewards = 0;\\n\\n            totalRewards += ERC20(FARM_POOL).balanceOf(account);\\n            totalRewards += StakingRewards(FARM_POOL).earned(account);\\n            totalRewards += ERC20(FARM_POOL_V2).balanceOf(account);\\n            totalRewards += StakingRewards(UNI_FARM_USDC_POOL).earned(account);\\n            totalRewards += StakingRewards(F_WBTC_POOL).earned(account);\\n            totalRewards += StakingRewards(F_WETH_POOL).earned(account);\\n            totalRewards += StakingRewards(F_DAI_POOL).earned(account);\\n            totalRewards += StakingRewards(F_USDC_POOL).earned(account);\\n            totalRewards += StakingRewards(F_USDT_POOL).earned(account);\\n            totalRewards += StakingRewards(F_RENBTC_POOL).earned(account);\\n            totalRewards += StakingRewards(F_CRV_RENWBTC_POOL).earned(account);\\n            totalRewards += StakingRewards(F_UNI_WETH_USDT_POOL).earned(account);\\n            totalRewards += StakingRewards(F_UNI_WETH_USDC_POOL).earned(account);\\n            totalRewards += StakingRewards(F_UNI_WETH_DAI_POOL).earned(account);\\n            totalRewards += StakingRewards(F_UNI_WETH_WBTC_POOL).earned(account);\\n            totalRewards += StakingRewards(F_TUSD_POOL).earned(account);\\n            totalRewards += StakingRewards(F_SUSHI_WBTC_TBTC_POOL).earned(account);\\n\\n            return totalRewards;\\n        } else if (token == UNI_FARM_USDC) {\\n            return ERC20(UNI_FARM_USDC_POOL).balanceOf(account);\\n        } else if (token == F_WBTC) {\\n            return ERC20(F_WBTC_POOL).balanceOf(account);\\n        } else if (token == F_WETH) {\\n            return ERC20(F_WETH_POOL).balanceOf(account);\\n        } else if (token == F_DAI) {\\n            return ERC20(F_DAI_POOL).balanceOf(account);\\n        } else if (token == F_USDC) {\\n            return ERC20(F_USDC_POOL).balanceOf(account);\\n        } else if (token == F_USDT) {\\n            return ERC20(F_USDT_POOL).balanceOf(account);\\n        } else if (token == F_RENBTC) {\\n            return ERC20(F_RENBTC_POOL).balanceOf(account);\\n        } else if (token == F_CRV_RENWBTC) {\\n            return ERC20(F_CRV_RENWBTC_POOL).balanceOf(account);\\n        } else if (token == F_UNI_WETH_USDT) {\\n            return ERC20(F_UNI_WETH_USDT_POOL).balanceOf(account);\\n        } else if (token == F_UNI_WETH_USDC) {\\n            return ERC20(F_UNI_WETH_USDC_POOL).balanceOf(account);\\n        } else if (token == F_UNI_WETH_DAI) {\\n            return ERC20(F_UNI_WETH_DAI_POOL).balanceOf(account);\\n        } else if (token == F_UNI_WETH_WBTC) {\\n            return ERC20(F_UNI_WETH_WBTC_POOL).balanceOf(account);\\n        } else if (token == F_TUSD) {\\n            return ERC20(F_TUSD_POOL).balanceOf(account);\\n        } else if (token == F_SUSHI_WBTC_TBTC) {\\n            return ERC20(F_SUSHI_WBTC_TBTC_POOL).balanceOf(account);\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"adapterType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HarvestStakingAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}