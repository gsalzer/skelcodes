{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\ninterface IERC20 {\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Pausable {\r\n        event Paused();\r\n        event Unpaused();\r\n        bool private _paused;\r\n        constructor ()                                  { _paused = false; }\r\n        function paused() public view returns (bool)    { return _paused; }\r\n        modifier whenNotPaused()                        { require(!_paused, \"Pausable: paused\"); _; }\r\n        modifier whenPaused()                           { require(_paused, \"Pausable: not paused\"); _; }\r\n        function _pause() internal virtual whenNotPaused{ _paused = true; emit Paused(); }\r\n        function _unpause() internal virtual whenPaused { _paused = false; emit Unpaused(); }\r\n}\r\n\r\ncontract AgorasToken is IERC20, Pausable {\r\n        mapping (address => uint256) private _balances;\r\n        mapping (address => mapping (address => uint256)) private _allowances;\r\n        mapping (address => bool) private _locked;\r\n        uint256 private _totalSupply;\r\n        string private _name;\r\n        string private _symbol;\r\n        uint8 private _decimals;\r\n        address private _owner;\r\n\r\n        constructor() {\r\n                _name = 'Agoras Token';\r\n                _symbol = 'AGRS';\r\n                _decimals = 8;\r\n                _totalSupply = 42000000 * (10**_decimals);\r\n                _balances[msg.sender] = _totalSupply;\r\n                _owner = msg.sender;\r\n        }\r\n\r\n        function name() public view returns (string memory)     { return _name; }\r\n        function symbol() public view returns (string memory) { return _symbol; }\r\n        function decimals() public view returns (uint8) { return _decimals; }\r\n        function totalSupply() public view override returns (uint256) { return _totalSupply; }\r\n        function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n        function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n                require(!_locked[msg.sender], \"AgorasToken locked sender\");\r\n                _transfer(msg.sender, recipient, amount);\r\n                return true;\r\n        }\r\n        function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n                return _allowances[owner][spender];\r\n        }\r\n        function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n                _approve(msg.sender, spender, amount);\r\n                return true;\r\n        }\r\n\r\n        function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n                require(!_locked[sender], \"AgorasToken locked from sender\");\r\n                require(_allowances[sender][msg.sender] >= amount, \"AgorasToken transfer amount exceeds allowance\");\r\n                _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n                _transfer(sender, recipient, amount);\r\n                return true;\r\n        }\r\n\r\n        function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n                require(owner != address(0), \"AgorasToken approve from the zero address\");\r\n                require(spender != address(0), \"AgorasToken approve to the zero address\");\r\n                _allowances[owner][spender] = amount;\r\n                emit Approval(owner, spender, amount);\r\n        }\r\n\r\n        function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n                //_beforeTokenTransfer();\r\n                require(paused() == false, \"AgorasToken is Paused\");\r\n                require(sender != address(0), \"AgorasToken transfer from the zero address\");\r\n                require(recipient != address(0), \"AgorasToken transfer to the zero address\");\r\n                require(_balances[sender] >= amount, \"AgorasToken transfer amount exceeds balance\");\r\n                require(_balances[recipient] + amount >= _balances[recipient], \"AgorasToken addition overflow\");\r\n\r\n                _balances[sender] -= amount;\r\n                _balances[recipient] += amount;\r\n                emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n                uint256 c = _allowances[msg.sender][spender] + addedValue;\r\n                require(c >= _allowances[msg.sender][spender], \"AgorasToken addition overflow\");\r\n                _approve(msg.sender, spender, c);\r\n                return true;\r\n        }\r\n\r\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n                require(_allowances[msg.sender][spender] >= subtractedValue, \"AgorasToken decreased allowance below zero\");\r\n                _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n                return true;\r\n        }\r\n\r\n        function _beforeTokenTransfer() internal virtual { }\r\n\r\n        function pause()  public virtual returns (bool) {\r\n                require(msg.sender == _owner, \"AgorasToken: pause request from non owner\");\r\n                _pause();\r\n                return true;\r\n        }\r\n\r\n        function unpause() public virtual returns (bool) {\r\n                require(msg.sender == _owner, \"AgorasToken: unpause request from non owner\");\r\n                _unpause();\r\n                return true;\r\n        }\r\n\r\n        event Mint(uint256 amount);\r\n\r\n        function mint(uint256 amount) public virtual returns (bool) {\r\n                require(paused()==false, \"AgorasToken is Paused\");\r\n                require(msg.sender == _owner, \"AgorasToken: mint from non owner \");\r\n                require(_totalSupply + amount >= _totalSupply, \"AgorasToken addition overflow\");\r\n                require(_balances[_owner] + amount >= amount, \"AgorasToken addition overflow\");\r\n                _totalSupply += amount;\r\n                _balances[_owner] += amount;\r\n                emit Mint(amount);\r\n                return true;\r\n        }\r\n\r\n        function updateNameSymbol(string calldata newname, string calldata newsymbol) public virtual returns (bool) {\r\n                require(paused()==false, \"AgorasToken is Paused\");\r\n                require(msg.sender == _owner, \"AgorasToken: update from non owner\");\r\n                require(bytes(newname).length <= 32, \"AgorasToken: name too long\");\r\n                require(bytes(newname).length > 0, \"AgorasToken: empty name\");\r\n                require(bytes(newsymbol).length <= 8, \"AgorasToken: symbol too long\");\r\n                require(bytes(newsymbol).length > 0, \"AgorasToken: empty symbol\");\r\n                _name = newname;\r\n                _symbol = newsymbol;\r\n                return true;\r\n        }\r\n\r\n        function isLocked(address addr) public virtual returns (bool) {\r\n                return _locked[addr];\r\n        }\r\n\r\n        function addLock(address addr) public virtual returns (bool) {\r\n                require(paused()==false, \"AgorasToken is Paused\");\r\n                require(msg.sender == _owner, \"AgorasToken: update from non owner\");\r\n                _locked[addr] = true;\r\n                emit Locked(addr);\r\n                return true;\r\n        }\r\n\r\n        function removeLock(address addr) public virtual returns (bool) {\r\n                require(paused()==false, \"AgorasToken is Paused\");\r\n                require(msg.sender == _owner, \"AgorasToken: update from non owner\");\r\n                _locked[addr] = false;\r\n                emit Unlocked(addr);\r\n                return true;\r\n        }\r\n\r\n        event Locked(address addr);\r\n        event Unlocked(address addr);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newsymbol\",\"type\":\"string\"}],\"name\":\"updateNameSymbol\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AgorasToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3fd3b53fd42bd998ef47c8d10224988b5aadbe0c5090e3856fb135e69396489b"}]}