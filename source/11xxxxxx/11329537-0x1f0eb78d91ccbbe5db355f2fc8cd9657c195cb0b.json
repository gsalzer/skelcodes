{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.2;\r\n\r\ninterface IUniswapV2Callee {\r\n  function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\n\r\n\r\ncontract TriTrade is IUniswapV2Callee {\r\n\r\n    address owner;\r\n\r\n    address pair1 = address(1);\r\n    address pair2 = address(1);\r\n    address pair3 = address(1);\r\n\r\n    address token1 = address(1);\r\n    address token2 = address(1);\r\n    address token3 = address(1);\r\n\r\n    constructor(address _owner) public {\r\n      owner = _owner;\r\n    }\r\n\r\n    // Fallback must be payable\r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n\r\n    function performTrade(\r\n      address _pair1, \r\n      address _pair2, \r\n      address _pair3,\r\n      address _token1,\r\n      address _token2,\r\n      address _token3,\r\n      uint256 _amountToken1Out) public {\r\n        pair1 = _pair1;\r\n        pair2 = _pair2;\r\n        pair3 = _pair3;\r\n        token1 = _token1;\r\n        token2 = _token2;\r\n        token3 = _token3;\r\n\r\n        simpleFlashSwap(pair3, token1, token3, _amountToken1Out);\r\n        uint profit = IERC20(token1).balanceOf(address(this));\r\n        IERC20(token1).transfer(owner, profit);\r\n\r\n        pair1 =  address(1);\r\n        pair2 =  address(1);\r\n        pair3 =  address(1);\r\n        token1 =  address(1);\r\n        token2 =  address(1);\r\n        token3 =  address(1);\r\n    }\r\n\r\n\r\n    // @notice Function is called by the Uniswap V2 pair's `swap` function\r\n    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) override external {\r\n        // decode data\r\n        (\r\n            address _tokenBorrow,\r\n            address _tokenPay,\r\n            uint _amount,\r\n            bool _isPair1,\r\n            bool _isPair2\r\n        ) = abi.decode(_data, (address, address, uint, bool, bool));\r\n\r\n        address tokenPair = _isPair1 ? pair1 : _isPair2 ? pair2 : pair3;\r\n\r\n        // access control\r\n        require(msg.sender == tokenPair, \"only permissioned UniswapV2 pair can call\");\r\n        require(_sender == address(this), \"only this contract may initiate\");\r\n\r\n        simpleFlashSwapExecute(tokenPair, _tokenBorrow, _tokenPay, _amount);\r\n        return;\r\n\r\n        // NOOP to silence compiler \"unused parameter\" warning\r\n        if (false) {\r\n            _amount0;\r\n            _amount1;\r\n        }\r\n    }\r\n\r\n    // @notice This function is used when either the _tokenBorrow or _tokenPay is WETH or ETH\r\n    // @dev Since ~all tokens trade against WETH (if they trade at all), we can use a single UniswapV2 pair to\r\n    //     flash-borrow and repay with the requested tokens.\r\n    // @dev This initiates the flash borrow. See `simpleFlashSwapExecute` for the code that executes after the borrow.\r\n    function simpleFlashSwap(\r\n        address _pair, \r\n        address _tokenBorrow,\r\n        address _tokenPay,\r\n        uint _amount\r\n    ) private {\r\n        address _token0 = IUniswapV2Pair(_pair).token0();\r\n        address _token1 = IUniswapV2Pair(_pair).token1();\r\n        uint amount0Out = _tokenBorrow == _token0 ? _amount : 0;\r\n        uint amount1Out = _tokenBorrow == _token1 ? _amount : 0;\r\n        bytes memory data = abi.encode(\r\n            _tokenBorrow,\r\n            _tokenPay,\r\n            _amount,\r\n            _pair == pair1,\r\n            _pair == pair2\r\n        );\r\n        IUniswapV2Pair(_pair).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // @notice This is the code that is executed after `simpleFlashSwap` initiated the flash-borrow\r\n    // @dev When this code executes, this contract will hold the flash-borrowed _amount of _tokenBorrow\r\n    function simpleFlashSwapExecute(\r\n        address _pairAddress,\r\n        address _tokenBorrow,\r\n        address _tokenPay,\r\n        uint _amount\r\n    ) private {\r\n        uint pairBalanceTokenBorrow = IERC20(_tokenBorrow).balanceOf(_pairAddress);\r\n        uint pairBalanceTokenPay = IERC20(_tokenPay).balanceOf(_pairAddress);\r\n        uint amountToRepay = ((1000 * pairBalanceTokenPay * _amount) / (997 * pairBalanceTokenBorrow)) + 1;\r\n\r\n        if (_pairAddress == pair3) {\r\n          simpleFlashSwap(pair2, token3, token2, amountToRepay);\r\n        } else if (_pairAddress == pair2) {\r\n          simpleFlashSwap(pair1, token2, token1, amountToRepay);\r\n        }\r\n\r\n        IERC20(_tokenPay).transfer(_pairAddress, amountToRepay);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToken1Out\",\"type\":\"uint256\"}],\"name\":\"performTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TriTrade","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000884823d4bb4eb5d9e926140e1227cc3d792a00a8","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://25038103421e943f2415049e1e18dd96cc9aeaeff620a9f3b9a5aea9b25f5edc"}]}