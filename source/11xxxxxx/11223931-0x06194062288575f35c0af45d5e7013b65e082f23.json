{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    mapping (address => uint) private _balances;\r\n\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint value) internal {\r\n        uint newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint value) internal {\r\n        uint newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IHegicOptions {\r\n    event Create(\r\n        uint indexed id,\r\n        address indexed account,\r\n        uint totalFee\r\n    );\r\n\r\n    event Exercise(uint indexed id, uint profit);\r\n    event Expire(uint indexed id, uint premium);\r\n    enum State {Inactive, Active, Exercised, Expired}\r\n    enum OptionType {Invalid, Put, Call}\r\n\r\n    struct Option {\r\n        State state;\r\n        uint lockID;\r\n        address payable holder;\r\n        uint strike;\r\n        uint amount;\r\n        uint lockedAmount;\r\n        uint premium;\r\n        uint expiration;\r\n        OptionType optionType;\r\n    }\r\n\r\n    function options(uint) external view returns (\r\n        State state,\r\n        uint lockID,\r\n        address payable holder,\r\n        uint strike,\r\n        uint amount,\r\n        uint lockedAmount,\r\n        uint premium,\r\n        uint expiration,\r\n        OptionType optionType\r\n    );\r\n}\r\n\r\ninterface IUniswapV2SlidingOracle {\r\n    function quote(address tokenIn, uint amountIn, address tokenOut, uint granularity) external view returns (uint amountOut);\r\n}\r\n\r\ninterface ICurveFi {\r\n    function get_virtual_price() external view returns (uint);\r\n\r\n    function add_liquidity(\r\n        // sBTC pool\r\n        uint[3] calldata amounts,\r\n        uint min_mint_amount\r\n    ) external;\r\n}\r\ninterface IyVault {\r\n    function getPricePerFullShare() external view returns (uint);\r\n    function depositAll() external;\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\ninterface IHegicERCPool {\r\n    function lock(uint id, uint amount, uint premium) external;\r\n    function unlock(uint id) external;\r\n    function send(uint id, address payable to, uint amount) external;\r\n    function getNextID() external view returns (uint);\r\n    function RESERVE() external view returns (address);\r\n}\r\n\r\n// File: contracts/Options/HegicOptions.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * Hegic\r\n * Copyright (C) 2020 Hegic Protocol\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @author 0mllwntrmt3 & @andrecronje\r\n * @title Hegic Generic Bidirectional (Call and Put) Options\r\n * @notice Hegic Protocol Options Contract\r\n */\r\ncontract HegicOptions is IHegicOptions {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping(address => uint[]) public optionsIndexes;\r\n    Option[] public override options;\r\n    uint immutable public impliedVolRate;\r\n    uint immutable internal contractCreationTimestamp;\r\n    \r\n    \r\n    uint internal constant IV_DECIMALS = 1e8;\r\n    IUniswapV2SlidingOracle public constant ORACLE = IUniswapV2SlidingOracle(0xCA2E2df6A7a7Cf5bd19D112E8568910a6C2D3885);\r\n    uint8 constant public GRANULARITY = 8;\r\n    \r\n    IERC20 constant public DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IERC20 constant public USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IERC20 constant public USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address constant public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    \r\n    ICurveFi constant public CURVE = ICurveFi(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\r\n    IyVault constant public YEARN = IyVault(0x9cA85572E6A3EbF24dEDd195623F188735A5179f);\r\n    IERC20 constant public CRV3 = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\r\n    address immutable public ASSET;\r\n    uint immutable public ONE;\r\n    IHegicERCPool immutable public POOL;\r\n    \r\n    uint public cumulativeStrike;\r\n    uint public cumulativeAmount;\r\n    uint public cumulativeCalls;\r\n    uint public cumulativePuts;\r\n    \r\n    constructor(\r\n        IHegicERCPool _pool,\r\n        address _asset\r\n    ) public {\r\n        POOL = _pool;\r\n        ASSET = _asset;\r\n        ONE = uint(10)**ERC20(_asset).decimals();\r\n        impliedVolRate = 4500;\r\n        contractCreationTimestamp = block.timestamp;\r\n    }\r\n    \r\n    /**\r\n     * @notice Provides a quote of how much output can be expected given the inputs\r\n     * @param tokenIn the asset being received\r\n     * @param amountIn the amount of tokenIn being provided\r\n     * @return minOut the minimum amount of liquidity to send\r\n     */\r\n    function quote(address tokenIn, uint amountIn) public view returns (uint minOut) {\r\n        if (tokenIn != WETH) {\r\n            amountIn = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);\r\n        }\r\n        minOut = ORACLE.quote(WETH, amountIn, address(DAI), GRANULARITY);\r\n    }\r\n    \r\n    function optionsLength() external view returns (uint) {\r\n        return options.length;\r\n    }\r\n    \r\n    function userOptionsLength(address owner) external view returns (uint) {\r\n        return optionsIndexes[owner].length;\r\n    }\r\n    \r\n    /**\r\n     * @notice Creates a new option\r\n     * @param period Option period in seconds (1 days <= period <= 4 weeks)\r\n     * @param amount Option amount\r\n     * @param strike Strike price of the option\r\n     * @param optionType Call or Put option type\r\n     * @return optionID Created option's ID\r\n     */\r\n    function create(\r\n        address asset,\r\n        uint period,\r\n        uint amount, // amount of the underlying asset (address, amountIn)\r\n        uint strike, // price in DAI as per quote(address, uint)\r\n        uint maxFee,\r\n        OptionType optionType\r\n    ) external returns (uint optionID)  {\r\n        require(\r\n            asset == address(DAI) || asset == address(USDC) || asset == address(USDT), \r\n            \"invalid asset\"\r\n        );\r\n        require(\r\n            optionType == OptionType.Call || optionType == OptionType.Put,\r\n            \"Wrong option type\"\r\n        );\r\n        require(period >= 1 days, \"Period is too short\");\r\n        require(period <= 4 weeks, \"Period is too long\");\r\n        \r\n        cumulativeAmount = cumulativeAmount.add(amount);\r\n        cumulativeStrike = cumulativeStrike.add(strike.mul(amount));\r\n        \r\n        uint amountInDAI = quote(ASSET, amount);\r\n        \r\n        if (optionType == OptionType.Call) {\r\n            cumulativeCalls = cumulativeCalls.add(amountInDAI);\r\n        } else  {\r\n            cumulativePuts = cumulativePuts.add(amountInDAI);\r\n        }\r\n        \r\n        (uint total,, uint strikeFee, ) =\r\n            fees(period, amountInDAI, strike, optionType);\r\n        \r\n        uint _fee = convertDAI2Asset(asset, total);\r\n        \r\n        require(amount > strikeFee, \"price difference is too large\");\r\n        require(_fee < maxFee, \"fee exceeds max fee\");\r\n        optionID = options.length;\r\n        \r\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), _fee);\r\n        convertToY3P();\r\n\r\n        Option memory option = Option(\r\n            State.Active, // state\r\n            POOL.getNextID(), // lockID\r\n            msg.sender, // holder\r\n            strike,\r\n            amount,\r\n            DAI2Y3P(amountInDAI),\r\n            YEARN.balanceOf(address(this)), // premium\r\n            block.timestamp + period, // expiration\r\n            optionType\r\n        );\r\n\r\n        \r\n        \r\n        options.push(option);\r\n        POOL.lock(option.lockID, option.lockedAmount, option.premium);\r\n        optionsIndexes[msg.sender].push(optionID);\r\n\r\n        emit Create(optionID, msg.sender, total);\r\n    }\r\n    \r\n    function convertDAI2Asset(address asset, uint total) public view returns (uint) {\r\n        return total.mul(ERC20(asset).decimals()).div(ERC20(address(DAI)).decimals());\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers an active option\r\n     * @param optionID ID of your option\r\n     * @param newHolder Address of new option holder\r\n     */\r\n    function transfer(uint optionID, address payable newHolder) external {\r\n        Option storage option = options[optionID];\r\n\r\n        require(newHolder != address(0), \"new holder address is zero\");\r\n        require(option.expiration >= block.timestamp, \"Option has expired\");\r\n        require(option.holder == msg.sender, \"Wrong msg.sender\");\r\n        require(option.state == State.Active, \"Only active option could be transferred\");\r\n\r\n        option.holder = newHolder;\r\n    }\r\n\r\n    /**\r\n     * @notice Exercises an active option\r\n     * @param optionID ID of your option\r\n     */\r\n    function exercise(uint optionID) external {\r\n        Option storage option = options[optionID];\r\n\r\n        require(option.expiration >= block.timestamp, \"Option has expired\");\r\n        require(option.holder == msg.sender, \"Wrong msg.sender\");\r\n        require(option.state == State.Active, \"Wrong state\");\r\n\r\n        option.state = State.Exercised;\r\n        uint profit = _payProfit(optionID);\r\n        \r\n        cumulativeStrike = cumulativeStrike.sub(option.strike);\r\n        cumulativeAmount = cumulativeAmount.sub(option.amount);\r\n        if (option.optionType == OptionType.Call) {\r\n            cumulativeCalls = cumulativeCalls.sub(option.lockedAmount);\r\n        } else if (option.optionType == OptionType.Put) {\r\n            cumulativePuts = cumulativePuts.sub(option.lockedAmount);\r\n        }\r\n\r\n        emit Exercise(optionID, profit);\r\n    }\r\n\r\n    /**\r\n     * @notice Unlocks an array of options\r\n     * @param optionIDs array of options\r\n     */\r\n    function unlockAll(uint[] calldata optionIDs) external {\r\n        uint arrayLength = optionIDs.length;\r\n        uint _cumulativeStrike;\r\n        uint _cumulativeAmount;\r\n        uint _cumulativeCalls; \r\n        uint _cumulativePuts;\r\n        \r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            (uint _strike, uint _amount, uint _calls, uint _puts) = _unlock(optionIDs[i]);\r\n            _cumulativeStrike = _cumulativeStrike.add(_strike);\r\n            _cumulativeAmount = _cumulativeAmount.add(_amount);\r\n            _cumulativeCalls = _cumulativeCalls.add(_calls);\r\n            _cumulativePuts = _cumulativePuts.add(_puts);\r\n        }\r\n        \r\n        cumulativeStrike = cumulativeStrike.sub(_cumulativeStrike);\r\n        cumulativeAmount = cumulativeAmount.sub(_cumulativeAmount);\r\n        cumulativeCalls = cumulativeCalls.sub(_cumulativeCalls);\r\n        cumulativePuts = cumulativePuts.sub(_cumulativePuts);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the ERC pool contract to receive and send tokens\r\n     */\r\n    function approve() public {\r\n        IERC20(POOL.RESERVE()).safeApprove(address(POOL), uint(0));\r\n        \r\n        DAI.safeApprove(address(CURVE), uint(0));\r\n        USDT.safeApprove(address(CURVE), uint(0));\r\n        USDC.safeApprove(address(CURVE), uint(0));\r\n        CRV3.safeApprove(address(YEARN), uint(0));\r\n        \r\n        IERC20(POOL.RESERVE()).safeApprove(address(POOL), uint(-1));\r\n        \r\n        DAI.safeApprove(address(CURVE), uint(-1));\r\n        USDT.safeApprove(address(CURVE), uint(-1));\r\n        USDC.safeApprove(address(CURVE), uint(-1));\r\n        CRV3.safeApprove(address(YEARN), uint(-1));\r\n    }\r\n\r\n    /**\r\n     * @notice Used for getting the actual options prices\r\n     * @param period Option period in seconds (1 days <= period <= 4 weeks)\r\n     * @param amount Option amount\r\n     * @param strike Strike price of the option\r\n     * @return total Total price to be paid\r\n     * @return settlementFee Amount to be distributed to the HEGIC token holders\r\n     * @return strikeFee Amount that covers the price difference in the ITM options\r\n     * @return periodFee Option period fee amount\r\n     */\r\n    function fees(\r\n        uint period,\r\n        uint amount,\r\n        uint strike,\r\n        OptionType optionType\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint total,\r\n            uint settlementFee,\r\n            uint strikeFee,\r\n            uint periodFee\r\n        )\r\n    {\r\n        uint _cumulativeStrike = cumulativeStrike;\r\n        uint currentPrice = quote(ASSET, ONE);\r\n        uint _avgStrike = _cumulativeStrike == 0 ? currentPrice : _cumulativeStrike.div(cumulativeAmount);\r\n        if (optionType == OptionType.Put) {\r\n            currentPrice = currentPrice.add(currentPrice).sub(_avgStrike);\r\n        } else if (optionType == OptionType.Call) {\r\n            currentPrice = currentPrice.add(_avgStrike).sub(currentPrice);\r\n        }\r\n        settlementFee = getSettlementFee(amount);\r\n        periodFee = getPeriodFee(amount, period, strike, currentPrice, optionType);\r\n        strikeFee = getStrikeFee(amount, strike, currentPrice, optionType);\r\n        total = periodFee.add(strikeFee).add(settlementFee);\r\n        uint _cumulativePuts = cumulativePuts;\r\n        uint _cumulativeCalls = cumulativeCalls;\r\n        if (optionType == OptionType.Put && _cumulativePuts > 0) {\r\n            total = total.mul(_cumulativePuts).div((_cumulativePuts.add(_cumulativeCalls)).div(2));\r\n        } else if (cumulativeCalls > 0) {\r\n            total = total.mul(_cumulativeCalls).div((_cumulativePuts.add(_cumulativeCalls)).div(2));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Unlock funds locked in the expired options\r\n     * @param optionID ID of the option\r\n     */\r\n    function unlock(uint optionID) external {\r\n        (uint _strike, uint _amount, uint _calls, uint _puts) = _unlock(optionID);\r\n        cumulativeStrike = cumulativeStrike.sub(_strike);\r\n        cumulativeAmount = cumulativeAmount.sub(_amount);\r\n        cumulativeCalls = cumulativeCalls.sub(_calls);\r\n        cumulativePuts = cumulativePuts.sub(_puts);\r\n    }\r\n    \r\n    function _unlock(uint optionID) internal returns (uint _strike, uint _amount, uint _calls, uint _puts) {\r\n        Option storage option = options[optionID];\r\n        require(option.expiration < block.timestamp, \"Option has not expired yet\");\r\n        require(option.state == State.Active, \"Option is not active\");\r\n        option.state = State.Expired;\r\n        POOL.unlock(optionID);\r\n        _strike = option.strike;\r\n        _amount = option.amount;\r\n        if (option.optionType == OptionType.Call) {\r\n            _calls = option.lockedAmount;\r\n        } else if (option.optionType == OptionType.Put) {\r\n            _puts = option.lockedAmount;\r\n        }\r\n        \r\n        emit Expire(optionID, option.premium);\r\n    }\r\n    \r\n    function price() external view returns (uint) {\r\n        return quote(ASSET, ONE);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates settlementFee\r\n     * @param amount Option amount\r\n     * @return fee Settlement fee amount\r\n     */\r\n    function getSettlementFee(uint amount)\r\n        internal\r\n        pure\r\n        returns (uint fee)\r\n    {\r\n        return amount / 100;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates periodFee\r\n     * @param amount Option amount\r\n     * @param period Option period in seconds (1 days <= period <= 4 weeks)\r\n     * @param strike Strike price of the option\r\n     * @param currentPrice Current price of BTC\r\n     * @return fee Period fee amount\r\n     *\r\n     * amount < 1e30        |\r\n     * impliedVolRate < 1e10| => amount * impliedVolRate * strike < 1e60 < 2^uint\r\n     * strike < 1e20 ($1T)  |\r\n     *\r\n     * in case amount * impliedVolRate * strike >= 2^256\r\n     * transaction will be reverted by the SafeMath\r\n     */\r\n    function getPeriodFee(\r\n        uint amount,\r\n        uint period,\r\n        uint strike,\r\n        uint currentPrice,\r\n        OptionType optionType\r\n    ) internal view returns (uint fee) {\r\n        if (optionType == OptionType.Put)\r\n            return amount\r\n                .mul(sqrt(period))\r\n                .mul(impliedVolRate)\r\n                .mul(strike)\r\n                .div(currentPrice)\r\n                .div(IV_DECIMALS);\r\n        else\r\n            return amount\r\n                .mul(sqrt(period))\r\n                .mul(impliedVolRate)\r\n                .mul(currentPrice)\r\n                .div(strike)\r\n                .div(IV_DECIMALS);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates strikeFee\r\n     * @param amount Option amount\r\n     * @param strike Strike price of the option\r\n     * @param currentPrice Current price of BTC\r\n     * @return fee Strike fee amount\r\n     */\r\n    function getStrikeFee(\r\n        uint amount,\r\n        uint strike,\r\n        uint currentPrice,\r\n        OptionType optionType\r\n    ) internal pure returns (uint fee) {\r\n        if (strike > currentPrice && optionType == OptionType.Put)\r\n            return strike.sub(currentPrice).mul(amount).div(currentPrice);\r\n        if (strike < currentPrice && optionType == OptionType.Call)\r\n            return currentPrice.sub(strike).mul(amount).div(currentPrice);\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Sends profits in RESERVE from the RESERVE pool to an option holder's address\r\n     * @param optionID A specific option contract id\r\n     */\r\n    function _payProfit(uint optionID)\r\n        internal\r\n        returns (uint profit)\r\n    {\r\n        Option memory option = options[optionID];\r\n        uint currentPrice = quote(ASSET, ONE);\r\n        if (option.optionType == OptionType.Call) {\r\n            require(option.strike <= currentPrice, \"Current price is too low\");\r\n            profit = currentPrice.sub(option.strike).mul(option.amount);\r\n        } else {\r\n            require(option.strike >= currentPrice, \"Current price is too high\");\r\n            profit = option.strike.sub(currentPrice).mul(option.amount);\r\n        }\r\n        if (profit > option.lockedAmount)\r\n            profit = option.lockedAmount;\r\n            \r\n        profit = DAI2Y3P(profit);\r\n        POOL.send(option.lockID, option.holder, profit);\r\n    }\r\n    \r\n    function DAI2Y3P(uint amount) public view returns (uint _yearn) {\r\n        uint _curve = amount.mul(1e18).div(CURVE.get_virtual_price());\r\n        _yearn = _curve.mul(1e18).div(YEARN.getPricePerFullShare());\r\n    }\r\n    \r\n    function convertToY3P() internal {\r\n        CURVE.add_liquidity([DAI.balanceOf(address(this)), USDC.balanceOf(address(this)), USDT.balanceOf(address(this))], 0);\r\n        YEARN.depositAll();\r\n    }\r\n\r\n    /**\r\n     * @return result Square root of the number\r\n     */\r\n    function sqrt(uint x) private pure returns (uint result) {\r\n        result = x;\r\n        uint k = x.div(2).add(1);\r\n        while (k < result) (result, k) = (k, x.div(k).add(k).div(2));\r\n    }\r\n}\r\n\r\ncontract HegicOptionsFactory {\r\n    address public governance;\r\n    address public pendingGovernance;\r\n    \r\n    mapping(address => address) public assetMap;\r\n    mapping(address => bool) public optionExists;\r\n    address[] public options;\r\n    \r\n    \r\n    constructor() public {\r\n        governance = msg.sender;\r\n    }\r\n    \r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"HegicOptionsFactory::setGovernance: !governance\");\r\n        pendingGovernance = _governance;\r\n    }\r\n    \r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance, \"HegicOptionsFactory::acceptGovernance: !pendingGovernance\");\r\n        governance = pendingGovernance;\r\n    }\r\n    \r\n    function all() external view returns (address[] memory) {\r\n        return options;\r\n    }\r\n    \r\n    function deploy(IHegicERCPool _pool, address _asset) external {\r\n        require(msg.sender == governance, \"HegicOptionsFactory::deploy: !governance\");\r\n        require(!optionExists[_asset], \"HegicOptionsFactory::deploy: !governance\");\r\n        address _option = address(new HegicOptions(_pool, _asset));\r\n        assetMap[_asset] = _option;\r\n        options.push(_asset);\r\n        optionExists[_asset] = true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"all\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHegicERCPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"optionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HegicOptionsFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://eb2a591a241c7d79d21eef8f8dbd5baf5e2eb5372b99425d61c7fe7787375f51"}]}