{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/pike/BaseBank.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract BaseBank {\r\n\r\n}\r\n\r\n// File: contracts/library/Ownable.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlySafe() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlySafe {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/library/ERC20Not.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ninterface ERC20Not {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external ;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external;\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/library/ERC20Yes.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\ninterface ERC20Yes {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address tokenOwner)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function allowance(address tokenOwner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    function transfer(address to, uint256 tokens)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address spender, uint256 tokens)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(\r\n        address indexed tokenOwner,\r\n        address indexed spender,\r\n        uint256 tokens\r\n    );\r\n}\r\n\r\n// File: contracts/user/BaseUsers.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract BaseUsers {\r\n    //\r\n    function register(address _pid, address _who) external returns (bool);\r\n\r\n    function setActive(address _who) external returns (bool);\r\n    \r\n    function setMiner(address _who) external returns (bool);\r\n\r\n    function isActive(address _who) external view returns (bool);\r\n\r\n    // Determine if the address has been registered\r\n    function isRegister(address _who) external view returns (bool);\r\n\r\n    // Get invitees\r\n    function inviteUser(address _who) external view returns (address);\r\n\r\n    function isBlackList(address _who) external view returns (bool);\r\n\r\n    function getUser(address _who)\r\n        external\r\n        view\r\n        returns (\r\n            address id,\r\n            address pid,\r\n            bool miner,\r\n            bool active,\r\n            uint256 created_at\r\n        );\r\n\r\n}\r\n\r\n// File: contracts/funds/BaseFunds.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract BaseFunds {\r\n    function activeUser(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    ) external returns (bool);\r\n\r\n    function upgradeUser(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    ) external returns (bool);\r\n\r\n    function buyMiner(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    ) external returns (bool);\r\n\r\n    function deposit(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    ) external returns (bool);\r\n\r\n    function withdraw(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    ) external returns (bool);\r\n\r\n    function loan(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    ) external returns (bool);\r\n\r\n    function repay(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    ) external returns (bool);\r\n\r\n    function liquidate(\r\n        address _tokenAddress,\r\n        address _who,\r\n        address _owner,\r\n        uint256 _tokens\r\n    ) external returns (bool);\r\n\r\n    function isToken(address _tokenAddress) external view returns (bool);\r\n\r\n    function isErc20(address _tokenAddress) external view returns (bool);\r\n}\r\n\r\n// File: contracts/net/BaseNet.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract BaseNet {\r\n    address payable internal _gasAddress;\r\n    function register(address _who, address _pid) external returns (bool);\r\n\r\n    function activeUser(address _tokenAddress, address _pid, address _who, uint256 _tokens) external returns (bool);\r\n\r\n    function upgradeUser(address _tokenAddress, address _who, uint256 _tokens) external returns (bool);\r\n\r\n    function buyMiner(address _tokenAddress, address _who, uint256 _tokens) external returns (bool);\r\n\r\n    function repay(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    function liquidate(\r\n        address _tokenAddress,\r\n        address _payer,\r\n        uint256 _amount,\r\n        uint256 _oid\r\n    ) external returns (bool);\r\n\r\n    function loan(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _amount,\r\n        uint256 _type\r\n    ) external returns (bool);\r\n\r\n    function withdraw(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    function withdrawMine(\r\n        address _who,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    function withdrawBonus(\r\n        address _who,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    function deposit(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    function depositMine(\r\n        address _who,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    function depositBonus(\r\n        address _who,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/pause/BasePause.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract BasePause {\r\n    function isPaused() external view returns (bool);\r\n}\r\n\r\n// File: contracts/receipt/BaseReceipt.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract BaseReceipt {\r\n    function active(uint256 _tokens)\r\n        external\r\n        payable\r\n        returns (bool);\r\n\r\n    function upgrade(uint256 _tokens)\r\n        external\r\n        payable\r\n        returns (bool);\r\n\r\n    function buyMiner(uint256 _tokens)\r\n        external\r\n        payable\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/library/Interfaces.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Interfaces is Ownable {\r\n    BaseNet internal NetContract;\r\n    BaseBank internal BankContract;\r\n    BaseUsers internal UserContract;\r\n    BaseFunds internal FundsContract;\r\n    BasePause internal PauseContract;\r\n    BaseReceipt internal ReceiptContract;\r\n\r\n    function setBankContract(BaseBank _address) public onlySafe {\r\n        BankContract = _address;\r\n    }\r\n\r\n    function setUserContract(BaseUsers _address) public onlySafe {\r\n        UserContract = _address;\r\n    }\r\n\r\n    function setFundsContract(BaseFunds _address) public onlySafe {\r\n        FundsContract = _address;\r\n    }\r\n\r\n    function setNetContract(BaseNet _address) public onlySafe {\r\n        NetContract = _address;\r\n    }\r\n\r\n    function setPauseContract(BasePause _address) public onlySafe {\r\n        PauseContract = _address;\r\n    }\r\n\r\n    function setReceiptContract(BaseReceipt _address) public onlySafe {\r\n        ReceiptContract = _address;\r\n    }\r\n}\r\n\r\n// File: contracts/Bank.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\ncontract Bank is BaseBank, Interfaces {\r\n    bool internal open_deposit = true;\r\n    bool internal open_loan = true;\r\n\r\n    modifier isNotBlackList(address _who) {\r\n        require(\r\n            !UserContract.isBlackList(_who),\r\n            \"You are already on the blacklist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!PauseContract.isPaused(), \"Data is being maintained\");\r\n        _;\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    function isRegister(address _who) public view returns (bool is_register) {\r\n        return UserContract.isRegister(_who);\r\n    }\r\n\r\n    function isActive(address _who) public view returns (bool is_active) {\r\n        return UserContract.isActive(_who);\r\n    }\r\n\r\n    // register\r\n    function register(address _pid) public returns (bool) {\r\n        if (UserContract.register(_pid, msg.sender)) {\r\n            if (!NetContract.register(_pid, msg.sender)) {\r\n                revert(\"register failed\");\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // active user\r\n    function activeUser(\r\n        address _tokenAddress,\r\n        address _pid,\r\n        uint256 _tokens\r\n    ) public payable whenNotPaused isNotBlackList(msg.sender) {\r\n        require(msg.sender != _pid);\r\n        if (!isRegister(msg.sender)) {\r\n            UserContract.register(_pid, msg.sender);\r\n        }\r\n        if (address(FundsContract) == _tokenAddress) {\r\n            if (address(uint160(address(FundsContract))).send(msg.value)) {\r\n                _tokens = msg.value;\r\n            } else {\r\n                revert(\"active failed\");\r\n            }\r\n        }\r\n        require(FundsContract.activeUser(_tokenAddress, msg.sender, _tokens));\r\n        require(UserContract.setActive(msg.sender));\r\n        if (!NetContract.activeUser(_tokenAddress, _pid, msg.sender, _tokens)) {\r\n            revert(\"active failed\");\r\n        }\r\n    }\r\n\r\n    // 升级矿工\r\n    function upgradeUser(address _tokenAddress, uint256 _tokens)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n    {\r\n        require(isActive(msg.sender));\r\n        if (address(FundsContract) == _tokenAddress) {\r\n            if (address(uint160(address(FundsContract))).send(msg.value)) {\r\n                _tokens = msg.value;\r\n            } else {\r\n                revert(\"upgrade failed\");\r\n            }\r\n        }\r\n        require(FundsContract.upgradeUser(_tokenAddress, msg.sender, _tokens));\r\n        if (!NetContract.upgradeUser(_tokenAddress, msg.sender, _tokens)) {\r\n            revert(\"upgrade failed\");\r\n        }\r\n    }\r\n\r\n    // buy mining\r\n    function buyMiner(address _tokenAddress, uint256 _tokens)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n    {\r\n        require(isActive(msg.sender));\r\n        if (address(FundsContract) == _tokenAddress) {\r\n            if (address(uint160(address(FundsContract))).send(msg.value)) {\r\n                _tokens = msg.value;\r\n            } else {\r\n                revert(\"buy mining failed\");\r\n            }\r\n        }\r\n        require(FundsContract.buyMiner(_tokenAddress, msg.sender, _tokens));\r\n        require(UserContract.setMiner(msg.sender));\r\n        if (!NetContract.buyMiner(_tokenAddress, msg.sender, _tokens)) {\r\n            revert(\"buy mining failed\");\r\n        }\r\n    }\r\n\r\n    // deposit\r\n    function deposit(address _tokenAddress, uint256 _tokens)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n    {\r\n        require(open_deposit == true);\r\n        require(isActive(msg.sender));\r\n\r\n        if (address(FundsContract) == _tokenAddress) {\r\n            if (address(uint160(address(FundsContract))).send(msg.value)) {\r\n                require(\r\n                    FundsContract.deposit(_tokenAddress, msg.sender, msg.value)\r\n                );\r\n                if (\r\n                    !NetContract.deposit(_tokenAddress, msg.sender, msg.value)\r\n                ) {\r\n                    revert(\"deposit failed\");\r\n                }\r\n            }\r\n        } else {\r\n            require(FundsContract.deposit(_tokenAddress, msg.sender, _tokens));\r\n            if (!NetContract.deposit(_tokenAddress, msg.sender, _tokens)) {\r\n                revert(\"deposit failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Tokens withdraw\r\n    function _withdraw(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        whenNotPaused\r\n        isNotBlackList(_who)\r\n        onlySafe\r\n        returns (bool success)\r\n    {\r\n        require(isActive(_who));\r\n        return FundsContract.withdraw(_tokenAddress, _who, _tokens);\r\n    }\r\n\r\n    // loan\r\n    function _loan(\r\n        address _tokenAddress,\r\n        address _who,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        whenNotPaused\r\n        isNotBlackList(_who)\r\n        onlySafe\r\n        returns (bool success)\r\n    {\r\n        require(open_loan == true);\r\n        require(isActive(_who));\r\n        return FundsContract.loan(_tokenAddress, _who, _tokens);\r\n    }\r\n\r\n    // repay\r\n    function repay(address _tokenAddress, uint256 _tokens)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n    {\r\n        if (address(FundsContract) == _tokenAddress) {\r\n            if (address(uint160(address(FundsContract))).send(msg.value)) {\r\n                require(\r\n                    FundsContract.repay(_tokenAddress, msg.sender, msg.value)\r\n                );\r\n                if (!NetContract.repay(_tokenAddress, msg.sender, msg.value)) {\r\n                    revert(\"repay failed\");\r\n                }\r\n            }\r\n        } else {\r\n            require(FundsContract.repay(_tokenAddress, msg.sender, _tokens));\r\n            if (!NetContract.repay(_tokenAddress, msg.sender, _tokens)) {\r\n                revert(\"repay failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // liquidate\r\n    function liquidate(\r\n        address _tokenAddress,\r\n        address _owner,\r\n        uint256 _tokens,\r\n        uint256 _oid\r\n    ) public payable whenNotPaused isNotBlackList(msg.sender) {\r\n        require(isActive(_owner));\r\n        require(isActive(msg.sender));\r\n        if (address(FundsContract) == _tokenAddress) {\r\n            if (address(uint160(address(FundsContract))).send(msg.value)) {\r\n                require(\r\n                    FundsContract.liquidate(\r\n                        _tokenAddress,\r\n                        msg.sender,\r\n                        _owner,\r\n                        msg.value\r\n                    )\r\n                );\r\n                if (\r\n                    !NetContract.liquidate(\r\n                        _tokenAddress,\r\n                        msg.sender,\r\n                        msg.value,\r\n                        _oid\r\n                    )\r\n                ) {\r\n                    revert(\"liquidate failed\");\r\n                }\r\n            }\r\n        } else {\r\n            require(\r\n                FundsContract.liquidate(\r\n                    _tokenAddress,\r\n                    msg.sender,\r\n                    _owner,\r\n                    _tokens\r\n                )\r\n            );\r\n            if (\r\n                !NetContract.liquidate(_tokenAddress, msg.sender, _tokens, _oid)\r\n            ) {\r\n                revert(\"liquidate failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function loan(\r\n        address _tokenAddress,\r\n        uint256 _tokens,\r\n        uint256 _type\r\n    ) public whenNotPaused isNotBlackList(msg.sender) returns (bool) {\r\n        require(isActive(msg.sender));\r\n        if (!NetContract.loan(_tokenAddress, msg.sender, _tokens, _type)) {\r\n            revert(\"withdraw failed\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdraw(address _tokenAddress, uint256 _tokens)\r\n        public\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(isActive(msg.sender));\r\n        if (!NetContract.withdraw(_tokenAddress, msg.sender, _tokens)) {\r\n            revert(\"withdraw failed\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdrawMine(uint256 _tokens)\r\n        public\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(isActive(msg.sender));\r\n        if (!NetContract.withdrawMine(msg.sender, _tokens)) {\r\n            revert(\"withdraw mine failed\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdrawBonus(uint256 _tokens)\r\n        public\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(isActive(msg.sender));\r\n        if (!NetContract.withdrawBonus(msg.sender, _tokens)) {\r\n            revert(\"withdraw bonus failed\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function depositMine(uint256 _tokens)\r\n        public\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(isActive(msg.sender));\r\n        if (!NetContract.depositMine(msg.sender, _tokens)) {\r\n            revert(\"deposit mine failed\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function depositBonus(uint256 _tokens)\r\n        public\r\n        whenNotPaused\r\n        isNotBlackList(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(isActive(msg.sender));\r\n        if (!NetContract.depositBonus(msg.sender, _tokens)) {\r\n            revert(\"deposit bonus failed\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setOpenDeposit(bool _status) public onlySafe {\r\n        open_deposit = _status;\r\n    }\r\n\r\n    function setOpenLoan(bool _status) public onlySafe {\r\n        open_loan = _status;\r\n    }\r\n\r\n    function getOpenDeposit() public view returns (bool deposit_status) {\r\n        return open_deposit;\r\n    }\r\n\r\n    function getOpenLoan() public view returns (bool loan_status) {\r\n        return open_loan;\r\n    }\r\n\r\n    // 获取存款余额\r\n    function balanceOf(address _tokenAddress, address _who)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return ERC20Yes(_tokenAddress).balanceOf(_who);\r\n    }\r\n\r\n    function balanceEth(address _tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return address(uint160(address(_tokenAddress))).balance;\r\n    }\r\n\r\n    function isPaused() public view returns (bool paused) {\r\n        return PauseContract.isPaused();\r\n    }\r\n\r\n    function getUser(address _who)\r\n        public\r\n        view\r\n        returns (\r\n            address id,\r\n            address pid,\r\n            bool miner,\r\n            bool active,\r\n            uint256 created_at\r\n        )\r\n    {\r\n        return UserContract.getUser(_who);\r\n    }\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"_loan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"_withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"activeUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"balanceEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"buyMiner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"depositBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"depositMine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOpenDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"deposit_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOpenLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"loan_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pid\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"miner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"created_at\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"is_active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"is_register\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oid\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"loan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pid\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BaseBank\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBankContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BaseFunds\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFundsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BaseNet\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNetContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setOpenDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setOpenLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BasePause\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BaseReceipt\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setReceiptContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BaseUsers\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUserContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"upgradeUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawMine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bank","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c60e0d7be275f92f306c654200315a7be84db79c5617671e2874ca99287d22ea"}]}