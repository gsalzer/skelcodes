{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/Controllable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Governable.sol\\\";\\n\\ncontract Controllable is Governable {\\n    constructor(address _storage) public Governable(_storage) {}\\n\\n    modifier onlyController() {\\n        require(store.isController(msg.sender), \\\"Not a controller\\\");\\n        _;\\n    }\\n\\n    modifier onlyControllerOrGovernance() {\\n        require(\\n            (store.isController(msg.sender) || store.isGovernance(msg.sender)),\\n            \\\"The caller must be controller or governance\\\"\\n        );\\n        _;\\n    }\\n\\n    function controller() public view returns (address) {\\n        return store.controller();\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/Governable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Governable {\\n    Storage public store;\\n\\n    constructor(address _store) public {\\n        require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n        store = Storage(_store);\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\n        _;\\n    }\\n\\n    function setStorage(address _store) public onlyGovernance {\\n        require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n        store = Storage(_store);\\n    }\\n\\n    function governance() public view returns (address) {\\n        return store.governance();\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n    address public governance;\\n    address public controller;\\n\\n    constructor() public {\\n        governance = msg.sender;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(isGovernance(msg.sender), \\\"Not governance\\\");\\n        _;\\n    }\\n\\n    function setGovernance(address _governance) public onlyGovernance {\\n        require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n        governance = _governance;\\n    }\\n\\n    function setController(address _controller) public onlyGovernance {\\n        require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n        controller = _controller;\\n    }\\n\\n    function isGovernance(address account) public view returns (bool) {\\n        return account == governance;\\n    }\\n\\n    function isController(address account) public view returns (bool) {\\n        return account == controller;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/interfaces/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IController {\\n    // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    // This grey list is only used in Vault.sol, see the code there for reference\\n    function greyList(address _target) external view returns (bool);\\n\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\n\\n    function forceUnleashed(address _vault) external;\\n\\n    function hasVault(address _vault) external returns (bool);\\n\\n    function salvage(address _token, uint256 amount) external;\\n\\n    function salvageStrategy(\\n        address _strategy,\\n        address _token,\\n        uint256 amount\\n    ) external;\\n\\n    function notifyFee(address _underlying, uint256 fee) external;\\n\\n    function profitSharingNumerator() external view returns (uint256);\\n\\n    function profitSharingDenominator() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStrategy {\\n    function unsalvagableTokens(address tokens) external view returns (bool);\\n\\n    function governance() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function underlying() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function withdrawAllToVault() external;\\n\\n    function withdrawToVault(uint256 amount) external;\\n\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\n\\n    // should only be called by controller\\n    function salvage(\\n        address recipient,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function forceUnleashed() external;\\n\\n    function depositArbCheck() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVault {\\n    function underlyingBalanceInVault() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    function governance() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function underlying() external view returns (address);\\n\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator)\\n        external;\\n\\n    function deposit(uint256 amountWei) external;\\n\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdraw(uint256 numberOfShares) external;\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // force unleash should be callable only by the controller (by the force unleasher) or by governance\\n    function forceUnleashed() external;\\n\\n    function rebalance() external;\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/strategies/ProfitNotifier.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../Controllable.sol\\\";\\n\\ncontract ProfitNotifier is Controllable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public profitSharingNumerator;\\n    uint256 public profitSharingDenominator;\\n    address public underlying;\\n\\n    event ProfitLog(\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 feeAmount,\\n        uint256 timestamp\\n    );\\n\\n    constructor(address _storage, address _underlying)\\n        public\\n        Controllable(_storage)\\n    {\\n        underlying = _underlying;\\n        profitSharingNumerator = 0;\\n        profitSharingDenominator = 100;\\n        require(\\n            profitSharingNumerator < profitSharingDenominator,\\n            \\\"invalid profit share\\\"\\n        );\\n    }\\n\\n    function notifyProfit(uint256 oldBalance, uint256 newBalance) internal {\\n        if (newBalance > oldBalance && profitSharingNumerator > 0) {\\n            uint256 profit = newBalance.sub(oldBalance);\\n            uint256 feeAmount =\\n                profit.mul(profitSharingNumerator).div(\\n                    profitSharingDenominator\\n                );\\n            emit ProfitLog(oldBalance, newBalance, feeAmount, block.timestamp);\\n\\n            IERC20(underlying).safeApprove(controller(), 0);\\n            IERC20(underlying).safeApprove(controller(), feeAmount);\\n            IController(controller()).notifyFee(underlying, feeAmount);\\n        } else {\\n            emit ProfitLog(oldBalance, newBalance, 0, block.timestamp);\\n        }\\n    }\\n\\n    function setProfitSharingNumerator(uint256 _profitSharingNumerator)\\n        external\\n        onlyGovernance\\n    {\\n        profitSharingNumerator = _profitSharingNumerator;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/strategies/curve/CRVStrategyYCRV.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./interfaces/Gauge.sol\\\";\\nimport \\\"./interfaces/ICurveFi.sol\\\";\\nimport \\\"./interfaces/yVault.sol\\\";\\nimport \\\"../../uniswap/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../../interfaces/IStrategy.sol\\\";\\nimport \\\"../../interfaces/IVault.sol\\\";\\nimport \\\"../ProfitNotifier.sol\\\";\\n\\n/**\\n * This strategy is for the yCRV vault, i.e., the underlying token is yCRV. It is not to accept\\n * stable coins. It will farm the CRV crop. For liquidation, it swaps CRV into DAI and uses DAI\\n * to produce yCRV.\\n */\\ncontract CRVStrategyYCRV is IStrategy, ProfitNotifier {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    event Liquidating(uint256 amount);\\n\\n    // yDAIyUSDCyUSDTyTUSD (yCRV)\\n    address public underlying;\\n    address public pool;\\n    address public mintr;\\n    address public crv;\\n\\n    address public curve;\\n    address public weth;\\n    address public dai;\\n    address public yDai;\\n\\n    address public uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    // these tokens cannot be claimed by the governance\\n    mapping(address => bool) public unsalvagableTokens;\\n\\n    // our vault holding the underlying token (yCRV)\\n    address public vault;\\n\\n    uint256 maxUint = uint256(~0);\\n    address[] public uniswap_CRV2DAI;\\n\\n    modifier restricted() {\\n        require(\\n            msg.sender == vault ||\\n                msg.sender == controller() ||\\n                msg.sender == governance(),\\n            \\\"The sender has to be the controller, governance, or vault\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _storage,\\n        address _vault,\\n        address _underlying,\\n        address _gauge,\\n        address _mintr,\\n        address _crv,\\n        address _curve,\\n        address _weth,\\n        address _dai,\\n        address _yDai,\\n        address _uniswap\\n    ) public ProfitNotifier(_storage, _dai) {\\n        require(\\n            IVault(_vault).underlying() == _underlying,\\n            \\\"vault does not support yCRV\\\"\\n        );\\n        vault = _vault;\\n        underlying = _underlying;\\n        pool = _gauge;\\n        mintr = _mintr;\\n        crv = _crv;\\n        curve = _curve;\\n        weth = _weth;\\n        dai = _dai;\\n        yDai = _yDai;\\n        uni = _uniswap;\\n        uniswap_CRV2DAI = [crv, weth, dai];\\n        // set these tokens to be not salvageable\\n        unsalvagableTokens[underlying] = true;\\n        unsalvagableTokens[crv] = true;\\n    }\\n\\n    function depositArbCheck() public view returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * Salvages a token. We should not be able to salvage CRV and yCRV (underlying).\\n     */\\n    function salvage(\\n        address recipient,\\n        address token,\\n        uint256 amount\\n    ) public onlyGovernance {\\n        // To make sure that governance cannot come in and take away the coins\\n        require(\\n            !unsalvagableTokens[token],\\n            \\\"token is defined as not salvageable\\\"\\n        );\\n        IERC20(token).safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * Withdraws yCRV from the investment pool that mints crops.\\n     */\\n    function withdrawYCrvFromPool(uint256 amount) internal {\\n        Gauge(pool).withdraw(\\n            Math.min(Gauge(pool).balanceOf(address(this)), amount)\\n        );\\n    }\\n\\n    /**\\n     * Withdraws the yCRV tokens to the pool in the specified amount.\\n     */\\n    function withdrawToVault(uint256 amountUnderlying) external restricted {\\n        withdrawYCrvFromPool(amountUnderlying);\\n        if (IERC20(underlying).balanceOf(address(this)) < amountUnderlying) {\\n            claimAndLiquidateCrv();\\n        }\\n        uint256 toTransfer =\\n            Math.min(\\n                IERC20(underlying).balanceOf(address(this)),\\n                amountUnderlying\\n            );\\n        IERC20(underlying).safeTransfer(vault, toTransfer);\\n    }\\n\\n    /**\\n     * Withdraws all the yCRV tokens to the pool.\\n     */\\n    function withdrawAllToVault() external restricted {\\n        claimAndLiquidateCrv();\\n        withdrawYCrvFromPool(maxUint);\\n        uint256 balance = IERC20(underlying).balanceOf(address(this));\\n        IERC20(underlying).safeTransfer(vault, balance);\\n    }\\n\\n    /**\\n     * Invests all the underlying yCRV into the pool that mints crops (CRV_.\\n     */\\n    function investAllUnderlying() public restricted {\\n        uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\\n        if (underlyingBalance > 0) {\\n            IERC20(underlying).safeApprove(pool, 0);\\n            IERC20(underlying).safeApprove(pool, underlyingBalance);\\n            Gauge(pool).deposit(underlyingBalance);\\n        }\\n    }\\n\\n    /**\\n     * Claims the CRV crop, converts it to DAI on Uniswap, and then uses DAI to mint yCRV using the\\n     * Curve protocol.\\n     */\\n    function claimAndLiquidateCrv() internal {\\n        Mintr(mintr).mint(pool);\\n        // claiming rewards and sending them to the master strategy\\n        uint256 crvBalance = IERC20(crv).balanceOf(address(this));\\n        emit Liquidating(crvBalance);\\n        if (crvBalance > 0) {\\n            uint256 daiBalanceBefore = IERC20(dai).balanceOf(address(this));\\n            IERC20(crv).safeApprove(uni, 0);\\n            IERC20(crv).safeApprove(uni, crvBalance);\\n            // we can accept 1 as the minimum because this will be called only by a trusted worker\\n            IUniswapV2Router02(uni).swapExactTokensForTokens(\\n                crvBalance,\\n                1,\\n                uniswap_CRV2DAI,\\n                address(this),\\n                block.timestamp\\n            );\\n            // now we have DAI\\n            // pay fee before making yCRV\\n            notifyProfit(\\n                daiBalanceBefore,\\n                IERC20(dai).balanceOf(address(this))\\n            );\\n\\n            // liquidate if there is any DAI left\\n            if (IERC20(dai).balanceOf(address(this)) > 0) {\\n                yCurveFromDai();\\n            }\\n            // now we have yCRV\\n        }\\n    }\\n\\n    /**\\n     * Claims and liquidates CRV into yCRV, and then invests all underlying.\\n     */\\n    function forceUnleashed() public restricted {\\n        claimAndLiquidateCrv();\\n        investAllUnderlying();\\n    }\\n\\n    /**\\n     * Investing all underlying.\\n     */\\n    function investedUnderlyingBalance() public view returns (uint256) {\\n        return\\n            Gauge(pool).balanceOf(address(this)).add(\\n                IERC20(underlying).balanceOf(address(this))\\n            );\\n    }\\n\\n    /**\\n     * Converts all DAI to yCRV using the CRV protocol.\\n     */\\n    function yCurveFromDai() internal {\\n        uint256 daiBalance = IERC20(dai).balanceOf(address(this));\\n        if (daiBalance > 0) {\\n            IERC20(dai).safeApprove(yDai, 0);\\n            IERC20(dai).safeApprove(yDai, daiBalance);\\n            yERC20(yDai).deposit(daiBalance);\\n        }\\n        uint256 yDaiBalance = IERC20(yDai).balanceOf(address(this));\\n        if (yDaiBalance > 0) {\\n            IERC20(yDai).safeApprove(curve, 0);\\n            IERC20(yDai).safeApprove(curve, yDaiBalance);\\n            // we can accept 0 as minimum, this will be called only by trusted roles\\n            uint256 minimum = 0;\\n            ICurveFi(curve).add_liquidity([yDaiBalance, 0, 0, 0], minimum);\\n        }\\n        // now we have yCRV\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/strategies/curve/CRVStrategyYCRVMainnet.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./CRVStrategyYCRV.sol\\\";\\n\\n/**\\n * This strategy is for the yCRV vault, i.e., the underlying token is yCRV. It is not to accept\\n * stable coins. It will farm the CRV crop. For liquidation, it swaps CRV into DAI and uses DAI\\n * to produce yCRV.\\n */\\ncontract CRVStrategyYCRVMainnet is CRVStrategyYCRV {\\n    constructor(address _storage, address _vault)\\n        public\\n        CRVStrategyYCRV(\\n            _storage,\\n            _vault,\\n            address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8), // yCRV underlying\\n            address(0xFA712EE4788C042e2B7BB55E6cb8ec569C4530c1), // _gauge\\n            address(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0), // _mintr\\n            address(0xD533a949740bb3306d119CC777fa900bA034cd52), // _crv\\n            address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51), // _curve\\n            address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2), // _weth\\n            address(0x6B175474E89094C44Da98b954EedeAC495271d0F), // _dai\\n            address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01), // _yDai\\n            address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) // _uniswap\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/strategies/curve/interfaces/Gauge.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface Gauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function user_checkpoint(address) external;\\n}\\n\\ninterface VotingEscrow {\\n    function create_lock(uint256 v, uint256 time) external;\\n\\n    function increase_amount(uint256 _value) external;\\n\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    function withdraw() external;\\n}\\n\\ninterface Mintr {\\n    function mint(address) external;\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/strategies/curve/interfaces/ICurveFi.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface ICurveFi {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/strategies/curve/interfaces/yVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface yERC20 {\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/uniswap/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Work/Defi/delta/delta-contracts/contracts/uniswap/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidating\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLog\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceUnleashed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investAllUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitSharingNumerator\",\"type\":\"uint256\"}],\"name\":\"setProfitSharingNumerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uni\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswap_CRV2DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yDai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CRVStrategyYCRVMainnet","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000624e043268696050c85116fbf8b51fbecb93afb5000000000000000000000000a9629e12ddc9e4bb522635c82cdfe53acbafb5b3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}