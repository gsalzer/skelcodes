{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract mini_lottery{\r\n    using SafeMath for uint256; \r\n    \r\n    struct Commit {\r\n        uint256 commit;\r\n        uint256 bet_value;\r\n        uint256 reward;\r\n        uint64 block;\r\n        bool revealed;\r\n    }\r\n  \r\n  event Log_withdraw(address indexed _from, uint256 _value);\r\n  event Log_commit(address sender, uint256 seed, uint64 block, uint256 value);\r\n  event Log_reveal(address sender, uint256 random, uint256 reward);\r\n  event Log_debug(address a, address b);\r\n\r\n\r\n  mapping (address => Commit) public _commits;\r\n  address private _owner = msg.sender;\r\n  bool internal _lock = false; //mutex\r\n  uint256 private _remain_reward = 0; //total remained reward to paid\r\n  uint256 private _total_prize = 0; //total prize\r\n  uint256 private _randNonce = 0;\r\n  uint256 private _commision = 0; \r\n\r\n  constructor() public {\r\n      _owner = msg.sender;\r\n  }\r\n  \r\n  function commit() public payable {\r\n    require(msg.value >= 0.01 ether, \"Shall >= 0.01 ether\");\r\n    require(msg.value <= 0.1 ether, \"Shall <= 0.1 ether\");\r\n    require(_commits[msg.sender].bet_value==0, \"Your previous draw is still under processing!\");\r\n    \r\n    _commits[msg.sender].commit = random();\r\n    _commits[msg.sender].bet_value = msg.value;\r\n    _commits[msg.sender].block = uint64(block.number);\r\n    _commits[msg.sender].revealed = false;\r\n    _commision += msg.value.div(10);\r\n    \r\n    emit Log_commit(msg.sender, _commits[msg.sender].commit, _commits[msg.sender].block, msg.value);\r\n  }\r\n  \r\n  function reveal() public {\r\n    //ensure commit first\r\n    require(_commits[msg.sender].bet_value>0,\"CommitReveal::reveal: not commited\");\r\n    //make sure it hasn't been revealed yet and set it to revealed\r\n    require(_commits[msg.sender].revealed==false,\"CommitReveal::reveal: Already revealed\");\r\n    _commits[msg.sender].revealed=true;\r\n    //require that the block number is greater than the original block\r\n    require(uint64(block.number)>_commits[msg.sender].block,\"CommitReveal::reveal: Reveal and commit happened on the same block\");\r\n    //require that no more than 250 blocks have passed\r\n    require(uint64(block.number)<=_commits[msg.sender].block+250,\"CommitReveal::reveal: Revealed too late\");\r\n    \r\n    //get the hash of the block that happened after they committed\r\n    bytes32 blockHash = blockhash(_commits[msg.sender].block);\r\n    //hash that with their reveal that so miner shouldn't know \r\n    uint256 random = get_random(blockHash, _commits[msg.sender].commit);\r\n    \r\n    uint256[2] memory reward_times = get_reward_times(random);\r\n    uint256 reward = reward_times[0].mul(_commits[msg.sender].bet_value).div(reward_times[1]);\r\n    _commits[msg.sender].reward = _commits[msg.sender].reward.add(reward);\r\n    _commits[msg.sender].bet_value = 0;\r\n    _commits[msg.sender].commit = 0;\r\n    _commits[msg.sender].block = 0;\r\n    _remain_reward = _remain_reward.add(reward);\r\n    _total_prize = _total_prize.add(reward);\r\n    \r\n    emit Log_reveal(msg.sender, random, reward);\r\n  }\r\n\r\n  function check_commitable(address addr) public view returns(bool){\r\n      if (_commits[addr].bet_value == 0) return true;//msg.sender not working??\r\n      else return false;\r\n  }\r\n\r\n   function check_revealable(address addr) public view returns(bool){\r\n      if (_commits[addr].bet_value > 0) return true; //msg.sender not working??\r\n      else return false;\r\n  }\r\n  \r\n  function get_random(bytes32 block_hash, uint256 commit_hash) private pure returns (uint256) {\r\n    return uint256(keccak256(abi.encodePacked(block_hash, commit_hash)));\r\n  }\r\n  \r\n  function get_reward_times(uint256 rand_number) internal pure returns(uint256[2] memory){\r\n    uint256 rn = rand_number.mod(1000000);\r\n    uint256 reward_times = 0;\r\n    uint256 den = 1;\r\n    if (rn.mod(888888) == 0) reward_times = 10000;\r\n    else if (rn.mod(88888) == 0) reward_times = 1000;\r\n    else if(rn.mod(8888) == 0) reward_times = 100;\r\n    else if(rn.mod(888) == 0) reward_times = 10;\r\n    else if(rn.mod(88) == 0) reward_times = 5;\r\n    else if(rn.mod(8) == 0) reward_times = 1;\r\n    else { //100% you will be lucky\r\n        reward_times = 1;\r\n        den = 10;\r\n    }\r\n\r\n    return [reward_times, den];\r\n  }\r\n  \r\n  function check_withdraw(address addr) public view returns(bool){\r\n      uint256 pool_fund = address(this).balance.sub(_commision);\r\n      if (_commits[addr].reward > 0 && pool_fund >= _commits[addr].reward) return true;\r\n      else return false;\r\n  }\r\n  \r\n  function withdraw() public{      \r\n      require(!_lock, \"busy!\");\r\n      _lock = true;\r\n      if (check_withdraw(msg.sender)){\r\n            uint256 rv = _commits[msg.sender].reward;\r\n            _commits[msg.sender].reward = 0;\r\n            msg.sender.transfer(rv);\r\n            _remain_reward = _remain_reward.sub(rv);\r\n            emit Log_withdraw(msg.sender, rv);\r\n      }\r\n      _lock = false;\r\n  }\r\n  \r\n  function withdraw_commision_fee() public {\r\n    require(msg.sender == _owner, \"you are not owner.\");\r\n    require(_commision > 0, \"no commision!\");\r\n\r\n    require(!_lock, \"busy!\");\r\n    _lock = true;\r\n    if (address(this).balance > _commision){\r\n        (msg.sender).transfer(_commision); \r\n        _commision = 0;\r\n        emit Log_withdraw(msg.sender, _commision);\r\n    }\r\n    _lock = false;\r\n  }\r\n\r\n  function get_commision() public view returns(uint256){\r\n    //require(_owner == msg.sender, \"you are not owner.\"); //not working???\r\n    //emit Log_debug(_owner, msg.sender);\r\n\r\n    return _commision;\r\n  }\r\n  \r\n    // the left reward to paid to the users \r\n  function get_remain_reward() public view returns(uint256){\r\n      return _remain_reward;\r\n  }\r\n\r\n  function get_total_reward() public view returns(uint256){\r\n      return _total_prize;\r\n  }\r\n  \r\n  function get_draw_result() public view returns(uint256){\r\n      return  _commits[msg.sender].reward;\r\n  }\r\n\r\n  function random() private returns (uint256) {\r\n    _randNonce = _randNonce.add(1);\r\n    return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, msg.sender, _randNonce)));\r\n  }\r\n\r\n  function get_balance() public view returns(uint256){\r\n    return address(this).balance;\r\n  }\r\n\r\n  function getOwner() public view returns(address){\r\n      return _owner;\r\n  }\r\n\r\n  function changeOwner(address new_owner) public{\r\n      require(msg.sender == _owner, \"you are not owner.\");\r\n      emit Log_debug(_owner, new_owner);\r\n\r\n      _owner = new_owner;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"block\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Log_commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"Log_debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Log_reveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Log_withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_commits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"block\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"check_commitable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"check_revealable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"check_withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_commision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_draw_result\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_remain_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_total_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_commision_fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"mini_lottery","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e342627c207aa3582988a99a0202311dce65f73c7ef57209efe1ddf5184a29f7"}]}