{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized);\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ncontract ERC20Token\r\n{\r\n    function decimals() external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function approve(address spender, uint value) external;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    uint256 constant WAD = 10 ** 18;\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20Token token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20Token token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20Token token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20Token token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20Token token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(ERC20Token token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract());\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success);\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Token;\r\n\r\n    ERC20Token private constant ZERO_ADDRESS = ERC20Token(0x0000000000000000000000000000000000000000);\r\n    ERC20Token private constant ETH_ADDRESS = ERC20Token(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(ERC20Token token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(ERC20Token token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(ERC20Token token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(ERC20Token token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(uint256(msg.value).sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(ERC20Token token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address payable public owner = msg.sender;\r\n    address payable public newOwnerCandidate;\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwnerCandidate(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n\r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n        owner = newOwnerCandidate;\r\n    }\r\n}\r\n\r\ncontract VMRDepo is Initializable\r\n{\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for ERC20Token;\r\n\r\n    ERC20Token constant TokenVMR =  ERC20Token(0x063b98a414EAA1D4a5D4fC235a22db1427199024); \r\n\r\n    address payable public owner;\r\n    address payable public newOwnerCandidate;\r\n\r\n    // tokens amount\r\n    struct UserData {\r\n        uint128 totalVMR;\r\n        uint128 totalReward;\r\n    }\r\n    mapping (address => uint256) investors;\r\n    \r\n    uint256 public totalVMR; // current amount\r\n    \r\n    uint256 public maxTotalVMR; // 50\r\n    uint256 public maxVMRPerUser; // 3 * 1e18\r\n    uint256 public delayBeforeRewardWithdrawn;// 30 days\r\n    \r\n    // reward per token for 30 days\r\n    uint256 public rewardPerToken;\r\n    uint256 public startRewardDate;\r\n    uint256 public totalUniqueUsers;\r\n\r\n    mapping(address => bool) public admins;\r\n\r\n    event DepositTokens(address indexed userAddress, uint256 prevAmount, uint256 newAmount);\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin()\r\n    {\r\n        assert(admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function initialize() initializer public {\r\n        owner = 0xBeEF483F3dbBa7FC428ebe37060e5b9561219E3d;\r\n        maxTotalVMR = 50 * 1e18;\r\n        maxVMRPerUser = 3 * 1e18;\r\n        delayBeforeRewardWithdrawn = 30 days;\r\n        rewardPerToken = 170357751277683; // 0.1$ per 30 days with 587$/ETH\r\n        \r\n    }\r\n\r\n    function changeMaxTotalVMRInWei(uint256 _newValue) public onlyOwner {\r\n        maxTotalVMR = _newValue;\r\n    }\r\n    \r\n    function changeMaxVMRPerUserInWei(uint256 _newValue, address[] memory addressesRecalc) public onlyOwner {\r\n        uint256 len = addressesRecalc.length;\r\n        uint256 _maxVMRPerUser = maxVMRPerUser;\r\n        uint256 _totalVMR = totalVMR;\r\n        for(uint16 i = 0;i < len; i++) {\r\n            uint256 currentAmount = investors[addressesRecalc[i]];\r\n            uint256 addedPrev = min(currentAmount, _maxVMRPerUser); \r\n            uint256 addedNow = min(currentAmount, _newValue); \r\n            _totalVMR = _totalVMR.sub(addedPrev).add(addedNow);\r\n        }\r\n        totalVMR = _totalVMR;\r\n        maxVMRPerUser = _newValue;\r\n    }\r\n    \r\n    function changeDelayBeforeRewardWithdrawnInSeconds(uint256 _newValue) public onlyOwner {\r\n        delayBeforeRewardWithdrawn = _newValue;\r\n    }\r\n    \r\n    function changeRewardPerTokenInWei(uint256 _newValue) public onlyOwner {\r\n        rewardPerToken = _newValue;\r\n    }\r\n    \r\n    function setAdmin(address newAdmin, bool activate) onlyOwner public {\r\n        admins[newAdmin] = activate;\r\n    }\r\n\r\n    function withdraw(uint256 amount)  public onlyOwner {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function changeOwnerCandidate(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n\r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n        owner = newOwnerCandidate;\r\n    }\r\n\r\n    // function for transfer any token from contract\r\n    function transferTokens (address token, address target, uint256 amount) onlyOwner public\r\n    {\r\n        ERC20Token(token).universalTransfer(target, amount);\r\n    }\r\n\r\n\r\n    // 0 - balance ether\r\n    // 1 - balance VMR\r\n    // 2 - balance investor\r\n    // 3 - rewards started (0 if still depo period)\r\n    // 4 - effective user tokens\r\n    // 5 - current epoch (first epoch started after delayBeforeRewardWithdrawn period)\r\n    // 6 - current user reward\r\n    // 7 - pending user reward in next epoch\r\n    // 8 - max total VMR (when amount reached deposit - period ends)\r\n    // 9 - current total effective VMR for all users\r\n    // 10 - max effective VMR per each user\r\n    // 11 - epoch duration\r\n    // 12 - reward per epoch\r\n    // 13 - total unique users\r\n    function getInfo(address investor) view external returns (uint256[14] memory ret)\r\n    {\r\n        ret[0] = address(this).balance;\r\n        ret[1] = TokenVMR.balanceOf(address(this));\r\n        ret[2] = investors[investor];\r\n        ret[3] = startRewardDate > 0 ? (startRewardDate + delayBeforeRewardWithdrawn) : 0;\r\n        ret[4] = min(ret[2], maxVMRPerUser);\r\n        ret[5] = startRewardDate > 0 ? (now - startRewardDate).div(delayBeforeRewardWithdrawn) : 0;\r\n        ret[6] = rewardPerToken.wmul(ret[4]).mul(ret[5]);\r\n        ret[7] = rewardPerToken.wmul(ret[4]);\r\n        \r\n        ret[8] = maxTotalVMR;\r\n        ret[9] = totalVMR;\r\n        ret[10] = maxVMRPerUser;\r\n        ret[11] = delayBeforeRewardWithdrawn;\r\n        ret[12] = rewardPerToken;\r\n        ret[13] = totalUniqueUsers;\r\n    }\r\n\r\n    function addDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdmin external {\r\n        internalSetDepositTokens(userAddress, amountTokens, 1); // add mode\r\n    }\r\n\r\n    function setDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdmin external {\r\n        internalSetDepositTokens(userAddress, amountTokens, 0); // set mode\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) pure internal returns (uint256) {\r\n        return (a < b) ? a : b;\r\n    }\r\n    // mode = 0 (set mode)\r\n    // mode = 1 (add mode)\r\n    function internalSetDepositTokens(address[] memory userAddress, uint256[] memory amountTokens, uint8 mode) internal {\r\n        uint256 _maxTotalVMR = maxTotalVMR;\r\n        uint256 _totalVMR = totalVMR;\r\n        \r\n        require(_totalVMR < _maxTotalVMR || mode == 0);\r\n\r\n        uint256 _maxVMRPerUser = maxVMRPerUser;\r\n        uint256 len = userAddress.length;\r\n        require(len == amountTokens.length);        \r\n        for(uint16 i = 0;i < len; i++) {\r\n            uint256 currentAmount = investors[userAddress[i]];\r\n        \r\n            uint256 prevAmount = currentAmount;\r\n            \r\n            // set mode\r\n            if (mode == 0) {\r\n                currentAmount = amountTokens[i];\r\n            } else {\r\n                currentAmount = currentAmount.add(amountTokens[i]);\r\n            }\r\n            \r\n            if (prevAmount == 0 && currentAmount > 0) {\r\n                totalUniqueUsers++;\r\n            }\r\n            \r\n            uint256 addedPrev = min(prevAmount, _maxVMRPerUser); \r\n            uint256 addedNow = min(currentAmount, _maxVMRPerUser); \r\n            _totalVMR = _totalVMR.sub(addedPrev).add(addedNow);\r\n            \r\n            investors[userAddress[i]] = currentAmount;\r\n            emit DepositTokens(userAddress[i], prevAmount, currentAmount);\r\n            \r\n            if (_totalVMR >= _maxTotalVMR) {\r\n                if (startRewardDate == 0) startRewardDate = now;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        totalVMR = _totalVMR;\r\n    }\r\n\r\n\r\n    function () payable external\r\n    {\r\n        require(msg.sender == tx.origin); // prevent bots to interact with contract\r\n\r\n        if (msg.sender == owner) return;\r\n        \r\n        uint256 _startRewardDate = startRewardDate;\r\n        \r\n        require(_startRewardDate > 0);\r\n        \r\n        uint256 epoch = (now - _startRewardDate).div(delayBeforeRewardWithdrawn);\r\n        \r\n        require(epoch > 0);\r\n        \r\n        uint256 depositedVMR = investors[msg.sender];\r\n        investors[msg.sender] = 0;\r\n        uint256 effectiveTokens = min(depositedVMR, maxVMRPerUser);\r\n        \r\n        uint256 reward = rewardPerToken.wmul(effectiveTokens).mul(epoch);\r\n        \r\n        if (depositedVMR > 0) TokenVMR.universalTransfer(msg.sender, depositedVMR); // withdraw body\r\n        if (reward > 0) address(uint160(msg.sender)).transfer(reward); // withdraw reward\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"DepositTokens\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountTokens\",\"type\":\"uint256[]\"}],\"name\":\"addDepositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeDelayBeforeRewardWithdrawnInSeconds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeMaxTotalVMRInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addressesRecalc\",\"type\":\"address[]\"}],\"name\":\"changeMaxVMRPerUserInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeRewardPerTokenInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayBeforeRewardWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256[14]\",\"name\":\"ret\",\"type\":\"uint256[14]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalVMR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxVMRPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"activate\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountTokens\",\"type\":\"uint256[]\"}],\"name\":\"setDepositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startRewardDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUniqueUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVMR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VMRDepo","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6577b719b40295d51174d21dbb03abc20a13ef4099da6f7e042d2ab59f0f0ca9"}]}