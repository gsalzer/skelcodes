{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/ownership/rbac/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: contracts/ERC2980/Issuable.sol\r\n\r\n/**\r\n * @title Issuable\r\n * @dev The Issuable contract defines the issuer role who can perform certain kind of actions\r\n * even if he is not the owner.\r\n * An issuer can transfer his role to a new address.\r\n */\r\ncontract Issuable is Ownable, RBAC {\r\n  string public constant ROLE_ISSUER = \"issuer\";\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not a issuer.\r\n   */\r\n  modifier onlyIssuer() {\r\n    require(isIssuer(msg.sender), 'Issuable: caller is not the issuer');\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrIssuer() {\r\n    require(msg.sender == owner || isIssuer(msg.sender), 'Issuable: caller is not the issuer or the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address has issuer role\r\n   */\r\n  function isIssuer(address _addr) public view returns (bool) {\r\n    return hasRole(_addr, ROLE_ISSUER);\r\n  }\r\n\r\n  /**\r\n   * @dev add a new issuer address\r\n   * @param _operator address\r\n   * @return true if the address was not an issuer, false if the address was already an issuer\r\n   */\r\n  function addIssuer(address _operator) public onlyOwner {\r\n    addRole(_operator, ROLE_ISSUER);\r\n  }\r\n\r\n    /**\r\n   * @dev remove an address from issuers\r\n   * @param _operator address\r\n   * @return true if the address has been removed from issuers,\r\n   * false if the address wasn't in the issuer list in the first place\r\n   */\r\n  function removeIssuer(address _operator) public onlyOwner {\r\n    removeRole(_operator, ROLE_ISSUER);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current issuer to transfer his role to a newIssuer.\r\n   * @param _newIssuer The address to transfer the issuer role to.\r\n   */\r\n  function transferIssuer(address _newIssuer) public onlyIssuer {\r\n    require(_newIssuer != address(0));\r\n    removeRole(msg.sender, ROLE_ISSUER);\r\n    addRole(_newIssuer, ROLE_ISSUER);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ERC2980/Frozenlist.sol\r\n\r\n/**\r\n * @title Frozenlist\r\n * @dev The Frozenlist contract has a frozen list of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Frozenlist is Issuable {\r\n\r\n  event FundsFrozen(address target);\r\n\r\n  string public constant ROLE_FROZENLIST = \"frozenlist\";\r\n\r\n  /**\r\n   * @dev Throws if operator is frozen.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfNotFrozen(address _operator) {\r\n    require(!hasRole(_operator, ROLE_FROZENLIST), \"Account frozen\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the frozenlist\r\n   * @param _operator address\r\n   * @return true if the address was added to the frozenlist, false if the address was already in the frozenlist\r\n   */\r\n  function addAddressToFrozenlist(address _operator) public onlyIssuer {\r\n    addRole(_operator, ROLE_FROZENLIST);\r\n    emit FundsFrozen(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in frozenlist\r\n   */\r\n  function frozenlist(address _operator) public view returns (bool) {\r\n    return hasRole(_operator, ROLE_FROZENLIST);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the frozenlist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the frozenlist,\r\n   * false if all addresses were already in the frozenlist\r\n   */\r\n  function addAddressesToFrozenlist(address[] _operators) public onlyIssuer {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToFrozenlist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the frozenlist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the frozenlist,\r\n   * false if the address wasn't in the frozenlist in the first place\r\n   */\r\n  function removeAddressFromFrozenlist(address _operator) public onlyIssuer {\r\n    removeRole(_operator, ROLE_FROZENLIST);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the frozenlist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the frozenlist,\r\n   * false if all addresses weren't in the frozenlist in the first place\r\n   */\r\n  function removeAddressesFromFrozenlist(address[] _operators) public onlyIssuer {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromFrozenlist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ERC2980/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n    By default whitelist in not enabled.\r\n */\r\ncontract Whitelist is Issuable {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n  bool public whitelistEnabled;\r\n\r\n  constructor(bool enableWhitelist)\r\n    public {\r\n      whitelistEnabled = enableWhitelist;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if operator is not whitelisted and whitelist is enabled.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    if(whitelistEnabled) {\r\n      checkRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n    _;\r\n  }\r\n\r\n  function enableWhitelist() public onlyOwner {\r\n    whitelistEnabled = true;\r\n  }\r\n\r\n  function disableWhitelist() public onlyOwner {\r\n    whitelistEnabled = false;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _operator) public onlyIssuer {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator) public view returns (bool) {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _operators) public onlyIssuer {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address _operator) public onlyIssuer {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] _operators) public onlyIssuer {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/NokuPricingPlan.sol\r\n\r\n/**\r\n* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\r\n*/\r\ncontract NokuPricingPlan {\r\n    /**\r\n    * @dev Pay the fee for the service identified by the specified name.\r\n    * The fee amount shall already be approved by the client.\r\n    * @param serviceName The name of the target service.\r\n    * @param multiplier The multiplier of the base service fee to apply.\r\n    * @param client The client of the target service.\r\n    * @return true if fee has been paid.\r\n    */\r\n    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\r\n\r\n    /**\r\n    * @dev Get the usage fee for the service identified by the specified name.\r\n    * The returned fee amount shall be approved before using #payFee method.\r\n    * @param serviceName The name of the target service.\r\n    * @param multiplier The multiplier of the base service fee to apply.\r\n    * @return The amount to approve before really paying such fee.\r\n    */\r\n    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\r\n}\r\n\r\n// File: contracts/NokuCustomToken.sol\r\n\r\ncontract NokuCustomToken is Ownable {\r\n\r\n    event LogBurnFinished();\r\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\r\n\r\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers for using Noku services\r\n    NokuPricingPlan public pricingPlan;\r\n\r\n    // The entity acting as Custom Token service provider i.e. Noku\r\n    address public serviceProvider;\r\n\r\n    // Flag indicating if Custom Token burning has been permanently finished or not.\r\n    bool public burningFinished;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only by service provider i.e. Noku.\r\n    */\r\n    modifier onlyServiceProvider() {\r\n        require(msg.sender == serviceProvider, \"caller is not service provider\");\r\n        _;\r\n    }\r\n\r\n    modifier canBurn() {\r\n        require(!burningFinished, \"burning finished\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _pricingPlan, address _serviceProvider) internal {\r\n        require(_pricingPlan != 0, \"_pricingPlan is zero\");\r\n        require(_serviceProvider != 0, \"_serviceProvider is zero\");\r\n\r\n        pricingPlan = NokuPricingPlan(_pricingPlan);\r\n        serviceProvider = _serviceProvider;\r\n    }\r\n\r\n    /**\r\n    * @dev Presence of this function indicates the contract is a Custom Token.\r\n    */\r\n    function isCustomToken() public pure returns(bool isCustom) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Stop burning new tokens.\r\n    * @return true if the operation was successful.\r\n    */\r\n    function finishBurning() public onlyOwner canBurn returns(bool finished) {\r\n        burningFinished = true;\r\n\r\n        emit LogBurnFinished();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Change the pricing plan of service fee to be paid in NOKU tokens.\r\n    * @param _pricingPlan The pricing plan of NOKU token to be paid, zero means flat subscription.\r\n    */\r\n    function setPricingPlan(address _pricingPlan) public onlyServiceProvider {\r\n        require(_pricingPlan != 0, \"_pricingPlan is 0\");\r\n        require(_pricingPlan != address(pricingPlan), \"_pricingPlan == pricingPlan\");\r\n\r\n        pricingPlan = NokuPricingPlan(_pricingPlan);\r\n\r\n        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin-origin/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/openzeppelin-origin/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: contracts/openzeppelin-origin/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts/openzeppelin-origin/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/openzeppelin-origin/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: contracts/openzeppelin-origin/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts/openzeppelin-origin/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/NokuCustomERC721.sol\r\n\r\n/**\r\n* @dev The NokuCustomERC721Token contract is a custom ERC721-compliant token available in the Noku Service Platform (NSP).\r\n* The Noku customer is able to choose the token name, symbol, decimals, initial supply and to administer its lifecycle\r\n* by minting or burning tokens in order to increase or decrease the token supply.\r\n*/\r\ncontract NokuCustomERC721 is NokuCustomToken, ERC721Token, Issuable, Frozenlist, Whitelist {\r\n    using SafeMath for uint256;\r\n    enum StorageTypes { None, IPFS, NOKU }\r\n\r\n    bool public isAdvanced = false;\r\n    bool public mintingFinished = false;\r\n\r\n    StorageTypes private storageType;\r\n    string private tokenBaseURIValue = \"\";\r\n    mapping (uint256 => string) private metadataURIs;\r\n\r\n    event LogNokuCustomERC721Created(\r\n        address indexed caller,\r\n        string indexed name,\r\n        string indexed symbol,\r\n        address pricingPlan,\r\n        address serviceProvider,\r\n        string baseURI,\r\n        StorageTypes _storageType\r\n    );\r\n\r\n    // event LogInformationChanged(\r\n    //     address indexed caller, \r\n    //     string name, \r\n    //     string symbol\r\n    // );\r\n\r\n    event MintFinished();\r\n\r\n    event FundsReassigned(address _from, address _to, uint256 _tokenId);\r\n    event FundsRevoked(address _from, uint256 _tokenId);\r\n\r\n    bytes32 public constant BURN_SERVICE_NAME = \"NokuCustomERC721.burn\";\r\n    bytes32 public constant MINT_SERVICE_NAME = \"NokuCustomERC721.mint\";\r\n    bytes32 public constant TRANSFERFROM_SERVICE_NAME = \"NokuCustomERC721.transferFrom\";\r\n\r\n    bytes4 internal constant InterfaceId_ERC721Advanced = 0xdb1e569f;\r\n    /**\r\n    * 0xdb1e569f ===\r\n    *   bytes4(keccak256('isERC721Advanced()'))\r\n    */\r\n\r\n    modifier canBurnToken(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        _;\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished, 'Mint finished');\r\n        _;\r\n    }\r\n\r\n    modifier isERC721Advanced() {\r\n        require(isAdvanced, 'ERC721 Advanced functions not available');\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfNotFrozen(address _operator) {\r\n        if (isAdvanced) {\r\n            require(!hasRole(_operator, ROLE_FROZENLIST), \"Account frozen\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    constructor (\r\n        string _name,\r\n        string _symbol,\r\n        string _tokenBaseURI,\r\n        bool _enableWhitelist,\r\n        bool _isAdvanced,\r\n        StorageTypes _storageType,\r\n        address _pricingPlan,\r\n        address _serviceProvider\r\n    )\r\n    NokuCustomToken(_pricingPlan, _serviceProvider)\r\n    ERC721Token(_name, _symbol)\r\n    Whitelist(_enableWhitelist)\r\n    public\r\n    {\r\n        _registerInterface(InterfaceId_ERC721Advanced);\r\n        isAdvanced = _isAdvanced;\r\n\r\n        addIssuer(owner);\r\n        if(_enableWhitelist) {\r\n            addAddressToWhitelist(owner);\r\n        }\r\n\r\n        require(bytes(_name).length > 0, \"_name is empty\");\r\n        require(bytes(_symbol).length > 0, \"_symbol is empty\");\r\n\r\n        if(bytes(_tokenBaseURI).length > 0){\r\n            tokenBaseURIValue = _tokenBaseURI;\r\n        }\r\n\r\n\r\n        storageType = _storageType;\r\n\r\n        emit LogNokuCustomERC721Created(\r\n            msg.sender,\r\n            _name,\r\n            _symbol,\r\n            _pricingPlan,\r\n            _serviceProvider,\r\n            _tokenBaseURI,\r\n            _storageType\r\n        );\r\n    }\r\n\r\n    // function setInformation(string _name, string _symbol) public onlyOwner returns(bool successful) {\r\n    //     require(bytes(_name).length > 0, \"_name is empty\");\r\n    //     require(bytes(_symbol).length > 0, \"_symbol is empty\");\r\n\r\n    //     name_ = _name;\r\n    //     symbol_ = _symbol;\r\n\r\n        // emit LogInformationChanged(msg.sender, _name, _symbol);\r\n\r\n    //     return true;\r\n    // }\r\n\r\n    function getStorageType() public view returns(StorageTypes) {\r\n        return storageType;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n        require(exists(_tokenId), \"tokenId does not exist\");\r\n        if(getStorageType() == StorageTypes.IPFS) {\r\n            return tokenMetadataURI(_tokenId);\r\n        } else if(getStorageType() == StorageTypes.NOKU) {\r\n            string memory partialPath = string(abi.encodePacked(tokenBaseURIValue, toString(this)));\r\n            return string(abi.encodePacked(string(abi.encodePacked(partialPath, \"/\")), uint2str(_tokenId)));\r\n        } else {\r\n            return string(abi.encodePacked(tokenBaseURIValue, uint2str(_tokenId)));\r\n        }\r\n    }\r\n\r\n    function tokenBaseURI() public view returns (string) {\r\n        return tokenBaseURIValue;\r\n    }\r\n\r\n    function updateTokenBaseURI(string memory _newBaseURI) public onlyOwner {\r\n        tokenBaseURIValue = _newBaseURI;\r\n    }\r\n\r\n    function updateTokenMetadataURI(uint256 _tokenId, string _tokenMetadataURI) public onlyOwner {\r\n        require(exists(_tokenId), \"tokenId does not exist\");\r\n        _setTokenMetadataURI(_tokenId, _tokenMetadataURI);\r\n    }\r\n\r\n    function tokenMetadataURI(uint256 _tokenId) public view returns (string) {\r\n        return metadataURIs[_tokenId];\r\n    }\r\n\r\n    function mint(uint256 _tokenId, address _to) public onlyOwner {\r\n        _mint(_tokenId, _to, \"\");\r\n    }\r\n\r\n    function mint(uint256 _tokenId, address _to, string _tokenMetadataURI) public onlyOwner {\r\n        _mint(_tokenId, _to, _tokenMetadataURI);\r\n    }\r\n\r\n    function multipleMint(uint256[] _tokensIds, address _to) public onlyOwner {\r\n        _multipleMint(_tokensIds, _to, \"\");\r\n    }\r\n\r\n    function multipleMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI) public onlyOwner {\r\n        _multipleMint(_tokensIds, _to, _tokenMetadataURI);\r\n    }\r\n\r\n    function safeMint(uint256 _tokenId, address _to) public onlyOwner {\r\n        _safeMint(_tokenId, _to, \"\", \"\");\r\n    }\r\n\r\n    function safeMint(uint256 _tokenId, address _to, bytes memory _data) public onlyOwner {\r\n        _safeMint(_tokenId, _to, \"\", _data);\r\n    }\r\n\r\n    function safeMint(uint256 _tokenId, address _to, string _tokenMetadataURI) public onlyOwner {\r\n        _safeMint(_tokenId, _to, _tokenMetadataURI, \"\");\r\n    }\r\n\r\n    function safeMint(uint256 _tokenId, address _to, string _tokenMetadataURI, bytes memory _data) public onlyOwner {\r\n        _safeMint(_tokenId, _to, _tokenMetadataURI, _data);\r\n    }\r\n\r\n    function multipleSafeMint(uint256[] _tokensIds, address _to) public onlyOwner {\r\n        _multipleSafeMint(_tokensIds, _to, \"\", \"\");\r\n    }\r\n\r\n    function multipleSafeMint(uint256[] _tokensIds, address _to, bytes memory _data) public onlyOwner {\r\n        _multipleSafeMint(_tokensIds, _to, \"\", _data);\r\n    }\r\n\r\n    function multipleSafeMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI) public onlyOwner {\r\n        _multipleSafeMint(_tokensIds, _to, _tokenMetadataURI, \"\");\r\n    }\r\n\r\n    function multipleSafeMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI, bytes memory _data) public onlyOwner {\r\n        _multipleSafeMint(_tokensIds, _to, _tokenMetadataURI, _data);\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public canBurn canBurnToken(_tokenId) onlyIfNotFrozen(msg.sender) {\r\n        if (bytes(metadataURIs[_tokenId]).length != 0) {\r\n            delete metadataURIs[_tokenId];\r\n        }\r\n        super._burn(ownerOf(_tokenId), _tokenId);\r\n        require(pricingPlan.payFee(BURN_SERVICE_NAME, 1 * 10**18, msg.sender), \"burn fee payment failed\");\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public onlyIfNotFrozen(_from) onlyIfNotFrozen(_to) onlyIfWhitelisted(_to) canTransfer(_tokenId) {\r\n        super.transferFrom(_from, _to, _tokenId);\r\n        require(pricingPlan.payFee(TRANSFERFROM_SERVICE_NAME, 1 * 10**18, msg.sender), \"transferFrom fee payment failed\");\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function reassign(address _from, address _to, uint256 _tokenId) public onlyIssuer isERC721Advanced {\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n        emit FundsReassigned(_from, _to, _tokenId);\r\n    }\r\n\r\n    function revoke(address _from, uint256 _tokenId) public onlyIssuer isERC721Advanced {\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(msg.sender, _tokenId);\r\n\r\n        emit Transfer(_from, msg.sender, _tokenId);\r\n        emit FundsRevoked(_from, _tokenId);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        if(isIssuer(owner)) {\r\n            if(whitelistEnabled) {\r\n                removeAddressFromWhitelist(owner);\r\n                addAddressToWhitelist(_newOwner);\r\n            }\r\n            transferIssuer(_newOwner);\r\n        }\r\n        super.transferOwnership(_newOwner);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        if(whitelistEnabled) {\r\n            removeAddressFromWhitelist(owner);\r\n        }\r\n        removeIssuer(owner);\r\n        super.renounceOwnership();\r\n    }\r\n\r\n    function addAddressToFrozenlist(address _operator) public isERC721Advanced {\r\n        super.addAddressToFrozenlist(_operator);\r\n    }\r\n\r\n    function removeAddressFromFrozenlist(address _operator) public isERC721Advanced {\r\n        super.removeAddressFromFrozenlist(_operator);\r\n    }\r\n\r\n    //Internal functions\r\n\r\n    function _mint(uint256 _tokenId, address _to, string _tokenMetadataURI) canMint onlyIfNotFrozen(_to) onlyIfWhitelisted(_to) internal returns (uint256) {\r\n        require(!exists(_tokenId), 'tokenId already exists');\r\n\r\n        if (storageType == StorageTypes.IPFS) {\r\n            require(bytes(_tokenMetadataURI).length > 0, \"missing IPFS uri\");\r\n        } else if (storageType == StorageTypes.NOKU) {\r\n            require(bytes(_tokenMetadataURI).length > 0, \"missing Noku uri\");\r\n        }\r\n\r\n        super._mint(_to, _tokenId);\r\n        _setTokenMetadataURI(_tokenId, _tokenMetadataURI);\r\n\r\n        require(pricingPlan.payFee(MINT_SERVICE_NAME, 1 * 10**18, msg.sender), \"mint fee payment failed\");\r\n\r\n        return _tokenId;\r\n    }\r\n\r\n    function _multipleMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI) internal {\r\n        for(uint256 i = 0; i < _tokensIds.length; i++) {\r\n            _mint(_tokensIds[i], _to, _tokenMetadataURI);\r\n        }\r\n    }\r\n\r\n    function _safeMint(uint256 _tokenId, address _to, string _tokenMetadataURI, bytes memory _data) internal returns (uint256) {\r\n        _mint(_tokenId, _to, _tokenMetadataURI);\r\n        require(checkAndCallSafeTransfer(address(0), _to, _tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n        return _tokenId;\r\n    }\r\n\r\n    function _multipleSafeMint(uint256[] _tokensIds, address _to, string _tokenMetadataURI, bytes memory _data) internal {\r\n        for(uint256 i = 0; i < _tokensIds.length; i++) {\r\n            _safeMint(_tokensIds[i], _to, _tokenMetadataURI, _data);\r\n        }\r\n    }\r\n\r\n    function _setTokenMetadataURI(uint256 _tokenId, string _tokenMetadataURI) internal {\r\n        if (storageType != StorageTypes.None) {\r\n            metadataURIs[_tokenId] = _tokenMetadataURI;\r\n        }\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint length;\r\n        while (j != 0){\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function toString(address _addr) internal pure returns (string) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    //Private functions\r\n\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/NokuCustomService.sol\r\n\r\ncontract NokuCustomService is Pausable {\r\n    using AddressUtils for address;\r\n\r\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\r\n\r\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers\r\n    NokuPricingPlan public pricingPlan;\r\n\r\n    constructor(address _pricingPlan) internal {\r\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\r\n\r\n        pricingPlan = NokuPricingPlan(_pricingPlan);\r\n    }\r\n\r\n    function setPricingPlan(address _pricingPlan) public onlyOwner {\r\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\r\n        require(NokuPricingPlan(_pricingPlan) != pricingPlan, \"_pricingPlan equal to current\");\r\n        \r\n        pricingPlan = NokuPricingPlan(_pricingPlan);\r\n\r\n        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\r\n    }\r\n}\r\n\r\n// File: contracts/NokuCustomERC721Service.sol\r\n\r\n/**\r\n* @dev The NokuCustomERC721Service contract .\r\n*/\r\ncontract NokuCustomERC721Service is NokuCustomService {\r\n    event LogNokuCustomERC721ServiceCreated(address caller, address indexed _pricingPlan);\r\n\r\n    uint256 public constant CREATE_AMOUNT = 1 * 10**18;\r\n\r\n    bytes32 public constant CREATE_SERVICE_NAME = \"NokuCustomERC721.create\";\r\n\r\n    constructor(address _pricingPlan) NokuCustomService(_pricingPlan) public {\r\n        emit LogNokuCustomERC721ServiceCreated(msg.sender, _pricingPlan);\r\n    }\r\n\r\n    function createCustomToken(string _name, string _symbol, string _tokenBaseURI, bool _enableWhitelist, bool _isAdvanced, NokuCustomERC721.StorageTypes _storageType, NokuPricingPlan _pricingPlan) public returns(NokuCustomERC721 customToken) {\r\n        customToken = new NokuCustomERC721(\r\n            _name,\r\n            _symbol,\r\n            _tokenBaseURI,\r\n            _enableWhitelist,\r\n            _isAdvanced,\r\n            _storageType,\r\n            _pricingPlan,\r\n            owner\r\n        );\r\n\r\n        // Transfer NokuCustomERC721 ownership to the client\r\n        customToken.transferOwnership(msg.sender);\r\n\r\n        require(_pricingPlan.payFee(CREATE_SERVICE_NAME, CREATE_AMOUNT, msg.sender), \"fee payment failed\");\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricingPlan\",\"type\":\"address\"}],\"name\":\"setPricingPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_SERVICE_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricingPlan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_tokenBaseURI\",\"type\":\"string\"},{\"name\":\"_enableWhitelist\",\"type\":\"bool\"},{\"name\":\"_isAdvanced\",\"type\":\"bool\"},{\"name\":\"_storageType\",\"type\":\"uint8\"},{\"name\":\"_pricingPlan\",\"type\":\"address\"}],\"name\":\"createCustomToken\",\"outputs\":[{\"name\":\"customToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pricingPlan\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_pricingPlan\",\"type\":\"address\"}],\"name\":\"LogNokuCustomERC721ServiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pricingPlan\",\"type\":\"address\"}],\"name\":\"LogPricingPlanChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NokuCustomERC721Service","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000749aba9e082ccb185d1ef88fa514339e3c3368d3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0577ead95f52086ea9d04751f24e8897fe4547238a847e3736ad6ffd2d1627ca"}]}