{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\timelock\\IDSPause.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.9;\r\n\r\n/**\r\n * @title IDSPause\r\n * @author Alexander Schlindwein\r\n *\r\n * @dev Interface for the timelock\r\n */\r\ninterface IDSPause {\r\n    function setOwner(address owner) external;\r\n    function setDelay(uint delay) external;\r\n    function soul(address usr) external view returns (bytes32 tag);\r\n    function plot(address usr, bytes32 tag, bytes memory fax, uint eta) external;\r\n    function drop(address usr, bytes32 tag, bytes memory fax, uint eta) external;\r\n    function exec(address usr, bytes32 tag, bytes memory fax, uint eta) external returns (bytes memory out);\r\n}\r\n\r\n// File: contracts\\timelock\\DSPauseProxy.sol\r\n\r\n// Copyright (C) 2019 David Terry <me@xwvvvvwx.com>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n// Updated by Alexander Schlindwein\r\n\r\n\r\ncontract DSPauseProxy {\r\n    address public _owner;\r\n    modifier auth { require(msg.sender == _owner, \"ds-pause-proxy-unauthorized\"); _; }\r\n    constructor() public { _owner = msg.sender; }\r\n\r\n    function exec(address usr, bytes memory fax)\r\n        public auth\r\n        returns (bytes memory out)\r\n    {\r\n        bool ok;\r\n        (ok, out) = usr.delegatecall(fax);\r\n        require(ok, \"ds-pause-delegatecall-error\");\r\n    }\r\n}\r\n\r\n// File: contracts\\timelock\\DSPause.sol\r\n\r\n// Copyright (C) 2019 David Terry <me@xwvvvvwx.com>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n// Updated by Alexander Schlindwein\r\n\r\n\r\ncontract DSPause is IDSPause {\r\n\r\n    address public _owner;\r\n    mapping (bytes32 => bool) public _plans;\r\n    DSPauseProxy public _proxy;\r\n    uint         public _delay;\r\n\r\n    modifier wait { require(msg.sender == address(_proxy), \"ds-pause-undelayed-call\"); _; }\r\n    modifier auth { require(msg.sender == _owner, \"ds-pause-unauthorized\"); _; }\r\n\r\n    constructor(uint delay, address owner) public {\r\n        require(owner != address(0), \"invalid-params\");\r\n        _delay = delay;\r\n        _owner = owner;\r\n        _proxy = new DSPauseProxy();\r\n    }\r\n\r\n    function setOwner(address owner) public wait override {\r\n        require(owner != address(0), \"invalid-params\");\r\n        _owner = owner;\r\n    }\r\n\r\n    function setDelay(uint delay) public wait override {\r\n        _delay = delay;\r\n    }\r\n\r\n    function hash(address usr, bytes32 tag, bytes memory fax, uint eta)\r\n        internal pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encode(usr, tag, fax, eta));\r\n    }\r\n\r\n    function soul(address usr)\r\n        public view override\r\n        returns (bytes32 tag)\r\n    {\r\n        assembly { tag := extcodehash(usr) }\r\n    }\r\n\r\n    function plot(address usr, bytes32 tag, bytes memory fax, uint eta)\r\n        public auth override\r\n    {\r\n        require(eta >= add(now, _delay), \"ds-pause-delay-not-respected\");\r\n        _plans[hash(usr, tag, fax, eta)] = true;\r\n    }\r\n\r\n    function drop(address usr, bytes32 tag, bytes memory fax, uint eta)\r\n        public auth override\r\n    {\r\n        _plans[hash(usr, tag, fax, eta)] = false;\r\n    }\r\n\r\n    function exec(address usr, bytes32 tag, bytes memory fax, uint eta)\r\n        public auth override\r\n        returns (bytes memory out)\r\n    {\r\n        require(_plans[hash(usr, tag, fax, eta)], \"ds-pause-unplotted-plan\");\r\n        require(soul(usr) == tag,                   \"ds-pause-wrong-codehash\");\r\n        require(now >= eta,                          \"ds-pause-premature-exec\");\r\n\r\n        _plans[hash(usr, tag, fax, eta)] = false;\r\n\r\n        out = _proxy.exec(usr, fax);\r\n        require(_proxy._owner() == address(this), \"ds-pause-illegal-storage-change\");\r\n    }\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"ds-pause-addition-overflow\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_plans\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_proxy\",\"outputs\":[{\"internalType\":\"contract DSPauseProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"drop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"exec\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"out\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"plot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"soul\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DSPause","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000151800000000000000000000000004905485d8b0be42b317ccb4806b966ac0d4f4ae8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4ec0508f2ab4c64cd7b43d324457527507c90fc5fde84b6b53fdb168869c2592"}]}