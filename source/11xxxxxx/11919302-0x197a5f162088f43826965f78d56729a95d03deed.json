{"status":"1","message":"OK","result":[{"SourceCode":"// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address _payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface PoolInterface {\r\n    function swapExactAmountIn(address, address, address, uint, address, uint) external returns (uint, uint);\r\n\r\n    function swapExactAmountOut(address, address, uint, address, uint, address, uint) external returns (uint, uint);\r\n\r\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n\r\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n\r\n    function getDenormalizedWeight(address) external view returns (uint);\r\n\r\n    function getBalance(address) external view returns (uint);\r\n\r\n    function getSwapFee() external view returns (uint);\r\n\r\n    function gulp(address) external;\r\n\r\n    function calcDesireByGivenAmount(address, address, uint256, uint256) view external returns (uint);\r\n\r\n    function calcPoolSpotPrice(address, address, uint256, uint256) external view returns (uint256);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n\r\n    function allowance(address, address) external view returns (uint);\r\n\r\n    function approve(address, uint) external returns (bool);\r\n\r\n    function transfer(address, uint) external returns (bool);\r\n\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface RegistryInterface {\r\n    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\r\n}\r\n\r\ncontract ExchangeProxy is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Pool {\r\n        address pool;\r\n        uint tokenBalanceIn;\r\n        uint tokenWeightIn;\r\n        uint tokenBalanceOut;\r\n        uint tokenWeightOut;\r\n        uint swapFee;\r\n        uint effectiveLiquidity;\r\n    }\r\n\r\n    struct Swap {\r\n        address pool;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint swapAmount; // tokenInAmount / tokenOutAmount\r\n        uint limitReturnAmount; // minAmountOut / maxAmountIn\r\n        uint maxPrice;\r\n    }\r\n\r\n    TokenInterface weth;\r\n    RegistryInterface registry;\r\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    uint private constant BONE = 10 ** 18;\r\n\r\n    constructor(address _weth) public {\r\n        weth = TokenInterface(_weth);\r\n    }\r\n\r\n    function setRegistry(address _registry) external onlyOwner {\r\n        registry = RegistryInterface(_registry);\r\n    }\r\n\r\n    function batchSwapExactIn(\r\n        Swap[] memory swaps,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    )\r\n    public payable\r\n    returns (uint totalAmountOut)\r\n    {\r\n        address from = msg.sender;\r\n        if (isETH(tokenIn)) {\r\n            require(msg.value >= totalAmountIn, \"ERROR_ETH_IN\");\r\n            weth.deposit.value(totalAmountIn)();\r\n            from = address(this);\r\n        }\r\n        uint _totalSwapIn = 0;\r\n        for (uint i = 0; i < swaps.length; i++) {\r\n            Swap memory swap = swaps[i];\r\n            require(swap.tokenIn == address(tokenIn) || (swap.tokenIn == address(weth) && isETH(tokenIn)), \"ERR_TOKENIN_NOT_MATCH\");\r\n            safeTransferFrom(swap.tokenIn, from, swap.pool, swap.swapAmount);\r\n            address _to = (swap.tokenOut == address(weth) && isETH(tokenOut)) ? address(this) : msg.sender;\r\n            PoolInterface pool = PoolInterface(swap.pool);\r\n            (uint tokenAmountOut,) = pool.swapExactAmountIn(\r\n                msg.sender,\r\n                swap.tokenIn,\r\n                swap.tokenOut,\r\n                swap.limitReturnAmount,\r\n                _to,\r\n                swap.maxPrice\r\n            );\r\n            if (_to != msg.sender) {\r\n                transferAll(tokenOut, tokenAmountOut);\r\n            }\r\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\r\n            _totalSwapIn = _totalSwapIn.add(swap.swapAmount);\r\n        }\r\n        require(_totalSwapIn == totalAmountIn, \"ERR_TOTAL_AMOUNT_IN\");\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n        if (isETH(tokenIn) && msg.value > _totalSwapIn) {\r\n            (bool xfer,) = msg.sender.call.value(msg.value.sub(_totalSwapIn))(\"\");\r\n            require(xfer, \"ERR_ETH_FAILED\");\r\n        }\r\n    }\r\n\r\n    function batchSwapExactOut(\r\n        Swap[] memory swaps,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint maxTotalAmountIn\r\n    )\r\n    public payable\r\n    returns (uint totalAmountIn)\r\n    {\r\n        address from = msg.sender;\r\n        if (isETH(tokenIn)) {\r\n            weth.deposit.value(msg.value)();\r\n            from = address(this);\r\n        }\r\n        for (uint i = 0; i < swaps.length; i++) {\r\n            Swap memory swap = swaps[i];\r\n            uint tokenAmountIn = getAmountIn(swap);\r\n            swap.tokenIn = isETH(tokenIn) ? address(weth) : swap.tokenIn;\r\n            safeTransferFrom(swap.tokenIn, from, swap.pool, tokenAmountIn);\r\n            address _to = (swap.tokenOut == address(weth) && isETH(tokenOut)) ? address(this) : msg.sender;\r\n            PoolInterface pool = PoolInterface(swap.pool);\r\n            pool.swapExactAmountOut(\r\n                msg.sender,\r\n                swap.tokenIn,\r\n                swap.limitReturnAmount,\r\n                swap.tokenOut,\r\n                swap.swapAmount,\r\n                _to,\r\n                swap.maxPrice\r\n            );\r\n            if (_to != msg.sender) {\r\n                transferAll(tokenOut, swap.swapAmount);\r\n            }\r\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\r\n        }\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n        if (isETH(tokenIn) && msg.value > totalAmountIn) {\r\n            transferAll(tokenIn, msg.value.sub(totalAmountIn));\r\n        }\r\n    }\r\n\r\n    function multihopBatchSwapExactIn(\r\n        Swap[][] memory swapSequences,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    )\r\n    public payable\r\n    returns (uint totalAmountOut)\r\n    {\r\n        uint totalSwapAmount = 0;\r\n        address from = msg.sender;\r\n        if (isETH(tokenIn)) {\r\n            require(msg.value >= totalAmountIn, \"ERROR_ETH_IN\");\r\n            weth.deposit.value(totalAmountIn)();\r\n            from = address(this);\r\n        }\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            totalSwapAmount = totalSwapAmount.add(swapSequences[i][0].swapAmount);\r\n            require(swapSequences[i][0].tokenIn == address(tokenIn) || (isETH(tokenIn) && swapSequences[i][0].tokenIn == address(weth)), \"ERR_TOKENIN_NOT_MATCH\");\r\n            safeTransferFrom(swapSequences[i][0].tokenIn, from, swapSequences[i][0].pool, swapSequences[i][0].swapAmount);\r\n\r\n            uint tokenAmountOut;\r\n            for (uint k = 0; k < swapSequences[i].length; k++) {\r\n                Swap memory swap = swapSequences[i][k];\r\n                PoolInterface pool = PoolInterface(swap.pool);\r\n                address _to;\r\n                if (k < swapSequences[i].length - 1) {\r\n                    _to = swapSequences[i][k + 1].pool;\r\n                } else {\r\n                    require(swap.tokenOut == address(tokenOut) || (swap.tokenOut == address(weth) && isETH(tokenOut)), \"ERR_OUTCOIN_NOT_MATCH\");\r\n                    _to = (swap.tokenOut == address(weth) && isETH(tokenOut)) ? address(this) : msg.sender;\r\n                }\r\n                (tokenAmountOut,) = pool.swapExactAmountIn(\r\n                    msg.sender,\r\n                    swap.tokenIn,\r\n                    swap.tokenOut,\r\n                    swap.limitReturnAmount,\r\n                    _to,\r\n                    swap.maxPrice\r\n                );\r\n                if (k == swapSequences[i].length - 1 && _to != msg.sender) {\r\n                    transferAll(tokenOut, tokenAmountOut);\r\n                }\r\n            }\r\n            // This takes the amountOut of the last swap\r\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\r\n        }\r\n        require(totalSwapAmount == totalAmountIn, \"ERR_TOTAL_AMOUNT_IN\");\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n        if (isETH(tokenIn) && msg.value > totalSwapAmount) {\r\n            (bool xfer,) = msg.sender.call.value(msg.value.sub(totalAmountIn))(\"\");\r\n            require(xfer, \"ERR_ETH_FAILED\");\r\n        }\r\n    }\r\n\r\n    function multihopBatchSwapExactOut(\r\n        Swap[][] memory swapSequences,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint maxTotalAmountIn\r\n    )\r\n    public payable\r\n    returns (uint totalAmountIn)\r\n    {\r\n        address from = msg.sender;\r\n        if (isETH(tokenIn)) {\r\n            require(msg.value >= maxTotalAmountIn, \"ERROR_ETH_IN\");\r\n            weth.deposit.value(msg.value)();\r\n            from = address(this);\r\n        }\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint[] memory amountIns = getAmountsIn(swapSequences[i]);\r\n            swapSequences[i][0].tokenIn = isETH(tokenIn) ? address(weth) : swapSequences[i][0].tokenIn;\r\n            safeTransferFrom(swapSequences[i][0].tokenIn, from, swapSequences[i][0].pool, amountIns[0]);\r\n\r\n            for (uint j = 0; j < swapSequences[i].length; j++) {\r\n                Swap memory swap = swapSequences[i][j];\r\n                PoolInterface pool = PoolInterface(swap.pool);\r\n                address _to;\r\n                if (j < swapSequences[i].length - 1) {\r\n                    _to = swapSequences[i][j + 1].pool;\r\n                } else {\r\n                    require(swap.tokenOut == address(tokenOut) || (swap.tokenOut == address(weth) && isETH(tokenOut)), \"ERR_OUTCOIN_NOT_MATCH\");\r\n                    _to = (swap.tokenOut == address(weth) && isETH(tokenOut)) ? address(this) : msg.sender;\r\n                }\r\n                uint _tokenOut = j < swapSequences[i].length - 1 ? amountIns[j + 1] : swap.swapAmount;\r\n                pool.swapExactAmountOut(\r\n                    msg.sender,\r\n                    swap.tokenIn,\r\n                    amountIns[j],\r\n                    swap.tokenOut,\r\n                    _tokenOut,\r\n                    _to,\r\n                    swap.maxPrice\r\n                );\r\n                if (j == swapSequences[i].length - 1 && _to != msg.sender) {\r\n                    transferAll(tokenOut, _tokenOut);\r\n                }\r\n            }\r\n            totalAmountIn = totalAmountIn.add(amountIns[0]);\r\n        }\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n        if (isETH(tokenIn) && msg.value > totalAmountIn) {\r\n            transferAll(tokenIn, msg.value.sub(totalAmountIn));\r\n        }\r\n    }\r\n\r\n    function getBalance(TokenInterface token) internal view returns (uint) {\r\n        if (isETH(token)) {\r\n            return weth.balanceOf(address(this));\r\n        } else {\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function transferAll(TokenInterface token, uint amount) internal{\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            weth.withdraw(amount);\r\n            (bool xfer,) = msg.sender.call.value(amount)(\"\");\r\n            require(xfer, \"ERR_ETH_FAILED\");\r\n        } else {\r\n            safeTransfer(address(token), msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function isETH(TokenInterface token) internal pure returns (bool) {\r\n        return (address(token) == ETH_ADDRESS);\r\n    }\r\n\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    // given an output amount of an asset and pool, returns a required input amount of the other asset\r\n    function getAmountIn(Swap memory swap) internal view returns (uint amountIn) {\r\n        require(swap.swapAmount > 0, 'ExchangeProxy: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        PoolInterface pool = PoolInterface(swap.pool);\r\n        amountIn = pool.calcDesireByGivenAmount(\r\n            swap.tokenIn,\r\n            swap.tokenOut,\r\n            0,\r\n            swap.swapAmount\r\n        );\r\n        uint256 spotPrice = pool.calcPoolSpotPrice(\r\n            swap.tokenIn,\r\n            swap.tokenOut,\r\n            0,\r\n            0\r\n        );\r\n        require(spotPrice <= swap.maxPrice, \"ERR_LIMIT_PRICE\");\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pools\r\n    function getAmountsIn(Swap[] memory swaps) internal view returns (uint[] memory amounts) {\r\n        require(swaps.length >= 1, 'ExchangeProxy: INVALID_PATH');\r\n        amounts = new uint[](swaps.length);\r\n        uint i = swaps.length - 1;\r\n        while (i > 0) {\r\n            Swap memory swap = swaps[i];\r\n            amounts[i] = getAmountIn(swap);\r\n            require(swaps[i].tokenIn == swaps[i - 1].tokenOut, \"ExchangeProxy: INVALID_PATH\");\r\n            swaps[i - 1].swapAmount = amounts[i];\r\n            i--;\r\n        }\r\n        amounts[0] = getAmountIn(swaps[0]);\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExchangeProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://555032675a9d3a3629e4edab2c0d0c14dbe887d8ae7e48659a39a406325a1d1d"}]}