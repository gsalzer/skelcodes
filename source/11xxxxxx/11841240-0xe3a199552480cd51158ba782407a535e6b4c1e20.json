{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface UniswapRouter {\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory);\r\n}\r\n\r\ninterface YCrvGauge {\r\n    function deposit(uint256 amount) external;\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\ninterface TokenMinter {\r\n    function mint(address account) external;\r\n}\r\n\r\ncontract Svault {\r\n\r\n    IERC20 constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    UniswapRouter constant UNIROUTER = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    YCrvGauge constant YCRVGAUGE = YCrvGauge(0xFA712EE4788C042e2B7BB55E6cb8ec569C4530c1);\r\n    TokenMinter constant TOKENMINTER = TokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\r\n    uint32 constant TOTALRATE = 10000;\r\n    IERC20 constant CRV = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    \r\n    mapping(address => uint) public rewardedBalancePerUser;\r\n    mapping(address => uint) public lastTimestampPerUser;\r\n    mapping(address => uint) public depositBalancePerUser;\r\n    mapping(address => uint) public accDepositBalancePerUser;\r\n\r\n    uint public lastTotalTimestamp;\r\n    uint public accTotalReward;\r\n    uint public totalDeposit;\r\n    uint public accTotalDeposit;\r\n\r\n    string public vaultName;\r\n    IERC20 public token0;\r\n    IERC20 public token1;\r\n\r\n    address public feeAddress;\r\n\r\n    uint32 public feeRate;\r\n\r\n    address public treasury;\r\n\r\n\r\n    uint32 public rewardUserRate = 7000;\r\n    uint32 public rewardTreasuryRate = 3000;\r\n\r\n    \r\n    address public gov;\r\n\r\n    event Deposited(address indexed user, uint amount);\r\n    event ClaimedReward(address indexed user, uint amount);\r\n    event Withdrawn(address indexed user, uint amount);\r\n\r\n    constructor (address _token0, address _token1, address _feeAddress, string memory name, address _treasury) payable {\r\n        token0 = IERC20(_token0);\r\n        token1 = IERC20(_token1);\r\n        feeAddress = _feeAddress;\r\n        vaultName = name;\r\n        gov = msg.sender;\r\n        treasury = _treasury;\r\n        token0.approve(address(YCRVGAUGE), type(uint).max);\r\n        CRV.approve(address(UNIROUTER), type(uint).max);\r\n    }\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == gov, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    modifier updateBalance(address userAddress) {\r\n        uint lastTimestamp = lastTimestampPerUser[userAddress];\r\n        uint totalTimestamp = lastTotalTimestamp;\r\n        if (lastTimestamp > 0) {\r\n            accDepositBalancePerUser[userAddress] += depositBalancePerUser[userAddress] * (block.timestamp - lastTimestamp);\r\n        }\r\n\r\n        if (totalTimestamp > 0) {\r\n            accTotalDeposit += totalDeposit * (block.timestamp - totalTimestamp);\r\n        }\r\n        lastTimestampPerUser[userAddress] = block.timestamp;\r\n        lastTotalTimestamp = block.timestamp;\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address _gov)\r\n        external\r\n        onlyGov\r\n    {\r\n        gov = _gov;\r\n    }\r\n\r\n    function setToken0(address _token)\r\n        external\r\n        onlyGov\r\n    {\r\n        token0 = IERC20(_token);\r\n    }\r\n\r\n    function setToken1(address _token)\r\n        external\r\n        onlyGov\r\n    {\r\n        token1 = IERC20(_token);\r\n    }\r\n\r\n    function setTreasury(address _treasury)\r\n        external\r\n        onlyGov\r\n    {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setUserRate(uint32 _rewardUserRate)\r\n        external\r\n        onlyGov\r\n    {\r\n        rewardUserRate = _rewardUserRate;\r\n    }\r\n\r\n    function setTreasuryRate(uint32 _rewardTreasuryRate)\r\n        external\r\n        onlyGov\r\n    {\r\n        rewardTreasuryRate = _rewardTreasuryRate;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress)\r\n        external\r\n        onlyGov\r\n    {\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setFeeRate(uint32 _feeRate)\r\n        external\r\n        onlyGov\r\n    {\r\n        feeRate = _feeRate;\r\n    }\r\n\r\n    function setVaultName(string memory name)\r\n        external\r\n        onlyGov\r\n    {\r\n        vaultName = name;\r\n    }\r\n\r\n    function getReward() internal\r\n    {\r\n        uint rewardAmountForCRVToken = CRV.balanceOf(address(this));\r\n        TOKENMINTER.mint(address(YCRVGAUGE));\r\n        rewardAmountForCRVToken = CRV.balanceOf(address(this)) - rewardAmountForCRVToken;\r\n        uint rewardCRVTokenAmountForUsers = rewardAmountForCRVToken * rewardUserRate / TOTALRATE;\r\n        uint rewardCRVTokenAmountForTreasury = rewardAmountForCRVToken * rewardTreasuryRate / TOTALRATE;\r\n        address[] memory tokens = new address[](3);\r\n        tokens[0] = address(CRV);\r\n        tokens[1] = address(WETH);\r\n        tokens[2] = address(token1);\r\n        address[] memory tokens1 = new address[](2);\r\n        tokens1[0] = address(CRV);\r\n        tokens1[1] = address(WETH);\r\n        uint rewardPylonTokenAmountForUsers = token1.balanceOf(address(this));\r\n        if (rewardCRVTokenAmountForUsers > 0) {\r\n            UNIROUTER.swapExactTokensForTokens(rewardCRVTokenAmountForUsers, 0, tokens, address(this), type(uint).max);\r\n        }\r\n        uint wethBalance = WETH.balanceOf(address(this));\r\n        if (rewardCRVTokenAmountForTreasury > 0) {\r\n            UNIROUTER.swapExactTokensForTokens(rewardCRVTokenAmountForTreasury, 0, tokens1, address(this), type(uint).max);\r\n        }\r\n    \r\n        rewardPylonTokenAmountForUsers = token1.balanceOf(address(this)) - rewardPylonTokenAmountForUsers; // fYCRV -> Pylon   from rewardFarmTokenAmountForUsers\r\n        accTotalReward += rewardPylonTokenAmountForUsers;\r\n        wethBalance = WETH.balanceOf(address(this)) - wethBalance;\r\n        if (wethBalance > 0) {\r\n            WETH.transfer(treasury, wethBalance);\r\n        }\r\n    }\r\n\r\n    function deposit(uint amount) external updateBalance(msg.sender) {\r\n        getReward();\r\n        // minimum fee 0.01%\r\n        uint feeAmount = amount * feeRate / TOTALRATE;\r\n        uint realAmount = amount - feeAmount;\r\n\r\n        if (feeAmount > 0) {\r\n            token0.transferFrom(msg.sender, feeAddress, feeAmount);\r\n        }\r\n        \r\n        if (realAmount > 0) {\r\n            token0.transferFrom(msg.sender, address(this), realAmount);\r\n            YCRVGAUGE.deposit(realAmount);\r\n            depositBalancePerUser[msg.sender] += realAmount;\r\n            totalDeposit += realAmount;\r\n            emit Deposited(msg.sender, realAmount);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint amount) external updateBalance(msg.sender) {\r\n        getReward();\r\n        uint depositBalance = depositBalancePerUser[msg.sender];\r\n        if (amount > depositBalance) {\r\n            amount = depositBalance;\r\n        }\r\n        uint amountWithdrawForYCRV = token0.balanceOf(address(this));\r\n        YCRVGAUGE.withdraw(amount);\r\n        amountWithdrawForYCRV = token0.balanceOf(address(this)) - amountWithdrawForYCRV;\r\n        token0.transfer(msg.sender, amountWithdrawForYCRV);\r\n        \r\n        depositBalancePerUser[msg.sender] = depositBalance - amountWithdrawForYCRV;\r\n        totalDeposit -= amountWithdrawForYCRV;\r\n\r\n        emit Withdrawn(msg.sender, amountWithdrawForYCRV);\r\n    }\r\n\r\n    function claimReward() external updateBalance(msg.sender) {\r\n        getReward();\r\n\r\n        uint reward = 0;\r\n        uint currentRewardAmount = accTotalReward * accDepositBalancePerUser[msg.sender] / accTotalDeposit;\r\n        uint rewardedAmount = rewardedBalancePerUser[msg.sender];\r\n        if (currentRewardAmount > rewardedAmount) {\r\n            reward = currentRewardAmount - rewardedAmount;\r\n            rewardedBalancePerUser[msg.sender] = rewardedAmount + reward;\r\n            uint token1Balance = token1.balanceOf(address(this));\r\n            if (reward > token1Balance) {\r\n                reward = token1Balance;\r\n            }\r\n        }\r\n        if (reward > 0) {\r\n            token1.transfer(msg.sender, reward);\r\n            emit ClaimedReward(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function seize(address token, address to) external onlyGov {\r\n        require(IERC20(token) != token1, \"main tokens\");\r\n        if (token != address(0)) {\r\n            uint amount = IERC20(token).balanceOf(address(this));\r\n            IERC20(token).transfer(to, amount);\r\n        }\r\n        else {\r\n            uint amount = address(this).balance;\r\n            payable(to).transfer(amount);\r\n        }\r\n    }\r\n        \r\n    fallback () external payable { }\r\n    receive () external payable { }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accDepositBalancePerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositBalancePerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimestampPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTreasuryRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardUserRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardedBalancePerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeRate\",\"type\":\"uint32\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rewardTreasuryRate\",\"type\":\"uint32\"}],\"name\":\"setTreasuryRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rewardUserRate\",\"type\":\"uint32\"}],\"name\":\"setUserRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setVaultName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Svault","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000df5e0e81dff6faf3a7e52ba697820c5e32d806a8000000000000000000000000d7b7d3c0bda57723fb54ab95fd8f9ea033af37f2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000002d2ae0bfe25503f608f0f5cdce54c17302c01ea9000000000000000000000000000000000000000000000000000000000000000c535661756c745633594352560000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ba74cc2dc08d63ed18bb18f2c251d6828ba6a6d46f0faf93d9afa9b29acfa2dc"}]}