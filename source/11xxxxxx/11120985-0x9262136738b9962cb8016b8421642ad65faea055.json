{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\ncontract RateSetterMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x);\r\n    }\r\n    function addition(uint x, int y) public pure returns (uint z) {\r\n        z = x + uint(y);\r\n        require(y >= 0 || z <= x);\r\n        require(y <= 0 || z >= x);\r\n    }\r\n    function addition(int x, int y) public pure returns (int z) {\r\n        z = x + y;\r\n        require(y >= 0 || z <= x);\r\n        require(y <= 0 || z >= x);\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x);\r\n    }\r\n    function subtract(int x, int y) public pure returns (int z) {\r\n        z = x - y;\r\n        require(y <= 0 || z <= x);\r\n        require(y >= 0 || z >= x);\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function multiply(int x, uint y) public pure returns (int z) {\r\n        require(y == 0 || (z = x * int(y)) / int(y) == x);\r\n    }\r\n    function multiply(int x, int y) public pure returns (int z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rmultiply(uint x, int y) public pure returns (int z) {\r\n        z = multiply(y, x) / int(RAY);\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function wmultiply(int x, uint y) public pure returns (int z) {\r\n        z = multiply(x, y) / int(WAD);\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC, Reflexer Labs, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nabstract contract OracleLike {\r\n    function getResultWithValidity() virtual external returns (uint256, bool);\r\n}\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual external returns (uint256);\r\n    function modifyParameters(bytes32,uint256) virtual external;\r\n}\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n}\r\nabstract contract PIDValidator {\r\n    function validateSeed(uint256, uint256, uint256, uint256, uint256, uint256) virtual external returns (uint256);\r\n    function rt(uint256, uint256, uint256) virtual external view returns (uint256);\r\n    function pscl() virtual external view returns (uint256);\r\n    function tlv() virtual external view returns (uint256);\r\n    function lprad() virtual external view returns (uint256);\r\n    function uprad() virtual external view returns (uint256);\r\n    function adi() virtual external view returns (uint256);\r\n    function adat() external virtual view returns (uint256);\r\n}\r\n\r\ncontract RateSetter is RateSetterMath {\r\n  // --- Auth ---\r\n  mapping (address => uint) public authorizedAccounts;\r\n  function addAuthorization(address account) external isAuthorized { authorizedAccounts[account] = 1; }\r\n  function removeAuthorization(address account) external isAuthorized { authorizedAccounts[account] = 0; }\r\n  modifier isAuthorized {\r\n      require(authorizedAccounts[msg.sender] == 1, \"RateSetter/account-not-authorized\");\r\n      _;\r\n  }\r\n\r\n  // Settlement flag\r\n  uint256 public contractEnabled;                 // [0 or 1]\r\n  // Last recorded system coin market price\r\n  uint256 public latestMarketPrice;               // [ray]\r\n  // When the price feed was last updated\r\n  uint256 public lastUpdateTime;                  // [timestamp]\r\n  // Enforced gap between calls\r\n  uint256 public updateRateDelay;                 // [seconds]\r\n  // Starting reward for the feeReceiver of a updateRate call\r\n  uint256 public baseUpdateCallerReward;          // [wad]\r\n  // Max possible reward for the feeReceiver of a updateRate call\r\n  uint256 public maxUpdateCallerReward;           // [wad]\r\n  // Rate applied to baseUpdateCallerReward every extra second passed beyond updateRateDelay seconds since the last updateRate call\r\n  uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n\r\n  // --- System Dependencies ---\r\n  // OSM or medianizer for the system coin\r\n  OracleLike                public orcl;\r\n  // OracleRelayer where the redemption price is stored\r\n  OracleRelayerLike         public oracleRelayer;\r\n  // SF treasury\r\n  StabilityFeeTreasuryLike  public treasury;\r\n  // Calculator for the redemption rate\r\n  PIDValidator              public pidValidator;\r\n\r\n  // --- Events ---\r\n  event UpdateRedemptionRate(\r\n      uint marketPrice,\r\n      uint redemptionPrice,\r\n      uint seed,\r\n      uint redemptionRate\r\n  );\r\n  event FailUpdateRedemptionRate(\r\n      bytes reason\r\n  );\r\n  event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\r\n  event FailUpdateOracle(bytes revertReason, address orcl);\r\n\r\n  constructor(\r\n    address oracleRelayer_,\r\n    address orcl_,\r\n    address treasury_,\r\n    address pidValidator_,\r\n    uint256 baseUpdateCallerReward_,\r\n    uint256 maxUpdateCallerReward_,\r\n    uint256 perSecondCallerRewardIncrease_,\r\n    uint256 updateRateDelay_\r\n  ) public {\r\n      if (address(treasury_) != address(0)) {\r\n        require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"RateSetter/treasury-coin-not-set\");\r\n      }\r\n      require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"RateSetter/invalid-max-caller-reward\");\r\n      require(perSecondCallerRewardIncrease_ >= RAY, \"RateSetter/invalid-per-second-reward-increase\");\r\n      authorizedAccounts[msg.sender]  = 1;\r\n      oracleRelayer                   = OracleRelayerLike(oracleRelayer_);\r\n      orcl                            = OracleLike(orcl_);\r\n      treasury                        = StabilityFeeTreasuryLike(treasury_);\r\n      pidValidator                    = PIDValidator(pidValidator_);\r\n      baseUpdateCallerReward          = baseUpdateCallerReward_;\r\n      maxUpdateCallerReward           = maxUpdateCallerReward_;\r\n      perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\r\n      updateRateDelay                 = updateRateDelay_;\r\n      contractEnabled                 = 1;\r\n  }\r\n\r\n  // --- Boolean Logic ---\r\n  function either(bool x, bool y) internal pure returns (bool z) {\r\n      assembly{ z := or(x, y)}\r\n  }\r\n\r\n  // --- Management ---\r\n  function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n      require(contractEnabled == 1, \"RateSetter/contract-not-enabled\");\r\n      if (parameter == \"orcl\") orcl = OracleLike(addr);\r\n      else if (parameter == \"oracleRelayer\") oracleRelayer = OracleRelayerLike(addr);\r\n      else if (parameter == \"treasury\") {\r\n        require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), \"RateSetter/treasury-coin-not-set\");\r\n        treasury = StabilityFeeTreasuryLike(addr);\r\n      }\r\n      else if (parameter == \"pidValidator\") {\r\n        pidValidator = PIDValidator(addr);\r\n      }\r\n      else revert(\"RateSetter/modify-unrecognized-param\");\r\n  }\r\n  function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n      require(contractEnabled == 1, \"RateSetter/contract-not-enabled\");\r\n      if (parameter == \"baseUpdateCallerReward\") {\r\n        require(val <= maxUpdateCallerReward, \"RateSetter/invalid-base-caller-reward\");\r\n        baseUpdateCallerReward = val;\r\n      }\r\n      else if (parameter == \"maxUpdateCallerReward\") {\r\n        require(val >= baseUpdateCallerReward, \"RateSetter/invalid-max-caller-reward\");\r\n        maxUpdateCallerReward = val;\r\n      }\r\n      else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n        require(val >= RAY, \"RateSetter/invalid-caller-reward-increase\");\r\n        perSecondCallerRewardIncrease = val;\r\n      }\r\n      else if (parameter == \"updateRateDelay\") {\r\n        require(val >= 0, \"RateSetter/invalid-call-gap-length\");\r\n        updateRateDelay = val;\r\n      }\r\n      else revert(\"RateSetter/modify-unrecognized-param\");\r\n  }\r\n  function disableContract() external isAuthorized {\r\n      contractEnabled = 0;\r\n  }\r\n\r\n  // --- Treasury ---\r\n  function treasuryAllowance() public view returns (uint256) {\r\n      (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n      return minimum(total, perBlock);\r\n  }\r\n  function getCallerReward() public view returns (uint256) {\r\n      uint256 timeElapsed = (lastUpdateTime == 0) ? updateRateDelay : subtract(now, lastUpdateTime);\r\n      if (timeElapsed < updateRateDelay) {\r\n          return 0;\r\n      }\r\n      uint256 baseReward = baseUpdateCallerReward;\r\n      if (subtract(timeElapsed, updateRateDelay) > 0) {\r\n          baseReward = rmultiply(rpower(perSecondCallerRewardIncrease, subtract(timeElapsed, updateRateDelay), RAY), baseReward);\r\n      }\r\n      uint256 maxReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n      if (baseReward > maxReward) {\r\n          baseReward = maxReward;\r\n      }\r\n      return baseReward;\r\n  }\r\n  function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n      if (address(treasury) == proposedFeeReceiver) return;\r\n      if (address(treasury) == address(0) || reward == 0) return;\r\n      address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n      try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\r\n      catch(bytes memory revertReason) {\r\n          emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n      }\r\n  }\r\n\r\n  // --- Feedback Mechanism ---\r\n  function updateRate(uint seed, address feeReceiver) public {\r\n      require(contractEnabled == 1, \"RateSetter/contract-not-enabled\");\r\n      // Check delay between calls\r\n      require(either(subtract(now, lastUpdateTime) >= updateRateDelay, lastUpdateTime == 0), \"RateSetter/wait-more\");\r\n      // Get price feed updates\r\n      (uint256 marketPrice, bool hasValidValue) = orcl.getResultWithValidity();\r\n      // If the oracle has a value\r\n      require(hasValidValue, \"RateSetter/invalid-oracle-value\");\r\n      // If the price is non-zero\r\n      require(marketPrice > 0, \"RateSetter/null-price\");\r\n      // Get the latest redemption price\r\n      uint redemptionPrice = oracleRelayer.redemptionPrice();\r\n      // Get the caller's reward\r\n      uint256 callerReward = getCallerReward();\r\n      // Store the latest market price\r\n      latestMarketPrice = ray(marketPrice);\r\n      // Validate the seed\r\n      uint256 tlv       = pidValidator.tlv();\r\n      uint256 iapcr     = rpower(pidValidator.pscl(), tlv, RAY);\r\n      uint256 uad       = rmultiply(pidValidator.lprad(), rpower(pidValidator.adi(), pidValidator.adat(), RAY));\r\n      uad               = (uad == 0) ? pidValidator.uprad() : uad;\r\n      uint256 validated = pidValidator.validateSeed(\r\n          seed,\r\n          rpower(seed, pidValidator.rt(marketPrice, redemptionPrice, iapcr), RAY),\r\n          marketPrice,\r\n          redemptionPrice,\r\n          iapcr,\r\n          uad\r\n      );\r\n      // Store the timestamp of the update\r\n      lastUpdateTime = now;\r\n      // Update the rate inside the system (if it doesn't throw)\r\n      try oracleRelayer.modifyParameters(\"redemptionRate\", validated) {\r\n        // Emit success event\r\n        emit UpdateRedemptionRate(\r\n          ray(marketPrice),\r\n          redemptionPrice,\r\n          seed,\r\n          validated\r\n        );\r\n      }\r\n      catch(bytes memory revertReason) {\r\n        emit FailUpdateRedemptionRate(\r\n          revertReason\r\n        );\r\n      }\r\n      // Pay the caller for updating the rate\r\n      rewardCaller(feeReceiver, callerReward);\r\n  }\r\n\r\n  // --- Getters ---\r\n  function getRedemptionAndMarketPrices() public returns (uint256 marketPrice, uint256 redemptionPrice) {\r\n      (marketPrice, ) = orcl.getResultWithValidity();\r\n      redemptionPrice = oracleRelayer.redemptionPrice();\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orcl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pidValidator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondCallerRewardIncrease_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateRateDelay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"orcl\",\"type\":\"address\"}],\"name\":\"FailUpdateOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"FailUpdateRedemptionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"}],\"name\":\"UpdateRedemptionRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionAndMarketPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestMarketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orcl\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondCallerRewardIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pidValidator\",\"outputs\":[{\"internalType\":\"contract PIDValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"RateSetter","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002b56976b6e95304f9b3d9736aaa610e963422ccd000000000000000000000000206d268c0bbf3fbd8dab35ba91ca89203a3c59aa000000000000000000000000ff2b1ff809df178c61d1fad652311fe266d7b54d00000000000000000000000064ad684378770fe3ee4b437737edf379f12a902a00000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000033b57034a98502542e4fba80000000000000000000000000000000000000000000000000000000000000e10","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e0808e30fa746952d87c9afb472ab67ecac0ad895c40faddc9b31193abaab6b"}]}