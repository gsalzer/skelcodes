{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.7.6;\r\n\r\n// v. 0.9 comments in future versions\r\n\r\nlibrary SafeMathChainlink {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external view returns (string memory tokenName);\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\r\n    address _requester, uint256 _nonce)\r\n    internal pure returns (uint256)\r\n  {\r\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  function makeRequestId(\r\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  using SafeMathChainlink for uint256;\r\n\r\n\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n    internal virtual;\r\n\r\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\r\n    internal returns (bytes32 requestId)\r\n  {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash].add(1);\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface immutable internal LINK;\r\n  address immutable private vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  constructor(address _vrfCoordinator, address _link)  {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n}\r\n\r\ncontract OwnableOperable {\r\n    \r\n    address public owner;\r\n    address public operator;\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns(bool) {\r\n        return account == owner;\r\n    }\r\n    \r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner  {\r\n        \r\n    _transferOwnership(newOwner);\r\n    }\r\n\r\n  function _transferOwnership(address newOwner)  internal {\r\n    owner = newOwner;\r\n    \r\n  }\r\n    \r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    function isOperator(address account) public view returns(bool) {\r\n    return account == operator;\r\n    }\r\n    \r\n    function addOperator(address account) public onlyOwner {\r\n    _addOperator(account);\r\n    }\r\n    \r\n  function _addOperator(address account) internal {\r\n    operator = account;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract TransmutationEngine is VRFConsumerBase, OwnableOperable {\r\n    using SafeMathChainlink for uint256;\r\n    \r\n    uint64 public currentSession = 0;\r\n    uint64 public nextSession = 1;\r\n    \r\n    struct Engine_params { \r\n        address rewardsVault;\r\n        uint8 alchemyCut;\r\n        uint8 minAlchemists;\r\n        uint16 maxAlchemists;\r\n        uint64 minXpb;\r\n        uint16 minTime;\r\n        bool formulaOverflow;\r\n        bool enabled;\r\n    }\r\n    \r\n    \r\n    struct Tokens_blueprint { \r\n        address tokenAddress;\r\n        address pairAddress;\r\n        uint64 vaultBalance;\r\n        uint64 rewardAmount;\r\n        uint64 decimals;\r\n        bool enabled;\r\n    }\r\n    \r\n    \r\n    struct Transmute_registry_entry { \r\n        address alchemist;  // wallet address attemtping the transmutation\r\n        uint8 reward;     // ERC-20 address of reward token\r\n        // uint64 amount;      // (9 decimals), committed amount of XPb\r\n        uint16 chance;      // ( 0 decimals)\r\n        // uint32 timestamp;    // timestamp of operation, as reference for prices verification and general timestamp-stuff\r\n        // bool successful;    // marked as true if randomness <= chance. if true, the transmutation is successful and the alchemist receives the reward.\r\n    }\r\n    \r\n    struct Transmute_registry_blueprint { \r\n        uint32 timestamp_init;\r\n        uint32 timestamp_end;\r\n        bytes32 randReqId;\r\n        uint16 randomness;  // ( 0 decimals) -> received randomnes, simmered down to a more usable (5 digit max 65535) degree of resolution\r\n        uint16 total_entries;\r\n        uint64 total_xpb;\r\n        bool vrf;      // marked as true when the VRF callback function is triggered and the transmutation attempt is complete\r\n        bool complete;      \r\n    }\r\n    \r\n    \r\n    \r\n    Engine_params public EngineParameters;\r\n    \r\n    mapping (uint8 => Tokens_blueprint) public tokens;\r\n    mapping (uint64 => mapping (uint8 => uint64)) public token_prices; \r\n    mapping (uint64 => Transmute_registry_blueprint) public transmutation_sessions;  // maximum frequency - hourly\r\n    mapping (uint64 => mapping (uint16 => Transmute_registry_entry)) public transmutation_sessions_entries;\r\n    \r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    \r\n    constructor () \r\n        VRFConsumerBase(\r\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, // VRF Coordinator\r\n            0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token\r\n        ) \r\n    {\r\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\r\n        fee = 2 * 1e18; // 2 LINK for VRF Fees\r\n        \r\n        owner = msg.sender;\r\n        operator = msg.sender;\r\n        \r\n    \r\n        EngineParameters = Engine_params({ \r\n                                                   rewardsVault: 0x4417e253582B8F9612Bbb0B906339958691D7dCf,\r\n                                                   alchemyCut: 3, //%\r\n                                                   minAlchemists: 5,\r\n                                                   maxAlchemists: 50,\r\n                                                   minXpb: 777*1e9, \r\n                                                   minTime: 300, //seconds\r\n                                                   formulaOverflow: false,\r\n                                                   enabled: true\r\n            \r\n                                                                });\r\n        \r\n        tokens[0] = Tokens_blueprint({ \r\n                                                   tokenAddress: 0xbC81BF5B3173BCCDBE62dba5f5b695522aD63559,  // XPb\r\n                                                   pairAddress: 0x1ab24a692EFf49b9712CEaCdEf853152d78b9050,\r\n                                                   rewardAmount: 0,      \r\n                                                   vaultBalance: 0,\r\n                                                   decimals: 1e18,\r\n                                                   enabled: false\r\n            \r\n                                                                });\r\n\r\n        tokens[1] = Tokens_blueprint({ \r\n                                                   tokenAddress: 0x514910771AF9Ca656af840dff83E8264EcF986CA,  // LINK\r\n                                                   pairAddress: 0xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974,\r\n                                                   rewardAmount: 1e9,      \r\n                                                   vaultBalance: 0,\r\n                                                   decimals: 1e18,\r\n                                                   enabled: true\r\n            \r\n                                                                });\r\n        tokens[2] = Tokens_blueprint({ \r\n                                                   tokenAddress: 0xb9871cB10738eADA636432E86FC0Cb920Dc3De24,  // PRIA\r\n                                                   pairAddress: 0xAc350EefCCdAE050614070E5040e17759Cebb3e9,\r\n                                                   rewardAmount: 1e9,      \r\n                                                   vaultBalance: 0,\r\n                                                   decimals: 1e18,\r\n                                                   enabled: false\r\n            \r\n                                                                });\r\n                                                                \r\n        tokens[3] = Tokens_blueprint({ \r\n                                                   tokenAddress: 0x6810e776880C02933D47DB1b9fc05908e5386b96,  // GNO\r\n                                                   pairAddress: 0x3e8468f66d30Fc99F745481d4B383f89861702C6,\r\n                                                   rewardAmount: 1e9,      \r\n                                                   vaultBalance: 0,\r\n                                                   decimals: 1e18,\r\n                                                   enabled: true\r\n            \r\n                                                                });\r\n                                                                \r\n        tokens[4] = Tokens_blueprint({ \r\n                                                   tokenAddress: 0xc00e94Cb662C3520282E6f5717214004A7f26888,  // COMP\r\n                                                   pairAddress: 0xCFfDdeD873554F362Ac02f8Fb1f02E5ada10516f,\r\n                                                   rewardAmount: 1e9,      \r\n                                                   vaultBalance: 0,\r\n                                                   decimals: 1e18,\r\n                                                   enabled: true\r\n            \r\n                                                                });\r\n                                                                \r\n        tokens[5] = Tokens_blueprint({ \r\n                                                   tokenAddress: 0xD5525D397898e5502075Ea5E830d8914f6F0affe,  // MEME\r\n                                                   pairAddress: 0x5DFbe95925FFeb68f7d17920Be7b313289a1a583,\r\n                                                   rewardAmount: 1e9,      \r\n                                                   vaultBalance: 0,\r\n                                                   decimals: 1e8,\r\n                                                   enabled: true\r\n            \r\n                                                                });\r\n                                                                \r\n        tokens[6] = Tokens_blueprint({ \r\n                                                   tokenAddress: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,  // WETH\r\n                                                   pairAddress: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\r\n                                                   rewardAmount: 1e9,      \r\n                                                   vaultBalance: 0,\r\n                                                   decimals: 1e18,\r\n                                                   enabled: true\r\n            \r\n                                                                });\r\n                                                                \r\n        tokens[7] = Tokens_blueprint({ \r\n                                                   tokenAddress: 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599,  // WBTC\r\n                                                   pairAddress: 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940,\r\n                                                   rewardAmount: 1e8,      \r\n                                                   vaultBalance: 0,\r\n                                                   decimals: 1e8,\r\n                                                   enabled: true\r\n            \r\n                                                                });\r\n                                                                \r\n    }\r\n    \r\n    function modify_token(uint8 _token, address _tokenAddress, address _pairAddress, uint64 _rewardAmount, uint64 _decimals, bool _enabled  ) onlyOwner public {\r\n        \r\n        tokens[_token] = Tokens_blueprint({ \r\n                                                   tokenAddress: _tokenAddress,\r\n                                                   pairAddress: _pairAddress,\r\n                                                   rewardAmount: _rewardAmount, // 9 dec\r\n                                                   decimals: _decimals,\r\n                                                   vaultBalance: 0,\r\n                                                   enabled: _enabled\r\n            \r\n                                                                });\r\n                                                                \r\n                                                                // add events\r\n    }\r\n    \r\n    function modify_params(uint128 _alchemyCut ) onlyOwner public {\r\n        \r\n        \r\n                                                                \r\n    }\r\n    \r\n    function init_session() onlyOperator public {\r\n        \r\n        require(currentSession == nextSession -1, 'SESSION_ALREADY_OPEN');\r\n        if(currentSession > 0){\r\n        require(transmutation_sessions[currentSession].complete == true, 'WAIT_FOR_PREV_SESSION');\r\n        }\r\n        \r\n        currentSession = nextSession;\r\n        \r\n        token_prices[currentSession][0] = getUniTokenPrice(tokens[0].pairAddress, 0); // XPB\r\n        \r\n        if(tokens[1].enabled == true){\r\n        token_prices[currentSession][1] = getUniTokenPrice(tokens[1].pairAddress, 0); // LINK\r\n        tokens[1].vaultBalance = uint64(IERC20(tokens[1].tokenAddress).balanceOf(EngineParameters.rewardsVault) / 1e9);\r\n        }\r\n        if(tokens[1].enabled == true){\r\n        token_prices[currentSession][2] = getUniTokenPrice(tokens[2].pairAddress, 0); // PRIA\r\n        tokens[2].vaultBalance = uint64(IERC20(tokens[2].tokenAddress).balanceOf(EngineParameters.rewardsVault) / 1e9);\r\n        }\r\n        if(tokens[1].enabled == true){\r\n        token_prices[currentSession][3] = getUniTokenPrice(tokens[3].pairAddress, 0); // GNO\r\n        tokens[3].vaultBalance = uint64(IERC20(tokens[3].tokenAddress).balanceOf(EngineParameters.rewardsVault) / 1e9);\r\n        }\r\n        if(tokens[1].enabled == true){\r\n        token_prices[currentSession][4] = getUniTokenPrice(tokens[4].pairAddress, 0); // COMP\r\n        tokens[4].vaultBalance = uint64(IERC20(tokens[4].tokenAddress).balanceOf(EngineParameters.rewardsVault) / 1e9);\r\n        }\r\n        if(tokens[1].enabled == true){\r\n        token_prices[currentSession][5] = getUniTokenPrice(tokens[5].pairAddress, 1);  // MEME\r\n        tokens[5].vaultBalance = uint64(IERC20(tokens[5].tokenAddress).balanceOf(EngineParameters.rewardsVault)  * 10);\r\n        }\r\n        if(tokens[1].enabled == true){\r\n        token_prices[currentSession][6] = 1e9;                                            // WETH\r\n        tokens[6].vaultBalance = uint64(IERC20(tokens[6].tokenAddress).balanceOf(EngineParameters.rewardsVault) / 1e9);\r\n        }\r\n        if(tokens[1].enabled == true){\r\n        token_prices[currentSession][7] = getUniTokenPrice(tokens[7].pairAddress, 2); //WBTC\r\n        tokens[7].vaultBalance = uint64(IERC20(tokens[7].tokenAddress).balanceOf(EngineParameters.rewardsVault) * 10);\r\n        }\r\n        \r\n        \r\n        transmutation_sessions[currentSession] = Transmute_registry_blueprint({ \r\n                                                                                randReqId: 0,\r\n                                                                                randomness: 0,\r\n                                                                                timestamp_init: uint32(block.timestamp),\r\n                                                                                timestamp_end: 0,\r\n                                                                                complete: false,\r\n                                                                                vrf: false,\r\n                                                                                total_entries: 0,\r\n                                                                                total_xpb: 0\r\n                                                                                                });\r\n    }\r\n    \r\n    \r\n    function submit_transmutation(uint8 formula, uint64 amount) public {\r\n        \r\n        require(EngineParameters.enabled == true, 'TRANSMUTATION_ENGINE_DISABLED');\r\n        \r\n        require(amount > 0, 'AMMOUNT_CANNOT_BE_0');\r\n        \r\n        require(currentSession == nextSession, 'SESSION_NOT_OPEN_YET');\r\n        \r\n        require(tokens[formula].enabled == true, 'FORMULA_NOT_ENABLED');\r\n        \r\n        require(transmutation_sessions[currentSession].total_entries <= EngineParameters.maxAlchemists, 'ROUND_IS_FULL');\r\n        \r\n        if(EngineParameters.formulaOverflow == false){\r\n            \r\n        require(tokens[formula].vaultBalance >= tokens[formula].rewardAmount, 'FORMULA_IS_FULL');\r\n        \r\n        }\r\n        \r\n        \r\n        IERC20(tokens[0].tokenAddress).transferFrom(msg.sender, EngineParameters.rewardsVault, uint128(amount) * 1e9);\r\n        \r\n        uint16 this_entry = transmutation_sessions[currentSession].total_entries + 1;\r\n        uint64 total_xpb = transmutation_sessions[currentSession].total_xpb + amount;\r\n        \r\n        transmutation_sessions[currentSession].total_xpb = total_xpb; \r\n        transmutation_sessions[currentSession].total_entries = this_entry;\r\n        \r\n        uint128 sentEtherValue = uint128(token_prices[currentSession][0]) * amount;  // 9 -> 18 dec \r\n        \r\n        uint128 rewardEtherValue = uint128(token_prices[currentSession][formula]) * tokens[formula].rewardAmount / 1e9;   // 9 - 18 - 9 dec\r\n        \r\n        uint128 transmuteChance = sentEtherValue / rewardEtherValue * (100-EngineParameters.alchemyCut) * 65535 / 1e11 ; // 18 - 9 - 11 - 11 - 0  dec\r\n        \r\n        if(transmuteChance > 65535){ transmuteChance = 65535; } \r\n        \r\n        \r\n        \r\n        transmutation_sessions_entries[currentSession][this_entry] = Transmute_registry_entry({\r\n                                                                                                alchemist: msg.sender,\r\n                                                                                                reward: formula,\r\n                                                                                                chance: uint16(transmuteChance)\r\n                                                                                                // amount: amount,\r\n                                                                                                // timestamp: uint32(block.timestamp),\r\n                                                                                                // successful: false\r\n                                                                                                                  });\r\n                                                                                                                 \r\n                                                                                                                  \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function close_session() onlyOperator public {\r\n        \r\n        require(currentSession == nextSession, 'SESSION_NOT_OPEN');\r\n        require(EngineParameters.minAlchemists <= transmutation_sessions[currentSession].total_entries, 'REQUIRED_ALCHEMISTS_NOT_REACHED');\r\n        require(EngineParameters.minXpb <= transmutation_sessions[currentSession].total_xpb, 'REQUIRED_LEAD_NOT_REACHED');\r\n        require(block.timestamp >= (transmutation_sessions[currentSession].timestamp_init + EngineParameters.minTime), 'MIN_TIME_NOT_ELAPSED' );\r\n        \r\n        bytes32 reqId = requestRandomness(keyHash, fee, block.timestamp);\r\n        \r\n        transmutation_sessions[currentSession].randReqId = reqId;\r\n        \r\n        transmutation_sessions[currentSession].timestamp_end = uint32(block.timestamp);\r\n        \r\n        nextSession = nextSession +1;\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    function complete_session(bool _distribute) onlyOperator public {\r\n        \r\n        require(currentSession == nextSession-1, 'SESSION_STILL_OPEN');\r\n        require(transmutation_sessions[currentSession].complete == false, 'NO_!');\r\n        \r\n        if(_distribute == false){\r\n            \r\n            // do manual distribution for this round. \r\n            \r\n        } else {\r\n            \r\n        if(transmutation_sessions[currentSession].vrf == true){\r\n            uint16 i = 0;\r\n            for (i = 1; i <= transmutation_sessions[currentSession].total_entries ; i++) { \r\n         if(transmutation_sessions_entries[currentSession][i].chance >= transmutation_sessions[currentSession].randomness){\r\n             \r\n             uint8 _reward = transmutation_sessions_entries[currentSession][i].reward;\r\n             address _rewardAddress = tokens[_reward].tokenAddress;\r\n             address _alchemistAddress = transmutation_sessions_entries[currentSession][i].alchemist;\r\n             \r\n             \r\n             uint128 _rewardAmt = uint128(tokens[_reward].rewardAmount) * tokens[_reward].decimals / 1e9; // 9-27-18 \\ 8-17-8\r\n             \r\n             IERC20(_rewardAddress).transferFrom(EngineParameters.rewardsVault, _alchemistAddress, _rewardAmt);\r\n         }      \r\n      }\r\n           \r\n            \r\n        } else {\r\n            // round forfeited. VRF not showing, etc....\r\n        }\r\n        }\r\n        transmutation_sessions[currentSession].complete = true;\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n        /**\r\n     * Callback function used by VRF Coordinator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint randomness) internal override {\r\n        \r\n        if(transmutation_sessions[currentSession].randReqId == requestId){\r\n            transmutation_sessions[currentSession].randomness = uint16(randomness);     // obtain 5 digit randomness (0 - 65535)\r\n            transmutation_sessions[currentSession].vrf = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function getUniTokenPrice(address _pair, uint8 _exception) public view returns(uint64 price){\r\n        \r\n        (uint256 reserve0, uint256 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(_pair).getReserves();\r\n        if(_exception == 1){\r\n           price = uint64(reserve0.div(reserve1));\r\n        } else if(_exception == 2){\r\n            price = uint64(reserve1.div(reserve0));\r\n        } else {\r\n        price = uint64(reserve1.mul(1e8).div(reserve0));\r\n    }\r\n        \r\n       \r\n    }\r\n    \r\n    \r\n    \r\n    function recoverETH(address  _to, uint _value) external onlyOwner() payable{\r\n        payable(_to).transfer(_value);\r\n    }\r\n\r\n    function recoverERC20(address _token, address _to, uint _value) public onlyOwner() {\r\n        IERC20(_token).transfer(_to, _value);\r\n    }\r\n\r\n    receive() external payable { \r\n        //ty\r\n    }\r\n    \r\n    \r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EngineParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"alchemyCut\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minAlchemists\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"maxAlchemists\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"minXpb\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minTime\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"formulaOverflow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close_session\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_distribute\",\"type\":\"bool\"}],\"name\":\"complete_session\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSession\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_exception\",\"type\":\"uint8\"}],\"name\":\"getUniTokenPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init_session\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_alchemyCut\",\"type\":\"uint128\"}],\"name\":\"modify_params\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_token\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_rewardAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_decimals\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"modify_token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSession\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"formula\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"submit_transmutation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"token_prices\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"vaultBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"rewardAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"decimals\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"transmutation_sessions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp_init\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp_end\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"randReqId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"randomness\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total_entries\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"total_xpb\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"vrf\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"complete\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"transmutation_sessions_entries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"alchemist\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"reward\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"chance\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TransmutationEngine","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc666c2a50dd05d7ec047f8bac601b50810ed7f4372834d98f6b686ca7519471"}]}