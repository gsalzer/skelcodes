{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IWSProxy {\r\n    function initialize(address _implementation, address _admin, bytes calldata _data) external;\r\n    function upgradeTo(address _proxy) external;\r\n    function upgradeToAndCall(address _proxy, bytes calldata data) external payable;\r\n    function changeAdmin(address newAdmin) external;\r\n    function admin() external returns (address);\r\n    function implementation() external returns (address);\r\n}\r\n\r\ninterface IWSController {\r\n    function getLogicForPair() external view returns(address);\r\n    function getCurrentAdmin() external view returns(address);\r\n    function updatePairLogic(address _logic) external;\r\n    function updateCurrentAdmin(address _newAdmin) external;\r\n    function updateProxyPair(address _proxy) external;\r\n    function setAdminForProxy(address _proxy) external;\r\n}\r\n\r\ninterface IWSImplementation {\r\n\tfunction getImplementationType() external pure returns(uint256);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract WSController is Ownable, IWSController {\r\n    address public pairLogic;\r\n    address public currentAdmin;\r\n\r\n    /*\r\n    * @dev Type variable:\r\n    * 2 - Pair\r\n    */\r\n    uint256 constant public PAIR_TYPE = 2;\r\n\r\n    event NewPairLogic(address indexed logic);\r\n    event NewAdmin(address indexed adminAddress);\r\n    event UpdateProxy(address indexed proxyAddress, address newLogic);\r\n    event ChangeAdmin(address indexed proxyAddress, address newAdmin);\r\n\r\n    constructor(address _pairLogic) public {\r\n        require(_pairLogic != address(0), \"WSController: Wrong pair logic address\");\r\n        currentAdmin = address(this);\r\n        pairLogic = _pairLogic;\r\n    }\r\n\r\n\r\n    function updatePairLogic(address _logic) external override onlyOwner {\r\n        pairLogic = _logic;\r\n        emit NewPairLogic(_logic);\r\n    }\r\n\r\n    function updateCurrentAdmin(address _newAdmin) external override onlyOwner {\r\n        currentAdmin = _newAdmin;\r\n        emit NewAdmin(_newAdmin);\r\n    }\r\n\r\n    function updateProxyPair(address _proxy) external override {\r\n        require(IWSImplementation(IWSProxy(_proxy).implementation()).getImplementationType() == PAIR_TYPE, \"WSController: Wrong pair proxy for update.\");\r\n        IWSProxy(_proxy).upgradeTo(pairLogic);\r\n        emit UpdateProxy(_proxy, pairLogic);\r\n    }\r\n\r\n    function setAdminForProxy(address _proxy) external override {\r\n        IWSProxy(_proxy).changeAdmin(currentAdmin);\r\n        emit ChangeAdmin(_proxy, currentAdmin);\r\n    }\r\n\r\n    function getLogicForPair() external view override returns(address) {\r\n        return pairLogic;\r\n    }\r\n\r\n    function getCurrentAdmin() external view override returns(address){\r\n        return currentAdmin;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ChangeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"NewPairLogic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLogic\",\"type\":\"address\"}],\"name\":\"UpdateProxy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAIR_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicForPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setAdminForProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateCurrentAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"}],\"name\":\"updatePairLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"updateProxyPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WSController","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000033e57451dd6d0b03786467173673f57e55a29b3f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a4540ee12ef0fba1163274ff2d30fe72189440941e72ee34245390b94cf55a0"}]}