{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.6.0;\r\n\r\n/**\r\n* eplans.vip\r\n**/\r\ncontract ETPlanV2 {\r\n\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n\r\n        mapping(uint8 => bool) activeQ8Levels;\r\n        mapping(uint8 => bool) blocked;\r\n        mapping(uint8 => uint) income;\r\n    }\r\n\r\n    struct Q8 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        uint reinvestCount;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 12;\r\n\r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n    address public pool;\r\n    address public manager;\r\n    address public eTPlanToken;\r\n\r\n    mapping(uint8 => uint) public levelPrice;\r\n    mapping(uint8 => Q8) public q8Matrix;\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 level, uint8 place);\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 level);\r\n    event NewRound(address indexed user, address indexed referrer, uint8 level);\r\n\r\n    address public super;\r\n\r\n    address public _this;\r\n\r\n    modifier OnlySuper {\r\n        require(msg.sender == super);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        levelPrice[1] = 0.1 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i - 1] * 2;\r\n        }\r\n        _this = address(this);\r\n        super = msg.sender;\r\n    }\r\n\r\n    function initQ8(address _etplan) OnlySuper external {\r\n        ETPlan etplan = ETPlan(address(uint160(_etplan)));\r\n        for (uint8 j = 1; j <= 12; j++) {\r\n            (address currentReferrer, address[] memory firstLevelReferrals\r\n            , address[] memory secondLevelReferrals,\r\n            uint reinvestCount) = etplan.getq8Matrix(j);\r\n            q8Matrix[j].currentReferrer = currentReferrer;\r\n            q8Matrix[j].firstLevelReferrals = firstLevelReferrals;\r\n            q8Matrix[j].secondLevelReferrals = secondLevelReferrals;\r\n            q8Matrix[j].reinvestCount = reinvestCount;\r\n        }\r\n    }\r\n\r\n    function initData(address _etplan, uint start, uint end) OnlySuper external {\r\n\r\n        ETPlan etplan = ETPlan(address(uint160(_etplan)));\r\n        owner = etplan.owner();\r\n        manager = etplan.manager();\r\n        pool = etplan.pool();\r\n        eTPlanToken = etplan.eTPlanToken();\r\n        lastUserId = end + 1;\r\n\r\n        for (uint i = start; i <= end; i++) {\r\n            address currentUser = etplan.idToAddress(i);\r\n            (uint id,address referrer,uint partnersCount) = etplan.users(currentUser);\r\n            User memory user = User({\r\n                id : id,\r\n                referrer : referrer,\r\n                partnersCount : partnersCount\r\n                });\r\n            users[currentUser] = user;\r\n\r\n            for (uint8 j = 1; j <= 12; j++) {\r\n                if (i == 3) {\r\n                    users[currentUser].blocked[j] = true;\r\n                    users[currentUser].activeQ8Levels[j] = false;\r\n                } else {\r\n                    bool active = etplan.activeQ8Levels(currentUser, j);\r\n                    users[currentUser].activeQ8Levels[j] = active;\r\n                    users[currentUser].income[j] = etplan.income(currentUser, j);\r\n                }\r\n            }\r\n\r\n            idToAddress[i] = currentUser;\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n\r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.1 ether, \"registration cost 0.1\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        User memory user = User({\r\n            id : lastUserId,\r\n            referrer : referrerAddress,\r\n            partnersCount : 0\r\n            });\r\n\r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n\r\n        users[userAddress].activeQ8Levels[1] = true;\r\n\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n\r\n        updateQ8Referrer(userAddress, referrerAddress, uint8(1));\r\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) >= (levelPrice[uint8(1)] * 3 / 2)) {\r\n            ETPlanToken(eTPlanToken).transfer(userAddress, levelPrice[uint8(1)]);\r\n            ETPlanToken(eTPlanToken).transfer(referrerAddress, levelPrice[uint8(1)] / 2);\r\n        }\r\n\r\n    }\r\n\r\n    function buyNewLevel(uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n        require(!users[msg.sender].activeQ8Levels[level], \"level already activated\");\r\n\r\n        if (users[msg.sender].blocked[level - 1]) {\r\n            users[msg.sender].blocked[level - 1] = false;\r\n        }\r\n        users[msg.sender].activeQ8Levels[level] = true;\r\n        address freeReferrer = findFreeQ8Referrer(msg.sender, level);\r\n        updateQ8Referrer(msg.sender, freeReferrer, level);\r\n        emit NewRound(msg.sender, freeReferrer, level);\r\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) >= (levelPrice[level] * 3 / 2)) {\r\n            ETPlanToken(eTPlanToken).transfer(msg.sender, levelPrice[level]);\r\n            ETPlanToken(eTPlanToken).transfer(freeReferrer, levelPrice[level] / 2);\r\n        }\r\n    }\r\n\r\n    function updateQ8Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeQ8Levels[level], \"500. Referrer level is inactive\");\r\n\r\n        if ((users[referrerAddress].income[level] % (levelPrice[level] / 2)) >= 6) {\r\n            if (!users[referrerAddress].activeQ8Levels[level + 1] && level != LAST_LEVEL) {\r\n                users[referrerAddress].blocked[level] = true;\r\n            }\r\n        }\r\n        if (q8Matrix[level].firstLevelReferrals.length < 2) {\r\n            q8Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].firstLevelReferrals.length));\r\n\r\n            q8Matrix[level].currentReferrer = referrerAddress;\r\n            if (referrerAddress == owner) {\r\n                users[owner].income[level] += levelPrice[level];\r\n                return sendETHDividends(referrerAddress, userAddress, level, levelPrice[level]);\r\n            }\r\n\r\n            uint poolAmount = levelPrice[level] * 20 / 100;\r\n            if (!address(uint160(pool)).send(poolAmount)) {\r\n                return address(uint160(pool)).transfer(address(this).balance);\r\n            }\r\n            uint managerAmount = levelPrice[level] * 30 / 100;\r\n            if (!address(uint160(manager)).send(managerAmount)) {\r\n                return address(uint160(manager)).transfer(address(this).balance);\r\n            }\r\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\r\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\r\n            return sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\r\n        }\r\n        q8Matrix[level].secondLevelReferrals.push(userAddress);\r\n        q8Matrix[level].currentReferrer = referrerAddress;\r\n        emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].secondLevelReferrals.length + 2));\r\n\r\n        if (q8Matrix[level].secondLevelReferrals.length == 1) {\r\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\r\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\r\n            sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\r\n            uint poolAmount = levelPrice[level] * 20 / 100;\r\n            if (!address(uint160(pool)).send(poolAmount)) {\r\n                return address(uint160(pool)).transfer(address(this).balance);\r\n            }\r\n            address freeReferrerRe = findFreeQ8Referrer(freeReferrer, level);\r\n            users[freeReferrerRe].income[level] += levelPrice[level] * 30 / 100;\r\n            return sendETHDividends(freeReferrerRe, userAddress, level, levelPrice[level] * 30 / 100);\r\n        }\r\n\r\n        if (q8Matrix[level].secondLevelReferrals.length == 4) {//reinvest\r\n            q8Matrix[level].reinvestCount++;\r\n\r\n            q8Matrix[level].firstLevelReferrals = new address[](0);\r\n            q8Matrix[level].secondLevelReferrals = new address[](0);\r\n        }\r\n        address freeReferrer = findFreeQ8Referrer(userAddress, level);\r\n        users[freeReferrer].income[level] += levelPrice[level] / 2;\r\n        sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\r\n        uint poolAmount = levelPrice[level] * 20 / 100;\r\n        if (!address(uint160(pool)).send(poolAmount)) {\r\n            return address(uint160(pool)).transfer(address(this).balance);\r\n        }\r\n        uint managerAmount = levelPrice[level] * 30 / 100;\r\n        if (!address(uint160(manager)).send(managerAmount)) {\r\n            return address(uint160(manager)).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function findFreeQ8Referrer(address userAddress, uint8 level) public view returns (address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeQ8Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 level) private returns (address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        while (true) {\r\n            if (users[receiver].blocked[level]) {\r\n                emit MissedEthReceive(receiver, _from, level);\r\n                isExtraDividends = true;\r\n                receiver = users[receiver].referrer;\r\n            } else {\r\n                return (receiver, isExtraDividends);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 level, uint amount) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, level);\r\n\r\n        if (!address(uint160(receiver)).send(amount)) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n\r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, level);\r\n        }\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function activeQ8Levels(address _user, uint8 level) public view returns (bool){\r\n        return users[_user].activeQ8Levels[level];\r\n    }\r\n\r\n    function blocked(address _user, uint8 level) public view returns (bool){\r\n        return users[_user].blocked[level];\r\n    }\r\n\r\n    function income(address _user, uint8 level) public view returns (uint){\r\n        return users[_user].income[level];\r\n    }\r\n\r\n    function getq8Matrix(uint8 level) public view returns (address, address[] memory, address[] memory, uint){\r\n        return (q8Matrix[level].currentReferrer,\r\n        q8Matrix[level].firstLevelReferrals,\r\n        q8Matrix[level].secondLevelReferrals,\r\n        q8Matrix[level].reinvestCount);\r\n    }\r\n\r\n    function updatePool(address _pool) public OnlySuper {\r\n        pool = _pool;\r\n    }\r\n\r\n    function updateManager(address _manager) public OnlySuper {\r\n        manager = _manager;\r\n    }\r\n\r\n    function updateSuper(address _super) public OnlySuper {\r\n        super = _super;\r\n    }\r\n\r\n    function update(address _user, uint8 _level) public OnlySuper {\r\n        require(isUserExists(_user), \"user not exists\");\r\n        users[_user].activeQ8Levels[_level] = !users[_user].activeQ8Levels[_level];\r\n    }\r\n\r\n    function withdrawELS(address _user, uint _value) public OnlySuper {\r\n        ETPlanToken(eTPlanToken).transfer(_user, _value);\r\n    }\r\n}\r\n\r\ncontract ETPlan {\r\n\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n\r\n        mapping(uint8 => bool) activeQ8Levels;\r\n        mapping(uint8 => bool) blocked;\r\n        mapping(uint8 => uint) income;\r\n    }\r\n\r\n    struct Q8 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        uint reinvestCount;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 12;\r\n\r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n    address public pool;\r\n    address public manager;\r\n    address public eTPlanToken;\r\n\r\n    mapping(uint8 => uint) public levelPrice;\r\n    mapping(uint8 => Q8) public q8Matrix;\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 level, uint8 place);\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 level);\r\n    event NewRound(address indexed user, address indexed referrer, uint8 level);\r\n\r\n    address public super;\r\n\r\n    address public _this;\r\n\r\n    modifier OnlySuper {\r\n        require(msg.sender == super);\r\n        _;\r\n    }\r\n\r\n    constructor(address _token) public {\r\n        levelPrice[1] = 0.1 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i - 1] * 2;\r\n        }\r\n        owner = msg.sender;\r\n        super = msg.sender;\r\n        manager = msg.sender;\r\n        pool = msg.sender;\r\n        eTPlanToken = _token;\r\n        _this = address(this);\r\n    }\r\n\r\n    function initEnd(address _endless, uint start, uint end) OnlySuper external {\r\n\r\n        Endless endless = Endless(address(uint160(_endless)));\r\n        owner = endless.owner();\r\n        lastUserId = end + 1;\r\n\r\n        for (uint i = start; i <= end; i++) {\r\n            address currentUser = endless.userIds(i);\r\n            (uint id,address referrer,uint partnersCount) = endless.users(currentUser);\r\n            User memory user = User({\r\n                id : id,\r\n                referrer : referrer,\r\n                partnersCount : partnersCount\r\n                });\r\n            users[currentUser] = user;\r\n\r\n            for (uint8 j = 1; j <= 12; j++) {\r\n                if (i == 3) {\r\n                    users[currentUser].blocked[j] = true;\r\n                    users[currentUser].activeQ8Levels[j] = false;\r\n                } else {\r\n                    bool active = endless.usersActiveX6Levels(currentUser, j);\r\n                    users[currentUser].activeQ8Levels[j] = active;\r\n                }\r\n            }\r\n\r\n            idToAddress[i] = currentUser;\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n\r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.1 ether, \"registration cost 0.1\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        User memory user = User({\r\n            id : lastUserId,\r\n            referrer : referrerAddress,\r\n            partnersCount : 0\r\n            });\r\n\r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n\r\n        users[userAddress].activeQ8Levels[1] = true;\r\n\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n\r\n        updateQ8Referrer(userAddress, referrerAddress, uint8(1));\r\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) > levelPrice[uint8(1)]) {\r\n            ETPlanToken(eTPlanToken).transfer(userAddress, levelPrice[uint8(1)]);\r\n            ETPlanToken(eTPlanToken).transfer(referrerAddress, levelPrice[uint8(1)] / 2);\r\n        }\r\n\r\n    }\r\n\r\n    function buyNewLevel(uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n        require(!users[msg.sender].activeQ8Levels[level], \"level already activated\");\r\n\r\n        if (users[msg.sender].blocked[level - 1]) {\r\n            users[msg.sender].blocked[level - 1] = false;\r\n        }\r\n        users[msg.sender].activeQ8Levels[level] = true;\r\n        address freeReferrer = findFreeQ8Referrer(msg.sender, level);\r\n        updateQ8Referrer(msg.sender, freeReferrer, level);\r\n        emit NewRound(msg.sender, freeReferrer, level);\r\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) > levelPrice[level]) {\r\n            ETPlanToken(eTPlanToken).transfer(msg.sender, levelPrice[level]);\r\n            ETPlanToken(eTPlanToken).transfer(freeReferrer, levelPrice[level]/2);\r\n        }\r\n    }\r\n\r\n    function updateQ8Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeQ8Levels[level], \"500. Referrer level is inactive\");\r\n\r\n        if ((users[referrerAddress].income[level] % (levelPrice[level] / 2)) >= 6) {\r\n            if (!users[referrerAddress].activeQ8Levels[level + 1] && level != LAST_LEVEL) {\r\n                users[referrerAddress].blocked[level] = true;\r\n            }\r\n        }\r\n        if (q8Matrix[level].firstLevelReferrals.length < 2) {\r\n            q8Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].firstLevelReferrals.length));\r\n\r\n            q8Matrix[level].currentReferrer = referrerAddress;\r\n            if (referrerAddress == owner) {\r\n                users[owner].income[level] += levelPrice[level];\r\n                return sendETHDividends(referrerAddress, userAddress, level, levelPrice[level]);\r\n            }\r\n\r\n            uint poolAmount = levelPrice[level] * 20 / 100;\r\n            if (!address(uint160(pool)).send(poolAmount)) {\r\n                return address(uint160(pool)).transfer(address(this).balance);\r\n            }\r\n            uint managerAmount = levelPrice[level] * 30 / 100;\r\n            if (!address(uint160(manager)).send(managerAmount)) {\r\n                return address(uint160(manager)).transfer(address(this).balance);\r\n            }\r\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\r\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\r\n            return sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\r\n        }\r\n        q8Matrix[level].secondLevelReferrals.push(userAddress);\r\n        q8Matrix[level].currentReferrer = referrerAddress;\r\n        emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].secondLevelReferrals.length + 2));\r\n\r\n        if (q8Matrix[level].secondLevelReferrals.length == 1) {\r\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\r\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\r\n            sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\r\n            uint poolAmount = levelPrice[level] * 20 / 100;\r\n            if (!address(uint160(pool)).send(poolAmount)) {\r\n                return address(uint160(pool)).transfer(address(this).balance);\r\n            }\r\n            address freeReferrerRe = findFreeQ8Referrer(freeReferrer, level);\r\n            users[freeReferrerRe].income[level] += levelPrice[level] * 30 / 100;\r\n            return sendETHDividends(freeReferrerRe, userAddress, level, levelPrice[level] * 30 / 100);\r\n        }\r\n\r\n        if (q8Matrix[level].secondLevelReferrals.length == 4) {//reinvest\r\n            q8Matrix[level].reinvestCount++;\r\n\r\n            q8Matrix[level].firstLevelReferrals = new address[](0);\r\n            q8Matrix[level].secondLevelReferrals = new address[](0);\r\n        }\r\n        address freeReferrer = findFreeQ8Referrer(userAddress, level);\r\n        users[freeReferrer].income[level] += levelPrice[level] / 2;\r\n        sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\r\n        uint poolAmount = levelPrice[level] * 20 / 100;\r\n        if (!address(uint160(pool)).send(poolAmount)) {\r\n            return address(uint160(pool)).transfer(address(this).balance);\r\n        }\r\n        uint managerAmount = levelPrice[level] * 30 / 100;\r\n        if (!address(uint160(manager)).send(managerAmount)) {\r\n            return address(uint160(manager)).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function findFreeQ8Referrer(address userAddress, uint8 level) public view returns (address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeQ8Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 level) private returns (address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        while (true) {\r\n            if (users[receiver].blocked[level]) {\r\n                emit MissedEthReceive(receiver, _from, level);\r\n                isExtraDividends = true;\r\n                receiver = users[receiver].referrer;\r\n            } else {\r\n                return (receiver, isExtraDividends);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 level, uint amount) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, level);\r\n\r\n        if (!address(uint160(receiver)).send(amount)) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n\r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, level);\r\n        }\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function activeQ8Levels(address _user, uint8 level) public view returns (bool){\r\n        return users[_user].activeQ8Levels[level];\r\n    }\r\n\r\n    function blocked(address _user, uint8 level) public view returns (bool){\r\n        return users[_user].blocked[level];\r\n    }\r\n\r\n    function income(address _user, uint8 level) public view returns (uint){\r\n        return users[_user].income[level];\r\n    }\r\n\r\n    function getq8Matrix(uint8 level) public view returns (address, address[] memory, address[] memory, uint){\r\n        return (q8Matrix[level].currentReferrer,\r\n        q8Matrix[level].firstLevelReferrals,\r\n        q8Matrix[level].secondLevelReferrals,\r\n        q8Matrix[level].reinvestCount);\r\n    }\r\n\r\n    function updatePool(address _pool) public OnlySuper {\r\n        pool = _pool;\r\n    }\r\n\r\n    function updateManager(address _manager) public OnlySuper {\r\n        manager = _manager;\r\n    }\r\n\r\n    function updateSuper(address _super) public OnlySuper {\r\n        super = _super;\r\n    }\r\n\r\n    function update(address _user, uint8 _level) public OnlySuper {\r\n        require(isUserExists(_user), \"user not exists\");\r\n        users[_user].activeQ8Levels[_level] = !users[_user].activeQ8Levels[_level];\r\n    }\r\n\r\n    function withdrawELS(address _user, uint _value) public OnlySuper {\r\n        ETPlanToken(eTPlanToken).transfer(_user, _value);\r\n    }\r\n}\r\n\r\ncontract Endless {\r\n\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n\r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX6Levels;\r\n\r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X6) x6Matrix;\r\n    }\r\n\r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n\r\n    struct X6 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 12;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint => address) public userIds;\r\n    mapping(address => uint) public balances;\r\n\r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n\r\n    mapping(uint8 => uint) public levelPrice;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n\r\n\r\n    constructor(address ownerAddress) public {\r\n        levelPrice[1] = 0.025 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        owner = ownerAddress;\r\n\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n            });\r\n\r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeX3Levels[i] = true;\r\n            users[ownerAddress].activeX6Levels[i] = true;\r\n        }\r\n\r\n        userIds[1] = ownerAddress;\r\n    }\r\n\r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n\r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeX3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].x3Matrix[level-1].blocked) {\r\n                users[msg.sender].x3Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            updateX3Referrer(msg.sender, freeX3Referrer, level);\r\n\r\n            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeX6Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].x6Matrix[level-1].blocked) {\r\n                users[msg.sender].x6Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\r\n\r\n            users[msg.sender].activeX6Levels[level] = true;\r\n            updateX6Referrer(msg.sender, freeX6Referrer, level);\r\n\r\n            emit Upgrade(msg.sender, freeX6Referrer, 2, level);\r\n        }\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.05 ether, \"registration cost 0.05\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n            });\r\n\r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n\r\n        users[userAddress].referrer = referrerAddress;\r\n\r\n        users[userAddress].activeX3Levels[1] = true;\r\n        users[userAddress].activeX6Levels[1] = true;\r\n\r\n\r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        updateX3Referrer(userAddress, freeX3Referrer, 1);\r\n\r\n        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\r\n\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n\r\n    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);//？\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n\r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n\r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 1, level);\r\n            users[owner].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeX6Levels[level], \"500. Referrer level is inactive\");\r\n\r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\r\n\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n\r\n            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;\r\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\r\n\r\n            if ((len == 2) &&\r\n            (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n            users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateX6ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart)) {\r\n\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateX6(userAddress, referrerAddress, level, false);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n\r\n        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <=\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n        }\r\n\r\n        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n\r\n    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n\r\n        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\r\n\r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress ||\r\n            x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeX6Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n\r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n\r\n    function findFreeX3Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function findFreeX6Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function usersActiveX3Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeX3Levels[level];\r\n    }\r\n\r\n    function usersActiveX6Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeX6Levels[level];\r\n    }\r\n\r\n    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool ,uint) {\r\n        return (users[userAddress].x3Matrix[level].currentReferrer,\r\n        users[userAddress].x3Matrix[level].referrals,\r\n        users[userAddress].x3Matrix[level].blocked,\r\n        users[userAddress].x3Matrix[level].reinvestCount);\r\n    }\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address,uint) {\r\n        return (users[userAddress].x6Matrix[level].currentReferrer,\r\n        users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n        users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n        users[userAddress].x6Matrix[level].blocked,\r\n        users[userAddress].x6Matrix[level].closedPart,\r\n        users[userAddress].x6Matrix[level].reinvestCount);\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].x6Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n\r\n        if (!address(uint160(receiver)).send(levelPrice[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n\r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin- solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient. \r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    //function totalSupply() public view returns (uint supply);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract RegularToken is Token {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    uint public totalSupply;\r\n}\r\n\r\ncontract UnboundedRegularToken is RegularToken {\r\n\r\n    uint constant MAX_UINT = 2 ** 256 - 1;\r\n\r\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function transferFrom(address _from, address _to, uint _value)\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        uint allowance = allowed[_from][msg.sender];\r\n\r\n        require(balances[_from] >= _value);\r\n        require(allowance >= _value);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        if (allowance < MAX_UINT) {\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ETPlanToken is UnboundedRegularToken {\r\n\r\n    uint8 constant public decimals = 18;\r\n    string constant public name = \"ETPlanToken\";\r\n    string constant public symbol = \"ELS\";\r\n\r\n    constructor() public {\r\n        totalSupply = 33 * 10 ** 25;\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_etplan\",\"type\":\"address\"}],\"name\":\"initQ8\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_this\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"income\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawELS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"q8Matrix\",\"outputs\":[{\"name\":\"currentReferrer\",\"type\":\"address\"},{\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeQ8Referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"activeQ8Levels\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"super\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_super\",\"type\":\"address\"}],\"name\":\"updateSuper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eTPlanToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"getq8Matrix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etplan\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"initData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"NewRound\",\"type\":\"event\"}]","ContractName":"ETPlanV2","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://50792bbacd464af1629ff7afeeb78668579315d01bad71ef5d1147e7c1b4b5a6"}]}