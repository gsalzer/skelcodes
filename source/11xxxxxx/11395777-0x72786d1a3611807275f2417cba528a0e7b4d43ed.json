{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// Modified from:\r\n// https://gist.github.com/rstormsf/7cfb0c6b7a835c0c67b4a394b4fd9383\r\n// https://github.com/tapmydata/tap-protocol/blob/main/contracts/VestingVault.sol\r\n\r\ninterface IUpi {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TreasuryVesting is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint16;\r\n\r\n    uint256 constant internal TIME_INTERVAL = 1 days;\r\n\r\n    struct Grant {\r\n        uint256 startTime;\r\n        uint256 amount;\r\n        uint16 vestingDuration;\r\n        uint16 daysClaimed;\r\n        uint256 totalClaimed;\r\n        address recipient;\r\n    }\r\n\r\n    event GrantAdded(address indexed recipient, uint256 vestingId);\r\n    event GrantTokensClaimed(address indexed recipient, uint256 amountClaimed);\r\n\r\n    IUpi public token;\r\n    \r\n    mapping (address => Grant) private tokenGrants;\r\n\r\n    uint256 private totalVestingCount;\r\n\r\n    constructor(IUpi _token) public {\r\n        require(address(_token) != address(0));\r\n        token = _token;\r\n    }\r\n    \r\n    function addTokenGrant(\r\n        address _recipient,\r\n        uint256 _amount,\r\n        uint16 _vestingDurationInDays,\r\n        uint16 _vestingCliffInDays    \r\n    ) \r\n        external\r\n        onlyOwner\r\n    {\r\n        require(tokenGrants[_recipient].amount == 0, \"Grant already exists, must revoke first.\");\r\n        require(_vestingCliffInDays <= 10*365, \"Cliff greater than 10 years\");\r\n        require(_vestingDurationInDays <= 25*365, \"Duration greater than 25 years\");\r\n        \r\n        uint256 amountVestedPerDay = _amount.div(_vestingDurationInDays);\r\n        require(amountVestedPerDay > 0, \"amountVestedPerDay > 0\");\r\n\r\n        // Transfer the grant tokens under the control of the vesting contract\r\n        require(token.transferFrom(owner(), address(this), _amount));\r\n\r\n        Grant memory grant = Grant({\r\n            startTime: currentTime() + _vestingCliffInDays * 1 * TIME_INTERVAL,\r\n            amount: _amount,\r\n            vestingDuration: _vestingDurationInDays,\r\n            daysClaimed: 0,\r\n            totalClaimed: 0,\r\n            recipient: _recipient\r\n        });\r\n        tokenGrants[_recipient] = grant;\r\n        emit GrantAdded(_recipient, totalVestingCount);\r\n        totalVestingCount++;\r\n    }\r\n\r\n    /// @notice Calculate the vested and unclaimed months and tokens available for `_grantId` to claim\r\n    /// Due to rounding errors once grant duration is reached, returns the entire left grant amount\r\n    /// Returns (0, 0) if cliff has not been reached\r\n    function calculateGrantClaim(address _recipient) private view returns (uint16, uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n\r\n        require(tokenGrant.totalClaimed < tokenGrant.amount, \"Grant fully claimed\");\r\n\r\n        // For grants created with a future start date, that hasn't been reached, return 0, 0\r\n        if (currentTime() < tokenGrant.startTime) {\r\n            return (0, 0);\r\n        }\r\n\r\n        // Check cliff was reached\r\n        uint elapsedDays = currentTime().sub(tokenGrant.startTime - 1 * TIME_INTERVAL).div(TIME_INTERVAL);\r\n\r\n        // If over vesting duration, all tokens vested\r\n        if (elapsedDays >= tokenGrant.vestingDuration) {\r\n            uint256 remainingGrant = tokenGrant.amount.sub(tokenGrant.totalClaimed);\r\n            return (tokenGrant.vestingDuration, remainingGrant);\r\n        } else {\r\n            uint16 daysVested = uint16(elapsedDays.sub(tokenGrant.daysClaimed));\r\n            uint256 amountVestedPerDay = tokenGrant.amount.div(uint256(tokenGrant.vestingDuration));\r\n            uint256 amountVested = uint256(daysVested.mul(amountVestedPerDay));\r\n            return (daysVested, amountVested);\r\n        }\r\n    }\r\n\r\n    /// @notice Allows a grant recipient to claim their vested tokens. Errors if no tokens have vested\r\n    function claimVestedTokens() external {\r\n        uint16 daysVested;\r\n        uint256 amountVested;\r\n        (daysVested, amountVested) = calculateGrantClaim(msg.sender);\r\n        require(amountVested > 0, \"Vested is 0\");\r\n\r\n        Grant storage tokenGrant = tokenGrants[msg.sender];\r\n        tokenGrant.daysClaimed = uint16(tokenGrant.daysClaimed.add(daysVested));\r\n        tokenGrant.totalClaimed = uint256(tokenGrant.totalClaimed.add(amountVested));\r\n        \r\n        require(token.transfer(tokenGrant.recipient, amountVested), \"no tokens\");\r\n        emit GrantTokensClaimed(tokenGrant.recipient, amountVested);\r\n    }\r\n\r\n    function getGrantStartTime(address _recipient) public view returns(uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n        return tokenGrant.startTime;\r\n    }\r\n\r\n    function getGrantDaysClaimed(address _recipient) public view returns(uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n        return tokenGrant.daysClaimed;\r\n    }\r\n\r\n    function getGrantVestingDuration(address _recipient) public view returns(uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n        return tokenGrant.vestingDuration;\r\n    }\r\n\r\n    function getGrantVestingDurationLeft(address _recipient) public view returns(uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n        if (tokenGrant.vestingDuration < tokenGrant.daysClaimed) {\r\n            return 0;\r\n        }\r\n        return tokenGrant.vestingDuration.sub(tokenGrant.daysClaimed);\r\n    }\r\n\r\n    function getGrantTotalClaimed(address _recipient) public view returns(uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n        return tokenGrant.totalClaimed;\r\n    }\r\n\r\n    function getGrantAmount(address _recipient) public view returns(uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n        return tokenGrant.amount;\r\n    }\r\n\r\n    function getGrantAmountLeft(address _recipient) public view returns(uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n        return tokenGrant.amount.sub(tokenGrant.totalClaimed);\r\n    }\r\n\r\n    function getTotalVestingCount() public view returns(uint256) {\r\n        return totalVestingCount;\r\n    }\r\n\r\n    function currentTime() private view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUpi\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"GrantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"GrantTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_vestingCliffInDays\",\"type\":\"uint16\"}],\"name\":\"addTokenGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getGrantAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getGrantAmountLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getGrantDaysClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getGrantStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getGrantTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getGrantVestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getGrantVestingDurationLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVestingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IUpi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TreasuryVesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"0000000000000000000000002e1c7221086762d5f657cd5119e8ed5bf2af4ce6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c024d78b8064c7e4bc3b5a2684dbce6d1e0c466887f9a224a8aa79779df2cd4c"}]}