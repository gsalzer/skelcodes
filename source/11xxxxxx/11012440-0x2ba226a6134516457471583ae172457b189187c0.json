{"status":"1","message":"OK","result":[{"SourceCode":"/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: Issuer.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/Issuer.sol\n* Docs: https://docs.synthetix.io/contracts/Issuer\n*\n* Contract Dependencies: \n*\t- IAddressResolver\n*\t- IIssuer\n*\t- MixinResolver\n*\t- MixinSystemSettings\n*\t- Owned\n* Libraries: \n*\t- SafeDecimalMath\n*\t- SafeMath\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity ^0.5.16;\n\n\n// https://docs.synthetix.io/contracts/Owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getSynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\ninterface ISynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferableSynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to Synthetix\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}\n\n\ninterface IIssuer {\n    // Views\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availableSynthCount() external view returns (uint);\n\n    function availableSynths(uint index) external view returns (ISynth);\n\n    function canBurnSynths(address account) external view returns (bool);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n        external\n        view\n        returns (uint cratio, bool anyRateIsInvalid);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\n\n    function issuanceRatio() external view returns (uint);\n\n    function debtSnapshotStaleTime() external view returns (uint);\n\n    function lastIssueEvent(address account) external view returns (uint);\n\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\n\n    function minimumStakeTime() external view returns (uint);\n\n    function remainingIssuableSynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function synths(bytes32 currencyKey) external view returns (ISynth);\n\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\n\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral) external view returns (uint);\n\n    function currentSNXIssuedDebtForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory snxIssuedDebts, bool anyRateIsInvalid);\n\n    function cachedSNXIssuedDebtForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory snxIssuedDebts);\n\n    function currentSNXIssuedDebt() external view returns (uint snxIssuedDebt, bool anyRateIsInvalid);\n\n    function cachedSNXIssuedDebtInfo()\n        external\n        view\n        returns (\n            uint cachedDebt,\n            uint timestamp,\n            bool isInvalid\n        );\n\n    function debtCacheIsStale() external view returns (bool);\n\n    function transferableSynthetixAndAnyRateIsInvalid(address account, uint balance)\n        external\n        view\n        returns (uint transferable, bool anyRateIsInvalid);\n\n    // Restricted: used internally to Synthetix\n    function issueSynths(address from, uint amount) external;\n\n    function issueSynthsOnBehalf(\n        address issueFor,\n        address from,\n        uint amount\n    ) external;\n\n    function issueMaxSynths(address from) external;\n\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\n\n    function burnSynths(address from, uint amount) external;\n\n    function burnSynthsOnBehalf(\n        address burnForAddress,\n        address from,\n        uint amount\n    ) external;\n\n    function burnSynthsToTarget(address from) external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\n\n    function liquidateDelinquentAccount(\n        address account,\n        uint susdAmount,\n        address liquidator\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\n\n    function cacheSNXIssuedDebt() external;\n\n    function updateSNXIssuedDebtForCurrencies(bytes32[] calldata currencyKeys) external;\n}\n\n\n// Inheritance\n\n\n// https://docs.synthetix.io/contracts/AddressResolver\ncontract AddressResolver is Owned, IAddressResolver {\n    mapping(bytes32 => address) public repository;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\n        require(names.length == destinations.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < names.length; i++) {\n            repository[names[i]] = destinations[i];\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function getAddress(bytes32 name) external view returns (address) {\n        return repository[name];\n    }\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\n        address _foundAddress = repository[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    function getSynth(bytes32 key) external view returns (address) {\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\n        return address(issuer.synths(key));\n    }\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/MixinResolver\ncontract MixinResolver is Owned {\n    AddressResolver public resolver;\n\n    mapping(bytes32 => address) private addressCache;\n\n    bytes32[] public resolverAddressesRequired;\n\n    uint public constant MAX_ADDRESSES_FROM_RESOLVER = 24;\n\n    constructor(address _resolver, bytes32[MAX_ADDRESSES_FROM_RESOLVER] memory _addressesToCache) internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n\n        for (uint i = 0; i < _addressesToCache.length; i++) {\n            if (_addressesToCache[i] != bytes32(0)) {\n                resolverAddressesRequired.push(_addressesToCache[i]);\n            } else {\n                // End early once an empty item is found - assumes there are no empty slots in\n                // _addressesToCache\n                break;\n            }\n        }\n        resolver = AddressResolver(_resolver);\n        // Do not sync the cache as addresses may not be in the resolver yet\n    }\n\n    /* ========== SETTERS ========== */\n    function setResolverAndSyncCache(AddressResolver _resolver) external onlyOwner {\n        resolver = _resolver;\n\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            bytes32 name = resolverAddressesRequired[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            addressCache[name] = resolver.requireAndGetAddress(name, \"Resolver missing target\");\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function requireAndGetAddress(bytes32 name, string memory reason) internal view returns (address) {\n        address _foundAddress = addressCache[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    // Note: this could be made external in a utility contract if addressCache was made public\n    // (used for deployment)\n    function isResolverCached(AddressResolver _resolver) external view returns (bool) {\n        if (resolver != _resolver) {\n            return false;\n        }\n\n        // otherwise, check everything\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            bytes32 name = resolverAddressesRequired[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Note: can be made external into a utility contract (used for deployment)\n    function getResolverAddressesRequired()\n        external\n        view\n        returns (bytes32[MAX_ADDRESSES_FROM_RESOLVER] memory addressesRequired)\n    {\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            addressesRequired[i] = resolverAddressesRequired[i];\n        }\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n    function appendToAddressCache(bytes32 name) internal {\n        resolverAddressesRequired.push(name);\n        require(resolverAddressesRequired.length < MAX_ADDRESSES_FROM_RESOLVER, \"Max resolver cache size met\");\n        // Because this is designed to be called internally in constructors, we don't\n        // check the address exists already in the resolver\n        addressCache[name] = resolver.getAddress(name);\n    }\n}\n\n\ninterface IFlexibleStorage {\n    // Views\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\n\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\n\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\n\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\n\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\n\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\n\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\n\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\n\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\n\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\n\n    // Mutative functions\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\n\n    function setUIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        uint value\n    ) external;\n\n    function setUIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        uint[] calldata values\n    ) external;\n\n    function setIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        int value\n    ) external;\n\n    function setIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        int[] calldata values\n    ) external;\n\n    function setAddressValue(\n        bytes32 contractName,\n        bytes32 record,\n        address value\n    ) external;\n\n    function setAddressValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        address[] calldata values\n    ) external;\n\n    function setBoolValue(\n        bytes32 contractName,\n        bytes32 record,\n        bool value\n    ) external;\n\n    function setBoolValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bool[] calldata values\n    ) external;\n\n    function setBytes32Value(\n        bytes32 contractName,\n        bytes32 record,\n        bytes32 value\n    ) external;\n\n    function setBytes32Values(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bytes32[] calldata values\n    ) external;\n}\n\n\n// Internal references\n\n\ncontract MixinSystemSettings is MixinResolver {\n    bytes32 internal constant SETTING_CONTRACT_NAME = \"SystemSettings\";\n\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \"waitingPeriodSecs\";\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR = \"priceDeviationThresholdFactor\";\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \"issuanceRatio\";\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \"feePeriodDuration\";\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \"targetThreshold\";\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \"liquidationDelay\";\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \"liquidationRatio\";\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY = \"liquidationPenalty\";\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \"rateStalePeriod\";\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \"exchangeFeeRate\";\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \"minimumStakeTime\";\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS = \"aggregatorWarningFlags\";\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED = \"tradingRewardsEnabled\";\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME = \"debtSnapshotStaleTime\";\n\n    bytes32 private constant CONTRACT_FLEXIBLESTORAGE = \"FlexibleStorage\";\n\n    constructor() internal {\n        appendToAddressCache(CONTRACT_FLEXIBLESTORAGE);\n    }\n\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE, \"Missing FlexibleStorage address\"));\n    }\n\n    function getTradingRewardsEnabled() internal view returns (bool) {\n        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);\n    }\n\n    function getWaitingPeriodSecs() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);\n    }\n\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);\n    }\n\n    function getIssuanceRatio() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);\n    }\n\n    function getFeePeriodDuration() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);\n    }\n\n    function getTargetThreshold() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);\n    }\n\n    function getLiquidationDelay() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);\n    }\n\n    function getLiquidationRatio() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);\n    }\n\n    function getLiquidationPenalty() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);\n    }\n\n    function getRateStalePeriod() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);\n    }\n\n    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\n        return\n            flexibleStorage().getUIntValue(\n                SETTING_CONTRACT_NAME,\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))\n            );\n    }\n\n    function getMinimumStakeTime() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);\n    }\n\n    function getAggregatorWarningFlags() internal view returns (address) {\n        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);\n    }\n\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);\n    }\n\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Libraries\n\n\n// https://docs.synthetix.io/contracts/SafeDecimalMath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n}\n\n\ninterface ISynthetix {\n    // Views\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availableSynthCount() external view returns (uint);\n\n    function availableSynths(uint index) external view returns (ISynth);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\n\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\n\n    function remainingIssuableSynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function synths(bytes32 currencyKey) external view returns (ISynth);\n\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\n\n    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\n\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\n\n    function transferableSynthetix(address account) external view returns (uint transferable);\n\n    // Mutative Functions\n    function burnSynths(uint amount) external;\n\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\n\n    function burnSynthsToTarget() external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\n\n    function exchange(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTracking(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function issueMaxSynths() external;\n\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\n\n    function issueSynths(uint amount) external;\n\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\n\n    function mint() external returns (bool);\n\n    function settle(bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\n}\n\n\ninterface IFeePool {\n    // Views\n\n    // solhint-disable-next-line func-name-mixedcase\n    function FEE_ADDRESS() external view returns (address);\n\n    function feesAvailable(address account) external view returns (uint, uint);\n\n    function feePeriodDuration() external view returns (uint);\n\n    function isFeesClaimable(address account) external view returns (bool);\n\n    function targetThreshold() external view returns (uint);\n\n    function totalFeesAvailable() external view returns (uint);\n\n    function totalRewardsAvailable() external view returns (uint);\n\n    // Mutative Functions\n    function claimFees() external returns (bool);\n\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\n\n    function closeCurrentFeePeriod() external;\n\n    // Restricted: used internally to Synthetix\n    function appendAccountIssuanceRecord(\n        address account,\n        uint lockedAmount,\n        uint debtEntryIndex\n    ) external;\n\n    function recordFeePaid(uint sUSDAmount) external;\n\n    function setRewardsToDistribute(uint amount) external;\n}\n\n\ninterface ISynthetixState {\n    // Views\n    function debtLedger(uint index) external view returns (uint);\n\n    function issuanceData(address account) external view returns (uint initialDebtOwnership, uint debtEntryIndex);\n\n    function debtLedgerLength() external view returns (uint);\n\n    function hasIssued(address account) external view returns (bool);\n\n    function lastDebtLedgerEntry() external view returns (uint);\n\n    // Mutative functions\n    function incrementTotalIssuerCount() external;\n\n    function decrementTotalIssuerCount() external;\n\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership) external;\n\n    function appendDebtLedgerValue(uint value) external;\n\n    function clearIssuanceData(address account) external;\n}\n\n\ninterface IExchanger {\n    // Views\n    function calculateAmountAfterSettlement(\n        address from,\n        bytes32 currencyKey,\n        uint amount,\n        uint refunded\n    ) external view returns (uint amountAfterSettlement);\n\n    function isSynthRateInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint reclaimAmount,\n            uint rebateAmount,\n            uint numEntries\n        );\n\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\n\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\n        external\n        view\n        returns (uint exchangeFeeRate);\n\n    function getAmountsForExchange(\n        uint sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint amountReceived,\n            uint fee,\n            uint exchangeFeeRate\n        );\n\n    function priceDeviationThresholdFactor() external view returns (uint);\n\n    function waitingPeriodSecs() external view returns (uint);\n\n    // Mutative functions\n    function exchange(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTracking(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function settle(address from, bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    function setLastExchangeRateForSynth(bytes32 currencyKey, uint rate) external;\n\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\n}\n\n\ninterface IDelegateApprovals {\n    // Views\n    function canBurnFor(address authoriser, address delegate) external view returns (bool);\n\n    function canIssueFor(address authoriser, address delegate) external view returns (bool);\n\n    function canClaimFor(address authoriser, address delegate) external view returns (bool);\n\n    function canExchangeFor(address authoriser, address delegate) external view returns (bool);\n\n    // Mutative\n    function approveAllDelegatePowers(address delegate) external;\n\n    function removeAllDelegatePowers(address delegate) external;\n\n    function approveBurnOnBehalf(address delegate) external;\n\n    function removeBurnOnBehalf(address delegate) external;\n\n    function approveIssueOnBehalf(address delegate) external;\n\n    function removeIssueOnBehalf(address delegate) external;\n\n    function approveClaimOnBehalf(address delegate) external;\n\n    function removeClaimOnBehalf(address delegate) external;\n\n    function approveExchangeOnBehalf(address delegate) external;\n\n    function removeExchangeOnBehalf(address delegate) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/IExchangeRates\ninterface IExchangeRates {\n    // Structs\n    struct RateAndUpdatedTime {\n        uint216 rate;\n        uint40 time;\n    }\n\n    struct InversePricing {\n        uint entryPoint;\n        uint upperLimit;\n        uint lowerLimit;\n        bool frozenAtUpperLimit;\n        bool frozenAtLowerLimit;\n    }\n\n    // Views\n    function aggregators(bytes32 currencyKey) external view returns (address);\n\n    function aggregatorWarningFlags() external view returns (address);\n\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\n\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\n\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\n\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint value);\n\n    function effectiveValueAndRates(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint value,\n            uint sourceRate,\n            uint destinationRate\n        );\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint value);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function inversePricing(bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint entryPoint,\n            uint upperLimit,\n            uint lowerLimit,\n            bool frozenAtUpperLimit,\n            bool frozenAtLowerLimit\n        );\n\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\n\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function rateStalePeriod() external view returns (uint);\n\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\n        external\n        view\n        returns (uint[] memory rates, uint[] memory times);\n\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory rates, bool anyRateInvalid);\n\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\n\n    // Mutative functions\n    function freezeRate(bytes32 currencyKey) external;\n}\n\n\ninterface IEtherCollateral {\n    // Views\n    function totalIssuedSynths() external view returns (uint256);\n\n    function totalLoansCreated() external view returns (uint256);\n\n    function totalOpenLoanCount() external view returns (uint256);\n\n    // Mutative functions\n    function openLoan() external payable returns (uint256 loanID);\n\n    function closeLoan(uint256 loanID) external;\n\n    function liquidateUnclosedLoan(address _loanCreatorsAddress, uint256 _loanID) external;\n}\n\n\ninterface IEtherCollateralsUSD {\n    // Views\n    function totalIssuedSynths() external view returns (uint256);\n\n    function totalLoansCreated() external view returns (uint256);\n\n    function totalOpenLoanCount() external view returns (uint256);\n\n    // Mutative functions\n    function openLoan(uint256 _loanAmount) external payable returns (uint256 loanID);\n\n    function closeLoan(uint256 loanID) external;\n\n    function liquidateUnclosedLoan(address _loanCreatorsAddress, uint256 _loanID) external;\n\n    function depositCollateral(address account, uint256 loanID) external payable;\n\n    function withdrawCollateral(uint256 loanID, uint256 withdrawAmount) external;\n\n    function repayLoan(\n        address _loanCreatorsAddress,\n        uint256 _loanID,\n        uint256 _repayAmount\n    ) external;\n}\n\n\ninterface IRewardEscrow {\n    // Views\n    function balanceOf(address account) external view returns (uint);\n\n    function numVestingEntries(address account) external view returns (uint);\n\n    function totalEscrowedAccountBalance(address account) external view returns (uint);\n\n    function totalVestedAccountBalance(address account) external view returns (uint);\n\n    // Mutative functions\n    function appendVestingEntry(address account, uint quantity) external;\n\n    function vest() external;\n}\n\n\ninterface IHasBalance {\n    // Views\n    function balanceOf(address account) external view returns (uint);\n}\n\n\ninterface IERC20 {\n    // ERC20 Optional Views\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    // Views\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    // Mutative functions\n    function transfer(address to, uint value) external returns (bool);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ninterface ILiquidations {\n    // Views\n    function isOpenForLiquidation(address account) external view returns (bool);\n\n    function getLiquidationDeadlineForAccount(address account) external view returns (uint);\n\n    function isLiquidationDeadlinePassed(address account) external view returns (bool);\n\n    function liquidationDelay() external view returns (uint);\n\n    function liquidationRatio() external view returns (uint);\n\n    function liquidationPenalty() external view returns (uint);\n\n    function calculateAmountToFixCollateral(uint debtBalance, uint collateral) external view returns (uint);\n\n    // Mutative Functions\n    function flagAccountForLiquidation(address account) external;\n\n    // Restricted: used internally to Synthetix\n    function removeAccountInLiquidation(address account) external;\n\n    function checkAndRemoveAccountInLiquidation(address account) external;\n}\n\n\ninterface ISystemStatus {\n    struct Status {\n        bool canSuspend;\n        bool canResume;\n    }\n\n    struct Suspension {\n        bool suspended;\n        // reason is an integer code,\n        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\n        uint248 reason;\n    }\n\n    // Views\n    function accessControl(bytes32 section, address account) external view returns (bool canSuspend, bool canResume);\n\n    function requireSystemActive() external view;\n\n    function requireIssuanceActive() external view;\n\n    function requireExchangeActive() external view;\n\n    function requireSynthActive(bytes32 currencyKey) external view;\n\n    function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\n\n    function synthSuspension(bytes32 currencyKey) external view returns (bool suspended, uint248 reason);\n\n    // Restricted functions\n    function suspendSynth(bytes32 currencyKey, uint256 reason) external;\n\n    function updateAccessControl(\n        bytes32 section,\n        address account,\n        bool canSuspend,\n        bool canResume\n    ) external;\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/Issuer\ncontract Issuer is Owned, MixinResolver, MixinSystemSettings, IIssuer {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    // Available Synths which can be used with the system\n    ISynth[] public availableSynths;\n    mapping(bytes32 => ISynth) public synths;\n    mapping(address => bytes32) public synthsByAddress;\n\n    /* ========== ENCODED NAMES ========== */\n\n    bytes32 internal constant sUSD = \"sUSD\";\n    bytes32 internal constant sETH = \"sETH\";\n    bytes32 internal constant SNX = \"SNX\";\n\n    // Flexible storage names\n\n    bytes32 public constant CONTRACT_NAME = \"Issuer\";\n    bytes32 internal constant LAST_ISSUE_EVENT = \"lastIssueEvent\";\n    bytes32 internal constant CACHED_SNX_ISSUED_DEBT = \"cachedSNXIssuedDebt\";\n    bytes32 internal constant CACHED_SNX_ISSUED_DEBT_TIMESTAMP = \"cachedSNXIssuedDebtTimestamp\";\n    bytes32 internal constant CACHED_SNX_ISSUED_DEBT_INVALID = \"cachedSNXIssuedDebtInvalid\";\n\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\n\n    bytes32 private constant CONTRACT_SYNTHETIX = \"Synthetix\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\n    bytes32 private constant CONTRACT_SYNTHETIXSTATE = \"SynthetixState\";\n    bytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\n    bytes32 private constant CONTRACT_DELEGATEAPPROVALS = \"DelegateApprovals\";\n    bytes32 private constant CONTRACT_ETHERCOLLATERAL = \"EtherCollateral\";\n    bytes32 private constant CONTRACT_ETHERCOLLATERAL_SUSD = \"EtherCollateralsUSD\";\n    bytes32 private constant CONTRACT_REWARDESCROW = \"RewardEscrow\";\n    bytes32 private constant CONTRACT_SYNTHETIXESCROW = \"SynthetixEscrow\";\n    bytes32 private constant CONTRACT_LIQUIDATIONS = \"Liquidations\";\n    bytes32 private constant CONTRACT_FLEXIBLESTORAGE = \"FlexibleStorage\";\n    bytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\n\n    bytes32[24] private addressesToCache = [\n        CONTRACT_SYNTHETIX,\n        CONTRACT_EXCHANGER,\n        CONTRACT_EXRATES,\n        CONTRACT_SYNTHETIXSTATE,\n        CONTRACT_FEEPOOL,\n        CONTRACT_DELEGATEAPPROVALS,\n        CONTRACT_ETHERCOLLATERAL,\n        CONTRACT_ETHERCOLLATERAL_SUSD,\n        CONTRACT_REWARDESCROW,\n        CONTRACT_SYNTHETIXESCROW,\n        CONTRACT_LIQUIDATIONS,\n        CONTRACT_FLEXIBLESTORAGE,\n        CONTRACT_SYSTEMSTATUS\n    ];\n\n    constructor(address _owner, address _resolver)\n        public\n        Owned(_owner)\n        MixinResolver(_resolver, addressesToCache)\n        MixinSystemSettings()\n    {}\n\n    /* ========== VIEWS ========== */\n\n    function synthetix() internal view returns (ISynthetix) {\n        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX, \"Missing Synthetix address\"));\n    }\n\n    function exchanger() internal view returns (IExchanger) {\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER, \"Missing Exchanger address\"));\n    }\n\n    function exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES, \"Missing ExchangeRates address\"));\n    }\n\n    function synthetixState() internal view returns (ISynthetixState) {\n        return ISynthetixState(requireAndGetAddress(CONTRACT_SYNTHETIXSTATE, \"Missing SynthetixState address\"));\n    }\n\n    function feePool() internal view returns (IFeePool) {\n        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL, \"Missing FeePool address\"));\n    }\n\n    function liquidations() internal view returns (ILiquidations) {\n        return ILiquidations(requireAndGetAddress(CONTRACT_LIQUIDATIONS, \"Missing Liquidations address\"));\n    }\n\n    function systemStatus() internal view returns (ISystemStatus) {\n        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS, \"Missing SystemStatus address\"));\n    }\n\n    function delegateApprovals() internal view returns (IDelegateApprovals) {\n        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS, \"Missing DelegateApprovals address\"));\n    }\n\n    function etherCollateral() internal view returns (IEtherCollateral) {\n        return IEtherCollateral(requireAndGetAddress(CONTRACT_ETHERCOLLATERAL, \"Missing EtherCollateral address\"));\n    }\n\n    function etherCollateralsUSD() internal view returns (IEtherCollateralsUSD) {\n        return\n            IEtherCollateralsUSD(requireAndGetAddress(CONTRACT_ETHERCOLLATERAL_SUSD, \"Missing EtherCollateralsUSD address\"));\n    }\n\n    function rewardEscrow() internal view returns (IRewardEscrow) {\n        return IRewardEscrow(requireAndGetAddress(CONTRACT_REWARDESCROW, \"Missing RewardEscrow address\"));\n    }\n\n    function synthetixEscrow() internal view returns (IHasBalance) {\n        return IHasBalance(requireAndGetAddress(CONTRACT_SYNTHETIXESCROW, \"Missing SynthetixEscrow address\"));\n    }\n\n    function issuanceRatio() external view returns (uint) {\n        return getIssuanceRatio();\n    }\n\n    function debtSnapshotStaleTime() external view returns (uint) {\n        return getDebtSnapshotStaleTime();\n    }\n\n    function _availableCurrencyKeysWithOptionalSNX(bool withSNX) internal view returns (bytes32[] memory) {\n        bytes32[] memory currencyKeys = new bytes32[](availableSynths.length + (withSNX ? 1 : 0));\n\n        for (uint i = 0; i < availableSynths.length; i++) {\n            currencyKeys[i] = synthsByAddress[address(availableSynths[i])];\n        }\n\n        if (withSNX) {\n            currencyKeys[availableSynths.length] = SNX;\n        }\n\n        return currencyKeys;\n    }\n\n    function _issuedSynthValues(bytes32[] memory currencyKeys, uint[] memory rates) internal view returns (uint[] memory) {\n        uint numValues = currencyKeys.length;\n        uint[] memory values = new uint[](numValues);\n\n        for (uint i = 0; i < numValues; i++) {\n            bytes32 key = currencyKeys[i];\n\n            uint supply = IERC20(address(synths[key])).totalSupply();\n\n            bool isSUSD = key == sUSD;\n            if (isSUSD || key == sETH) {\n                IEtherCollateral etherCollateralContract = isSUSD\n                    ? IEtherCollateral(address(etherCollateralsUSD()))\n                    : etherCollateral();\n                uint etherCollateralSupply = etherCollateralContract.totalIssuedSynths();\n                supply = supply.sub(etherCollateralSupply);\n            }\n\n            values[i] = supply.multiplyDecimalRound(rates[i]);\n        }\n        return values;\n    }\n\n    function _cachedSNXIssuedDebtAndTimestamp(IFlexibleStorage store) internal view returns (uint debt, uint timestamp) {\n        bytes32[] memory keys = new bytes32[](2);\n        keys[0] = CACHED_SNX_ISSUED_DEBT;\n        keys[1] = CACHED_SNX_ISSUED_DEBT_TIMESTAMP;\n\n        uint[] memory values = store.getUIntValues(CONTRACT_NAME, keys);\n        return (values[0], values[1]);\n    }\n\n    function _cacheIsInvalid(IFlexibleStorage store) internal view returns (bool) {\n        return store.getBoolValue(CONTRACT_NAME, CACHED_SNX_ISSUED_DEBT_INVALID);\n    }\n\n    function _totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral)\n        internal\n        view\n        returns (uint totalIssued, bool anyRateIsInvalid)\n    {\n        IFlexibleStorage store = flexibleStorage();\n\n        (uint debt, uint timestamp) = _cachedSNXIssuedDebtAndTimestamp(store);\n        bool isStale = getDebtSnapshotStaleTime() < block.timestamp - timestamp;\n\n        // Note a 0 timestamp means that the cache is uninitialised.\n        // We'll keep the check explicitly separate from isStale, just in case the stale time is\n        // ever set to something higher than the current unix time (e.g. to turn off staleness).\n        anyRateIsInvalid = isStale || _cacheIsInvalid(store) || timestamp == 0;\n\n        IExchangeRates exRates = exchangeRates();\n\n        // Add total issued synths from Ether Collateral back into the total if not excluded\n        if (!excludeEtherCollateral) {\n            // Add ether collateral sUSD\n            debt = debt.add(etherCollateralsUSD().totalIssuedSynths());\n\n            // Add ether collateral sETH\n            (uint ethRate, bool ethRateInvalid) = exRates.rateAndInvalid(sETH);\n            uint ethIssuedDebt = etherCollateral().totalIssuedSynths().multiplyDecimalRound(ethRate);\n            debt = debt.add(ethIssuedDebt);\n            anyRateIsInvalid = anyRateIsInvalid || ethRateInvalid;\n        }\n\n        if (currencyKey == sUSD) {\n            return (debt, anyRateIsInvalid);\n        }\n\n        (uint currencyRate, bool currencyRateInvalid) = exRates.rateAndInvalid(currencyKey);\n        return (debt.divideDecimalRound(currencyRate), anyRateIsInvalid || currencyRateInvalid);\n    }\n\n    function _debtBalanceOfAndTotalDebt(address _issuer, bytes32 currencyKey)\n        internal\n        view\n        returns (\n            uint debtBalance,\n            uint totalSystemValue,\n            bool anyRateIsInvalid\n        )\n    {\n        ISynthetixState state = synthetixState();\n\n        // What was their initial debt ownership?\n        (uint initialDebtOwnership, uint debtEntryIndex) = state.issuanceData(_issuer);\n\n        // What's the total value of the system excluding ETH backed synths in their requested currency?\n        (totalSystemValue, anyRateIsInvalid) = _totalIssuedSynths(currencyKey, true);\n\n        // If it's zero, they haven't issued, and they have no debt.\n        // Note: it's more gas intensive to put this check here rather than before _totalIssuedSynths\n        // if they have 0 SNX, but it's a necessary trade-off\n        if (initialDebtOwnership == 0) return (0, totalSystemValue, anyRateIsInvalid);\n\n        // Figure out the global debt percentage delta from when they entered the system.\n        // This is a high precision integer of 27 (1e27) decimals.\n        uint currentDebtOwnership = state\n            .lastDebtLedgerEntry()\n            .divideDecimalRoundPrecise(state.debtLedger(debtEntryIndex))\n            .multiplyDecimalRoundPrecise(initialDebtOwnership);\n\n        // Their debt balance is their portion of the total system value.\n        uint highPrecisionBalance = totalSystemValue.decimalToPreciseDecimal().multiplyDecimalRoundPrecise(\n            currentDebtOwnership\n        );\n\n        // Convert back into 18 decimals (1e18)\n        debtBalance = highPrecisionBalance.preciseDecimalToDecimal();\n    }\n\n    function _canBurnSynths(address account) internal view returns (bool) {\n        return now >= _lastIssueEvent(account).add(getMinimumStakeTime());\n    }\n\n    function _lastIssueEvent(address account) internal view returns (uint) {\n        //  Get the timestamp of the last issue this account made\n        return flexibleStorage().getUIntValue(CONTRACT_NAME, keccak256(abi.encodePacked(LAST_ISSUE_EVENT, account)));\n    }\n\n    function _remainingIssuableSynths(address _issuer)\n        internal\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt,\n            bool anyRateIsInvalid\n        )\n    {\n        (alreadyIssued, totalSystemDebt, anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(_issuer, sUSD);\n        (uint issuable, bool isInvalid) = _maxIssuableSynths(_issuer);\n        maxIssuable = issuable;\n        anyRateIsInvalid = anyRateIsInvalid || isInvalid;\n\n        if (alreadyIssued >= maxIssuable) {\n            maxIssuable = 0;\n        } else {\n            maxIssuable = maxIssuable.sub(alreadyIssued);\n        }\n    }\n\n    function _snxToUSD(uint amount, uint snxRate) internal pure returns (uint) {\n        return amount.multiplyDecimalRound(snxRate);\n    }\n\n    function _usdToSnx(uint amount, uint snxRate) internal pure returns (uint) {\n        return amount.divideDecimalRound(snxRate);\n    }\n\n    function _maxIssuableSynths(address _issuer) internal view returns (uint, bool) {\n        // What is the value of their SNX balance in sUSD\n        (uint snxRate, bool isInvalid) = exchangeRates().rateAndInvalid(SNX);\n        uint destinationValue = _snxToUSD(_collateral(_issuer), snxRate);\n\n        // They're allowed to issue up to issuanceRatio of that value\n        return (destinationValue.multiplyDecimal(getIssuanceRatio()), isInvalid);\n    }\n\n    function _collateralisationRatio(address _issuer) internal view returns (uint, bool) {\n        uint totalOwnedSynthetix = _collateral(_issuer);\n\n        (uint debtBalance, , bool anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(_issuer, SNX);\n\n        // it's more gas intensive to put this check here if they have 0 SNX, but it complies with the interface\n        if (totalOwnedSynthetix == 0) return (0, anyRateIsInvalid);\n\n        return (debtBalance.divideDecimalRound(totalOwnedSynthetix), anyRateIsInvalid);\n    }\n\n    function _collateral(address account) internal view returns (uint) {\n        uint balance = IERC20(address(synthetix())).balanceOf(account);\n\n        if (address(synthetixEscrow()) != address(0)) {\n            balance = balance.add(synthetixEscrow().balanceOf(account));\n        }\n\n        if (address(rewardEscrow()) != address(0)) {\n            balance = balance.add(rewardEscrow().balanceOf(account));\n        }\n\n        return balance;\n    }\n\n    function minimumStakeTime() external view returns (uint) {\n        return getMinimumStakeTime();\n    }\n\n    function canBurnSynths(address account) external view returns (bool) {\n        return _canBurnSynths(account);\n    }\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory) {\n        return _availableCurrencyKeysWithOptionalSNX(false);\n    }\n\n    function availableSynthCount() external view returns (uint) {\n        return availableSynths.length;\n    }\n\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid) {\n        (, anyRateInvalid) = exchangeRates().ratesAndInvalidForCurrencies(_availableCurrencyKeysWithOptionalSNX(true));\n    }\n\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral) external view returns (uint totalIssued) {\n        (totalIssued, ) = _totalIssuedSynths(currencyKey, excludeEtherCollateral);\n    }\n\n    function lastIssueEvent(address account) external view returns (uint) {\n        return _lastIssueEvent(account);\n    }\n\n    function collateralisationRatio(address _issuer) external view returns (uint cratio) {\n        (cratio, ) = _collateralisationRatio(_issuer);\n    }\n\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n        external\n        view\n        returns (uint cratio, bool anyRateIsInvalid)\n    {\n        return _collateralisationRatio(_issuer);\n    }\n\n    function collateral(address account) external view returns (uint) {\n        return _collateral(account);\n    }\n\n    function debtBalanceOf(address _issuer, bytes32 currencyKey) external view returns (uint debtBalance) {\n        ISynthetixState state = synthetixState();\n\n        // What was their initial debt ownership?\n        (uint initialDebtOwnership, ) = state.issuanceData(_issuer);\n\n        // If it's zero, they haven't issued, and they have no debt.\n        if (initialDebtOwnership == 0) return 0;\n\n        (debtBalance, , ) = _debtBalanceOfAndTotalDebt(_issuer, currencyKey);\n    }\n\n    function remainingIssuableSynths(address _issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        )\n    {\n        (maxIssuable, alreadyIssued, totalSystemDebt, ) = _remainingIssuableSynths(_issuer);\n    }\n\n    function maxIssuableSynths(address _issuer) external view returns (uint) {\n        (uint maxIssuable, ) = _maxIssuableSynths(_issuer);\n        return maxIssuable;\n    }\n\n    function transferableSynthetixAndAnyRateIsInvalid(address account, uint balance)\n        external\n        view\n        returns (uint transferable, bool anyRateIsInvalid)\n    {\n        // How many SNX do they have, excluding escrow?\n        // Note: We're excluding escrow here because we're interested in their transferable amount\n        // and escrowed SNX are not transferable.\n\n        // How many of those will be locked by the amount they've issued?\n        // Assuming issuance ratio is 20%, then issuing 20 SNX of value would require\n        // 100 SNX to be locked in their wallet to maintain their collateralisation ratio\n        // The locked synthetix value can exceed their balance.\n        uint debtBalance;\n        (debtBalance, , anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(account, SNX);\n        uint lockedSynthetixValue = debtBalance.divideDecimalRound(getIssuanceRatio());\n\n        // If we exceed the balance, no SNX are transferable, otherwise the difference is.\n        if (lockedSynthetixValue >= balance) {\n            transferable = 0;\n        } else {\n            transferable = balance.sub(lockedSynthetixValue);\n        }\n    }\n\n    function currentSNXIssuedDebtForCurrencies(bytes32[] memory currencyKeys)\n        public\n        view\n        returns (uint[] memory snxIssuedDebts, bool anyRateIsInvalid)\n    {\n        (uint[] memory rates, bool isInvalid) = exchangeRates().ratesAndInvalidForCurrencies(currencyKeys);\n        return (_issuedSynthValues(currencyKeys, rates), isInvalid);\n    }\n\n    function cachedSNXIssuedDebtForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory snxIssuedDebts)\n    {\n        return flexibleStorage().getUIntValues(CONTRACT_NAME, currencyKeys);\n    }\n\n    function currentSNXIssuedDebt() external view returns (uint snxIssuedDebt, bool anyRateIsInvalid) {\n        (uint[] memory values, bool isInvalid) = currentSNXIssuedDebtForCurrencies(\n            _availableCurrencyKeysWithOptionalSNX(false)\n        );\n        uint numValues = values.length;\n        uint total;\n        for (uint i; i < numValues; i++) {\n            total = total.add(values[i]);\n        }\n        return (total, isInvalid);\n    }\n\n    function cachedSNXIssuedDebtInfo()\n        external\n        view\n        returns (\n            uint cachedDebt,\n            uint timestamp,\n            bool isInvalid\n        )\n    {\n        IFlexibleStorage store = flexibleStorage();\n        (uint debt, uint time) = _cachedSNXIssuedDebtAndTimestamp(store);\n        return (debt, time, _cacheIsInvalid(store));\n    }\n\n    function debtCacheIsStale() external view returns (bool) {\n        return\n            getDebtSnapshotStaleTime() <\n            block.timestamp - flexibleStorage().getUIntValue(CONTRACT_NAME, CACHED_SNX_ISSUED_DEBT_TIMESTAMP);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function _requireSynthDoesNotExist(bytes32 currencyKey) internal view {\n        require(synths[currencyKey] == ISynth(0), \"Synth exists\");\n    }\n\n    // This function exists in case a synth is ever somehow removed without its snapshot being updated.\n    function purgeDebtCacheForSynth(bytes32 currencyKey) external onlyOwner {\n        _requireSynthDoesNotExist(currencyKey);\n        flexibleStorage().setUIntValue(CONTRACT_NAME, currencyKey, 0);\n    }\n\n    function addSynth(ISynth synth) external onlyOwner {\n        bytes32 currencyKey = synth.currencyKey();\n        _requireSynthDoesNotExist(currencyKey);\n        require(synthsByAddress[address(synth)] == bytes32(0), \"Synth address already exists\");\n\n        // Invalidate the cache to force a snapshot to be recomputed. If a synth were to be added\n        // back to the system and it still somehow had cached debt, this would force the value to be\n        // updated.\n        _changeDebtCacheValidityIfNeeded(flexibleStorage(), true);\n\n        availableSynths.push(synth);\n        synths[currencyKey] = synth;\n        synthsByAddress[address(synth)] = currencyKey;\n\n        emit SynthAdded(currencyKey, address(synth));\n    }\n\n    function removeSynth(bytes32 currencyKey) external onlyOwner {\n        address synthToRemove = address(synths[currencyKey]);\n        require(synthToRemove != address(0), \"Synth does not exist\");\n        require(IERC20(synthToRemove).totalSupply() == 0, \"Synth supply exists\");\n        require(currencyKey != sUSD, \"Cannot remove synth\");\n\n        // Remove its contribution from the debt pool snapshot, and invalidate the cache to force a snapshot.\n        _updateSNXIssuedDebtForSynth(currencyKey, 0);\n        _changeDebtCacheValidityIfNeeded(flexibleStorage(), true);\n\n        // Remove the synth from the availableSynths array.\n        for (uint i = 0; i < availableSynths.length; i++) {\n            if (address(availableSynths[i]) == synthToRemove) {\n                delete availableSynths[i];\n\n                // Copy the last synth into the place of the one we just deleted\n                // If there's only one synth, this is synths[0] = synths[0].\n                // If we're deleting the last one, it's also a NOOP in the same way.\n                availableSynths[i] = availableSynths[availableSynths.length - 1];\n\n                // Decrease the size of the array by one.\n                availableSynths.length--;\n\n                break;\n            }\n        }\n\n        // And remove it from the synths mapping\n        delete synthsByAddress[synthToRemove];\n        delete synths[currencyKey];\n\n        emit SynthRemoved(currencyKey, synthToRemove);\n    }\n\n    function issueSynths(address from, uint amount) external onlySynthetix {\n        _issueSynths(from, amount, false);\n    }\n\n    function issueMaxSynths(address from) external onlySynthetix {\n        _issueSynths(from, 0, true);\n    }\n\n    function issueSynthsOnBehalf(\n        address issueForAddress,\n        address from,\n        uint amount\n    ) external onlySynthetix {\n        _requireCanIssueOnBehalf(issueForAddress, from);\n        _issueSynths(issueForAddress, amount, false);\n    }\n\n    function issueMaxSynthsOnBehalf(address issueForAddress, address from) external onlySynthetix {\n        _requireCanIssueOnBehalf(issueForAddress, from);\n        _issueSynths(issueForAddress, 0, true);\n    }\n\n    function burnSynths(address from, uint amount) external onlySynthetix {\n        _voluntaryBurnSynths(from, amount, false);\n    }\n\n    function burnSynthsOnBehalf(\n        address burnForAddress,\n        address from,\n        uint amount\n    ) external onlySynthetix {\n        _requireCanBurnOnBehalf(burnForAddress, from);\n        _voluntaryBurnSynths(burnForAddress, amount, false);\n    }\n\n    function burnSynthsToTarget(address from) external onlySynthetix {\n        _voluntaryBurnSynths(from, 0, true);\n    }\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external onlySynthetix {\n        _requireCanBurnOnBehalf(burnForAddress, from);\n        _voluntaryBurnSynths(burnForAddress, 0, true);\n    }\n\n    function liquidateDelinquentAccount(\n        address account,\n        uint susdAmount,\n        address liquidator\n    ) external onlySynthetix returns (uint totalRedeemed, uint amountToLiquidate) {\n        // Ensure waitingPeriod and sUSD balance is settled as burning impacts the size of debt pool\n        require(!exchanger().hasWaitingPeriodOrSettlementOwing(liquidator, sUSD), \"sUSD needs to be settled\");\n\n        // Check account is liquidation open\n        require(liquidations().isOpenForLiquidation(account), \"Account not open for liquidation\");\n\n        // require liquidator has enough sUSD\n        require(IERC20(address(synths[sUSD])).balanceOf(liquidator) >= susdAmount, \"Not enough sUSD\");\n\n        uint liquidationPenalty = liquidations().liquidationPenalty();\n\n        // What is their debt in sUSD?\n        (uint debtBalance, uint totalDebtIssued, bool anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(account, sUSD);\n        (uint snxRate, bool snxRateInvalid) = exchangeRates().rateAndInvalid(SNX);\n        _requireRatesNotInvalid(anyRateIsInvalid || snxRateInvalid);\n\n        uint collateralForAccount = _collateral(account);\n        uint amountToFixRatio = liquidations().calculateAmountToFixCollateral(\n            debtBalance,\n            _snxToUSD(collateralForAccount, snxRate)\n        );\n\n        // Cap amount to liquidate to repair collateral ratio based on issuance ratio\n        amountToLiquidate = amountToFixRatio < susdAmount ? amountToFixRatio : susdAmount;\n\n        // what's the equivalent amount of snx for the amountToLiquidate?\n        uint snxRedeemed = _usdToSnx(amountToLiquidate, snxRate);\n\n        // Add penalty\n        totalRedeemed = snxRedeemed.multiplyDecimal(SafeDecimalMath.unit().add(liquidationPenalty));\n\n        // if total SNX to redeem is greater than account's collateral\n        // account is under collateralised, liquidate all collateral and reduce sUSD to burn\n        // an insurance fund will be added to cover these undercollateralised positions\n        if (totalRedeemed > collateralForAccount) {\n            // set totalRedeemed to all collateral\n            totalRedeemed = collateralForAccount;\n\n            // whats the equivalent sUSD to burn for all collateral less penalty\n            amountToLiquidate = _snxToUSD(\n                collateralForAccount.divideDecimal(SafeDecimalMath.unit().add(liquidationPenalty)),\n                snxRate\n            );\n        }\n\n        // burn sUSD from messageSender (liquidator) and reduce account's debt\n        _burnSynths(account, liquidator, amountToLiquidate, debtBalance, totalDebtIssued);\n\n        if (amountToLiquidate == amountToFixRatio) {\n            // Remove liquidation\n            liquidations().removeAccountInLiquidation(account);\n        }\n    }\n\n    function cacheSNXIssuedDebt() external requireSystemActiveIfNotOwner {\n        bytes32[] memory currencyKeys = _availableCurrencyKeysWithOptionalSNX(false);\n        (uint[] memory values, bool isInvalid) = currentSNXIssuedDebtForCurrencies(currencyKeys);\n\n        uint numValues = values.length;\n        uint snxCollateralDebt;\n        for (uint i; i < numValues; i++) {\n            snxCollateralDebt = snxCollateralDebt.add(values[i]);\n        }\n\n        bytes32[] memory debtKeys = new bytes32[](2);\n        debtKeys[0] = CACHED_SNX_ISSUED_DEBT;\n        debtKeys[1] = CACHED_SNX_ISSUED_DEBT_TIMESTAMP;\n        uint[] memory debtValues = new uint[](2);\n        debtValues[0] = snxCollateralDebt;\n        debtValues[1] = block.timestamp;\n\n        IFlexibleStorage store = flexibleStorage();\n        store.setUIntValues(CONTRACT_NAME, currencyKeys, values);\n        store.setUIntValues(CONTRACT_NAME, debtKeys, debtValues);\n        emit DebtCacheUpdated(snxCollateralDebt);\n        emit DebtCacheSynchronised(block.timestamp);\n\n        // (in)validate the cache if necessary\n        _changeDebtCacheValidityIfNeeded(store, isInvalid);\n    }\n\n    function updateSNXIssuedDebtForCurrencies(bytes32[] calldata currencyKeys) external requireSystemActiveIfNotOwner {\n        (uint[] memory rates, bool anyRateInvalid) = exchangeRates().ratesAndInvalidForCurrencies(currencyKeys);\n        _updateSNXIssuedDebtForCurrencies(currencyKeys, rates, anyRateInvalid);\n    }\n\n    function updateSNXIssuedDebtOnExchange(bytes32[2] calldata currencyKeys, uint[2] calldata currencyRates) external {\n        require(msg.sender == address(exchanger()), \"Sender is not Exchanger\");\n\n        bool includesSUSD = currencyKeys[0] == sUSD || currencyKeys[1] == sUSD;\n        uint numKeys = includesSUSD ? 2 : 3;\n\n        bytes32[] memory keys = new bytes32[](numKeys);\n        keys[0] = currencyKeys[0];\n        keys[1] = currencyKeys[1];\n\n        uint[] memory rates = new uint[](numKeys);\n        rates[0] = currencyRates[0];\n        rates[1] = currencyRates[1];\n\n        if (!includesSUSD) {\n            keys[2] = sUSD; // And we'll also update sUSD to account for any fees if it wasn't one of the exchanged currencies\n            rates[2] = SafeDecimalMath.unit();\n        }\n\n        // Exchanges can't invalidate the debt cache, since if a rate is invalid, the exchange will have failed already.\n        _updateSNXIssuedDebtForCurrencies(keys, rates, false);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _requireRatesNotInvalid(bool anyRateIsInvalid) internal pure {\n        require(!anyRateIsInvalid, \"A synth or SNX rate is invalid\");\n    }\n\n    function _requireCanIssueOnBehalf(address issueForAddress, address from) internal view {\n        require(delegateApprovals().canIssueFor(issueForAddress, from), \"Not approved to act on behalf\");\n    }\n\n    function _requireCanBurnOnBehalf(address burnForAddress, address from) internal view {\n        require(delegateApprovals().canBurnFor(burnForAddress, from), \"Not approved to act on behalf\");\n    }\n\n    function _issueSynths(\n        address from,\n        uint amount,\n        bool issueMax\n    ) internal {\n        (uint maxIssuable, uint existingDebt, uint totalSystemDebt, bool anyRateIsInvalid) = _remainingIssuableSynths(from);\n        _requireRatesNotInvalid(anyRateIsInvalid);\n\n        if (!issueMax) {\n            require(amount <= maxIssuable, \"Amount too large\");\n        } else {\n            amount = maxIssuable;\n        }\n\n        // Keep track of the debt they're about to create\n        _addToDebtRegister(from, amount, existingDebt, totalSystemDebt);\n\n        // record issue timestamp\n        _setLastIssueEvent(from);\n\n        // Create their synths\n        synths[sUSD].issue(from, amount);\n\n        // Account for the issued debt in the cache\n        _updateSNXIssuedDebtForSynth(sUSD, SafeDecimalMath.unit());\n\n        // Store their locked SNX amount to determine their fee % for the period\n        _appendAccountIssuanceRecord(from);\n    }\n\n    function _burnSynths(\n        address debtAccount,\n        address burnAccount,\n        uint amount,\n        uint existingDebt,\n        uint totalDebtIssued\n    ) internal returns (uint amountBurnt) {\n        // liquidation requires sUSD to be already settled / not in waiting period\n\n        // If they're trying to burn more debt than they actually owe, rather than fail the transaction, let's just\n        // clear their debt and leave them be.\n        amountBurnt = existingDebt < amount ? existingDebt : amount;\n\n        // Remove liquidated debt from the ledger\n        _removeFromDebtRegister(debtAccount, amountBurnt, existingDebt, totalDebtIssued);\n\n        // synth.burn does a safe subtraction on balance (so it will revert if there are not enough synths).\n        synths[sUSD].burn(burnAccount, amountBurnt);\n\n        // Account for the burnt debt in the cache.\n        _updateSNXIssuedDebtForSynth(sUSD, SafeDecimalMath.unit());\n\n        // Store their debtRatio against a fee period to determine their fee/rewards % for the period\n        _appendAccountIssuanceRecord(debtAccount);\n    }\n\n    // If burning to target, `amount` is ignored, and the correct quantity of sUSD is burnt to reach the target\n    // c-ratio, allowing fees to be claimed. In this case, pending settlements will be skipped as the user\n    // will still have debt remaining after reaching their target.\n    function _voluntaryBurnSynths(\n        address from,\n        uint amount,\n        bool burnToTarget\n    ) internal {\n        if (!burnToTarget) {\n            // If not burning to target, then burning requires that the minimum stake time has elapsed.\n            require(_canBurnSynths(from), \"Minimum stake time not reached\");\n            // First settle anything pending into sUSD as burning or issuing impacts the size of the debt pool\n            (, uint refunded, uint numEntriesSettled) = exchanger().settle(from, sUSD);\n            if (numEntriesSettled > 0) {\n                amount = exchanger().calculateAmountAfterSettlement(from, sUSD, amount, refunded);\n            }\n        }\n\n        (uint existingDebt, uint totalSystemValue, bool anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(from, sUSD);\n        (uint maxIssuableSynthsForAccount, bool snxRateInvalid) = _maxIssuableSynths(from);\n        _requireRatesNotInvalid(anyRateIsInvalid || snxRateInvalid);\n        require(existingDebt > 0, \"No debt to forgive\");\n\n        if (burnToTarget) {\n            amount = existingDebt.sub(maxIssuableSynthsForAccount);\n        }\n\n        uint amountBurnt = _burnSynths(from, from, amount, existingDebt, totalSystemValue);\n\n        // Check and remove liquidation if existingDebt after burning is <= maxIssuableSynths\n        // Issuance ratio is fixed so should remove any liquidations\n        if (existingDebt.sub(amountBurnt) <= maxIssuableSynthsForAccount) {\n            liquidations().removeAccountInLiquidation(from);\n        }\n    }\n\n    function _setLastIssueEvent(address account) internal {\n        // Set the timestamp of the last issueSynths\n        flexibleStorage().setUIntValue(\n            CONTRACT_NAME,\n            keccak256(abi.encodePacked(LAST_ISSUE_EVENT, account)),\n            block.timestamp\n        );\n    }\n\n    function _appendAccountIssuanceRecord(address from) internal {\n        uint initialDebtOwnership;\n        uint debtEntryIndex;\n        (initialDebtOwnership, debtEntryIndex) = synthetixState().issuanceData(from);\n        feePool().appendAccountIssuanceRecord(from, initialDebtOwnership, debtEntryIndex);\n    }\n\n    function _addToDebtRegister(\n        address from,\n        uint amount,\n        uint existingDebt,\n        uint totalDebtIssued\n    ) internal {\n        ISynthetixState state = synthetixState();\n\n        // What will the new total be including the new value?\n        uint newTotalDebtIssued = amount.add(totalDebtIssued);\n\n        // What is their percentage (as a high precision int) of the total debt?\n        uint debtPercentage = amount.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n        // And what effect does this percentage change have on the global debt holding of other issuers?\n        // The delta specifically needs to not take into account any existing debt as it's already\n        // accounted for in the delta from when they issued previously.\n        // The delta is a high precision integer.\n        uint delta = SafeDecimalMath.preciseUnit().sub(debtPercentage);\n\n        // And what does their debt ownership look like including this previous stake?\n        if (existingDebt > 0) {\n            debtPercentage = amount.add(existingDebt).divideDecimalRoundPrecise(newTotalDebtIssued);\n        } else {\n            // If they have no debt, they're a new issuer; record this.\n            state.incrementTotalIssuerCount();\n        }\n\n        // Save the debt entry parameters\n        state.setCurrentIssuanceData(from, debtPercentage);\n\n        // And if we're the first, push 1 as there was no effect to any other holders, otherwise push\n        // the change for the rest of the debt holders. The debt ledger holds high precision integers.\n        if (state.debtLedgerLength() > 0) {\n            state.appendDebtLedgerValue(state.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta));\n        } else {\n            state.appendDebtLedgerValue(SafeDecimalMath.preciseUnit());\n        }\n    }\n\n    function _removeFromDebtRegister(\n        address from,\n        uint debtToRemove,\n        uint existingDebt,\n        uint totalDebtIssued\n    ) internal {\n        ISynthetixState state = synthetixState();\n\n        // What will the new total after taking out the withdrawn amount\n        uint newTotalDebtIssued = totalDebtIssued.sub(debtToRemove);\n\n        uint delta = 0;\n\n        // What will the debt delta be if there is any debt left?\n        // Set delta to 0 if no more debt left in system after user\n        if (newTotalDebtIssued > 0) {\n            // What is the percentage of the withdrawn debt (as a high precision int) of the total debt after?\n            uint debtPercentage = debtToRemove.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n            // And what effect does this percentage change have on the global debt holding of other issuers?\n            // The delta specifically needs to not take into account any existing debt as it's already\n            // accounted for in the delta from when they issued previously.\n            delta = SafeDecimalMath.preciseUnit().add(debtPercentage);\n        }\n\n        // Are they exiting the system, or are they just decreasing their debt position?\n        if (debtToRemove == existingDebt) {\n            state.setCurrentIssuanceData(from, 0);\n            state.decrementTotalIssuerCount();\n        } else {\n            // What percentage of the debt will they be left with?\n            uint newDebt = existingDebt.sub(debtToRemove);\n            uint newDebtPercentage = newDebt.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n            // Store the debt percentage and debt ledger as high precision integers\n            state.setCurrentIssuanceData(from, newDebtPercentage);\n        }\n\n        // Update our cumulative ledger. This is also a high precision integer.\n        state.appendDebtLedgerValue(state.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta));\n    }\n\n    function _changeDebtCacheValidityIfNeeded(IFlexibleStorage store, bool currentlyInvalid) internal {\n        bool cacheInvalid = _cacheIsInvalid(store);\n        if (cacheInvalid != currentlyInvalid) {\n            store.setBoolValue(CONTRACT_NAME, CACHED_SNX_ISSUED_DEBT_INVALID, currentlyInvalid);\n            emit DebtCacheValidityChanged(currentlyInvalid);\n        }\n    }\n\n    function _updateSNXIssuedDebtForCurrencies(\n        bytes32[] memory currencyKeys,\n        uint[] memory currentRates,\n        bool anyRateIsInvalid\n    ) internal {\n        uint numKeys = currencyKeys.length;\n        require(numKeys == currentRates.length, \"Input array lengths differ\");\n\n        IFlexibleStorage store = flexibleStorage();\n\n        // Retrieve previously-cached values and update them\n        uint[] memory cachedValues = store.getUIntValues(CONTRACT_NAME, currencyKeys);\n        uint[] memory currentValues = _issuedSynthValues(currencyKeys, currentRates);\n        store.setUIntValues(CONTRACT_NAME, currencyKeys, currentValues);\n\n        // Compute the difference and apply it to the snapshot\n        uint cachedSum;\n        uint currentSum;\n        for (uint i = 0; i < numKeys; i++) {\n            cachedSum = cachedSum.add(cachedValues[i]);\n            currentSum = currentSum.add(currentValues[i]);\n        }\n\n        if (cachedSum != currentSum) {\n            uint debt = store.getUIntValue(CONTRACT_NAME, CACHED_SNX_ISSUED_DEBT);\n\n            // This requirement should never fail, as the total debt snapshot is the sum of the individual synth\n            // debt snapshots.\n            require(cachedSum <= debt, \"Cached synth sum exceeds total debt\");\n            debt = debt.sub(cachedSum).add(currentSum);\n            store.setUIntValue(CONTRACT_NAME, CACHED_SNX_ISSUED_DEBT, debt);\n            emit DebtCacheUpdated(debt);\n        }\n\n        // A partial update can invalidate the debt cache, but a full snapshot must be performed in order\n        // to re-validate it.\n        if (anyRateIsInvalid) {\n            _changeDebtCacheValidityIfNeeded(store, anyRateIsInvalid);\n        }\n    }\n\n    function _updateSNXIssuedDebtForSynth(bytes32 currencyKey, uint currencyRate) internal {\n        bytes32[] memory synthKeyArray = new bytes32[](1);\n        synthKeyArray[0] = currencyKey;\n        uint[] memory synthRateArray = new uint[](1);\n        synthRateArray[0] = currencyRate;\n        _updateSNXIssuedDebtForCurrencies(synthKeyArray, synthRateArray, false);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    function _onlySynthetix() internal view {\n        require(msg.sender == address(synthetix()), \"Issuer: Only the synthetix contract can perform this action\");\n    }\n\n    modifier onlySynthetix() {\n        _onlySynthetix(); // Use an internal function to save code size.\n        _;\n    }\n\n    function _requireSystemActiveIfNotOwner() internal view {\n        if (msg.sender != owner) {\n            systemStatus().requireSystemActive();\n        }\n    }\n\n    modifier requireSystemActiveIfNotOwner() {\n        _requireSystemActiveIfNotOwner();\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event SynthAdded(bytes32 currencyKey, address synth);\n    event SynthRemoved(bytes32 currencyKey, address synth);\n    event DebtCacheUpdated(uint cachedDebt);\n    event DebtCacheSynchronised(uint timestamp);\n    event DebtCacheValidityChanged(bool indexed isInvalid);\n}\n\n    ","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DebtCacheSynchronised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cachedDebt\",\"type\":\"uint256\"}],\"name\":\"DebtCacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isInvalid\",\"type\":\"bool\"}],\"name\":\"DebtCacheValidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"synth\",\"type\":\"address\"}],\"name\":\"SynthAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"synth\",\"type\":\"address\"}],\"name\":\"SynthRemoved\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADDRESSES_FROM_RESOLVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ISynth\",\"name\":\"synth\",\"type\":\"address\"}],\"name\":\"addSynth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anySynthOrSNXRateIsInvalid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"anyRateInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableCurrencyKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSynthCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableSynths\",\"outputs\":[{\"internalType\":\"contract ISynth\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnForAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnSynthsOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"burnSynthsToTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnForAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"burnSynthsToTargetOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cacheSNXIssuedDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"cachedSNXIssuedDebtForCurrencies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"snxIssuedDebts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cachedSNXIssuedDebtInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cachedDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canBurnSynths\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"collateralisationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cratio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"collateralisationRatioAndAnyRatesInvalid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cratio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSNXIssuedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snxIssuedDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"currentSNXIssuedDebtForCurrencies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"snxIssuedDebts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"debtBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtCacheIsStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtSnapshotStaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getResolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[24]\",\"name\":\"addressesRequired\",\"type\":\"bytes32[24]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuanceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"issueMaxSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"issueForAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"issueMaxSynthsOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"issueForAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueSynthsOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastIssueEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"susdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"liquidateDelinquentAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToLiquidate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"maxIssuableSynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"purgeDebtCacheForSynth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"remainingIssuableSynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxIssuable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSystemDebt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"removeSynth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolverAndSyncCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"synths\",\"outputs\":[{\"internalType\":\"contract ISynth\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"synthsByAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"excludeEtherCollateral\",\"type\":\"bool\"}],\"name\":\"totalIssuedSynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalIssued\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"transferableSynthetixAndAnyRateIsInvalid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transferable\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"updateSNXIssuedDebtForCurrencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[2]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"currencyRates\",\"type\":\"uint256[2]\"}],\"name\":\"updateSNXIssuedDebtOnExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Issuer","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000de910777c787903f78c89e7a0bf7f4c435cbb1fe00000000000000000000000061166014e3f04e40c953fe4eab9d9e40863c83ae","EVMVersion":"Default","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}