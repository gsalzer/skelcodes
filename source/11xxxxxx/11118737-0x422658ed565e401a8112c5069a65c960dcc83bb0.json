{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Easy Chain. <https://easychain.tech>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n\r\nstruct ProtocolBalance {\r\n    ProtocolMetadata metadata;\r\n    AdapterBalance[] adapterBalances;\r\n}\r\n\r\n\r\nstruct ProtocolMetadata {\r\n    string name;\r\n    string description;\r\n    string websiteURL;\r\n    string iconURL;\r\n    uint256 version;\r\n}\r\n\r\n\r\nstruct AdapterBalance {\r\n    AdapterMetadata metadata;\r\n    FullTokenBalance[] balances;\r\n}\r\n\r\n\r\nstruct AdapterMetadata {\r\n    address adapterAddress;\r\n    string adapterType; // \"Asset\", \"Debt\"\r\n}\r\n\r\n\r\n// token and its underlying tokens (if exist) balances\r\nstruct FullTokenBalance {\r\n    TokenBalance base;\r\n    TokenBalance[] underlying;\r\n}\r\n\r\n\r\nstruct TokenBalance {\r\n    TokenMetadata metadata;\r\n    uint256 amount;\r\n}\r\n\r\n\r\n// ERC20-style token metadata\r\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;\r\n    string tokenType;  // \"ERC20\" by default\r\n    uint256 rate;  // price per full share (1e18)\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n     * struct Component {\r\n     *     address token;    // Address of token contract\r\n     *     string tokenType; // Token type (\"ERC20\" by default)\r\n     *     uint256 rate;     // Price per share (1e18)\r\n     * }\r\n     */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Protocol adapter interface.\r\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface ProtocolAdapter {\r\n\r\n    /**\r\n     * @dev MUST return \"Asset\" or \"Debt\".\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function adapterType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return token type (default is \"ERC20\").\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function tokenType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\r\n     */\r\n    function getBalance(address token, address account) external view returns (uint256);\r\n}\r\n\r\n\r\nstruct TypedToken {\r\n    string tokenType;\r\n    address token;\r\n}\r\n\r\ninterface IBerezkaTokenAdapterGovernance {\r\n    \r\n    function listTokens() external view returns (TypedToken[] memory);\r\n\r\n    function listProtocols() external view returns (address[] memory);\r\n\r\n    function listEthProtocols() external view returns (address[] memory);\r\n\r\n    function listProducts() external view returns (address[] memory);\r\n\r\n    function getVaults(address _token) external view returns (address[] memory);\r\n}\r\n\r\ninterface IBerezkaTokenAdapterStakingGovernance {\r\n    \r\n    function listStakings() external view returns (address[] memory);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter for Berezka DAO.\r\n * @dev Implementation of TokenAdapter interface.\r\n * @author Vasin Denis <denis.vasin@easychain.tech>\r\n */\r\ncontract BerezkaTokenAdapter is TokenAdapter {\r\n\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    string internal constant ERC20_TOKEN = \"ERC20\";\r\n\r\n    IBerezkaTokenAdapterGovernance immutable private governance;\r\n    IBerezkaTokenAdapterStakingGovernance immutable private stakingGovernance;\r\n\r\n    constructor(address _governance, address _stakingGovernance) public {\r\n        governance = IBerezkaTokenAdapterGovernance(_governance);\r\n        stakingGovernance = IBerezkaTokenAdapterStakingGovernance(_stakingGovernance);   \r\n    }\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token info.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) \r\n        external \r\n        view \r\n        override \r\n        returns (TokenMetadata memory) \r\n    {\r\n        return TokenMetadata({\r\n            token: token,\r\n            name: ERC20(token).name(),\r\n            symbol: ERC20(token).symbol(),\r\n            decimals: ERC20(token).decimals()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return Array of Component structs with underlying tokens rates for the given token.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getComponents(address token)\r\n        external\r\n        view\r\n        override\r\n        returns (Component[] memory)\r\n    {\r\n        address[] memory vaults = governance.getVaults(token);\r\n        TypedToken[] memory assets = governance.listTokens();\r\n        address[] memory debtAdapters = governance.listProtocols();\r\n        address[] memory stakingAdapters = stakingGovernance.listStakings();\r\n        uint256 length = assets.length;\r\n        uint256 totalSupply = ERC20(token).totalSupply();\r\n\r\n        Component[] memory underlyingTokens = new Component[](1 + length);\r\n        \r\n        // Handle ERC20 assets + debt\r\n        for (uint256 i = 0; i < length; i++) {\r\n            Component memory tokenComponent =\r\n                _getTokenComponents(\r\n                    assets[i].token, \r\n                    assets[i].tokenType, \r\n                    vaults, \r\n                    debtAdapters, \r\n                    stakingAdapters,\r\n                    totalSupply\r\n                );\r\n            underlyingTokens[i] = tokenComponent;\r\n        }\r\n\r\n        // Handle ETH\r\n        {\r\n            Component memory ethComponent = _getEthComponents(vaults, totalSupply);\r\n            underlyingTokens[length] = ethComponent;\r\n        }\r\n        \r\n        return underlyingTokens;\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    function _getEthComponents(\r\n        address[] memory _vaults,\r\n        uint256 _totalSupply\r\n    )\r\n        internal\r\n        view\r\n        returns (Component memory)\r\n    {\r\n        address[] memory debtsInEth = governance.listEthProtocols();\r\n\r\n        uint256 ethBalance = 0;\r\n        uint256 ethDebt = 0;\r\n\r\n        // Compute negative amount for a given asset using all debt adapters\r\n        for (uint256 j = 0; j < _vaults.length; j++) {\r\n            address vault = _vaults[j];\r\n            ethBalance += vault.balance;\r\n            ethDebt += _computeDebt(debtsInEth, ETH, vault);\r\n        }\r\n\r\n        return Component({\r\n            token: ETH,\r\n            tokenType: ERC20_TOKEN,\r\n            rate: (ethBalance * 1e18 / _totalSupply) - (ethDebt * 1e18 / _totalSupply)\r\n        });\r\n    }\r\n\r\n    function _getTokenComponents(\r\n        address _asset,\r\n        string memory _type,\r\n        address[] memory _vaults,\r\n        address[] memory _debtAdapters,\r\n        address[] memory _stakingAdapters,\r\n        uint256 _totalSupply\r\n    ) \r\n        internal\r\n        view\r\n        returns (Component memory)\r\n    {\r\n        uint256 componentBalance = 0;\r\n        uint256 componentStakingBalance = 0;\r\n        uint256 componentDebt = 0;\r\n\r\n        // Compute positive amount for a given asset\r\n        uint256 vaultsLength = _vaults.length;\r\n        for (uint256 j = 0; j < vaultsLength; j++) {\r\n            address vault = _vaults[j];\r\n            componentBalance += ERC20(_asset).balanceOf(vault);\r\n            componentStakingBalance += _computeStakingBalance(_stakingAdapters, _asset, vault);\r\n            componentDebt += _computeDebt(_debtAdapters, _asset, vault);\r\n        }\r\n\r\n        // Asset amount\r\n        return(Component({\r\n            token: _asset,\r\n            tokenType: _type,\r\n            rate: (componentBalance * 1e18 / _totalSupply) + (componentStakingBalance * 1e18 / _totalSupply) - (componentDebt * 1e18 / _totalSupply)\r\n        }));\r\n    }\r\n\r\n    function _computeDebt(\r\n        address[] memory _debtAdapters,\r\n        address _asset,\r\n        address _vault\r\n    ) \r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Compute negative amount for a given asset using all debt adapters\r\n        uint256 componentDebt = 0;\r\n        uint256 debtsLength = _debtAdapters.length;\r\n        for (uint256 k = 0; k < debtsLength; k++) {\r\n            ProtocolAdapter debtAdapter = ProtocolAdapter(_debtAdapters[k]);\r\n            try debtAdapter.getBalance(_asset, _vault) returns (uint256 _amount) {\r\n                componentDebt += _amount;\r\n            } catch {} // solhint-disable-line no-empty-blocks\r\n        }\r\n        return componentDebt;\r\n    }\r\n\r\n    function _computeStakingBalance(\r\n        address[] memory _stakingAdapters,\r\n        address _asset,\r\n        address _vault\r\n    ) \r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Compute positive staking amount for a given asset using all staking adapters\r\n        uint256 componentStakingBalance = 0;\r\n        uint256 stakingsLength = _stakingAdapters.length;\r\n        for (uint256 k = 0; k < stakingsLength; k++) {\r\n            ProtocolAdapter stakingAdapter = ProtocolAdapter(_stakingAdapters[k]);\r\n            try stakingAdapter.getBalance(_asset, _vault) returns (uint256 _amount) {\r\n                componentStakingBalance += _amount;\r\n            } catch {} // solhint-disable-line no-empty-blocks\r\n        }\r\n        return componentStakingBalance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingGovernance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BerezkaTokenAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bc7166dee7b0d157fa949d4b7c0cc75982f3ae140000000000000000000000008f8a4d60dc8ce809ca5c37d71295cf1bc06db7c7","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aca4787b0095b7c4e40185653b6cdc33aebf488d3bcaf268e130ee94b3447434"}]}