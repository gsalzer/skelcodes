{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ILendToAaveMigrator {\r\n  function migrationStarted() external view returns (bool);\r\n\r\n  function LEND() external view returns (IERC20);\r\n\r\n  function AAVE() external view returns (IERC20);\r\n\r\n  function migrateFromLEND(uint256 amount) external;\r\n}\r\n\r\n\r\n/**\r\n * @title SwapToAaveAndReturnHelper\r\n * @notice Swaps LEND to AAVE and sends the AAVE balance to the configured `RECEIVER`\r\n * @author Aave\r\n **/\r\ncontract SwapToAaveAndReturnHelper {\r\n  address public immutable RECEIVER;\r\n  ILendToAaveMigrator public immutable MIGRATOR;\r\n\r\n  constructor(ILendToAaveMigrator migrator, address receiver) public {\r\n    RECEIVER = receiver;\r\n    MIGRATOR = migrator;\r\n  }\r\n\r\n  /**\r\n   * @dev Swap the whole LEND balance of this contract, migrates to AAVE and sends to `RECEIVER`\r\n   **/\r\n  function swapAndReturn() public {\r\n    IERC20 lend = MIGRATOR.LEND();\r\n    IERC20 aave = MIGRATOR.AAVE();\r\n    uint256 lendBalance = lend.balanceOf(address(this));\r\n\r\n    lend.approve(address(MIGRATOR), lendBalance);\r\n    MIGRATOR.migrateFromLEND(lendBalance);\r\n    aave.transfer(RECEIVER, aave.balanceOf(address(this)));\r\n  }\r\n\r\n  /**\r\n   * @dev Rescue any token sent to this contract, only callable by `RECEIVER`\r\n   **/\r\n  function rescueToken(IERC20 token) public {\r\n    require(msg.sender == RECEIVER, 'ONLY_BY_RECEIVER');\r\n\r\n    token.transfer(RECEIVER, token.balanceOf(address(this)));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILendToAaveMigrator\",\"name\":\"migrator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MIGRATOR\",\"outputs\":[{\"internalType\":\"contract ILendToAaveMigrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndReturn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwapToAaveAndReturnHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000317625234562b1526ea2fac4030ea499c5291de4000000000000000000000000cc66ff6ebc4e12d0454f81f9cc9145a41d9f5ff0","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e0c8abef5b5751e253f90f9d6b834672e6d51bda87e611e4a1f46ee8881c85c7"}]}