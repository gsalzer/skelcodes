{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/reflexer/ReflexerDebtAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport { ProtocolAdapter } from \\\"../ProtocolAdapter.sol\\\";\\nimport { ReflexerAdapter } from \\\"./ReflexerAdapter.sol\\\";\\n\\n\\n/**\\n * @dev SAFEEngine contract interface.\\n * Only the functions required for ReflexerDebtAdapter contract are added.\\n * The SAFEEngine contract is available here\\n * github.com/reflexer-labs/geb/blob/master/src/SAFEEngine.sol.\\n */\\ninterface SAFEEngine {\\n    function safes(bytes32, address) external view returns (uint256, uint256);\\n    function collateralTypes(bytes32) external view returns (uint256, uint256);\\n}\\n\\n\\n/**\\n * @dev TaxCollector contract interface.\\n * Only the functions required for ReflexerDebtAdapter contract are added.\\n * The TaxCollector contract is available here\\n * github.com/makerdao/dss/blob/master/src/taxCollector.sol.\\n */\\ninterface TaxCollector {\\n    function collateralTypes(bytes32) external view returns (uint256, uint256);\\n    function globalStabilityFee() external view returns (uint256);\\n}\\n\\n\\n/**\\n * @dev GebSafeManager contract interface.\\n * Only the functions required for ReflexerDebtAdapter contract are added.\\n * The GebSafeManager contract is available here\\n * github.com/reflexer-labs/geb-safe-manager/blob/master/src/GebSafeManager.sol.\\n */\\ninterface GebSafeManager {\\n    function firstSAFEID(address) external view returns (uint256);\\n    function safeList(uint256) external view returns (uint256, uint256);\\n    function safes(uint256) external view returns (address);\\n    function collateralTypes(uint256) external view returns (bytes32);\\n}\\n\\n\\n/**\\n * @title Debt adapter for Reflexer protocol.\\n * @dev Implementation of ProtocolAdapter interface.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ncontract ReflexerDebtAdapter is ProtocolAdapter, ReflexerAdapter {\\n\\n    string public constant override adapterType = \\\"Debt\\\";\\n\\n    string public constant override tokenType = \\\"ERC20\\\";\\n\\n    /**\\n     * @return Amount of debt of the given account for the protocol.\\n     * @dev Implementation of ProtocolAdapter interface function.\\n     */\\n    function getBalance(address, address account) external view override returns (uint256) {\\n        GebSafeManager manager = GebSafeManager(MANAGER);\\n        SAFEEngine safeEngine = SAFEEngine(SAFE_ENGINE);\\n        TaxCollector taxCollector = TaxCollector(TAX_COLLECTOR);\\n        uint256 id = manager.firstSAFEID(account);\\n        bytes32 collateralType;\\n        uint256 generatedDebt;\\n        uint256 accumulatedRate;\\n        uint256 debtAmount;\\n        uint256 updateTime;\\n        uint256 totalValue = 0;\\n\\n        while (id > 0) {\\n            collateralType = manager.collateralTypes(id);\\n            (, generatedDebt) = safeEngine.safes(collateralType, manager.safes(id));\\n            (, id) = manager.safeList(id);\\n            (, accumulatedRate) = safeEngine.collateralTypes(collateralType);\\n            (debtAmount, updateTime) = taxCollector.collateralTypes(collateralType);\\n            uint256 currentRate = rmultiply(\\n                rpow(\\n                    addition(taxCollector.globalStabilityFee(), debtAmount),\\n                    // solhint-disable-next-line not-rely-on-time\\n                    now - updateTime,\\n                    RAY\\n                ),\\n                accumulatedRate\\n            );\\n\\n            totalValue = totalValue + rmultiply(generatedDebt, currentRate);\\n        }\\n\\n        return totalValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Protocol adapter interface.\\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ninterface ProtocolAdapter {\\n\\n    /**\\n     * @dev MUST return \\\"Asset\\\" or \\\"Debt\\\".\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function adapterType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return token type (default is \\\"ERC20\\\").\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function tokenType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\\n     */\\n    function getBalance(address token, address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/reflexer/ReflexerAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Reflexer adapter abstract contract.\\n * @dev Base contract for Reflexer adapters.\\n * Math function are taken from the SAFEEngine contract available here\\n * github.com/reflexer-labs/geb/blob/master/src/SAFEEngine.sol.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\nabstract contract ReflexerAdapter {\\n    address internal constant SAFE_ENGINE = 0xCC88a9d330da1133Df3A7bD823B95e52511A6962;\\n    address internal constant TAX_COLLECTOR = 0xcDB05aEda142a1B0D6044C09C64e4226c1a281EB;\\n    address internal constant MANAGER = 0xEfe0B4cA532769a3AE758fD82E1426a03A94F185;\\n\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch x case 0 {switch n case 0 {z := b} default {z := 0}}\\n            default {\\n                switch mod(n, 2) case 0 { z := b } default { z := x }\\n                let half := div(b, 2)  // for rounding.\\n                for { n := div(n, 2) } n { n := div(n,2) } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) { revert(0,0) }\\n                    x := div(xxRound, b)\\n                    if mod(n,2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) { revert(0,0) }\\n                        z := div(zxRound, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function rmultiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"ReflexerAdapter/rmul-overflow\\\");\\n        z = z / RAY;\\n    }\\n\\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ReflexerAdapter/multiply-uint-uint-overflow\\\");\\n    }\\n\\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x + y;\\n        require(z >= x, \\\"ReflexerAdapter/add-uint-uint-overflow\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"adapterType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ReflexerDebtAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a05983d471b64ea864c2408bd18c4c7ab4cef435bc1b84b5ee87ed47ffa58ad7"}]}