{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n██╗   ██╗██╗  ████████╗██╗██╗███╗   ███╗ █████╗ ████████╗███████╗    ███████╗███████╗████████╗    ██████╗  ██████╗ ██╗     ██╗      █████╗ ██████╗ \r\n██║   ██║██║  ╚══██╔══╝██║██║████╗ ████║██╔══██╗╚══██╔══╝██╔════╝    ██╔════╝██╔════╝╚══██╔══╝    ██╔══██╗██╔═══██╗██║     ██║     ██╔══██╗██╔══██╗\r\n██║   ██║██║     ██║   ██║██║██╔████╔██║███████║   ██║   █████╗      ███████╗█████╗     ██║       ██║  ██║██║   ██║██║     ██║     ███████║██████╔╝\r\n██║   ██║██║     ██║   ██║██║██║╚██╔╝██║██╔══██║   ██║   ██╔══╝      ╚════██║██╔══╝     ██║       ██║  ██║██║   ██║██║     ██║     ██╔══██║██╔══██╗\r\n╚██████╔╝███████╗██║   ██║██║██║ ╚═╝ ██║██║  ██║   ██║   ███████╗    ███████║███████╗   ██║       ██████╔╝╚██████╔╝███████╗███████╗██║  ██║██║  ██║\r\n ╚═════╝ ╚══════╝╚═╝   ╚═╝╚═╝╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝    ╚══════╝╚══════╝   ╚═╝       ╚═════╝  ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝\r\n                                                                                                                                                   \r\n\r\nA project forked from Empty Set Dollar and Dynamic Set Dollar.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n    Copyright 2019 dYdX Trading Inc.\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n/**\r\n * @title Decimal\r\n * @author dYdX\r\n *\r\n * Library that defines a fixed-point number with 18 decimal places.\r\n */\r\nlibrary Decimal {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // ============ Structs ============\r\n\r\n\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n\r\n    // ============ Static Functions ============\r\n\r\n    function zero()\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: 0 });\r\n    }\r\n\r\n    function one()\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: BASE });\r\n    }\r\n\r\n    function from(\r\n        uint256 a\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: a.mul(BASE) });\r\n    }\r\n\r\n    function ratio(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: getPartial(a, BASE, b) });\r\n    }\r\n\r\n    // ============ Self Functions ============\r\n\r\n    function add(\r\n        D256 memory self,\r\n        uint256 b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: self.value.add(b.mul(BASE)) });\r\n    }\r\n\r\n    function sub(\r\n        D256 memory self,\r\n        uint256 b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: self.value.sub(b.mul(BASE)) });\r\n    }\r\n\r\n    function sub(\r\n        D256 memory self,\r\n        uint256 b,\r\n        string memory reason\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\r\n    }\r\n\r\n    function mul(\r\n        D256 memory self,\r\n        uint256 b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: self.value.mul(b) });\r\n    }\r\n\r\n    function div(\r\n        D256 memory self,\r\n        uint256 b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: self.value.div(b) });\r\n    }\r\n\r\n    function pow(\r\n        D256 memory self,\r\n        uint256 b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        if (b == 0) {\r\n            return from(1);\r\n        }\r\n\r\n        D256 memory temp = D256({ value: self.value });\r\n        for (uint256 i = 1; i < b; i++) {\r\n            temp = mul(temp, self);\r\n        }\r\n\r\n        return temp;\r\n    }\r\n\r\n    function add(\r\n        D256 memory self,\r\n        D256 memory b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: self.value.add(b.value) });\r\n    }\r\n\r\n    function sub(\r\n        D256 memory self,\r\n        D256 memory b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: self.value.sub(b.value) });\r\n    }\r\n\r\n    function sub(\r\n        D256 memory self,\r\n        D256 memory b,\r\n        string memory reason\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: self.value.sub(b.value, reason) });\r\n    }\r\n\r\n    function mul(\r\n        D256 memory self,\r\n        D256 memory b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: getPartial(self.value, b.value, BASE) });\r\n    }\r\n\r\n    function div(\r\n        D256 memory self,\r\n        D256 memory b\r\n    )\r\n    internal\r\n    pure\r\n    returns (D256 memory)\r\n    {\r\n        return D256({ value: getPartial(self.value, BASE, b.value) });\r\n    }\r\n\r\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\r\n        return self.value == b.value;\r\n    }\r\n\r\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\r\n        return compareTo(self, b) == 2;\r\n    }\r\n\r\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\r\n        return compareTo(self, b) == 0;\r\n    }\r\n\r\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\r\n        return compareTo(self, b) > 0;\r\n    }\r\n\r\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\r\n        return compareTo(self, b) < 2;\r\n    }\r\n\r\n    function isZero(D256 memory self) internal pure returns (bool) {\r\n        return self.value == 0;\r\n    }\r\n\r\n    function asUint256(D256 memory self) internal pure returns (uint256) {\r\n        return self.value.div(BASE);\r\n    }\r\n\r\n    // ============ Core Methods ============\r\n\r\n    function getPartial(\r\n        uint256 target,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    )\r\n    private\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return target.mul(numerator).div(denominator);\r\n    }\r\n\r\n    function compareTo(\r\n        D256 memory a,\r\n        D256 memory b\r\n    )\r\n    private\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if (a.value == b.value) {\r\n            return 1;\r\n        }\r\n        return a.value > b.value ? 2 : 0;\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\nlibrary Constants {\r\n    /* Chain */\r\n    uint256 private constant CHAIN_ID = 1; // Mainnet\r\n\r\n    /* Bootstrapping */\r\n    uint256 private constant BOOTSTRAPPING_PERIOD = 24; // 24 epochs\r\n    uint256 private constant BOOTSTRAPPING_PRICE = 340e16; // (targeting 10% inflation)\r\n\r\n    /* Oracle */\r\n    address private constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    uint256 private constant ORACLE_RESERVE_MINIMUM = 1e10; // 10,000 USDC\r\n\r\n    /* Bonding */\r\n    uint256 private constant INITIAL_STAKE_MULTIPLE = 1e6; // 100 ULD -> 100M ULDS\r\n\r\n    /* Epoch */\r\n    struct EpochStrategy {\r\n        uint256 offset;\r\n        uint256 start;\r\n        uint256 period;\r\n    }\r\n\r\n    uint256 private constant EPOCH_OFFSET = 0;\r\n    uint256 private constant EPOCH_START = 1609430400;\r\n    uint256 private constant EPOCH_PERIOD = 3600;\r\n\r\n    /* Governance */\r\n    uint256 private constant GOVERNANCE_PERIOD = 72;\r\n    uint256 private constant GOVERNANCE_QUORUM = 33e16; // 33%\r\n    uint256 private constant GOVERNANCE_SUPER_MAJORITY = 66e16; // 66%\r\n    uint256 private constant GOVERNANCE_EMERGENCY_DELAY = 12; // 12 epochs\r\n\r\n    /* DAO */\r\n    uint256 private constant ADVANCE_INCENTIVE = 1e20; // 100 ULD\r\n    uint256 private constant DAO_EXIT_LOCKUP_EPOCHS = 48; // 48 epochs fluid\r\n\r\n    /* Pool */\r\n    uint256 private constant POOL_EXIT_LOCKUP_EPOCHS = 24; // 24 epochs fluid\r\n\r\n    /* Market */\r\n    uint256 private constant COUPON_EXPIRATION = 1440;\r\n    uint256 private constant DEBT_RATIO_CAP = 35e16; // 35%\r\n\r\n    /* Regulator */\r\n    uint256 private constant SUPPLY_CHANGE_DIVISOR = 24e18; // 24\r\n    uint256 private constant SUPPLY_CHANGE_LIMIT = 15e16; // 15%\r\n    uint256 private constant ORACLE_POOL_RATIO = 40; // 40%\r\n\r\n    /**\r\n     * Getters\r\n     */\r\n    function getUsdcAddress() internal pure returns (address) {\r\n        return USDC;\r\n    }\r\n\r\n    function getOracleReserveMinimum() internal pure returns (uint256) {\r\n        return ORACLE_RESERVE_MINIMUM;\r\n    }\r\n\r\n    function getEpochStrategy() internal pure returns (EpochStrategy memory) {\r\n        return EpochStrategy({\r\n            offset: EPOCH_OFFSET,\r\n            start: EPOCH_START,\r\n            period: EPOCH_PERIOD\r\n        });\r\n    }\r\n\r\n    function getInitialStakeMultiple() internal pure returns (uint256) {\r\n        return INITIAL_STAKE_MULTIPLE;\r\n    }\r\n\r\n    function getBootstrappingPeriod() internal pure returns (uint256) {\r\n        return BOOTSTRAPPING_PERIOD;\r\n    }\r\n\r\n    function getBootstrappingPrice() internal pure returns (Decimal.D256 memory) {\r\n        return Decimal.D256({value: BOOTSTRAPPING_PRICE});\r\n    }\r\n\r\n    function getGovernancePeriod() internal pure returns (uint256) {\r\n        return GOVERNANCE_PERIOD;\r\n    }\r\n\r\n    function getGovernanceQuorum() internal pure returns (Decimal.D256 memory) {\r\n        return Decimal.D256({value: GOVERNANCE_QUORUM});\r\n    }\r\n\r\n    function getGovernanceSuperMajority() internal pure returns (Decimal.D256 memory) {\r\n        return Decimal.D256({value: GOVERNANCE_SUPER_MAJORITY});\r\n    }\r\n\r\n    function getGovernanceEmergencyDelay() internal pure returns (uint256) {\r\n        return GOVERNANCE_EMERGENCY_DELAY;\r\n    }\r\n\r\n    function getAdvanceIncentive() internal pure returns (uint256) {\r\n        return ADVANCE_INCENTIVE;\r\n    }\r\n\r\n    function getDAOExitLockupEpochs() internal pure returns (uint256) {\r\n        return DAO_EXIT_LOCKUP_EPOCHS;\r\n    }\r\n\r\n    function getPoolExitLockupEpochs() internal pure returns (uint256) {\r\n        return POOL_EXIT_LOCKUP_EPOCHS;\r\n    }\r\n\r\n    function getCouponExpiration() internal pure returns (uint256) {\r\n        return COUPON_EXPIRATION;\r\n    }\r\n\r\n    function getDebtRatioCap() internal pure returns (Decimal.D256 memory) {\r\n        return Decimal.D256({value: DEBT_RATIO_CAP});\r\n    }\r\n\r\n    function getSupplyChangeLimit() internal pure returns (Decimal.D256 memory) {\r\n        return Decimal.D256({value: SUPPLY_CHANGE_LIMIT});\r\n    }\r\n\r\n    function getSupplyChangeDivisor() internal pure returns (Decimal.D256 memory) {\r\n        return Decimal.D256({value: SUPPLY_CHANGE_DIVISOR});\r\n    }\r\n\r\n    function getOraclePoolRatio() internal pure returns (uint256) {\r\n        return ORACLE_POOL_RATIO;\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint256) {\r\n        return CHAIN_ID;\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Curve {\r\n    using SafeMath for uint256;\r\n    using Decimal for Decimal.D256;\r\n\r\n    function calculateCouponPremium(\r\n        uint256 totalSupply,\r\n        uint256 totalDebt,\r\n        uint256 amount\r\n    ) internal pure returns (uint256) {\r\n        return effectivePremium(totalSupply, totalDebt, amount).mul(amount).asUint256();\r\n    }\r\n\r\n    function effectivePremium(\r\n        uint256 totalSupply,\r\n        uint256 totalDebt,\r\n        uint256 amount\r\n    ) private pure returns (Decimal.D256 memory) {\r\n        Decimal.D256 memory debtRatio = Decimal.ratio(totalDebt, totalSupply);\r\n        Decimal.D256 memory debtRatioUpperBound = Constants.getDebtRatioCap();\r\n\r\n        uint256 totalSupplyEnd = totalSupply.sub(amount);\r\n        uint256 totalDebtEnd = totalDebt.sub(amount);\r\n        Decimal.D256 memory debtRatioEnd = Decimal.ratio(totalDebtEnd, totalSupplyEnd);\r\n\r\n        if (debtRatio.greaterThan(debtRatioUpperBound)) {\r\n            if (debtRatioEnd.greaterThan(debtRatioUpperBound)) {\r\n                return curve(debtRatioUpperBound);\r\n            }\r\n\r\n            Decimal.D256 memory premiumCurve = curveMean(debtRatioEnd, debtRatioUpperBound);\r\n            Decimal.D256 memory premiumCurveDelta = debtRatioUpperBound.sub(debtRatioEnd);\r\n            Decimal.D256 memory premiumFlat = curve(debtRatioUpperBound);\r\n            Decimal.D256 memory premiumFlatDelta = debtRatio.sub(debtRatioUpperBound);\r\n            return (premiumCurve.mul(premiumCurveDelta)).add(premiumFlat.mul(premiumFlatDelta))\r\n                .div(premiumCurveDelta.add(premiumFlatDelta));\r\n        }\r\n\r\n        return curveMean(debtRatioEnd, debtRatio);\r\n    }\r\n\r\n    // 1/(3(1-R)^2)-1/3\r\n    function curve(Decimal.D256 memory debtRatio) private pure returns (Decimal.D256 memory) {\r\n        return Decimal.one().div(\r\n            Decimal.from(3).mul((Decimal.one().sub(debtRatio)).pow(2))\r\n        ).sub(Decimal.ratio(1, 3));\r\n    }\r\n\r\n    // 1/(3(1-R)(1-R'))-1/3\r\n    function curveMean(\r\n        Decimal.D256 memory lower,\r\n        Decimal.D256 memory upper\r\n    ) private pure returns (Decimal.D256 memory) {\r\n        if (lower.equals(upper)) {\r\n            return curve(lower);\r\n        }\r\n\r\n        return Decimal.one().div(\r\n            Decimal.from(3).mul(Decimal.one().sub(upper)).mul(Decimal.one().sub(lower))\r\n        ).sub(Decimal.ratio(1, 3));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract IDollar is IERC20 {\r\n    function burn(uint256 amount) public;\r\n    function burnFrom(address account, uint256 amount) public;\r\n    function mint(address account, uint256 amount) public returns (bool);\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract IOracle {\r\n    function setup() public;\r\n    function capture() public returns (Decimal.D256 memory, bool);\r\n    function pair() external view returns (address);\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Account {\r\n    enum Status {\r\n        Frozen,\r\n        Fluid,\r\n        Locked\r\n    }\r\n\r\n    struct State {\r\n        uint256 staged;\r\n        uint256 balance;\r\n        mapping(uint256 => uint256) coupons;\r\n        mapping(address => uint256) couponAllowances;\r\n        uint256 fluidUntil;\r\n        uint256 lockedUntil;\r\n    }\r\n}\r\n\r\ncontract Epoch {\r\n    struct Global {\r\n        uint256 start;\r\n        uint256 period;\r\n        uint256 current;\r\n    }\r\n\r\n    struct Coupons {\r\n        uint256 outstanding;\r\n        uint256 expiration;\r\n        uint256[] expiring;\r\n    }\r\n\r\n    struct State {\r\n        uint256 bonded;\r\n        Coupons coupons;\r\n    }\r\n}\r\n\r\ncontract Candidate {\r\n    enum Vote {\r\n        UNDECIDED,\r\n        APPROVE,\r\n        REJECT\r\n    }\r\n\r\n    struct State {\r\n        uint256 start;\r\n        uint256 period;\r\n        uint256 approve;\r\n        uint256 reject;\r\n        mapping(address => Vote) votes;\r\n        bool initialized;\r\n    }\r\n}\r\n\r\ncontract Storage {\r\n    struct Provider {\r\n        IDollar dollar;\r\n        IOracle oracle;\r\n        address pool;\r\n    }\r\n\r\n    struct Balance {\r\n        uint256 supply;\r\n        uint256 bonded;\r\n        uint256 staged;\r\n        uint256 redeemable;\r\n        uint256 debt;\r\n        uint256 coupons;\r\n    }\r\n\r\n    struct State {\r\n        Epoch.Global epoch;\r\n        Balance balance;\r\n        Provider provider;\r\n\r\n        mapping(address => Account.State) accounts;\r\n        mapping(uint256 => Epoch.State) epochs;\r\n        mapping(address => Candidate.State) candidates;\r\n    }\r\n}\r\n\r\ncontract State {\r\n    Storage.State _state;\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Getters is State {\r\n    using SafeMath for uint256;\r\n    using Decimal for Decimal.D256;\r\n\r\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * ERC20 Interface\r\n     */\r\n\r\n    function name() public view returns (string memory) {\r\n        return \"Ultimate Set Dollar Stake\";\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return \"ULDS\";\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _state.accounts[account].balance;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _state.balance.supply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Global\r\n     */\r\n\r\n    function dollar() public view returns (IDollar) {\r\n        return _state.provider.dollar;\r\n    }\r\n\r\n    function oracle() public view returns (IOracle) {\r\n        return _state.provider.oracle;\r\n    }\r\n\r\n    function pool() public view returns (address) {\r\n        return _state.provider.pool;\r\n    }\r\n\r\n    function totalBonded() public view returns (uint256) {\r\n        return _state.balance.bonded;\r\n    }\r\n\r\n    function totalStaged() public view returns (uint256) {\r\n        return _state.balance.staged;\r\n    }\r\n\r\n    function totalDebt() public view returns (uint256) {\r\n        return _state.balance.debt;\r\n    }\r\n\r\n    function totalRedeemable() public view returns (uint256) {\r\n        return _state.balance.redeemable;\r\n    }\r\n\r\n    function totalCoupons() public view returns (uint256) {\r\n        return _state.balance.coupons;\r\n    }\r\n\r\n    function totalNet() public view returns (uint256) {\r\n        return dollar().totalSupply().sub(totalDebt());\r\n    }\r\n\r\n    /**\r\n     * Account\r\n     */\r\n\r\n    function balanceOfStaged(address account) public view returns (uint256) {\r\n        return _state.accounts[account].staged;\r\n    }\r\n\r\n    function balanceOfBonded(address account) public view returns (uint256) {\r\n        uint256 totalSupply = totalSupply();\r\n        if (totalSupply == 0) {\r\n            return 0;\r\n        }\r\n        return totalBonded().mul(balanceOf(account)).div(totalSupply);\r\n    }\r\n\r\n    function balanceOfCoupons(address account, uint256 epoch) public view returns (uint256) {\r\n        if (outstandingCoupons(epoch) == 0) {\r\n            return 0;\r\n        }\r\n        return _state.accounts[account].coupons[epoch];\r\n    }\r\n\r\n    function statusOf(address account) public view returns (Account.Status) {\r\n        if (_state.accounts[account].lockedUntil > epoch()) {\r\n            return Account.Status.Locked;\r\n        }\r\n\r\n        return epoch() >= _state.accounts[account].fluidUntil ? Account.Status.Frozen : Account.Status.Fluid;\r\n    }\r\n\r\n    function allowanceCoupons(address owner, address spender) public view returns (uint256) {\r\n        return _state.accounts[owner].couponAllowances[spender];\r\n    }\r\n\r\n    /**\r\n     * Epoch\r\n     */\r\n\r\n    function epoch() public view returns (uint256) {\r\n        return _state.epoch.current;\r\n    }\r\n\r\n    function epochTime() public view returns (uint256) {\r\n        Constants.EpochStrategy memory current = Constants.getEpochStrategy();\r\n\r\n        return epochTimeWithStrategy(current);\r\n    }\r\n\r\n    function epochTimeWithStrategy(Constants.EpochStrategy memory strategy) private view returns (uint256) {\r\n        return blockTimestamp()\r\n            .sub(strategy.start)\r\n            .div(strategy.period)\r\n            .add(strategy.offset);\r\n    }\r\n\r\n    // Overridable for testing\r\n    function blockTimestamp() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function outstandingCoupons(uint256 epoch) public view returns (uint256) {\r\n        return _state.epochs[epoch].coupons.outstanding;\r\n    }\r\n\r\n    function couponsExpiration(uint256 epoch) public view returns (uint256) {\r\n        return _state.epochs[epoch].coupons.expiration;\r\n    }\r\n\r\n    function expiringCoupons(uint256 epoch) public view returns (uint256) {\r\n        return _state.epochs[epoch].coupons.expiring.length;\r\n    }\r\n\r\n    function expiringCouponsAtIndex(uint256 epoch, uint256 i) public view returns (uint256) {\r\n        return _state.epochs[epoch].coupons.expiring[i];\r\n    }\r\n\r\n    function totalBondedAt(uint256 epoch) public view returns (uint256) {\r\n        return _state.epochs[epoch].bonded;\r\n    }\r\n\r\n    function bootstrappingAt(uint256 epoch) public view returns (bool) {\r\n        return epoch <= Constants.getBootstrappingPeriod();\r\n    }\r\n\r\n    /**\r\n     * Governance\r\n     */\r\n\r\n    function recordedVote(address account, address candidate) public view returns (Candidate.Vote) {\r\n        return _state.candidates[candidate].votes[account];\r\n    }\r\n\r\n    function startFor(address candidate) public view returns (uint256) {\r\n        return _state.candidates[candidate].start;\r\n    }\r\n\r\n    function periodFor(address candidate) public view returns (uint256) {\r\n        return _state.candidates[candidate].period;\r\n    }\r\n\r\n    function approveFor(address candidate) public view returns (uint256) {\r\n        return _state.candidates[candidate].approve;\r\n    }\r\n\r\n    function rejectFor(address candidate) public view returns (uint256) {\r\n        return _state.candidates[candidate].reject;\r\n    }\r\n\r\n    function votesFor(address candidate) public view returns (uint256) {\r\n        return approveFor(candidate).add(rejectFor(candidate));\r\n    }\r\n\r\n    function isNominated(address candidate) public view returns (bool) {\r\n        return _state.candidates[candidate].start > 0;\r\n    }\r\n\r\n    function isInitialized(address candidate) public view returns (bool) {\r\n        return _state.candidates[candidate].initialized;\r\n    }\r\n\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Setters is State, Getters {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * ERC20 Interface\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Global\r\n     */\r\n\r\n    function incrementTotalBonded(uint256 amount) internal {\r\n        _state.balance.bonded = _state.balance.bonded.add(amount);\r\n    }\r\n\r\n    function decrementTotalBonded(uint256 amount, string memory reason) internal {\r\n        _state.balance.bonded = _state.balance.bonded.sub(amount, reason);\r\n    }\r\n\r\n    function incrementTotalDebt(uint256 amount) internal {\r\n        _state.balance.debt = _state.balance.debt.add(amount);\r\n    }\r\n\r\n    function decrementTotalDebt(uint256 amount, string memory reason) internal {\r\n        _state.balance.debt = _state.balance.debt.sub(amount, reason);\r\n    }\r\n\r\n    function setDebtToZero() internal {\r\n        _state.balance.debt = 0;\r\n    }\r\n\r\n    function incrementTotalRedeemable(uint256 amount) internal {\r\n        _state.balance.redeemable = _state.balance.redeemable.add(amount);\r\n    }\r\n\r\n    function decrementTotalRedeemable(uint256 amount, string memory reason) internal {\r\n        _state.balance.redeemable = _state.balance.redeemable.sub(amount, reason);\r\n    }\r\n\r\n    /**\r\n     * Account\r\n     */\r\n\r\n    function incrementBalanceOf(address account, uint256 amount) internal {\r\n        _state.accounts[account].balance = _state.accounts[account].balance.add(amount);\r\n        _state.balance.supply = _state.balance.supply.add(amount);\r\n\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function decrementBalanceOf(address account, uint256 amount, string memory reason) internal {\r\n        _state.accounts[account].balance = _state.accounts[account].balance.sub(amount, reason);\r\n        _state.balance.supply = _state.balance.supply.sub(amount, reason);\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function incrementBalanceOfStaged(address account, uint256 amount) internal {\r\n        _state.accounts[account].staged = _state.accounts[account].staged.add(amount);\r\n        _state.balance.staged = _state.balance.staged.add(amount);\r\n    }\r\n\r\n    function decrementBalanceOfStaged(address account, uint256 amount, string memory reason) internal {\r\n        _state.accounts[account].staged = _state.accounts[account].staged.sub(amount, reason);\r\n        _state.balance.staged = _state.balance.staged.sub(amount, reason);\r\n    }\r\n\r\n    function incrementBalanceOfCoupons(address account, uint256 epoch, uint256 amount) internal {\r\n        _state.accounts[account].coupons[epoch] = _state.accounts[account].coupons[epoch].add(amount);\r\n        _state.epochs[epoch].coupons.outstanding = _state.epochs[epoch].coupons.outstanding.add(amount);\r\n        _state.balance.coupons = _state.balance.coupons.add(amount);\r\n    }\r\n\r\n    function decrementBalanceOfCoupons(address account, uint256 epoch, uint256 amount, string memory reason) internal {\r\n        _state.accounts[account].coupons[epoch] = _state.accounts[account].coupons[epoch].sub(amount, reason);\r\n        _state.epochs[epoch].coupons.outstanding = _state.epochs[epoch].coupons.outstanding.sub(amount, reason);\r\n        _state.balance.coupons = _state.balance.coupons.sub(amount, reason);\r\n    }\r\n\r\n    function unfreeze(address account) internal {\r\n        _state.accounts[account].fluidUntil = epoch().add(Constants.getDAOExitLockupEpochs());\r\n    }\r\n\r\n    function updateAllowanceCoupons(address owner, address spender, uint256 amount) internal {\r\n        _state.accounts[owner].couponAllowances[spender] = amount;\r\n    }\r\n\r\n    function decrementAllowanceCoupons(address owner, address spender, uint256 amount, string memory reason) internal {\r\n        _state.accounts[owner].couponAllowances[spender] =\r\n            _state.accounts[owner].couponAllowances[spender].sub(amount, reason);\r\n    }\r\n\r\n    /**\r\n     * Epoch\r\n     */\r\n\r\n    function incrementEpoch() internal {\r\n        _state.epoch.current = _state.epoch.current.add(1);\r\n    }\r\n\r\n    function snapshotTotalBonded() internal {\r\n        _state.epochs[epoch()].bonded = totalSupply();\r\n    }\r\n\r\n    function initializeCouponsExpiration(uint256 epoch, uint256 expiration) internal {\r\n        _state.epochs[epoch].coupons.expiration = expiration;\r\n        _state.epochs[expiration].coupons.expiring.push(epoch);\r\n    }\r\n\r\n    function eliminateOutstandingCoupons(uint256 epoch) internal {\r\n        uint256 outstandingCouponsForEpoch = outstandingCoupons(epoch);\r\n        if(outstandingCouponsForEpoch == 0) {\r\n            return;\r\n        }\r\n        _state.balance.coupons = _state.balance.coupons.sub(outstandingCouponsForEpoch);\r\n        _state.epochs[epoch].coupons.outstanding = 0;\r\n    }\r\n\r\n    /**\r\n     * Governance\r\n     */\r\n\r\n    function createCandidate(address candidate, uint256 period) internal {\r\n        _state.candidates[candidate].start = epoch();\r\n        _state.candidates[candidate].period = period;\r\n    }\r\n\r\n    function recordVote(address account, address candidate, Candidate.Vote vote) internal {\r\n        _state.candidates[candidate].votes[account] = vote;\r\n    }\r\n\r\n    function incrementApproveFor(address candidate, uint256 amount) internal {\r\n        _state.candidates[candidate].approve = _state.candidates[candidate].approve.add(amount);\r\n    }\r\n\r\n    function decrementApproveFor(address candidate, uint256 amount, string memory reason) internal {\r\n        _state.candidates[candidate].approve = _state.candidates[candidate].approve.sub(amount, reason);\r\n    }\r\n\r\n    function incrementRejectFor(address candidate, uint256 amount) internal {\r\n        _state.candidates[candidate].reject = _state.candidates[candidate].reject.add(amount);\r\n    }\r\n\r\n    function decrementRejectFor(address candidate, uint256 amount, string memory reason) internal {\r\n        _state.candidates[candidate].reject = _state.candidates[candidate].reject.sub(amount, reason);\r\n    }\r\n\r\n    function placeLock(address account, address candidate) internal {\r\n        uint256 currentLock = _state.accounts[account].lockedUntil;\r\n        uint256 newLock = startFor(candidate).add(periodFor(candidate));\r\n        if (newLock > currentLock) {\r\n            _state.accounts[account].lockedUntil = newLock;\r\n        }\r\n    }\r\n\r\n    function initialized(address candidate) internal {\r\n        _state.candidates[candidate].initialized = true;\r\n    }\r\n}\r\n\r\n/*\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n/**\r\n * @title Require\r\n * @author dYdX\r\n *\r\n * Stringifies parameters to pretty-print revert messages. Costs more gas than regular require()\r\n */\r\nlibrary Require {\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant ASCII_ZERO = 48; // '0'\r\n    uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10\r\n    uint256 constant ASCII_LOWER_EX = 120; // 'x'\r\n    bytes2 constant COLON = 0x3a20; // ': '\r\n    bytes2 constant COMMA = 0x2c20; // ', '\r\n    bytes2 constant LPAREN = 0x203c; // ' <'\r\n    byte constant RPAREN = 0x3e; // '>'\r\n    uint256 constant FOUR_BIT_MASK = 0xf;\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        uint256 payloadA\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        uint256 payloadA,\r\n        uint256 payloadB\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA,\r\n        uint256 payloadB\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA,\r\n        uint256 payloadB,\r\n        uint256 payloadC\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        COMMA,\r\n                        stringify(payloadC),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        bytes32 payloadA\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        bytes32 payloadA,\r\n        uint256 payloadB,\r\n        uint256 payloadC\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        COMMA,\r\n                        stringify(payloadC),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    function stringifyTruncated(\r\n        bytes32 input\r\n    )\r\n    private\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        // put the input bytes into the result\r\n        bytes memory result = abi.encodePacked(input);\r\n\r\n        // determine the length of the input by finding the location of the last non-zero byte\r\n        for (uint256 i = 32; i > 0; ) {\r\n            // reverse-for-loops with unsigned integer\r\n            /* solium-disable-next-line security/no-modify-for-iter-var */\r\n            i--;\r\n\r\n            // find the last non-zero byte in order to determine the length\r\n            if (result[i] != 0) {\r\n                uint256 length = i + 1;\r\n\r\n                /* solium-disable-next-line security/no-inline-assembly */\r\n                assembly {\r\n                    mstore(result, length) // r.length = length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // all bytes are zero\r\n        return new bytes(0);\r\n    }\r\n\r\n    function stringify(\r\n        uint256 input\r\n    )\r\n    private\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        if (input == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        // get the final string length\r\n        uint256 j = input;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n\r\n        // allocate the string\r\n        bytes memory bstr = new bytes(length);\r\n\r\n        // populate the string starting with the least-significant character\r\n        j = input;\r\n        for (uint256 i = length; i > 0; ) {\r\n            // reverse-for-loops with unsigned integer\r\n            /* solium-disable-next-line security/no-modify-for-iter-var */\r\n            i--;\r\n\r\n            // take last decimal digit\r\n            bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));\r\n\r\n            // remove the last decimal digit\r\n            j /= 10;\r\n        }\r\n\r\n        return bstr;\r\n    }\r\n\r\n    function stringify(\r\n        address input\r\n    )\r\n    private\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        uint256 z = uint256(input);\r\n\r\n        // addresses are \"0x\" followed by 20 bytes of data which take up 2 characters each\r\n        bytes memory result = new bytes(42);\r\n\r\n        // populate the result with \"0x\"\r\n        result[0] = byte(uint8(ASCII_ZERO));\r\n        result[1] = byte(uint8(ASCII_LOWER_EX));\r\n\r\n        // for each byte (starting from the lowest byte), populate the result with two characters\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            // each byte takes two characters\r\n            uint256 shift = i * 2;\r\n\r\n            // populate the least-significant character\r\n            result[41 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n\r\n            // populate the most-significant character\r\n            result[40 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function stringify(\r\n        bytes32 input\r\n    )\r\n    private\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        uint256 z = uint256(input);\r\n\r\n        // bytes32 are \"0x\" followed by 32 bytes of data which take up 2 characters each\r\n        bytes memory result = new bytes(66);\r\n\r\n        // populate the result with \"0x\"\r\n        result[0] = byte(uint8(ASCII_ZERO));\r\n        result[1] = byte(uint8(ASCII_LOWER_EX));\r\n\r\n        // for each byte (starting from the lowest byte), populate the result with two characters\r\n        for (uint256 i = 0; i < 32; i++) {\r\n            // each byte takes two characters\r\n            uint256 shift = i * 2;\r\n\r\n            // populate the least-significant character\r\n            result[65 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n\r\n            // populate the most-significant character\r\n            result[64 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function char(\r\n        uint256 input\r\n    )\r\n    private\r\n    pure\r\n    returns (byte)\r\n    {\r\n        // return ASCII digit (0-9)\r\n        if (input < 10) {\r\n            return byte(uint8(input + ASCII_ZERO));\r\n        }\r\n\r\n        // return ASCII letter (a-f)\r\n        return byte(uint8(input + ASCII_RELATIVE_ZERO));\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Comptroller is Setters {\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 private constant FILE = \"Comptroller\";\r\n\r\n    function mintToAccount(address account, uint256 amount) internal {\r\n        dollar().mint(account, amount);\r\n        if (!bootstrappingAt(epoch())) {\r\n            increaseDebt(amount);\r\n        }\r\n\r\n        balanceCheck();\r\n    }\r\n\r\n    function burnFromAccount(address account, uint256 amount) internal {\r\n        dollar().transferFrom(account, address(this), amount);\r\n        dollar().burn(amount);\r\n        decrementTotalDebt(amount, \"Comptroller: not enough outstanding debt\");\r\n\r\n        balanceCheck();\r\n    }\r\n\r\n    function redeemToAccount(address account, uint256 amount) internal {\r\n        dollar().transfer(account, amount);\r\n        decrementTotalRedeemable(amount, \"Comptroller: not enough redeemable balance\");\r\n\r\n        balanceCheck();\r\n    }\r\n\r\n    function burnRedeemable(uint256 amount) internal {\r\n        dollar().burn(amount);\r\n        decrementTotalRedeemable(amount, \"Comptroller: not enough redeemable balance\");\r\n\r\n        balanceCheck();\r\n    }\r\n\r\n    function increaseDebt(uint256 amount) internal {\r\n        incrementTotalDebt(amount);\r\n        resetDebt(Constants.getDebtRatioCap());\r\n\r\n        balanceCheck();\r\n    }\r\n\r\n    function decreaseDebt(uint256 amount) internal {\r\n        decrementTotalDebt(amount, \"Comptroller: not enough debt\");\r\n\r\n        balanceCheck();\r\n    }\r\n\r\n    function increaseSupply(uint256 newSupply) internal returns (uint256, uint256, uint256) {\r\n        (uint256 newRedeemable, uint256 lessDebt, uint256 poolReward) = (0, 0, 0);\r\n\r\n        // 1. True up redeemable pool\r\n        uint256 totalRedeemable = totalRedeemable();\r\n        uint256 totalCoupons = totalCoupons();\r\n        if (totalRedeemable < totalCoupons) {\r\n\r\n            // Get new redeemable coupons\r\n            newRedeemable = totalCoupons.sub(totalRedeemable);\r\n            // Pad with Pool's potential cut\r\n            newRedeemable = newRedeemable.mul(100).div(SafeMath.sub(100, Constants.getOraclePoolRatio()));\r\n            // Cap at newSupply\r\n            newRedeemable = newRedeemable > newSupply ? newSupply : newRedeemable;\r\n            // Determine Pool's final cut\r\n            poolReward = newRedeemable.mul(Constants.getOraclePoolRatio()).div(100);\r\n            // Determine Redeemable's final cut\r\n            newRedeemable = newRedeemable.sub(poolReward);\r\n\r\n            mintToPool(poolReward);\r\n            mintToRedeemable(newRedeemable);\r\n\r\n            newSupply = newSupply.sub(poolReward);\r\n            newSupply = newSupply.sub(newRedeemable);\r\n        }\r\n        // 2. Eliminate debt\r\n        uint256 totalDebt = totalDebt();\r\n        if (newSupply > 0 && totalDebt > 0) {\r\n            lessDebt = totalDebt > newSupply ? newSupply : totalDebt;\r\n            decreaseDebt(lessDebt);\r\n\r\n            newSupply = newSupply.sub(lessDebt);\r\n        }\r\n\r\n        // 3. Payout to bonded\r\n        if (totalBonded() == 0) {\r\n            newSupply = 0;\r\n        }\r\n        if (newSupply > 0) {\r\n            mintToBonded(newSupply);\r\n        }\r\n\r\n        return (newRedeemable, lessDebt, newSupply.add(poolReward));\r\n    }\r\n\r\n    function resetDebt(Decimal.D256 memory targetDebtRatio) internal {\r\n        uint256 targetDebt = targetDebtRatio.mul(dollar().totalSupply()).asUint256();\r\n        uint256 currentDebt = totalDebt();\r\n\r\n        if (currentDebt > targetDebt) {\r\n            uint256 lessDebt = currentDebt.sub(targetDebt);\r\n            decreaseDebt(lessDebt);\r\n        }\r\n    }\r\n\r\n    function balanceCheck() private {\r\n        Require.that(\r\n            dollar().balanceOf(address(this)) >= totalBonded().add(totalStaged()).add(totalRedeemable()),\r\n            FILE,\r\n            \"Inconsistent balances\"\r\n        );\r\n    }\r\n\r\n    function mintToBonded(uint256 amount) private {\r\n        Require.that(\r\n            totalBonded() > 0,\r\n            FILE,\r\n            \"Cant mint to empty pool\"\r\n        );\r\n\r\n        uint256 poolAmount = amount.mul(Constants.getOraclePoolRatio()).div(100);\r\n        uint256 daoAmount = amount > poolAmount ? amount.sub(poolAmount) : 0;\r\n\r\n        mintToPool(poolAmount);\r\n        mintToDAO(daoAmount);\r\n\r\n        balanceCheck();\r\n    }\r\n\r\n    function mintToDAO(uint256 amount) private {\r\n        if (amount > 0) {\r\n            dollar().mint(address(this), amount);\r\n            incrementTotalBonded(amount);\r\n        }\r\n    }\r\n\r\n    function mintToPool(uint256 amount) private {\r\n        if (amount > 0) {\r\n            dollar().mint(pool(), amount);\r\n        }\r\n    }\r\n\r\n    function mintToRedeemable(uint256 amount) private {\r\n        dollar().mint(address(this), amount);\r\n        incrementTotalRedeemable(amount);\r\n\r\n        balanceCheck();\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Market is Comptroller, Curve {\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 private constant FILE = \"Market\";\r\n\r\n    event CouponExpiration(uint256 indexed epoch, uint256 couponsExpired, uint256 lessRedeemable, uint256 lessDebt, uint256 newBonded);\r\n    event CouponPurchase(address indexed account, uint256 indexed epoch, uint256 dollarAmount, uint256 couponAmount);\r\n    event CouponRedemption(address indexed account, uint256 indexed epoch, uint256 couponAmount);\r\n    event CouponTransfer(address indexed from, address indexed to, uint256 indexed epoch, uint256 value);\r\n    event CouponApproval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function step() internal {\r\n        // Expire prior coupons\r\n        for (uint256 i = 0; i < expiringCoupons(epoch()); i++) {\r\n            expireCouponsForEpoch(expiringCouponsAtIndex(epoch(), i));\r\n        }\r\n\r\n        // Record expiry for current epoch's coupons\r\n        uint256 expirationEpoch = epoch().add(Constants.getCouponExpiration());\r\n        initializeCouponsExpiration(epoch(), expirationEpoch);\r\n    }\r\n\r\n    function expireCouponsForEpoch(uint256 epoch) private {\r\n        uint256 couponsForEpoch = outstandingCoupons(epoch);\r\n        (uint256 lessRedeemable, uint256 lessDebt, uint256 newBonded) = (0, 0, 0);\r\n\r\n        eliminateOutstandingCoupons(epoch);\r\n\r\n        uint256 totalRedeemable = totalRedeemable();\r\n        uint256 totalCoupons = totalCoupons();\r\n        if (totalRedeemable > totalCoupons) {\r\n            lessRedeemable = totalRedeemable.sub(totalCoupons);\r\n            burnRedeemable(lessRedeemable);\r\n            (, lessDebt, newBonded) = increaseSupply(lessRedeemable);\r\n        }\r\n\r\n        emit CouponExpiration(epoch, couponsForEpoch, lessRedeemable, lessDebt, newBonded);\r\n    }\r\n\r\n    function couponPremium(uint256 amount) public view returns (uint256) {\r\n        return calculateCouponPremium(dollar().totalSupply(), totalDebt(), amount);\r\n    }\r\n\r\n    function purchaseCoupons(uint256 dollarAmount) external returns (uint256) {\r\n        Require.that(\r\n            dollarAmount > 0,\r\n            FILE,\r\n            \"Must purchase non-zero amount\"\r\n        );\r\n\r\n        Require.that(\r\n            totalDebt() >= dollarAmount,\r\n            FILE,\r\n            \"Not enough debt\"\r\n        );\r\n\r\n        uint256 epoch = epoch();\r\n        uint256 couponAmount = dollarAmount.add(couponPremium(dollarAmount));\r\n        burnFromAccount(msg.sender, dollarAmount);\r\n        incrementBalanceOfCoupons(msg.sender, epoch, couponAmount);\r\n\r\n        emit CouponPurchase(msg.sender, epoch, dollarAmount, couponAmount);\r\n\r\n        return couponAmount;\r\n    }\r\n\r\n    function redeemCoupons(uint256 couponEpoch, uint256 couponAmount) external {\r\n        require(epoch().sub(couponEpoch) >= 2, \"Market: Too early to redeem\");\r\n        decrementBalanceOfCoupons(msg.sender, couponEpoch, couponAmount, \"Market: Insufficient coupon balance\");\r\n        redeemToAccount(msg.sender, couponAmount);\r\n\r\n        emit CouponRedemption(msg.sender, couponEpoch, couponAmount);\r\n    }\r\n\r\n    function approveCoupons(address spender, uint256 amount) external {\r\n        require(spender != address(0), \"Market: Coupon approve to the zero address\");\r\n\r\n        updateAllowanceCoupons(msg.sender, spender, amount);\r\n\r\n        emit CouponApproval(msg.sender, spender, amount);\r\n    }\r\n\r\n    function transferCoupons(address sender, address recipient, uint256 epoch, uint256 amount) external {\r\n        require(sender != address(0), \"Market: Coupon transfer from the zero address\");\r\n        require(recipient != address(0), \"Market: Coupon transfer to the zero address\");\r\n\r\n        decrementBalanceOfCoupons(sender, epoch, amount, \"Market: Insufficient coupon balance\");\r\n        incrementBalanceOfCoupons(recipient, epoch, amount);\r\n\r\n        if (msg.sender != sender && allowanceCoupons(sender, msg.sender) != uint256(-1)) {\r\n            decrementAllowanceCoupons(sender, msg.sender, amount, \"Market: Insufficient coupon approval\");\r\n        }\r\n\r\n        emit CouponTransfer(sender, recipient, epoch, amount);\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Regulator is Comptroller {\r\n    using SafeMath for uint256;\r\n    using Decimal for Decimal.D256;\r\n\r\n    event SupplyIncrease(uint256 indexed epoch, uint256 price, uint256 newRedeemable, uint256 lessDebt, uint256 newBonded);\r\n    event SupplyDecrease(uint256 indexed epoch, uint256 price, uint256 newDebt);\r\n    event SupplyNeutral(uint256 indexed epoch);\r\n\r\n    function step() internal {\r\n        Decimal.D256 memory price = oracleCapture();\r\n\r\n        if (price.greaterThan(Decimal.one())) {\r\n            setDebtToZero();\r\n            growSupply(price);\r\n            return;\r\n        }\r\n\r\n        if (price.lessThan(Decimal.one())) {\r\n            shrinkSupply(price);\r\n            return;\r\n        }\r\n\r\n        emit SupplyNeutral(epoch());\r\n    }\r\n\r\n    function shrinkSupply(Decimal.D256 memory price) private {\r\n        Decimal.D256 memory delta = limit(Decimal.one().sub(price));\r\n        uint256 newDebt = delta.mul(totalNet()).asUint256();\r\n        increaseDebt(newDebt);\r\n\r\n        emit SupplyDecrease(epoch(), price.value, newDebt);\r\n        return;\r\n    }\r\n\r\n    function growSupply(Decimal.D256 memory price) private {\r\n        Decimal.D256 memory delta = limit(price.sub(Decimal.one()).div(Constants.getSupplyChangeDivisor()));\r\n        uint256 newSupply = delta.mul(totalNet()).asUint256();\r\n        (uint256 newRedeemable, uint256 lessDebt, uint256 newBonded) = increaseSupply(newSupply);\r\n        emit SupplyIncrease(epoch(), price.value, newRedeemable, lessDebt, newBonded);\r\n    }\r\n\r\n    function limit(Decimal.D256 memory delta) private view returns (Decimal.D256 memory) {\r\n        Decimal.D256 memory supplyChangeLimit = Constants.getSupplyChangeLimit();\r\n\r\n        return delta.greaterThan(supplyChangeLimit) ? supplyChangeLimit : delta;\r\n\r\n    }\r\n\r\n    function oracleCapture() private returns (Decimal.D256 memory) {\r\n        (Decimal.D256 memory price, bool valid) = oracle().capture();\r\n\r\n        if (bootstrappingAt(epoch().sub(1))) {\r\n            return Constants.getBootstrappingPrice();\r\n        }\r\n        if (!valid) {\r\n            return Decimal.one();\r\n        }\r\n\r\n        return price;\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Permission is Setters {\r\n\r\n    bytes32 private constant FILE = \"Permission\";\r\n\r\n    // Can modify account state\r\n    modifier onlyFrozenOrFluid(address account) {\r\n        Require.that(\r\n            statusOf(account) != Account.Status.Locked,\r\n            FILE,\r\n            \"Not frozen or fluid\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    // Can participate in balance-dependant activities\r\n    modifier onlyFrozenOrLocked(address account) {\r\n        Require.that(\r\n            statusOf(account) != Account.Status.Fluid,\r\n            FILE,\r\n            \"Not frozen or locked\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier initializer() {\r\n        Require.that(\r\n            !isInitialized(implementation()),\r\n            FILE,\r\n            \"Already initialized\"\r\n        );\r\n\r\n        initialized(implementation());\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Bonding is Setters, Permission {\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 private constant FILE = \"Bonding\";\r\n\r\n    event Deposit(address indexed account, uint256 value);\r\n    event Withdraw(address indexed account, uint256 value);\r\n    event Bond(address indexed account, uint256 start, uint256 value, uint256 valueUnderlying);\r\n    event Unbond(address indexed account, uint256 start, uint256 value, uint256 valueUnderlying);\r\n\r\n    function step() internal {\r\n        Require.that(\r\n            epochTime() > epoch(),\r\n            FILE,\r\n            \"Still current epoch\"\r\n        );\r\n\r\n        snapshotTotalBonded();\r\n        incrementEpoch();\r\n    }\r\n\r\n    function deposit(uint256 value) external onlyFrozenOrLocked(msg.sender) {\r\n        dollar().transferFrom(msg.sender, address(this), value);\r\n        incrementBalanceOfStaged(msg.sender, value);\r\n\r\n        emit Deposit(msg.sender, value);\r\n    }\r\n\r\n    function withdraw(uint256 value) external onlyFrozenOrLocked(msg.sender) {\r\n        dollar().transfer(msg.sender, value);\r\n        decrementBalanceOfStaged(msg.sender, value, \"Bonding: insufficient staged balance\");\r\n\r\n        emit Withdraw(msg.sender, value);\r\n    }\r\n\r\n    function bond(uint256 value) external onlyFrozenOrFluid(msg.sender) {\r\n        unfreeze(msg.sender);\r\n\r\n        uint256 balance = totalBonded() == 0 ?\r\n            value.mul(Constants.getInitialStakeMultiple()) :\r\n            value.mul(totalSupply()).div(totalBonded());\r\n        incrementBalanceOf(msg.sender, balance);\r\n        incrementTotalBonded(value);\r\n        decrementBalanceOfStaged(msg.sender, value, \"Bonding: insufficient staged balance\");\r\n\r\n        emit Bond(msg.sender, epoch().add(1), balance, value);\r\n    }\r\n\r\n    function unbond(uint256 value) external onlyFrozenOrFluid(msg.sender) {\r\n        unfreeze(msg.sender);\r\n\r\n        uint256 staged = value.mul(balanceOfBonded(msg.sender)).div(balanceOf(msg.sender));\r\n        incrementBalanceOfStaged(msg.sender, staged);\r\n        decrementTotalBonded(staged, \"Bonding: insufficient total bonded\");\r\n        decrementBalanceOf(msg.sender, value, \"Bonding: insufficient balance\");\r\n\r\n        emit Unbond(msg.sender, epoch().add(1), value, staged);\r\n    }\r\n\r\n    function unbondUnderlying(uint256 value) external onlyFrozenOrFluid(msg.sender) {\r\n        unfreeze(msg.sender);\r\n\r\n        uint256 balance = value.mul(totalSupply()).div(totalBonded());\r\n        incrementBalanceOfStaged(msg.sender, value);\r\n        decrementTotalBonded(value, \"Bonding: insufficient total bonded\");\r\n        decrementBalanceOf(msg.sender, balance, \"Bonding: insufficient balance\");\r\n\r\n        emit Unbond(msg.sender, epoch().add(1), balance, value);\r\n    }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/*\r\n    Copyright 2018-2019 zOS Global Limited\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n/**\r\n * Based off of, and designed to interface with, openzeppelin/upgrades package\r\n */\r\ncontract Upgradeable is State {\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     * @param implementation Address of the new implementation.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    function initialize() public;\r\n\r\n    /**\r\n     * @dev Upgrades the proxy to a new implementation.\r\n     * @param newImplementation Address of the new implementation.\r\n     */\r\n    function upgradeTo(address newImplementation) internal {\r\n        setImplementation(newImplementation);\r\n\r\n        (bool success, bytes memory reason) = newImplementation.delegatecall(abi.encodeWithSignature(\"initialize()\"));\r\n        require(success, string(reason));\r\n\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the implementation address of the proxy.\r\n     * @param newImplementation Address of the new implementation.\r\n     */\r\n    function setImplementation(address newImplementation) private {\r\n        require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Govern is Setters, Permission, Upgradeable {\r\n    using SafeMath for uint256;\r\n    using Decimal for Decimal.D256;\r\n\r\n    bytes32 private constant FILE = \"Govern\";\r\n\r\n    event Proposal(address indexed candidate, address indexed account, uint256 indexed start, uint256 period);\r\n    event Vote(address indexed account, address indexed candidate, Candidate.Vote vote, uint256 bonded);\r\n    event Commit(address indexed account, address indexed candidate);\r\n\r\n    function vote(address candidate, Candidate.Vote vote) external onlyFrozenOrLocked(msg.sender) {\r\n        Require.that(\r\n            balanceOf(msg.sender) > 0,\r\n            FILE,\r\n            \"Must have stake\"\r\n        );\r\n\r\n        if (!isNominated(candidate)) {\r\n            Require.that(\r\n                canPropose(msg.sender),\r\n                FILE,\r\n                \"Not enough stake to propose\"\r\n            );\r\n\r\n            createCandidate(candidate, Constants.getGovernancePeriod());\r\n            emit Proposal(candidate, msg.sender, epoch(), Constants.getGovernancePeriod());\r\n        }\r\n\r\n        Require.that(\r\n            epoch() < startFor(candidate).add(periodFor(candidate)),\r\n            FILE,\r\n            \"Ended\"\r\n        );\r\n\r\n        uint256 bonded = balanceOf(msg.sender);\r\n        Candidate.Vote recordedVote = recordedVote(msg.sender, candidate);\r\n        if (vote == recordedVote) {\r\n            return;\r\n        }\r\n\r\n        if (recordedVote == Candidate.Vote.REJECT) {\r\n            decrementRejectFor(candidate, bonded, \"Govern: Insufficient reject\");\r\n        }\r\n        if (recordedVote == Candidate.Vote.APPROVE) {\r\n            decrementApproveFor(candidate, bonded, \"Govern: Insufficient approve\");\r\n        }\r\n        if (vote == Candidate.Vote.REJECT) {\r\n            incrementRejectFor(candidate, bonded);\r\n        }\r\n        if (vote == Candidate.Vote.APPROVE) {\r\n            incrementApproveFor(candidate, bonded);\r\n        }\r\n\r\n        recordVote(msg.sender, candidate, vote);\r\n        placeLock(msg.sender, candidate);\r\n\r\n        emit Vote(msg.sender, candidate, vote, bonded);\r\n    }\r\n\r\n    function commit(address candidate) external {\r\n        Require.that(\r\n            isNominated(candidate),\r\n            FILE,\r\n            \"Not nominated\"\r\n        );\r\n\r\n        uint256 endsAfter = startFor(candidate).add(periodFor(candidate)).sub(1);\r\n\r\n        Require.that(\r\n            epoch() > endsAfter,\r\n            FILE,\r\n            \"Not ended\"\r\n        );\r\n\r\n        Require.that(\r\n            Decimal.ratio(votesFor(candidate), totalBondedAt(endsAfter)).greaterThan(Constants.getGovernanceQuorum()),\r\n            FILE,\r\n            \"Must have quorom\"\r\n        );\r\n\r\n        Require.that(\r\n            approveFor(candidate) > rejectFor(candidate),\r\n            FILE,\r\n            \"Not approved\"\r\n        );\r\n\r\n        upgradeTo(candidate);\r\n\r\n        emit Commit(msg.sender, candidate);\r\n    }\r\n\r\n    function emergencyCommit(address candidate) external {\r\n        Require.that(\r\n            isNominated(candidate),\r\n            FILE,\r\n            \"Not nominated\"\r\n        );\r\n\r\n        Require.that(\r\n            epochTime() > epoch().add(Constants.getGovernanceEmergencyDelay()),\r\n            FILE,\r\n            \"Epoch synced\"\r\n        );\r\n\r\n        Require.that(\r\n            Decimal.ratio(approveFor(candidate), totalSupply()).greaterThan(Constants.getGovernanceSuperMajority()),\r\n            FILE,\r\n            \"Must have super majority\"\r\n        );\r\n\r\n        Require.that(\r\n            approveFor(candidate) > rejectFor(candidate),\r\n            FILE,\r\n            \"Not approved\"\r\n        );\r\n\r\n        upgradeTo(candidate);\r\n\r\n        emit Commit(msg.sender, candidate);\r\n    }\r\n\r\n    function canPropose(address account) private view returns (bool) {\r\n        if (totalBonded() == 0) {\r\n            return false;\r\n        }\r\n\r\n        Decimal.D256 memory stake = Decimal.ratio(balanceOf(account), totalSupply());\r\n        return stake.greaterThan(Decimal.ratio(1, 100)); // 1%\r\n    }\r\n}\r\n\r\n/*\r\n    \r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\ncontract Implementation is State, Bonding, Market, Regulator, Govern {\r\n    using SafeMath for uint256;\r\n\r\n    event Advance(uint256 indexed epoch, uint256 block, uint256 timestamp);\r\n    event Incentivization(address indexed account, uint256 amount);\r\n\r\n    function initialize() initializer public {\r\n    }\r\n\r\n    function advance() external incentivized {\r\n        Bonding.step();\r\n        Regulator.step();\r\n        Market.step();\r\n\r\n        emit Advance(epoch(), block.number, block.timestamp);\r\n    }\r\n\r\n    modifier incentivized {\r\n        // Mint advance reward to sender\r\n        uint256 incentive = Constants.getAdvanceIncentive();\r\n        mintToAccount(msg.sender, incentive);\r\n        emit Incentivization(msg.sender, incentive);\r\n        _;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Advance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueUnderlying\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CouponApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponsExpired\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lessRedeemable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lessDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBonded\",\"type\":\"uint256\"}],\"name\":\"CouponExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dollarAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"CouponPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"CouponRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CouponTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Incentivization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Proposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"SupplyDecrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedeemable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lessDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBonded\",\"type\":\"uint256\"}],\"name\":\"SupplyIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"SupplyNeutral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueUnderlying\",\"type\":\"uint256\"}],\"name\":\"Unbond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Candidate.Vote\",\"name\":\"vote\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonded\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"advance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowanceCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveCoupons\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"approveFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"balanceOfCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfStaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"bootstrappingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"couponPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"couponsExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dollar\",\"outputs\":[{\"internalType\":\"contract IDollar\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"emergencyCommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"expiringCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"expiringCouponsAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isNominated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"outstandingCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"periodFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dollarAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"recordedVote\",\"outputs\":[{\"internalType\":\"enum Candidate.Vote\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"couponEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"redeemCoupons\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"rejectFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"startFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"statusOf\",\"outputs\":[{\"internalType\":\"enum Account.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"totalBondedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRedeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCoupons\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unbondUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"enum Candidate.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"votesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Implementation","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0a5d3e77ed4dc3c2aef2c29eb23175fc36411ad08d54bed2a09fc35d62e06201"}]}