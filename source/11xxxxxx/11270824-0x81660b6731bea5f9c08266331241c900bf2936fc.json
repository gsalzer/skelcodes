{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// solium-disable security/no-low-level-calls\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function totalSupply() external view returns (uint);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function skim(address to) external;\r\n}\r\n\r\ninterface IMasterChef {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function renounceOwnership() public virtual {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract UniV2toSushiMigrator is Ownable {\r\n    uint256 public migrateRefund = 0; // 50000000? SUSHI refund per gwei in gasprice\r\n    uint256 public newPairRefund = 0; // 400000000? SUSHI refund per gwei in gasprice\r\n    uint256 public maxGasPrice = 100000000000; // Max gas price to limit exploits\r\n\r\n    function set(uint256 migrateRefund_, uint256 newPairRefund_, uint256 maxGasPrice_) public onlyOwner {\r\n        migrateRefund = migrateRefund_;\r\n        newPairRefund = newPairRefund_;\r\n        maxGasPrice = maxGasPrice_;\r\n    }\r\n    \r\n    function drain(address token) public onlyOwner {\r\n        safeTransfer(token, msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n    \r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 amount) private {\r\n        if (amount > 0) {\r\n            (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \"Transfer failed at ERC20\");\r\n        }\r\n    }\r\n    \r\n    function reward(uint256 amount) private {\r\n        if (amount > 0) {\r\n             // Just try to reward SUSHI, if it fails, continue\r\n            address(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2).call(abi.encodeWithSelector(0xa9059cbb, msg.sender, min(tx.gasprice, maxGasPrice) * amount));\r\n        }\r\n    }\r\n    \r\n    function migrate(IUniswapV2Pair uniPair, uint liquidity) public returns(uint256 newLiquidity) {\r\n        uniPair.transferFrom(msg.sender, address(uniPair), liquidity); // send liquidity to pair\r\n\r\n        address token0 = uniPair.token0();\r\n        address token1 = uniPair.token1();\r\n        address sushiPair = IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac).getPair(token0, token1);\r\n        if (sushiPair == address(0)) { // create the pair if it doesn't exist yet\r\n            reward(newPairRefund);\r\n\r\n            sushiPair = IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac).createPair(token0, token1);\r\n            uniPair.burn(sushiPair); // Remove liquidity directly to sushiPair\r\n        } else {\r\n            reward(migrateRefund);\r\n    \r\n            (uint256 amount0, uint256 amount1) = uniPair.burn(address(this)); // Remove liquidity to here\r\n            (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(sushiPair).getReserves();\r\n            uint totalSupply = IUniswapV2Pair(sushiPair).totalSupply();\r\n            uint256 liquidity0 = amount0 * totalSupply / reserve0;\r\n            uint256 liquidity1 = amount1 * totalSupply / reserve1;\r\n    \r\n            if (liquidity0 == liquidity1) {\r\n                safeTransfer(token0, sushiPair, amount0);\r\n                safeTransfer(token1, sushiPair, amount1);\r\n            } else if (liquidity0 < liquidity1) { // There is too much of token1\r\n                uint256 adjustedAmount1 = amount1 * liquidity0 / liquidity1;\r\n                safeTransfer(token0, sushiPair, amount0);\r\n                safeTransfer(token1, sushiPair, adjustedAmount1);\r\n                safeTransfer(token1, msg.sender, amount1 - adjustedAmount1);\r\n            } else { // There is too much of token0\r\n                uint256 adjustedAmount0 = amount0 * liquidity1 / liquidity0;\r\n                safeTransfer(token0, sushiPair, adjustedAmount0);\r\n                safeTransfer(token1, sushiPair, amount1);\r\n                safeTransfer(token0, msg.sender, amount0 - adjustedAmount0);\r\n            }\r\n        }\r\n        \r\n        return IUniswapV2Pair(sushiPair).mint(msg.sender); // Add liquidity\r\n    }\r\n\r\n    function permitAndMigrate(IUniswapV2Pair uniPair, uint liquidity, uint deadline, uint8 v, bytes32 r, bytes32 s) public returns(uint256 newLiquidity) {\r\n        uniPair.permit(msg.sender, address(this), liquidity, deadline, v, r, s);\r\n        return migrate(uniPair, liquidity);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newPairRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitAndMigrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"migrateRefund_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPairRefund_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPrice_\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniV2toSushiMigrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5dccd07372b7f96629e9772cc5ef610c5851750068bb95edda75fc903260cd46"}]}