{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-26\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\ncontract UniverseFinance {\r\n   \r\n   /**\r\n   * using safemath for uint256\r\n    */\r\n     using SafeMath for uint256;\r\n     \r\n   event Migration(\r\n        address indexed customerAddress,\r\n        address indexed referrar,\r\n        uint256 tokens,\r\n        uint256 commission\r\n       \r\n    );\r\n    \r\n    \r\n    event Burned(\r\n        address indexed _idToDistribute,\r\n        address indexed referrer,\r\n        uint256 burnedAmountToken,\r\n        uint256 percentageBurned,\r\n        uint256 level\r\n        );\r\n\r\n   \r\n    /**\r\n    events for transfer\r\n     */\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n   event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    /**\r\n    * buy Event\r\n     */\r\n\r\n     event Buy(\r\n         address indexed buyer,\r\n         address indexed referrar,\r\n         uint256 totalTokens,\r\n         uint256 tokensTransfered,\r\n         uint256 buyPrice,\r\n         uint256 buyPriceAfterBuy,\r\n         uint256 etherDeducted,\r\n         uint256 circultedSupplyBeforeBuy,\r\n         uint256 circultedSupplyAfterBuy\r\n     );\r\n   \r\n   /**\r\n    * sell Event\r\n     */\r\n\r\n     event Sell(\r\n         address indexed seller,\r\n         uint256 calculatedEtherTransfer,\r\n         uint256 soldToken,\r\n         uint256 sellPrice,\r\n         uint256 sellPriceAfterSell,\r\n         uint256 circultedSupplyBeforeSell,\r\n         uint256 circultedSupplyAfterSell\r\n     );\r\n     \r\n     event Reward(\r\n       address indexed from,\r\n       address indexed to,\r\n       uint256 rewardAmount,\r\n       uint256 holdingUsdValue,\r\n       uint256 level\r\n    );\r\n\r\n   /** configurable variables\r\n   *  name it should be decided on constructor\r\n    */\r\n    string public tokenName = \"Universe Finance\";\r\n\r\n    /** configurable variables\r\n   *  symbol it should be decided on constructor\r\n    */\r\n\r\n    string public tokenSymbol = \"UFC\";\r\n   \r\n   \r\n\r\n    uint8 internal decimal = 6;\r\n    mapping (address => uint) internal userLastAction;\r\n    uint256 internal throttleTime = 30; \r\n\r\n    /** configurable variables\r\n \r\n   \r\n    /**\r\n    * owner address\r\n     */\r\n\r\n    address public owner;\r\n    uint256 internal maxBuyingLimit = 5000*10**6;\r\n    uint256 internal _totalSupply = 5600000 * 10**6;\r\n    uint256 internal _burnedSupply;\r\n    uint256 internal currentPrice = 250000000000000;\r\n    uint256 internal isBuyPrevented = 0;\r\n    uint256 internal isSellPrevented = 0;\r\n    uint256 internal isWithdrawPrevented = 0;\r\n    uint256 internal initialPriceIncrement;\r\n    uint256 internal _circulatedSupply;\r\n    uint256 internal commFundsWallet;\r\n    uint256 internal ethDecimal = 1000000000000000000;\r\n    uint256 internal basePrice = 400;\r\n    \r\n    uint256 internal level1Commission = 900;\r\n    uint256 internal level2Commission = 500;\r\n    uint256 internal level3Commission = 200;\r\n    uint256 internal level4Commission = 100;\r\n    uint256 internal level5Commission = 500;\r\n    uint256 internal level6Commission = 500;\r\n    uint256 internal level7Commission = 500;\r\n    uint256 internal level8Commission = 500;\r\n    uint256 internal level9Commission = 500;\r\n    uint256 internal level10Commission = 500;\r\n    uint256 internal level11Commission = 250;\r\n    uint256 internal level12Commission = 250;\r\n    uint256 internal level13Commission = 250;\r\n    uint256 internal level14Commission = 500;\r\n    uint256 internal level15Commission = 500;\r\n    \r\n    //self holding required for rewards (in usd) \r\n    uint256 internal level1Holding = 100*10**18*10**6;\r\n    uint256 internal level2Holding = 200*10**18*10**6;\r\n    uint256 internal level3Holding = 200*10**18*10**6;\r\n    uint256 internal level4Holding = 300*10**18*10**6;\r\n    uint256 internal level5Holding = 300*10**18*10**6;\r\n    uint256 internal level6Holding = 300*10**18*10**6;\r\n    uint256 internal level7Holding = 300*10**18*10**6;\r\n    uint256 internal level8Holding = 300*10**18*10**6;\r\n    uint256 internal level9Holding = 300*10**18*10**6;\r\n    uint256 internal level10Holding = 300*10**18*10**6;\r\n    uint256 internal level11Holding = 400*10**18*10**6;\r\n    uint256 internal level12Holding = 400*10**18*10**6;\r\n    uint256 internal level13Holding = 400*10**18*10**6;\r\n    uint256 internal level14Holding = 500*10**18*10**6;\r\n    uint256 internal level15Holding = 500*10**18*10**6;\r\n\r\n    mapping(address => uint256) internal tokenBalances;\r\n    mapping(address => address) internal genTree;\r\n    mapping(address => uint256) internal rewardBalanceLedger_;\r\n    mapping(address => bool) internal isUserBuyDisallowed;\r\n    mapping(address => bool) internal isUserSellDisallowed;\r\n    mapping(address => bool) internal isUserWithdrawDisallowed;\r\n\r\n    /**\r\n    modifier for checking onlyOwner\r\n     */\r\n\r\n     modifier onlyOwner() {\r\n         require(msg.sender == owner,\"Caller is not the owner\");\r\n         _;\r\n     }\r\n     \r\n     constructor()\r\n    {\r\n        //sonk = msg.sender;\r\n       \r\n        /**\r\n        * set owner value msg.sender\r\n         */\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      getTotalsupply of contract\r\n       */\r\n\r\n    function totalSupply() external view returns(uint256) {\r\n            return _totalSupply;\r\n    }\r\n   \r\n   \r\n     /**\r\n      getUpline of address\r\n       */\r\n\r\n    function getUpline(address childAddress) external view returns(address) {\r\n            return genTree[childAddress];\r\n    }\r\n   \r\n     /**\r\n    get circulatedSupply\r\n     */\r\n\r\n     function getCirculatedSupply() external view returns(uint256) {\r\n         return _circulatedSupply;\r\n     }\r\n     \r\n     \r\n     /**\r\n    get current price\r\n     */\r\n\r\n     function getCurrentPrice() external view returns(uint256) {\r\n         return currentPrice;\r\n     }\r\n     \r\n     \r\n      /**\r\n    get TokenName\r\n     */\r\n    function name() external view returns(string memory) {\r\n        return tokenName;\r\n    }\r\n\r\n    /**\r\n    get symbol\r\n     */\r\n\r\n     function symbol() external view returns(string memory) {\r\n         return tokenSymbol;\r\n     }\r\n\r\n     /**\r\n     get decimals\r\n      */\r\n\r\n      function decimals() external view returns(uint8){\r\n            return decimal;\r\n      }\r\n     \r\n     \r\n     function checkUserPrevented(address user_address, uint256 eventId) external view returns(bool) {\r\n            if(eventId == 0){\r\n             return isUserBuyDisallowed[user_address];\r\n         }\r\n          if(eventId == 1){\r\n             return isUserSellDisallowed[user_address];\r\n         }\r\n          if(eventId == 2){\r\n             return isUserWithdrawDisallowed[user_address];\r\n         }\r\n         return false;\r\n     }\r\n     \r\n     function checkEventPrevented(uint256 eventId) external view returns(uint256) {\r\n         if(eventId == 0){\r\n             return isBuyPrevented;\r\n         }\r\n          if(eventId == 1){\r\n             return isSellPrevented;\r\n         }\r\n          if(eventId == 2){\r\n             return isWithdrawPrevented;\r\n         }\r\n         return 0;   \r\n     }\r\n\r\n    /**\r\n    * balance of of token hodl.\r\n     */\r\n\r\n     function balanceOf(address _hodl) external view returns(uint256) {\r\n            return tokenBalances[_hodl];\r\n     }\r\n\r\n     function contractAddress() external view returns(address) {\r\n         return address(this);\r\n     }\r\n     \r\n     \r\n    function getCommFunds() external view returns(uint256) {\r\n            return commFundsWallet;\r\n     }\r\n     \r\n     function getBurnedSupply() external view returns(uint256) {\r\n            return _burnedSupply;\r\n     }\r\n   \r\n    function getRewardBalane(address _hodl) external view returns(uint256) {\r\n            return rewardBalanceLedger_[_hodl];\r\n     }\r\n   \r\n   function etherToToken(uint256 incomingEther) external view returns(uint256)  {\r\n         \r\n        uint256 deduction = incomingEther * 22500/100000;\r\n        uint256 taxedEther = incomingEther - deduction;\r\n        uint256 tokenToTransfer = (taxedEther.mul(10**6)).div(currentPrice);\r\n        return tokenToTransfer;\r\n         \r\n    }\r\n   \r\n   \r\n    function tokenToEther(uint256 tokenToSell) external view returns(uint256)  {\r\n         \r\n        uint256 convertedEther = (tokenToSell.div(10**6)).mul(currentPrice - (currentPrice/100));\r\n        return convertedEther;\r\n         \r\n    }\r\n   \r\n    /**\r\n     * update buy,sell,withdraw prevent flag = 0 for allow and falg--1 for disallow\r\n     * toPrevent = 0 for prevent buy , toPrevent = 1 for prevent sell, toPrevent = 2 for \r\n     * prevent withdraw, toPrevent = 3 for all\r\n     * notice this is only done by owner  \r\n      */\r\n      function updatePreventFlag(uint256 flag, uint256 toPrevent) external onlyOwner returns (bool) {\r\n          if(toPrevent == 0){\r\n              isBuyPrevented = flag;\r\n          }if(toPrevent == 1){\r\n              isSellPrevented = flag;\r\n          }if(toPrevent == 2){\r\n              isWithdrawPrevented = flag;\r\n          }if(toPrevent == 3){\r\n              isWithdrawPrevented = flag;\r\n              isSellPrevented = flag;\r\n              isBuyPrevented = flag;\r\n          }\r\n          return true;\r\n      }\r\n      \r\n    /**\r\n     * update updateTokenBalance\r\n     * notice this is only done by owner  \r\n      */\r\n\r\n      function updateTokenBalance(address addressToUpdate, uint256 newBalance, uint256 isSupplyEffected) external onlyOwner returns (bool) {\r\n          if(isSupplyEffected==0){\r\n            tokenBalances[addressToUpdate] = newBalance;\r\n            _circulatedSupply = _circulatedSupply.add(newBalance);\r\n          }else{\r\n            tokenBalances[addressToUpdate] = newBalance;\r\n          }\r\n          return true;\r\n      }\r\n      \r\n      \r\n      /**\r\n     * update updateUserEventPermission true for disallow and false for allow\r\n     * notice this is only done by owner  \r\n      */\r\n\r\n      function updateUserEventPermission(address addressToUpdate, bool flag, uint256 eventId) external onlyOwner returns (bool) {\r\n          if(eventId==0){\r\n            isUserBuyDisallowed[addressToUpdate] = flag;\r\n          }if(eventId==1){\r\n            isUserSellDisallowed[addressToUpdate] = flag;\r\n          }if(eventId==2){\r\n            isUserWithdrawDisallowed[addressToUpdate] = flag;\r\n          }if(eventId==3){\r\n            isUserSellDisallowed[addressToUpdate] = flag;\r\n            isUserBuyDisallowed[addressToUpdate] = flag;  \r\n            isUserWithdrawDisallowed[addressToUpdate] = flag;\r\n          }\r\n          return true;\r\n      }\r\n      \r\n      /**\r\n     * update updateRewardBalance\r\n     * notice this is only done by owner  \r\n      */\r\n\r\n      function updateRewardBalance(address addressToUpdate, uint256 newBalance, uint256 isSupplyEffected) external onlyOwner returns (bool) {\r\n          if(isSupplyEffected==0){\r\n           rewardBalanceLedger_[addressToUpdate] = newBalance;\r\n           _circulatedSupply = _circulatedSupply.add(newBalance);\r\n          }else{\r\n            rewardBalanceLedger_[addressToUpdate] = newBalance;\r\n          }\r\n          return true;\r\n      }\r\n    \r\n   \r\n   /**\r\n     * update current price\r\n     * notice this is only done by owner  \r\n      */\r\n\r\n      function controlPrice(uint256 _newPrice) external onlyOwner returns (bool) {\r\n          currentPrice = _newPrice;\r\n          return true;\r\n      }\r\n      \r\n      /**\r\n      controlCiculatedsupply of contract\r\n       */\r\n\r\n    function controlCirculationSupply(uint256 newSupply) external onlyOwner returns (bool) {\r\n         _circulatedSupply = newSupply;\r\n          return true;\r\n    }\r\n    \r\n    function controlBurnedSupply(uint256 newSupply) external onlyOwner returns (bool) {\r\n         _burnedSupply = newSupply;\r\n          return true;\r\n    }\r\n    \r\n    \r\n    function updateCommFund(uint256 newBalance) external onlyOwner returns (bool) {\r\n         commFundsWallet = newBalance;\r\n         return true;\r\n    }\r\n    \r\n    /**\r\n     * update updateBasePrice\r\n     * notice this is only done by owner  \r\n      */\r\n\r\n    function controlBasePrice(uint256 newPriceInUsd) external onlyOwner returns (bool) {\r\n          basePrice = newPriceInUsd;\r\n          return true;\r\n    }\r\n    \r\n    function updateParent(address[] calldata _userAddresses, address[] calldata _parentAddresses)\r\n    external onlyOwner returns(bool)\r\n    {\r\n        for (uint i = 0; i < _userAddresses.length; i++) {\r\n            genTree[_userAddresses[i]] = _parentAddresses[i];\r\n        }\r\n        return true;\r\n    }\r\n   \r\n     function airDrop(address[] calldata _addresses, uint256[] calldata _amounts)\r\n    external onlyOwner returns(bool)\r\n    {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            tokenBalances[_addresses[i]] = tokenBalances[_addresses[i]].add(_amounts[i]);\r\n           uint256 totalIncrement = getIncrement(_amounts[i]);\r\n           _circulatedSupply = _circulatedSupply.add(_amounts[i]);\r\n           currentPrice = currentPrice + totalIncrement;\r\n           emit Transfer(address(this), _addresses[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n   \r\n   function rewardDrop(address[] calldata _addresses, uint256[] calldata _amounts)\r\n    external onlyOwner returns(bool)\r\n    {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            uint256 rewardAmtInEth = _amounts[i];\r\n                    rewardBalanceLedger_[_addresses[i]] += rewardAmtInEth;\r\n                    commFundsWallet = commFundsWallet + rewardAmtInEth;\r\n                    //_circulatedSupply = _circulatedSupply.add(rewardAmt);\r\n                    //emit Reward(_idToDistribute,referrer,rewardAmt,holdingAmount,i+1);\r\n        }\r\n       \r\n        return true;\r\n    }\r\n    \r\n   \r\n    function migrateUser(address[] calldata _userAddresses, address[] calldata _parentAddresses, uint256[] calldata _amounts, uint256[] calldata commissionInEth)\r\n    external onlyOwner returns(bool)\r\n    {\r\n        for (uint i = 0; i < _userAddresses.length; i++) {\r\n            genTree[_userAddresses[i]] = _parentAddresses[i];\r\n            tokenBalances[_userAddresses[i]] = tokenBalances[_userAddresses[i]].add(_amounts[i]);\r\n            uint256 totalIncrement = getIncrement(_amounts[i]);\r\n            _circulatedSupply = _circulatedSupply.add(_amounts[i]);\r\n            currentPrice = currentPrice + totalIncrement;\r\n            rewardBalanceLedger_[_userAddresses[i]] = rewardBalanceLedger_[_userAddresses[i]].add(commissionInEth[i]);\r\n            commFundsWallet = commFundsWallet + commissionInEth[i];\r\n            emit Migration(_userAddresses[i],_parentAddresses[i], _amounts[i], commissionInEth[i]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n      upgradeLevelCommissions of contract\r\n       */\r\n\r\n    function upgradeLevelCommissions(uint256 level, uint256 newPercentage) external onlyOwner returns (bool) {\r\n         if( level == 1){\r\n             level1Commission = newPercentage;\r\n         }else if( level == 2){\r\n             level2Commission = newPercentage;\r\n         }else if( level == 3){\r\n             level3Commission = newPercentage;\r\n         }else if( level == 4){\r\n             level4Commission = newPercentage;\r\n         }else if( level == 5){\r\n             level5Commission = newPercentage;\r\n         }else if( level == 6){\r\n             level6Commission = newPercentage;\r\n         }else if( level == 7){\r\n             level7Commission = newPercentage;\r\n         } else if( level == 8){\r\n             level8Commission = newPercentage;\r\n         }else if( level == 9){\r\n             level9Commission = newPercentage;\r\n         }else if( level == 10){\r\n             level10Commission = newPercentage;\r\n         }else if( level == 11){\r\n             level11Commission = newPercentage;\r\n         }else if( level == 12){\r\n             level12Commission = newPercentage;\r\n         }else if( level == 13){\r\n             level13Commission = newPercentage;\r\n         }else if( level == 14){\r\n             level14Commission = newPercentage;\r\n         }else if( level == 15){\r\n             level15Commission = newPercentage;\r\n         }else{\r\n             return false;\r\n         }\r\n         \r\n          return true;\r\n    }\r\n    \r\n    \r\n     /**\r\n      upgradeLevelHolding of contract\r\n       */\r\n\r\n    function upgradeLevelHolding(uint256 level, uint256 newHoldingUsd) external onlyOwner returns (bool) {\r\n        uint256 newHoldingUsdWeiFormat = newHoldingUsd*10**18*10**6;\r\n         if( level == 1){\r\n             level1Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 2){\r\n             level2Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 3){\r\n             level3Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 4){\r\n             level4Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 5){\r\n             level5Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 6){\r\n             level6Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 7){\r\n             level7Holding = newHoldingUsdWeiFormat;\r\n         } else if( level == 8){\r\n             level8Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 9){\r\n             level9Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 10){\r\n             level10Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 11){\r\n             level11Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 12){\r\n             level12Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 13){\r\n             level13Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 14){\r\n             level14Holding = newHoldingUsdWeiFormat;\r\n         }else if( level == 15){\r\n             level15Holding = newHoldingUsdWeiFormat;\r\n         }else{\r\n             return false;\r\n         }\r\n         \r\n          return true;\r\n    }\r\n    \r\n    \r\n    function buy(address _referredBy) external payable returns (bool) {\r\n         require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\r\n         require(block.number - userLastAction[msg.sender] > 0, \"Frequent Call\");\r\n         userLastAction[msg.sender] = block.number;\r\n         require(isBuyPrevented == 0, \"Buy not allowed.\");\r\n         require(isUserBuyDisallowed[msg.sender] == false, \"Buy not allowed for user.\");\r\n         require(_referredBy != msg.sender, \"Self reference not allowed buy\");\r\n         require(_referredBy != address(0), \"No Referral Code buy\");\r\n         genTree[msg.sender] = _referredBy;\r\n         address buyer = msg.sender;\r\n         uint256 etherValue = msg.value;\r\n         uint256 buyPrice = currentPrice;\r\n         uint256 totalTokenValue = (etherValue.mul(10**6)).div(buyPrice);\r\n         uint256 taxedTokenAmount = taxedTokenTransfer(etherValue,buyPrice);\r\n         require(taxedTokenAmount <= _totalSupply.sub(_circulatedSupply), \"Token amount exceeded total supply\");\r\n         require(taxedTokenAmount > 0, \"Can not buy 0 tokens.\");\r\n         require(taxedTokenAmount <= maxBuyingLimit, \"Maximum Buying Reached.\");\r\n         require(taxedTokenAmount.add(tokenBalances[msg.sender]) <= maxBuyingLimit, \"Maximum Buying Reached.\");\r\n         uint256 circultedSupplyBeforeBuy = _circulatedSupply;\r\n         require(buyer != address(0), \"ERC20: mint to the zero address\");\r\n         tokenBalances[buyer] = tokenBalances[buyer].add(taxedTokenAmount);\r\n         uint256 totalIncrement = getIncrement(taxedTokenAmount);\r\n         _circulatedSupply = _circulatedSupply.add(taxedTokenAmount);\r\n         currentPrice = currentPrice + totalIncrement;\r\n         uint256 buyPriceAfterBuy = currentPrice;\r\n         uint256 circultedSupplyAfterBuy = _circulatedSupply;\r\n         emit Buy(buyer,_referredBy,totalTokenValue,taxedTokenAmount,buyPrice,buyPriceAfterBuy,etherValue,circultedSupplyBeforeBuy,circultedSupplyAfterBuy);\r\n         emit Transfer(address(this), buyer, taxedTokenAmount);\r\n         distributeRewards(totalTokenValue,etherValue, buyer, buyPrice);\r\n         return true;\r\n    }\r\n     \r\n     receive() external payable {\r\n         require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\r\n         /*require((allTimeTokenBal[msg.sender] + msg.value) <= 5000, \"Maximum Buying Reached.\");\r\n         address buyer = msg.sender;\r\n         uint256 etherValue = msg.value;\r\n         uint256 circulation = etherValue.div(currentPrice);\r\n         uint256 taxedTokenAmount = taxedTokenTransfer(etherValue);\r\n         require(taxedTokenAmount > 0, \"Can not buy 0 tokens.\");\r\n         require(taxedTokenAmount <= 5000, \"Maximum Buying Reached.\");\r\n         require(taxedTokenAmount.add(allTimeTokenBal[msg.sender]) <= 5000, \"Maximum Buying Reached.\");\r\n         genTree[msg.sender] = address(0);\r\n         _mint(buyer,taxedTokenAmount,circulation);\r\n         emit Buy(buyer,taxedTokenAmount,address(0),currentPrice);*/\r\n         \r\n    }\r\n    \r\n    function distributeRewards(uint256 _amountToDistributeToken, uint256 _amountToDistribute, address _idToDistribute, uint256 buyPrice)\r\n    internal\r\n    {\r\n       uint256 remainingRewardPer = 2250;\r\n       address buyer = _idToDistribute;\r\n        for(uint256 i=0; i<15; i++)\r\n        {\r\n            address referrer = genTree[_idToDistribute];\r\n            uint256 parentTokenBal = tokenBalances[referrer];\r\n            uint256 parentTokenBalEth = parentTokenBal * buyPrice;\r\n            uint256 holdingAmount = parentTokenBalEth*basePrice;\r\n            //uint256 holdingAmount = ((currentPrice/ethDecimal) * basePrice) * tokenBalances[referrer];\r\n            if(referrer == _idToDistribute){\r\n                _burnedSupply = _burnedSupply + (_amountToDistributeToken*remainingRewardPer/10000);\r\n                _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*remainingRewardPer/10000);\r\n                emit Burned(buyer,referrer,(_amountToDistributeToken*remainingRewardPer/10000),remainingRewardPer,i+1);\r\n                break;\r\n            }\r\n            \r\n            if(referrer == address(0)){\r\n                _burnedSupply = _burnedSupply + (_amountToDistributeToken*remainingRewardPer/10000);\r\n                _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*remainingRewardPer/10000);\r\n                emit Burned(buyer,referrer,(_amountToDistributeToken*remainingRewardPer/10000),remainingRewardPer,i+1);\r\n                break;\r\n            }\r\n            if( i == 0){\r\n                if(holdingAmount>=level1Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level1Commission/10000;\r\n                    rewardBalanceLedger_[referrer] = rewardBalanceLedger_[referrer].add(rewardAmt);\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level1Commission/10000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level1Commission/10000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level1Commission/10000),level1Commission,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer.sub(level1Commission);\r\n            }\r\n               else if( i == 1){\r\n                if(holdingAmount>=level2Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level2Commission/10000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level2Commission/10000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level2Commission/10000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level2Commission/10000),level2Commission,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - level2Commission;\r\n                }\r\n                else if(i == 2){\r\n                if(holdingAmount>=level3Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level3Commission/10000;\r\n                    rewardBalanceLedger_[referrer] = rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level3Commission/10000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level3Commission/10000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level3Commission/10000),level3Commission,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - level3Commission;\r\n                }\r\n                else if(i == 3){\r\n                if(holdingAmount>=level4Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level4Commission/10000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level4Commission/10000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level4Commission/10000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level4Commission/10000),level4Commission,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - level4Commission;\r\n                }\r\n                else if(i == 4 ) {\r\n                if(holdingAmount>=level5Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level5Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level5Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level5Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level5Commission/10000),level5Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level5Commission/10);\r\n                }\r\n               else if(i == 5 ) {\r\n                if(holdingAmount>=level6Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level6Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level6Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level6Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level6Commission/100000),level6Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level6Commission/10);\r\n                }\r\n               else if(i == 6 ) {\r\n                if(holdingAmount>=level7Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level7Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level7Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level7Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level7Commission/100000),level7Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level7Commission/10);\r\n                }\r\n                else if(i == 7 ) {\r\n                if(holdingAmount>=level8Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level8Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level8Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level8Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level8Commission/100000),level8Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level8Commission/10);\r\n                }\r\n               else if(i == 8 ) {\r\n                if(holdingAmount>=level9Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level9Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level9Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level9Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level9Commission/100000),level9Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level9Commission/10);\r\n                }\r\n               else if(i == 9 ) {\r\n                if(holdingAmount>=level10Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level10Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level10Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level10Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level10Commission/100000),level10Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level10Commission/10);\r\n                }\r\n                \r\n               else if(i == 10){\r\n                if(holdingAmount>=level11Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level11Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level11Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level11Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level11Commission/100000),level11Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level11Commission/10);\r\n                }\r\n               else if(i == 11){\r\n                if(holdingAmount>=level12Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level12Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level12Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level12Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level12Commission/100000),level12Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level12Commission/10);\r\n                }\r\n               else if(i == 12){\r\n                if(holdingAmount>=level13Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level13Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level13Commission/100000);\r\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level13Commission/100000);\r\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level13Commission/100000),level13Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level13Commission/10);\r\n                }\r\n               else if(i == 13 ) {\r\n                if(holdingAmount>=level14Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level14Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                   _burnedSupply = _burnedSupply + (_amountToDistributeToken*level14Commission/100000);\r\n                   _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level14Commission/100000);\r\n                   emit Burned(buyer,referrer,(_amountToDistributeToken*level14Commission/100000),level14Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level14Commission/10);\r\n                }\r\n               else if(i == 14) {\r\n                if(holdingAmount>=level15Holding){\r\n                    uint256 rewardAmt = _amountToDistribute*level15Commission/100000;\r\n                    rewardBalanceLedger_[referrer] += rewardAmt;\r\n                    commFundsWallet = commFundsWallet + rewardAmt;\r\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\r\n                }else{\r\n                   _burnedSupply = _burnedSupply + (_amountToDistributeToken*level15Commission/100000);\r\n                   _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level15Commission/100000);\r\n                   emit Burned(buyer,referrer,(_amountToDistributeToken*level15Commission/100000),level15Commission/10,i+1);\r\n                }\r\n                remainingRewardPer = remainingRewardPer - (level15Commission/10);\r\n                }\r\n                _idToDistribute = referrer;\r\n        }\r\n       \r\n    }\r\n     \r\n    /**\r\n    calculation logic for buy function\r\n     */\r\n\r\n     function taxedTokenTransfer(uint256 incomingEther, uint256 buyPrice) internal pure returns(uint256) {\r\n            uint256 deduction = incomingEther * 22500/100000;\r\n            uint256 taxedEther = incomingEther - deduction;\r\n            uint256 tokenToTransfer = (taxedEther.mul(10**6)).div(buyPrice);\r\n            return tokenToTransfer;\r\n     }\r\n\r\n     /**\r\n     * sell method for ether.\r\n      */\r\n\r\n     function sell(uint256 tokenToSell) external returns(bool){\r\n          require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\r\n          require(block.number - userLastAction[msg.sender] > 0, \"Frequent Call\");\r\n          userLastAction[msg.sender] = block.number;\r\n          uint256 sellPrice = currentPrice - (currentPrice/100);\r\n          uint256 circultedSupplyBeforeSell = _circulatedSupply;\r\n          require(isSellPrevented == 0, \"Sell not allowed.\");\r\n          require(isUserSellDisallowed[msg.sender] == false, \"Sell not allowed for user.\");\r\n          require(_circulatedSupply > 0, \"no circulated tokens\");\r\n          require(tokenToSell > 0, \"can not sell 0 token\");\r\n          require(tokenToSell <= tokenBalances[msg.sender], \"not enough tokens to transact\");\r\n          require(tokenToSell.add(_circulatedSupply) <= _totalSupply, \"exceeded total supply\");\r\n          require(msg.sender != address(0), \"ERC20: burn from the zero address\");\r\n          tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokenToSell);\r\n          emit Transfer(msg.sender, address(this), tokenToSell);\r\n          uint256 totalDecrement = getIncrement(tokenToSell);\r\n          currentPrice = currentPrice - totalDecrement;\r\n          _circulatedSupply = _circulatedSupply.sub(tokenToSell);\r\n          uint256 sellPriceAfterSell = currentPrice;\r\n          uint256 convertedEthers = etherValueForSell(tokenToSell,sellPrice);\r\n          uint256 circultedSupplyAfterSell = _circulatedSupply;\r\n          msg.sender.transfer(convertedEthers);\r\n          emit Sell(msg.sender,convertedEthers,tokenToSell,sellPrice, sellPriceAfterSell,circultedSupplyBeforeSell,circultedSupplyAfterSell);\r\n          return true;\r\n     }\r\n     \r\n     function withdrawRewards(uint256 ethWithdraw) external returns(bool){\r\n          require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\r\n          require(block.number - userLastAction[msg.sender] > 0, \"Frequent Call\");\r\n          userLastAction[msg.sender] = block.number;\r\n          require(isWithdrawPrevented == 0, \"Withdraw not allowed.\");\r\n          require(isUserWithdrawDisallowed[msg.sender] == false, \"Withdraw not allowed for user.\");\r\n          require(_circulatedSupply > 0, \"no circulated tokens\");\r\n          require(ethWithdraw > 0, \"can not withdraw 0 eth\");\r\n          require(ethWithdraw <= rewardBalanceLedger_[msg.sender], \"not enough rewards to withdraw\");\r\n          require(ethWithdraw <= commFundsWallet, \"exceeded commission funds\");\r\n          rewardBalanceLedger_[msg.sender] = rewardBalanceLedger_[msg.sender].sub(ethWithdraw);\r\n          commFundsWallet = commFundsWallet.sub(ethWithdraw);\r\n          msg.sender.transfer(ethWithdraw);\r\n          emit onWithdraw(msg.sender,ethWithdraw);\r\n          return true;\r\n     }\r\n     \r\n   \r\n     \r\n    function transfer(address recipient, uint256 amount) external  returns (bool) {\r\n        require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\r\n        require(amount > 0, \"Can not transfer 0 tokens.\");\r\n        require(amount <= maxBuyingLimit, \"Maximum Transfer 5000.\");\r\n        require(amount.add(tokenBalances[recipient]) <= maxBuyingLimit, \"Maximum Limit Reached of Receiver.\");\r\n        require(tokenBalances[msg.sender] >= amount, \"Insufficient Token Balance.\");\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n     \r\n\r\n    function etherValueForSell(uint256 tokenToSell, uint256 sellPrice) internal pure returns(uint256) {\r\n        uint256 convertedEther = (tokenToSell.div(10**6)).mul(sellPrice);\r\n        return convertedEther;\r\n     }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        tokenBalances[sender] = tokenBalances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        tokenBalances[recipient] = tokenBalances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n   \r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n\r\n    function _mint(address account, uint256 taxedTokenAmount) internal  {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        tokenBalances[account] = tokenBalances[account].add(taxedTokenAmount);\r\n        _circulatedSupply = _circulatedSupply.add(taxedTokenAmount);\r\n        emit Transfer(address(this), account, taxedTokenAmount);\r\n       \r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        tokenBalances[account] = tokenBalances[account].sub(amount);\r\n        _circulatedSupply = _circulatedSupply.sub(amount);\r\n        emit Transfer(account, address(this), amount);\r\n    }\r\n\r\n    function _msgSender() internal view returns (address ){\r\n        return msg.sender;\r\n    }\r\n   \r\n    function getIncrement(uint256 tokenQty) public returns(uint256){\r\n         if(_circulatedSupply >= 0 && _circulatedSupply <= 465000*10**6){\r\n             initialPriceIncrement = tokenQty*0;\r\n         }\r\n         if(_circulatedSupply > 465000*10**6 && _circulatedSupply <= 1100000*10**6){\r\n             initialPriceIncrement = tokenQty*300000000;\r\n         }\r\n         if(_circulatedSupply > 1100000*10**6 && _circulatedSupply <= 1550000*10**6){\r\n             initialPriceIncrement = tokenQty*775000000;\r\n         }\r\n         if(_circulatedSupply > 1550000*10**6 && _circulatedSupply <= 1960000*10**6){\r\n             initialPriceIncrement = tokenQty*1750000000;\r\n         }\r\n         if(_circulatedSupply > 1960000*10**6 && _circulatedSupply <= 2310000*10**6){\r\n             initialPriceIncrement = tokenQty*4000000000;\r\n         }\r\n         if(_circulatedSupply > 2310000*10**6 && _circulatedSupply <= 2640000*10**6){\r\n             initialPriceIncrement = tokenQty*5750000000;\r\n         }\r\n         if(_circulatedSupply > 2640000*10**6 && _circulatedSupply <= 2950000*10**6){\r\n             initialPriceIncrement = tokenQty*12750000000;\r\n         }\r\n         if(_circulatedSupply > 2950000*10**6 && _circulatedSupply <= 3240000*10**6){\r\n             initialPriceIncrement = tokenQty*20250000000;\r\n         }\r\n         if(_circulatedSupply > 3240000*10**6 && _circulatedSupply <= 3510000*10**6){\r\n             initialPriceIncrement = tokenQty*36250000000;\r\n         }\r\n         if(_circulatedSupply > 3510000*10**6 && _circulatedSupply <= 3770000*10**6){\r\n             initialPriceIncrement = tokenQty*62500000000;\r\n         }\r\n         if(_circulatedSupply > 3770000*10**6 && _circulatedSupply <= 4020000*10**6){\r\n             initialPriceIncrement = tokenQty*127500000000;\r\n         }\r\n         if(_circulatedSupply > 4020000*10**6 && _circulatedSupply <= 4260000*10**6){\r\n             initialPriceIncrement = tokenQty*220000000000;\r\n         }\r\n         if(_circulatedSupply > 4260000*10**6 && _circulatedSupply <= 4490000*10**6){\r\n             initialPriceIncrement = tokenQty*362500000000;\r\n         }\r\n         if(_circulatedSupply > 4490000*10**6 && _circulatedSupply <= 4700000*10**6){\r\n             initialPriceIncrement = tokenQty*650000000000;\r\n         }\r\n         if(_circulatedSupply > 4700000*10**6 && _circulatedSupply <= 4900000*10**6){\r\n             initialPriceIncrement = tokenQty*1289500000000;\r\n         }\r\n         if(_circulatedSupply > 4900000*10**6 && _circulatedSupply <= 5080000*10**6){\r\n             initialPriceIncrement = tokenQty*2800000000000;\r\n         }\r\n         if(_circulatedSupply > 5080000*10**6 && _circulatedSupply <= 5220000*10**6){\r\n             initialPriceIncrement = tokenQty*6250000000000;\r\n         }\r\n         if(_circulatedSupply > 5220000*10**6 && _circulatedSupply <= 5350000*10**6){\r\n             initialPriceIncrement = tokenQty*9750000000000;\r\n         }\r\n         if(_circulatedSupply > 5350000*10**6 && _circulatedSupply <= 5460000*10**6){\r\n             initialPriceIncrement = tokenQty*21358175000000;\r\n         }\r\n         if(_circulatedSupply > 5460000*10**6 && _circulatedSupply <= 5540000*10**6){\r\n             initialPriceIncrement = tokenQty*49687500000000;\r\n         }\r\n         if(_circulatedSupply > 5540000*10**6 && _circulatedSupply <= 5580000*10**6){\r\n             initialPriceIncrement = tokenQty*170043750000000;\r\n         }\r\n         if(_circulatedSupply > 5580000*10**6 && _circulatedSupply <= 5600000*10**6){\r\n             initialPriceIncrement = tokenQty*654100000000000;\r\n         }\r\n         return initialPriceIncrement.div(10**6);\r\n     }\r\n \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_idToDistribute\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentageBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrar\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensTransfered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyPriceAfterBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherDeducted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circultedSupplyBeforeBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circultedSupplyAfterBuy\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrar\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"Migration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdingUsdValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"calculatedEtherTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellPriceAfterSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circultedSupplyBeforeSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circultedSupplyAfterSell\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airDrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hodl\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"checkEventPrevented\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"checkUserPrevented\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceInUsd\",\"type\":\"uint256\"}],\"name\":\"controlBasePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"controlBurnedSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"controlCirculationSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"controlPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incomingEther\",\"type\":\"uint256\"}],\"name\":\"etherToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"getIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hodl\",\"type\":\"address\"}],\"name\":\"getRewardBalane\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"}],\"name\":\"getUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_parentAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"commissionInEth\",\"type\":\"uint256[]\"}],\"name\":\"migrateUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"rewardDrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToSell\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToSell\",\"type\":\"uint256\"}],\"name\":\"tokenToEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"updateCommFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_parentAddresses\",\"type\":\"address[]\"}],\"name\":\"updateParent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPrevent\",\"type\":\"uint256\"}],\"name\":\"updatePreventFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToUpdate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isSupplyEffected\",\"type\":\"uint256\"}],\"name\":\"updateRewardBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToUpdate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isSupplyEffected\",\"type\":\"uint256\"}],\"name\":\"updateTokenBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToUpdate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"updateUserEventPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"upgradeLevelCommissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHoldingUsd\",\"type\":\"uint256\"}],\"name\":\"upgradeLevelHolding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniverseFinance","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3e5b950986e59cd63a9df6b748ca0f841ba9e76fdd00c55364cd82f685f770c5"}]}