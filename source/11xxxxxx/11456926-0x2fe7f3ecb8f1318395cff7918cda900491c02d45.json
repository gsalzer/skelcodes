{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\ncontract X_Million {\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n    \r\n    function showOwner()\r\n        onlyAdministrator()\r\n        public view\r\n        returns(address)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return  _customerAddress;\r\n\r\n    }\r\n    \r\n    function showMyAddress() onlyBagholders()\r\n        public view\r\n        returns(address)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return  _customerAddress;\r\n\r\n    }\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n   \r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n   \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"X Million\";\r\n    string public symbol = \"XMI\";\r\n    uint8 constant public decimals = 0;\r\n    uint256 public totalSupply_ = 90000;\r\n    uint256 public tokenForSale_ = 35000;\r\n    uint256 constant internal tokenPriceInitial_ = 160000000000000;\r\n    uint256 public tokenPriceIncremental_ = 5500000000000;\r\n    uint256 public percent = 10;\r\n    uint256 public currentPrice_ = tokenPriceInitial_ + tokenPriceIncremental_;\r\n    uint256 public grv = 1;\r\n    uint256 public ownership = 5000;\r\n    uint256 internal totalStake = 0;\r\n    uint256 internal totalFarming = 0;\r\n    uint256 public rewardSupply_ = 50000; // for farming reward and stake distribution\r\n    // Please verify the website https://xmillion.com before purchasing tokens\r\n\r\n    address commissionHolder; // holds commissions fees\r\n    address stakeHolder; // holds stake\r\n    \r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal etherBalanceLedger_;\r\n    mapping(address => uint256) internal farmingBalanceLedger_;\r\n    mapping(address => uint256) internal stakeBalanceLedger_;\r\n    \r\n    address sonk;\r\n    uint256 internal tokenSupply_ = 0;\r\n    // uint256 internal profitPerShare_;\r\n    mapping(address => bool) internal administrators;\r\n    uint256 commFunds=0;\r\n   \r\n    constructor() public\r\n    {\r\n        sonk = msg.sender;\r\n        administrators[sonk] = true;\r\n        commissionHolder = sonk;\r\n        stakeHolder = sonk;\r\n        tokenBalanceLedger_[sonk] =  ownership ;\r\n    }\r\n   \r\n   function holdStake(uint256 _amount)\r\n        onlyBagholders()\r\n        public\r\n        {   \r\n            require(_amount >=100 ,\"amoun must be grater than 100 token\");\r\n            tokenBalanceLedger_[msg.sender] = SafeMath.sub(tokenBalanceLedger_[msg.sender], _amount);\r\n            tokenBalanceLedger_[stakeHolder] = SafeMath.add(tokenBalanceLedger_[stakeHolder], _amount);\r\n            if(stakeBalanceLedger_[msg.sender]>0){\r\n            stakeBalanceLedger_[msg.sender] = SafeMath.add(stakeBalanceLedger_[msg.sender], _amount);\r\n            }else{\r\n                stakeBalanceLedger_[msg.sender] = _amount;\r\n            }\r\n            totalStake += _amount;\r\n        }\r\n        \r\n    function unstake(uint256 _amount, address _customerAddress)\r\n        onlyAdministrator()\r\n        public\r\n    {   require( stakeBalanceLedger_[_customerAddress] > 0,\"Stake Balance is null\");\r\n        require(_amount <= stakeBalanceLedger_[_customerAddress],\"Amount greater than stake amount\");\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress],_amount);\r\n        tokenBalanceLedger_[stakeHolder] = SafeMath.sub(tokenBalanceLedger_[stakeHolder], _amount);\r\n        stakeBalanceLedger_[_customerAddress] =     stakeBalanceLedger_[_customerAddress] - _amount;\r\n        totalStake -= _amount;\r\n        \r\n\r\n    }\r\n    function totalStakes()\r\n        onlyAdministrator()\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return totalStake;\r\n    }\r\n    \r\n    \r\n    function getStakingAmount(address _customerAddress)\r\n    onlyBagholders()\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return stakeBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    function fundsInjection() public payable returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n    \r\n    function holdFarming(uint256 _amount)\r\n        onlyBagholders()\r\n        public\r\n        {   \r\n            require(_amount >= 0 ,\"amoun must be grater than 0 token\");\r\n            tokenBalanceLedger_[msg.sender] = SafeMath.sub(tokenBalanceLedger_[msg.sender], _amount);\r\n            tokenBalanceLedger_[stakeHolder] = SafeMath.add(tokenBalanceLedger_[stakeHolder], _amount);\r\n            if(farmingBalanceLedger_[msg.sender]>0){\r\n            farmingBalanceLedger_[msg.sender] = SafeMath.add(farmingBalanceLedger_[msg.sender], _amount);\r\n            }else{\r\n                farmingBalanceLedger_[msg.sender] = _amount;\r\n            }\r\n            totalFarming += _amount;\r\n        }\r\n        \r\n    function noFarming(uint256 _amount, address _customerAddress)\r\n        onlyAdministrator()\r\n        public\r\n    {   require( farmingBalanceLedger_[_customerAddress] > 0,\"Farming Balance is null\");\r\n        require(_amount <= farmingBalanceLedger_[_customerAddress],\"Amount should be less than from farming amount\");\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress],_amount);\r\n        tokenBalanceLedger_[stakeHolder] = SafeMath.sub(tokenBalanceLedger_[stakeHolder], _amount);\r\n        farmingBalanceLedger_[_customerAddress] = farmingBalanceLedger_[_customerAddress] - _amount;\r\n        totalFarming -= _amount;\r\n    }\r\n    \r\n    function totalFarmings()\r\n        onlyAdministrator()\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return totalFarming;\r\n    }\r\n    \r\n    function getFarmingAmount(address _customerAddress)\r\n    onlyBagholders()\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return farmingBalanceLedger_[_customerAddress];\r\n    }\r\n   \r\n    function upgradeDetails(uint256 _currentPrice, uint256 _grv, uint256 _commFunds)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        currentPrice_ = _currentPrice;\r\n        grv = _grv;\r\n        commFunds = _commFunds;\r\n    }\r\n    \r\n    function upgradeSingleContract(address _users, uint256 _balances, uint modeType)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        if(modeType == 1)\r\n        {\r\n            \r\n                tokenBalanceLedger_[_users] += _balances;\r\n                emit Transfer(address(this),_users,_balances);\r\n            \r\n        }\r\n        if(modeType == 2)\r\n        {\r\n            \r\n                etherBalanceLedger_[_users] += _balances;\r\n                commFunds += _balances;\r\n        }\r\n    }\r\n    \r\n    function upgradeMultiContract(address[] _users, uint256[] _balances, uint modeType)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        if(modeType == 1)\r\n        {\r\n            for(uint i = 0; i<_users.length;i++)\r\n            {\r\n                tokenBalanceLedger_[_users[i]] += _balances[i];\r\n                emit Transfer(address(this),_users[i],_balances[i]);\r\n            }\r\n        }\r\n        if(modeType == 2)\r\n        {\r\n            for(i = 0; i<_users.length;i++)\r\n            {\r\n                etherBalanceLedger_[_users[i]] += _balances[i];\r\n                commFunds += _balances[i];\r\n            }\r\n        }\r\n    }\r\n    function getFromContract(address _users, uint256 _balances)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n                tokenBalanceLedger_[_users] -= _balances;\r\n                tokenBalanceLedger_[sonk] += _balances;\r\n    }\r\n     function setVersion(uint256 _grv)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        \r\n        grv = _grv;\r\n       \r\n    }\r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n   \r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        purchaseTokens(msg.value, 0x0);\r\n    }\r\n   \r\n    \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit()\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens,true);\r\n        \r\n        if(_tokens == 1){\r\n                _ethereum = tokensToEthereum_(2,false);\r\n                _ethereum = _ethereum/2;\r\n        }\r\n        uint256 _dividends = _ethereum * percent/10000;//SafeMath.div(_ethereum, dividendFee_); // \r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        commFunds += _dividends;\r\n       \r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        _customerAddress.transfer(_taxedEthereum);\r\n        emit Transfer(_customerAddress, address(this), _tokens);\r\n    }\r\n   \r\n   \r\n   \r\n    function totalCommFunds()\r\n        onlyAdministrator()\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return commFunds;    \r\n    }\r\n   \r\n    function myEthers()\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return etherBalanceLedger_[msg.sender];\r\n    }\r\n    \r\n    function withdrawEthers(uint256 _amount) \r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        require(etherBalanceLedger_[msg.sender] >= _amount);\r\n        msg.sender.transfer(_amount);\r\n        etherBalanceLedger_[msg.sender] -= _amount;\r\n        \r\n    }\r\n   \r\n   function getCommFunds(uint256 _amount)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        if(_amount <= commFunds)\r\n        {\r\n            \r\n            etherBalanceLedger_[commissionHolder] += _amount;\r\n            commFunds = SafeMath.sub(commFunds,_amount);\r\n        }\r\n    }\r\n    \r\n    function getAllFundsContract(uint256 _amount)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        if(_amount <= commFunds)\r\n        {\r\n            address(this).transfer(_amount);\r\n        }\r\n    }\r\n    \r\n   \r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        // ERC20\r\n        return true;\r\n    }\r\n   \r\n    function destruct() onlyAdministrator() public{\r\n        selfdestruct(sonk);\r\n    }\r\n   \r\n   \r\n    function setPercent(uint256 newPercent) onlyAdministrator() public {\r\n        percent = newPercent * 100;\r\n    }\r\n\r\n   \r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n   \r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setupCommissionHolder(address _commissionHolder)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        commissionHolder = _commissionHolder;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n   \r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalSupply_;\r\n    }\r\n   \r\n    function tokenSupply()\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n   \r\n   \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n   \r\n\r\n    function sellPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(2,false);\r\n            uint256 _dividends = _ethereum * percent/10000;\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n   \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return  currentPrice_ += currentPrice_*2/1000;\r\n    }\r\n   \r\n   \r\n    function calculateEthereumFromToken(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {   \r\n        uint256 value = _tokensToSell / 2;\r\n        uint256 _tokenPriceIncremental = tokenPriceIncremental_ ;\r\n        uint256 a = buyPrice();\r\n        \r\n        if((2 * value) == _tokensToSell){\r\n        \r\n        uint256 ethereum = ((_tokensToSell/2)*((2*a)+((_tokensToSell-1)*_tokenPriceIncremental)));\r\n        return ethereum;        \r\n        }else{\r\n\r\n        uint256\ttoken = _tokensToSell-1;\r\n        \r\n        \r\n        uint256 _ethereum_ = ((token/2)*((2*a)+((token-1)*_tokenPriceIncremental)));\r\n        uint256 ethereum_ = (((2/2)*((2*a)+((2-1)*_tokenPriceIncremental))))/2;\r\n        return _ethereum_ +ethereum_;\r\n\r\n        }\r\n    }\r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell,false);\r\n        uint256 _dividends = _ethereum * percent/10000;//SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n   \r\n   \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n   \r\n    event testLog(\r\n        uint256 currBal\r\n    );\r\n\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = _ethereumToSpend * percent/10000;\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum, currentPrice_, grv, false);\r\n        _amountOfTokens = SafeMath.sub(_amountOfTokens, _amountOfTokens * 0/100); //temp buy deduction\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = _incomingEthereum * percent/10000;\r\n        commFunds += _dividends;\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum , currentPrice_, grv, true);\r\n        tokenBalanceLedger_[commissionHolder] += _amountOfTokens * 0/100; //temp buy deduction\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n       \r\n        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n        require(SafeMath.add(_amountOfTokens,tokenSupply_) < (totalSupply_+rewardSupply_));\r\n        //deduct commissions for referrals\r\n        _amountOfTokens = SafeMath.sub(_amountOfTokens, _amountOfTokens * 0/100);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n       \r\n        // fire event\r\n        emit Transfer(address(this), _customerAddress, _amountOfTokens);\r\n       \r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function ethereumToTokens_(uint256 _ethereum, uint256 _currentPrice, uint256 _grv, bool buy)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {   \r\n        tokenPriceIncremental_= incrementalPrice(_grv);\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(2**((_grv-1)*0)));\r\n        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _tokensReceived = (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            _tempad**2\r\n                            + (8*_tokenPriceIncremental*_ethereum)\r\n                        )\r\n                    ), _tempad\r\n                )\r\n            )/(2*_tokenPriceIncremental)\r\n        );\r\n        uint256 tempbase = upperBound_(_grv);\r\n        if((_tokensReceived + _tokenSupply) < tempbase && _tokenSupply < tempbase){\r\n            _currentPrice = _currentPrice+((_tokensReceived)*_tokenPriceIncremental);\r\n        }\r\n        if((_tokensReceived + _tokenSupply) > tempbase && _tokenSupply < tempbase){\r\n            _tokensReceived = tempbase - _tokenSupply;\r\n            _ethereum = SafeMath.sub(\r\n                _ethereum,\r\n                ((_tokensReceived)/2)*\r\n                ((2*_currentPrice)+((_tokensReceived-1)\r\n                *_tokenPriceIncremental))\r\n            );\r\n            _currentPrice = _currentPrice+((_tokensReceived)*_tokenPriceIncremental);\r\n            _grv = _grv + 1;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**((_grv-1)*0)));\r\n            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n            uint256 _tempTokensReceived = (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                _tempad**2\r\n                                + (8*_tokenPriceIncremental*_ethereum)\r\n                            )\r\n                        ), _tempad\r\n                    )\r\n                )/(2*_tokenPriceIncremental)\r\n            );\r\n            _currentPrice = _currentPrice+((_tempTokensReceived)*_tokenPriceIncremental);\r\n            _tokensReceived = _tokensReceived + _tempTokensReceived;\r\n        }\r\n        if(buy == true)\r\n        {\r\n            currentPrice_ = _currentPrice;\r\n            grv = _grv;\r\n        }\r\n        return _tokensReceived;\r\n    }\r\n   \r\n    function upperBound_(uint256 _grv)\r\n    internal\r\n    view\r\n    returns(uint256)\r\n    {\r\n        if(_grv <= 7)\r\n        {   \r\n            return (5000 * _grv);\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function incrementalPrice(uint256 _grv)\r\n    internal\r\n    view\r\n    returns(uint256)\r\n    {\r\n         if(_grv == 1){\r\n                return  550000000000;\r\n            }else if(_grv == 2 ){\r\n                 return 1600000000000;\r\n            }else if(_grv == 3 ){\r\n                 return 4900000000000;\r\n            }else if(_grv == 4 ){\r\n                return 14000000000000;\r\n            }else if(_grv == 5 ){\r\n                return 59400000000000;\r\n            }else if(_grv == 6 ){\r\n                return 230000000000000;\r\n            }else if(_grv == 7 ){\r\n                return 1800000000000000;\r\n            }else{\r\n                return  550000000000;\r\n            }\r\n    }\r\n    \r\n   \r\n   \r\n     function tokensToEthereum_(uint256 _tokens, bool sell)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {   \r\n        tokenPriceIncremental_= incrementalPrice(grv);\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _etherReceived = 0;\r\n        uint256 _grv = grv;\r\n        uint256 tempbase = upperBound_(_grv-1);\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((2)**((_grv-1)*0)));\r\n        if((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            uint256 tokensToSell = _tokenSupply - tempbase;\r\n            uint256 a = _currentPrice - ((tokensToSell-1)*_tokenPriceIncremental);\r\n            _tokens = _tokens - tokensToSell;\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+((tokensToSell-1)*_tokenPriceIncremental)));\r\n            _currentPrice = _currentPrice-((tokensToSell)*_tokenPriceIncremental);\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**((_grv-1)*0)));\r\n            tempbase = upperBound_(_grv-1);\r\n        }\r\n        if((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            tokensToSell = _tokenSupply - tempbase;\r\n            _tokens = _tokens - tokensToSell;\r\n             a = _currentPrice - ((tokensToSell-1)*_tokenPriceIncremental);\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+((tokensToSell-1)*_tokenPriceIncremental)));\r\n            _currentPrice = _currentPrice-((tokensToSell)*_tokenPriceIncremental);\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**((_grv-1)*0)));\r\n            tempbase = upperBound_(_grv);\r\n        }\r\n        if(_tokens > 0)\r\n        {\r\n             a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\r\n             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\r\n             _tokenSupply = _tokenSupply - _tokens;\r\n             _currentPrice = _currentPrice-((_tokens)*_tokenPriceIncremental);\r\n        }\r\n        if(sell == true)\r\n        {\r\n            grv = _grv;\r\n            currentPrice_ = _currentPrice;\r\n        }\r\n        return _etherReceived;\r\n    }\r\n   \r\n   \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"holdFarming\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceIncremental_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"noFarming\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFarmings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grv\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumFromToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"modeType\",\"type\":\"uint256\"}],\"name\":\"upgradeMultiContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_grv\",\"type\":\"uint256\"}],\"name\":\"setVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"holdStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenForSale_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownership\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"getStakingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_grv\",\"type\":\"uint256\"},{\"name\":\"_commFunds\",\"type\":\"uint256\"}],\"name\":\"upgradeDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCommFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAllFundsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address\"},{\"name\":\"_balances\",\"type\":\"uint256\"},{\"name\":\"modeType\",\"type\":\"uint256\"}],\"name\":\"upgradeSingleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"getFarmingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundsInjection\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCommFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address\"},{\"name\":\"_balances\",\"type\":\"uint256\"}],\"name\":\"getFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commissionHolder\",\"type\":\"address\"}],\"name\":\"setupCommissionHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currBal\",\"type\":\"uint256\"}],\"name\":\"testLog\",\"type\":\"event\"}]","ContractName":"X_Million","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b13d6da242eed5d158ba80765c663928fa55dfbf42283252dbe70ca41354a94d"}]}