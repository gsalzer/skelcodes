{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ERC20 {\\n    function approve(address, uint256) external returns (bool);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/Structs.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\nstruct ProtocolBalance {\\n    ProtocolMetadata metadata;\\n    AdapterBalance[] adapterBalances;\\n}\\n\\n\\nstruct ProtocolMetadata {\\n    string name;\\n    string description;\\n    string websiteURL;\\n    string iconURL;\\n    uint256 version;\\n}\\n\\n\\nstruct AdapterBalance {\\n    AdapterMetadata metadata;\\n    FullTokenBalance[] balances;\\n}\\n\\n\\nstruct AdapterMetadata {\\n    address adapterAddress;\\n    string adapterType; // \\\"Asset\\\", \\\"Debt\\\"\\n}\\n\\n\\n// token and its underlying tokens (if exist) balances\\nstruct FullTokenBalance {\\n    TokenBalance base;\\n    TokenBalance[] underlying;\\n}\\n\\n\\nstruct TokenBalance {\\n    TokenMetadata metadata;\\n    uint256 amount;\\n}\\n\\n\\n// ERC20-style token metadata\\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\\nstruct TokenMetadata {\\n    address token;\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n}\\n\\n\\nstruct Component {\\n    address token;\\n    string tokenType;  // \\\"ERC20\\\" by default\\n    uint256 rate;  // price per full share (1e18)\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/TokenAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport { TokenMetadata, Component } from \\\"../Structs.sol\\\";\\n\\n\\n/**\\n * @title Token adapter interface.\\n * @dev getMetadata() and getComponents() functions MUST be implemented.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ninterface TokenAdapter {\\n\\n    /**\\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\\n     * struct TokenMetadata {\\n     *     address token;\\n     *     string name;\\n     *     string symbol;\\n     *     uint8 decimals;\\n     * }\\n     */\\n    function getMetadata(address token) external view returns (TokenMetadata memory);\\n\\n    /**\\n     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\\n     * struct Component {\\n     *     address token;    // Address of token contract\\n     *     string tokenType; // Token type (\\\"ERC20\\\" by default)\\n     *     uint256 rate;     // Price per share (1e18)\\n     * }\\n     */\\n    function getComponents(address token) external view returns (Component[] memory);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/poolTogether/PoolTogetherV3TokenAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport { ERC20 } from \\\"../../ERC20.sol\\\";\\nimport { TokenMetadata, Component } from \\\"../../Structs.sol\\\";\\nimport { TokenAdapter } from \\\"../TokenAdapter.sol\\\";\\n\\n\\n/**\\n * @dev ControlledToken contract interface.\\n * Only the functions required for PoolTogetherV3TokenAdapter contract are added.\\n * The ControlledToken contract is available here\\n * github.com/pooltogether/pooltogether-pool-contracts/blob/master/contracts/token/ControlledToken.sol.\\n */\\ninterface ControlledToken {\\n    function controller() external view returns (address);\\n}\\n\\n\\n/**\\n * @dev PrizePool contract interface.\\n * Only the functions required for PoolTogetherV3TokenAdapter contract are added.\\n * The PrizePool contract is available here\\n * github.com/pooltogether/pooltogether-pool-contracts/blob/master/contracts/prize-pool/PrizePool.sol.\\n */\\ninterface PrizePool {\\n    function token() external view returns (address);\\n}\\n\\n\\n/**\\n * @title Token adapter for PoolTogether V3 tickets.\\n * @dev Implementation of TokenAdapter interface.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ncontract PoolTogetherV3TokenAdapter is TokenAdapter {\\n\\n    /**\\n     * @return TokenMetadata struct with ERC20-style token info.\\n     * @dev Implementation of TokenAdapter interface function.\\n     */\\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\\n        return TokenMetadata({\\n            token: token,\\n            name: ERC20(token).name(),\\n            symbol: ERC20(token).symbol(),\\n            decimals: ERC20(token).decimals()\\n        });\\n    }\\n\\n    /**\\n     * @return Array of Component structs with underlying tokens rates for the given token.\\n     * @dev Implementation of TokenAdapter interface function.\\n     */\\n    function getComponents(address token) external view override returns (Component[] memory) {\\n        Component[] memory underlyingTokens = new Component[](1);\\n\\n        underlyingTokens[0] = Component({\\n            token: PrizePool(ControlledToken(token).controller()).token(),\\n            tokenType: \\\"ERC20\\\",\\n            rate: 1e18\\n        });\\n\\n        return underlyingTokens;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoolTogetherV3TokenAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}