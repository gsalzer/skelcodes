{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.7.5;\r\npragma abicoder v2;\r\n\r\ninterface IERC20 {\r\n  function totalSupplyAt(uint256 blockNumber) external view returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IGovernancePowerDelegationToken {\r\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\r\n\r\n  /**\r\n   * @dev get the power of a user at a specified block\r\n   * @param user address of the user\r\n   * @param blockNumber block number at which to get power\r\n   * @param delegationType delegation type (propose/vote)\r\n   **/\r\n  function getPowerAtBlock(\r\n    address user,\r\n    uint256 blockNumber,\r\n    DelegationType delegationType\r\n  ) external view returns (uint256);\r\n}\r\n\r\ninterface IGovernanceStrategy {\r\n  /**\r\n   * @dev Returns the Proposition Power of a user at a specific block number.\r\n   * @param user Address of the user.\r\n   * @param blockNumber Blocknumber at which to fetch Proposition Power\r\n   * @return Power number\r\n   **/\r\n  function getPropositionPowerAt(address user, uint256 blockNumber) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the total supply of Outstanding Proposition Tokens\r\n   * @param blockNumber Blocknumber at which to evaluate\r\n   * @return total supply at blockNumber\r\n   **/\r\n  function getTotalPropositionSupplyAt(uint256 blockNumber) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the total supply of Outstanding Voting Tokens\r\n   * @param blockNumber Blocknumber at which to evaluate\r\n   * @return total supply at blockNumber\r\n   **/\r\n  function getTotalVotingSupplyAt(uint256 blockNumber) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the Vote Power of a user at a specific block number.\r\n   * @param user Address of the user.\r\n   * @param blockNumber Blocknumber at which to fetch Vote Power\r\n   * @return Vote number\r\n   **/\r\n  function getVotingPowerAt(address user, uint256 blockNumber) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Governance Strategy contract\r\n * @dev Smart contract containing logic to measure users' relative power to propose and vote.\r\n * User Power = User Power from Aave Token + User Power from stkAave Token.\r\n * User Power from Token = Token Power + Token Power as Delegatee [- Token Power if user has delegated]\r\n * Two wrapper functions linked to Aave Tokens's GovernancePowerDelegationERC20.sol implementation\r\n * - getPropositionPowerAt: fetching a user Proposition Power at a specified block\r\n * - getVotingPowerAt: fetching a user Voting Power at a specified block\r\n * @author Aave\r\n **/\r\ncontract GovernanceStrategy is IGovernanceStrategy {\r\n  address public immutable AAVE;\r\n  address public immutable STK_AAVE;\r\n\r\n  /**\r\n   * @dev Constructor, register tokens used for Voting and Proposition Powers.\r\n   * @param aave The address of the AAVE Token contract.\r\n   * @param stkAave The address of the stkAAVE Token Contract\r\n   **/\r\n  constructor(address aave, address stkAave) {\r\n    AAVE = aave;\r\n    STK_AAVE = stkAave;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total supply of Proposition Tokens Available for Governance\r\n   * = AAVE Available for governance      + stkAAVE available\r\n   * The supply of AAVE staked in stkAAVE are not taken into account so:\r\n   * = (Supply of AAVE - AAVE in stkAAVE) + (Supply of stkAAVE)\r\n   * = Supply of AAVE, Since the supply of stkAAVE is equal to the number of AAVE staked\r\n   * @param blockNumber Blocknumber at which to evaluate\r\n   * @return total supply at blockNumber\r\n   **/\r\n  function getTotalPropositionSupplyAt(uint256 blockNumber) public view override returns (uint256) {\r\n    return IERC20(AAVE).totalSupplyAt(blockNumber);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total supply of Outstanding Voting Tokens\r\n   * @param blockNumber Blocknumber at which to evaluate\r\n   * @return total supply at blockNumber\r\n   **/\r\n  function getTotalVotingSupplyAt(uint256 blockNumber) public view override returns (uint256) {\r\n    return getTotalPropositionSupplyAt(blockNumber);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the Proposition Power of a user at a specific block number.\r\n   * @param user Address of the user.\r\n   * @param blockNumber Blocknumber at which to fetch Proposition Power\r\n   * @return Power number\r\n   **/\r\n  function getPropositionPowerAt(address user, uint256 blockNumber)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return\r\n      _getPowerByTypeAt(\r\n        user,\r\n        blockNumber,\r\n        IGovernancePowerDelegationToken.DelegationType.PROPOSITION_POWER\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the Vote Power of a user at a specific block number.\r\n   * @param user Address of the user.\r\n   * @param blockNumber Blocknumber at which to fetch Vote Power\r\n   * @return Vote number\r\n   **/\r\n  function getVotingPowerAt(address user, uint256 blockNumber)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return\r\n      _getPowerByTypeAt(\r\n        user,\r\n        blockNumber,\r\n        IGovernancePowerDelegationToken.DelegationType.VOTING_POWER\r\n      );\r\n  }\r\n\r\n  function _getPowerByTypeAt(\r\n    address user,\r\n    uint256 blockNumber,\r\n    IGovernancePowerDelegationToken.DelegationType powerType\r\n  ) internal view returns (uint256) {\r\n    return\r\n      IGovernancePowerDelegationToken(AAVE).getPowerAtBlock(user, blockNumber, powerType) +\r\n      IGovernancePowerDelegationToken(STK_AAVE).getPowerAtBlock(user, blockNumber, powerType);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aave\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stkAave\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STK_AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPropositionPowerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getTotalPropositionSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getTotalVotingSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getVotingPowerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GovernanceStrategy","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ea89e97378d130d0949b727a972a149584329bbdd01354adc8a43c162158cdeb"}]}