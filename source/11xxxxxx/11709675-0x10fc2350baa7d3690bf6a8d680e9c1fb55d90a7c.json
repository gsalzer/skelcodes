{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title Address\\n * @author Paul Razvan Berg\\n * @notice Collection of functions related to the address type.\\n * @dev Forked from OpenZeppelin\\n * https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/v3.1.0/contracts/utils/Address.sol\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`.\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n}\\n\"},\"Admin.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AdminInterface.sol\\\";\\n\\n/**\\n * @title Admin\\n * @author Paul Razvan Berg\\n * @notice Contract module which provides a basic access control mechanism, where there is\\n * an account (an admin) that can be granted exclusive access to specific functions.\\n *\\n * By default, the admin account will be the one that deploys the contract. This can later\\n * be changed with {transferAdmin}.\\n *\\n * This module is used through inheritance. It will make available the modifier `onlyAdmin`,\\n * which can be applied to your functions to restrict their use to the admin.\\n *\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.1.0/contracts/access/Ownable.sol\\n */\\nabstract contract Admin is AdminInterface {\\n    /**\\n     * @notice Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender, \\\"ERR_NOT_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract setting the deployer as the initial admin.\\n     */\\n    constructor() {\\n        address msgSender = msg.sender;\\n        admin = msgSender;\\n        emit TransferAdmin(address(0x00), msgSender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without admin, so it will not be possible to call\\n     * `onlyAdmin` functions anymore.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must be the administrator.\\n     *\\n     * WARNING: Doing this will leave the contract without an admin,\\n     * thereby removing any functionality that is only available to the admin.\\n     */\\n    function _renounceAdmin() external virtual override onlyAdmin {\\n        emit TransferAdmin(admin, address(0x00));\\n        admin = address(0x00);\\n    }\\n\\n    /**\\n     * @notice Transfers the admin of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     * @param newAdmin The acount of the new admin.\\n     */\\n    function _transferAdmin(address newAdmin) external virtual override onlyAdmin {\\n        require(newAdmin != address(0x00), \\\"ERR_SET_ADMIN_ZERO_ADDRESS\\\");\\n        emit TransferAdmin(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n}\\n\"},\"AdminInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AdminStorage.sol\\\";\\n\\n/**\\n * @title AdminInterface\\n * @author Paul Razvan Berg\\n */\\nabstract contract AdminInterface is AdminStorage {\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function _renounceAdmin() external virtual;\\n\\n    function _transferAdmin(address newAdmin) external virtual;\\n\\n    /**\\n     * EVENTS\\n     */\\n    event TransferAdmin(address indexed oldAdmin, address indexed newAdmin);\\n}\\n\"},\"AdminStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nabstract contract AdminStorage {\\n    /**\\n     * @notice The address of the administrator account or contract.\\n     */\\n    address public admin;\\n}\\n\"},\"AggregatorV3Interface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title AggregatorV3Interface\\n * @author Hifi\\n * @dev Forked from Chainlink\\n * https://github.com/smartcontractkit/chainlink/blob/v0.9.9/evm-contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\n */\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    /*\\n     * getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n     * if they do not have data to report, instead of returning unset values\\n     * which could be misinterpreted as actual reported values.\\n     */\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"},\"BalanceSheet.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./SafeErc20.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./BalanceSheetInterface.sol\\\";\\nimport \\\"./FintrollerInterface.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\n\\n/**\\n * @title BalanceSheet\\n * @author Hifi\\n * @notice Manages the debt vault for all fyToens.\\n */\\ncontract BalanceSheet is\\n    ReentrancyGuard, /* no depedency */\\n    BalanceSheetInterface, /* one dependency */\\n    Admin, /* two dependencies */\\n    Exponential /* two dependencies */\\n{\\n    using SafeErc20 for Erc20Interface;\\n\\n    modifier isVaultOpenForMsgSender(FyTokenInterface fyToken) {\\n        require(vaults[address(fyToken)][msg.sender].isOpen, \\\"ERR_VAULT_NOT_OPEN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @param fintroller_ The address of the Fintroller contract.\\n     */\\n    constructor(FintrollerInterface fintroller_) Admin() {\\n        /* Set the fyToken contract and sanity check it. */\\n        fintroller = fintroller_;\\n        fintroller.isFintroller();\\n    }\\n\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n\\n    struct GetClutchableCollateralLocalVars {\\n        MathError mathErr;\\n        Exp clutchableCollateralAmountUpscaled;\\n        uint256 clutchableCollateralAmount;\\n        uint256 collateralPrecisionScalar;\\n        uint256 collateralPriceUpscaled;\\n        uint256 liquidationIncentiveMantissa;\\n        Exp numerator;\\n        uint256 oraclePricePrecisionScalar;\\n        uint256 underlyingPriceUpscaled;\\n    }\\n\\n    /**\\n     * @notice Determines the amount of collateral that can be clutched when liquidating a borrow.\\n     *\\n     * @dev The formula applied:\\n     * clutchedCollateral = repayAmount * liquidationIncentive * underlyingPriceUsd / collateralPriceUsd\\n     *\\n     * Requirements:\\n     *\\n     * - `repayAmount` must be non-zero.\\n     *\\n     * @param fyToken The fyToken to make the query against.\\n     * @param repayAmount The amount of fyTokens to repay.\\n     * @return The amount of clutchable collateral as uint256, specified in the collateral\\u0027s decimal system.\\n     */\\n    function getClutchableCollateral(FyTokenInterface fyToken, uint256 repayAmount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        GetClutchableCollateralLocalVars memory vars;\\n\\n        /* Avoid the zero edge cases. */\\n        require(repayAmount \\u003e 0, \\\"ERR_GET_CLUTCHABLE_COLLATERAL_ZERO\\\");\\n\\n        /* When the liquidation incentive is zero, the end result would be zero anyways. */\\n        vars.liquidationIncentiveMantissa = fintroller.liquidationIncentiveMantissa();\\n        if (vars.liquidationIncentiveMantissa == 0) {\\n            return 0;\\n        }\\n\\n        /* Grab the upscaled USD price of the underlying. */\\n        ChainlinkOperatorInterface oracle = fintroller.oracle();\\n        vars.underlyingPriceUpscaled = oracle.getAdjustedPrice(fyToken.underlying().symbol());\\n\\n        /* Grab the upscaled USD price of the collateral. */\\n        vars.collateralPriceUpscaled = oracle.getAdjustedPrice(fyToken.collateral().symbol());\\n\\n        /* Calculate the top part of the equation. */\\n        (vars.mathErr, vars.numerator) = mulExp3(\\n            Exp({ mantissa: repayAmount }),\\n            Exp({ mantissa: vars.liquidationIncentiveMantissa }),\\n            Exp({ mantissa: vars.underlyingPriceUpscaled })\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"ERR_GET_CLUTCHABLE_COLLATERAL_MATH_ERROR\\\");\\n\\n        /* Calculate the mantissa form of the clutched collateral amount. */\\n        (vars.mathErr, vars.clutchableCollateralAmountUpscaled) = divExp(\\n            vars.numerator,\\n            Exp({ mantissa: vars.collateralPriceUpscaled })\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"ERR_GET_CLUTCHABLE_COLLATERAL_MATH_ERROR\\\");\\n\\n        /* If the precision scalar is not 1, calculate the final form of the clutched collateral amount. */\\n        vars.collateralPrecisionScalar = fyToken.collateralPrecisionScalar();\\n        if (vars.collateralPrecisionScalar != 1) {\\n            (vars.mathErr, vars.clutchableCollateralAmount) = divUInt(\\n                vars.clutchableCollateralAmountUpscaled.mantissa,\\n                vars.collateralPrecisionScalar\\n            );\\n            require(vars.mathErr == MathError.NO_ERROR, \\\"ERR_GET_CLUTCHABLE_COLLATERAL_MATH_ERROR\\\");\\n        } else {\\n            vars.clutchableCollateralAmount = vars.clutchableCollateralAmountUpscaled.mantissa;\\n        }\\n\\n        return vars.clutchableCollateralAmount;\\n    }\\n\\n    /**\\n     * @notice Determines the current collateralization ratio for the given borrower account.\\n     * @param fyToken The fyToken to make the query against.\\n     * @param borrower The borrower account to make the query against.\\n     * @return A quotient if locked collateral is non-zero, otherwise zero.\\n     */\\n    function getCurrentCollateralizationRatio(FyTokenInterface fyToken, address borrower)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Vault memory vault = vaults[address(fyToken)][borrower];\\n        return getHypotheticalCollateralizationRatio(fyToken, borrower, vault.lockedCollateral, vault.debt);\\n    }\\n\\n    struct GetHypotheticalAccountLiquidityLocalVars {\\n        MathError mathErr;\\n        uint256 collateralPriceUpscaled;\\n        uint256 collateralPrecisionScalar;\\n        uint256 collateralizationRatioMantissa;\\n        Exp debtValueUsd;\\n        Exp hypotheticalCollateralizationRatio;\\n        Exp lockedCollateralValueUsd;\\n        uint256 lockedCollateralUpscaled;\\n        uint256 oraclePricePrecisionScalar;\\n        uint256 underlyingPriceUpscaled;\\n        uint256 underlyingPrecisionScalar;\\n    }\\n\\n    /**\\n     * @notice Determines the hypothetical collateralization ratio for the given locked\\n     * collateral and debt, at the current prices provided by the oracle.\\n     *\\n     * @dev The formula applied: collateralizationRatio = lockedCollateralValueUsd / debtValueUsd\\n     *\\n     * Requirements:\\n     *\\n     * - The vault must be open.\\n     * - `debt` must be non-zero.\\n     * - The oracle prices must be non-zero.\\n     *\\n     * @param fyToken The fyToken for which to make the query against.\\n     * @param borrower The borrower account for which to make the query against.\\n     * @param lockedCollateral The hypothetical locked collateral.\\n     * @param debt The hypothetical debt.\\n     * @return The hypothetical collateralization ratio as a percentage mantissa if locked\\n     * collateral is non-zero, otherwise zero.\\n     */\\n    function getHypotheticalCollateralizationRatio(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 lockedCollateral,\\n        uint256 debt\\n    ) public view override returns (uint256) {\\n        GetHypotheticalAccountLiquidityLocalVars memory vars;\\n\\n        /* If the vault is not open, a hypothetical collateralization ratio cannot be calculated. */\\n        require(vaults[address(fyToken)][borrower].isOpen, \\\"ERR_VAULT_NOT_OPEN\\\");\\n\\n        /* Avoid the zero edge cases. */\\n        if (lockedCollateral == 0) {\\n            return 0;\\n        }\\n        require(debt \\u003e 0, \\\"ERR_GET_HYPOTHETICAL_COLLATERALIZATION_RATIO_DEBT_ZERO\\\");\\n\\n        /* Grab the upscaled USD price of the collateral. */\\n        ChainlinkOperatorInterface oracle = fintroller.oracle();\\n        vars.collateralPriceUpscaled = oracle.getAdjustedPrice(fyToken.collateral().symbol());\\n\\n        /* Grab the upscaled USD price of the underlying. */\\n        vars.underlyingPriceUpscaled = oracle.getAdjustedPrice(fyToken.underlying().symbol());\\n\\n        /* Upscale the collateral, which can have any precision, to mantissa precision. */\\n        vars.collateralPrecisionScalar = fyToken.collateralPrecisionScalar();\\n        if (vars.collateralPrecisionScalar != 1) {\\n            (vars.mathErr, vars.lockedCollateralUpscaled) = mulUInt(lockedCollateral, vars.collateralPrecisionScalar);\\n            require(vars.mathErr == MathError.NO_ERROR, \\\"ERR_GET_HYPOTHETICAL_COLLATERALIZATION_RATIO_MATH_ERROR\\\");\\n        } else {\\n            vars.lockedCollateralUpscaled = lockedCollateral;\\n        }\\n\\n        /* Calculate the USD value of the collateral. */\\n        (vars.mathErr, vars.lockedCollateralValueUsd) = mulExp(\\n            Exp({ mantissa: vars.lockedCollateralUpscaled }),\\n            Exp({ mantissa: vars.collateralPriceUpscaled })\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"ERR_GET_HYPOTHETICAL_COLLATERALIZATION_RATIO_MATH_ERROR\\\");\\n\\n        /* Calculate the USD value of the debt. */\\n        (vars.mathErr, vars.debtValueUsd) = mulExp(\\n            Exp({ mantissa: debt }),\\n            Exp({ mantissa: vars.underlyingPriceUpscaled })\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"ERR_GET_HYPOTHETICAL_COLLATERALIZATION_RATIO_MATH_ERROR\\\");\\n\\n        /**\\n         * Calculate the collateralization ratio by dividing the USD value of the hypothetical locked collateral by\\n         * the USD value of the debt.\\n         */\\n        (vars.mathErr, vars.hypotheticalCollateralizationRatio) = divExp(\\n            vars.lockedCollateralValueUsd,\\n            vars.debtValueUsd\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"ERR_GET_HYPOTHETICAL_COLLATERALIZATION_RATIO_MATH_ERROR\\\");\\n\\n        return vars.hypotheticalCollateralizationRatio.mantissa;\\n    }\\n\\n    /**\\n     * @notice Reads the storage properties of a vault.\\n     * @return (uint256 debt, uint256 freeCollateral, uint256 lockedCollateral, bool isOpen).\\n     */\\n    function getVault(FyTokenInterface fyToken, address borrower)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            vaults[address(fyToken)][borrower].debt,\\n            vaults[address(fyToken)][borrower].freeCollateral,\\n            vaults[address(fyToken)][borrower].lockedCollateral,\\n            vaults[address(fyToken)][borrower].isOpen\\n        );\\n    }\\n\\n    /**\\n     * @notice Reads the debt held by the given account.\\n     * @return The debt held by the borrower, as an uint256.\\n     */\\n    function getVaultDebt(FyTokenInterface fyToken, address borrower) external view override returns (uint256) {\\n        return vaults[address(fyToken)][borrower].debt;\\n    }\\n\\n    /**\\n     * @notice Reads the amount of collateral that the given borrower account locked in the vault.\\n     * @return The collateral locked in the vault by the borrower, as an uint256.\\n     */\\n    function getVaultLockedCollateral(FyTokenInterface fyToken, address borrower)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return vaults[address(fyToken)][borrower].lockedCollateral;\\n    }\\n\\n    /**\\n     * @notice Checks whether the borrower account can be liquidated or not.\\n     * @param fyToken The fyToken for which to make the query against.\\n     * @param borrower The borrower account for which to make the query against.\\n     * @return true = is underwater, otherwise not.\\n     */\\n    function isAccountUnderwater(FyTokenInterface fyToken, address borrower) external view override returns (bool) {\\n        Vault memory vault = vaults[address(fyToken)][borrower];\\n        if (!vault.isOpen || vault.debt == 0) {\\n            return false;\\n        }\\n        uint256 currentCollateralizationRatioMantissa = getCurrentCollateralizationRatio(fyToken, borrower);\\n        uint256 thresholdCollateralizationRatioMantissa = fintroller.getBondCollateralizationRatio(fyToken);\\n        return currentCollateralizationRatioMantissa \\u003c thresholdCollateralizationRatioMantissa;\\n    }\\n\\n    /**\\n     * @notice Checks whether the borrower account has a vault opened for a particular fyToken.\\n     */\\n    function isVaultOpen(FyTokenInterface fyToken, address borrower) external view override returns (bool) {\\n        return vaults[address(fyToken)][borrower].isOpen;\\n    }\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Transfers the collateral from the borrower\\u0027s vault to the liquidator account.\\n     *\\n     * @dev Emits a {ClutchCollateral} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Can only be called by the fyToken.\\n     * - There must be enough collateral in the borrower\\u0027s vault.\\n     *\\n     * @param fyToken The address of the fyToken contract.\\n     * @param liquidator The account who repays the borrower\\u0027s debt and receives the collateral.\\n     * @param borrower The account who fell underwater and is liquidated.\\n     * @param collateralAmount The amount of collateral to clutch, specified in the collateral\\u0027s decimal system.\\n     * @return true = success, otherwise it reverts.\\n     */\\n    function clutchCollateral(\\n        FyTokenInterface fyToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 collateralAmount\\n    ) external override nonReentrant returns (bool) {\\n        /* Checks: the caller is the fyToken. */\\n        require(msg.sender == address(fyToken), \\\"ERR_CLUTCH_COLLATERAL_NOT_AUTHORIZED\\\");\\n\\n        /* Checks: there is enough clutchable collateral in the vault. */\\n        uint256 lockedCollateral = vaults[address(fyToken)][borrower].lockedCollateral;\\n        require(lockedCollateral \\u003e= collateralAmount, \\\"ERR_INSUFFICIENT_LOCKED_COLLATERAL\\\");\\n\\n        /* Calculate the new locked collateral amount. */\\n        MathError mathErr;\\n        uint256 newLockedCollateral;\\n        (mathErr, newLockedCollateral) = subUInt(lockedCollateral, collateralAmount);\\n        assert(mathErr == MathError.NO_ERROR);\\n\\n        /* Effects: update the vault. */\\n        vaults[address(fyToken)][borrower].lockedCollateral = newLockedCollateral;\\n\\n        /* Interactions: transfer the collateral. */\\n        fyToken.collateral().safeTransfer(liquidator, collateralAmount);\\n\\n        emit ClutchCollateral(fyToken, liquidator, borrower, collateralAmount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits collateral into the account\\u0027s vault.\\n     *\\n     * @dev Emits a {DepositCollateral} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The vault must be open.\\n     * - The amount to deposit cannot be zero.\\n     * - The Fintroller must allow this action to be performed.\\n     * - The caller must have allowed this contract to spend `collateralAmount` tokens.\\n     *\\n     * @param fyToken The address of the fyToken contract.\\n     * @param collateralAmount The amount of collateral to withdraw.\\n     * @return true = success, otherwise it reverts.\\n     */\\n    function depositCollateral(FyTokenInterface fyToken, uint256 collateralAmount)\\n        external\\n        override\\n        isVaultOpenForMsgSender(fyToken)\\n        nonReentrant\\n        returns (bool)\\n    {\\n        /* Checks: the zero edge case. */\\n        require(collateralAmount \\u003e 0, \\\"ERR_DEPOSIT_COLLATERAL_ZERO\\\");\\n\\n        /* Checks: the Fintroller allows this action to be performed. */\\n        require(fintroller.getDepositCollateralAllowed(fyToken), \\\"ERR_DEPOSIT_COLLATERAL_NOT_ALLOWED\\\");\\n\\n        /* Effects: update storage. */\\n        MathError mathErr;\\n        uint256 hypotheticalFreeCollateral;\\n        (mathErr, hypotheticalFreeCollateral) = addUInt(\\n            vaults[address(fyToken)][msg.sender].freeCollateral,\\n            collateralAmount\\n        );\\n        require(mathErr == MathError.NO_ERROR, \\\"ERR_DEPOSIT_COLLATERAL_MATH_ERROR\\\");\\n        vaults[address(fyToken)][msg.sender].freeCollateral = hypotheticalFreeCollateral;\\n\\n        /* Interactions: perform the Erc20 transfer. */\\n        fyToken.collateral().safeTransferFrom(msg.sender, address(this), collateralAmount);\\n\\n        emit DepositCollateral(fyToken, msg.sender, collateralAmount);\\n\\n        return true;\\n    }\\n\\n    struct FreeCollateralLocalVars {\\n        MathError mathErr;\\n        uint256 collateralizationRatioMantissa;\\n        uint256 hypotheticalCollateralizationRatioMantissa;\\n        uint256 newFreeCollateral;\\n        uint256 newLockedCollateral;\\n    }\\n\\n    /**\\n     * @notice Frees a portion or all of the locked collateral.\\n     * @dev Emits a {FreeCollateral} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The vault must be open.\\n     * - The amount to free cannot be zero.\\n     * - There must be enough locked collateral.\\n     * - The borrower account cannot fall below the collateralization ratio.\\n     *\\n     * @param fyToken The address of the fyToken contract.\\n     * @param collateralAmount The amount of free collateral to free.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function freeCollateral(FyTokenInterface fyToken, uint256 collateralAmount)\\n        external\\n        override\\n        isVaultOpenForMsgSender(fyToken)\\n        returns (bool)\\n    {\\n        FreeCollateralLocalVars memory vars;\\n\\n        /* Checks: the zero edge case. */\\n        require(collateralAmount \\u003e 0, \\\"ERR_FREE_COLLATERAL_ZERO\\\");\\n\\n        /* Checks: enough locked collateral. */\\n        Vault memory vault = vaults[address(fyToken)][msg.sender];\\n        require(vault.lockedCollateral \\u003e= collateralAmount, \\\"ERR_INSUFFICIENT_LOCKED_COLLATERAL\\\");\\n\\n        /* This operation can\\u0027t fail because of the first `require` in this function. */\\n        (vars.mathErr, vars.newLockedCollateral) = subUInt(vault.lockedCollateral, collateralAmount);\\n        assert(vars.mathErr == MathError.NO_ERROR);\\n\\n        /* Checks: the hypothetical collateralization ratio is above the threshold. */\\n        if (vault.debt \\u003e 0) {\\n            vars.hypotheticalCollateralizationRatioMantissa = getHypotheticalCollateralizationRatio(\\n                fyToken,\\n                msg.sender,\\n                vars.newLockedCollateral,\\n                vault.debt\\n            );\\n            vars.collateralizationRatioMantissa = fintroller.getBondCollateralizationRatio(fyToken);\\n            require(\\n                vars.hypotheticalCollateralizationRatioMantissa \\u003e= vars.collateralizationRatioMantissa,\\n                \\\"ERR_BELOW_COLLATERALIZATION_RATIO\\\"\\n            );\\n        }\\n\\n        /* Effects: update storage. */\\n        vaults[address(fyToken)][msg.sender].lockedCollateral = vars.newLockedCollateral;\\n        (vars.mathErr, vars.newFreeCollateral) = addUInt(vault.freeCollateral, collateralAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"ERR_FREE_COLLATERAL_MATH_ERROR\\\");\\n        vaults[address(fyToken)][msg.sender].freeCollateral = vars.newFreeCollateral;\\n\\n        emit FreeCollateral(fyToken, msg.sender, collateralAmount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Locks a portion or all of the free collateral to make it eligible for borrowing.\\n     * @dev Emits a {LockCollateral} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The vault must be open.\\n     * - The amount to lock cannot be zero.\\n     * - There must be enough free collateral.\\n     *\\n     * @param fyToken The address of the fyToken contract.\\n     * @param collateralAmount The amount of free collateral to lock.\\n     * @return bool true = success, otherwise it reverts.\\n     */\\n    function lockCollateral(FyTokenInterface fyToken, uint256 collateralAmount)\\n        external\\n        override\\n        isVaultOpenForMsgSender(fyToken)\\n        returns (bool)\\n    {\\n        /* Avoid the zero edge case. */\\n        require(collateralAmount \\u003e 0, \\\"ERR_LOCK_COLLATERAL_ZERO\\\");\\n\\n        Vault memory vault = vaults[address(fyToken)][msg.sender];\\n        require(vault.freeCollateral \\u003e= collateralAmount, \\\"ERR_INSUFFICIENT_FREE_COLLATERAL\\\");\\n\\n        MathError mathErr;\\n        uint256 newLockedCollateral;\\n        (mathErr, newLockedCollateral) = addUInt(vault.lockedCollateral, collateralAmount);\\n        require(mathErr == MathError.NO_ERROR, \\\"ERR_LOCK_COLLATERAL_MATH_ERROR\\\");\\n        vaults[address(fyToken)][msg.sender].lockedCollateral = newLockedCollateral;\\n\\n        /* This operation can\\u0027t fail because of the first `require` in this function. */\\n        uint256 hypotheticalFreeCollateral;\\n        (mathErr, hypotheticalFreeCollateral) = subUInt(vault.freeCollateral, collateralAmount);\\n        assert(mathErr == MathError.NO_ERROR);\\n        vaults[address(fyToken)][msg.sender].freeCollateral = hypotheticalFreeCollateral;\\n\\n        emit LockCollateral(fyToken, msg.sender, collateralAmount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Opens a Vault for the caller.\\n     * @dev Emits an {OpenVault} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The vault cannot be already open.\\n     * - The fyToken must pass the inspection.\\n     *\\n     * @param fyToken The address of the fyToken contract for which to open the vault.\\n     * @return true = success, otherwise it reverts.\\n     */\\n    function openVault(FyTokenInterface fyToken) external override returns (bool) {\\n        require(fyToken.isFyToken(), \\\"ERR_OPEN_VAULT_FYTOKEN_INSPECTION\\\");\\n        require(vaults[address(fyToken)][msg.sender].isOpen == false, \\\"ERR_VAULT_OPEN\\\");\\n        vaults[address(fyToken)][msg.sender].isOpen = true;\\n        emit OpenVault(fyToken, msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates the debt accrued by a particular borrower account.\\n     *\\n     * @dev Emits a {SetVaultDebt} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Can only be called by the fyToken.\\n     *\\n     * @param fyToken The address of the fyToken contract.\\n     * @param borrower The borrower account for which to update the debt.\\n     * @param newVaultDebt The new debt to assign to the borrower account.\\n     * @return bool=true success, otherwise it reverts.\\n     */\\n    function setVaultDebt(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 newVaultDebt\\n    ) external override returns (bool) {\\n        /* Checks: the caller is the fyToken. */\\n        require(msg.sender == address(fyToken), \\\"ERR_SET_VAULT_DEBT_NOT_AUTHORIZED\\\");\\n\\n        /* Effects: update storage. */\\n        uint256 oldVaultDebt = vaults[address(fyToken)][borrower].debt;\\n        vaults[address(fyToken)][borrower].debt = newVaultDebt;\\n\\n        emit SetVaultDebt(fyToken, borrower, oldVaultDebt, newVaultDebt);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Withdraws a portion or all of the free collateral.\\n     *\\n     * @dev Emits a {WithdrawCollateral} event.\\n     *\\n     * Requirements:\\n     *\\n     * - The vault must be open.\\n     * - The amount to withdraw cannot be zero.\\n     * - There must be enough free collateral in the vault.\\n     *\\n     * @param fyToken The address of the fyToken contract.\\n     * @param collateralAmount The amount of collateral to withdraw.\\n     * @return true = success, otherwise it reverts.\\n     */\\n    function withdrawCollateral(FyTokenInterface fyToken, uint256 collateralAmount)\\n        external\\n        override\\n        isVaultOpenForMsgSender(fyToken)\\n        nonReentrant\\n        returns (bool)\\n    {\\n        /* Checks: the zero edge case. */\\n        require(collateralAmount \\u003e 0, \\\"ERR_WITHDRAW_COLLATERAL_ZERO\\\");\\n\\n        /* Checks: there is enough free collateral. */\\n        require(\\n            vaults[address(fyToken)][msg.sender].freeCollateral \\u003e= collateralAmount,\\n            \\\"ERR_INSUFFICIENT_FREE_COLLATERAL\\\"\\n        );\\n\\n        /* Effects: update storage. */\\n        MathError mathErr;\\n        uint256 newFreeCollateral;\\n        (mathErr, newFreeCollateral) = subUInt(vaults[address(fyToken)][msg.sender].freeCollateral, collateralAmount);\\n        /* This operation can\\u0027t fail because of the first `require` in this function. */\\n        assert(mathErr == MathError.NO_ERROR);\\n        vaults[address(fyToken)][msg.sender].freeCollateral = newFreeCollateral;\\n\\n        /* Interactions: perform the Erc20 transfer. */\\n        fyToken.collateral().safeTransfer(msg.sender, collateralAmount);\\n\\n        emit WithdrawCollateral(fyToken, msg.sender, collateralAmount);\\n\\n        return true;\\n    }\\n}\\n\"},\"BalanceSheetInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BalanceSheetStorage.sol\\\";\\n\\n/**\\n * @title BalanceSheetInterface\\n * @author Hifi\\n */\\nabstract contract BalanceSheetInterface is BalanceSheetStorage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function getClutchableCollateral(FyTokenInterface fyToken, uint256 repayAmount)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getCurrentCollateralizationRatio(FyTokenInterface fyToken, address borrower)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getHypotheticalCollateralizationRatio(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 lockedCollateral,\\n        uint256 debt\\n    ) public view virtual returns (uint256);\\n\\n    function getVault(FyTokenInterface fyToken, address borrower)\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function getVaultDebt(FyTokenInterface fyToken, address borrower) external view virtual returns (uint256);\\n\\n    function getVaultLockedCollateral(FyTokenInterface fyToken, address borrower)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function isAccountUnderwater(FyTokenInterface fyToken, address borrower) external view virtual returns (bool);\\n\\n    function isVaultOpen(FyTokenInterface fyToken, address borrower) external view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    function clutchCollateral(\\n        FyTokenInterface fyToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 clutchedCollateralAmount\\n    ) external virtual returns (bool);\\n\\n    function depositCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function freeCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function lockCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    function openVault(FyTokenInterface fyToken) external virtual returns (bool);\\n\\n    function setVaultDebt(\\n        FyTokenInterface fyToken,\\n        address borrower,\\n        uint256 newVaultDebt\\n    ) external virtual returns (bool);\\n\\n    function withdrawCollateral(FyTokenInterface fyToken, uint256 collateralAmount) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n    event ClutchCollateral(\\n        FyTokenInterface indexed fyToken,\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 clutchedCollateralAmount\\n    );\\n\\n    event DepositCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event FreeCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event LockCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n\\n    event OpenVault(FyTokenInterface indexed fyToken, address indexed borrower);\\n\\n    event SetVaultDebt(FyTokenInterface indexed fyToken, address indexed borrower, uint256 oldDebt, uint256 newDebt);\\n\\n    event WithdrawCollateral(FyTokenInterface indexed fyToken, address indexed borrower, uint256 collateralAmount);\\n}\\n\"},\"BalanceSheetStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FyTokenInterface.sol\\\";\\n\\n/**\\n * @title BalanceSheetStorage\\n * @author Hifi\\n */\\nabstract contract BalanceSheetStorage {\\n    struct Vault {\\n        uint256 debt;\\n        uint256 freeCollateral;\\n        uint256 lockedCollateral;\\n        bool isOpen;\\n    }\\n\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @dev One vault for each fyToken for each account.\\n     */\\n    mapping(address =\\u003e mapping(address =\\u003e Vault)) internal vaults;\\n\\n    /**\\n     * @notice Indicator that this is a BalanceSheet contract, for inspection.\\n     */\\n    bool public constant isBalanceSheet = true;\\n}\\n\"},\"CarefulMath.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Possible error codes that can be returned.\\n */\\nenum MathError { NO_ERROR, DIVISION_BY_ZERO, INTEGER_OVERFLOW, INTEGER_UNDERFLOW, MODULO_BY_ZERO }\\n\\n/**\\n * @title CarefulMath\\n * @author Paul Razvan Berg\\n * @notice Exponential module for storing fixed-precision decimals.\\n * @dev Forked from Compound\\n * https://github.com/compound-finance/compound-protocol/blob/v2.8.1/contracts/CarefulMath.sol\\n */\\nabstract contract CarefulMath {\\n    /**\\n     * @notice Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        uint256 c = a + b;\\n\\n        if (c \\u003e= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add `a` and `b` and then subtract `c`.\\n     */\\n    function addThenSubUInt(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n\\n    /**\\n     * @notice Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @notice Returns the remainder of dividing two numbers.\\n     * @dev Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     */\\n    function modUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.MODULO_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a % b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint256 c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b \\u003c= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n}\\n\"},\"ChainlinkOperatorInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./ChainlinkOperatorStorage.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperatorInterface\\n * @author Hifi\\n */\\nabstract contract ChainlinkOperatorInterface is ChainlinkOperatorStorage {\\n    /**\\n     * EVENTS\\n     */\\n    event DeleteFeed(Erc20Interface indexed asset, AggregatorV3Interface indexed feed);\\n\\n    event SetFeed(Erc20Interface indexed asset, AggregatorV3Interface indexed feed);\\n\\n    /**\\n     * CONSTANT FUNCTIONS.\\n     */\\n    function getAdjustedPrice(string memory symbol) external view virtual returns (uint256);\\n\\n    function getFeed(string memory symbol)\\n        external\\n        view\\n        virtual\\n        returns (\\n            Erc20Interface,\\n            AggregatorV3Interface,\\n            bool\\n        );\\n\\n    function getPrice(string memory symbol) public view virtual returns (uint256);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS.\\n     */\\n    function deleteFeed(string memory symbol) external virtual returns (bool);\\n\\n    function setFeed(Erc20Interface asset, AggregatorV3Interface feed) external virtual returns (bool);\\n}\\n\"},\"ChainlinkOperatorStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\n\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkOperatorStorage\\n * @author Hifi\\n */\\nabstract contract ChainlinkOperatorStorage {\\n    struct Feed {\\n        Erc20Interface asset;\\n        AggregatorV3Interface id;\\n        bool isSet;\\n    }\\n\\n    /**\\n     * @dev Mapping between Erc20 symbols and Feed structs.\\n     */\\n    mapping(string =\\u003e Feed) internal feeds;\\n\\n    /**\\n     * @notice Chainlink price precision for USD-quoted data.\\n     */\\n    uint256 public constant pricePrecision = 8;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the Chainlink price precision (1e8).\\n     */\\n    uint256 public constant pricePrecisionScalar = 1.0e10;\\n}\\n\"},\"Erc20Interface.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Storage.sol\\\";\\n\\n/**\\n * @title Erc20Interface\\n * @author Paul Razvan Berg\\n * @notice Interface of the Erc20 standard\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.2.0/contracts/token/ERC20/IERC20.sol\\n */\\nabstract contract Erc20Interface is Erc20Storage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n    function balanceOf(address account) external view virtual returns (uint256);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    event Burn(address indexed holder, uint256 burnAmount);\\n\\n    event Mint(address indexed beneficiary, uint256 mintAmount);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n}\\n\"},\"Erc20Storage.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ExponentialStorage\\n * @author Paul Razvan Berg\\n * @notice The storage interface ancillary to an Erc20 contract.\\n */\\nabstract contract Erc20Storage {\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of\\n     * the name.\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice Returns the amount of tokens in existence.\\n     */\\n    uint256 public totalSupply;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal allowances;\\n\\n    mapping(address =\\u003e uint256) internal balances;\\n}\\n\"},\"Exponential.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialStorage.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals.\\n * @author Paul Razvan Berg\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n * Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is: `Exp({mantissa: 5100000000000000000})`.\\n * @dev Forked from Compound\\n * https://github.com/compound-finance/compound-protocol/blob/v2.6/contracts/Exponential.sol\\n */\\nabstract contract Exponential is\\n    CarefulMath, /* no dependency */\\n    ExponentialStorage /* no dependency */\\n{\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     * (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b.\\n     * NOTE: Returns an error if (`num` * 10e18) \\u003e MAX_INT, or if `denom` is zero.\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledNumerator) = mulUInt(a.mantissa, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint256 rational) = divUInt(scaledNumerator, b.mantissa);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        /*\\n         * We add half the scale before dividing so that we get rounding instead of truncation.\\n         * See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n         * Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n         */\\n        (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        /* The only possible error `div` is MathError.DIVISION_BY_ZERO but we control `expScale` and it\\u0027s not zero. */\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(\\n        Exp memory a,\\n        Exp memory b,\\n        Exp memory c\\n    ) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n}\\n\"},\"ExponentialStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LPGL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ExponentialStorage\\n * @author Paul Razvan Berg\\n * @notice The storage interface ancillary to an Exponential contract.\\n */\\nabstract contract ExponentialStorage {\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev In Exponential denomination, 1e18 is 1.\\n     */\\n    uint256 internal constant expScale = 1e18;\\n    uint256 internal constant halfExpScale = expScale / 2;\\n    uint256 internal constant mantissaOne = expScale;\\n}\\n\"},\"FintrollerInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LPGL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FintrollerStorage.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\n\\nabstract contract FintrollerInterface is FintrollerStorage {\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n\\n    function getBond(FyTokenInterface fyToken)\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256 debtCeiling,\\n            uint256 collateralizationRatioMantissa,\\n            bool isBorrowAllowed,\\n            bool isDepositCollateralAllowed,\\n            bool isLiquidateBorrowAllowed,\\n            bool isListed,\\n            bool isRedeemFyTokenAllowed,\\n            bool isRepayBorrowAllowed,\\n            bool isSupplyUnderlyingAllowed\\n        );\\n\\n    function getBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getBondCollateralizationRatio(FyTokenInterface fyToken) external view virtual returns (uint256);\\n\\n    function getBondDebtCeiling(FyTokenInterface fyToken) external view virtual returns (uint256);\\n\\n    function getDepositCollateralAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getLiquidateBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getRedeemFyTokensAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getRepayBorrowAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    function getSupplyUnderlyingAllowed(FyTokenInterface fyToken) external view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n\\n    function listBond(FyTokenInterface fyToken) external virtual returns (bool);\\n\\n    function setBondCollateralizationRatio(FyTokenInterface fyToken, uint256 newCollateralizationRatioMantissa)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function setBondDebtCeiling(FyTokenInterface fyToken, uint256 newDebtCeiling) external virtual returns (bool);\\n\\n    function setBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setDepositCollateralAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setLiquidateBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external virtual returns (bool);\\n\\n    function setOracle(ChainlinkOperatorInterface newOracle) external virtual returns (bool);\\n\\n    function setRedeemFyTokensAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setRepayBorrowAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    function setSupplyUnderlyingAllowed(FyTokenInterface fyToken, bool state) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event ListBond(address indexed admin, FyTokenInterface indexed fyToken);\\n\\n    event SetBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetBondCollateralizationRatio(\\n        address indexed admin,\\n        FyTokenInterface indexed fyToken,\\n        uint256 oldCollateralizationRatio,\\n        uint256 newCollateralizationRatio\\n    );\\n\\n    event SetBondDebtCeiling(\\n        address indexed admin,\\n        FyTokenInterface indexed fyToken,\\n        uint256 oldDebtCeiling,\\n        uint256 newDebtCeiling\\n    );\\n\\n    event SetDepositCollateralAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetLiquidateBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetLiquidationIncentive(\\n        address indexed admin,\\n        uint256 oldLiquidationIncentive,\\n        uint256 newLiquidationIncentive\\n    );\\n\\n    event SetRedeemFyTokensAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetRepayBorrowAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n\\n    event SetOracle(address indexed admin, address oldOracle, address newOracle);\\n\\n    event SetSupplyUnderlyingAllowed(address indexed admin, FyTokenInterface indexed fyToken, bool state);\\n}\\n\"},\"FintrollerStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Exponential.sol\\\";\\n\\nimport \\\"./FyTokenInterface.sol\\\";\\nimport \\\"./ChainlinkOperatorInterface.sol\\\";\\n\\n/**\\n * @title FintrollerStorage\\n * @author Hifi\\n */\\nabstract contract FintrollerStorage is Exponential {\\n    struct Bond {\\n        Exp collateralizationRatio;\\n        uint256 debtCeiling;\\n        bool isBorrowAllowed;\\n        bool isDepositCollateralAllowed;\\n        bool isLiquidateBorrowAllowed;\\n        bool isListed;\\n        bool isRedeemFyTokenAllowed;\\n        bool isRepayBorrowAllowed;\\n        bool isSupplyUnderlyingAllowed;\\n    }\\n\\n    /**\\n     * @dev Maps the fyToken address to the Bond structs.\\n     */\\n    mapping(FyTokenInterface =\\u003e Bond) internal bonds;\\n\\n    /**\\n     * @notice The contract that provides price data for the collateral and the underlying asset.\\n     */\\n    ChainlinkOperatorInterface public oracle;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives.\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @dev The threshold below which the collateralization ratio cannot be set, equivalent to 100%.\\n     */\\n    uint256 internal constant collateralizationRatioLowerBoundMantissa = 1.0e18;\\n\\n    /**\\n     * @dev The threshold above which the collateralization ratio cannot be set, equivalent to 10,000%.\\n     */\\n    uint256 internal constant collateralizationRatioUpperBoundMantissa = 1.0e20;\\n\\n    /**\\n     * @dev The dafault collateralization ratio set when a new bond is listed, equivalent to 150%.\\n     */\\n    uint256 internal constant defaultCollateralizationRatioMantissa = 1.5e18;\\n\\n    /**\\n     * @dev The threshold below which the liquidation incentive cannot be set, equivalent to 100%.\\n     */\\n    uint256 internal constant liquidationIncentiveLowerBoundMantissa = 1.0e18;\\n\\n    /**\\n     * @dev The threshold above which the liquidation incentive cannot be set, equivalent to 150%.\\n     */\\n    uint256 internal constant liquidationIncentiveUpperBoundMantissa = 1.5e18;\\n\\n    /**\\n     * @notice Indicator that this is a Fintroller contract, for inspection.\\n     */\\n    bool public constant isFintroller = true;\\n}\\n\"},\"FyTokenInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./FyTokenStorage.sol\\\";\\n\\n/**\\n * @title FyTokenInterface\\n * @author Hifi\\n */\\nabstract contract FyTokenInterface is\\n    FyTokenStorage, /* no dependency */\\n    Erc20Interface /* one dependency */\\n{\\n    /**\\n     * CONSTANT FUNCTIONS\\n     */\\n    function isMatured() public view virtual returns (bool);\\n\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function borrow(uint256 borrowAmount) external virtual returns (bool);\\n\\n    function burn(address holder, uint256 burnAmount) external virtual returns (bool);\\n\\n    function liquidateBorrow(address borrower, uint256 repayAmount) external virtual returns (bool);\\n\\n    function mint(address beneficiary, uint256 mintAmount) external virtual returns (bool);\\n\\n    function repayBorrow(uint256 repayAmount) external virtual returns (bool);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (bool);\\n\\n    function _setFintroller(FintrollerInterface newFintroller) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event Borrow(address indexed borrower, uint256 borrowAmount);\\n\\n    event LiquidateBorrow(\\n        address indexed liquidator,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        uint256 clutchedCollateralAmount\\n    );\\n\\n    event RepayBorrow(address indexed payer, address indexed borrower, uint256 repayAmount, uint256 newDebt);\\n\\n    event SetFintroller(address indexed admin, FintrollerInterface oldFintroller, FintrollerInterface newFintroller);\\n}\\n\"},\"FyTokenStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./BalanceSheetInterface.sol\\\";\\nimport \\\"./FintrollerInterface.sol\\\";\\nimport \\\"./RedemptionPoolInterface.sol\\\";\\n\\n/**\\n * @title FyTokenStorage\\n * @author Hifi\\n */\\nabstract contract FyTokenStorage {\\n    /**\\n     * STORAGE PROPERTIES\\n     */\\n\\n    /**\\n     * @notice The global debt registry.\\n     */\\n    BalanceSheetInterface public balanceSheet;\\n\\n    /**\\n     * @notice The Erc20 asset that backs the borrows of this fyToken.\\n     */\\n    Erc20Interface public collateral;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the collateral precision.\\n     */\\n    uint256 public collateralPrecisionScalar;\\n\\n    /**\\n     * @notice Unix timestamp in seconds for when this token expires.\\n     */\\n    uint256 public expirationTime;\\n\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @notice The unique Redemption Pool associated with this contract.\\n     */\\n    RedemptionPoolInterface public redemptionPool;\\n\\n    /**\\n     * @notice The Erc20 underlying, or target, asset for this fyToken.\\n     */\\n    Erc20Interface public underlying;\\n\\n    /**\\n     * @notice The ratio between mantissa precision (1e18) and the underlying precision.\\n     */\\n    uint256 public underlyingPrecisionScalar;\\n\\n    /**\\n     * @notice Indicator that this is a FyToken contract, for inspection.\\n     */\\n    bool public constant isFyToken = true;\\n}\\n\"},\"RedemptionPoolInterface.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./RedemptionPoolStorage.sol\\\";\\n\\n/**\\n * @title RedemptionPoolInterface\\n * @author Hifi\\n */\\nabstract contract RedemptionPoolInterface is RedemptionPoolStorage {\\n    /**\\n     * NON-CONSTANT FUNCTIONS\\n     */\\n    function redeemFyTokens(uint256 fyTokenAmount) external virtual returns (bool);\\n\\n    function supplyUnderlying(uint256 underlyingAmount) external virtual returns (bool);\\n\\n    /**\\n     * EVENTS\\n     */\\n    event RedeemFyTokens(address indexed account, uint256 fyTokenAmount, uint256 underlyingAmount);\\n\\n    event SupplyUnderlying(address indexed account, uint256 underlyingAmount, uint256 fyTokenAmount);\\n}\\n\"},\"RedemptionPoolStorage.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./FintrollerInterface.sol\\\";\\nimport \\\"./FyTokenInterface.sol\\\";\\n\\n/**\\n * @title RedemptionPoolStorage\\n * @author Hifi\\n */\\nabstract contract RedemptionPoolStorage {\\n    /**\\n     * @notice The unique Fintroller associated with this contract.\\n     */\\n    FintrollerInterface public fintroller;\\n\\n    /**\\n     * @notice The amount of the underlying asset available to be redeemed after maturation.\\n     */\\n    uint256 public totalUnderlyingSupply;\\n\\n    /**\\n     * The unique fyToken associated with this Redemption Pool.\\n     */\\n    FyTokenInterface public fyToken;\\n\\n    /**\\n     * @notice Indicator that this is a Redemption Pool contract, for inspection.\\n     */\\n    bool public constant isRedemptionPool = true;\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"/* SPDX-License-Identifier: LGPL-3.0-or-later */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ReentrancyGuard\\n * @author Paul Razvan Berg\\n * @notice Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * @dev Forked from OpenZeppelin\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.1.0/contracts/math/ReentrancyGuard.sol\\n */\\nabstract contract ReentrancyGuard {\\n    bool private notEntered;\\n\\n    /*\\n     * Storing an initial non-zero value makes deployment a bit more expensive\\n     * but in exchange the refund on every call to nonReentrant will be lower\\n     * in amount. Since refunds are capped to a percetange of the total\\n     * transaction\\u0027s gas, it is best to keep them low in cases like this\\n     * one, to increase the likelihood of the full refund coming into effect.\\n     */\\n    constructor() {\\n        notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Prevents a contract from calling itself, directly or indirectly.\\n     * @dev Calling a `nonReentrant` function from another `nonReentrant` function\\n     * is not supported. It is possible to prevent this from happening by making\\n     * the `nonReentrant` function external, and make it call a `private`\\n     * function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        /* On the first call to nonReentrant, _notEntered will be true. */\\n        require(notEntered, \\\"ERR_REENTRANT_CALL\\\");\\n\\n        /* Any calls to nonReentrant after this point will fail. */\\n        notEntered = false;\\n\\n        _;\\n\\n        /*\\n         * By storing the original value once again, a refund is triggered (see\\n         * https://eips.ethereum.org/EIPS/eip-2200).\\n         */\\n        notEntered = true;\\n    }\\n}\\n\"},\"SafeErc20.sol\":{\"content\":\"/* SPDX-License-Identifier: MIT */\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Erc20Interface.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeErc20.sol\\n * @author Paul Razvan Berg\\n * @notice Wraps around Erc20 operations that throw on failure (when the token contract\\n * returns false). Tokens that return no value (and instead revert or throw\\n * on failure) are also supported, non-reverting calls are assumed to be successful.\\n *\\n * To use this library you can add a `using SafeErc20 for Erc20Interface;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n *\\n * @dev Forked from OpenZeppelin\\n * https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/v3.1.0/contracts/utils/Address.sol\\n */\\nlibrary SafeErc20 {\\n    using Address for address;\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function safeTransfer(\\n        Erc20Interface token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\n    }\\n\\n    function safeTransferFrom(\\n        Erc20Interface token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\\n    }\\n\\n    /**\\n     * PRIVATE FUNCTIONS\\n     */\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it cannot be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(Erc20Interface token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n        bytes memory returndata = functionCall(address(token), data, \\\"ERR_SAFE_ERC20_LOW_LEVEL_CALL\\\");\\n        if (returndata.length \\u003e 0) {\\n            /* Return data is optional. */\\n            require(abi.decode(returndata, (bool)), \\\"ERR_SAFE_ERC20_ERC20_OPERATION\\\");\\n        }\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(target.isContract(), \\\"ERR_SAFE_ERC20_CALL_TO_NON_CONTRACT\\\");\\n\\n        /* solhint-disable-next-line avoid-low-level-calls */\\n        (bool success, bytes memory returndata) = target.call(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            /* Look for revert reason and bubble it up if present */\\n            if (returndata.length \\u003e 0) {\\n                /* The easiest way to bubble the revert reason is using memory via assembly. */\\n\\n                /* solhint-disable-next-line no-inline-assembly */\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract FintrollerInterface\",\"name\":\"fintroller_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clutchedCollateralAmount\",\"type\":\"uint256\"}],\"name\":\"ClutchCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"DepositCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"FreeCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"LockCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"OpenVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"SetVaultDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"_transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"clutchCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fintroller\",\"outputs\":[{\"internalType\":\"contract FintrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"freeCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"getClutchableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getCurrentCollateralizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalCollateralizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getVaultDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getVaultLockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"isAccountUnderwater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBalanceSheet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"isVaultOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"lockCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"openVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newVaultDebt\",\"type\":\"uint256\"}],\"name\":\"setVaultDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FyTokenInterface\",\"name\":\"fyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BalanceSheet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b66a6c742a326876e1d826d8369a645d23009726","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4437b66d5d61011e170bd51406ecc917f70e9a6ca63f3010cb23c3bb8a202781"}]}