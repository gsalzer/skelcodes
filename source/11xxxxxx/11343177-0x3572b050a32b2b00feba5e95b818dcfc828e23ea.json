{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract LAVAContract {\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\nabstract contract RewardContract {\r\n    function getLavaUNIv2Balance() external view virtual returns (uint256);\r\n    function giveLavaUNIv2Reward(address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\ncontract LAVAStaker is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    LAVAContract private _lavaContract;                      // lava token contract\r\n    RewardContract private _rewardContract;                 // reward contract\r\n\r\n    mapping (address => StakerInfo) private _stakeMap;      // map for stakers\r\n\r\n    address private _devWallet;                             // dev wallet address\r\n    uint256 private _devLastClaimTimestamp;                 // dev wallet address\r\n    address[] private _stakers;                             // staker's array\r\n    \r\n    uint256 private _totalStakedAmount = 0;                // total staked amount\r\n    uint256 private _minStakeAmount = 1e18;                // min stakable amount\r\n    \r\n    uint256 private _rewardPortion = 10;                    // reward portion 10%\r\n    \r\n    uint256 private _rewardFee = 98;                        // reward fee 98%, rest for dev 2%\r\n\r\n\r\n    struct StakerInfo {\r\n        uint256 stakedAmount;\r\n        uint256 lastClaimTimestamp;\r\n        uint256 rewardAmount;\r\n    }\r\n    \r\n    // Events\r\n    event Staked(address indexed staker, uint256 amount);\r\n    event Unstaked(address indexed staker, uint256 amount);\r\n    event Claim(address indexed staker, uint256 amount);\r\n    \r\n    constructor (LAVAContract lavaContract, address devWallet) public {\r\n        _lavaContract = lavaContract;\r\n        _devWallet = devWallet;\r\n        \r\n    }\r\n    \r\n    function stake(uint256 amount) public {\r\n        require(\r\n            amount >= _minStakeAmount,\r\n            \"LAVAStaker: stake amount is less than min stake amount.\"\r\n        );\r\n\r\n        require(\r\n            _lavaContract.transferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                amount\r\n            ),\r\n            \"LAVAStaker: stake failed.\"\r\n        );\r\n        \r\n        uint256 currentTimestamp = uint256(now);\r\n        \r\n        if(_stakers.length == 0)\r\n            _devLastClaimTimestamp = currentTimestamp;\r\n\r\n        if(_stakeMap[_msgSender()].stakedAmount == 0 && _stakeMap[_msgSender()].lastClaimTimestamp == 0) {\r\n            _stakers.push(_msgSender());\r\n            _stakeMap[_msgSender()].lastClaimTimestamp = currentTimestamp;\r\n        } else {\r\n            _stakeMap[_msgSender()].rewardAmount = _stakeMap[_msgSender()].rewardAmount.add(calcReward(_msgSender(), currentTimestamp));\r\n            _stakeMap[_msgSender()].lastClaimTimestamp = currentTimestamp;\r\n        }\r\n            \r\n        _stakeMap[_msgSender()].stakedAmount = _stakeMap[_msgSender()].stakedAmount.add(amount);\r\n        _totalStakedAmount = _totalStakedAmount.add(amount);\r\n        \r\n        emit Staked(_msgSender(), amount);\r\n    }\r\n    \r\n    function unstake(uint256 amount) public {\r\n        require(\r\n            _stakeMap[_msgSender()].stakedAmount >= amount,\r\n            \"LAVAStaker: unstake amount exceededs the staked amount.\"\r\n        );\r\n        \r\n        uint256 currentTimestamp = uint256(now);\r\n\r\n        _stakeMap[_msgSender()].rewardAmount = _stakeMap[_msgSender()].rewardAmount.add(calcReward(_msgSender(), currentTimestamp));\r\n        _stakeMap[_msgSender()].lastClaimTimestamp = currentTimestamp;\r\n        \r\n        _stakeMap[_msgSender()].stakedAmount = _stakeMap[_msgSender()].stakedAmount.sub(amount);\r\n        _totalStakedAmount = _totalStakedAmount.sub(amount);\r\n\r\n        require(\r\n            _lavaContract.transfer(\r\n                _msgSender(),\r\n                amount\r\n            ),\r\n            \"LAVAStaker: unstake failed.\"\r\n        );\r\n        \r\n        if(_stakeMap[_msgSender()].stakedAmount == 0) {\r\n            _stakeMap[_msgSender()].lastClaimTimestamp = 0;\r\n            for(uint i=0; i<_stakers.length; i++) {\r\n                if(_stakers[i] == _msgSender()) {\r\n                    _stakers[i] = _stakers[_stakers.length-1];\r\n                    _stakers.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        emit Unstaked(_msgSender(), amount);\r\n    }\r\n    \r\n    function claim() public {\r\n        uint256 currentTimestamp = uint256(now);\r\n        uint256 rewardAmount = _stakeMap[_msgSender()].rewardAmount.add(calcReward(_msgSender(), currentTimestamp));\r\n        _stakeMap[_msgSender()].lastClaimTimestamp = currentTimestamp;\r\n        \r\n        require(\r\n            _rewardContract.giveLavaUNIv2Reward(_msgSender(), rewardAmount),\r\n            \"LAVAStaker: claim failed.\"\r\n        );\r\n        \r\n        _stakeMap[_msgSender()].rewardAmount = 0;\r\n\t    emit Claim(_msgSender(), rewardAmount);\r\n\t    \r\n\t    if(currentTimestamp.sub(_devLastClaimTimestamp) >= 86400) {\r\n\t        rewardAmount = calcDevReward(currentTimestamp);\r\n\t        _devLastClaimTimestamp = currentTimestamp;\r\n\t        \r\n\t         require(\r\n                _rewardContract.giveLavaUNIv2Reward(_devWallet, rewardAmount),\r\n                \"LAVAStaker: dev reward claim failed.\"\r\n            );\r\n\t        emit Claim(_devWallet, rewardAmount);\r\n\t    }\r\n    }\r\n    \r\n    function endStake() external {\r\n        unstake(_stakeMap[_msgSender()].stakedAmount);\r\n        claim();\r\n    }\r\n    \r\n    function calcReward(address staker, uint256 currentTimestamp) private view returns (uint256) {\r\n        if(_totalStakedAmount == 0)\r\n            return 0;\r\n        uint256 rewardPoolBalance = _rewardContract.getLavaUNIv2Balance();\r\n        uint256 passTime = currentTimestamp.sub(_stakeMap[staker].lastClaimTimestamp);\r\n        uint256 rewardAmountForStakers = rewardPoolBalance.mul(_rewardPortion).div(100).mul(_rewardFee).div(100);\r\n        uint256 rewardAmount = rewardAmountForStakers.mul(passTime).div(86400).mul(_stakeMap[staker].stakedAmount).div(_totalStakedAmount);\r\n        return rewardAmount;\r\n    }\r\n    \r\n    function calcDevReward(uint256 currentTimestamp) private view returns (uint256) {\r\n        uint256 rewardPoolBalance = _rewardContract.getLavaUNIv2Balance();\r\n        uint256 passTime = currentTimestamp.sub(_devLastClaimTimestamp);\r\n        uint256 rewardAmount = rewardPoolBalance.mul(_rewardPortion).div(100).mul(uint256(100).sub(_rewardFee)).div(100).mul(passTime).div(86400);\r\n        return rewardAmount;\r\n    }\r\n    \r\n    /**\r\n     * Get store wallet\r\n     */\r\n    function getRewardContract() external view returns (address) {\r\n        return address(_rewardContract);\r\n    }\r\n     \r\n    /**\r\n     * Get total staked amount\r\n     */\r\n    function getTotalStakedAmount() external view returns (uint256) {\r\n        return _totalStakedAmount;\r\n    }\r\n    \r\n    /**\r\n     * Get reward amount of staker\r\n     */\r\n    function getReward(address staker) external view returns (uint256) {\r\n        return _stakeMap[staker].rewardAmount.add(calcReward(staker, now));\r\n    }\r\n    \r\n    /**\r\n     * Get reward pool balance (LAVA Uni-V2)\r\n     */\r\n    function getRewardPoolBalance() external view returns (uint256) {\r\n        return _rewardContract.getLavaUNIv2Balance();\r\n    }\r\n    \r\n    /**\r\n     * Get last claim timestamp\r\n     */\r\n    function getLastClaimTimestamp(address staker) external view returns (uint256) {\r\n        return _stakeMap[staker].lastClaimTimestamp;\r\n    }\r\n    \r\n    /**\r\n     * Get staked amount of staker\r\n     */\r\n    function getStakedAmount(address staker) external view returns (uint256) {\r\n        return _stakeMap[staker].stakedAmount;\r\n    }\r\n    \r\n    /**\r\n     * Get min stake amount\r\n     */\r\n    function getMinStakeAmount() external view returns (uint256) {\r\n        return _minStakeAmount;\r\n    }\r\n    \r\n    /**\r\n     * Get rewards portion\r\n     */\r\n    function getRewardPortion() external view returns (uint256) {\r\n        return _rewardPortion;\r\n    }\r\n    \r\n    /**\r\n     * Get staker count\r\n     */\r\n    function getStakerCount() external view returns (uint256) {\r\n        return _stakers.length;\r\n    }\r\n    \r\n     /**\r\n     * Get rewards fee\r\n     */\r\n    function getRewardFee() external view returns (uint256) {\r\n        return _rewardFee;\r\n    }\r\n    \r\n    /**\r\n     * Get staked rank\r\n     */\r\n    function getStakedRank(address staker) external view returns (uint256) {\r\n        uint256 rank = 1;\r\n        uint256 senderStakedAmount = _stakeMap[staker].stakedAmount;\r\n        \r\n        for(uint i=0; i<_stakers.length; i++) {\r\n            if(_stakers[i] != staker && senderStakedAmount < _stakeMap[_stakers[i]].stakedAmount)\r\n                rank = rank.add(1);\r\n        }\r\n        return rank;\r\n    }\r\n    \r\n    /**\r\n     * Set store wallet contract address\r\n     */\r\n    function setRewardContract(RewardContract rewardContract) external onlyOwner returns (bool) {\r\n        require(address(rewardContract) != address(0), 'LAVAStaker: reward contract address should not be zero address.');\r\n\r\n        _rewardContract = rewardContract;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set rewards portion in store balance. \r\n     * ex: 10 => 10%\r\n     */\r\n    function setRewardPortion(uint256 rewardPortion) external onlyOwner returns (bool) {\r\n        require(rewardPortion >= 10 && rewardPortion <= 100, 'LAVAStaker: reward portion should be in 10 ~ 100.');\r\n\r\n        _rewardPortion = rewardPortion;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set rewards portion for stakers in rewards amount. \r\n     * ex: 98 => 98% (2% for dev)\r\n     */\r\n    function setRewardFee(uint256 rewardFee) external onlyOwner returns (bool) {\r\n        require(rewardFee >= 96 && rewardFee <= 100, 'LAVAStaker: reward fee should be in 96 ~ 100.' );\r\n\r\n        _rewardFee = rewardFee;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract LAVAContract\",\"name\":\"lavaContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getLastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RewardContract\",\"name\":\"rewardContract\",\"type\":\"address\"}],\"name\":\"setRewardContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"}],\"name\":\"setRewardFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPortion\",\"type\":\"uint256\"}],\"name\":\"setRewardPortion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LAVAStaker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005588b004919b0b77e526d62aa5b66f8afe71f5f00000000000000000000000002793f74bfdcded0aeb111d718d3fcd93a0dbc96b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://80ceb50ed44f0513b14e41894ef497ac59d5deea46a17c44d8d0e787534e2b31"}]}