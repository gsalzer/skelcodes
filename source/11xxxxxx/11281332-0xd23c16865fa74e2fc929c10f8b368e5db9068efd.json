{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >0.6.99 <0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC1363Receiver {\r\n    function onTransferReceived(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4); // solhint-disable-line  max-line-length\r\n}\r\n\r\ninterface IERC1363Spender {\r\n    function onApprovalReceived(address owner, uint256 value, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ncontract Ballot is IERC1363Spender, IERC1363Receiver{   \r\n    using SafeMath for uint256;\r\n\r\n    bytes4 internal constant _INTERFACE_ID_ERC1363_RECEIVER = 0x88a7ca5c;\r\n    bytes4 internal constant _INTERFACE_ID_ERC1363_SPENDER = 0x7b04a2d0;\r\n\r\n    struct Voter{\r\n        uint256 weight;\r\n        bool voted;\r\n    }\r\n    mapping(address => Voter) private _voters;\r\n    address [] _voters_list;\r\n    \r\n    IERC20 private _token_contract;\r\n    address private _token_contract_address;\r\n    address private _receive_address;\r\n    address private _owner;\r\n\r\n    uint256 public _period;\r\n\r\n    //need to be update\r\n    uint256 public _end_time;\r\n    uint256 private _pool;\r\n    uint256 private _y_pool; // stat-pool: Yes\r\n    uint256 private _n_pool; // stat-pool: No\r\n    uint256 private _threshold; \r\n    \r\n    uint256 private _state;\r\n\r\n    //Event\r\n    event Transfer(address indexed from, uint256 value);\r\n    event StartVote(address indexed to, uint256 end_time);\r\n    event Vote(address indexed from, uint256 state, bool agree, uint256 weight);\r\n\r\n    constructor(address  token_contract){\r\n        _token_contract_address = token_contract;\r\n        _token_contract = IERC20(token_contract);\r\n        _owner = msg.sender;\r\n        _period = 2419200; // 4 weeks\r\n\r\n    }\r\n    // ERC1363 Receiver\r\n    function onTransferReceived(address operator, address from, uint256 value, bytes calldata data) public override returns(bytes4){\r\n        // state check\r\n        require(_state == 0, \"Token collection not start\");\r\n        require(msg.sender == _token_contract_address, \"Not called from valid token contract\");\r\n        require(value > 0, \"Not valid value\");\r\n\r\n        record(from, value);\r\n        return _INTERFACE_ID_ERC1363_RECEIVER;\r\n    }\r\n    // ERC1363 Spender\r\n    function onApprovalReceived(address owner, uint256 value, bytes calldata data) public override returns(bytes4){\r\n        //state check\r\n        require(_state == 0, \"Token collection not start\");\r\n        require(msg.sender == _token_contract_address, \"Not called from valid token contract\");\r\n        require(value > 0, \"Not valid value\");\r\n        require(_token_contract.transferFrom(owner, address(this), value),\"Invalid transferFrom call\");\r\n\r\n        record(owner, value);\r\n        return _INTERFACE_ID_ERC1363_SPENDER;\r\n    }\r\n    // ERC20\r\n    function transferToken(address owner, uint256 value) public{\r\n        //state check\r\n        require(_state == 0, \"Token collection not start\");\r\n        require(value > 0, \"Not valid value\");\r\n        require (_token_contract.transferFrom(owner,address(this),value), \"Invalid transferFrom call\");\r\n\r\n        record(owner, value);\r\n    }\r\n    \r\n    function weightOf(address voter) public view returns(uint256){\r\n        return _voters[voter].weight;\r\n    }\r\n\r\n    function record(address voter, uint256 value) private{\r\n        _voters_list.push(voter);\r\n        _voters[voter].weight = _voters[voter].weight.add(value);\r\n        _pool = _pool.add(value);\r\n\r\n        emit Transfer(voter, value);\r\n    }\r\n\r\n    function stopCollection(address receiveAddress) public{\r\n        //state check\r\n        require(_state == 0, \"Not proper state\");\r\n\r\n        require(msg.sender == _owner, \"Not valid owner address\");\r\n        require(receiveAddress != address(this), \"Please use different address\");\r\n\r\n        //check receive enough balance, no less than _pool\r\n        require(_token_contract.balanceOf(address(this)) >= _pool, \"Not enough balance\");\r\n\r\n        _state = 1;\r\n        _threshold = _pool.div(2);\r\n        _receive_address = receiveAddress;\r\n        _end_time = block.timestamp.add(_period); //currentTime + 4 weeks\r\n\r\n        emit StartVote(receiveAddress, _end_time);\r\n    }\r\n\r\n    function submitVote(uint256 state, bool agree) public returns(bool){\r\n        if (block.timestamp > _end_time && _end_time != 0){\r\n            tokenManagement();\r\n            reset();\r\n            return false;\r\n        }\r\n\r\n        //state check\r\n        require(_state != 0, \"Not voting time\");\r\n        require(_state == state, \"Not expected stage\");\r\n\r\n        require(_voters[msg.sender].weight > 0, \"Not valid voter\");\r\n        require(!_voters[msg.sender].voted, \"Already vote\");\r\n\r\n        _voters[msg.sender].voted = true;\r\n        uint256 weight = _voters[msg.sender].weight;\r\n        \r\n        if (agree){\r\n            _y_pool = _y_pool.add(weight);\r\n        } else {\r\n            _n_pool = _n_pool.add(weight);\r\n        }\r\n\r\n        emit Vote(msg.sender, _state, agree, weight);\r\n\r\n        tally();\r\n        return true;\r\n    }\r\n    \r\n    function tally() public returns(string memory) {\r\n        require(_state != 0, \"Not tally time\");\r\n        string memory result;\r\n\r\n        if (block.timestamp > _end_time && _end_time != 0){\r\n            tokenManagement();\r\n            reset();\r\n            result = \"Time out\";\r\n        }\r\n\r\n        if (_y_pool >= _threshold){\r\n            if (_state == 3){\r\n                require(_token_contract.balanceOf(address(this)) >= _pool, \"Not enough balance\");\r\n                _token_contract.transfer(_receive_address, _pool);\r\n                reset();\r\n            } else{\r\n                clearVote();\r\n            }\r\n            result = \"Success\";\r\n        }else if (_n_pool > _threshold){\r\n            tokenManagement();\r\n            reset();\r\n            result = \"Fail\";\r\n        }else{\r\n            result = \"On going\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Action if > 50% N votes\r\n    function tokenManagement() private {\r\n        //based on _state, calculate percent\r\n        require(_token_contract.balanceOf(address(this)) >= _pool, \"Not enough balance\");\r\n    \r\n        if (_state == 1){\r\n            for (uint i = 0; i < _voters_list.length ; i++){\r\n                _token_contract.transfer(_voters_list[i],_voters[_voters_list[i]].weight);\r\n            }\r\n        } else if (_state == 2){\r\n            for (uint i = 0; i < _voters_list.length ; i++){\r\n                uint256 value = _voters[_voters_list[i]].weight.mul(8).div(10);\r\n                _token_contract.transfer(_voters_list[i],value);\r\n                _pool = _pool.sub(value);\r\n            }\r\n            _token_contract.transfer(_receive_address, _pool);\r\n        } else if (_state == 3){\r\n            for (uint i = 0; i < _voters_list.length ; i++){\r\n                uint256 value = _voters[_voters_list[i]].weight.div(10);\r\n                _token_contract.transfer(_voters_list[i],value);\r\n                _pool = _pool.sub(value);\r\n            }\r\n            _token_contract.transfer(_receive_address, _pool);\r\n        }\r\n    }\r\n\r\n    function clearVote() private{\r\n        for (uint i = 0; i < _voters_list.length ; i++){\r\n            _voters[_voters_list[i]].voted = false;\r\n        }\r\n        _y_pool = 0;\r\n        _n_pool = 0;\r\n        _state += 1;\r\n        _end_time = block.timestamp.add(_period);\r\n    }\r\n\r\n    function reset() private{\r\n        for (uint i = 0; i < _voters_list.length ; i++){\r\n            _voters[_voters_list[i]].weight = 0;\r\n            _voters[_voters_list[i]].voted = false;\r\n        }\r\n        delete _voters_list;\r\n\r\n        _end_time = 0;\r\n        _pool = 0;\r\n        _n_pool = 0;\r\n        _y_pool = 0;\r\n        _threshold = 0;\r\n        _state = 0;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end_time\",\"type\":\"uint256\"}],\"name\":\"StartVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"agree\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_end_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onApprovalReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTransferReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"}],\"name\":\"stopCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"agree\",\"type\":\"bool\"}],\"name\":\"submitVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tally\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"weightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Ballot","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000070ea38bea29b5bca3ed859d301feb84b51236f9c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5385617cf3d1348d9c686d364bc122afc63170e65e9d60ef3053977c0733e23b"}]}