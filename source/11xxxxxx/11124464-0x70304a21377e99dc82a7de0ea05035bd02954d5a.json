{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\common\\Base.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\token\\IPoolTokenBalanceChangeRecipient.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface IPoolTokenBalanceChangeRecipient {\r\n    function poolTokenBalanceChanged(address user) external; \r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\IDefiProtocol.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface IDefiProtocol {\r\n    /**\r\n     * @notice Transfer tokens from sender to DeFi protocol\r\n     * @param token Address of token\r\n     * @param amount Value of token to deposit\r\n     * @return new balances of each token\r\n     */\r\n    function handleDeposit(address token, uint256 amount) external;\r\n\r\n    function handleDeposit(address[] calldata tokens, uint256[] calldata amounts) external;\r\n\r\n    /**\r\n     * @notice Transfer tokens from DeFi protocol to beneficiary\r\n     * @param token Address of token\r\n     * @param amount Denormalized value of token to withdraw\r\n     * @return new balances of each token\r\n     */\r\n    function withdraw(address beneficiary, address token, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Transfer tokens from DeFi protocol to beneficiary\r\n     * @param amounts Array of amounts to withdraw, in order of supportedTokens()\r\n     * @return new balances of each token\r\n     */\r\n    function withdraw(address beneficiary, uint256[] calldata amounts) external;\r\n\r\n    /**\r\n     * @notice Claim rewards. Reward tokens will be stored on protocol balance.\r\n     * @return tokens and their amounts received\r\n     */\r\n    function claimRewards() external returns(address[] memory tokens, uint256[] memory amounts);\r\n\r\n    /**\r\n     * @notice Withdraw reward tokens to user\r\n     * @dev called by SavingsModule\r\n     * @param token Reward token to withdraw\r\n     * @param user Who should receive tokens\r\n     * @param amount How many tokens to send\r\n     */\r\n    function withdrawReward(address token, address user, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev This function is not view because on some protocols \r\n     * (Compound, RAY with Compound oportunity) it may cause storage writes\r\n     */\r\n    function balanceOf(address token) external returns(uint256);\r\n\r\n    /**\r\n     * @notice Balance of all tokens supported by protocol \r\n     * @dev This function is not view because on some protocols \r\n     * (Compound, RAY with Compound oportunity) it may cause storage writes\r\n     */\r\n    function balanceOfAll() external returns(uint256[] memory); \r\n\r\n    /**\r\n     * @notice Returns optimal proportions of underlying tokens \r\n     * to prevent fees on deposit/withdrawl if supplying multiple tokens\r\n     * @dev This function is not view because on some protocols \r\n     * (Compound, RAY with Compound oportunity) it may cause storage writes\r\n     * same as balanceOfAll()\r\n     */\r\n    function optimalProportions() external returns(uint256[] memory);\r\n\r\n    /**\r\n    * @notice Returns normalized (to USD with 18 decimals) summary balance \r\n    * of pool using all tokens in this protocol\r\n    */\r\n    function normalizedBalance() external returns(uint256);\r\n\r\n    function supportedTokens() external view returns(address[] memory);\r\n\r\n    function supportedTokensCount() external view returns(uint256);\r\n\r\n    function supportedRewardTokens() external view returns(address[] memory);\r\n\r\n    function isSupportedRewardToken(address token) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Returns if this protocol can swap all it's normalizedBalance() to specified token\r\n     */\r\n    function canSwapToToken(address token) external view returns(bool);\r\n\r\n}\r\n\r\n// File: contracts\\core\\ModuleNames.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string internal constant MODULE_ACCESS            = \"access\";\r\n    string internal constant MODULE_SAVINGS           = \"savings\";\r\n    string internal constant MODULE_INVESTING         = \"investing\";\r\n    string internal constant MODULE_STAKING_AKRO      = \"staking\";\r\n    string internal constant MODULE_STAKING_ADEL      = \"stakingAdel\";\r\n    string internal constant MODULE_DCA               = \"dca\";\r\n    string internal constant MODULE_REWARD            = \"reward\";\r\n    string internal constant MODULE_REWARD_DISTR      = \"rewardDistributions\";\r\n\r\n    // Pool tokens\r\n    string internal constant TOKEN_AKRO               = \"akro\";    \r\n    string internal constant TOKEN_ADEL               = \"adel\";    \r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string internal constant CONTRACT_RAY             = \"ray\";\r\n}\r\n\r\n// File: contracts\\common\\Module.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        // string memory error = string(abi.encodePacked(\"Module: requested module not found - \", module));\r\n        // require(moduleAddress != ZERO_ADDRESS, error);\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\access\\IAccessModule.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface IAccessModule {\r\n    enum Operation {\r\n        Deposit,\r\n        Withdraw\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if operation is allowed\r\n     * @param operation Requested operation\r\n     * @param sender Sender of transaction\r\n     */\r\n    function isOperationAllowed(Operation operation, address sender) external view returns(bool);\r\n}\r\n\r\n// File: contracts\\modules\\access\\AccessChecker.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\ncontract AccessChecker is Module {\r\n    modifier operationAllowed(IAccessModule.Operation operation) {\r\n        IAccessModule am = IAccessModule(getModuleAddress(MODULE_ACCESS));\r\n        require(am.isOperationAllowed(operation, _msgSender()), \"AccessChecker: operation not allowed\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\roles\\CapperRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract CapperRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event CapperAdded(address indexed account);\r\n    event CapperRemoved(address indexed account);\r\n\r\n    Roles.Role private _cappers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isCapper(sender)) {\r\n            _addCapper(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyCapper() {\r\n        require(isCapper(_msgSender()), \"CapperRole: caller does not have the Capper role\");\r\n        _;\r\n    }\r\n\r\n    function isCapper(address account) public view returns (bool) {\r\n        return _cappers.has(account);\r\n    }\r\n\r\n    function addCapper(address account) public onlyCapper {\r\n        _addCapper(account);\r\n    }\r\n\r\n    function renounceCapper() public {\r\n        _removeCapper(_msgSender());\r\n    }\r\n\r\n    function _addCapper(address account) internal {\r\n        _cappers.add(account);\r\n        emit CapperAdded(account);\r\n    }\r\n\r\n    function _removeCapper(address account) internal {\r\n        _cappers.remove(account);\r\n        emit CapperRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\roles\\MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract MinterRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isMinter(sender)) {\r\n            _addMinter(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is Initializable, ERC20, MinterRole {\r\n    function initialize(address sender) public initializer {\r\n        MinterRole.initialize(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Initializable, Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\modules\\token\\DistributionToken.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n//solhint-disable func-order\r\ncontract DistributionToken is ERC20, ERC20Mintable {\r\n    using SafeMath for uint256;\r\n    uint256 public constant DISTRIBUTION_AGGREGATION_PERIOD = 24*60*60;\r\n\r\n    event DistributionCreated(uint256 amount, uint256 totalSupply);\r\n    event DistributionsClaimed(address account, uint256 amount, uint256 fromDistribution, uint256 toDistribution);\r\n    event DistributionAccumulatorIncreased(uint256 amount);\r\n\r\n    struct Distribution {\r\n        uint256 amount;         // Amount of tokens being distributed during the event\r\n        uint256 totalSupply;    // Total supply before distribution\r\n    }\r\n\r\n    Distribution[] public distributions;                   // Array of all distributions\r\n    mapping(address => uint256) public nextDistributions;  // Map account to first distribution not yet processed\r\n\r\n    uint256 public nextDistributionTimestamp;      //Timestamp when next distribuition should be fired regardles of accumulated tokens\r\n    uint256 public distributionAccumulator;        //Tokens accumulated for next distribution\r\n\r\n    function distribute(uint256 amount) external onlyMinter {\r\n        distributionAccumulator = distributionAccumulator.add(amount);\r\n        emit DistributionAccumulatorIncreased(amount);\r\n        _createDistributionIfReady();\r\n    }\r\n\r\n    function createDistribution() external onlyMinter {\r\n        require(distributionAccumulator > 0, \"DistributionToken: nothing to distribute\");\r\n        _createDistribution();\r\n    }\r\n\r\n    function claimDistributions(address account) external returns(uint256) {\r\n        _createDistributionIfReady();\r\n        uint256 amount = _updateUserBalance(account, distributions.length);\r\n        if (amount > 0) userBalanceChanged(account);\r\n        return amount;\r\n    }\r\n    \r\n    /**\r\n     * @notice Claims distributions and allows to specify how many distributions to process.\r\n     * This allows limit gas usage.\r\n     * One can do this for others\r\n     */\r\n    function claimDistributions(address account, uint256 toDistribution) external returns(uint256) {\r\n        require(toDistribution <= distributions.length, \"DistributionToken: lastDistribution too hight\");\r\n        require(nextDistributions[account] < toDistribution, \"DistributionToken: no distributions to claim\");\r\n        uint256 amount = _updateUserBalance(account, toDistribution);\r\n        if (amount > 0) userBalanceChanged(account);\r\n        return amount;\r\n    }\r\n\r\n    function claimDistributions(address[] calldata accounts) external {\r\n        _createDistributionIfReady();\r\n        for (uint256 i=0; i < accounts.length; i++){\r\n            uint256 amount = _updateUserBalance(accounts[i], distributions.length);\r\n            if (amount > 0) userBalanceChanged(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external {\r\n        require(toDistribution <= distributions.length, \"DistributionToken: lastDistribution too hight\");\r\n        for (uint256 i=0; i < accounts.length; i++){\r\n            uint256 amount = _updateUserBalance(accounts[i], toDistribution);\r\n            if (amount > 0) userBalanceChanged(accounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Full balance of account includes:\r\n     * - balance of tokens account holds himself (0 for addresses of locking contracts)\r\n     * - balance of tokens locked in contracts\r\n     * - tokens not yet claimed from distributions\r\n     */\r\n    function fullBalanceOf(address account) public view returns(uint256){\r\n        if (account == address(this)) return 0;  //Token itself only holds tokens for others\r\n        uint256 distributionBalance = distributionBalanceOf(account);\r\n        uint256 unclaimed = calculateClaimAmount(account);\r\n        return distributionBalance.add(unclaimed);\r\n    }\r\n\r\n    /**\r\n     * @notice How many tokens are not yet claimed from distributions\r\n     * @param account Account to check\r\n     * @return Amount of tokens available to claim\r\n     */\r\n    function calculateUnclaimedDistributions(address account) public view returns(uint256) {\r\n        return calculateClaimAmount(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of tokens distributed to inital amount between startDistribution and nextDistribution\r\n     * @param fromDistribution index of first Distribution to start calculations\r\n     * @param toDistribution index of distribuition next to the last processed\r\n     * @param initialBalance amount of tokens before startDistribution\r\n     * @return amount of tokens distributed\r\n     */\r\n    function calculateDistributedAmount(uint256 fromDistribution, uint256 toDistribution, uint256 initialBalance) public view returns(uint256) {\r\n        require(fromDistribution < toDistribution, \"DistributionToken: startDistribution is too high\");\r\n        require(toDistribution <= distributions.length, \"DistributionToken: nextDistribution is too high\");\r\n        return _calculateDistributedAmount(fromDistribution, toDistribution, initialBalance);\r\n    }\r\n\r\n    function nextDistribution() public view returns(uint256){\r\n        return distributions.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Balance of account, which is counted for distributions\r\n     * It only represents already distributed balance.\r\n     * @dev This function should be overloaded to include balance of tokens stored in proposals\r\n     */\r\n    function distributionBalanceOf(address account) public view returns(uint256) {\r\n        return balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Total supply which is counted for distributions\r\n     * It only represents already distributed tokens\r\n     * @dev This function should be overloaded to exclude tokens locked in loans\r\n     */\r\n    function distributionTotalSupply() public view returns(uint256){\r\n        return totalSupply();\r\n    }\r\n\r\n    // Override functions that change user balance\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(sender);\r\n        _updateUserBalance(recipient);\r\n        super._transfer(sender, recipient, amount);\r\n        userBalanceChanged(sender);\r\n        userBalanceChanged(recipient);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(account);\r\n        super._mint(account, amount);\r\n        userBalanceChanged(account);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(account);\r\n        super._burn(account, amount);\r\n        userBalanceChanged(account);\r\n    }\r\n\r\n    function _updateUserBalance(address account) internal returns(uint256) {\r\n        return _updateUserBalance(account, distributions.length);\r\n    }\r\n\r\n    function _updateUserBalance(address account, uint256 toDistribution) internal returns(uint256) {\r\n        uint256 fromDistribution = nextDistributions[account];\r\n        if (fromDistribution >= toDistribution) return 0;\r\n        uint256 distributionAmount = calculateClaimAmount(account, toDistribution);\r\n        nextDistributions[account] = toDistribution;\r\n        if (distributionAmount == 0) return 0;\r\n        super._transfer(address(this), account, distributionAmount);\r\n        emit DistributionsClaimed(account, distributionAmount, fromDistribution, toDistribution);\r\n        return distributionAmount;\r\n    }\r\n\r\n    function _createDistributionIfReady() internal {\r\n        if (!isReadyForDistribution()) return;\r\n        _createDistribution();\r\n    }\r\n    \r\n    function _createDistribution() internal {\r\n        uint256 currentTotalSupply = distributionTotalSupply();\r\n        distributions.push(Distribution({\r\n            amount:distributionAccumulator,\r\n            totalSupply: currentTotalSupply\r\n        }));\r\n        super._mint(address(this), distributionAccumulator); //Use super because we overloaded _mint in this contract and need old behaviour\r\n        emit DistributionCreated(distributionAccumulator, currentTotalSupply);\r\n\r\n        // Clear data for next distribution\r\n        distributionAccumulator = 0;\r\n        nextDistributionTimestamp = now.sub(now % DISTRIBUTION_AGGREGATION_PERIOD).add(DISTRIBUTION_AGGREGATION_PERIOD);\r\n    }\r\n\r\n    /**\r\n     * @dev This is a placeholder, which may be overrided to notify other contracts of PTK balance change\r\n     */\r\n    function userBalanceChanged(address /*account*/) internal {\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of account's tokens to be claimed from distributions\r\n     */\r\n    function calculateClaimAmount(address account) internal view returns(uint256) {\r\n        if (nextDistributions[account] >= distributions.length) return 0;\r\n        return calculateClaimAmount(account, distributions.length);\r\n    }\r\n\r\n    function calculateClaimAmount(address account, uint256 toDistribution) internal view returns(uint256) {\r\n        assert(toDistribution <= distributions.length);\r\n        return _calculateDistributedAmount(nextDistributions[account], toDistribution, distributionBalanceOf(account));\r\n    }\r\n\r\n    function _calculateDistributedAmount(uint256 fromDistribution, uint256 toDistribution, uint256 initialBalance) internal view returns(uint256) {\r\n        uint256 next = fromDistribution;\r\n        uint256 balance = initialBalance;\r\n        if (initialBalance == 0) return 0;\r\n        while (next < toDistribution) {\r\n            uint256 da = balance.mul(distributions[next].amount).div(distributions[next].totalSupply);\r\n            balance = balance.add(da);\r\n            next++;\r\n        }\r\n        return balance.sub(initialBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates if conditions for creating new distribution are met\r\n     */\r\n    function isReadyForDistribution() internal view returns(bool) {\r\n        return (distributionAccumulator > 0) && (now >= nextDistributionTimestamp);\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\token\\PoolToken.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PoolToken is Module, ERC20, ERC20Detailed, ERC20Mintable, ERC20Burnable, DistributionToken {\r\n\r\n    bool allowTransfers;\r\n\r\n    function initialize(address _pool, string memory poolName, string memory poolSymbol) public initializer {\r\n        Module.initialize(_pool);\r\n        ERC20Detailed.initialize(poolName, poolSymbol, 18);\r\n        ERC20Mintable.initialize(_msgSender());\r\n    }\r\n\r\n    function setAllowTransfers(bool _allowTransfers) public onlyOwner {\r\n        allowTransfers = _allowTransfers;\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides ERC20Burnable burnFrom to allow unlimited transfers by SavingsModule\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        if (isMinter(_msgSender())) {\r\n            //Skip decrease allowance\r\n            _burn(from, value);\r\n        }else{\r\n            super.burnFrom(from, value);\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        if( !allowTransfers && \r\n            (sender != address(this)) //transfers from *this* used for distributions\r\n        ){\r\n            revert(\"PoolToken: transfers between users disabled\");\r\n        }\r\n        super._transfer(sender, recipient, amount);\r\n    } \r\n\r\n    function userBalanceChanged(address account) internal {\r\n        IPoolTokenBalanceChangeRecipient rewardDistrModule = IPoolTokenBalanceChangeRecipient(getModuleAddress(MODULE_REWARD_DISTR));\r\n        rewardDistrModule.poolTokenBalanceChanged(account);\r\n    }\r\n\r\n    function distributionBalanceOf(address account) public view returns(uint256) {\r\n        return (account == address(this))?0:super.distributionBalanceOf(account);\r\n    }\r\n\r\n    function distributionTotalSupply() public view returns(uint256) {\r\n        return super.distributionTotalSupply().sub(balanceOf(address(this))); \r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\modules\\savings\\RewardDistributions.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardDistributions is Base, AccessChecker {\r\n    using SafeMath for uint256;\r\n\r\n    struct RewardTokenDistribution {\r\n        address poolToken;                  // PoolToken which holders will receive reward\r\n        uint256 totalShares;                // Total shares of PoolToken participating in this distribution\r\n        address[] rewardTokens;             // List of reward tokens being distributed \r\n        mapping(address=>uint256) amounts; \r\n    }\r\n\r\n    struct UserProtocolRewards {\r\n        mapping(address=>uint256) amounts;  // Maps address of reward token to amount beeing distributed\r\n    }\r\n    struct RewardBalance {\r\n        uint256 nextDistribution;\r\n        mapping(address => uint256) shares;     // Maps PoolToken to amount of user shares participating in distributions\r\n        mapping(address => UserProtocolRewards) rewardsByProtocol; //Maps PoolToken to ProtocolRewards struct (map of reward tokens to their balances);\r\n    }\r\n\r\n    RewardTokenDistribution[] rewardDistributions;\r\n    mapping(address=>RewardBalance) rewardBalances; //Mapping users to their RewardBalance\r\n\r\n    // function registeredPoolTokens() public view returns(address[] memory);\r\n\r\n    // function userRewards(address user, address protocol, address[] calldata rewardTokens) external view returns(uint256[] memory){\r\n    //     uint256[] memory amounts = new uint256[](rewardTokens.length);\r\n    //     RewardBalance storage rb = rewardBalances[user];\r\n    //     require(rb.nextDistribution == rewardDistributions.length, \"RewardDistributions: rewards not calculated\");\r\n    //     for(uint256 i=0; i<amounts.length; i++) {\r\n    //         address rt = rewardTokens[i];\r\n    //         amounts[i] = rb.rewardsByProtocol[protocol].amounts[rt];\r\n    //     }\r\n    //     return amounts;\r\n    // }\r\n\r\n    // function rewardBalanceOf(address user, address poolToken, address rewardToken) public view returns(uint256) {\r\n    //     RewardBalance storage rb = rewardBalances[user];\r\n    //     UserProtocolRewards storage upr = rb.rewardsByProtocol[poolToken];\r\n    //     uint256 balance = upr.amounts[rewardToken];\r\n    //     uint256 next = rb.nextDistribution;\r\n    //     while (next < rewardDistributions.length) {\r\n    //         RewardTokenDistribution storage d = rewardDistributions[next];\r\n    //         next++;\r\n\r\n    //         uint256 sh = rb.shares[d.poolToken];\r\n    //         if (sh == 0 || poolToken != d.poolToken) continue;\r\n    //         uint256 distrAmount = d.amounts[rewardToken];\r\n    //         balance = balance.add(distrAmount.mul(sh).div(d.totalShares));\r\n    //     }\r\n    //     return balance;\r\n    // }\r\n\r\n    function rewardBalanceOf(address user, address poolToken, address[] memory rewardTokens) public view returns(uint256[] memory) {\r\n        RewardBalance storage rb = rewardBalances[user];\r\n        UserProtocolRewards storage upr = rb.rewardsByProtocol[poolToken];\r\n        uint256[] memory balances = new uint256[](rewardTokens.length);\r\n        uint256 i;\r\n        for(i=0; i < rewardTokens.length; i++){\r\n            balances[i] = upr.amounts[rewardTokens[i]];\r\n        }\r\n        uint256 next = rb.nextDistribution;\r\n        while (next < rewardDistributions.length) {\r\n            RewardTokenDistribution storage d = rewardDistributions[next];\r\n            next++;\r\n\r\n            uint256 sh = rb.shares[d.poolToken];\r\n            if (sh == 0 || poolToken != d.poolToken) continue;\r\n            for(i=0; i < rewardTokens.length; i++){\r\n                uint256 distrAmount = d.amounts[rewardTokens[i]];\r\n                balances[i] = balances[i].add(distrAmount.mul(sh).div(d.totalShares));\r\n            }\r\n        }\r\n        return balances;\r\n    }\r\n\r\n\r\n    // /**\r\n    // * @notice Updates user balance\r\n    // * @param user User address \r\n    // */\r\n    // function updateRewardBalance(address user) public {\r\n    //     _updateRewardBalance(user, rewardDistributions.length);\r\n    // }\r\n\r\n    // /**\r\n    // * @notice Updates user balance\r\n    // * @param user User address \r\n    // * @param toDistribution Index of distribution next to the last one, which should be processed\r\n    // */\r\n    // function updateRewardBalance(address user, uint256 toDistribution) public {\r\n    //     _updateRewardBalance(user, toDistribution);\r\n    // }\r\n\r\n    // function _updateRewardBalance(address user, uint256 toDistribution) internal {\r\n    //     require(toDistribution <= rewardDistributions.length, \"RewardDistributions: toDistribution index is too high\");\r\n    //     RewardBalance storage rb = rewardBalances[user];\r\n    //     uint256 next = rb.nextDistribution;\r\n    //     if(next >= toDistribution) return;\r\n\r\n    //     if(next == 0 && rewardDistributions.length > 0){\r\n    //         //This might be a new user, if so we can skip previous distributions\r\n    //         address[] memory poolTokens = registeredPoolTokens();\r\n    //         bool hasDeposit;\r\n    //         for(uint256 i=0; i< poolTokens.length; i++){\r\n    //             address poolToken = poolTokens[i];\r\n    //             if(rb.shares[poolToken] != 0) {\r\n    //                 hasDeposit = true;\r\n    //                 break;\r\n    //             }\r\n    //         }\r\n    //         if(!hasDeposit){\r\n    //             rb.nextDistribution = rewardDistributions.length;\r\n    //             return;\r\n    //         }\r\n    //     }\r\n\r\n    //     while (next < toDistribution) {\r\n    //         RewardTokenDistribution storage d = rewardDistributions[next];\r\n    //         next++;\r\n    //         uint256 sh = rb.shares[d.poolToken];\r\n    //         if (sh == 0) continue;\r\n    //         UserProtocolRewards storage upr = rb.rewardsByProtocol[d.poolToken]; \r\n    //         for (uint256 i=0; i < d.rewardTokens.length; i++) {\r\n    //             address rToken = d.rewardTokens[i];\r\n    //             uint256 distrAmount = d.amounts[rToken];\r\n    //             upr.amounts[rToken] = upr.amounts[rToken].add(distrAmount.mul(sh).div(d.totalShares));\r\n\r\n    //         }\r\n    //     }\r\n    //     rb.nextDistribution = next;\r\n    // }\r\n\r\n}\r\n\r\n// File: contracts\\modules\\savings\\SavingsModule.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SavingsModule is Module, AccessChecker, RewardDistributions, CapperRole {\r\n    uint256 constant MAX_UINT256 = uint256(-1);\r\n\r\n    event ProtocolRegistered(address protocol, address poolToken);\r\n    event YieldDistribution(address indexed poolToken, uint256 amount);\r\n    event DepositToken(address indexed protocol, address indexed token, uint256 dnAmount);\r\n    event Deposit(address indexed protocol, address indexed user, uint256 nAmount, uint256 nFee);\r\n    event WithdrawToken(address indexed protocol, address indexed token, uint256 dnAmount);\r\n    event Withdraw(address indexed protocol, address indexed user, uint256 nAmount, uint256 nFee);\r\n    event UserCapEnabledChange(bool enabled);\r\n    event UserCapChanged(address indexed protocol, address indexed user, uint256 newCap);\r\n    event DefaultUserCapChanged(address indexed protocol, uint256 newCap);\r\n    event ProtocolCapEnabledChange(bool enabled);\r\n    event ProtocolCapChanged(address indexed protocol, uint256 newCap);\r\n    event VipUserEnabledChange(bool enabled);\r\n    event VipUserChanged(address indexed protocol, address indexed user, bool isVip);\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct ProtocolInfo {\r\n        PoolToken poolToken;\r\n        uint256 previousBalance;\r\n        uint256 lastRewardDistribution;\r\n        address[] supportedRewardTokens;\r\n        mapping(address => uint256) userCap; //Limit of pool tokens which can be minted for a user during deposit\r\n        uint256 withdrawAllSlippage;         //Allowed slippage for withdrawAll function in wei\r\n        mapping(address=>bool) isVipUser;       \r\n    }\r\n\r\n    struct TokenData {\r\n        uint8 decimals;\r\n    }\r\n\r\n    address[] registeredTokens;\r\n    IDefiProtocol[] registeredProtocols;\r\n    address[] registeredRewardTokens;\r\n    mapping(address => TokenData) tokens;\r\n    mapping(address => ProtocolInfo) protocols; //Mapping of protocol to data we need to calculate APY and do distributions\r\n    mapping(address => address) poolTokenToProtocol;    //Mapping of pool tokens to protocols\r\n    mapping(address => bool) private rewardTokenRegistered;     //marks registered reward tokens\r\n    bool public userCapEnabled;\r\n    bool public protocolCapEnabled;\r\n    mapping(address=>uint256) public defaultUserCap;\r\n    mapping(address=>uint256) public protocolCap;\r\n    bool public vipUserEnabled;                         // Enable VIP user (overrides protocol cap)\r\n\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        CapperRole.initialize(_msgSender());\r\n    }\r\n\r\n    function setUserCapEnabled(bool _userCapEnabled) public onlyCapper {\r\n        userCapEnabled = _userCapEnabled;\r\n        emit UserCapEnabledChange(userCapEnabled);\r\n    }\r\n\r\n    // function setUserCap(address _protocol, address user, uint256 cap) public onlyCapper {\r\n    //     protocols[_protocol].userCap[user] = cap;\r\n    //     emit UserCapChanged(_protocol, user, cap);\r\n    // }\r\n\r\n    // function setUserCap(address _protocol, address[] calldata users, uint256[] calldata caps) external onlyCapper {\r\n    //     require(users.length == caps.length, \"SavingsModule: arrays length not match\");\r\n    //     for(uint256 i=0;  i < users.length; i++) {\r\n    //         protocols[_protocol].userCap[users[i]] = caps[i];\r\n    //         emit UserCapChanged(_protocol, users[i], caps[i]);\r\n    //     }\r\n    // }\r\n\r\n    function setVipUserEnabled(bool _vipUserEnabled) public onlyCapper {\r\n        vipUserEnabled = _vipUserEnabled;\r\n        emit VipUserEnabledChange(_vipUserEnabled);\r\n    }\r\n\r\n    function setVipUser(address _protocol, address user, bool isVip) public onlyCapper {\r\n        protocols[_protocol].isVipUser[user] = isVip;\r\n        emit VipUserChanged(_protocol, user, isVip);\r\n    }\r\n    \r\n    function setDefaultUserCap(address _protocol, uint256 cap) public onlyCapper {\r\n        defaultUserCap[_protocol] = cap;\r\n        emit DefaultUserCapChanged(_protocol, cap);\r\n    }\r\n\r\n    function setProtocolCapEnabled(bool _protocolCapEnabled) public onlyCapper {\r\n        protocolCapEnabled = _protocolCapEnabled;\r\n        emit ProtocolCapEnabledChange(protocolCapEnabled);\r\n    }\r\n\r\n    function setProtocolCap(address _protocol, uint256 cap) public onlyCapper {\r\n        protocolCap[_protocol] = cap;\r\n        emit ProtocolCapChanged(_protocol, cap);\r\n    }\r\n\r\n    function setWithdrawAllSlippage(address _protocol, uint256 slippageWei) public onlyOwner {\r\n        protocols[_protocol].withdrawAllSlippage = slippageWei;\r\n    }\r\n\r\n    function registerProtocol(IDefiProtocol protocol, PoolToken poolToken) public onlyOwner {\r\n        uint256 i;\r\n        for (i = 0; i < registeredProtocols.length; i++){\r\n            if (address(registeredProtocols[i]) == address(protocol)) revert(\"SavingsModule: protocol already registered\");\r\n        }\r\n        registeredProtocols.push(protocol);\r\n        protocols[address(protocol)] = ProtocolInfo({\r\n            poolToken: poolToken,\r\n            previousBalance: protocol.normalizedBalance(),\r\n            lastRewardDistribution: 0,\r\n            supportedRewardTokens: protocol.supportedRewardTokens(),\r\n            withdrawAllSlippage:0\r\n        });\r\n        for(i=0; i < protocols[address(protocol)].supportedRewardTokens.length; i++) {\r\n            address rtkn = protocols[address(protocol)].supportedRewardTokens[i];\r\n            if(!rewardTokenRegistered[rtkn]){\r\n                rewardTokenRegistered[rtkn] = true;\r\n                registeredRewardTokens.push(rtkn);\r\n            }\r\n        }\r\n        poolTokenToProtocol[address(poolToken)] = address(protocol);\r\n        address[] memory supportedTokens = protocol.supportedTokens();\r\n        for (i = 0; i < supportedTokens.length; i++) {\r\n            address tkn = supportedTokens[i];\r\n            if (!isTokenRegistered(tkn)){\r\n                registeredTokens.push(tkn);\r\n                tokens[tkn].decimals = ERC20Detailed(tkn).decimals();\r\n            }\r\n        }\r\n        uint256 normalizedBalance= protocols[address(protocol)].previousBalance;\r\n        if(normalizedBalance > 0) {\r\n            uint256 ts = poolToken.totalSupply();\r\n            if(ts < normalizedBalance) {\r\n                poolToken.mint(_msgSender(), normalizedBalance.sub(ts));\r\n            }\r\n        }\r\n        emit ProtocolRegistered(address(protocol), address(poolToken));\r\n    }\r\n\r\n    /**\r\n     * @notice Only adding reward tokens is correctly supported now (!!!)\r\n     */\r\n    function updateProtocolRewardTokens(IDefiProtocol protocol) public onlyOwner {\r\n        ProtocolInfo storage pi = protocols[address(protocol)];\r\n        pi.supportedRewardTokens = protocol.supportedRewardTokens();\r\n        for(uint256 i=0; i < pi.supportedRewardTokens.length; i++) {\r\n            address rtkn = pi.supportedRewardTokens[i];\r\n            if(!rewardTokenRegistered[rtkn]){\r\n                rewardTokenRegistered[rtkn] = true;\r\n                registeredRewardTokens.push(rtkn);\r\n            }\r\n        }\r\n        emit ProtocolRegistered(address(protocol), poolTokenByProtocol(address(protocol)));\r\n        //TODO: cleanup registeredRewardTokens if reward tokens removed\r\n    }\r\n\r\n    // function unregisterProtocol(address _protocol) public onlyOwner {\r\n    //     address poolToken = address(protocols[_protocol].poolToken);\r\n    //     delete protocols[_protocol];\r\n    //     delete poolTokenToProtocol[poolToken];\r\n\r\n    //     address[] memory supportedRewardTokens = IDefiProtocol(_protocol).supportedRewardTokens();\r\n    //     for(uint256 i=0; i < supportedRewardTokens.length; i++) {\r\n    //         address rtkn = supportedRewardTokens[i];\r\n    //         //TODO check if this token used by other protocols\r\n\r\n    //         rewardTokenRegistered[rtkn] = false;\r\n    //         // Remove reward token from registered array\r\n    //         for(uint256 j=0; j< registeredRewardTokens.length; j++){\r\n    //             if(registeredRewardTokens[j] == rtkn) {\r\n    //                 if(j != registeredRewardTokens.length-1){\r\n    //                     registeredRewardTokens[j] = registeredRewardTokens[registeredRewardTokens.length-1];\r\n    //                 }\r\n    //                 registeredRewardTokens.pop();\r\n    //             }\r\n    //         }\r\n            \r\n    //     }\r\n    // }\r\n\r\n\r\n    /**\r\n     * @notice Deposit tokens to several protocols\r\n     * @param _protocols Array of protocols to deposit tokens (each protocol only once)\r\n     * @param _tokens Array of tokens to deposit\r\n     * @param _dnAmounts Array of amounts (denormalized to token decimals)\r\n     */\r\n    function deposit(address[] memory _protocols, address[] memory _tokens, uint256[] memory _dnAmounts) \r\n    public operationAllowed(IAccessModule.Operation.Deposit) \r\n    returns(uint256[] memory) \r\n    {\r\n        require(_protocols.length == _tokens.length && _tokens.length == _dnAmounts.length, \"SavingsModule: size of arrays does not match\");\r\n        uint256[] memory ptAmounts = new uint256[](_protocols.length);\r\n        for (uint256 i=0; i < _protocols.length; i++) {\r\n            address[] memory tkns = new address[](1);\r\n            tkns[0] = _tokens[i];\r\n            uint256[] memory amnts = new uint256[](1);\r\n            amnts[0] = _dnAmounts[i];\r\n            ptAmounts[i] = deposit(_protocols[i], tkns, amnts);\r\n        }\r\n        return ptAmounts;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit tokens to a protocol\r\n     * @param _protocol Protocol to deposit tokens\r\n     * @param _tokens Array of tokens to deposit\r\n     * @param _dnAmounts Array of amounts (denormalized to token decimals)\r\n     */\r\n    function deposit(address _protocol, address[] memory _tokens, uint256[] memory _dnAmounts)\r\n    public operationAllowed(IAccessModule.Operation.Deposit)\r\n    returns(uint256) \r\n    {\r\n        //distributeRewardIfRequired(_protocol);\r\n\r\n        uint256 nAmount;\r\n        for (uint256 i=0; i < _tokens.length; i++) {\r\n            nAmount = nAmount.add(normalizeTokenAmount(_tokens[i], _dnAmounts[i]));\r\n        }\r\n\r\n        uint256 nBalanceBefore = distributeYieldInternal(_protocol);\r\n        depositToProtocol(_protocol, _tokens, _dnAmounts);\r\n        uint256 nBalanceAfter = updateProtocolBalance(_protocol);\r\n\r\n        PoolToken poolToken = PoolToken(protocols[_protocol].poolToken);\r\n        uint256 nDeposit = nBalanceAfter.sub(nBalanceBefore);\r\n\r\n        uint256 cap;\r\n        if(userCapEnabled) {\r\n            cap = userCap(_protocol, _msgSender());\r\n        }\r\n\r\n        uint256 fee;\r\n        if(nAmount > nDeposit) {\r\n            fee = nAmount - nDeposit;\r\n            poolToken.mint(_msgSender(), nDeposit);\r\n        } else {\r\n            fee = 0;\r\n            poolToken.mint(_msgSender(), nAmount);\r\n            uint256 yield = nDeposit - nAmount;\r\n            if (yield > 0) {\r\n                //Additional Yield received from protocol (because of lottery, or something)\r\n                createYieldDistribution(poolToken, yield);\r\n            }\r\n        }\r\n\r\n        if(protocolCapEnabled) {\r\n            if( !(vipUserEnabled && protocols[_protocol].isVipUser[_msgSender()]) ) {\r\n                uint256 ptTS = poolToken.totalSupply();\r\n                require(ptTS <= protocolCap[_protocol], \"SavingsModule: deposit exeeds protocols cap\");\r\n            }\r\n        }\r\n\r\n        if(userCapEnabled) {\r\n            //uint256 actualAmount = nAmount.sub(fee); //Had to remove this because of stack too deep err\r\n            require(cap >= nAmount.sub(fee), \"SavingsModule: deposit exeeds user cap\");\r\n            // cap = cap - nAmount.sub(fee);\r\n            //protocols[_protocol].userCap[_msgSender()] = cap;\r\n            // emit UserCapChanged(_protocol, _msgSender(), cap);\r\n        }\r\n\r\n        emit Deposit(_protocol, _msgSender(), nAmount, fee);\r\n        return nDeposit;\r\n    }\r\n\r\n    function depositToProtocol(address _protocol, address[] memory _tokens, uint256[] memory _dnAmounts) internal {\r\n        require(_tokens.length == _dnAmounts.length, \"SavingsModule: count of tokens does not match count of amounts\");\r\n        for (uint256 i=0; i < _tokens.length; i++) {\r\n            address tkn = _tokens[i];\r\n            IERC20(tkn).safeTransferFrom(_msgSender(), _protocol, _dnAmounts[i]);\r\n            IDefiProtocol(_protocol).handleDeposit(tkn, _dnAmounts[i]);\r\n            emit DepositToken(_protocol, tkn, _dnAmounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Withdraw tokens from protocol (all underlying tokens proportiaonally)\r\n     * @param _protocol Protocol to withdraw from\r\n     * @param nAmount Normalized (to 18 decimals) amount to withdraw\r\n     * @return Amount of PoolToken burned from user\r\n     */\r\n    function withdrawAll(address _protocol, uint256 nAmount)\r\n    public operationAllowed(IAccessModule.Operation.Withdraw)\r\n    returns(uint256) \r\n    {\r\n        //distributeRewardIfRequired(_protocol);\r\n\r\n        PoolToken poolToken = PoolToken(protocols[_protocol].poolToken);\r\n\r\n        uint256 nBalanceBefore = distributeYieldInternal(_protocol);\r\n        withdrawFromProtocolProportionally(_msgSender(), IDefiProtocol(_protocol), nAmount, nBalanceBefore);\r\n        uint256 nBalanceAfter = updateProtocolBalance(_protocol);\r\n\r\n        uint256 yield;\r\n        uint256 actualAmount;\r\n        if(nBalanceAfter.add(nAmount) > nBalanceBefore) {\r\n            yield = nBalanceAfter.add(nAmount).sub(nBalanceBefore);\r\n            actualAmount = nAmount;\r\n        }else{\r\n            actualAmount = nBalanceBefore.sub(nBalanceAfter);\r\n            require(actualAmount.sub(nAmount) <= protocols[_protocol].withdrawAllSlippage, \"SavingsModule: withdrawal fee exeeds slippage\");\r\n        }\r\n\r\n        // if(userCapEnabled){\r\n        //     uint256 cap = userCap(_protocol, _msgSender());\r\n        //     cap = cap.add(actualAmount);\r\n        //     protocols[_protocol].userCap[_msgSender()] = cap;\r\n        //     emit UserCapChanged(_protocol, _msgSender(), cap);\r\n        // }\r\n\r\n        poolToken.burnFrom(_msgSender(), actualAmount);\r\n        emit Withdraw(_protocol, _msgSender(), actualAmount, 0);\r\n\r\n        if (yield > 0) {\r\n            //Additional Yield received from protocol (because of lottery, or something)\r\n            createYieldDistribution(poolToken, yield);\r\n        }\r\n\r\n        return actualAmount;\r\n    }\r\n\r\n    /**\r\n     * Withdraw token from protocol\r\n     * @param _protocol Protocol to withdraw from\r\n     * @param token Token to withdraw\r\n     * @param dnAmount Amount to withdraw (denormalized)\r\n     * @param maxNAmount Max amount of PoolToken to burn\r\n     * @return Amount of PoolToken burned from user\r\n     */\r\n    function withdraw(address _protocol, address token, uint256 dnAmount, uint256 maxNAmount)\r\n    public operationAllowed(IAccessModule.Operation.Withdraw)\r\n    returns(uint256){\r\n        //distributeRewardIfRequired(_protocol);\r\n\r\n        uint256 nAmount = normalizeTokenAmount(token, dnAmount);\r\n\r\n        uint256 nBalanceBefore = distributeYieldInternal(_protocol);\r\n        withdrawFromProtocolOne(_msgSender(), IDefiProtocol(_protocol), token, dnAmount);\r\n        uint256 nBalanceAfter = updateProtocolBalance(_protocol);\r\n\r\n        uint256 yield;\r\n        uint256 actualAmount;\r\n        uint256 fee;\r\n        if(nBalanceAfter.add(nAmount) > nBalanceBefore) {\r\n            yield = nBalanceAfter.add(nAmount).sub(nBalanceBefore);\r\n            actualAmount = nAmount;\r\n        }else{\r\n            actualAmount = nBalanceBefore.sub(nBalanceAfter);\r\n            if (actualAmount > nAmount) fee = actualAmount-nAmount;\r\n        }\r\n\r\n        require(maxNAmount == 0 || actualAmount <= maxNAmount, \"SavingsModule: provided maxNAmount is too low\");\r\n\r\n        // if(userCapEnabled){\r\n        //     uint256 cap = userCap(_protocol, _msgSender());\r\n        //     cap = cap.add(actualAmount);\r\n        //     protocols[_protocol].userCap[_msgSender()] = cap;\r\n        //     emit UserCapChanged(_protocol, _msgSender(), cap);\r\n        // }\r\n\r\n        PoolToken poolToken = PoolToken(protocols[_protocol].poolToken);\r\n        poolToken.burnFrom(_msgSender(), actualAmount);\r\n        emit WithdrawToken(_protocol, token, dnAmount);\r\n        emit Withdraw(_protocol, _msgSender(), actualAmount, fee);\r\n\r\n\r\n        if (yield > 0) {\r\n            //Additional Yield received from protocol (because of lottery, or something)\r\n            createYieldDistribution(poolToken, yield);\r\n        }\r\n\r\n        return actualAmount;\r\n    }\r\n\r\n    /** \r\n     * @notice Distributes yield. May be called by bot, if there was no deposits/withdrawals\r\n     */\r\n    function distributeYield() public {\r\n        for(uint256 i=0; i<registeredProtocols.length; i++) {\r\n            distributeYieldInternal(address(registeredProtocols[i]));\r\n        }\r\n    }\r\n\r\n    function userCap(address _protocol, address user) public view returns(uint256) {\r\n        // uint256 cap = protocols[_protocol].userCap[user];\r\n        // if(cap == 0){\r\n        //     uint256 balance = protocols[_protocol].poolToken.balanceOf(user);\r\n        //     if(balance == 0) cap = defaultUserCap[_protocol];\r\n        // }\r\n        uint256 balance = protocols[_protocol].poolToken.balanceOf(user);\r\n        uint256 cap;\r\n        if(balance < defaultUserCap[_protocol]) {\r\n            cap = defaultUserCap[_protocol] - balance;\r\n        }\r\n        return cap;\r\n    }\r\n\r\n    function isVipUser(address _protocol, address user) view public returns(bool){\r\n        return protocols[_protocol].isVipUser[user];\r\n    }\r\n\r\n    function poolTokenByProtocol(address _protocol) public view returns(address) {\r\n        return address(protocols[_protocol].poolToken);\r\n    }\r\n\r\n    function protocolByPoolToken(address _poolToken) public view returns(address) {\r\n        return poolTokenToProtocol[_poolToken];\r\n    }\r\n\r\n    function rewardTokensByProtocol(address _protocol) public view returns(address[] memory) {\r\n        return protocols[_protocol].supportedRewardTokens;\r\n    }\r\n\r\n    function registeredPoolTokens() public view returns(address[] memory poolTokens) {\r\n        poolTokens = new address[](registeredProtocols.length);\r\n        for(uint256 i=0; i<poolTokens.length; i++){\r\n            poolTokens[i] = address(protocols[address(registeredProtocols[i])].poolToken);\r\n        }\r\n    }\r\n\r\n    function supportedProtocols() public view returns(IDefiProtocol[] memory) {\r\n        return registeredProtocols;\r\n    }\r\n\r\n    function supportedRewardTokens() public view returns(address[] memory) {\r\n        return registeredRewardTokens;\r\n    }\r\n\r\n    function withdrawFromProtocolProportionally(address beneficiary, IDefiProtocol protocol, uint256 nAmount, uint256 currentProtocolBalance) internal {\r\n        uint256[] memory balances = protocol.balanceOfAll();\r\n        uint256[] memory amounts = new uint256[](balances.length);\r\n        address[] memory _tokens = protocol.supportedTokens();\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            amounts[i] = balances[i].mul(nAmount).div(currentProtocolBalance);\r\n            emit WithdrawToken(address(protocol), _tokens[i], amounts[i]);\r\n        }\r\n        protocol.withdraw(beneficiary, amounts);\r\n    }\r\n\r\n    function withdrawFromProtocolOne(address beneficiary, IDefiProtocol protocol, address token, uint256 dnAmount) internal {\r\n        protocol.withdraw(beneficiary, token, dnAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates difference from previous action with a protocol and distributes yield\r\n     * @dev MUST call this BEFORE deposit/withdraw from protocol\r\n     * @param _protocol to check\r\n     * @return Current balance of the protocol\r\n     */\r\n    function distributeYieldInternal(address _protocol) internal returns(uint256){\r\n        uint256 currentBalance = IDefiProtocol(_protocol).normalizedBalance();\r\n        ProtocolInfo storage pi = protocols[_protocol];\r\n        PoolToken poolToken = PoolToken(pi.poolToken);\r\n        if(currentBalance > pi.previousBalance) {\r\n            uint256 yield = currentBalance.sub(pi.previousBalance);\r\n            pi.previousBalance = currentBalance;\r\n            createYieldDistribution(poolToken, yield);\r\n        }\r\n        return currentBalance;\r\n    }\r\n\r\n    function createYieldDistribution(PoolToken poolToken, uint256 yield) internal {\r\n        poolToken.distribute(yield);\r\n        emit YieldDistribution(address(poolToken), yield);\r\n    }\r\n\r\n    /**\r\n     * @notice Updates balance with result of deposit/withdraw\r\n     * @dev MUST call this AFTER deposit/withdraw from protocol\r\n     * @param _protocol to update\r\n     * @return Current balance of the protocol\r\n     */\r\n    function updateProtocolBalance(address _protocol) internal returns(uint256){\r\n        uint256 currentBalance = IDefiProtocol(_protocol).normalizedBalance();\r\n        protocols[_protocol].previousBalance = currentBalance;\r\n        return currentBalance;\r\n    }\r\n\r\n    function isTokenRegistered(address token) private view returns(bool) {\r\n        for (uint256 i = 0; i < registeredTokens.length; i++){\r\n            if (registeredTokens[i] == token) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isPoolToken(address token) internal view returns(bool) {\r\n        for (uint256 i = 0; i < registeredProtocols.length; i++){\r\n            IDefiProtocol protocol = registeredProtocols[i];\r\n            if (address(protocols[address(protocol)].poolToken) == token) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function normalizeTokenAmount(address token, uint256 amount) private view returns(uint256) {\r\n        uint256 decimals = tokens[token].decimals;\r\n        if (decimals == 18) {\r\n            return amount;\r\n        } else if (decimals > 18) {\r\n            return amount.div(10**(decimals-18));\r\n        } else if (decimals < 18) {\r\n            return amount.mul(10**(18 - decimals));\r\n        }\r\n    }\r\n\r\n    function denormalizeTokenAmount(address token, uint256 amount) private view returns(uint256) {\r\n        uint256 decimals = tokens[token].decimals;\r\n        if (decimals == 18) {\r\n            return amount;\r\n        } else if (decimals > 18) {\r\n            return amount.mul(10**(decimals-18));\r\n        } else if (decimals < 18) {\r\n            return amount.div(10**(18 - decimals));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\modules\\reward\\RewardManagerRole.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\ncontract RewardManagerRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event RewardManagerAdded(address indexed account);\r\n    event RewardManagerRemoved(address indexed account);\r\n\r\n    Roles.Role private _managers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isRewardManager(sender)) {\r\n            _addRewardManager(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyRewardManager() {\r\n        require(isRewardManager(_msgSender()), \"RewardManagerRole: caller does not have the RewardManager role\");\r\n        _;\r\n    }\r\n\r\n    function addRewardManager(address account) public onlyRewardManager {\r\n        _addRewardManager(account);\r\n    }\r\n\r\n    function renounceRewardManager() public {\r\n        _removeRewardManager(_msgSender());\r\n    }\r\n\r\n    function isRewardManager(address account) public view returns (bool) {\r\n        return _managers.has(account);\r\n    }\r\n\r\n    function _addRewardManager(address account) internal {\r\n        _managers.add(account);\r\n        emit RewardManagerAdded(account);\r\n    }\r\n\r\n    function _removeRewardManager(address account) internal {\r\n        _managers.remove(account);\r\n        emit RewardManagerRemoved(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\modules\\reward\\RewardVestingModule.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardVestingModule is Module, RewardManagerRole {\r\n    event RewardTokenRegistered(address indexed protocol, address token);\r\n    event EpochRewardAdded(address indexed protocol, address indexed token, uint256 epoch, uint256 amount);\r\n    event RewardClaimed(address indexed protocol, address indexed token, uint256 claimPeriodStart, uint256 claimPeriodEnd, uint256 claimAmount);\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct Epoch {\r\n        uint256 end;        // Timestamp of Epoch end\r\n        uint256 amount;     // Amount of reward token for this protocol on this epoch\r\n    }\r\n\r\n    struct RewardInfo {\r\n        Epoch[] epochs;\r\n        uint256 lastClaim; // Timestamp of last claim\r\n    }\r\n\r\n    struct ProtocolRewards {\r\n        address[] tokens;\r\n        mapping(address=>RewardInfo) rewardInfo;\r\n    }\r\n\r\n    mapping(address => ProtocolRewards) internal rewards;\r\n    uint256 public defaultEpochLength;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        RewardManagerRole.initialize(_msgSender());\r\n        defaultEpochLength = 7*24*60*60;\r\n    }\r\n\r\n    function getRewardInfo(address protocol, address token) public view returns(uint256 lastClaim, uint256 epochCount) {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        return (ri.lastClaim, ri.epochs.length);\r\n    }\r\n\r\n    function registerRewardToken(address protocol, address token, uint256 firstEpochStart) public onlyRewardManager {\r\n        if(firstEpochStart == 0) firstEpochStart = block.timestamp;\r\n        //Push zero epoch\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        require(ri.epochs.length == 0, \"RewardVesting: token already registered for this protocol\");\r\n        r.tokens.push(token);\r\n        ri.epochs.push(Epoch({\r\n            end: firstEpochStart,\r\n            amount: 0\r\n        }));\r\n        emit RewardTokenRegistered(protocol, token);\r\n    }\r\n\r\n    function setDefaultEpochLength(uint256 _defaultEpochLength) public onlyRewardManager {\r\n        defaultEpochLength = _defaultEpochLength;\r\n    }\r\n\r\n    function getEpochInfo(address protocol, address token, uint256 epoch) public view returns(uint256 epochStart, uint256 epochEnd, uint256 rewardAmount) {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        require(ri.epochs.length > 0, \"RewardVesting: protocol or token not registered\");\r\n        require (epoch < ri.epochs.length, \"RewardVesting: epoch number too high\");\r\n        if(epoch == 0) {\r\n            epochStart = 0;\r\n        }else {\r\n            epochStart = ri.epochs[epoch-1].end;\r\n        }\r\n        epochEnd = ri.epochs[epoch].end;\r\n        rewardAmount = ri.epochs[epoch].amount;\r\n        return (epochStart, epochEnd, rewardAmount);\r\n    }\r\n\r\n    function getLastCreatedEpoch(address protocol, address token) public view returns(uint256) {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        require(ri.epochs.length > 0, \"RewardVesting: protocol or token not registered\");\r\n        return ri.epochs.length-1;       \r\n    }\r\n\r\n    function claimRewards() public {\r\n        address protocol = _msgSender();\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        //require(r.tokens.length > 0, \"RewardVesting: call only from registered protocols allowed\");\r\n        if(r.tokens.length == 0) return;    //This allows claims from protocols which are not yet registered without reverting\r\n        for(uint256 i=0; i < r.tokens.length; i++){\r\n            _claimRewards(protocol, r.tokens[i]);\r\n        }\r\n    }\r\n\r\n    function claimRewards(address protocol, address token) public {\r\n        _claimRewards(protocol, token);\r\n    }\r\n\r\n    function _claimRewards(address protocol, address token) internal {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        uint256 epochsLength = ri.epochs.length;\r\n        require(epochsLength > 0, \"RewardVesting: protocol or token not registered\");\r\n\r\n        Epoch storage lastEpoch = ri.epochs[epochsLength-1];\r\n        uint256 previousClaim = ri.lastClaim;\r\n        if(previousClaim == lastEpoch.end) return; // Nothing to claim yet\r\n\r\n        if(lastEpoch.end < block.timestamp) {\r\n            ri.lastClaim = lastEpoch.end;\r\n        }else{\r\n            ri.lastClaim = block.timestamp;\r\n        }\r\n        \r\n        uint256 claimAmount;\r\n        Epoch storage ep = ri.epochs[0];\r\n        uint256 i;\r\n        // Searching for last claimable epoch\r\n        for(i = epochsLength-1; i > 0; i--) {\r\n            ep = ri.epochs[i];\r\n            if(ep.end < block.timestamp) {  // We've found last fully-finished epoch\r\n                if(i < epochsLength-1) {    // We have already started current epoch\r\n                    i++;                    //    Go back to currently-running epoch\r\n                    ep = ri.epochs[i];\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if(ep.end > block.timestamp) {\r\n            //Half-claim\r\n            uint256 epStart = ri.epochs[i-1].end;\r\n            uint256 claimStart = (previousClaim > epStart)?previousClaim:epStart;\r\n            uint256 epochClaim = ep.amount.mul(block.timestamp.sub(claimStart)).div(ep.end.sub(epStart));\r\n            claimAmount = claimAmount.add(epochClaim);\r\n            i--;\r\n        }\r\n        //Claim rest\r\n        for(i; i > 0; i--) {\r\n            ep = ri.epochs[i];\r\n            uint256 epStart = ri.epochs[i-1].end;\r\n            if(ep.end > previousClaim) {\r\n                if(previousClaim > epStart) {\r\n                    uint256 epochClaim = ep.amount.mul(ep.end.sub(previousClaim)).div(ep.end.sub(epStart));\r\n                    claimAmount = claimAmount.add(epochClaim);\r\n                } else {\r\n                    claimAmount = claimAmount.add(ep.amount);\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        IERC20(token).safeTransfer(protocol, claimAmount);\r\n        emit RewardClaimed(protocol, token, previousClaim, ri.lastClaim, claimAmount);\r\n    }\r\n\r\n    function createEpoch(address protocol, address token, uint256 epochEnd, uint256 amount) public onlyRewardManager {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        uint256 epochsLength = ri.epochs.length;\r\n        require(epochsLength > 0, \"RewardVesting: protocol or token not registered\");\r\n        uint256 prevEpochEnd = ri.epochs[epochsLength-1].end;\r\n        require(epochEnd > prevEpochEnd, \"RewardVesting: new epoch should end after previous\");\r\n        ri.epochs.push(Epoch({\r\n            end: epochEnd,\r\n            amount:0\r\n        }));            \r\n        _addReward(protocol, token, epochsLength, amount);\r\n    }\r\n\r\n    function addReward(address protocol, address token, uint256 epoch, uint256 amount) public onlyRewardManager {\r\n        _addReward(protocol, token, epoch, amount);\r\n    }\r\n\r\n    function addRewards(address[] calldata protocols, address[] calldata tokens, uint256[] calldata epochs, uint256[] calldata amounts) external onlyRewardManager {\r\n        require(\r\n            (protocols.length == tokens.length) && \r\n            (protocols.length == epochs.length) && \r\n            (protocols.length == amounts.length),\r\n            \"RewardVesting: array lengths do not match\");\r\n        for(uint256 i=0; i<protocols.length; i++) {\r\n            _addReward(protocols[i], tokens[i], epochs[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Add reward to existing epoch or crete a new one\r\n     * @param protocol Protocol for reward\r\n     * @param token Reward token\r\n     * @param epoch Epoch number - can be 0 to create new Epoch\r\n     * @param amount Amount of Reward token to deposit\r\n     */\r\n    function _addReward(address protocol, address token, uint256 epoch, uint256 amount) internal {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        uint256 epochsLength = ri.epochs.length;\r\n        require(epochsLength > 0, \"RewardVesting: protocol or token not registered\");\r\n        if(epoch == 0) epoch = epochsLength; // creating a new epoch\r\n        if (epoch == epochsLength) {\r\n            uint256 epochEnd = ri.epochs[epochsLength-1].end.add(defaultEpochLength);\r\n            if(epochEnd < block.timestamp) epochEnd = block.timestamp; //This generally should not happen, but just in case - we generate only one epoch since previous end\r\n            ri.epochs.push(Epoch({\r\n                end: epochEnd,\r\n                amount: amount\r\n            }));            \r\n        } else  {\r\n            require(epochsLength > epoch, \"RewardVesting: epoch is too high\");\r\n            Epoch storage ep = ri.epochs[epoch];\r\n            require(ep.end > block.timestamp, \"RewardVesting: epoch already finished\");\r\n            ep.amount = ep.amount.add(amount);\r\n        }\r\n        emit EpochRewardAdded(protocol, token, epoch, amount);\r\n        IERC20(token).safeTransferFrom(_msgSender(), address(this), amount);\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts\\modules\\staking\\IERC900.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n/**\r\n * @title ERC900 Simple Staking Interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ninterface IERC900 {\r\n  event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n  event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n\r\n  function stake(uint256 amount, bytes calldata data) external;\r\n\r\n  function stakeFor(address user, uint256 amount, bytes calldata data) external;\r\n  function unstake(uint256 amount, bytes calldata data) external;\r\n  function totalStakedFor(address addr) external  view returns (uint256);\r\n  function totalStaked() external  view returns (uint256);\r\n  function token() external  view returns (address);\r\n  function supportsHistory() external  pure returns (bool);\r\n\r\n  // NOTE: Not implementing the optional functions\r\n  // function lastStakedFor(address addr) external  view returns (uint256);\r\n  // function totalStakedForAt(address addr, uint256 blockNumber) external  view returns (uint256);\r\n  // function totalStakedAt(uint256 blockNumber) external  view returns (uint256);\r\n}\r\n\r\n// File: contracts\\modules\\staking\\StakingPoolBase.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC900 Simple Staking Interface basic implementation\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ncontract StakingPoolBase is Module, IERC900, CapperRole  {\r\n  // @TODO: deploy this separately so we don't have to deploy it multiple times for each contract\r\n  using SafeMath for uint256;\r\n\r\n  // Token used for staking\r\n  ERC20 stakingToken;\r\n\r\n  // The default duration of stake lock-in (in seconds)\r\n  uint256 public defaultLockInDuration;\r\n\r\n  // To save on gas, rather than create a separate mapping for totalStakedFor & personalStakes,\r\n  //  both data structures are stored in a single mapping for a given addresses.\r\n  //\r\n  // It's possible to have a non-existing personalStakes, but have tokens in totalStakedFor\r\n  //  if other users are staking on behalf of a given address.\r\n  mapping (address => StakeContract) public stakeHolders;\r\n\r\n  // Struct for personal stakes (i.e., stakes made by this address)\r\n  // unlockedTimestamp - when the stake unlocks (in seconds since Unix epoch)\r\n  // actualAmount - the amount of tokens in the stake\r\n  // stakedFor - the address the stake was staked for\r\n  struct Stake {\r\n    uint256 unlockedTimestamp;\r\n    uint256 actualAmount;\r\n    address stakedFor;\r\n  }\r\n\r\n  // Struct for all stake metadata at a particular address\r\n  // totalStakedFor - the number of tokens staked for this address\r\n  // personalStakeIndex - the index in the personalStakes array.\r\n  // personalStakes - append only array of stakes made by this address\r\n  // exists - whether or not there are stakes that involve this address\r\n  struct StakeContract {\r\n    uint256 totalStakedFor;\r\n\r\n    uint256 personalStakeIndex;\r\n\r\n    Stake[] personalStakes;\r\n\r\n    bool exists;\r\n  }\r\n\r\n  bool public userCapEnabled;\r\n\r\n  mapping(address => uint256) public userCap; //Limit of pool tokens which can be minted for a user during deposit\r\n\r\n  \r\n  uint256 public defaultUserCap;\r\n  bool public stakingCapEnabled;\r\n  uint256 public stakingCap;\r\n\r\n\r\n  bool public vipUserEnabled;\r\n  mapping(address => bool) public isVipUser;\r\n\r\n  uint256 internal totalStakedAmount;\r\n\r\n  uint256 public coeffScore;\r\n  \r\n\r\n\r\n  event VipUserEnabledChange(bool enabled);\r\n  event VipUserChanged(address indexed user, bool isVip);\r\n\r\n  event StakingCapChanged(uint256 newCap);\r\n  event StakingCapEnabledChange(bool enabled);\r\n\r\n  //global cap\r\n  event DefaultUserCapChanged(uint256 newCap);\r\n\r\n  event UserCapEnabledChange(bool enabled);\r\n\r\n  event UserCapChanged(address indexed user, uint256 newCap);\r\n  event Staked(address indexed user, uint256 amount, uint256 totalStacked, bytes data);\r\n  event Unstaked(address indexed user, uint256 amount, uint256 totalStacked, bytes data);\r\n  event setLockInDuration(uint256 defaultLockInDuration);\r\n\r\n  event CoeffScoreUpdated(uint256 coeff);\r\n  /**\r\n   * @dev Modifier that checks that this contract can transfer tokens from the\r\n   *  balance in the stakingToken contract for the given address.\r\n   * @dev This modifier also transfers the tokens.\r\n   * @param _address address to transfer tokens from\r\n   * @param _amount uint256 the number of tokens\r\n   */\r\n  modifier canStake(address _address, uint256 _amount) {\r\n    require(\r\n      stakingToken.transferFrom(_address, address(this), _amount),\r\n      \"Stake required\");\r\n\r\n    _;\r\n  }\r\n\r\n\r\n  modifier isUserCapEnabledForStakeFor(uint256 stake) {\r\n\r\n    if (stakingCapEnabled && !(vipUserEnabled && isVipUser[_msgSender()])) {\r\n        require((stakingCap > totalStaked() && (stakingCap-totalStaked() >= stake)), \"StakingModule: stake exeeds staking cap\");\r\n    }\r\n\r\n    if(userCapEnabled) {\r\n          uint256 cap = userCap[_msgSender()];\r\n          //check default user cap settings\r\n          if (defaultUserCap > 0) {\r\n              uint256 totalStaked = totalStakedFor(_msgSender());\r\n              //get new cap\r\n              if (defaultUserCap >= totalStaked) {\r\n                cap = defaultUserCap.sub(totalStaked);\r\n              } else {\r\n                 cap = 0;\r\n              }\r\n          }\r\n          \r\n          require(cap >= stake, \"StakingModule: stake exeeds cap\");\r\n          cap = cap.sub(stake);\r\n          userCap[_msgSender()] = cap;\r\n          emit UserCapChanged(_msgSender(), cap);  \r\n    }\r\n      \r\n    _;\r\n  }\r\n\r\n\r\n  modifier isUserCapEnabledForUnStakeFor(uint256 unStake) {\r\n     _;\r\n\r\n     if(userCapEnabled){\r\n        uint256 cap = userCap[_msgSender()];\r\n        cap = cap.add(unStake);\r\n\r\n        if (cap > defaultUserCap) {\r\n            cap = defaultUserCap;\r\n        }\r\n\r\n        userCap[_msgSender()] = cap;\r\n        emit UserCapChanged(_msgSender(), cap);\r\n     }\r\n  }\r\n\r\n  modifier checkUserCapDisabled() {\r\n    require(isUserCapEnabled() == false, \"UserCapEnabled\");\r\n    _;\r\n  }\r\n\r\n  modifier checkUserCapEnabled() {\r\n    require(isUserCapEnabled(), \"UserCapDisabled\");\r\n    _;\r\n  }\r\n \r\n\r\n  function initialize(address _pool, ERC20 _stakingToken, uint256 _defaultLockInDuration) public initializer {\r\n        stakingToken = _stakingToken;\r\n        defaultLockInDuration = _defaultLockInDuration;\r\n        Module.initialize(_pool);\r\n\r\n        CapperRole.initialize(_msgSender());\r\n  }\r\n\r\n  function setDefaultLockInDuration(uint256 _defaultLockInDuration) public onlyOwner {\r\n      defaultLockInDuration = _defaultLockInDuration;\r\n      emit setLockInDuration(_defaultLockInDuration);\r\n  }\r\n\r\n  function setUserCapEnabled(bool _userCapEnabled) public onlyCapper {\r\n      userCapEnabled = _userCapEnabled;\r\n      emit UserCapEnabledChange(userCapEnabled);\r\n  }\r\n\r\n  function setStakingCapEnabled(bool _stakingCapEnabled) public onlyCapper {\r\n      stakingCapEnabled= _stakingCapEnabled;\r\n      emit StakingCapEnabledChange(stakingCapEnabled);\r\n  }\r\n\r\n  function setDefaultUserCap(uint256 _newCap) public onlyCapper {\r\n      defaultUserCap = _newCap;\r\n      emit DefaultUserCapChanged(_newCap);\r\n  }\r\n\r\n  function setStakingCap(uint256 _newCap) public onlyCapper {\r\n      stakingCap = _newCap;\r\n      emit StakingCapChanged(_newCap);\r\n  }\r\n\r\n  function setUserCap(address user, uint256 cap) public onlyCapper {\r\n      userCap[user] = cap;\r\n      emit UserCapChanged(user, cap);\r\n  }\r\n\r\n  function setUserCap(address[] memory users, uint256[] memory caps) public onlyCapper {\r\n        require(users.length == caps.length, \"SavingsModule: arrays length not match\");\r\n        for(uint256 i=0;  i < users.length; i++) {\r\n            userCap[users[i]] = caps[i];\r\n            emit UserCapChanged(users[i], caps[i]);\r\n        }\r\n  }\r\n\r\n\r\n  function setVipUserEnabled(bool _vipUserEnabled) public onlyCapper {\r\n      vipUserEnabled = _vipUserEnabled;\r\n      emit VipUserEnabledChange(_vipUserEnabled);\r\n  }\r\n\r\n  function setVipUser(address user, bool isVip) public onlyCapper {\r\n      isVipUser[user] = isVip;\r\n      emit VipUserChanged(user, isVip);\r\n  }\r\n\r\n\r\n  function setCoeffScore(uint256 coeff) public onlyCapper {\r\n    coeffScore = coeff;\r\n\r\n    emit CoeffScoreUpdated(coeff);\r\n  }\r\n\r\n  function isUserCapEnabled() public view returns(bool) {\r\n    return userCapEnabled;\r\n  }\r\n\r\n\r\n  function iStakingCapEnabled() public view returns(bool) {\r\n    return stakingCapEnabled;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the timestamps for when active personal stakes for an address will unlock\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return uint256[] array of timestamps\r\n   */\r\n  function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {\r\n    uint256[] memory timestamps;\r\n    (timestamps,,) = getPersonalStakes(_address);\r\n\r\n    return timestamps;\r\n  }\r\n\r\n\r\n  \r\n\r\n  /**\r\n   * @dev Returns the stake actualAmount for active personal stakes for an address\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return uint256[] array of actualAmounts\r\n   */\r\n  function getPersonalStakeActualAmounts(address _address) external view returns (uint256[] memory) {\r\n    uint256[] memory actualAmounts;\r\n    (,actualAmounts,) = getPersonalStakes(_address);\r\n\r\n    return actualAmounts;\r\n  }\r\n\r\n  function getPersonalStakeTotalAmount(address _address) public view returns(uint256) {\r\n    uint256[] memory actualAmounts;\r\n    (,actualAmounts,) = getPersonalStakes(_address);\r\n    uint256 totalStake;\r\n    for(uint256 i=0; i <actualAmounts.length; i++) {\r\n      totalStake = totalStake.add(actualAmounts[i]);\r\n    }\r\n    return totalStake;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addresses that each personal stake was created for by an address\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return address[] array of amounts\r\n   */\r\n  function getPersonalStakeForAddresses(address _address) external view returns (address[] memory) {\r\n    address[] memory stakedFor;\r\n    (,,stakedFor) = getPersonalStakes(_address);\r\n\r\n    return stakedFor;\r\n  }\r\n\r\n  /**\r\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the user\r\n   * @notice MUST trigger Staked event\r\n   * @param _amount uint256 the amount of tokens to stake\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function stake(uint256 _amount, bytes memory _data) public isUserCapEnabledForStakeFor(_amount) {\r\n    createStake(\r\n      _msgSender(),\r\n      _amount,\r\n      defaultLockInDuration,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\r\n   * @notice MUST trigger Staked event\r\n   * @param _user address the address the tokens are staked for\r\n   * @param _amount uint256 the amount of tokens to stake\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function stakeFor(address _user, uint256 _amount, bytes memory _data) public checkUserCapDisabled {\r\n    createStake(\r\n      _user,\r\n      _amount,\r\n      defaultLockInDuration,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revert\r\n   * @notice MUST trigger Unstaked event\r\n   * @dev Unstaking tokens is an atomic operationвЂ”either all of the tokens in a stake, or none of the tokens.\r\n   * @dev Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be\r\n   *  transferred back to their account, and their personalStakeIndex will increment to the next active stake.\r\n   * @param _amount uint256 the amount of tokens to unstake\r\n   * @param _data bytes optional data to include in the Unstake event\r\n   */\r\n  function unstake(uint256 _amount, bytes memory _data) public {\r\n    withdrawStake(\r\n      _amount,\r\n      _data);\r\n  }\r\n\r\n  function unstakeAllUnlocked(bytes memory _data) public returns(uint256) {\r\n     uint256 unstakeAllAmount = 0;\r\n     uint256 personalStakeIndex = stakeHolders[_msgSender()].personalStakeIndex;\r\n\r\n     for(uint256 i=personalStakeIndex; i<stakeHolders[_msgSender()].personalStakes.length; i++) {\r\n       \r\n       if (stakeHolders[_msgSender()].personalStakes[i].unlockedTimestamp <= block.timestamp) {\r\n           unstakeAllAmount = unstakeAllAmount+stakeHolders[_msgSender()].personalStakes[i].actualAmount;\r\n           withdrawStake(stakeHolders[_msgSender()].personalStakes[i].actualAmount, _data);\r\n       }\r\n     }\r\n\r\n     return unstakeAllAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current total of tokens staked for an address\r\n   * @param _address address The address to query\r\n   * @return uint256 The number of tokens staked for the given address\r\n   */\r\n  function totalStakedFor(address _address) public view returns (uint256) {\r\n    return stakeHolders[_address].totalStakedFor;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current total of tokens staked for an address\r\n   * @param _address address The address to query\r\n   * @return uint256 The number of tokens staked for the given address\r\n   */\r\n  function totalScoresFor(address _address) public view returns (uint256) {\r\n    return stakeHolders[_address].totalStakedFor.mul(coeffScore).div(10**18);\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Returns the current total of tokens staked\r\n   * @return uint256 The number of tokens staked in the contract\r\n   */\r\n  function totalStaked() public view returns (uint256) {\r\n    //return stakingToken.balanceOf(address(this));\r\n    return totalStakedAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Address of the token being used by the staking interface\r\n   * @return address The address of the ERC20 token used for staking\r\n   */\r\n  function token() public view returns (address) {\r\n    return address(stakingToken);\r\n  }\r\n\r\n  /**\r\n   * @notice MUST return true if the optional history functions are implemented, otherwise false\r\n   * @dev Since we don't implement the optional interface, this always returns false\r\n   * @return bool Whether or not the optional history functions are implemented\r\n   */\r\n  function supportsHistory() public pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to get specific properties of all of the personal stakes created by an address\r\n   * @param _address address The address to query\r\n   * @return (uint256[], uint256[], address[])\r\n   *  timestamps array, actualAmounts array, stakedFor array\r\n   */\r\n  function getPersonalStakes(\r\n    address _address\r\n  )\r\n    public view\r\n    returns(uint256[] memory, uint256[] memory, address[] memory)\r\n  {\r\n    StakeContract storage stakeContract = stakeHolders[_address];\r\n\r\n    uint256 arraySize = stakeContract.personalStakes.length - stakeContract.personalStakeIndex;\r\n    uint256[] memory unlockedTimestamps = new uint256[](arraySize);\r\n    uint256[] memory actualAmounts = new uint256[](arraySize);\r\n    address[] memory stakedFor = new address[](arraySize);\r\n\r\n    for (uint256 i = stakeContract.personalStakeIndex; i < stakeContract.personalStakes.length; i++) {\r\n      uint256 index = i - stakeContract.personalStakeIndex;\r\n      unlockedTimestamps[index] = stakeContract.personalStakes[i].unlockedTimestamp;\r\n      actualAmounts[index] = stakeContract.personalStakes[i].actualAmount;\r\n      stakedFor[index] = stakeContract.personalStakes[i].stakedFor;\r\n    }\r\n\r\n    return (\r\n      unlockedTimestamps,\r\n      actualAmounts,\r\n      stakedFor\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to create stakes for a given address\r\n   * @param _address address The address the stake is being created for\r\n   * @param _amount uint256 The number of tokens being staked\r\n   * @param _lockInDuration uint256 The duration to lock the tokens for\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function createStake(\r\n    address _address,\r\n    uint256 _amount,\r\n    uint256 _lockInDuration,\r\n    bytes memory _data)\r\n    internal\r\n    canStake(_msgSender(), _amount)\r\n  {\r\n    if (!stakeHolders[_msgSender()].exists) {\r\n      stakeHolders[_msgSender()].exists = true;\r\n    }\r\n\r\n    stakeHolders[_address].totalStakedFor = stakeHolders[_address].totalStakedFor.add(_amount);\r\n    stakeHolders[_msgSender()].personalStakes.push(\r\n      Stake(\r\n        block.timestamp.add(_lockInDuration),\r\n        _amount,\r\n        _address)\r\n      );\r\n\r\n    totalStakedAmount = totalStakedAmount.add(_amount);\r\n    emit Staked(\r\n      _address,\r\n      _amount,\r\n      totalStakedFor(_address),\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to withdraw stakes for the _msgSender()\r\n   * @param _amount uint256 The amount to withdraw. MUST match the stake amount for the\r\n   *  stake at personalStakeIndex.\r\n   * @param _data bytes optional data to include in the Unstake event\r\n   */\r\n  function withdrawStake(\r\n    uint256 _amount,\r\n    bytes memory _data)\r\n    internal isUserCapEnabledForUnStakeFor(_amount)\r\n  {\r\n    Stake storage personalStake = stakeHolders[_msgSender()].personalStakes[stakeHolders[_msgSender()].personalStakeIndex];\r\n\r\n    // Check that the current stake has unlocked & matches the unstake amount\r\n    require(\r\n      personalStake.unlockedTimestamp <= block.timestamp,\r\n      \"The current stake hasn't unlocked yet\");\r\n\r\n    require(\r\n      personalStake.actualAmount == _amount,\r\n      \"The unstake amount does not match the current stake\");\r\n\r\n    // Transfer the staked tokens from this contract back to the sender\r\n    // Notice that we are using transfer instead of transferFrom here, so\r\n    //  no approval is needed beforehand.\r\n    require(\r\n      stakingToken.transfer(_msgSender(), _amount),\r\n      \"Unable to withdraw stake\");\r\n\r\n    stakeHolders[personalStake.stakedFor].totalStakedFor = stakeHolders[personalStake.stakedFor]\r\n      .totalStakedFor.sub(personalStake.actualAmount);\r\n\r\n    personalStake.actualAmount = 0;\r\n    stakeHolders[_msgSender()].personalStakeIndex++;\r\n\r\n    totalStakedAmount = totalStakedAmount.sub(_amount);\r\n\r\n    emit Unstaked(\r\n      personalStake.stakedFor,\r\n      _amount,\r\n      totalStakedFor(personalStake.stakedFor),\r\n      _data);\r\n  }\r\n\r\n  uint256[49] private ______gap;\r\n}\r\n\r\n// File: contracts\\modules\\staking\\StakingPool.sol\r\n\r\npragma solidity ^0.5.12; \r\n\r\n\r\n\r\n\r\n\r\ncontract StakingPool is StakingPoolBase {\r\n    event RewardTokenRegistered(address token);\r\n    event RewardDistributionCreated(address token, uint256 amount, uint256 totalShares);\r\n    event RewardWithdraw(address indexed user, address indexed rewardToken, uint256 amount);\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct RewardDistribution {\r\n        uint256 totalShares;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct UserRewardInfo {\r\n        mapping(address=>uint256) nextDistribution; //Next unclaimed distribution\r\n    }\r\n\r\n    struct RewardData {\r\n        RewardDistribution[] distributions;\r\n        uint256 unclaimed;\r\n    }\r\n\r\n    RewardVestingModule public rewardVesting;\r\n    address[] internal registeredRewardTokens;\r\n    mapping(address=>RewardData) internal rewards;\r\n    mapping(address=>UserRewardInfo) internal userRewards;\r\n\r\n\r\n    modifier onlyRewardDistributionModule() {\r\n        require(_msgSender() == getModuleAddress(MODULE_REWARD_DISTR), \"StakingPool: calls allowed from RewardDistributionModule only\");\r\n        _;\r\n    }\r\n\r\n    function setRewardVesting(address _rewardVesting) public onlyOwner {\r\n        rewardVesting = RewardVestingModule(_rewardVesting);\r\n    }\r\n\r\n    function registerRewardToken(address token) public onlyOwner {\r\n        require(!isRegisteredRewardToken(token), \"StakingPool: already registered\");\r\n        registeredRewardTokens.push(token);\r\n        emit RewardTokenRegistered(token);\r\n    }\r\n\r\n    function claimRewardsFromVesting() public onlyCapper{\r\n        _claimRewardsFromVesting();\r\n    }\r\n\r\n    function isRegisteredRewardToken(address token) public view returns(bool) {\r\n        for(uint256 i=0; i<registeredRewardTokens.length; i++){\r\n            if(token == registeredRewardTokens[i]) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function supportedRewardTokens() public view returns(address[] memory) {\r\n        return registeredRewardTokens;\r\n    }\r\n\r\n    function withdrawRewards() public returns(uint256[] memory){\r\n        return _withdrawRewards(_msgSender());\r\n    }\r\n\r\n    function withdrawRewardsFor(address user, address rewardToken) public onlyRewardDistributionModule returns(uint256) {\r\n        return _withdrawRewards(user, rewardToken);\r\n    }\r\n\r\n    // function withdrawRewardsFor(address user, address[] memory rewardTokens) onlyRewardDistributionModule {\r\n    //     for(uint256 i=0; i < rewardTokens.length; i++) {\r\n    //         _withdrawRewards(user, rewardTokens[i]);\r\n    //     }\r\n    // }\r\n\r\n    function rewardBalanceOf(address user, address token) public view returns(uint256) {\r\n        RewardData storage rd = rewards[token];\r\n        if(rd.unclaimed == 0) return 0; //Either token not registered or everything is already claimed\r\n        uint256 shares = getPersonalStakeTotalAmount(user);\r\n        if(shares == 0) return 0;\r\n        UserRewardInfo storage uri = userRewards[user];\r\n        uint256 reward;\r\n        for(uint256 i=uri.nextDistribution[token]; i < rd.distributions.length; i++) {\r\n            RewardDistribution storage rdistr = rd.distributions[i];\r\n            uint256 r = shares.mul(rdistr.amount).div(rdistr.totalShares);\r\n            reward = reward.add(r);\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    function _withdrawRewards(address user) internal returns(uint256[] memory rwrds) {\r\n        rwrds = new uint256[](registeredRewardTokens.length);\r\n        for(uint256 i=0; i<registeredRewardTokens.length; i++){\r\n            rwrds[i] = _withdrawRewards(user, registeredRewardTokens[i]);\r\n        }\r\n        return rwrds;\r\n    }\r\n\r\n    function _withdrawRewards(address user, address token) internal returns(uint256){\r\n        UserRewardInfo storage uri = userRewards[user];\r\n        RewardData storage rd = rewards[token];\r\n        if(rd.distributions.length == 0) { //No distributions = nothing to do\r\n            return 0;\r\n        }\r\n        uint256 rwrds = rewardBalanceOf(user, token);\r\n        uri.nextDistribution[token] = rd.distributions.length;\r\n        if(rwrds > 0){\r\n            rewards[token].unclaimed = rewards[token].unclaimed.sub(rwrds);\r\n            IERC20(token).transfer(user, rwrds);\r\n            emit RewardWithdraw(user, token, rwrds);\r\n        }\r\n        return rwrds;\r\n    }\r\n\r\n    function createStake(address _address, uint256 _amount, uint256 _lockInDuration, bytes memory _data) internal {\r\n        _withdrawRewards(_address);\r\n        super.createStake(_address, _amount, _lockInDuration, _data);\r\n    }\r\n\r\n    function withdrawStake(uint256 _amount, bytes memory _data) internal {\r\n        _withdrawRewards(_msgSender());\r\n        super.withdrawStake(_amount, _data);\r\n    }\r\n\r\n\r\n    function _claimRewardsFromVesting() internal {\r\n        rewardVesting.claimRewards();\r\n        for(uint256 i=0; i < registeredRewardTokens.length; i++){\r\n            address rt = registeredRewardTokens[i];\r\n            uint256 expectedBalance = rewards[rt].unclaimed;\r\n            if(rt == address(stakingToken)){\r\n                expectedBalance = expectedBalance.add(totalStaked());\r\n            }\r\n            uint256 actualBalance = IERC20(rt).balanceOf(address(this));\r\n            uint256 distributionAmount = actualBalance.sub(expectedBalance);\r\n            if(actualBalance > expectedBalance) {\r\n                uint256 totalShares = totalStaked();\r\n                rewards[rt].distributions.push(RewardDistribution({\r\n                    totalShares: totalShares,\r\n                    amount: distributionAmount\r\n                }));\r\n                rewards[rt].unclaimed = rewards[rt].unclaimed.add(distributionAmount);\r\n                emit RewardDistributionCreated(rt, distributionAmount, totalShares);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\modules\\reward\\RewardDistributionModule.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardDistributionModule is Module, IPoolTokenBalanceChangeRecipient, AccessChecker {\r\n    uint256 public constant DISTRIBUTION_AGGREGATION_PERIOD = 24*60*60;\r\n\r\n    event ProtocolRegistered(address protocol, address poolToken);\r\n    event RewardDistribution(address indexed poolToken, address indexed rewardToken, uint256 amount, uint256 totalShares);\r\n    event RewardWithdraw(address indexed user, address indexed rewardToken, uint256 amount);\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct RewardTokenDistribution {\r\n        address poolToken;                  // PoolToken which holders will receive reward\r\n        uint256 totalShares;                // Total shares of PoolToken participating in this distribution\r\n        address[] rewardTokens;             // List of reward tokens being distributed \r\n        mapping(address=>uint256) amounts; \r\n    }\r\n\r\n    struct UserProtocolRewards {\r\n        uint256 shares;\r\n        mapping(address=>uint256) amounts;  // Maps address of reward token to amount beeing distributed\r\n    }\r\n    struct RewardBalance {\r\n        uint256 nextDistribution;\r\n        mapping(address => UserProtocolRewards) rewardsByPT; //Maps PoolToken to ProtocolRewards struct (map of reward tokens to their balances);\r\n    }\r\n\r\n    struct ProtocolInfo {\r\n        address poolToken;\r\n        uint256 lastRewardDistributionTimestamp;\r\n        address[] rewardTokens;\r\n    }\r\n\r\n    RewardTokenDistribution[] rewardDistributions;\r\n    mapping(address=>RewardBalance) rewardBalances; //Mapping users to their RewardBalance\r\n\r\n    address[] internal registeredRewardTokens;\r\n    address[] internal registeredPoolTokens;\r\n    mapping(address=>bool) public isRewardToken;\r\n    mapping(address=>address) internal poolTokenToProtocol;\r\n    mapping(address=>ProtocolInfo) public protocolInfo;\r\n    mapping(address=>bool) public userRewardsMigrated;\r\n\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n    }\r\n\r\n    function registerProtocol(address _protocol, address _poolToken) public onlyOwner {\r\n        require(protocolInfo[_protocol].poolToken == address(0), \"RewardDistributionModule: protocol already registered\");\r\n        require(poolTokenToProtocol[_poolToken] == address(0), \"RewardDistributionModule: poolToken already registered\");\r\n\r\n        registeredPoolTokens.push(_poolToken);\r\n        poolTokenToProtocol[_poolToken] = _protocol;\r\n\r\n        address[] memory rTokens = IDefiProtocol(_protocol).supportedRewardTokens();\r\n\r\n        protocolInfo[_protocol] = ProtocolInfo({\r\n            poolToken: _poolToken,\r\n            lastRewardDistributionTimestamp: 0,\r\n            rewardTokens: rTokens\r\n        });\r\n\r\n        for(uint256 i=0; i < rTokens.length; i++) {\r\n            if(!isRewardToken[rTokens[i]]){\r\n                isRewardToken[rTokens[i]] = true;\r\n                registeredRewardTokens.push(rTokens[i]);\r\n            }\r\n        }\r\n\r\n        emit ProtocolRegistered(_protocol, _poolToken);\r\n    }    \r\n\r\n\r\n    function poolTokenByProtocol(address _protocol) public view returns(address) {\r\n        return protocolInfo[_protocol].poolToken;\r\n    }\r\n    function protocolByPoolToken(address _poolToken) public view returns(address)  {\r\n        return poolTokenToProtocol[_poolToken];\r\n    }\r\n    function supportedPoolTokens() public view returns(address[] memory) {\r\n        return registeredPoolTokens;\r\n    }\r\n    function supportedRewardTokens() public view returns(address[] memory) {\r\n        return registeredRewardTokens;\r\n    }\r\n\r\n    function poolTokenBalanceChanged(address user) public {\r\n        address token = _msgSender();\r\n        require(isPoolToken(token), \"RewardDistributionModule: PoolToken is not registered\");\r\n\r\n        _updateRewardBalance(user, rewardDistributions.length);\r\n        uint256 newAmount = PoolToken(token).distributionBalanceOf(user);\r\n        rewardBalances[user].rewardsByPT[token].shares = newAmount;\r\n    }\r\n\r\n    /** \r\n     * @notice Distributes reward tokens. May be called by bot, if there was no deposits/withdrawals\r\n     */\r\n    function distributeRewards() public {\r\n        for(uint256 i=0; i<registeredPoolTokens.length; i++) {\r\n            distributeRewardIfRequired(poolTokenToProtocol[registeredPoolTokens[i]]);\r\n        }\r\n    }\r\n\r\n    // function distributeRewards(address _protocol) public {\r\n    //     distributeRewardIfRequired(_protocol);\r\n    // }\r\n\r\n    function distributeRewardsForced(address _protocol) public onlyOwner {\r\n        protocolInfo[_protocol].lastRewardDistributionTimestamp = now;\r\n        distributeReward(_protocol);\r\n    }\r\n\r\n    function distributeRewardIfRequired(address _protocol) internal {\r\n        if(!isRewardDistributionRequired(_protocol)) return;\r\n        protocolInfo[_protocol].lastRewardDistributionTimestamp = now;\r\n        distributeReward(_protocol);\r\n    }\r\n\r\n    function isRewardDistributionRequired(address _protocol) internal view returns(bool) {\r\n        uint256 lrd = protocolInfo[_protocol].lastRewardDistributionTimestamp;\r\n        return now.sub(lrd) > DISTRIBUTION_AGGREGATION_PERIOD;\r\n    }\r\n\r\n    function withdrawReward() public returns(uint256[] memory) {\r\n        return withdrawReward(supportedRewardTokens());\r\n    }\r\n\r\n    function withdrawReward(address[] memory rewardTokens)\r\n    public operationAllowed(IAccessModule.Operation.Withdraw)\r\n    returns(uint256[] memory)\r\n    {\r\n        address user = _msgSender();\r\n        uint256[] memory rAmounts = new uint256[](rewardTokens.length);\r\n        updateRewardBalance(user);\r\n        for(uint256 i=0; i < rewardTokens.length; i++) {\r\n            rAmounts[i] = _withdrawReward(user, rewardTokens[i]);\r\n        }\r\n        return rAmounts;\r\n    }\r\n\r\n    function withdrawReward(address poolToken, address rewardToken) \r\n    public operationAllowed(IAccessModule.Operation.Withdraw)\r\n    returns(uint256){\r\n        address user = _msgSender();\r\n        updateRewardBalance(user);\r\n        return _withdrawReward(user, poolToken, rewardToken);\r\n    }\r\n\r\n    function withdrawReward(address[] memory poolTokens, address[] memory rewardTokens) \r\n    public operationAllowed(IAccessModule.Operation.Withdraw)\r\n    returns(uint256[] memory){\r\n        require(poolTokens.length == rewardTokens.length, \"RewardDistributionModule: array length mismatch\");\r\n\r\n        address akroStaking = getModuleAddress(MODULE_STAKING_AKRO);\r\n        address adelStaking = getModuleAddress(MODULE_STAKING_ADEL);\r\n\r\n        uint256[] memory amounts = new uint256[](poolTokens.length);\r\n        address user = _msgSender();\r\n        updateRewardBalance(user);\r\n        for(uint256 i=0; i < poolTokens.length; i++) {\r\n            if(poolTokens[i] == akroStaking || poolTokens[i] == adelStaking){\r\n                amounts[i] = StakingPool(poolTokens[i]).withdrawRewardsFor(user, rewardTokens[i]);\r\n            }else{\r\n                amounts[i] = _withdrawReward(user, poolTokens[i], rewardTokens[i]);\r\n            }\r\n        }\r\n        return amounts;\r\n    }\r\n\r\n    // function rewardBalanceOf(address user, address[] memory rewardTokens) public view returns(uint256[] memory) {\r\n    //     uint256[] memory amounts = new uint256[](rewardTokens.length);\r\n    //     address[] memory poolTokens = registeredPoolTokens();\r\n    //     for(uint256 i=0; i < rewardTokens.length; i++) {\r\n    //         for(uint256 j=0; j < poolTokens.length; j++) {\r\n    //             amounts[i] = amounts[i].add(rewardBalanceOf(user, poolTokens[j], rewardTokens[i]));\r\n    //         }\r\n    //     }\r\n    //     return amounts;\r\n    // }\r\n\r\n\r\n    function rewardBalanceOf(address user, address poolToken, address rewardToken) public view returns(uint256 amounts) {\r\n        if(!userRewardsMigrated[user]){\r\n            address[] memory rtkns = new address[](1);\r\n            rtkns[0] = rewardToken;\r\n            return savingsModule().rewardBalanceOf(user, poolToken, rtkns)[0];\r\n        }\r\n\r\n        RewardBalance storage rb = rewardBalances[user];\r\n        UserProtocolRewards storage upr = rb.rewardsByPT[poolToken];\r\n        uint256 balance = upr.amounts[rewardToken];\r\n        uint256 next = rb.nextDistribution;\r\n        while (next < rewardDistributions.length) {\r\n            RewardTokenDistribution storage d = rewardDistributions[next];\r\n            next++;\r\n\r\n            uint256 sh = rb.rewardsByPT[d.poolToken].shares;\r\n            if (sh == 0 || poolToken != d.poolToken) continue;\r\n            uint256 distrAmount = d.amounts[rewardToken];\r\n            balance = balance.add(distrAmount.mul(sh).div(d.totalShares));\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    function rewardBalanceOf(address user, address poolToken, address[] calldata rewardTokens) external view returns(uint256[] memory) {\r\n        if(!userRewardsMigrated[user]) return savingsModule().rewardBalanceOf(user, poolToken, rewardTokens);\r\n\r\n        RewardBalance storage rb = rewardBalances[user];\r\n        UserProtocolRewards storage upr = rb.rewardsByPT[poolToken];\r\n        uint256[] memory balances = new uint256[](rewardTokens.length);\r\n        uint256 i;\r\n        for(i=0; i < rewardTokens.length; i++){\r\n            balances[i] = upr.amounts[rewardTokens[i]];\r\n        }\r\n        uint256 next = rb.nextDistribution;\r\n        while (next < rewardDistributions.length) {\r\n            RewardTokenDistribution storage d = rewardDistributions[next];\r\n            next++;\r\n\r\n            uint256 sh = rb.rewardsByPT[d.poolToken].shares;\r\n            if (sh == 0 || poolToken != d.poolToken) continue;\r\n            for(i=0; i < rewardTokens.length; i++){\r\n                uint256 distrAmount = d.amounts[rewardTokens[i]];\r\n                balances[i] = balances[i].add(distrAmount.mul(sh).div(d.totalShares));\r\n            }\r\n        }\r\n        return balances;\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Updates user balance\r\n    * @param user User address \r\n    */\r\n    function updateRewardBalance(address user) public {\r\n        _updateRewardBalance(user, rewardDistributions.length);\r\n    }\r\n\r\n    /**\r\n    * @notice Updates user balance\r\n    * @param user User address \r\n    * @param toDistribution Index of distribution next to the last one, which should be processed\r\n    */\r\n    function updateRewardBalance(address user, uint256 toDistribution) public {\r\n        _updateRewardBalance(user, toDistribution);\r\n    }\r\n\r\n    function distributeReward(address _protocol) internal {\r\n        (address[] memory _tokens, uint256[] memory _amounts) = IDefiProtocol(_protocol).claimRewards();\r\n        if(_tokens.length > 0) {\r\n            address poolToken = poolTokenByProtocol(_protocol);\r\n            distributeReward(poolToken, _tokens, _amounts);\r\n        }\r\n    }\r\n\r\n    function storedRewardBalance(address user, address poolToken, address rewardToken) public view \r\n    returns(uint256 nextDistribution, uint256 poolTokenShares, uint256 storedReward) {\r\n        RewardBalance storage rb = rewardBalances[user];\r\n        nextDistribution = rb.nextDistribution;\r\n        poolTokenShares = rb.rewardsByPT[poolToken].shares;\r\n        storedReward = rb.rewardsByPT[poolToken].amounts[rewardToken];\r\n    }\r\n\r\n    function rewardDistribution(uint256 num) public view \r\n    returns(address poolToken, uint256 totalShares, address[] memory rewardTokens, uint256[] memory amounts){\r\n        RewardTokenDistribution storage d = rewardDistributions[num];\r\n        poolToken = d.poolToken;\r\n        totalShares = d.totalShares;\r\n        rewardTokens = d.rewardTokens;\r\n        amounts = new uint256[](rewardTokens.length);\r\n        for(uint256 i=0; i < rewardTokens.length; i++) {\r\n            address tkn = rewardTokens[i];\r\n            amounts[i] = d.amounts[tkn];\r\n        }\r\n    }\r\n\r\n    function rewardDistributionCount() public view returns(uint256){\r\n        return rewardDistributions.length;\r\n    }\r\n\r\n    /**\r\n    * @notice Create reward distribution\r\n    */\r\n    function distributeReward(address poolToken, address[] memory rewardTokens, uint256[] memory amounts) internal {\r\n        rewardDistributions.push(RewardTokenDistribution({\r\n            poolToken: poolToken,\r\n            totalShares: PoolToken(poolToken).distributionTotalSupply(),\r\n            rewardTokens:rewardTokens\r\n        }));\r\n        uint256 idx = rewardDistributions.length - 1;\r\n        RewardTokenDistribution storage rd = rewardDistributions[idx];\r\n        for(uint256 i = 0; i < rewardTokens.length; i++) {\r\n            rd.amounts[rewardTokens[i]] = amounts[i];  \r\n            emit RewardDistribution(poolToken, rewardTokens[i], amounts[i], rd.totalShares);\r\n        }\r\n    }\r\n\r\n    function migrateRewards(address[] calldata users) external {\r\n        for(uint256 i=0; i<users.length;i++){\r\n            migrateUserRewards(users[i]);\r\n        }\r\n    }\r\n\r\n    function migrateUserRewards(address user) internal {\r\n        if(userRewardsMigrated[user]) return; //Skip already migrated\r\n        RewardBalance storage rb =rewardBalances[user];\r\n\r\n        SavingsModule sm = savingsModule();\r\n        IDefiProtocol[] memory protocols = sm.supportedProtocols();\r\n        for(uint256 i=0; i<protocols.length; i++) {\r\n            address _protocol = address(protocols[i]);\r\n            address _poolToken = protocolInfo[_protocol].poolToken;\r\n            UserProtocolRewards storage upr = rb.rewardsByPT[_poolToken];\r\n            upr.shares = PoolToken(_poolToken).distributionBalanceOf(user);\r\n            address[] memory rtkns = sm.rewardTokensByProtocol(_protocol);\r\n            uint256[] memory balances = sm.rewardBalanceOf(user, _poolToken, rtkns);\r\n            for(uint256 j=0; j<rtkns.length; j++){\r\n                upr.amounts[rtkns[j]] = balances[j];\r\n            }\r\n        }\r\n        userRewardsMigrated[user] = true;\r\n    }\r\n\r\n    function _withdrawReward(address user, address rewardToken) internal returns(uint256) {\r\n        uint256 totalAmount;\r\n        for(uint256 i=0; i < registeredPoolTokens.length; i++) {\r\n            address poolToken = registeredPoolTokens[i];\r\n            uint256 amount = rewardBalances[user].rewardsByPT[poolToken].amounts[rewardToken];\r\n            if(amount > 0){\r\n                totalAmount = totalAmount.add(amount);\r\n                rewardBalances[user].rewardsByPT[poolToken].amounts[rewardToken] = 0;\r\n                IDefiProtocol protocol = IDefiProtocol(protocolByPoolToken(poolToken));\r\n                protocol.withdrawReward(rewardToken, user, amount);\r\n            }\r\n        }\r\n        if(totalAmount > 0) {\r\n            emit RewardWithdraw(user, rewardToken, totalAmount);\r\n        }\r\n        return totalAmount;\r\n    }\r\n\r\n    function _withdrawReward(address user, address poolToken, address rewardToken) internal returns(uint256) {\r\n        uint256 amount = rewardBalances[user].rewardsByPT[poolToken].amounts[rewardToken];\r\n        require(amount > 0, \"RewardDistributionModule: nothing to withdraw\");\r\n        rewardBalances[user].rewardsByPT[poolToken].amounts[rewardToken] = 0;\r\n        IDefiProtocol protocol = IDefiProtocol(protocolByPoolToken(poolToken));\r\n        protocol.withdrawReward(rewardToken, user, amount);\r\n        emit RewardWithdraw(user, rewardToken, amount);\r\n        return amount;\r\n    }\r\n\r\n    function _updateRewardBalance(address user, uint256 toDistribution) internal {\r\n        require(toDistribution <= rewardDistributions.length, \"RewardDistributionModule: toDistribution index is too high\");\r\n        if(!userRewardsMigrated[user]) migrateUserRewards(user);\r\n\r\n        RewardBalance storage rb = rewardBalances[user];\r\n        uint256 next = rb.nextDistribution;\r\n        if(next >= toDistribution) return;\r\n\r\n        if(next == 0 && rewardDistributions.length > 0){\r\n            //This might be a new user, if so we can skip previous distributions\r\n            bool hasDeposit;\r\n            for(uint256 i=0; i< registeredPoolTokens.length; i++){\r\n                address poolToken = registeredPoolTokens[i];\r\n                if(rb.rewardsByPT[poolToken].shares != 0) {\r\n                    hasDeposit = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!hasDeposit){\r\n                rb.nextDistribution = rewardDistributions.length;\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (next < toDistribution) {\r\n            RewardTokenDistribution storage d = rewardDistributions[next];\r\n            next++;\r\n            UserProtocolRewards storage upr = rb.rewardsByPT[d.poolToken]; \r\n            uint256 sh = upr.shares;\r\n            if (sh == 0) continue;\r\n            for (uint256 i=0; i < d.rewardTokens.length; i++) {\r\n                address rToken = d.rewardTokens[i];\r\n                uint256 distrAmount = d.amounts[rToken];\r\n                upr.amounts[rToken] = upr.amounts[rToken].add(distrAmount.mul(sh).div(d.totalShares));\r\n\r\n            }\r\n        }\r\n        rb.nextDistribution = next;\r\n    }\r\n\r\n    function savingsModule() internal view returns (SavingsModule) {\r\n        return SavingsModule(getModuleAddress(MODULE_SAVINGS));\r\n    }\r\n\r\n    function isPoolToken(address _token) internal view returns(bool) {\r\n        return (poolTokenToProtocol[_token] != address(0));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"}],\"name\":\"ProtocolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"RewardDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISTRIBUTION_AGGREGATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"distributeRewardsForced\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"migrateRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"poolTokenBalanceChanged\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"poolTokenByProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"protocolByPoolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardDistributionTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"registerProtocol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"rewardBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"rewardBalanceOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistributionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"storedRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storedReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportedPoolTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportedRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toDistribution\",\"type\":\"uint256\"}],\"name\":\"updateRewardBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"updateRewardBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardsMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardDistributionModule","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ccda68f0faee8de08a47a7618b123b592c4aff01e3264ad700a298eef1407307"}]}