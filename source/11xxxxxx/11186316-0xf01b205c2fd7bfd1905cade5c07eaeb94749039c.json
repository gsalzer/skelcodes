{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * Standard ERC20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token is ERC20 {\r\n  mapping(address => uint) balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  using SafeMath for uint;\r\n\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n\r\n    return doTransfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n\r\n    return doTransfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice Allows `_spender` to withdraw from your account multiple times up to `_value`.\r\n  /// If this function is called again it overwrites the current allowance with `_value`.\r\n  /// @dev Allows `_spender` to withdraw from your account multiple times up to `_value`.\r\n  /// If this function is called again it overwrites the current allowance with `_value`.\r\n  /// NOTE: To prevent attack vectors, clients SHOULD make sure to create user interfaces\r\n  /// in such a way that they set the allowance first to 0 before setting it\r\n  /// to another value for the same spender\r\n  /// @param _spender Address that is going to be approved\r\n  /// @param _value Number of tokens that spender is going to be able to transfer\r\n  /// @return true if success\r\n  function approve(address _spender, uint _value) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    emit Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n  }\r\n\r\n  function doTransfer(address _from, address _to, uint _value) internal returns (bool success) {\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/*\r\n  Copyright (C) 2017 Icofunding S.L.\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/// @title Mint interface\r\n/// @author Icofunding\r\ncontract MintInterface {\r\n  function mint(address recipient, uint amount) public returns (bool success);\r\n}\r\n\r\n/**\r\n * Manages the ownership of a contract\r\n * Standard Owned contract.\r\n */\r\ncontract Owned {\r\n  address public owner;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function changeOwner(address newOwner) public onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/*\r\n  Copyright (C) 2017 Icofunding S.L.\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/// @title Manages the minters of a token\r\n/// @author Icofunding\r\ncontract Minted is MintInterface, Owned {\r\n  uint public numMinters; // Number of minters of the token.\r\n  bool public open; // If is possible to add new minters or not. True by default.\r\n  mapping (address => bool) public isMinter; // If an address is a minter of the token or not\r\n\r\n  // Log of the minters added\r\n  event NewMinter(address who);\r\n\r\n  modifier onlyMinters() {\r\n    require(isMinter[msg.sender]);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyIfOpen() {\r\n    require(open);\r\n\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    open = true;\r\n  }\r\n\r\n  /// @notice Adds a new minter to the token.\r\n  /// It can only be executed by the Owner if the token is open to new minters.\r\n  /// @dev Adds a new minter to the token.\r\n  /// It can only be executed by the Owner if the token is open to new minters.\r\n  /// @param _minter minter address\r\n  function addMinter(address _minter) public onlyOwner onlyIfOpen {\r\n    if(!isMinter[_minter]) {\r\n      isMinter[_minter] = true;\r\n      numMinters++;\r\n\r\n      emit NewMinter(_minter);\r\n    }\r\n  }\r\n\r\n  /// @notice Removes a minter of the token.\r\n  /// It can only be executed by the Owner.\r\n  /// @dev Removes a minter of the token.\r\n  /// It can only be executed by the Owner.\r\n  /// @param _minter minter address\r\n  function removeMinter(address _minter) public onlyOwner {\r\n    if(isMinter[_minter]) {\r\n      isMinter[_minter] = false;\r\n      numMinters--;\r\n    }\r\n  }\r\n\r\n  /// @notice Blocks the possibility to add new minters.\r\n  /// It can only be executed by the Owner.\r\n  /// @dev Blocks the possibility to add new minters\r\n  /// It can only be executed by the Owner.\r\n  function endMinting() public onlyOwner {\r\n    open = false;\r\n  }\r\n}\r\n\r\n /*\r\n   Copyright (C) 2017 Icofunding S.L.\r\n\r\n   This program is free software: you can redistribute it and/or modify\r\n   it under the terms of the GNU General Public License as published by\r\n   the Free Software Foundation, either version 3 of the License, or\r\n   (at your option) any later version.\r\n\r\n   This program is distributed in the hope that it will be useful,\r\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n   GNU General Public License for more details.\r\n\r\n   You should have received a copy of the GNU General Public License\r\n   along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title Pausable\r\n/// @author Icofunding\r\ncontract Pausable is Owned {\r\n  bool public isPaused;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!isPaused);\r\n\r\n    _;\r\n  }\r\n\r\n  /// @notice Makes the token non-transferable\r\n  /// @dev Makes the token non-transferable\r\n  function pause() public onlyOwner {\r\n    isPaused = true;\r\n  }\r\n\r\n  /// @notice Makes the token transferable\r\n  /// @dev Makes the token transferable\r\n  function unPause() public onlyOwner {\r\n    isPaused = false;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/*\r\n  Copyright (C) 2017 Icofunding S.L.\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/// @title Auth\r\n/// @author Icofunding\r\ncontract Auth is Owned {\r\n  mapping (address => bool) authAddresses;\r\n\r\n  // Manages the ownership of a contract with multiple managers\r\n  modifier onlyAuth() {\r\n    require(isAuth(msg.sender));\r\n\r\n    _;\r\n  }\r\n\r\n  function addAuth(address authAddress) public onlyOwner {\r\n    authAddresses[authAddress] = true;\r\n  }\r\n\r\n  function removeAuth(address authAddress) public onlyOwner {\r\n    authAddresses[authAddress] = false;\r\n  }\r\n\r\n  function isAuth(address authAddress) public view returns (bool) {\r\n    return (authAddresses[authAddress] || authAddress == owner);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n  Copyright (C) 2017 Icofunding S.L.\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/// @title Whitelist\r\n/// @author Icofunding\r\ncontract Whitelist is Auth {\r\n  mapping(address => bool) public whitelist;\r\n\r\n  using SafeMath for uint;\r\n\r\n  modifier whitelisted(address from, address to) {\r\n    require(whitelist[from]);\r\n    require(whitelist[to]);\r\n\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n  }\r\n\r\n  /// @notice Adds the address `account` to the whitelist\r\n  /// @dev Adds the address `account` to the whitelist\r\n  /// @param account Address to be added to the whitelist\r\n  function addToWhitelist(address account) public onlyAuth {\r\n    whitelist[account] = true;\r\n  }\r\n\r\n  /// @notice Removes the address `account` from the whitelist\r\n  /// @dev Removes the address `account` from the whitelist\r\n  /// @param account Address to be removed from the whitelist\r\n  function removeFromWhitelist(address account) public onlyAuth {\r\n    whitelist[account] = false;\r\n  }\r\n}\r\n\r\n/*\r\n  Copyright (C) 2017 Icofunding S.L.\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/// @title Token contract\r\n/// @author Icofunding\r\ncontract ProjectToken is Token, Minted, Pausable, Whitelist {\r\n  string public name;\r\n  string public symbol;\r\n  uint public decimals;\r\n\r\n  uint public transferableDate; // timestamp\r\n\r\n  modifier lockUpPeriod() {\r\n    require(now >= transferableDate);\r\n\r\n    _;\r\n  }\r\n\r\n  /// @notice Creates a token\r\n  /// @dev Constructor\r\n  /// @param _name Name of the token\r\n  /// @param _symbol Acronim of the token\r\n  /// @param _decimals Number of decimals of the token\r\n  /// @param _transferableDate Timestamp from when the token can de transfered\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint _decimals,\r\n    uint _transferableDate\r\n  ) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    transferableDate = _transferableDate;\r\n  }\r\n\r\n  /// @notice Creates `amount` tokens and sends them to `recipient` address\r\n  /// @dev Mints new tokens. This tokens are transfered from the address 0x0\r\n  /// Adds the receiver to the whitelist\r\n  /// @param recipient Address that receives the tokens\r\n  /// @param amount Number of tokens created (plus decimals)\r\n  /// @return true if success\r\n  function mint(address recipient, uint amount)\r\n    public\r\n    onlyMinters\r\n    returns (bool success)\r\n  {\r\n    totalSupply = totalSupply.add(amount);\r\n    balances[recipient] = balances[recipient].add(amount);\r\n\r\n    whitelist[recipient] = true;\r\n\r\n    emit Transfer(address(0), recipient, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice Transfers `value` tokens to `to`\r\n  /// @dev Transfers `value` tokens to `to`\r\n  /// @param to The address that will receive the tokens.\r\n  /// @param value The amount of tokens to transfer (plus decimals)\r\n  /// @return true if success\r\n  function transfer(address to, uint value)\r\n    public\r\n    lockUpPeriod\r\n    whenNotPaused\r\n    whitelisted(msg.sender, to)\r\n    returns (bool success)\r\n  {\r\n    return super.transfer(to, value);\r\n  }\r\n\r\n  /// @notice Transfers `value` tokens to `to` from `from` account\r\n  /// @dev Transfers `value` tokens to `to` from `from` account.\r\n  /// @param from The address of the sender\r\n  /// @param to The address that will receive the tokens\r\n  /// @param value The amount of tokens to transfer (plus decimals)\r\n  /// @return true if success\r\n  function transferFrom(address from, address to, uint value)\r\n    public\r\n    lockUpPeriod\r\n    whenNotPaused\r\n    whitelisted(from, to)\r\n    returns (bool success)\r\n  {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n  /// @notice Forces the transfer of `value` tokens from `from` to `to`\r\n  /// @dev Forces the transfer of `value` tokens from `from` to `to`\r\n  /// @param from The address that sends the tokens.\r\n  /// @param to The address that will receive the tokens.\r\n  /// @param value The amount of tokens to transfer (plus decimals)\r\n  /// @return true if success\r\n  function forceTransfer(address from, address to, uint value)\r\n    public\r\n    onlyOwner\r\n    returns (bool success)\r\n  {\r\n    require(whitelist[to]);\r\n    \r\n    return super.doTransfer(from, to, value);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferableDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"authAddress\",\"type\":\"address\"}],\"name\":\"addAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"authAddress\",\"type\":\"address\"}],\"name\":\"isAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"authAddress\",\"type\":\"address\"}],\"name\":\"removeAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferableDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProjectToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001842617263656c6f6e6120557262616e20546f6b656e202331000000000000000000000000000000000000000000000000000000000000000000000000000000054255542331000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d350dc838d0b68a94a193c6052ef4a8f42d6e1f12d3e3e9768c4a0c491447800"}]}