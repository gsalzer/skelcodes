{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external  returns (bool);\r\n    \r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    \r\n}\r\n\r\n// File: contracts\\SafeDecimalMath.sol\r\n\r\npragma solidity >= 0.4.0 < 0.7.0;\r\n\r\n// Libraries\r\n\r\n\r\n\r\n// https://docs.synthetix.io/contracts/SafeDecimalMath\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    /* Number of decimal places in the representations. */\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    /* The number representing 1.0. */\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    /* The number representing 1.0 for higher fidelity numbers. */\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    /**\r\n     * @return Provides an interface to UNIT.\r\n     */\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return Provides an interface to PRECISE_UNIT.\r\n     */\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\r\n     * decimals.\r\n     *\r\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\r\n     * so that product must be less than 2**256. As this is an integer division,\r\n     * the internal division always rounds down. This helps save on gas. Rounding\r\n     * is more expensive on gas.\r\n     */\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of the specified precision unit.\r\n     *\r\n     * @dev The operands should be in the form of a the specified unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a precise unit.\r\n     *\r\n     * @dev The operands should be in the precise unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a standard unit.\r\n     *\r\n     * @dev The operands should be in the standard unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is a high\r\n     * precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\r\n     * this is an integer division, the result is always rounded down.\r\n     * This helps save on gas. Rounding is more expensive on gas.\r\n     */\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Reintroduce the UNIT factor that will be divided out by y. */\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * decimal in the precision unit specified in the parameter.\r\n     *\r\n     * @dev y is divided after the product of x and the specified precision unit\r\n     * is evaluated, so the product of x and the specified precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * standard precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and the standard precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * high precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the high precision unit\r\n     * is evaluated, so the product of x and the high precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a standard decimal representation to a high precision one.\r\n     */\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a high precision decimal to a standard decimal representation.\r\n     */\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n}\r\n\r\n// File: contracts\\IEllaExchange.sol\r\n\r\npragma solidity >= 0.4.0 < 0.7.0;\r\n\r\n\r\n// Libraries\r\n\r\n\r\n/*\r\n * @author Ella Finance\r\n * @website https://ella.finance\r\n * @email support@ella.finance\r\n * Date: 18 Sept 2020\r\n */\r\n\r\ninterface IEllaExchange {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n    event Saved(uint _amount, bool _isMarket, address _contract,  uint _time, address _owner, uint _duration);\r\n    event Withdrew(uint _amount, address _owner, address _to, address _contract, bool _isMarket, uint _time);\r\n    event Bought(uint _price, uint _amount, uint _value, address _market, bool isMarket, uint time);\r\n        event Rewarded(\r\n        address provider, \r\n        uint share, \r\n        bool _isMarket, \r\n        uint time\r\n        );\r\n    event PriceFeedChange(address _newAddress, address _exchange);\r\n    function save(uint _amount, bool _isMarket, uint _duration) external;\r\n    function save1(bool _isMarket, uint _duration) payable external;\r\n     \r\n    function withdraw(uint _amount,  address _to, bool _isMarket) external;\r\n    function withdraw1(address payable _to, uint _amount, bool _isMarket) external;\r\n     \r\n    function accountBalance(address _owner) external view returns (uint _market, uint _token, uint _ethers);\r\n     \r\n    \r\n    function swap(uint _amount) external;\r\n    function swapBase(uint _amount) external;\r\n    function swapBase2(uint _amount) external;\r\n    function swap1(uint _amount) external;\r\n    function swapBase1() payable external;\r\n    function swap2() payable external;\r\n    \r\n}\r\n\r\n// File: contracts\\IPriceConsumer.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts\\TradingFees.sol\r\n\r\npragma solidity >=0.6.0;\r\ninterface FEES {\r\n      function getFees() external view returns (uint);\r\n      function getSystemCut() external view returns (uint);\r\n      function getFeesAddress() external view returns (address payable);\r\n}\r\n\r\n// File: contracts\\EllaExchange.sol\r\n\r\npragma solidity >= 0.4.0 < 0.7.0;\r\n\r\n\r\n\r\n\r\n/*\r\n * @author Ella Finance\r\n * @website https://ella.finance\r\n * @email support@ella.finance\r\n * Date: 18 Sept 2020\r\n */\r\n\r\ncontract EllaExchange is IEllaExchange {\r\n   IERC20 MarketAddress;\r\n   IERC20 TokenAddress;\r\n   FEES  TradingFees;\r\n   bool private isEthereum;\r\n   mapping (bool => mapping(address => bool)) alreadyAProvider;\r\n    struct Providers{\r\n      address payable provider;\r\n    }\r\n    \r\n   Providers[] providers;\r\n   mapping(bool => Providers[]) listOfProviders;\r\n   \r\n   mapping(bool => mapping(address => uint)) savings;\r\n   mapping(address => uint) etherSavings;\r\n   mapping(bool => uint) pool;\r\n   uint etherpool;\r\n   address secretary;\r\n   uint baseFees_generated;\r\n   uint fees_generated;\r\n   \r\n   mapping(address => mapping(bool => uint)) userWithdrawalDate;\r\n   mapping(address => mapping(bool => uint)) withdrawalDate;\r\n   AggregatorV3Interface internal priceFeed;\r\n    constructor(address _marketAddress, address _tokenAddress, bool _isEthereum,  address _priceAddress, address _fees) public {\r\n     MarketAddress = IERC20(_marketAddress);  \r\n     TokenAddress  = IERC20(_tokenAddress);\r\n     TradingFees = FEES(_fees);\r\n     isEthereum = _isEthereum;\r\n     priceFeed = AggregatorV3Interface(_priceAddress);\r\n     secretary = msg.sender;\r\n    }\r\n\r\n    function description() external view returns (string memory){\r\n    return priceFeed.description();\r\n    }\r\n    \r\n    function decimals() external view returns (uint8){\r\n     return priceFeed.decimals();\r\n    }\r\n    \r\n  \r\n  function version() external view returns (uint256){\r\n    return priceFeed.version();\r\n  }\r\n  \r\n  function tokenPrice() public view returns(uint){\r\n        (\r\n        uint80 roundId, \r\n        int256 answer, \r\n        uint256 startedAt, \r\n        uint256 updatedAt, \r\n        uint80 answeredInRound\r\n      ) = priceFeed.latestRoundData();\r\n     uint multiplier = 10**uint(SafeMath.sub(18, priceFeed.decimals()));\r\n     uint _price = uint(uint(answer).mul(multiplier));\r\n     return _price;\r\n  }\r\n  \r\n     /**\r\n     * Restrict access to Secretary role\r\n     */\r\n    modifier onlySecretary() {\r\n        require(secretary == msg.sender, \"Address is not Secretary of this exchange!\");\r\n        _;\r\n    }\r\n    \r\n    \r\n    function changePriceFeedAddress(address _new_address) public onlySecretary {\r\n       priceFeed = AggregatorV3Interface(_new_address);\r\n       \r\n       emit PriceFeedChange(_new_address, address(this));\r\n    }\r\n    \r\n    \r\n    function save(uint _amount, bool _isMarket, uint _duration) public override{\r\n        require(_amount > 0, \"Invalid amount\");\r\n        require(_duration > 0, \"Invalid duration\");\r\n        require(setDuration(_duration, _isMarket) > 0, \"Invalid duration\");\r\n        IERC20 iERC20 = (_isMarket ? MarketAddress : TokenAddress);\r\n        require(iERC20.allowance(msg.sender, address(this)) >= _amount, \"Insufficient allowance!\");\r\n        iERC20.transferFrom(msg.sender, address(this), _amount);\r\n        savings[_isMarket][msg.sender] = savings[_isMarket][msg.sender].add(_amount);\r\n        pool[_isMarket] = pool[_isMarket].add(_amount);\r\n          if(alreadyAProvider[_isMarket][msg.sender] == false){\r\n              alreadyAProvider[_isMarket][msg.sender] = true;\r\n                listOfProviders[_isMarket].push(Providers(msg.sender));\r\n            }\r\n        emit Saved(_amount, _isMarket, address(this), now, msg.sender, setDuration(_duration, _isMarket));\r\n    }\r\n    \r\n    function withdraw(uint _percentage, address _to, bool _isMarket) public override{\r\n        require(_percentage > 0, \"Invalid amount\");\r\n        require(isDue(_isMarket, msg.sender), \"Lock period is not over yet!\");\r\n        IERC20 iERC20 = (_isMarket ? MarketAddress : TokenAddress);\r\n        uint _withdrawable = withdrawable(_percentage, msg.sender, _isMarket, false);\r\n        uint _deduct = _percentage.multiplyDecimalRound(savings[_isMarket][msg.sender]);\r\n        savings[_isMarket][msg.sender] = _deduct >= savings[_isMarket][msg.sender] ? 0 : savings[_isMarket][msg.sender].sub(_deduct);\r\n        pool[_isMarket] = _withdrawable >= pool[_isMarket] ? 0 : pool[_isMarket].sub(_withdrawable);\r\n        require(iERC20.transfer(_to, _withdrawable), \"Withdrawal faild\");\r\n        emit Withdrew(_withdrawable,msg.sender, _to, address(this),_isMarket, now);\r\n    }\r\n    \r\n    function withdrawable(uint _percentage, address _user, bool _isMarket, bool _isForEther) public view returns(uint){\r\n        uint pool_balance = _isForEther ? etherpool : pool[_isMarket];\r\n        uint contract_balance = _isForEther ? address(this).balance : (_isMarket ? MarketAddress.balanceOf(address(this)) : TokenAddress.balanceOf(address(this)));\r\n        uint get_user_pool_share = _isForEther ? etherSavings[_user].divideDecimalRound(pool_balance) : savings[_isMarket][_user].divideDecimalRound(pool_balance);\r\n        uint user_due = get_user_pool_share.multiplyDecimalRound(contract_balance);\r\n        uint _widthdrawable = _percentage.multiplyDecimalRound(user_due);\r\n        \r\n        return _widthdrawable;\r\n    }\r\n    \r\n    function save1(bool _isMarket, uint _duration) payable public override{\r\n        require(msg.value > 0, \"Invalid amount\");\r\n        require(_duration > 0, \"Invalid duration\");\r\n        require(setDuration(_duration, _isMarket) > 0, \"Invalid duration\");\r\n        require(isEthereum, \"Can't save Ethereum in this contract\");\r\n        etherSavings[msg.sender] = etherSavings[msg.sender].add(msg.value);\r\n        etherpool = etherpool.add(msg.value);\r\n         if(alreadyAProvider[_isMarket][msg.sender] == false){\r\n              alreadyAProvider[_isMarket][msg.sender] = true;\r\n                listOfProviders[_isMarket].push(Providers(msg.sender));\r\n            }\r\n        emit Saved(msg.value, _isMarket, address(this), now, msg.sender, setDuration(_duration, _isMarket));\r\n    }\r\n    \r\n    function withdraw1(address payable _to, uint _percentage, bool _isMarket) public override{\r\n        require(_percentage > 0, \"Invalid amount\");\r\n        require(isDue(_isMarket, msg.sender), \"Lock period is not over yet!\");\r\n        uint _withdrawable = withdrawable(_percentage, msg.sender, _isMarket, true);\r\n        _to.transfer(_withdrawable);\r\n        uint _deduct = _percentage.multiplyDecimalRound(etherSavings[msg.sender]);\r\n        etherSavings[msg.sender] = _deduct >= etherSavings[msg.sender] ? 0 : etherSavings[msg.sender].sub(_deduct);\r\n        etherpool = _withdrawable >= etherpool ? 0 : etherpool.sub(_withdrawable);\r\n        emit Withdrew(_withdrawable,msg.sender, _to, address(this), _isMarket, now);\r\n    }\r\n    \r\n    function accountBalance(address _owner) public override view returns (uint _market, uint _token, uint _ethers){\r\n        return(savings[true][_owner], savings[false][_owner], etherSavings[_owner]);\r\n    }\r\n    \r\n    \r\n    \r\n    function swapBase(uint _amount) public override{\r\n        require(!isEthereum, \"Can't transact!\");\r\n        require(_amount > 0, \"Zero value provided!\");\r\n        require(MarketAddress.allowance(msg.sender, address(this)) >= _amount, \"Non-sufficient funds\");\r\n        require(MarketAddress.transferFrom(msg.sender, address(this), _amount), \"Fail to tranfer fund\");\r\n        uint _price = tokenPrice();\r\n        uint _amountDue = _amount.divideDecimal(_price);\r\n        uint _finalAmount = _amountDue.multiplyDecimal(10 ** 18);\r\n        require(TokenAddress.balanceOf(address(this)) >= _finalAmount, \"No fund to execute the trade\");\r\n        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\r\n        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\r\n        fees_generated = fees_generated.add(fee.sub(systemCut));\r\n        require(TokenAddress.transfer(msg.sender, _finalAmount.sub(fee)), \"Fail to tranfer fund\");\r\n        require(TokenAddress.transfer(TradingFees.getFeesAddress(), systemCut), \"Fail to tranfer fund\");\r\n      \r\n        emit Bought(_price, _finalAmount, _amount, address(this), true, now);\r\n       \r\n    }\r\n    \r\n    function swapBase2(uint _amount) public override{\r\n        require(isEthereum, \"Can not transact!\");\r\n        require(_amount > 0, \"Zero value provided!\");\r\n        require(MarketAddress.allowance(msg.sender, address(this)) >= _amount, \"Non-sufficient funds\");\r\n        require(MarketAddress.transferFrom(msg.sender, address(this), _amount), \"Fail to tranfer fund\");\r\n        address payable _reciever = msg.sender;\r\n        address payable _reciever2 = TradingFees.getFeesAddress();\r\n        uint _price = tokenPrice();\r\n        uint _amountDue = _amount.divideDecimal(_price);\r\n        uint _finalAmount = _amountDue.multiplyDecimal(10 ** 18);\r\n        \r\n        require(address(this).balance >= _finalAmount, \"No fund to execute the trade\");\r\n        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\r\n        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\r\n        fees_generated = fees_generated.add(fee.sub(systemCut));\r\n        \r\n        _reciever.transfer(_finalAmount.sub(fee));\r\n        _reciever2.transfer(systemCut);\r\n        emit Bought(_price, _finalAmount, _amount, address(this), true, now);\r\n       \r\n    }\r\n    \r\n    \r\n     // swap base(eth) for token\r\n     function swapBase1() payable public override{\r\n        require(isEthereum, \"Can't transact!\");\r\n        require(msg.value > 0, \"Zero value provided!\");\r\n        uint _price = tokenPrice();\r\n        uint _amount = msg.value;\r\n        uint _amountDue = _amount.divideDecimal(_price);\r\n        uint _finalAmount = _amountDue.multiplyDecimal(10 ** 18);\r\n        require(TokenAddress.balanceOf(address(this)) >= _finalAmount, \"No fund to execute the trade\");\r\n        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\r\n        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\r\n        fees_generated = fees_generated.add(fee.sub(systemCut));\r\n        require(TokenAddress.transfer(msg.sender, _finalAmount.sub(fee)), \"Fail to tranfer fund\");\r\n        require(TokenAddress.transfer(TradingFees.getFeesAddress(), systemCut), \"Fail to tranfer fund\");\r\n        emit Bought(_price, _finalAmount, _amount, address(this), true, now);\r\n        \r\n    }\r\n    \r\n    // (swap your token to base)\r\n    function swap(uint _amount) public override{\r\n        require(!isEthereum, \"Can't transact!\");\r\n        require(_amount > 0, \"Zero value provided!\");\r\n        require(TokenAddress.allowance(msg.sender, address(this)) >= _amount, \"Non-sufficient funds\");\r\n        require(TokenAddress.transferFrom(msg.sender, address(this), _amount), \"Fail to tranfer fund\");\r\n        uint _price = tokenPrice();\r\n        uint _amountDue = _amount.multiplyDecimal(_price);\r\n        uint _finalAmount = _amountDue.divideDecimal(10 ** 18);\r\n        require(MarketAddress.balanceOf(address(this)) >= _finalAmount, \"No fund to execute the trade\");\r\n        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\r\n        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\r\n        baseFees_generated = baseFees_generated.add(fee.sub(systemCut));\r\n        require(MarketAddress.transfer(msg.sender, _finalAmount.sub(fee)), \"Fail to tranfer fund\");\r\n        require(MarketAddress.transfer(TradingFees.getFeesAddress(), systemCut), \"Fail to tranfer fund\");\r\n        emit Bought(_price, _finalAmount, _amount, address(this), false, now);\r\n    }\r\n    \r\n    //only call if eth is the base (swap your token to base)\r\n    function swap1(uint _amount) public override{\r\n        require(isEthereum, \"Can't transact!\");\r\n        require(_amount > 0, \"Zero value\");\r\n        require(TokenAddress.allowance(msg.sender, address(this)) >= _amount, \"Non-sufficient funds\");\r\n        require(TokenAddress.transferFrom(msg.sender, address(this), _amount), \"Fail to tranfer fund\");\r\n        address payable _reciever = msg.sender;\r\n        address payable _reciever2 = TradingFees.getFeesAddress();\r\n        uint _price = tokenPrice();\r\n        uint _amountDue = _price.multiplyDecimal(_amount);\r\n        uint _finalAmount = _amountDue.divideDecimal(10 ** 18);\r\n        require(address(this).balance >= _finalAmount, \"No fund to execute the trade\");\r\n        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\r\n         uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\r\n        baseFees_generated = baseFees_generated.add(fee.sub(systemCut));\r\n        _reciever.transfer(_finalAmount.sub(fee));\r\n        _reciever2.transfer(systemCut);\r\n        emit Bought(_price, _finalAmount, _amount, address(this), false, now);\r\n    }\r\n    \r\n      // When eth is the token\r\n      function swap2() payable public override{\r\n        require(isEthereum, \"Can't transact!\");\r\n        require(msg.value > 0, \"Zero value provided!\");\r\n        uint _price = tokenPrice();\r\n        uint _amount = msg.value;\r\n        uint _amountDue = _price.multiplyDecimal(_amount);\r\n        uint _finalAmount = _amountDue.divideDecimal(10 ** 18);\r\n        require(MarketAddress.balanceOf(address(this)) >= _finalAmount, \"No fund to execute the trade\");\r\n        uint fee = TradingFees.getFees().multiplyDecimal(_finalAmount);\r\n        uint systemCut = TradingFees.getSystemCut().multiplyDecimal(fee);\r\n        baseFees_generated = baseFees_generated.add(fee.sub(systemCut));\r\n        require(MarketAddress.transfer(msg.sender, _finalAmount.sub(fee)), \"Fail to tranfer fund\");\r\n        require(MarketAddress.transfer(TradingFees.getFeesAddress(), systemCut), \"Fail to tranfer fund\");\r\n        emit Bought(_price, _finalAmount, _amount, address(this), false, now);\r\n      }\r\n      \r\n      function setDuration(uint _duration, bool _isbase) internal returns(uint){\r\n          userWithdrawalDate[msg.sender][_isbase] == 0 ?  userWithdrawalDate[msg.sender][_isbase] = _duration : userWithdrawalDate[msg.sender][_isbase];\r\n          if(_duration == 30){\r\n              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(30 days);\r\n              return block.timestamp.add(30 days);\r\n          }else if(_duration == 60){\r\n              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(60 days);\r\n              return block.timestamp.add(60 days);\r\n          }else if(_duration == 90){\r\n              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(90 days);\r\n              return block.timestamp.add(90 days);\r\n          }else if(_duration == 365){\r\n              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(365 days);\r\n              return block.timestamp.add(365 days);\r\n          }else if(_duration == 140000){\r\n              withdrawalDate[msg.sender][_isbase] = block.timestamp.add(140000 days);\r\n              return block.timestamp.add(140000 days);\r\n          }else{\r\n             return 0;\r\n          }\r\n      }\r\n    function isDue(bool _isbase, address _user) public view returns (bool) {\r\n        if (block.timestamp >= withdrawalDate[_user][_isbase])\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    function shareFees(bool _isEth, bool _isMarket) public {\r\n           uint feesShared;\r\n           for (uint256 i = 0; i < listOfProviders[_isMarket].length; i++) {\r\n            address payable _provider = listOfProviders[_isMarket][i].provider;\r\n            uint userSavings =  _isEth ? etherSavings[_provider] : savings[_isMarket][_provider];\r\n            uint _pool = _isEth ? etherpool : pool[_isMarket];\r\n            uint total_fees_generated = _isMarket ? baseFees_generated : fees_generated;\r\n            uint share = userSavings.divideDecimal(_pool);\r\n            uint due = share.multiplyDecimal(total_fees_generated);\r\n            feesShared = feesShared.add(due);\r\n            require(total_fees_generated >= due, \"No fees left for distribution\");\r\n            _isEth ? _provider.transfer(due) : _isMarket  ? require(MarketAddress.transfer(_provider, due), \"Fail to tranfer fund\") : require(TokenAddress.transfer(_provider, due), \"Fail to tranfer fund\"); \r\n           \r\n           \r\n            emit Rewarded(_provider, due, _isMarket, now);\r\n           } \r\n           \r\n            _isMarket ? baseFees_generated = baseFees_generated.sub(feesShared) : fees_generated = fees_generated.sub(feesShared);\r\n        \r\n    }\r\n    \r\n    \r\n}\r\n\r\n// File: contracts\\IEllaExchangeService.sol\r\n\r\npragma solidity >= 0.4.0 < 0.7.0;\r\n\r\n\r\n\r\n\r\n/*\r\n * @author Ella Finance\r\n * @website https://ella.finance\r\n * @email support@ella.finance\r\n * Date: 18 Sept 2020\r\n */\r\n\r\ninterface IEllaExchangeService {\r\n    using SafeMath for uint;\r\n      event RequestCreated(\r\n      address _creator,\r\n      uint _requestType,\r\n      uint _changeTo,\r\n      string _reason,\r\n      uint _positiveVote,\r\n      uint _negativeVote,\r\n      uint _powerUsed,\r\n      bool _stale,\r\n      uint _votingPeriod,\r\n      uint _requestID\r\n      );\r\n    event ExchangeCreated(address _exchange, string _market, address _base_address, address _token_address );\r\n    function createRequest(uint _requestType, uint _changeTo, string calldata _reason) external;\r\n    function createExchange(address _marketAddress, address _tokenAddress, bool _isEthereum, address _priceAddress, string calldata _market) external returns (address _exchange);\r\n      event VotedForRequest(\r\n        address _voter,\r\n        uint _requestID,\r\n        uint _positiveVote,\r\n        uint _negativeVote,\r\n        bool _accept\r\n    );\r\n    \r\n      event Refunded(uint amount, address voterAddress, uint _loanID, uint time);\r\n      event ApproveRequest(uint _requestID, bool _state, address _initiator);  \r\n      function validateRequest(uint _requestID) external;\r\n      function governanceVote(uint _requestType, uint _requestID, uint _votePower, bool _accept) external;\r\n    \r\n}\r\n\r\n// File: contracts\\EllaExchangeService.sol\r\n\r\npragma solidity >=0.4.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n/*\r\n * @author Ella Finance\r\n * @website https://ella.finance\r\n * @email support@ella.finance\r\n * Date: 18 Sept 2020\r\n */\r\n\r\ncontract EllaExchangeService is IEllaExchangeService {\r\n    mapping(bytes => bool) isListed;\r\n     struct Requests{\r\n      address payable creator;\r\n      uint requestType;\r\n      uint changeTo;\r\n      string reason;\r\n      uint positiveVote;\r\n      uint negativeVote;\r\n      uint powerUsed;\r\n      \r\n      bool stale;\r\n      uint votingPeriod;\r\n    }\r\n      struct Votters{\r\n      address payable voter;\r\n    }\r\n     Votters[] voters;\r\n    \r\n    Requests[] requests;\r\n    mapping(uint => Requests[]) listOfrequests;\r\n    mapping(uint => mapping(address => uint)) requestPower;\r\n    mapping(uint => bool) activeRequest;\r\n    uint private requestCreationPower;\r\n    mapping(uint => mapping(address => bool)) manageRequestVoters;\r\n    mapping(uint => Votters[]) activeRequestVoters;\r\n    uint trading_fee;\r\n    address payable trading_fee_address;\r\n    uint system_cut;\r\n    IERC20 ELLA;\r\n     /**\r\n     * Construct a new exchange Service\r\n     * @param _ELLA address of the ELLA ERC20 token\r\n     */\r\nconstructor(address _ELLA, uint _initial_fees, address payable _trading_fee_address, uint _system_cut, uint _requestCreationPower) public {\r\n    ELLA = IERC20(_ELLA);\r\n    trading_fee = _initial_fees;\r\n    trading_fee_address = _trading_fee_address;\r\n    system_cut = _system_cut;\r\n    requestCreationPower = _requestCreationPower;\r\n    }\r\n\r\n\r\nfunction createExchange(\r\n        address _marketAddress, \r\n        address _tokenAddress, \r\n        bool _isEthereum,\r\n        address _priceAddress,\r\n        string memory _market\r\n        \r\n    ) public override returns (address _exchange) {\r\n      bytes memory market = bytes(_toLower(_market));\r\n      require(!isListed[market], \"Market already listed\");\r\n      EllaExchange exchange = new EllaExchange(address(_marketAddress), address(_tokenAddress), _isEthereum, address(_priceAddress), address(this));\r\n      _exchange = address(exchange);\r\n      isListed[market] = true;\r\n      emit ExchangeCreated(_exchange, _market, _marketAddress, _tokenAddress);\r\n    }\r\n    \r\n    \r\nfunction getFees() public view returns(uint) {\r\n    return trading_fee;\r\n}\r\n\r\nfunction getSystemCut() public view returns(uint) {\r\n    return system_cut;\r\n}\r\n\r\nfunction getFeesAddress() public view returns(address) {\r\n    return trading_fee_address;\r\n}\r\n\r\n\r\n\r\n/// Request\r\nfunction createRequest(uint _requestType, uint _changeTo, string memory _reason) public override{\r\n    require(_requestType == 0 || _requestType == 1 || _requestType == 2,  \"Invalid request type!\");\r\n    require(!activeRequest[_requestType], \"Another request is still active\");\r\n   \r\n    require(ELLA.allowance(msg.sender, address(this)) >= requestCreationPower, \"Insufficient ELLA allowance for vote!\");\r\n    ELLA.transferFrom(msg.sender, address(this), requestCreationPower);\r\n    Requests memory _request = Requests({\r\n      creator: msg.sender,\r\n      requestType: _requestType,\r\n      changeTo: _changeTo,\r\n      reason: _reason,\r\n      positiveVote: 0,\r\n      negativeVote: 0,\r\n      powerUsed: requestCreationPower,\r\n      \r\n      stale: false,\r\n      votingPeriod: block.timestamp.add(4 days)\r\n    });\r\n    \r\n    requests.push(_request);\r\n    uint256 newRequestID = requests.length - 1;\r\n     Requests memory request = requests[newRequestID];\r\n    emit RequestCreated(\r\n      request.creator,\r\n      request.requestType,\r\n      request.changeTo,\r\n      request.reason,\r\n      request.positiveVote,\r\n      request.negativeVote,\r\n      request.powerUsed,\r\n      request.stale,\r\n      request.votingPeriod,\r\n      newRequestID\r\n      );\r\n}\r\n\r\n\r\nfunction governanceVote(uint _requestType, uint _requestID, uint _votePower, bool _accept) public override{\r\n    Requests storage request = requests[_requestID];\r\n    require(request.votingPeriod >= block.timestamp, \"Voting period ended\");\r\n    require(_votePower > 0, \"Power must be greater than zero!\");\r\n    require(_requestType == 0 || _requestType == 1 || _requestType == 2,  \"Invalid request type!\");\r\n   \r\n    require(ELLA.allowance(msg.sender, address(this)) >= _votePower, \"Insufficient ELLA allowance for vote!\");\r\n    ELLA.transferFrom(msg.sender, address(this), _votePower);\r\n    requestPower[_requestType][msg.sender] = requestPower[_requestType][msg.sender].add(_votePower);\r\n     \r\n     \r\n       if(_accept){\r\n            request.positiveVote = request.positiveVote.add(_votePower);\r\n        }else{\r\n            request.negativeVote = request.negativeVote.add(_votePower);  \r\n        }\r\n      \r\n           \r\n            if(manageRequestVoters[_requestID][msg.sender] == false){\r\n                manageRequestVoters[_requestID][msg.sender] = true;\r\n                activeRequestVoters[_requestID].push(Votters(msg.sender));\r\n            }\r\n       \r\n          \r\n    \r\n    emit VotedForRequest(msg.sender, _requestID, request.positiveVote, request.negativeVote, _accept);\r\n    \r\n}\r\n\r\nfunction validateRequest(uint _requestID) public override{\r\n    Requests storage request = requests[_requestID];\r\n    //require(block.timestamp >= request.votingPeriod, \"Voting period still active\");\r\n    require(!request.stale, \"This has already been validated\");\r\n   \r\n   \r\n    if(request.requestType == 0){\r\n        if(request.positiveVote >= request.negativeVote){\r\n            trading_fee = request.changeTo;\r\n           \r\n            \r\n        }\r\n        \r\n    }else if(request.requestType == 1){\r\n        if(request.positiveVote >= request.negativeVote){\r\n            requestCreationPower = request.changeTo;\r\n           \r\n            \r\n            \r\n        }\r\n        \r\n    }else if(request.requestType == 2){\r\n        if(request.positiveVote >= request.negativeVote){\r\n            system_cut = request.changeTo;\r\n            \r\n            \r\n            \r\n        }\r\n        \r\n    }\r\n    else if(request.requestType == 3){\r\n        if(request.positiveVote >= request.negativeVote){\r\n            trading_fee_address = request.creator;\r\n            \r\n            \r\n            \r\n        }\r\n        \r\n    }\r\n   \r\n    request.stale = true;\r\n    \r\n   \r\n    \r\n    for (uint256 i = 0; i < activeRequestVoters[_requestID].length; i++) {\r\n           address voterAddress = activeRequestVoters[_requestID][i].voter;\r\n           uint amount = requestPower[request.requestType][voterAddress];\r\n           require(ELLA.transfer(voterAddress, amount), \"Fail to refund voter\");\r\n           requestPower[request.requestType][voterAddress] = 0;\r\n           emit Refunded(amount, voterAddress, _requestID, now);\r\n    }\r\n    \r\n     require(ELLA.transfer(request.creator, request.powerUsed), \"Fail to transfer fund\");\r\n    emit ApproveRequest(_requestID, request.positiveVote >= request.negativeVote, msg.sender);\r\n}\r\n\r\n\r\nfunction _toLower(string memory str) internal pure returns (string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        bytes memory bLower = new bytes(bStr.length);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            // Uppercase character...\r\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\r\n                // So we add 32 to make it lowercase\r\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\r\n            } else {\r\n                bLower[i] = bStr[i];\r\n            }\r\n        }\r\n        return string(bLower);\r\n    }\r\n    \r\n\r\n }","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ELLA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initial_fees\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_trading_fee_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_system_cut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestCreationPower\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"}],\"name\":\"ApproveRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_market\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_base_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token_address\",\"type\":\"address\"}],\"name\":\"ExchangeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_changeTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positiveVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_negativeVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_powerUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_stale\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"}],\"name\":\"RequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positiveVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_negativeVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"VotedForRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isEthereum\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_priceAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_market\",\"type\":\"string\"}],\"name\":\"createExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_changeTo\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votePower\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"governanceVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"}],\"name\":\"validateRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EllaExchangeService","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000bc7127b00f232de924f683f9340e01a9650d533000000000000000000000000000000000000000000000000000aa87bee5380000000000000000000000000004b4ebac165db5565d0678c5a2b821a24c76576a600000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000000000000000000000002a5a058fc295ed000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dafb146eec90e7d1b70bc998424e89cef555e8db69397af8df2c189baa6bbc0f"}]}