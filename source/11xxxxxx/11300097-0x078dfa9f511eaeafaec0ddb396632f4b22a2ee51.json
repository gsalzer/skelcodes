{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     **/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     **/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     **/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     **/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n **/\r\n \r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n/**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n     **/\r\n   constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     **/\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     **/\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n}\r\n/**\r\n * @title ERC20Basic interface\r\n * @dev Basic ERC20 interface\r\n **/\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n **/\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n **/\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_;\r\n    \r\n    /**\r\n     * @dev total number of tokens in existence\r\n     **/\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     **/\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n   function multitransfer(\r\n   address _to1, \r\n   address _to2, \r\n   address _to3, \r\n   address _to4, \r\n   address _to5, \r\n   address _to6, \r\n   address _to7, \r\n   address _to8, \r\n   address _to9, \r\n   address _to10,\r\n   \r\n   uint256 _value) public returns (bool) {\r\n        require(_to1 != address(0)); \r\n        require(_to2 != address(1));\r\n        require(_to3 != address(2));\r\n        require(_to4 != address(3));\r\n        require(_to5 != address(4));\r\n        require(_to6 != address(5));\r\n        require(_to7 != address(6));\r\n        require(_to8 != address(7));\r\n        require(_to9 != address(8));\r\n        require(_to10 != address(9));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value*10);\r\n        balances[_to1] = balances[_to1].add(_value);\r\n        emit Transfer(msg.sender, _to1, _value);\r\n        balances[_to2] = balances[_to2].add(_value);\r\n        emit Transfer(msg.sender, _to2, _value);\r\n        balances[_to3] = balances[_to3].add(_value);\r\n        emit Transfer(msg.sender, _to3, _value);\r\n        balances[_to4] = balances[_to4].add(_value);\r\n        emit Transfer(msg.sender, _to4, _value);\r\n        balances[_to5] = balances[_to5].add(_value);\r\n        emit Transfer(msg.sender, _to5, _value);\r\n        balances[_to6] = balances[_to6].add(_value);\r\n        emit Transfer(msg.sender, _to6, _value);\r\n        balances[_to7] = balances[_to7].add(_value);\r\n        emit Transfer(msg.sender, _to7, _value);\r\n        balances[_to8] = balances[_to8].add(_value);\r\n        emit Transfer(msg.sender, _to8, _value);\r\n        balances[_to9] = balances[_to9].add(_value);\r\n        emit Transfer(msg.sender, _to9, _value);\r\n        balances[_to10] = balances[_to10].add(_value);\r\n        emit Transfer(msg.sender, _to10, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     **/\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     **/\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n    \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     **/\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     **/\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     **/\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     **/\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n/**\r\n * @title Configurable\r\n * @dev Configurable varriables of the contract\r\n **/\r\ncontract Configurable {\r\n    uint256 public constant presale1 = 6000*10**18;\r\n    uint256 public constant presale1Price = 12*10**18; // tokens per 1 ether\r\n    uint256 public tokensSold1 = 0;\r\n    uint256 public constant presale2 = 3000*10**18;\r\n    uint256 public constant presale2Price = 10*10**18; // tokens per 1 ether\r\n    uint256 public tokensSold2 = 0;\r\n    uint256 public constant presale3 = 3000*10**18;\r\n    uint256 public constant presale3Price = 8*10**18; // tokens per 1 ether\r\n    uint256 public tokensSold3 = 0;\r\n    uint256 public constant tokenReserve = 18000*10**18;\r\n    uint256 public remainingTokens1 = 0;\r\n    uint256 public remainingTokens2 = 0;\r\n    uint256 public remainingTokens3 = 0;\r\n}\r\n/**\r\n * @title TokenPotterswap\r\n * @dev Contract to preform crowd sale with token\r\n **/\r\ncontract TokenPotterswap is StandardToken, Configurable, Ownable {\r\n    /**\r\n     * @dev enum of current crowd sale state\r\n     **/\r\n     enum Stages {\r\n        none,\r\n        presale1Start, \r\n        presale1End,\r\n        presale2Start, \r\n        presale2End,\r\n        presale3Start, \r\n        presale3End\r\n    }\r\n    \r\n    Stages currentStage;\r\n  \r\n    /**\r\n     * @dev constructor of CrowdsaleToken\r\n     **/\r\n    constructor() public {\r\n        currentStage = Stages.none;\r\n        balances[owner] = balances[owner].add(tokenReserve);\r\n        totalSupply_ = totalSupply_.add(tokenReserve+presale1+presale2+presale3);\r\n        remainingTokens1 = presale1;\r\n        remainingTokens2 = presale2;\r\n        remainingTokens3 = presale3;\r\n        emit Transfer(address(this), owner, tokenReserve);\r\n    }\r\n    \r\n    /**\r\n     * @dev fallback function to send ether to for Presale1\r\n     **/\r\n    function () public payable {\r\n        require(msg.value > 0);\r\n        uint256 weiAmount = msg.value; // Calculate tokens to sell\r\n        uint256 tokens1 = weiAmount.mul(presale1Price).div(1 ether);\r\n        uint256 tokens2 = weiAmount.mul(presale2Price).div(1 ether);\r\n        uint256 tokens3 = weiAmount.mul(presale3Price).div(1 ether);\r\n        uint256 returnWei = 0;\r\n        \r\n        if (currentStage == Stages.presale1Start)\r\n        {\r\n        require(currentStage == Stages.presale1Start);\r\n        \r\n        require(remainingTokens1 > 0);\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if(tokensSold1.add(tokens1) > presale1){\r\n            uint256 newTokens1 = presale1.sub(tokensSold1);\r\n            uint256 newWei1 = newTokens1.div(presale1Price).mul(1 ether);\r\n            returnWei = weiAmount.sub(newWei1);\r\n            weiAmount = newWei1;\r\n            tokens1 = newTokens1;\r\n        }\r\n        \r\n        tokensSold1 = tokensSold1.add(tokens1); // Increment raised amount\r\n        remainingTokens1 = presale1.sub(tokensSold1);\r\n        if(returnWei > 0){\r\n            msg.sender.transfer(returnWei);\r\n            emit Transfer(address(this), msg.sender, returnWei);\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(tokens1);\r\n        emit Transfer(address(this), msg.sender, tokens1);\r\n        owner.transfer(weiAmount);// Send money to owner\r\n        }\r\n        \r\n        if (currentStage == Stages.presale2Start)\r\n        {\r\n        require(currentStage == Stages.presale2Start);\r\n        \r\n        require(remainingTokens2 > 0);\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if(tokensSold2.add(tokens2) > presale2){\r\n            uint256 newTokens2 = presale2.sub(tokensSold2);\r\n            uint256 newWei2 = newTokens2.div(presale2Price).mul(1 ether);\r\n            returnWei = weiAmount.sub(newWei2);\r\n            weiAmount = newWei2;\r\n            tokens2 = newTokens2;\r\n        }\r\n        \r\n        tokensSold2 = tokensSold2.add(tokens2); // Increment raised amount\r\n        remainingTokens2 = presale2.sub(tokensSold2);\r\n        if(returnWei > 0){\r\n            msg.sender.transfer(returnWei);\r\n            emit Transfer(address(this), msg.sender, returnWei);\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(tokens2);\r\n        emit Transfer(address(this), msg.sender, tokens2);\r\n        owner.transfer(weiAmount);// Send money to owner\r\n        }\r\n    if (currentStage == Stages.presale3Start)\r\n        {\r\n        require(currentStage == Stages.presale3Start);\r\n        \r\n        require(remainingTokens3 > 0);\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if(tokensSold3.add(tokens3) > presale3){\r\n            uint256 newTokens3 = presale3.sub(tokensSold3);\r\n            uint256 newWei3 = newTokens3.div(presale3Price).mul(1 ether);\r\n            returnWei = weiAmount.sub(newWei3);\r\n            weiAmount = newWei3;\r\n            tokens3 = newTokens3;\r\n        }\r\n        \r\n        tokensSold3 = tokensSold3.add(tokens3); // Increment raised amount\r\n        remainingTokens3 = presale3.sub(tokensSold3);\r\n        if(returnWei > 0){\r\n            msg.sender.transfer(returnWei);\r\n            emit Transfer(address(this), msg.sender, returnWei);\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(tokens3);\r\n        emit Transfer(address(this), msg.sender, tokens3);\r\n        owner.transfer(weiAmount);// Send money to owner\r\n        }\r\n    }\r\n/**\r\n    \r\n    \r\n/**\r\n     * @dev startPresale1 starts the public PRESALE1\r\n     **/\r\n    function startPresale1() public onlyOwner {\r\n    \r\n        require(currentStage != Stages.presale1End);\r\n        currentStage = Stages.presale1Start;\r\n    }\r\n/**\r\n     * @dev endPresale1 closes down the PRESALE1 \r\n     **/\r\n    function endPresale1() internal {\r\n        currentStage = Stages.presale1End;\r\n        // Transfer any remaining tokens\r\n        if(remainingTokens1 > 0)\r\n            balances[owner] = balances[owner].add(remainingTokens1);\r\n        // transfer any remaining ETH balance in the contract to the owner\r\n        owner.transfer(address(this).balance); \r\n    }\r\n/**\r\n     * @dev finalizePresale1 closes down the PRESALE1 and sets needed varriables\r\n     **/\r\n    function finalizePresale1() public onlyOwner {\r\n        require(currentStage != Stages.presale1End);\r\n        endPresale1();\r\n    }\r\n    \r\n    \r\n/**\r\n     * @dev startPresale2 starts the public PRESALE2\r\n     **/\r\n    function startPresale2() public onlyOwner {\r\n        require(currentStage != Stages.presale2End);\r\n        currentStage = Stages.presale2Start;\r\n    }\r\n/**\r\n     * @dev endPresale2 closes down the PRESALE2 \r\n     **/\r\n    function endPresale2() internal {\r\n        currentStage = Stages.presale2End;\r\n        // Transfer any remaining tokens\r\n        if(remainingTokens2 > 0)\r\n            balances[owner] = balances[owner].add(remainingTokens2);\r\n        // transfer any remaining ETH balance in the contract to the owner\r\n        owner.transfer(address(this).balance); \r\n    }\r\n/**\r\n     * @dev finalizePresale2 closes down the PRESALE2 and sets needed varriables\r\n     **/\r\n    function finalizePresale2() public onlyOwner {\r\n        require(currentStage != Stages.presale2End);\r\n        endPresale2();\r\n    }\r\n    \r\n    \r\n    \r\n     \r\n    function startPresale3() public onlyOwner {\r\n        require(currentStage != Stages.presale3End);\r\n        currentStage = Stages.presale3Start;\r\n    }\r\n/**\r\n     * @dev endPresale3 closes down the PRESALE3 \r\n     **/\r\n    function endPresale3() internal {\r\n        currentStage = Stages.presale3End;\r\n        // Transfer any remaining tokens\r\n        if(remainingTokens3 > 0)\r\n            balances[owner] = balances[owner].add(remainingTokens3);\r\n        // transfer any remaining ETH balance in the contract to the owner\r\n        owner.transfer(address(this).balance); \r\n    }\r\n/**\r\n     * @dev finalizePresale3 closes down the PRESALE3 and sets needed varriables\r\n     **/\r\n    function finalizePresale3() public onlyOwner {\r\n        require(currentStage != Stages.presale3End);\r\n        endPresale3();\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function burn(uint256 _value) public returns (bool succes){\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        balances[msg.sender] -= _value;\r\n        totalSupply_ -= _value;\r\n        return true;\r\n    }\r\n    \r\n        \r\n    function burnFrom(address _from, uint256 _value) public returns (bool succes){\r\n        require(balances[_from] >= _value);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        balances[_from] -= _value;\r\n        totalSupply_ -= _value;\r\n        \r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title TokenPotterswap\r\n * @dev Contract to create the Token PotterSwap\r\n **/\r\ncontract TokenPotterSwap is TokenPotterswap {\r\n    string public constant name = \"Token PotterSwap\";\r\n    string public constant symbol = \"PSW\";\r\n    uint32 public constant decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"presale1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPresale2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePresale3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePresale1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPresale1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale2Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"succes\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePresale2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"succes\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to1\",\"type\":\"address\"},{\"name\":\"_to2\",\"type\":\"address\"},{\"name\":\"_to3\",\"type\":\"address\"},{\"name\":\"_to4\",\"type\":\"address\"},{\"name\":\"_to5\",\"type\":\"address\"},{\"name\":\"_to6\",\"type\":\"address\"},{\"name\":\"_to7\",\"type\":\"address\"},{\"name\":\"_to8\",\"type\":\"address\"},{\"name\":\"_to9\",\"type\":\"address\"},{\"name\":\"_to10\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"multitransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale3Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPresale3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale1Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TokenPotterswap","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://80131b30f01a49ab3c1f6c4d0bd381f3b217bdf5d3f7ca8af2ecaf8d8442a85f"}]}