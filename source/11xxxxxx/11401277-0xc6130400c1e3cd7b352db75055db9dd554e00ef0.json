{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-15\r\n*/\r\n\r\n// File: contracts/interfaces/IDXswapFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDXswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\r\n    function feeTo() external view returns (address);\r\n    function protocolFeeDenominator() external view returns (uint8);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setProtocolFee(uint8 _protocolFee) external;\r\n    function setSwapFee(address pair, uint32 swapFee) external;\r\n}\r\n\r\n// File: contracts/interfaces/IDXswapPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDXswapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function swapFee() external view returns (uint32);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    function setSwapFee(uint32) external;\r\n}\r\n\r\n// File: contracts/interfaces/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\n// File: contracts/libraries/TransferHelper.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call.value(value)(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// File: contracts/DXswapFeeReceiver.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DXswapFeeReceiver {\r\n    using SafeMath for uint;\r\n\r\n    address public owner;\r\n    IDXswapFactory public factory;\r\n    address public WETH;\r\n    address public ethReceiver;\r\n    address public fallbackReceiver;\r\n\r\n    constructor(\r\n        address _owner, address _factory, address _WETH, address _ethReceiver, address _fallbackReceiver\r\n    ) public {\r\n        owner = _owner;\r\n        factory = IDXswapFactory(_factory);\r\n        WETH = _WETH;\r\n        ethReceiver = _ethReceiver;\r\n        fallbackReceiver = _fallbackReceiver;\r\n    }\r\n    \r\n    function() external payable {}\r\n\r\n    function transferOwnership(address newOwner) external {\r\n        require(msg.sender == owner, 'DXswapFeeReceiver: FORBIDDEN');\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function changeReceivers(address _ethReceiver, address _fallbackReceiver) external {\r\n        require(msg.sender == owner, 'DXswapFeeReceiver: FORBIDDEN');\r\n        ethReceiver = _ethReceiver;\r\n        fallbackReceiver = _fallbackReceiver;\r\n    }\r\n    \r\n    // Returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'DXswapFeeReceiver: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'DXswapFeeReceiver: ZERO_ADDRESS');\r\n    }\r\n    \r\n    // Helper function to know if an address is a contract, extcodesize returns the size of the code of a smart\r\n    //  contract in a specific address\r\n    function isContract(address addr) internal returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    // Calculates the CREATE2 address for a pair without making any external calls\r\n    // Taken from DXswapLibrary, removed the factory parameter\r\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n            hex'ff',\r\n            factory,\r\n            keccak256(abi.encodePacked(token0, token1)),\r\n            hex'd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776' // init code hash\r\n        ))));\r\n    }\r\n    \r\n    // Done with code form DXswapRouter and DXswapLibrary, removed the deadline argument\r\n    function _swapTokensForETH(uint amountIn, address fromToken)\r\n        internal\r\n    {\r\n        IDXswapPair pairToUse = IDXswapPair(pairFor(fromToken, WETH));\r\n        \r\n        (uint reserve0, uint reserve1,) = pairToUse.getReserves();\r\n        (uint reserveIn, uint reserveOut) = fromToken < WETH ? (reserve0, reserve1) : (reserve1, reserve0);\r\n\r\n        require(reserveIn > 0 && reserveOut > 0, 'DXswapFeeReceiver: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(uint(10000).sub(pairToUse.swapFee()));\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        uint amountOut = numerator / denominator;\r\n        \r\n        TransferHelper.safeTransfer(\r\n            fromToken, address(pairToUse), amountIn\r\n        );\r\n        \r\n        (uint amount0Out, uint amount1Out) = fromToken < WETH ? (uint(0), amountOut) : (amountOut, uint(0));\r\n        \r\n        pairToUse.swap(\r\n            amount0Out, amount1Out, address(this), new bytes(0)\r\n        );\r\n        \r\n        IWETH(WETH).withdraw(amountOut);\r\n        TransferHelper.safeTransferETH(ethReceiver, amountOut);\r\n    }\r\n\r\n    // Transfer to the owner address the token converted into ETH if possible, if not just transfer the token.\r\n    function _takeETHorToken(address token, uint amount) internal {\r\n      if (token == WETH) {\r\n        // If it is WETH, transfer directly to ETH receiver\r\n        IWETH(WETH).withdraw(amount);\r\n        TransferHelper.safeTransferETH(ethReceiver, amount);\r\n      } else if (isContract(pairFor(token, WETH))) {\r\n        // If it is not WETH and there is a direct path to WETH, swap and transfer WETH to ETH receiver\r\n        _swapTokensForETH(amount, token);\r\n      } else {\r\n        // If it is not WETH and there is not a direct path to WETH, transfer tokens directly to fallback receiver\r\n        TransferHelper.safeTransfer(token, fallbackReceiver, amount);\r\n      }\r\n    }\r\n    \r\n    // Take what was charged as protocol fee from the DXswap pair liquidity\r\n    function takeProtocolFee(IDXswapPair[] calldata pairs) external {\r\n        for (uint i = 0; i < pairs.length; i++) {\r\n            address token0 = pairs[i].token0();\r\n            address token1 = pairs[i].token1();\r\n            pairs[i].transfer(address(pairs[i]), pairs[i].balanceOf(address(this)));\r\n            (uint amount0, uint amount1) = pairs[i].burn(address(this));\r\n            if (amount0 > 0)\r\n                _takeETHorToken(token0, amount0);\r\n            if (amount1 > 0)\r\n                _takeETHorToken(token1, amount1);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackReceiver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackReceiver\",\"type\":\"address\"}],\"name\":\"changeReceivers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IDXswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fallbackReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IDXswapPair[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"name\":\"takeProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DXswapFeeReceiver","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000008eec580ad41e9994599bad7d2a74a9874a2852c000000000000000000000000d34971bab6e5e356fd250715f5de0492bb070452000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a1d65e8fb6e87b60feccbc582f7f97804b72552100000000000000000000000008eec580ad41e9994599bad7d2a74a9874a2852c","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4488a5c6d24546776395f2d8e5b107b99bb124fd814a71281fc10579ac693688"}]}