{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction transfer(address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface OLDIERC20 {\r\n    function transfer(address recipient, uint amount) external;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ninterface Mtoken{\r\n\tfunction calcPoolValue() external view returns (uint);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\tfunction getReserves() external view returns (uint reserve0, uint reserve1, uint blockTimestampLast);\r\n}\r\n\r\ninterface AggregatorInterface {\r\n\tfunction latestAnswer() external view returns (uint);\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n\t\tuint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address payable private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\t\r\n\tfunction inCaseWrongTokenTransfer(address _TokenAddr) onlyOwner external {\r\n\t\trequire(_TokenAddr != address(this), \"MultiFinance: invalid address\");\r\n        uint qty = IERC20(_TokenAddr).balanceOf(address(this));\r\n        IERC20(_TokenAddr).transfer(_msgSender(), qty);\r\n    }\r\n\t\r\n\tfunction inCaseWrongTokenTransfer(address _tokenAddr,uint _type) onlyOwner external {\r\n\t\trequire(_tokenAddr != address(this), \"MFI: invalid address\");\r\n        uint qty = IERC20(_tokenAddr).balanceOf(address(this));\r\n\t\tif(_type == 1)\r\n\t\t\tIERC20(_tokenAddr).transfer(_msgSender(), qty);\r\n\t\telse\r\n\t\t\tOLDIERC20(_tokenAddr).transfer(_msgSender(), qty);\r\n    }\r\n\t\r\n    function inCaseWrongEthTransfer() onlyOwner external{\r\n        (bool result, ) = _msgSender().call{value:address(this).balance}(\"\");\r\n        require(result, \"MultiFinance: ETH Transfer Failed\");\r\n    }\r\n\t\r\n}\r\n\r\n\r\n\r\ncontract MultyFinanceDefi is Ownable {\r\n\t using SafeMath for uint;\r\n\tusing Address for address;\r\n\tusing SafeMath for uint;\r\n\taddress private _refPool;\r\n\tstring private _name;\r\n\t\r\n\tmapping (address => address) private _referral;\r\n\tmapping (address => uint) private _activeVault;\r\n\tmapping (address => uint) private _exp;\r\n\tmapping (address => uint) private _reftotal;\r\n\taddress [] private _vault;\r\n\taddress public ethprice;\r\n\taddress public mfipair;\r\n\t\r\n\tconstructor (address _oracle, address _uni) public {\r\n\t\t_name = 'Multy Finance Defi';\r\n\t\t_refPool = _msgSender();\r\n\t\tethprice = _oracle;\r\n\t\tmfipair = _uni;\r\n\r\n\t}\r\n\t\r\n\tfunction name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\t\r\n\tfunction getPrice() external view returns(uint){\r\n\t\t//18 decimals\r\n\t\t(uint reserve0, uint reserve1, uint blockTimestampLast) = IUniswapV2Pair(mfipair).getReserves();\r\n\t\tuint priceUsd = AggregatorInterface(ethprice).latestAnswer();\r\n\t\treturn reserve1.mul(1e10).mul(priceUsd).div(reserve0);\r\n\t}\r\n\t\r\n\tmodifier onlyVault() {\r\n        require(_activeVault[_msgSender()] == 1 || owner() == _msgSender(), \"MultiFinance: caller is not vault\");\r\n        _;\r\n    }\r\n\t\r\n\tfunction setReferral(address addr, address referral) external onlyVault returns(bool) {\r\n\t\trequire(addr != referral, \"MultiFinance: Same address\");\r\n\t\trequire(_referral[addr] == address(0), \"MultiFinance: Already registered\");\r\n\t\trequire(_referral[referral] != address(0) || referral == owner(), \"MultiFinance: Unregistered referral\");\r\n\t\t_referral[addr] = referral;\r\n\t\t_reftotal[referral] = _reftotal[referral].add(1);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction setExp(address _addr, uint _newExp) external onlyVault{\r\n\t\t_exp[_addr] = _newExp;\r\n\t}\r\n\t\r\n\tfunction getExp(address _addr) external view returns(uint){\r\n\t\treturn _exp[_addr];\r\n\t}\r\n\t\r\n\tfunction referralOf(address _addr) external view returns(address){\r\n\t\treturn _referral[_addr];\r\n\t}\r\n\t\r\n\tfunction getRefTotal(address _addr) external view returns(uint){\r\n\t\treturn _reftotal[_addr];\r\n\t}\r\n\t\r\n\tfunction getReferral(address _addr) external view returns(address){\r\n\t\taddress ref = _referral[_addr];\r\n\t\tif(ref == address(0) || now > _exp[ref]){\r\n\t\t\treturn _refPool;\r\n\t\t}\r\n\t\treturn ref;\r\n\t}\r\n\t\r\n\tfunction setRefPool(address _addr) external onlyOwner{\r\n\t\trequire(_addr != address(0), \"MultiFinance: Zero Address\");\r\n\t\t_refPool = _addr;\r\n\t\t\r\n\t}\r\n\tfunction setPriceOracle(address _addr) external onlyOwner{\r\n\t\trequire(_addr != address(0), \"MultiFinance: Zero Address\");\r\n\t\tethprice = _addr;\r\n\t}\r\n\tfunction setPair(address _addr) external onlyOwner{\r\n\t\trequire(_addr != address(0), \"MultiFinance: Zero Address\");\r\n\t\tmfipair = _addr;\r\n\t}\r\n\t\r\n\tfunction getRefPool() external view returns(address){\r\n\t\treturn _refPool;\r\n\t}\r\n\t\r\n\tfunction activateVault(address vault) external onlyOwner{\r\n\t\trequire(vault.isContract(), \"MultiFinance: !Contract\");\r\n\t\trequire(_activeVault[vault] == 0 || _activeVault[vault] == 2, \"MultiFinance: Duplicate Vault address\");\r\n\t\tif(_activeVault[vault] != 2){\r\n\t\t\t_vault.push(vault);\r\n\t\t}\r\n\t\t_activeVault[vault] = 1;\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction deactivateVault(address vault) external onlyOwner{\r\n\t\trequire(_activeVault[vault] == 1, \"MultiFinance: Invalid vault address\");\r\n\t\t_activeVault[vault] = 2;\r\n\t}\r\n\t\r\n\tfunction tvl() external view returns(uint){\r\n\t\tuint sum;\r\n\t\tfor(uint i = 0; i < _vault.length; i++){\r\n\t\t\tif(_activeVault[_vault[i]]==1){\r\n\t\t\t\tsum = sum.add(Mtoken(_vault[i]).calcPoolValue());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sum;\r\n\t}\r\n\t\r\n\treceive() external payable {\r\n    }\r\n\t\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uni\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"activateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"deactivateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethprice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRefPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRefTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inCaseWrongEthTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TokenAddr\",\"type\":\"address\"}],\"name\":\"inCaseWrongTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"inCaseWrongTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mfipair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"referralOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newExp\",\"type\":\"uint256\"}],\"name\":\"setExp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRefPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultyFinanceDefi","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000bd321dd93e55199d9a32b4a26632b7c4214c5c67","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://17ba2671a68f23f9a6e91f50213ee00db69781151b7d953f0c5bfa9ac83e9ad2"}]}