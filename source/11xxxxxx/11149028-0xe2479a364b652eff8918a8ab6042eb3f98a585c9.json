{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface CoFiXRouter {\r\n    function swapExactETHForTokens(\r\n        address token,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address to,\r\n        address rewardTo,\r\n        uint deadline\r\n    ) external payable returns (uint _amountIn, uint _amountOut);\r\n    function swapExactTokensForTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address to,\r\n        address rewardTo,\r\n        uint deadline\r\n    ) external payable returns (uint _amountIn, uint _amountOut);\r\n    function swapExactTokensForETH(\r\n        address token,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address to,\r\n        address rewardTo,\r\n        uint deadline\r\n    ) external payable returns (uint _amountIn, uint _amountOut);\r\n}\r\n\r\ninterface UniswapV2Router {\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n     function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n    Ensures that any contract that inherits from this contract is able to\r\n    withdraw funds that are accidentally received or stuck.\r\n */\r\ncontract Withdrawable is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    address constant ETHER = address(0);\r\n\r\n    event LogWithdraw(\r\n        address indexed _from,\r\n        address indexed _assetAddress,\r\n        uint amount\r\n    );\r\n\r\n    /**\r\n     * @dev Withdraw asset.\r\n     * @param _assetAddress Asset to be withdrawn.\r\n     */\r\n    function withdraw(address _assetAddress) public onlyOwner {\r\n        uint assetBalance;\r\n        if (_assetAddress == ETHER) {\r\n            address self = address(this); // workaround for a possible solidity bug\r\n            assetBalance = self.balance;\r\n            msg.sender.transfer(assetBalance);\r\n        } else {\r\n            assetBalance = IERC20(_assetAddress).balanceOf(address(this));\r\n            IERC20(_assetAddress).safeTransfer(msg.sender, assetBalance);\r\n        }\r\n        emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\r\n    }\r\n}\r\n\r\n/**\r\n    @title ILendingPoolAddressesProvider interface\r\n    @notice provides the interface to fetch the LendingPoolCore address\r\n */\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address payable);\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\n/**\r\n* @title IFlashLoanReceiver interface\r\n* @notice Interface for the Aave fee IFlashLoanReceiver.\r\n* @author Aave\r\n* @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n**/\r\ninterface IFlashLoanReceiver {\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver, Withdrawable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    address constant ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    ILendingPoolAddressesProvider public addressesProvider;\r\n\r\n    constructor() public {\r\n        addressesProvider = ILendingPoolAddressesProvider(address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8));\r\n    }\r\n\r\n    receive() payable external {}\r\n\r\n    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount) internal {\r\n        address payable core = addressesProvider.getLendingPoolCore();\r\n        transferInternal(core, _reserve, _amount);\r\n    }\r\n\r\n    function transferInternal(address payable _destination, address _reserve, uint256 _amount) internal {\r\n        if(_reserve == ethAddress) {\r\n            (bool success, ) = _destination.call{value: _amount}(\"\");\r\n            require(success == true, \"Couldn't transfer ETH\");\r\n            return;\r\n        }\r\n        IERC20(_reserve).safeTransfer(_destination, _amount);\r\n    }\r\n\r\n    function getBalanceInternal(address _target, address _reserve) internal view returns(uint256) {\r\n        if(_reserve == ethAddress) {\r\n            return _target.balance;\r\n        }\r\n        return IERC20(_reserve).balanceOf(_target);\r\n    }\r\n}\r\n\r\ninterface ILendingPool {\r\n  function addressesProvider () external view returns ( address );\r\n  function deposit ( address _reserve, uint256 _amount, uint16 _referralCode ) external payable;\r\n  function redeemUnderlying ( address _reserve, address _user, uint256 _amount ) external;\r\n  function borrow ( address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode ) external;\r\n  function repay ( address _reserve, uint256 _amount, address _onBehalfOf ) external payable;\r\n  function swapBorrowRateMode ( address _reserve ) external;\r\n  function rebalanceFixedBorrowRate ( address _reserve, address _user ) external;\r\n  function setUserUseReserveAsCollateral ( address _reserve, bool _useAsCollateral ) external;\r\n  function liquidationCall ( address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken ) external payable;\r\n  function flashLoan ( address _receiver, address _reserve, uint256 _amount, bytes calldata _params ) external;\r\n  function getReserveConfigurationData ( address _reserve ) external view returns ( uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive );\r\n  function getReserveData ( address _reserve ) external view returns ( uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp );\r\n  function getUserAccountData ( address _user ) external view returns ( uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor );\r\n  function getUserReserveData ( address _reserve, address _user ) external view returns ( uint256 currentATokenBalance, uint256 currentUnderlyingBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled );\r\n  function getReserves () external view;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Love_Swap_V1 is FlashLoanReceiverBase {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using address_make_payable for address;\r\n\r\n    address public superMan;\r\n    address public cofixRouter = address(0x26aaD4D82f6c9FA6E34D8c1067429C986A055872);\r\n    address public uniRouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public USDTAddress = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address public cofiAddress = address(0x1a23a6BfBAdB59fa563008c0fB7cf96dfCF34Ea1);\r\n    address public WETHAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    uint256 public nestPrice = 0.01 ether;\r\n\r\n    // Flashloan params\r\n    address public flashLoanETHAddress = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    address public flashLoanUSDTAddress = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    modifier onlySuperMan() {\r\n        require(msg.sender == superMan, \"Not superman\");\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        superMan = msg.sender;\r\n        IERC20(USDTAddress).safeApprove(cofixRouter, 1000000000000000);\r\n        IERC20(USDTAddress).safeApprove(uniRouter, 1000000000000000);\r\n    }\r\n\r\n    function refreshApproval() public onlySuperMan {\r\n        IERC20(USDTAddress).safeApprove(cofixRouter, 0);\r\n        IERC20(USDTAddress).safeApprove(uniRouter, 0);\r\n        IERC20(USDTAddress).safeApprove(cofixRouter, 1000000000000000);\r\n        IERC20(USDTAddress).safeApprove(uniRouter, 1000000000000000);\r\n    }\r\n\r\n    /**** FLASH LOAN ****/\r\n\r\n    function doitForUniWithFlashLoanedETH(uint _amount) public {\r\n        bytes memory params = abi.encode(0);\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n        lendingPool.flashLoan(address(this), flashLoanETHAddress, _amount, params);\r\n    }\r\n\r\n    function doitForCofixWithFlashLoanedETH(uint _amount) public {\r\n        bytes memory params = abi.encode(uint(1));\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n        lendingPool.flashLoan(address(this), flashLoanETHAddress, _amount, params);\r\n    }\r\n\r\n    /**\r\n        This function is called after your contract has received the flash loaned amount\r\n     */\r\n    function executeOperation (\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata _params\r\n    )\r\n        external\r\n        override\r\n    {\r\n        require(_amount <= getBalanceInternal(address(this), _reserve), \"Invalid balance, was the flashLoan successful?\");\r\n\r\n        //\r\n        // Your logic goes here.\r\n\r\n        // Call strategy with amountETH borrowed - nestPrice to make sure we have enough eth for nest call\r\n        (uint which) = abi.decode(_params, (uint));\r\n        if (which == 0) {\r\n          doitForUni(_amount.sub(nestPrice));\r\n        } else {\r\n          doitForCofix(_amount.sub(nestPrice));\r\n        }\r\n\r\n\r\n        // !! Ensure that *this contract* has enough of `_reserve` funds to payback the `_fee` !!\r\n        //\r\n\r\n        uint totalDebt = _amount.add(_fee);\r\n        transferFundsBackToPoolInternal(_reserve, totalDebt);\r\n    }\r\n    /**** END FLASH LOAN ****/\r\n\r\n    // cofix:ETH->USDT,uni:USDT->ETH\r\n    function doitForUni(uint256 ethAmount) public payable {\r\n        uint256 ethBefore = address(this).balance;\r\n        uint256 tokenBefore = IERC20(USDTAddress).balanceOf(address(this));\r\n\r\n        CoFiXRouter(cofixRouter).swapExactETHForTokens.value(ethAmount.add(nestPrice))(USDTAddress,ethAmount,1,address(this), address(this), block.timestamp + 3600);\r\n        uint256 tokenMiddle = IERC20(USDTAddress).balanceOf(address(this)).sub(tokenBefore);\r\n        address[] memory data = new address[](2);\r\n        data[0] = USDTAddress;\r\n        data[1] = WETHAddress;\r\n        UniswapV2Router(uniRouter).swapExactTokensForETH(tokenMiddle, 1, data, address(this), block.timestamp + 3600);\r\n\r\n        require(address(this).balance >= ethBefore, \"ETH not enough\");\r\n        require(IERC20(USDTAddress).balanceOf(address(this)) >= tokenBefore, \"token not enough\");\r\n    }\r\n\r\n    // uni:ETH->USDT,cofix:USDT->ETH\r\n    function doitForCofix(uint256 ethAmount) public payable {\r\n        uint256 ethBefore = address(this).balance;\r\n        uint256 tokenBefore = IERC20(USDTAddress).balanceOf(address(this));\r\n\r\n        address[] memory data = new address[](2);\r\n        data[0] = WETHAddress;\r\n        data[1] = USDTAddress;\r\n        UniswapV2Router(uniRouter).swapExactETHForTokens.value(ethAmount)(0,data,address(this),block.timestamp + 3600);\r\n        uint256 tokenMiddle = IERC20(USDTAddress).balanceOf(address(this)).sub(tokenBefore);\r\n        CoFiXRouter(cofixRouter).swapExactTokensForETH.value(nestPrice)(USDTAddress,tokenMiddle,1,address(this), address(this), block.timestamp + 3600);\r\n\r\n        require(address(this).balance >= ethBefore, \"ETH not enough\");\r\n        require(IERC20(USDTAddress).balanceOf(address(this)) >= tokenBefore, \"token not enough\");\r\n    }\r\n\r\n    // cofix:ETH->USDT,uni:USDT->ETH,包含cofi价值\r\n    function doitForUniGetCofi(uint256 ethAmount, uint256 cofiPrice) public payable {\r\n        uint256 ethBefore = address(this).balance;\r\n        uint256 tokenBefore = IERC20(USDTAddress).balanceOf(address(this));\r\n        uint256 cofiBefore = IERC20(cofiAddress).balanceOf(address(this));\r\n        CoFiXRouter(cofixRouter).swapExactETHForTokens.value(ethAmount.add(nestPrice))(USDTAddress,ethAmount,1,address(this), address(this), block.timestamp + 3600);\r\n        uint256 tokenMiddle = IERC20(USDTAddress).balanceOf(address(this)).sub(tokenBefore);\r\n        address[] memory data = new address[](2);\r\n        data[0] = USDTAddress;\r\n        data[1] = WETHAddress;\r\n        UniswapV2Router(uniRouter).swapExactTokensForETH(tokenMiddle,1,data,address(this),block.timestamp + 3600);\r\n        uint256 cofiCost = ethBefore.sub(address(this).balance);\r\n        require(IERC20(cofiAddress).balanceOf(address(this)).sub(cofiBefore).mul(cofiPrice).div(1 ether) > cofiCost, \"cofi not enough\");\r\n        require(IERC20(USDTAddress).balanceOf(address(this)) >= tokenBefore, \"token not enough\");\r\n    }\r\n\r\n    // uni:USDT->ETH,cofix:ETH->USDT,包含cofi价值\r\n    function doitForCofixGetCofi(uint256 ethAmount, uint256 cofiPrice) public payable {\r\n        uint256 ethBefore = address(this).balance;\r\n        uint256 tokenBefore = IERC20(USDTAddress).balanceOf(address(this));\r\n        uint256 cofiBefore = IERC20(cofiAddress).balanceOf(address(this));\r\n        address[] memory data = new address[](2);\r\n        data[0] = WETHAddress;\r\n        data[1] = USDTAddress;\r\n        UniswapV2Router(uniRouter).swapExactETHForTokens.value(ethAmount)(0,data,address(this),block.timestamp + 3600);\r\n        uint256 tokenMiddle = IERC20(USDTAddress).balanceOf(address(this)).sub(tokenBefore);\r\n        CoFiXRouter(cofixRouter).swapExactTokensForETH.value(nestPrice)(USDTAddress,tokenMiddle,1,address(this), address(this), block.timestamp + 3600);\r\n        uint256 cofiCost = ethBefore.sub(address(this).balance);\r\n        require(IERC20(cofiAddress).balanceOf(address(this)).sub(cofiBefore).mul(cofiPrice).div(1 ether) > cofiCost, \"cofi not enough\");\r\n        require(IERC20(USDTAddress).balanceOf(address(this)) >= tokenBefore, \"token not enough\");\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount) public onlySuperMan {\r\n        IERC20(token).safeTransfer(superMan, amount);\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) public onlySuperMan {\r\n        address payable addr = superMan.make_payable();\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function getGasFee(uint256 gasLimit) public view returns(uint256) {\r\n        return gasLimit.mul(tx.gasprice);\r\n    }\r\n\r\n    function getTokenBalance(address token) public view returns(uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    function getETHBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function setCofixRouter(address _cofixRouter) public onlySuperMan {\r\n        cofixRouter = _cofixRouter;\r\n    }\r\n\r\n    function setUniRouter(address _uniRouter) public onlySuperMan {\r\n        uniRouter = _uniRouter;\r\n    }\r\n\r\n    function setNestPrice(uint256 _amount) public onlySuperMan {\r\n        nestPrice = _amount;\r\n    }\r\n\r\n    function setSuperMan(address _newMan) public onlySuperMan {\r\n        superMan = _newMan;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cofiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cofixRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"doitForCofix\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cofiPrice\",\"type\":\"uint256\"}],\"name\":\"doitForCofixGetCofi\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doitForCofixWithFlashLoanedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"doitForUni\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cofiPrice\",\"type\":\"uint256\"}],\"name\":\"doitForUniGetCofi\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doitForUniWithFlashLoanedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanUSDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"getGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cofixRouter\",\"type\":\"address\"}],\"name\":\"setCofixRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNestPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMan\",\"type\":\"address\"}],\"name\":\"setSuperMan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"}],\"name\":\"setUniRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superMan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Love_Swap_V1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e52ec47fa259d6cc376edae783cae13d459b1da665d51488aa83b4e28ea6d2d"}]}