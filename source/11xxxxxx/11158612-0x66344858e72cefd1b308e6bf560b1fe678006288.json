{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0){\r\n            return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n         require(a == 0 || c / a == b);\r\n       \r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       require (b > 0, \"safeMath : division by zero\");\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       require(b <= a, \"subsraction owerflow\");\r\n        uint256 c = a - b;\r\n        return c; \r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"addition owerflow\");\r\n        return c;\r\n    }\r\n    \r\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require (b !=0, \"safeMath : module by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Owned{\r\n    address payable public owner;\r\n    address payable private newOwner;\r\n    \r\n    \r\n     \r\n      event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        \r\n    }\r\n     \r\n      \r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n    \r\n    function CEO ()public view returns (address) {\r\n        return owner;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n      require (msg.sender == owner, \"No owner\");\r\n       _;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenAIR is Owned {\r\n    using SafeMath for uint;\r\n   \r\n\r\n    uint256 public sellPriceToken;\r\n    uint256 public buyPrice;\r\n      \r\n       string constant private _name = \"ATMOSPHERE\";\r\n       string constant private _simbol = \"AIR\";\r\n       uint8 constant private  _decimals = 18;\r\n     uint256 public _totalSupply;\r\n    \r\n    function name() public pure returns(string memory){\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public pure returns(string memory){\r\n        return _simbol;\r\n    }\r\n    \r\n    function decimals() public pure returns(uint8){\r\n        return _decimals;\r\n    }\r\n  \r\n  \r\n    bool internal locker;\r\n    \r\n    modifier noReentrant() {\r\n        require (!locker ,\"no retrency\");\r\n        locker = true;\r\n        _;\r\n        locker = false;\r\n    }   \r\n  \r\n    function totalNoDecimals() public view  returns (uint256) {\r\n        return _totalSupply/10**18;\r\n    }\r\n    \r\n    mapping(address => uint ) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n   \r\n  \r\n    \r\n    event Transfer(address indexed _from, address indexed  _to, uint _value); \r\n    event Approval(address indexed _from, address indexed _to, uint _value);\r\n    event Sell(address indexed sender, uint indexed balance, uint amount);\r\n     \r\n   \r\n    \r\n       function allowance (address _owner, address _spender) public view returns (uint){       // показывает сколько можно снимать деньги с адреса отправителя\r\n        return allowed [_owner][_spender];\r\n    }\r\n    \r\n     function approve(address _spender, uint _value) public {             // отправитель даеет разрешение на снятие денег с адреса function transferFrom\r\n            allowed [msg.sender][_spender] = _value;\r\n        emit Approval (msg.sender, _spender, _value);\r\n    }\r\n    \r\n   \r\n    \r\n     \r\n    function mint(address account, uint256 _value)  public  onlyOwner {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        uint value = _value*(10**18);\r\n        _beforeTokenTransfer(address(0), account, value);\r\n        _totalSupply = _totalSupply.add(value);\r\n        balances[account] = balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n    \r\n     \r\n        function _beforeTokenTransfer(address from, address to, uint256 amount) internal pure { }\r\n\r\n function WithdrawTokens(uint256 tokenAmount) public onlyOwner noReentrant{\r\n       \r\n        // no need for overflow checking as that will be done in transfer function\r\n        _transfer(address(this),msg.sender, tokenAmount);\r\n    }\r\n\r\n\r\n   function withdraw () public onlyOwner noReentrant {\r\n       uint amount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n             address(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    \r\n     function balanceOf(address sender) public view returns (uint) {         \r\n        return balances[sender];\r\n    }\r\n    \r\n    modifier validDestination( address to ) {\r\n        require(to != address(0x0));\r\n        require(to != address(this) );\r\n        _;\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != address(0));                      // Prevent transfer to 0x0 address. Use burn() instead\r\n        // overflow and undeflow checked by SafeMath Library\r\n       balances[_from] = balances[_from].sub(_value);    // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value);        // Add the same to the recipient\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public  returns (bool success) {\r\n        \r\n        //no need to check for input validations, as that is ruled by SafeMath\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n     function transferFrom(address _from, address spender, uint256 _value) public returns (bool success) {\r\n        //checking of allowance and token value is done by SafeMath\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n       \r\n        _transfer(_from, spender, _value);\r\n        return true;\r\n    }\r\n    \r\n   \r\n   function setPrices(uint256  newsellPriceToken, uint256  newBuyPrice) onlyOwner public{\r\n     sellPriceToken = newsellPriceToken ;\r\n        buyPrice = newBuyPrice;\r\n }\r\n    \r\n    function buyTokens() payable public noReentrant {\r\n       require(msg.sender != address(0),  'No contract address allowed to claim air drop');\r\n        uint amount = msg.value * buyPrice;                 // calculates the amount\r\n         \r\n        \r\n        _transfer(address(this), msg.sender, amount);       // makes the transfers\r\n        \r\n    }\r\n  \r\n  \r\n      function sellTokens(uint256 amount) public {\r\n       uint256 etherAmount = amount * sellPriceToken/(10**18);\r\n        require(address(this).balance >= etherAmount);   // checks if the contract has enough ether to buy\r\n          _transfer(msg.sender, address(this),amount);           // makes the transfers\r\n        msg.sender.transfer(etherAmount);                // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n   \r\n    \r\n       \r\n     function ETHcontrBalance () public view returns (uint) {\r\n        return address(this).balance;\r\n        }\r\n        \r\n        function() external { //fallback\r\n    revert();\r\n  }\r\n  \r\n  \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Owned","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d122e45c02c2d44d8dd7265f09a0f9e868f7b77937257b5e1967cdfc8532f799"}]}