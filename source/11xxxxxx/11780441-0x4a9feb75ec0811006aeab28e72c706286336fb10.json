{"status":"1","message":"OK","result":[{"SourceCode":"//Audit report available at https://www.tkd-coop.com/files/audit.pdf\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nabstract contract ITACData {\r\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) ;\r\n}\r\n\r\n //Control who can access various functions.\r\ncontract AccessControl {\r\n    address payable public creatorAddress;\r\n    uint16 public totalDirectors = 0;\r\n    mapping (address => bool) public directors;\r\n\r\n   modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress, \"You are not the creator of the contract.\");\r\n        _;\r\n    }\r\n\r\n   // Constructor\r\n    constructor()  {\r\n        creatorAddress = 0x813dd04A76A716634968822f4D30Dfe359641194;\r\n    }\r\n}\r\n\r\n//Interface to TAC Contract\r\nabstract contract ITAC {\r\n     function awardTAC(address winner, address loser, address referee) public virtual;\r\n     function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool);\r\n     function balanceOf(address account) external virtual view returns (uint256);\r\n}\r\n\r\ncontract TACLockup is AccessControl  {\r\n\r\n     /////////////////////////////////////////////////DATA STRUCTURES AND GLOBAL VARIABLES ///////////////////////////////////////////////////////////////////////\r\n\r\n    // Lockup duration in seconds for each time period\r\n    uint64 public lockupDuration = 604800;\r\n\r\n    // Hardcoded limits that cannot be changed by admin. \r\n    // Time is in seconds. \r\n    uint64 public minLockupDuration = 1;\r\n    uint64 public maxLockupDuration = 2592000;\r\n\r\n    // 100/removalFactor = % of TAC that can be removed each time.\r\n    uint64 public removalFactor = 10;\r\n\r\n    // minimum amount of a removal if they have that much balance\r\n    uint256 public minRemovalAmount = 5000000000000000000;\r\n\r\n    uint64 public minRemovalFactor = 1; //100% removal, no limit \r\n    uint64 public maxRemovalFactor = 100; //1% removal\r\n\r\n    mapping (address => uint256) public lockedTACForUser;\r\n    mapping (address => uint64) public lastRemovalTime;\r\n\r\n    address TACContract = address(0); //Will be changed by admin once TACContract is deployed.\r\n\r\n    //This function is separate from setParameters to lower the chance of accidental override. \r\n    function setTACAddress(address _TACContract) public onlyCREATOR {\r\n        TACContract = _TACContract;\r\n    }\r\n\r\n    //Admin function to adjust the lockup duration. Adjustments must stay within pre-defined limits. \r\n    function setParameters(uint64 _lockupDuration, uint64 _removalFactor, uint256 _minRemovalAmount) public onlyCREATOR {\r\n        if ((_lockupDuration <= maxLockupDuration) && (_lockupDuration >= minLockupDuration)) {\r\n        lockupDuration = _lockupDuration;\r\n        }\r\n\r\n        if ((_removalFactor <= maxRemovalFactor) && (_removalFactor >= minRemovalFactor)) {\r\n         removalFactor = _removalFactor;\r\n        }\r\n        minRemovalAmount = _minRemovalAmount;\r\n    }\r\n\r\n    //Returns current valued\r\n    function getValues() public view returns (uint64 _lockupDuration, uint64 _removalFactor) {\r\n        _lockupDuration = lockupDuration;\r\n        _removalFactor = removalFactor;\r\n    }\r\n\r\n    //Function called by the TAC contract to adjust the locked up balance of a user.\r\n    function adjustBalance(address user, uint256 amount) public  {\r\n        require(msg.sender == TACContract, \"Only the TAC Contract can call this function\");\r\n        lockedTACForUser[user] += amount;\r\n        //If the user has no balance, we need to set this as the current last removal time. \r\n        if (lastRemovalTime[user] == 0) {\r\n            lastRemovalTime[user] = uint64(block.timestamp);\r\n        }\r\n    }\r\n    //Function to lock your own TAC. \r\n    //Users must have previously approved this contract.\r\n    function lockMyTAC(uint256 amount) public {\r\n        ITAC TAC = ITAC(TACContract);\r\n        TAC.transferFrom(msg.sender, address(this), amount);\r\n        lockedTACForUser[msg.sender] += amount;\r\n        //If the user has no balance, we need to set this as the current last removal time. \r\n        if (lastRemovalTime[msg.sender] == 0) {\r\n            lastRemovalTime[msg.sender] = uint64(block.timestamp);\r\n        }\r\n    }\r\n\r\n    // Returns returns the amount of TAC a user has locked as well as the last removal time.\r\n    function getUserInfo(address user) public view returns (uint256 lockedAmount , uint64 time) {\r\n        lockedAmount = lockedTACForUser[user];\r\n        time = lastRemovalTime[user];\r\n    }\r\n\r\n    // Returns the amount of locked TAC a user has\r\n    function getTACLocked(address user) public view returns (uint256 lockedAmount) {\r\n          lockedAmount = lockedTACForUser[user];\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n// Function any user can call to receive their TAC allocation. \r\n    function claimTAC() public  {\r\n      require(lockedTACForUser[msg.sender] > 0, \"You need to have received some TAC first\");\r\n      require(block.timestamp > lastRemovalTime[msg.sender] + lockupDuration, \"You need to wait a bit longer\");\r\n      ITACData TAC = ITACData(TACContract);\r\n\r\n      //Calculate amount to transfer and adjust removal time\r\n      uint256 transferAmount = div(lockedTACForUser[msg.sender], removalFactor);\r\n      lastRemovalTime[msg.sender] = uint64(block.timestamp);\r\n      \r\n      //If they have enough balance but the transfer amount is small, transfer the min amount. \r\n      if ((transferAmount <= minRemovalAmount) && (lockedTACForUser[msg.sender] > minRemovalAmount)) {\r\n          transferAmount = minRemovalAmount;\r\n      }\r\n\r\n      //Transfer entire balance if min transfer amount is greater than their balance. \r\n      if (minRemovalAmount > lockedTACForUser[msg.sender]) {\r\n        transferAmount = lockedTACForUser[msg.sender];\r\n      }\r\n      //Decrement user's balance and transfer\r\n      lockedTACForUser[msg.sender] = lockedTACForUser[msg.sender] - transferAmount;\r\n      TAC.transfer(msg.sender, transferAmount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adjustBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTAC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"directors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTACLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_lockupDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_removalFactor\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRemovalTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockMyTAC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTACForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockupDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRemovalFactor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockupDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRemovalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRemovalFactor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removalFactor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_lockupDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_removalFactor\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_minRemovalAmount\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TACContract\",\"type\":\"address\"}],\"name\":\"setTACAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDirectors\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TACLockup","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://323dceb19a382eeee2df1c2b165b10e67af01567a41b437c80316301607f546d"}]}