{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nlibrary Constants {\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _launchSupply = 50000 * 10**9;\r\n    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\r\n\r\n    uint256 private constant _baseExpansionFactor = 100;\r\n    uint256 private constant _baseContractionFactor = 100;\r\n    uint256 private constant _baseUtilityFee = 50;\r\n    uint256 private constant _baseContractionCap = 1000;\r\n\r\n    uint256 private constant _stabilizerFee = 250;\r\n    uint256 private constant _stabilizationLowerBound = 50;\r\n    uint256 private constant _stabilizationLowerReset = 75;\r\n    uint256 private constant _stabilizationUpperBound = 150;\r\n    uint256 private constant _stabilizationUpperReset = 125;\r\n    uint256 private constant _stabilizePercent = 10;\r\n\r\n    uint256 private constant _treasuryFee = 250;\r\n\r\n    uint256 private constant _presaleMinIndividualCap = 1 ether;\r\n    uint256 private constant _presaleMaxIndividualCap = 3 ether;\r\n    uint256 private constant _presaleCap = 27500 * 10**9;\r\n    uint256 private constant _maxPresaleGas = 200000000000;\r\n\r\n    uint256 private constant _epochLength = 4 hours;\r\n\r\n    uint256 private constant _liquidityReward = 2 * 10**9;\r\n    uint256 private constant _minForLiquidity = 10 * 10**9;\r\n    uint256 private constant _minForCallerLiquidity = 10 * 10**9;\r\n\r\n    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address payable private constant _deployerAddress = 0xA5C30116b6E926Ec0F159649c724eE6058F4953D;\r\n    address private constant _treasuryAddress = 0xA5C30116b6E926Ec0F159649c724eE6058F4953D;\r\n\r\n    uint256 private constant _presaleRate = 22916;\r\n    uint256 private constant _listingRate = 19444;\r\n\r\n    string private constant _name = \"ZStable\";\r\n    string private constant _symbol = \"ZST\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    /****** Getters *******/\r\n    function getPresaleRate() internal pure returns (uint256) {\r\n        return _presaleRate;\r\n    }\r\n     function getListingRate() internal pure returns (uint256) {\r\n        return _listingRate;\r\n    }\r\n    function getLaunchSupply() internal pure returns (uint256) {\r\n        return _launchSupply;\r\n    }\r\n    function getLargeTotal() internal pure returns (uint256) {\r\n        return _largeTotal;\r\n    }\r\n    function getPresaleCap() internal pure returns (uint256) {\r\n        return _presaleCap;\r\n    }\r\n    function getPresaleMinIndividualCap() internal pure returns (uint256) {\r\n        return _presaleMinIndividualCap;\r\n    }\r\n    function getPresaleMaxIndividualCap() internal pure returns (uint256) {\r\n        return _presaleMaxIndividualCap;\r\n    }\r\n    function getMaxPresaleGas() internal pure returns (uint256) {\r\n        return _maxPresaleGas;\r\n    }\r\n    function getBaseExpansionFactor() internal pure returns (uint256) {\r\n        return _baseExpansionFactor;\r\n    }\r\n    function getBaseContractionFactor() internal pure returns (uint256) {\r\n        return _baseContractionFactor;\r\n    }\r\n    function getBaseContractionCap() internal pure returns (uint256) {\r\n        return _baseContractionCap;\r\n    }\r\n    function getBaseUtilityFee() internal pure returns (uint256) {\r\n        return _baseUtilityFee;\r\n    }\r\n    function getStabilizerFee() internal pure returns (uint256) {\r\n        return _stabilizerFee;\r\n    }\r\n    function getStabilizationLowerBound() internal pure returns (uint256) {\r\n        return _stabilizationLowerBound;\r\n    }\r\n    function getStabilizationLowerReset() internal pure returns (uint256) {\r\n        return _stabilizationLowerReset;\r\n    }\r\n    function getStabilizationUpperBound() internal pure returns (uint256) {\r\n        return _stabilizationUpperBound;\r\n    }\r\n    function getStabilizationUpperReset() internal pure returns (uint256) {\r\n        return _stabilizationUpperReset;\r\n    }\r\n    function getStabilizePercent() internal pure returns (uint256) {\r\n        return _stabilizePercent;\r\n    }\r\n    function getTreasuryFee() internal pure returns (uint256) {\r\n        return _treasuryFee;\r\n    }\r\n    function getEpochLength() internal pure returns (uint256) {\r\n        return _epochLength;\r\n    }\r\n    function getLiquidityReward() internal pure returns (uint256) {\r\n        return _liquidityReward;\r\n    }\r\n    function getMinForLiquidity() internal pure returns (uint256) {\r\n        return _minForLiquidity;\r\n    }\r\n    function getMinForCallerLiquidity() internal pure returns (uint256) {\r\n        return _minForCallerLiquidity;\r\n    }\r\n    function getRouterAdd() internal pure returns (address) {\r\n        return _routerAddress;\r\n    }\r\n    function getFactoryAdd() internal pure returns (address) {\r\n        return _factoryAddress;\r\n    }\r\n    function getDeployerAdd() internal pure returns (address payable) {\r\n        return _deployerAddress;\r\n    }\r\n    function getTreasuryAdd() internal pure returns (address) {\r\n        return _treasuryAddress;\r\n    }\r\n    function getName() internal pure returns (string memory)  {\r\n        return _name;\r\n    }\r\n    function getSymbol() internal pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function getDecimals() internal pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IXStable is IERC20 {\r\n    function isPresaleDone() external view returns (bool);\r\n    function mint(address to, uint256 amount) external;\r\n    function setPresaleDone() external payable;\r\n    function setTaxless(bool flag) external;\r\n    function silentSyncPair(address pool) external;\r\n}\r\ncontract LiquidityReserve is Context, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    IXStable token;\r\n    IUniswapV2Router02 public uniswapRouterV2;\r\n    IUniswapV2Factory public uniswapFactory;\r\n\r\n    modifier sendTaxless {\r\n        token.setTaxless(true);\r\n        _;\r\n        token.setTaxless(false);\r\n    }\r\n    constructor (address tokenAdd) public {\r\n        token = IXStable(tokenAdd);\r\n        uniswapRouterV2 = IUniswapV2Router02(Constants.getRouterAdd());\r\n        uniswapFactory = IUniswapV2Factory(Constants.getFactoryAdd());\r\n    }\r\n    function addLiquidityETHOnly() external payable sendTaxless {\r\n        require(msg.value > 0, \"Need to provide eth for liquidity\");\r\n        address tokenUniswapPair = uniswapFactory.getPair(address(token),uniswapRouterV2.WETH());\r\n        uint256 initialBalance = address(this).balance.sub(msg.value);\r\n        uint256 initialTokenBalance = token.balanceOf(address(this));\r\n        uint256 amountToSwap = msg.value.div(2);\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapRouterV2.WETH();\r\n        path[1] = address(token);\r\n        uniswapRouterV2.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountToSwap}(0,path,address(this),block.timestamp);\r\n        uint256 newTokenBalance = token.balanceOf(address(this)).sub(initialTokenBalance);\r\n        token.approve(address(uniswapRouterV2),newTokenBalance);\r\n        uniswapRouterV2.addLiquidityETH{value: amountToSwap}(address(token),newTokenBalance,0,0,_msgSender(),block.timestamp);\r\n        uint256 excessTokens = token.balanceOf(address(this)).sub(initialTokenBalance);\r\n        token.silentSyncPair(tokenUniswapPair);\r\n        if (excessTokens >0) {\r\n            token.transfer(_msgSender(),excessTokens);\r\n        }\r\n        uint256 dustEth = address(this).balance.sub(initialBalance);\r\n        if (dustEth>0) _msgSender().transfer(dustEth);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidityETHOnly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LiquidityReserve","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f2ed69c59627c8a43e59c6f977d1a98c84262e3f","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://366872c4bc4946860a9acd27b3fc081b85800997bf3b063fb0c17b7d4324cb67"}]}