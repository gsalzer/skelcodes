{"status":"1","message":"OK","result":[{"SourceCode":"{\"YbaoFinanceTokenCrowdsale.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\u0027./YbaoToken.sol\\u0027;\\r\\n\\r\\ncontract YbaoFinanceTokenCrowdsale {\\r\\n     using SafeMath for uint256;\\r\\n    \\r\\n    /**\\r\\n   * Event for YbaoFinanceToken purchase logging\\r\\n   * @param purchaser who paid for the tokens\\r\\n   * @param beneficiary who got the tokens\\r\\n   * @param value weis paid for purchase\\r\\n   * @param amount amount of tokens purchased\\r\\n   */\\r\\n    event TokenPurchase(\\r\\n        address indexed purchaser,\\r\\n        address indexed beneficiary,\\r\\n        uint256 value,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n   bool public isEnded = false;\\r\\n\\r\\n   event Ended(uint256 totalWeiRaisedInCrowdsale,uint256 unsoldTokensTransferredToOwner);\\r\\n   \\r\\n   uint256 public rate;     //Tokens per wei \\r\\n   address payable public ethBeneficiaryAccount;\\r\\n   ERC20Burnable public YbaoFinanceToken;\\r\\n   \\r\\n  // ICO Stage\\r\\n  // ============\\r\\n  enum CrowdsaleStage { PreICO, ICO }\\r\\n  CrowdsaleStage public stage;      //0 for PreICO \\u0026 1 for ICO Stage\\r\\n  // =============\\r\\n\\r\\n  // YbaoFinanceToken Distribution\\r\\n  // =============================\\r\\n  uint256 public totalTokensForSale = 8000*(1e18); // 8000 YBAO will be sold during hole Crowdsale\\r\\n  uint256 public totalTokensForSaleDuringPreICO = 4000*(1e18); // 4000 YBAO will be sold during PreICO\\r\\n  uint256 public totalTokensForSaleDuringICO = 4000*(1e18); // 4000 YBAO will be sold during ICO\\r\\n  // ==============================\\r\\n\\r\\n  // Amount of wei raised in Crowdsale\\r\\n  // ==================\\r\\n  uint256 public totalWeiRaisedDuringPreICO;\\r\\n  uint256 public totalWeiRaisedDuringICO;\\r\\n  // ===================\\r\\n\\r\\n  // YbaoFinanceToken Amount remaining to Purchase\\r\\n  // ==================\\r\\n  uint256 public tokenRemainingForSaleInPreICO = 4000*(1e18);\\r\\n  uint256 public tokenRemainingForSaleInICO = 4000*(1e18);\\r\\n  // ===================\\r\\n\\r\\n\\r\\n  // Events\\r\\n  event EthTransferred(string text);\\r\\n  \\r\\n  //Modifier\\r\\n    address public owner;    \\r\\n    modifier onlyOwner() {\\r\\n        require (msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n  // Constructor\\r\\n  // ============\\r\\n  constructor(uint256 initialRate,address payable wallet) public\\r\\n  {   \\r\\n      ethBeneficiaryAccount = wallet;\\r\\n      setCurrentRate(initialRate);\\r\\n      owner = msg.sender;\\r\\n      stage = CrowdsaleStage.PreICO; // By default it\\u0027s PreICO\\r\\n      YbaoFinanceToken = new YbaoToken(owner); // YbaoFinanceToken Deployment\\r\\n  }\\r\\n  // =============\\r\\n\\r\\n  // Crowdsale Stage Management\\r\\n  // =========================================================\\r\\n\\r\\n  // Change Crowdsale Stage. Available Options: PreICO, ICO\\r\\n  function switchToICOStage() public onlyOwner {\\r\\n      require(stage == CrowdsaleStage.PreICO);\\r\\n      stage = CrowdsaleStage.ICO;\\r\\n      setCurrentRate(20);\\r\\n  }\\r\\n\\r\\n  // Change the current rate\\r\\n  function setCurrentRate(uint256 _rate) private {\\r\\n      rate = _rate;                     \\r\\n  }\\r\\n\\r\\n  // ================ Stage Management Over =====================\\r\\n  \\r\\n   /**\\r\\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\\r\\n   * @param _beneficiary Address performing the YbaoFinanceToken purchase\\r\\n   * @param _weiAmount Value in wei involved in the purchase\\r\\n   */\\r\\n  function _preValidatePurchase(\\r\\n    address _beneficiary,\\r\\n    uint256 _weiAmount\\r\\n  )\\r\\n    internal pure\\r\\n  {\\r\\n    require(_beneficiary != address(0));\\r\\n    require(_weiAmount \\u003e= 1e17 wei,\\\"Minimum amount to invest: 0.1 ETH\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\\r\\n   * @param _beneficiary Address performing the YbaoFinanceToken purchase\\r\\n   * @param _tokenAmount Number of tokens to be emitted\\r\\n   */\\r\\n  function _deliverTokens(\\r\\n    address _beneficiary,\\r\\n    uint256 _tokenAmount\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    YbaoFinanceToken.transfer(_beneficiary, _tokenAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\\r\\n   * @param _beneficiary Address receiving the tokens\\r\\n   * @param _tokenAmount Number of tokens to be purchased\\r\\n   */\\r\\n  function _processPurchase(\\r\\n    address _beneficiary,\\r\\n    uint256 _tokenAmount\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    _deliverTokens(_beneficiary, _tokenAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Override to extend the way in which ether is converted to tokens.\\r\\n   * @param _weiAmount Value in wei to be converted into tokens\\r\\n   * @return Number of tokens that can be purchased with the specified _weiAmount\\r\\n   */\\r\\n  function _getTokenAmount(uint256 _weiAmount)\\r\\n    internal view returns (uint256)\\r\\n  {\\r\\n    return _weiAmount.mul(rate);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Determines how ETH is stored/forwarded on purchases.\\r\\n   */\\r\\n  function _forwardFunds() internal {\\r\\n    ethBeneficiaryAccount.transfer(msg.value);\\r\\n    emit EthTransferred(\\\"Forwarding funds to ETH Beneficiary Account\\\");\\r\\n  }\\r\\n  \\r\\n  // YbaoFinanceToken Purchase\\r\\n  // =========================\\r\\n  function() external payable{\\r\\n      if(isEnded){\\r\\n          revert(); //Block Incoming ETH Deposits if Crowdsale has ended\\r\\n      }\\r\\n      buyYBAOToken(msg.sender);\\r\\n  }\\r\\n  \\r\\n  function buyYBAOToken(address _beneficiary) public payable {\\r\\n      uint256 weiAmount = msg.value;\\r\\n      if(isEnded){\\r\\n        revert();\\r\\n      }\\r\\n      _preValidatePurchase(_beneficiary, weiAmount);\\r\\n      uint256 tokensToBePurchased = weiAmount.mul(rate);\\r\\n      if ((stage == CrowdsaleStage.PreICO) \\u0026\\u0026 (tokensToBePurchased \\u003e tokenRemainingForSaleInPreICO)) {\\r\\n         revert();  //Block Incoming ETH Deposits for PreICO stage if tokens to be purchased, exceeds remaining tokens for sale in Pre ICO\\r\\n      }\\r\\n      \\r\\n      else if ((stage == CrowdsaleStage.ICO) \\u0026\\u0026 (tokensToBePurchased \\u003e tokenRemainingForSaleInICO)) {\\r\\n        revert();  //Block Incoming ETH Deposits for ICO stage if tokens to be purchased, exceeds remaining tokens for sale in ICO\\r\\n      }\\r\\n      \\r\\n       // calculate YbaoFinanceToken amount to be created\\r\\n       uint256 tokens = _getTokenAmount(weiAmount);\\r\\n        _processPurchase(_beneficiary, tokens);\\r\\n        emit TokenPurchase(\\r\\n          msg.sender,\\r\\n          _beneficiary,\\r\\n          weiAmount,\\r\\n          tokens\\r\\n        );\\r\\n        \\r\\n      _forwardFunds();\\r\\n      \\r\\n      if (stage == CrowdsaleStage.PreICO) {\\r\\n          totalWeiRaisedDuringPreICO = totalWeiRaisedDuringPreICO.add(weiAmount);\\r\\n          tokenRemainingForSaleInPreICO = tokenRemainingForSaleInPreICO.sub(tokensToBePurchased);\\r\\n          if(tokenRemainingForSaleInPreICO == 0){       // Switch to ICO Stage when all tokens allocated for PreICO stage are being sold out\\r\\n              switchToICOStage();\\r\\n          }\\r\\n      }\\r\\n      else if (stage == CrowdsaleStage.ICO) {\\r\\n          totalWeiRaisedDuringICO = totalWeiRaisedDuringICO.add(weiAmount);\\r\\n          tokenRemainingForSaleInICO = tokenRemainingForSaleInICO.sub(tokensToBePurchased);\\r\\n          if(tokenRemainingForSaleInICO == 0 \\u0026\\u0026 tokenRemainingForSaleInPreICO == 0){       // End Crowdsale when all tokens allocated for For Sale are being sold out\\r\\n              endCrowdsale();\\r\\n          }\\r\\n      }\\r\\n  }\\r\\n  \\r\\n  // Finish: Finalizing the Crowdsale.\\r\\n  // ====================================================================\\r\\n\\r\\n  function endCrowdsale() public onlyOwner {\\r\\n      require(!isEnded \\u0026\\u0026 stage == CrowdsaleStage.ICO,\\\"Should be at ICO Stage to Finalize the Crowdsale\\\");\\r\\n      uint256 unsoldTokens = tokenRemainingForSaleInPreICO.add(tokenRemainingForSaleInICO);\\r\\n      if (unsoldTokens \\u003e 0) {\\r\\n          tokenRemainingForSaleInICO = 0;\\r\\n          tokenRemainingForSaleInPreICO = 0;\\r\\n          YbaoFinanceToken.transfer(owner,unsoldTokens);\\r\\n      }\\r\\n      emit Ended(totalWeiRaised(),unsoldTokens);\\r\\n      isEnded = true;\\r\\n  }\\r\\n  // ===============================\\r\\n    \\r\\n    function balanceOf(address tokenHolder) external view returns(uint256 balance){\\r\\n        return YbaoFinanceToken.balanceOf(tokenHolder);\\r\\n    }\\r\\n    \\r\\n    function totalWeiRaised() public view returns(uint256){\\r\\n        return totalWeiRaisedDuringPreICO.add(totalWeiRaisedDuringICO);\\r\\n    }\\r\\n    \\r\\n}\"},\"YbaoToken.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    constructor () internal { }\\r\\n\\r\\n    function _msgSender() internal view  returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view  returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view  returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view  returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public   returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view   returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public   returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public   returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal  {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal  {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal  {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal  {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n   \\r\\n}\\r\\n\\r\\ncontract ERC20Burnable is Context, ERC20 {\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) public {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) public {\\r\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\r\\n\\r\\n        _approve(account, _msgSender(), decreasedAllowance);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract YbaoToken is  ERC20Burnable {\\r\\n\\r\\n    string public constant name = \\\"YBAO.Finance\\\";\\r\\n    string public constant symbol = \\\"YBAO\\\";\\r\\n    uint8 public constant decimals = 18;  \\r\\n    \\r\\n    using SafeMath for uint256;\\r\\n\\r\\n   constructor(address owner) public {  \\r\\n     //12000 YBAO Token Total Supply\\r\\n    \\r\\n      uint256 allocatedForCrowdsale = 8000;\\r\\n      uint256 ownerFunds = 4000;\\r\\n      \\r\\n      _mint(owner, ownerFunds.mul(1e18));  //4000 YBAO Token to Owner\\r\\n      _mint(msg.sender, allocatedForCrowdsale.mul(1e18)); //8000 YBAO Token to Crowdsale contract\\r\\n    }\\r\\n}\"}}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBeneficiaryAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchToICOStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRemainingForSaleInICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRemainingForSaleInPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YbaoFinanceToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaisedDuringPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensForSaleDuringPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaisedDuringICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensForSaleDuringICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyYBAOToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialRate\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalWeiRaisedInCrowdsale\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unsoldTokensTransferredToOwner\",\"type\":\"uint256\"}],\"name\":\"Ended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"EthTransferred\",\"type\":\"event\"}]","ContractName":"YbaoFinanceTokenCrowdsale","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000197dadc7db90c49cdb3cdeadb57a862ab5d822aa","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0299a071098ad9cc7707b271b49165f1ba88e7d5c8505cc9c3cd3b9c58a746fa"}]}