{"status":"1","message":"OK","result":[{"SourceCode":"/* Discussion:\r\n * //discord.com/invite/66tafq3\r\n */\r\n/* Description:\r\n * Unimergency - Phase 1 - Call the flushToWallet function in the Liquidity Mining Contract and move assets in the Redeem Contract\r\n */\r\n//SPDX-License-Identifier: MIT\r\n//BUIDL\r\npragma solidity ^0.7.2;\r\n\r\ncontract StakeEmergencyFlushProposal {\r\n\r\n    address private constant TOKENS_RECEIVER = 0x4f4cD2b3113e0A75a84b9ac54e6B5D5A12384563;\r\n\r\n    address private constant STAKE_ADDRESS = 0xb81DDC1BCB11FC722d6F362F4357787E6F958ce0;\r\n\r\n    address private constant UNISWAP_V2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\r\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    address private constant REWARD_TOKEN_ADDRESS = 0x7b123f53421b1bF8533339BFBdc7C98aA94163db;\r\n\r\n    uint256 private constant REWARD_TOKEN_AMOUNT = 24000218797766611016734;\r\n\r\n    uint256 private constant ETH_AMOUNT = 36000000000000000000;\r\n\r\n    address private WETH_ADDRESS = IUniswapV2Router(UNISWAP_V2_ROUTER).WETH();\r\n\r\n    string private _metadataLink;\r\n\r\n    constructor(string memory metadataLink) {\r\n        _metadataLink = metadataLink;\r\n    }\r\n\r\n    function getMetadataLink() public view returns(string memory) {\r\n        return _metadataLink;\r\n    }\r\n\r\n    function onStart(address, address) public {\r\n    }\r\n\r\n    function onStop(address) public {\r\n    }\r\n\r\n    function callOneTime(address) public {\r\n        IMVDProxy proxy = IMVDProxy(msg.sender);\r\n        address votingTokenAddress = proxy.getToken();\r\n        IStake stake = IStake(STAKE_ADDRESS);\r\n        address[] memory poolTokens = stake.tokens();\r\n        (uint256 votingTokenAmount, address[] memory poolAddresses, uint256[] memory poolTokensAmounts) = _getPoolTokensAmount(votingTokenAddress, poolTokens);\r\n        stake.emergencyFlush();\r\n        _transferPoolTokens(proxy, votingTokenAddress, votingTokenAmount, poolAddresses, poolTokensAmounts);\r\n        proxy.transfer(TOKENS_RECEIVER, REWARD_TOKEN_AMOUNT, REWARD_TOKEN_ADDRESS);\r\n        if(ETH_AMOUNT > 0) {\r\n            proxy.transfer(TOKENS_RECEIVER, ETH_AMOUNT, address(0));\r\n        }\r\n    }\r\n\r\n    function _getPoolTokensAmount(address votingTokenAddress, address[] memory poolTokens) private view returns(uint256 votingTokenAmount, address[] memory poolAddresses, uint256[] memory poolTokensAmounts) {\r\n        poolAddresses = new address[](poolTokens.length);\r\n        poolTokensAmounts = new uint256[](poolTokens.length);\r\n        for(uint256 i = 0; i < poolTokens.length; i++) {\r\n            IERC20 pool = IERC20(poolAddresses[i] = IUniswapV2Factory(UNISWAP_V2_FACTORY).getPair(votingTokenAddress, poolTokens[i]));\r\n            poolTokensAmounts[i] = pool.balanceOf(STAKE_ADDRESS);\r\n        }\r\n        votingTokenAmount = IERC20(votingTokenAddress).balanceOf(STAKE_ADDRESS);\r\n    }\r\n\r\n    function _transferPoolTokens(IMVDProxy proxy, address votingTokenAddress, uint256 votingTokenAmount, address[] memory poolAddresses, uint256[] memory poolTokensAmounts) private {\r\n        for(uint256 i = 0; i < poolAddresses.length; i++) {\r\n            proxy.transfer(TOKENS_RECEIVER, poolTokensAmounts[i], poolAddresses[i]);\r\n        }\r\n        proxy.transfer(TOKENS_RECEIVER, votingTokenAmount, votingTokenAddress);\r\n    }\r\n}\r\n\r\ninterface IStake {\r\n    function emergencyFlush() external;\r\n    function tokens() external view returns(address[] memory);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getToken() external view returns(address);\r\n    function getMVDWalletAddress() external view returns(address);\r\n    function transfer(address receiver, uint256 value, address token) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataLink\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callOneTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadataLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeEmergencyFlushProposal","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003a697066733a2f2f697066732f516d553246697035547238514a444546326f7331436d4877714577556d6b774375446a655066685337594b617a47000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://830de221bbb43f5e93f0fedee86db77a8ee866544a29eb8b80fa6701900c537e"}]}