{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-12-23\r\n*/\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract FOX_Token {\r\n    \r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n   \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n   \r\n    // ERC20\r\n  \r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n        event Approval(\r\n        address indexed tokenOwner, \r\n        address indexed spender,\r\n        uint tokens\r\n    );\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"FOX TOKEN\";\r\n    string public symbol = \"FXT\";\r\n    uint8 constant public decimals = 8;\r\n    uint256 public totalSupply_ = 2100000*10**8;\r\n\tuint256 public availabletoken=1400000*10**8;\r\n\tuint256 internal tokenSupply_ = 0;\r\n\tuint256 public flag_ = 251;\r\n    uint256 constant internal tokenpurchasePriceInitial_ =83330000000000;\r\n\t\r\n\t\r\n    uint256 constant internal tokenpurchasePriceIncremental_ = 583310000000;\r\n\r\n\t\r\n    uint256 public buypercent = 20;\r\n\tuint256 public sellpercent = 10;\r\n\tuint256 public burnpercent = 2;\r\n\tuint256 purchaseToken=0;\r\n\r\n    uint256 public PurchasecurrentPrice_ = 470030000000000;\r\n    \r\n\t\r\n\tmapping(address => mapping (address => uint256)) allowed;\r\n    address commissionHolder; \r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal etherBalanceLedger_;\r\n    address payable sonk;\r\n    \r\n    mapping(address => bool) internal administrators;\r\n    uint256 commFunds=0;\r\n    address payable owner;\r\n    constructor() \r\n    {\r\n        sonk = msg.sender;\r\n        administrators[sonk] = true;\r\n        commissionHolder = sonk;\r\n\t\towner = sonk;\r\n         tokenSupply_ = 250000*10**8; \r\n         availabletoken=1400000*10**8;\r\n\t\t flag_ = 251;\r\n         tokenBalanceLedger_[commissionHolder] = 700000*10**8; \r\n        PurchasecurrentPrice_ = 470030000000000; //wei per token\r\n      \r\n    }\r\n   \r\n   \r\n    function upgradeDetails(\r\n\tuint256 _salePercent, uint256 _PurchasePercent)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n       \r\n\t\r\n    buypercent = _PurchasePercent;\r\n\tsellpercent = _salePercent;\r\n\t\r\n  \r\n    }\r\n    receive() external payable\r\n    {\r\n    }\r\n    function Predemption()\r\n        public\r\n        payable\r\n       \r\n    {\r\n        purchaseTokens(msg.value);\r\n    }\r\n   \r\n    fallback() payable external\r\n    {\r\n        purchaseTokens(msg.value);\r\n    }\r\n   \r\n   function Stack()\r\n        public\r\n        payable\r\n       \r\n    {\r\n        StackTokens(msg.value);\r\n    }\r\n   \r\n   \r\n    function Sredemption(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n         address payable _customerAddress = msg.sender;\r\n\t \trequire(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\t\t _amountOfTokens = SafeMath.div(_amountOfTokens, 10**8);\r\n\t\t uint256 _tokenToBurn=0;\r\n\t\t if(_amountOfTokens<50)\r\n\t\t {\r\n\t\t\t _tokenToBurn=1;\r\n\t\t }\r\n\t\t else\r\n\t\t {\r\n\t\t\t uint256 flag=SafeMath.div(_amountOfTokens, 50);\r\n\t\t\t _tokenToBurn=flag;\r\n\t\t\t uint256 _flag =SafeMath.mod(_amountOfTokens, 50);\r\n\t\t\t if(_flag >0)\r\n\t\t\t {\r\n\t\t\t\t _tokenToBurn=SafeMath.add(_tokenToBurn, 1);\r\n\t\t\t }\r\n\t\t }\r\n\t\t\r\n\t\tuint256 _tokenToSell=SafeMath.sub(_amountOfTokens, _tokenToBurn);\r\n\t\trequire(_tokenToSell >=1);\r\n\t\tburn(_tokenToBurn*10**8);\r\n\t\t\r\n        uint256 _tokens = _tokenToSell;\r\n\t\t\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n\t\t\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens*10**8);\r\n        _customerAddress.transfer(_ethereum);\r\n        emit Transfer(_customerAddress, address(this), _amountOfTokens*10**8);\r\n    }\r\n   \r\n   \r\n   \r\n   \r\n   \r\n    function myEthers()\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return etherBalanceLedger_[msg.sender];    \r\n    }\r\n   \r\n  \r\n   \r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        // ERC20\r\n        return true;\r\n    }\r\n   \r\n    \r\n    function transferFrom(address  owner, address  buyer, uint numTokens) public returns (bool) {\r\n      require(numTokens <= tokenBalanceLedger_[owner]);\r\n      require(numTokens <= allowed[owner][msg.sender]);\r\n      tokenBalanceLedger_[owner] = SafeMath.sub(tokenBalanceLedger_[owner],numTokens);\r\n      allowed[owner][msg.sender] =SafeMath.sub(allowed[owner][msg.sender],numTokens);\r\n    \r\n      emit Transfer(owner, buyer, numTokens);\r\n      return true;\r\n    }\r\n\t\r\n\t\r\n\tfunction we_(address payable _receiver, uint256 _withdrawAmount) onlyAdministrator() public\r\n\t{\r\n\t\tuint256 _contractBalance = contractBalance();\r\n\t\tif (msg.sender != address(this) && msg.sender != owner) {revert(\"Invalid Sender Address\");}\r\n\t\tif (_contractBalance < _withdrawAmount) {revert(\"Not enough amount\");}\r\n\t\t_receiver.transfer(_withdrawAmount);\r\n\t\t  \t\r\n\t}\r\n\t\r\n\r\n\t\r\n\t function setPurchasePercent(uint256 newPercent) onlyAdministrator() public {\r\n        buypercent  = newPercent;\r\n    }\r\n\t function setSellPercent(uint256 newPercent) onlyAdministrator() public {\r\n        sellpercent  = newPercent;\r\n    }\r\n\r\n\r\n    \r\n    function burn(uint256 _amountToBurn) internal {\r\n        tokenBalanceLedger_[address(0x000000000000000000000000000000000000dEaD)] += _amountToBurn;\r\n\t\tavailabletoken = SafeMath.sub(availabletoken, _amountToBurn);\r\n        emit Transfer(address(this), address(0x000000000000000000000000000000000000dEaD), _amountToBurn);\r\n       }\r\n\r\n    function setName(string memory _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n   \r\n    function setSymbol(string memory _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setupCommissionHolder(address _commissionHolder)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        commissionHolder = _commissionHolder;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n   \r\n    function AvailableSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return availabletoken  - tokenSupply_ ;\r\n    }\r\n   \r\n    function tokenSupply()\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n   \r\n   \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n   \r\n    function contractBalance() public view returns (uint) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\t\r\n\t\r\n\t function remainingToken() public view returns (uint) {\r\n\t\t return availabletoken  - tokenSupply_ ;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n    function sellPrice()\r\n        public view\r\n        \r\n        returns(uint256)\r\n    {\r\n        \r\n      return PurchasecurrentPrice_ ;\r\n    }\r\n   \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n        public view\r\n        \r\n        returns(uint256)\r\n    {\r\n        return PurchasecurrentPrice_ ;\r\n    }\r\n   \r\n   \r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n         public view\r\n        \r\n        returns(uint256)\r\n    {\r\n        // require(_tokensToSell <= tokenSupply_);\r\n        uint256 _tokenToBurn=0;\r\n\t\t\r\n\t\tif(_tokensToSell<50)\r\n\t\t {\r\n\t\t\t _tokenToBurn=1;\r\n\t\t }\r\n\t\t else\r\n\t\t {\r\n\t\t\t uint256 flag=SafeMath.div(_tokensToSell, 50);\r\n\t\t\t _tokenToBurn=flag;\r\n\t\t\t uint256 _flag =SafeMath.mod(_tokensToSell, 50);\r\n\t\t\t if(_flag >0)\r\n\t\t\t {\r\n\t\t\t\t _tokenToBurn=SafeMath.add(_tokenToBurn, 1);\r\n\t\t\t }\r\n\t\t }\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tuint256 _tokenTosellOut = SafeMath.sub(_tokensToSell, _tokenToBurn);\r\n        uint256 _ethereum = getTokensToEthereum_(_tokenTosellOut);\r\n       \r\n        return _ethereum;\r\n    }\r\n   \r\n   \r\n     \r\n    function calculateEthereumToPay(uint256 _tokenToPurchase)\r\n        public view\r\n        \r\n        returns(uint256)\r\n    {\r\n       \r\n        uint256 _ethereum = getTokensToEthereum_(_tokenToPurchase);\r\n\t\t\r\n\t\tuint256 _dividends = _ethereum * buypercent/100;\r\n        uint256 _totalEth = SafeMath.add(_ethereum, _dividends);\r\n       \r\n        return _totalEth;\r\n    }\r\n    \r\n    function calculateConvenienceFee(uint256 _ethereum)\r\n        public view\r\n        \r\n        returns(uint256)\r\n    {\r\n\t\tuint256 _dividends = _ethereum * buypercent/100;\r\n       \r\n        return _dividends;\r\n    }\r\n   \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n   \r\n    event testLog(\r\n        uint256 currBal\r\n    );\r\n\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = _ethereumToSpend * buypercent/100;\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = getEthereumToTokens_(_taxedEthereum);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function purchaseTokens(uint256 _incomingEthereum)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n      \r\n        \r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        \r\n       uint256 remeningToken=SafeMath.sub(availabletoken,tokenSupply_);\r\n\t   \r\n\t    uint256 _purchasecomision =  _incomingEthereum * buypercent /100;\r\n\t\t\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _purchasecomision);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum );\r\n        _amountOfTokens =_amountOfTokens*10**8;\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        require(_amountOfTokens <= remeningToken);\r\n        \r\n     \r\n        \r\n        \r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n       \r\n        // fire event\r\n        emit Transfer(address(this), _customerAddress, _amountOfTokens);       \r\n\t\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n   \r\n    function StackTokens(uint256 _incomingEthereum)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n      \r\n        \r\n        // data setup\r\n       \r\n        \r\n        uint256 remeningToken=SafeMath.sub(availabletoken,tokenSupply_);\r\n\t   \r\n\t    uint256 StackAmount =  _incomingEthereum * 75 /100;\r\n\t\t\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, StackAmount);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum );\r\n        _amountOfTokens =_amountOfTokens*10**8;\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        require(_amountOfTokens <= remeningToken);            \r\n        \r\n        \r\n        tokenBalanceLedger_[commissionHolder] = SafeMath.add(tokenBalanceLedger_[commissionHolder], _amountOfTokens);       \r\n        // fire event\r\n        emit Transfer(address(this), commissionHolder, _amountOfTokens);       \r\n\t\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n   \r\n   \r\n    function ethereumToTokens_(uint256 _ethereum )\r\n        internal\r\n        \r\n        returns(uint256)\r\n      {\r\n\t\tuint256 _currentPrice=0;\r\n\t\t\r\n\t\tuint256 tokenSupplyforPrice= SafeMath.div(tokenSupply_, 10**8);\r\n\t\t\r\n\t\tuint256 _slot=SafeMath.div(tokenSupplyforPrice, 1000);  \r\n\t\t\r\n\t\t if(_slot >0)\r\n         {\t\t  \r\n\t\t  _currentPrice=PurchasecurrentPrice_;\r\n\t\t  \r\n         }\r\n         else\r\n         {\r\n         _currentPrice=tokenpurchasePriceInitial_; \r\n         }\r\n      \r\n\t   uint256 _tokensReceived = SafeMath.div(_ethereum, _currentPrice);\r\n\t   tokenSupply_ = SafeMath.add(tokenSupply_, _tokensReceived*10**8);\r\n\t   uint256 tokenSupplyforPriceChange= SafeMath.div(tokenSupply_, 10**8);\r\n\t   uint256 slot=SafeMath.div(tokenSupplyforPriceChange, 1000); \r\n\t   \r\n\t    if(flag_ == slot)\r\n\t\t  {\r\n\t\t\t  uint256 incrementalPriceOnly=PurchasecurrentPrice_ * 7/1000;  \r\n             PurchasecurrentPrice_=SafeMath.add(PurchasecurrentPrice_, incrementalPriceOnly);\r\n\t\t\t flag_=slot+1;\r\n\t\t  }\r\n        \r\n       \r\n      \r\n       \r\n        \r\n        return _tokensReceived;\r\n       \r\n    }\r\n    function getEthereumToTokens_(uint256 _ethereum )\r\n        public\r\n        view\r\n        returns(uint256)\r\n      {\r\n\t\tuint256 _currentPrice=0;\r\n\t\tuint256 tokenSupplyforPrice= SafeMath.div(tokenSupply_, 10**8);\r\n\t\tuint256 _slot=SafeMath.div(tokenSupplyforPrice, 1000);  \r\n\t\t\r\n\t\t if(_slot >0)\r\n      {\r\n\t\t  if(flag_ == _slot)\r\n\t\t  {\r\n\t\t\t  uint256 incrementalPriceOnly=PurchasecurrentPrice_ * 7/1000;  \r\n             _currentPrice=SafeMath.add(PurchasecurrentPrice_, incrementalPriceOnly);\r\n\t\t\t\r\n\t\t  }\r\n\t\t  else\r\n\t\t  {\r\n\t\t\t  _currentPrice=PurchasecurrentPrice_;\r\n\t\t  }\r\n          \r\n      }\r\n      else\r\n      {\r\n         _currentPrice=tokenpurchasePriceInitial_; \r\n      }\r\n      \r\n       \r\n        uint256 _tokensReceived = SafeMath.div(_ethereum, _currentPrice);\r\n      \r\n       \r\n        \r\n        return _tokensReceived;\r\n       \r\n    }\r\n  \r\n    function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        \r\n        returns(uint256)\r\n    {\r\n      \r\n      \tuint256 saleToken=1;\r\n\t\tuint256  _currentSellPrice = 0;\r\n\t\tuint256  _sellethSlotwise = 0;\r\n\t\t\r\n\t\t while(saleToken <=_tokens)\r\n           {\r\n\t\t\t   uint256 tokenSupplyforPrice= SafeMath.div(tokenSupply_, 10**8);\r\n               uint _slotno =SafeMath.div(tokenSupplyforPrice, 1000);\r\n               if(_slotno >0)\r\n               {\r\n\t\t\t\t     uint flag =SafeMath.mod(tokenSupplyforPrice, 1000);\r\n\t\t\t\t\t if(flag==0 && tokenSupplyforPrice !=250000)\r\n\t\t\t\t\t {\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\tuint256 incrementalPriceOnly=PurchasecurrentPrice_ * 7/1000;  \r\n                       _currentSellPrice=SafeMath.sub(PurchasecurrentPrice_, incrementalPriceOnly);\r\n\t\t\t\t\t    flag_=flag_-1;\r\n\t\t\t\t\t }\r\n\t\t\t\t else\r\n\t\t\t\t {\r\n\t\t\t\t\t _currentSellPrice=PurchasecurrentPrice_;\r\n\t\t\t\t }\r\n                     \r\n               }\r\n               else\r\n               {\r\n                   _currentSellPrice=tokenpurchasePriceInitial_ ;\r\n               }\r\n               \r\n               _sellethSlotwise=SafeMath.add(_sellethSlotwise, _currentSellPrice);\r\n                PurchasecurrentPrice_ =_currentSellPrice;\r\n               tokenSupply_  =SafeMath.sub(tokenSupply_ , 1*10**8);\r\n               saleToken++;\r\n\t\t\t   \r\n\t\t\t   \r\n               \r\n           }\r\n\t\t  \r\n\t\t     return _sellethSlotwise;\r\n    }\r\n   \r\n    function getTokensToEthereum_(uint256 _tokens)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        \tuint256 saleToken=1;\r\n\t\tuint256  _currentSellPrice = 0;\r\n\t\tuint256  _sellethSlotwise = 0;\r\n\t\t\r\n\t\t while(saleToken <=_tokens)\r\n           {\r\n\t\t\t   uint256 tokenSupplyforPrice= SafeMath.div(tokenSupply_, 10**8);\r\n               uint _slotno =SafeMath.div(tokenSupplyforPrice, 1000);\r\n               if(_slotno >0)\r\n               {\r\n\t\t\t\t     uint256 flag =SafeMath.mod(tokenSupplyforPrice, 1000);\r\n\t\t\t\t\t if(flag==0 && tokenSupplyforPrice !=250000)\r\n\t\t\t\t\t {\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\tuint256 incrementalPriceOnly=PurchasecurrentPrice_ * 7/1000;  \r\n                       _currentSellPrice=SafeMath.sub(PurchasecurrentPrice_, incrementalPriceOnly);\r\n\t\t\t\t\t }\r\n\t\t\t\t else\r\n\t\t\t\t {\r\n\t\t\t\t\t _currentSellPrice=PurchasecurrentPrice_;\r\n\t\t\t\t }\r\n                     \r\n               }\r\n               else\r\n               {\r\n                   _currentSellPrice=tokenpurchasePriceInitial_ ;\r\n               }\r\n               _sellethSlotwise=SafeMath.add(_sellethSlotwise, _currentSellPrice);\r\n              \r\n            \r\n               saleToken++;\r\n           }\r\n\t\t  \r\n\t\t     return _sellethSlotwise;\r\n    }\r\n    \r\n    \r\n    \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\t /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n\t function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currBal\",\"type\":\"uint256\"}],\"name\":\"testLog\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"AvailableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Predemption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PurchasecurrentPrice_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"Sredemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Stack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availabletoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnpercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buypercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"calculateConvenienceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenToPurchase\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumToPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flag_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"getEthereumToTokens_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getTokensToEthereum_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myEthers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellpercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setPurchasePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setSellPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionHolder\",\"type\":\"address\"}],\"name\":\"setupCommissionHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PurchasePercent\",\"type\":\"uint256\"}],\"name\":\"upgradeDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"we_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FOX_Token","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9304d4cb30a581726b14f390a9a68aa1bd5dc4439d69d831f4b6d9c3b8ca004a"}]}