{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"Savix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SavixSupply.sol\\\";\\r\\n\\r\\ncontract Savix is IERC20\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address private _owner;\\r\\n    string private constant NAME = \\\"Savix\\\";\\r\\n    string private constant SYMBOL = \\\"SVX\\\";\\r\\n    uint private constant DECIMALS = 9;\\r\\n    uint private constant MINTIMEWIN = 60;\\r\\n    uint private constant CONSTINTEREST = 8;\\r\\n    uint private _constGradient = 0;\\r\\n\\r\\n    bool private _stakingActive = false;\\r\\n    uint256 private _stakingSince = 0;\\r\\n\\r\\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\\r\\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\\r\\n    uint256 private constant INITIAL_TOKEN_SUPPLY = 10**5 * 10**DECIMALS;\\r\\n\\r\\n    // TOTAL_FRAGMENTS is a multiple of INITIAL_TOKEN_SUPPLY so that _fragmentsPerToken is an integer.\\r\\n    // Use the highest value that fits in a uint256 for max granularity.\\r\\n    uint256 private constant TOTAL_FRAGMENTS = MAX_UINT256 - (MAX_UINT256 % INITIAL_TOKEN_SUPPLY);\\r\\n\\r\\n    uint256 private constant MAX_SUPPLY = MAX_UINT128;  // (2^128) - 1\\r\\n    \\r\\n    uint256 private _totalSupply = INITIAL_TOKEN_SUPPLY;\\r\\n    uint256 private _lastTotalSupply = INITIAL_TOKEN_SUPPLY;\\r\\n    uint256 private _lastAdjustTime = 0;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    uint256[2][] private _supplyMap;\\r\\n\\r\\n    bool _transferLock = true;\\r\\n\\r\\n    constructor() public\\r\\n    {\\r\\n        _owner = msg.sender;\\r\\n        \\r\\n         _totalSupply = INITIAL_TOKEN_SUPPLY;\\r\\n        _balances[_owner] = TOTAL_FRAGMENTS;\\r\\n\\r\\n        _supplyMap.push([0, 100000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([7 * SavixSupply.SECPERDAY, 115000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([30 * SavixSupply.SECPERDAY, 130000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([6 * 30 * SavixSupply.SECPERDAY, 160000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([12 * 30 * SavixSupply.SECPERDAY, 185000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([18 * 30 * SavixSupply.SECPERDAY, 215000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([24 * 30 * SavixSupply.SECPERDAY, 240000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([48 * 30 * SavixSupply.SECPERDAY, 300000 * 10**DECIMALS]);\\r\\n        \\r\\n        _constGradient = SafeMath.div(INITIAL_TOKEN_SUPPLY * CONSTINTEREST, 360 * SavixSupply.SECPERDAY * 100);\\r\\n    }\\r\\n    \\r\\n    modifier validRecipient(address to)\\r\\n    {\\r\\n        require(to != address(0) \\u0026\\u0026 to != address(this));\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner \\r\\n    {\\r\\n        require(msg.sender == _owner,\\\"Only owner can call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) private view returns (bool)\\r\\n    {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return (size \\u003e 0);\\r\\n    }\\r\\n\\r\\n    function supplyMap() external view returns (uint256[2][] memory) \\r\\n    {\\r\\n        return _supplyMap;\\r\\n    }\\r\\n\\r\\n    function initialSupply() external pure returns (uint256) \\r\\n    {\\r\\n        return INITIAL_TOKEN_SUPPLY;\\r\\n    }\\r\\n\\r\\n    function finalGradient() external view returns (uint) \\r\\n    {\\r\\n        return _constGradient;\\r\\n    }\\r\\n\\r\\n    function lastAdjustTime() external view returns (uint) \\r\\n    {\\r\\n        return _lastAdjustTime;\\r\\n    }\\r\\n\\r\\n    function lastTotalSupply() external view returns (uint) \\r\\n    {\\r\\n        return _lastTotalSupply;\\r\\n    }\\r\\n\\r\\n    function unlockTransfers() \\r\\n      external \\r\\n      onlyOwner\\r\\n    {\\r\\n        _transferLock = false;\\r\\n    }\\r\\n\\r\\n    function startStaking() \\r\\n      external \\r\\n      onlyOwner\\r\\n    {\\r\\n        _stakingActive = true;\\r\\n        _stakingSince = block.timestamp;\\r\\n\\r\\n        _constGradient = SafeMath.div(INITIAL_TOKEN_SUPPLY * CONSTINTEREST, 360 * SavixSupply.SECPERDAY *100);\\r\\n        _totalSupply = _supplyMap[0][1];\\r\\n        _lastTotalSupply = _totalSupply;\\r\\n        _lastAdjustTime = 0;\\r\\n\\r\\n    }\\r\\n    \\r\\n    function calculateNewSupply(uint256 calcTime) public returns (uint256)\\r\\n    {\\r\\n        SavixSupply.AdjustedSupplyData memory supplyData = SavixSupply.getAdjustedSupply(_supplyMap, calcTime, _lastAdjustTime, _totalSupply, _constGradient);\\r\\n        if (_totalSupply == supplyData.newSupply)\\r\\n            return _totalSupply;\\r\\n\\r\\n        _lastTotalSupply = _totalSupply;\\r\\n        _totalSupply = supplyData.newSupply;\\r\\n        _lastAdjustTime = supplyData.adjustTime;\\r\\n        \\r\\n        return supplyData.newSupply; \\r\\n    }\\r\\n\\r\\n\\r\\n    function name() external pure returns (string memory) \\r\\n    {\\r\\n        return NAME;\\r\\n    }\\r\\n\\r\\n    function symbol() external pure returns (string memory)\\r\\n    {\\r\\n        return SYMBOL;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure returns (uint8)\\r\\n    {\\r\\n        return uint8(DECIMALS);\\r\\n    }\\r\\n\\r\\n    function stakingActive() external view returns (bool)\\r\\n    {\\r\\n        return _stakingActive;\\r\\n    }\\r\\n\\r\\n    function stakingSince() external view returns (uint256)\\r\\n    {\\r\\n        return _stakingSince;\\r\\n    }\\r\\n\\r\\n    function stakingFrequence() external pure returns (uint)\\r\\n    {\\r\\n        return SavixSupply.MINTIMEWIN;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function totalSupply() override external view returns (uint256)\\r\\n    {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    \\r\\n    function dailyInterest() external view returns (uint)\\r\\n    {\\r\\n            return SavixSupply.getDailyInterest(block.timestamp - _stakingSince, _lastAdjustTime, _totalSupply, _lastTotalSupply); \\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) override public view returns (uint256)\\r\\n    {\\r\\n        return _balances[account].div(TOTAL_FRAGMENTS.div(_totalSupply));\\r\\n    }\\r\\n\\r\\n    function _calculateFragments(uint256 value) internal returns (uint256)\\r\\n    {\\r\\n        if(_stakingActive == true)\\r\\n            _totalSupply = calculateNewSupply(block.timestamp - _stakingSince);\\r\\n\\r\\n        return value.mul(TOTAL_FRAGMENTS.div(_totalSupply));\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) override\\r\\n        external\\r\\n        validRecipient(to)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(msg.sender == _owner || _transferLock == false || isContract(msg.sender), \\\"Tokens are locked for transfer\\\");\\r\\n        uint256 rAmount = _calculateFragments(value);\\r\\n        _balances[msg.sender] = _balances[msg.sender].sub(rAmount,\\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[to] = _balances[to].add(rAmount);\\r\\n        emit Transfer(msg.sender, to, value);       \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 value) \\r\\n        override\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(msg.sender == _owner || _transferLock == false || isContract(sender), \\\"Tokens are locked for transfer\\\");\\r\\n        uint256 rAmount = _calculateFragments(value);\\r\\n        _balances[sender] = _balances[sender].sub(rAmount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(rAmount);\\r\\n        emit Transfer(sender, recipient, value);\\r\\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(value,\\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) override external view returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    \\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool)\\r\\n    {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool)\\r\\n    {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue,\\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function approve(address spender, uint256 value) override external returns (bool) \\r\\n    {\\r\\n        _allowances[msg.sender][spender] = 0;\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 value) internal \\r\\n    {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        // In order to exclude front-running attacks:\\r\\n        // To change the approve amount you first have to reduce the addresses`\\r\\n        // allowance to zero by calling `approve(_spender, 0)` if it is not\\r\\n        // already 0 to mitigate the race condition described here:\\r\\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n        require((value == 0 || _allowances[msg.sender][spender] == 0), \\\"possible front-running attack\\\");\\r\\n        \\r\\n        _allowances[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    // use same logic to adjust balances as in function transfer\\r\\n    // only distribute from owner wallet (ecosystem fund)\\r\\n    // gas friendly way to do airdrops or giveaways\\r\\n    function distributeTokens(address[] memory addresses, uint256 value)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint256 rAmount = _calculateFragments(value);\\r\\n        _balances[_owner] = _balances[_owner].sub(rAmount * addresses.length,\\\"ERC20: distribution total amount exceeds balance\\\");\\r\\n        for (uint i = 0; i \\u003c addresses.length; i++)\\r\\n        {\\r\\n            _balances[addresses[i]] = _balances[addresses[i]].add(rAmount);\\r\\n            emit Transfer(_owner, addresses[i], value);       \\r\\n        }\\r\\n    }\\r\\n\\r\\n    // use same logic to adjust balances as in function transfer\\r\\n    // only distribute from owner wallet (ecosystem fund)\\r\\n    // gas friendly way to do airdrops or giveaways\\r\\n    function distributeTokensFlexSum(address[] memory addresses, uint256[] memory values)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        // there has to be exacly 1 value per address\\r\\n        require(addresses.length == values.length); // Overflow check\\r\\n\\r\\n        uint256 valuesum = 0;\\r\\n        for (uint i = 0; i \\u003c values.length; i++)\\r\\n            valuesum += values[i];\\r\\n\\r\\n        _balances[_owner] = _balances[_owner].sub( _calculateFragments(valuesum),\\\"ERC20: distribution total amount exceeds balance\\\");\\r\\n\\r\\n        for (uint i = 0; i \\u003c addresses.length; i++)\\r\\n        {\\r\\n            _balances[addresses[i]] = _balances[addresses[i]].add(_calculateFragments(values[i]));\\r\\n            emit Transfer(_owner, addresses[i], values[i]);       \\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getOwner() \\r\\n      external\\r\\n      view \\r\\n    returns(address)\\r\\n    {\\r\\n        return _owner;\\r\\n    }\\r\\n}\\r\\n\"},\"SavixPresale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"./Savix.sol\\\";\\r\\n\\r\\ncontract SavixPresale\\r\\n{\\r\\n  string private constant NAME = \\\"SavixPresale\\\";\\r\\n\\r\\n  address private _owner;\\r\\n  \\r\\n  Savix private _token;\\r\\n\\r\\n  bool private _isActive = false;\\r\\n  bool private _isFinished = false;\\r\\n\\r\\n  uint256 private _startDate;\\r\\n  \\r\\n  struct Contributor \\r\\n  {\\r\\n      bool approved;\\r\\n      uint256 contribution;\\r\\n  }\\r\\n\\r\\n  mapping(address =\\u003e Contributor) private _contributors;\\r\\n\\r\\n  // Amount of wei raised\\r\\n  uint256 private _weiRaised;\\r\\n\\r\\n  uint256 private _tokensSold;\\r\\n  uint256 private _tokenUnlockDate;\\r\\n  \\r\\n  uint256 private constant MIN_CONTRIBUTION = 1 * 10**17; // 0.1 ETH\\r\\n  uint256 private constant MAX_CONTRIBUTION = 15 * 10**18; // 15 ETH\\r\\n  uint256 private constant TOKEN_RATE = 60; // svx per eth\\r\\n  uint256 private constant PRESALE_TOKEN_AMOUNT = 70000 * 10**9; // 9 decimals\\r\\n  \\r\\n  \\r\\n  constructor() public \\r\\n  {\\r\\n      _owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner()\\r\\n  {\\r\\n    require(msg.sender == _owner, \\\"Only Owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function getOwner() \\r\\n    external\\r\\n    view \\r\\n    returns(address)\\r\\n  {\\r\\n      return _owner;\\r\\n  }\\r\\n  \\r\\n  modifier mustBeActive()\\r\\n  {\\r\\n    require(_isActive == true, \\\"Presale not active\\\"); // presale must be active\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function isFinished() public view returns(bool)\\r\\n  {\\r\\n     return _isFinished;\\r\\n  }\\r\\n\\r\\n  function isActive() public view returns(bool)\\r\\n  {\\r\\n     return _isActive;\\r\\n  }\\r\\n\\r\\n  function name() external pure returns (string memory) \\r\\n  {\\r\\n      return NAME;\\r\\n  }\\r\\n\\r\\n  // Start-Region Self-Whitelist Process ----------------------------------------------------------\\r\\n  \\r\\n  function addContributor(address addr) \\r\\n    external \\r\\n    onlyOwner\\r\\n  {\\r\\n        _contributors[addr].approved = true;\\r\\n  }\\r\\n  \\r\\n  function addContributors(address[] memory addresses) \\r\\n    external \\r\\n    onlyOwner\\r\\n  {\\r\\n      for (uint256 i = 0; i \\u003c addresses.length; i++) \\r\\n      {\\r\\n          if(_contributors[addresses[i]].approved == false)\\r\\n          {\\r\\n            _contributors[addresses[i]].approved = true;\\r\\n          }\\r\\n      } \\r\\n  }\\r\\n  \\r\\n  function removeContributor(address addr)\\r\\n    external \\r\\n    onlyOwner\\r\\n  {\\r\\n      require(addr != address(0), \\\"Not a valid address\\\");\\r\\n      require(_contributors[addr].contribution == 0, \\\"User contributed already\\\");\\r\\n      delete _contributors[addr];\\r\\n  }\\r\\n  \\r\\n  function removeContributors(address[] memory addresses)\\r\\n    external \\r\\n    onlyOwner\\r\\n  {\\r\\n      for (uint256 i = 0; i \\u003c addresses.length; i++) \\r\\n      {\\r\\n          if(addresses[i] != address(0) \\u0026\\u0026 _contributors[addresses[i]].contribution == 0)\\r\\n          {\\r\\n            delete _contributors[addresses[i]];\\r\\n          }\\r\\n      } \\r\\n  }\\r\\n  \\r\\n  function getContributor(address addr) \\r\\n    external\\r\\n    view \\r\\n    returns(bool, uint256)\\r\\n  {\\r\\n      return (_contributors[addr].approved, _contributors[addr].contribution);\\r\\n  }\\r\\n\\r\\n  function isApproved() \\r\\n    external\\r\\n    view \\r\\n    returns(bool)\\r\\n  {\\r\\n      return _contributors[msg.sender].approved;\\r\\n  }\\r\\n\\r\\n\\r\\n  // End-Region Self-Whitelist Process ----------------------------------------------------------\\r\\n\\r\\n  /**\\r\\n  * token: target token contract for sale\\r\\n  */  \\r\\n  function startPresale(Savix token) \\r\\n    external \\r\\n    onlyOwner\\r\\n  {\\r\\n      require(_isActive == false,\\\"presale already active\\\");\\r\\n      require(_isFinished == false,\\\"presale already finished\\\");\\r\\n      require(Savix(token).balanceOf(address(this)) == PRESALE_TOKEN_AMOUNT , \\\"missing presale tokens\\\");\\r\\n      _token = Savix(token);\\r\\n      _isActive = true;\\r\\n      _startDate = now;\\r\\n      _tokenUnlockDate = _startDate + 180 days;\\r\\n  }\\r\\n  \\r\\n  function endPresale(address payable ethWallet) \\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n      _isActive = false;\\r\\n      _isFinished = true;\\r\\n      // send contributions to target wallet\\r\\n      ethWallet.transfer(payable(address(this)).balance);\\r\\n  }\\r\\n\\r\\n  function unlockRemainingTokens() \\r\\n    external \\r\\n    onlyOwner\\r\\n  {\\r\\n      require(now \\u003e= _tokenUnlockDate, \\\"Tokens still locked\\\");\\r\\n      uint256 balance = _token.balanceOf(address(this));\\r\\n      _token.transfer(msg.sender, balance);\\r\\n  }\\r\\n\\r\\n  function getTokenUnlockDate()\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _tokenUnlockDate;\\r\\n  }\\r\\n  \\r\\n  function getContributions() external view returns(uint256)\\r\\n  {\\r\\n      return _weiRaised;\\r\\n  }\\r\\n\\r\\n  function getEthBalance() external view returns(uint256)\\r\\n  {\\r\\n    return payable(address(this)).balance;\\r\\n  }\\r\\n\\r\\n  function getMinContribution() external pure returns(uint256)\\r\\n  {\\r\\n    return MIN_CONTRIBUTION;\\r\\n  }\\r\\n\\r\\n  function getMaxContribution() external pure returns(uint256)\\r\\n  {\\r\\n    return MAX_CONTRIBUTION;\\r\\n  }\\r\\n\\r\\n  function getTokenRate() external pure returns(uint256)\\r\\n  {\\r\\n    return TOKEN_RATE;\\r\\n  }\\r\\n\\r\\n  function getTokensLeftForSale() external view returns(uint256)\\r\\n  {\\r\\n    if(_isActive == false || _isFinished == true)\\r\\n      return 0;\\r\\n\\r\\n    return _token.balanceOf(address(this));\\r\\n  }  \\r\\n\\r\\n  function getMaxTokensForSale() external pure returns(uint256)\\r\\n  {\\r\\n      return PRESALE_TOKEN_AMOUNT;\\r\\n  }   \\r\\n\\r\\n  function getTokensSold() external view returns(uint256)\\r\\n  {\\r\\n    return _tokensSold;\\r\\n  }\\r\\n\\r\\n  receive() external payable mustBeActive\\r\\n  { \\r\\n      require(msg.sender != address(0));\\r\\n      require(msg.value != 0);\\r\\n      require(_contributors[msg.sender].approved == true, \\\"Not Approved\\\"); // must be whitelisted\\r\\n    \\r\\n      // add the amount already contributed for the max contribution check\\r\\n      // sender can contribute multiple times until max contribution limit\\r\\n      uint256 fullValue = msg.value+_contributors[msg.sender].contribution;\\r\\n    \\r\\n      // must be within contribution window\\r\\n      require(fullValue \\u003e= MIN_CONTRIBUTION \\u0026\\u0026 fullValue \\u003c= MAX_CONTRIBUTION, \\\"Not within contribution window\\\"); \\r\\n    \\r\\n      // safemath needed here ? msg.value can be max of 15*10**18\\r\\n      uint256 tokensToSend = (msg.value * TOKEN_RATE) / 10**9;\\r\\n\\r\\n      // able to send this amount ?\\r\\n      require(_token.balanceOf(address(this)) \\u003e= tokensToSend, \\\"Out of tokens\\\"); \\r\\n    \\r\\n      // send tokens from _tokenWallet\\r\\n      // the aproved token amount equals the presale token amount\\r\\n      _token.transfer(msg.sender, tokensToSend);\\r\\n    \\r\\n      // adjust contributors contribution\\r\\n      _contributors[msg.sender].contribution += msg.value;\\r\\n    \\r\\n      // keeping track ourself for safety reasons. _weiRaised should always equal address(this).balance\\r\\n      // alwso _weiRaised stays after eth got transferred out.\\r\\n      _weiRaised += msg.value;\\r\\n      _tokensSold += tokensToSend;\\r\\n  }\\r\\n}\\r\\n\"},\"SavixSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev savix interest and supply calculations.\\r\\n *\\r\\n*/\\r\\n library SavixSupply {\\r\\n     \\r\\n    uint256 public constant MAX_UINT256 = 2**256 - 1;\\r\\n    uint256 public constant MAX_UINT128 = 2**128 - 1;\\r\\n    uint public constant MINTIMEWIN = 60;\\r\\n    uint public constant SECPERDAY = 3600 * 24;\\r\\n    uint public constant DECIMALS = 9;\\r\\n\\r\\n    struct SupplyWinBoundery \\r\\n    {\\r\\n        uint256 x1;\\r\\n        uint256 x2;\\r\\n        uint256 y1;\\r\\n        uint256 y2;\\r\\n    }\\r\\n\\r\\n    struct AdjustedSupplyData \\r\\n    {\\r\\n        uint256 newSupply;\\r\\n        uint256 adjustTime;\\r\\n        uint adjustGradient;\\r\\n    }\\r\\n    \\r\\n    function getSupplyWindow(uint256[2][] memory map, uint256 calcTime) internal pure returns (SupplyWinBoundery memory)\\r\\n    {\\r\\n        SupplyWinBoundery memory winBound;\\r\\n        \\r\\n        winBound.x1 = 0;\\r\\n        winBound.x2 = 0;\\r\\n\\r\\n        winBound.y1 = map[0][1];\\r\\n        winBound.y2 = 0;\\r\\n\\r\\n        for (uint i=0; i \\u003c map.length; i++) {\\r\\n            if (map[i][0] == 0) continue;\\r\\n            if (calcTime \\u003c map[i][0])\\r\\n            {\\r\\n                winBound.x2 = map[i][0];\\r\\n                winBound.y2 = map[i][1];\\r\\n                break;\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                winBound.x1 = map[i][0];\\r\\n                winBound.y1 = map[i][1];\\r\\n            }\\r\\n        }\\r\\n        if (winBound.x2 == 0) winBound.x2 = MAX_UINT256;\\r\\n        if (winBound.y2 == 0) winBound.y2 = MAX_UINT128;\\r\\n        return winBound;\\r\\n    }\\r\\n\\r\\n\\r\\n    // function to calculate new Supply with SafeMath for divisions only, shortest (cheapest) form\\r\\n    function getAdjustedSupply(uint256[2][] memory map, uint256 transactionTime, uint256 lastAdjustTime, uint256 currentSupply, uint constGradient) internal pure returns (AdjustedSupplyData memory)\\r\\n    {\\r\\n        AdjustedSupplyData memory supplyData;\\r\\n        supplyData.newSupply = currentSupply;\\r\\n        supplyData.adjustTime = transactionTime;\\r\\n        supplyData.adjustGradient = 0;\\r\\n        \\r\\n        // return unchanged supply if less than MINTIMEWIN secounds have passed\\r\\n        // if (lastAdjustTime \\u003e 0 \\u0026\\u0026 transactionTime - lastAdjustTime \\u003c MINTIMEWIN)\\r\\n        if (transactionTime - lastAdjustTime \\u003c MINTIMEWIN)\\r\\n        {\\r\\n            return (supplyData);\\r\\n        }\\r\\n\\r\\n        if (transactionTime \\u003e= map[map.length-1][0])\\r\\n        {\\r\\n            supplyData.newSupply = map[map.length-1][1] + constGradient * (transactionTime - map[map.length-1][0]);\\r\\n            supplyData.adjustGradient = constGradient;\\r\\n            \\r\\n            return (supplyData);\\r\\n        }\\r\\n        \\r\\n        SupplyWinBoundery memory winBound = getSupplyWindow(map, transactionTime);\\r\\n        supplyData.adjustGradient = SafeMath.div(winBound.y2 - winBound.y1, winBound.x2 - winBound.x1);\\r\\n        supplyData.newSupply = winBound.y1 + supplyData.adjustGradient * (transactionTime - winBound.x1);\\r\\n\\r\\n        return (supplyData);\\r\\n    }\\r\\n\\r\\n    function getDailyInterest(uint256 currentTime, uint256 lastAdjustTime, uint256 currentSupply, uint256 lastSupply) internal pure returns (uint)\\r\\n    {\\r\\n            if (currentTime \\u003c= lastAdjustTime)\\r\\n                return currentTime;\\r\\n                \\r\\n            uint256 InterestSinceLastAdjust = SafeMath.div((currentSupply - lastSupply) * 100 * 10**DECIMALS, lastSupply);\\r\\n            return (SafeMath.div(InterestSinceLastAdjust * SECPERDAY, currentTime - lastAdjustTime));\\r\\n    }\\r\\n }\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addContributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ethWallet\",\"type\":\"address\"}],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokensForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensLeftForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"removeContributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Savix\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SavixPresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3a6355b8ce4455dc3453cd9f45f935a0d6b05c963414272291321a4cc491842d"}]}