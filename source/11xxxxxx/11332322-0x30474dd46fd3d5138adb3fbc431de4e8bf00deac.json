{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n// SPDX-License-Identifier: BSD-3-CLAUSE\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: src/bridge/external/IAMB.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\ninterface IAMB {\r\n    function messageSender() external view returns (address);\r\n\r\n    function maxGasPerTx() external view returns (uint256);\r\n\r\n    function transactionHash() external view returns (bytes32);\r\n\r\n    function messageId() external view returns (bytes32);\r\n\r\n    function messageSourceChainId() external view returns (bytes32);\r\n\r\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\r\n\r\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32);\r\n\r\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address);\r\n\r\n    function failedMessageSender(bytes32 _messageId) external view returns (address);\r\n\r\n    function requireToPassMessage(address _contract, bytes calldata _data, uint256 _gas) external returns (bytes32);\r\n\r\n    function sourceChainId() external view returns (uint256);\r\n\r\n    function destinationChainId() external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: src/utils/DecimalMath.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\n\r\n/// @dev Implements simple fixed point math add, sub, mul and div operations.\r\n/// @author Alberto Cuesta Cañada\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\r\n    function unit(uint8 decimals) internal pure returns (uint256) {\r\n        return 10**uint256(decimals);\r\n    }\r\n\r\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\r\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x.add(y);\r\n    }\r\n\r\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\r\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x.sub(y);\r\n    }\r\n\r\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\r\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return muld(x, y, 18);\r\n    }\r\n\r\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\r\n    function muld(uint256 x, uint256 y, uint8 decimals) internal pure returns (uint256) {\r\n        return x.mul(y).div(unit(decimals));\r\n    }\r\n\r\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\r\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return divd(x, y, 18);\r\n    }\r\n\r\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\r\n    function divd(uint256 x, uint256 y, uint8 decimals) internal pure returns (uint256) {\r\n        return x.mul(unit(decimals)).div(y);\r\n    }\r\n}\r\n\r\n// File: src/utils/Decimal.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\n\r\n\r\nlibrary Decimal {\r\n    using DecimalMath for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    struct decimal {\r\n        uint256 d;\r\n    }\r\n\r\n    function zero() internal pure returns (decimal memory) {\r\n        return decimal(0);\r\n    }\r\n\r\n    function one() internal pure returns (decimal memory) {\r\n        return decimal(DecimalMath.unit(18));\r\n    }\r\n\r\n    function toUint(decimal memory x) internal pure returns (uint256) {\r\n        return x.d;\r\n    }\r\n\r\n    function modD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\r\n        return decimal(x.d.mul(DecimalMath.unit(18)) % y.d);\r\n    }\r\n\r\n    function cmp(decimal memory x, decimal memory y) internal pure returns (int8) {\r\n        if (x.d > y.d) {\r\n            return 1;\r\n        } else if (x.d < y.d) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// @dev add two decimals\r\n    function addD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\r\n        decimal memory t;\r\n        t.d = x.d.add(y.d);\r\n        return t;\r\n    }\r\n\r\n    /// @dev subtract two decimals\r\n    function subD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\r\n        decimal memory t;\r\n        t.d = x.d.sub(y.d);\r\n        return t;\r\n    }\r\n\r\n    /// @dev multiple two decimals\r\n    function mulD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\r\n        decimal memory t;\r\n        t.d = x.d.muld(y.d);\r\n        return t;\r\n    }\r\n\r\n    /// @dev multiple a decimal by a uint256\r\n    function mulScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\r\n        decimal memory t;\r\n        t.d = x.d.mul(y);\r\n        return t;\r\n    }\r\n\r\n    /// @dev divide two decimals\r\n    function divD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\r\n        decimal memory t;\r\n        t.d = x.d.divd(y.d);\r\n        return t;\r\n    }\r\n\r\n    /// @dev divide a decimal by a uint256\r\n    function divScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\r\n        decimal memory t;\r\n        t.d = x.d.div(y);\r\n        return t;\r\n    }\r\n}\r\n\r\n// File: src/bridge/IBaseBridge.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\n\r\n\r\ninterface IBaseBridge {\r\n    function erc20Transfer(\r\n        IERC20 _token,\r\n        address _receiver,\r\n        Decimal.decimal calldata _amount\r\n    ) external;\r\n}\r\n\r\n// File: src/bridge/external/IMultiTokenMediator.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\ninterface IMultiTokenMediator {\r\n    function relayTokens(\r\n        address token,\r\n        address _receiver,\r\n        uint256 _value\r\n    ) external;\r\n}\r\n\r\n// File: src/utils/DecimalERC20.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract DecimalERC20 {\r\n    using SafeMath for uint256;\r\n    using Decimal for Decimal.decimal;\r\n\r\n    mapping(address => uint256) private decimalMap;\r\n\r\n    //\r\n    // INTERNAL functions\r\n    //\r\n\r\n    // CAUTION: do not input _from == _to s.t. this function will always fail\r\n    function _transfer(\r\n        IERC20 _token,\r\n        address _to,\r\n        Decimal.decimal memory _value\r\n    ) internal {\r\n        _updateDecimal(address(_token));\r\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\r\n        uint256 roundedDownValue = _toUint(_token, _value);\r\n\r\n        // solhint-disable avoid-low-level-calls\r\n        (bool success, bytes memory data) = address(_token).call(\r\n            abi.encodeWithSelector(_token.transfer.selector, _to, roundedDownValue)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"DecimalERC20: transfer failed\");\r\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\r\n    }\r\n\r\n    function _transferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        Decimal.decimal memory _value\r\n    ) internal {\r\n        _updateDecimal(address(_token));\r\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\r\n        uint256 roundedDownValue = _toUint(_token, _value);\r\n\r\n        // solhint-disable avoid-low-level-calls\r\n        (bool success, bytes memory data) = address(_token).call(\r\n            abi.encodeWithSelector(_token.transferFrom.selector, _from, _to, roundedDownValue)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"DecimalERC20: transferFrom failed\");\r\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\r\n    }\r\n\r\n    function _approve(\r\n        IERC20 _token,\r\n        address _spender,\r\n        Decimal.decimal memory _value\r\n    ) internal {\r\n        _updateDecimal(address(_token));\r\n        // to be compatible with some erc20 tokens like USDT\r\n        __approve(_token, _spender, Decimal.zero());\r\n        __approve(_token, _spender, _value);\r\n    }\r\n\r\n    //\r\n    // VIEW\r\n    //\r\n    function _allowance(\r\n        IERC20 _token,\r\n        address _owner,\r\n        address _spender\r\n    ) internal view returns (Decimal.decimal memory) {\r\n        return _toDecimal(_token, _token.allowance(_owner, _spender));\r\n    }\r\n\r\n    function _balanceOf(IERC20 _token, address _owner) internal view returns (Decimal.decimal memory) {\r\n        return _toDecimal(_token, _token.balanceOf(_owner));\r\n    }\r\n\r\n    function _totalSupply(IERC20 _token) internal view returns (Decimal.decimal memory) {\r\n        return _toDecimal(_token, _token.totalSupply());\r\n    }\r\n\r\n    function _toDecimal(IERC20 _token, uint256 _number) internal view returns (Decimal.decimal memory) {\r\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\r\n        if (tokenDecimals >= 18) {\r\n            return Decimal.decimal(_number.div(10**(tokenDecimals.sub(18))));\r\n        }\r\n\r\n        return Decimal.decimal(_number.mul(10**(uint256(18).sub(tokenDecimals))));\r\n    }\r\n\r\n    function _toUint(IERC20 _token, Decimal.decimal memory _decimal) internal view returns (uint256) {\r\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\r\n        if (tokenDecimals >= 18) {\r\n            return _decimal.toUint().mul(10**(tokenDecimals.sub(18)));\r\n        }\r\n        return _decimal.toUint().div(10**(uint256(18).sub(tokenDecimals)));\r\n    }\r\n\r\n    function _getTokenDecimals(address _token) internal view returns (uint256) {\r\n        uint256 tokenDecimals = decimalMap[_token];\r\n        if (tokenDecimals == 0) {\r\n            (bool success, bytes memory data) = _token.staticcall(abi.encodeWithSignature(\"decimals()\"));\r\n            require(success && data.length != 0, \"DecimalERC20: get decimals failed\");\r\n            tokenDecimals = abi.decode(data, (uint256));\r\n        }\r\n        return tokenDecimals;\r\n    }\r\n\r\n    //\r\n    // PRIVATE\r\n    //\r\n    function _updateDecimal(address _token) private {\r\n        uint256 tokenDecimals = _getTokenDecimals(_token);\r\n        if (decimalMap[_token] != tokenDecimals) {\r\n            decimalMap[_token] = tokenDecimals;\r\n        }\r\n    }\r\n\r\n    function __approve(\r\n        IERC20 _token,\r\n        address _spender,\r\n        Decimal.decimal memory _value\r\n    ) private {\r\n        // solhint-disable avoid-low-level-calls\r\n        (bool success, bytes memory data) = address(_token).call(\r\n            abi.encodeWithSelector(_token.approve.selector, _spender, _toUint(_token, _value))\r\n        );\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"DecimalERC20: approve failed\");\r\n    }\r\n\r\n    // To prevent from deflationary token, check receiver's balance is as expectation.\r\n    function _validateBalance(\r\n        IERC20 _token,\r\n        address _to,\r\n        uint256 _roundedDownValue,\r\n        Decimal.decimal memory _balanceBefore\r\n    ) private view {\r\n        require(\r\n            _balanceOf(_token, _to).cmp(_balanceBefore.addD(_toDecimal(_token, _roundedDownValue))) == 0,\r\n            \"DecimalERC20: balance inconsistent\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: src/utils/PerpFiOwnableUpgrade.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\n\r\n// copy from openzeppelin Ownable, only modify how the owner transfer\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract PerpFiOwnableUpgrade is ContextUpgradeSafe {\r\n    address private _owner;\r\n    address private _candidate;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function candidate() public view returns (address) {\r\n        return _candidate;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"PerpFiOwnableUpgrade: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Set ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setOwner(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"PerpFiOwnableUpgrade: zero address\");\r\n        require(newOwner != _owner, \"PerpFiOwnableUpgrade: same as original\");\r\n        require(newOwner != _candidate, \"PerpFiOwnableUpgrade: same as candidate\");\r\n        _candidate = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\r\n     * Can only be called by the new owner.\r\n     */\r\n    function updateOwner() public {\r\n        require(_candidate != address(0), \"PerpFiOwnableUpgrade: candidate is zero address\");\r\n        require(_candidate == _msgSender(), \"PerpFiOwnableUpgrade: not the new owner\");\r\n\r\n        emit OwnershipTransferred(_owner, _candidate);\r\n        _owner = _candidate;\r\n        _candidate = address(0);\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: src/bridge/BaseBridge.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable-next-line\r\nabstract contract BaseBridge is PerpFiOwnableUpgrade, IBaseBridge, DecimalERC20 {\r\n    using Decimal for Decimal.decimal;\r\n\r\n    //\r\n    // EVENTS\r\n    //\r\n    event BridgeChanged(address bridge);\r\n    event MultiTokenMediatorChanged(address mediator);\r\n    event Relayed(address token, address receiver, uint256 amount);\r\n\r\n    //**********************************************************//\r\n    //   The order of below state variables can not be changed  //\r\n    //**********************************************************//\r\n\r\n    // xDai AMB bridge contract\r\n    IAMB public ambBridge;\r\n\r\n    // xDai multi-tokens mediator\r\n    IMultiTokenMediator public multiTokenMediator;\r\n\r\n    //**********************************************************//\r\n    //  The order of above state variables can not be changed   //\r\n    //**********************************************************//\r\n\r\n    //\r\n    // PUBLIC\r\n    //\r\n    function __BaseBridge_init(IAMB _ambBridge, IMultiTokenMediator _multiTokenMediator) internal initializer {\r\n        __Ownable_init();\r\n        setAMBBridge(_ambBridge);\r\n        setMultiTokenMediator(_multiTokenMediator);\r\n    }\r\n\r\n    function setAMBBridge(IAMB _ambBridge) public onlyOwner {\r\n        require(address(_ambBridge) != address(0), \"address is empty\");\r\n        ambBridge = _ambBridge;\r\n        emit BridgeChanged(address(_ambBridge));\r\n    }\r\n\r\n    function setMultiTokenMediator(IMultiTokenMediator _multiTokenMediator) public onlyOwner {\r\n        require(address(_multiTokenMediator) != address(0), \"address is empty\");\r\n        multiTokenMediator = _multiTokenMediator;\r\n        emit MultiTokenMediatorChanged(address(_multiTokenMediator));\r\n    }\r\n\r\n    function erc20Transfer(\r\n        IERC20 _token,\r\n        address _receiver,\r\n        Decimal.decimal calldata _amount\r\n    ) external override {\r\n        require(_amount.toUint() > 0, \"amount is zero\");\r\n        multiTokenTransfer(_token, _receiver, _amount);\r\n    }\r\n\r\n    //\r\n    // INTERNAL\r\n    //\r\n    function multiTokenTransfer(\r\n        IERC20 _token,\r\n        address _receiver,\r\n        Decimal.decimal memory _amount\r\n    ) internal virtual {\r\n        require(_receiver != address(0), \"receiver is empty\");\r\n        // transfer tokens from msg sender\r\n        _transferFrom(_token, _msgSender(), address(this), _amount);\r\n\r\n        // approve to multi token mediator and call 'relayTokens'\r\n        approveToMediator(_token);\r\n\r\n        multiTokenMediator.relayTokens(address(_token), _receiver, _toUint(_token, _amount));\r\n        emit Relayed(address(_token), _receiver, _amount.toUint());\r\n    }\r\n\r\n    function callBridge(\r\n        address _contractOnOtherSide,\r\n        bytes memory _data,\r\n        uint256 _gasLimit\r\n    ) internal virtual returns (bytes32 messageId) {\r\n        // server can check event, `UserRequestForAffirmation(bytes32 indexed messageId, bytes encodedData)`,\r\n        // emitted by amb bridge contract\r\n        messageId = ambBridge.requireToPassMessage(_contractOnOtherSide, _data, _gasLimit);\r\n    }\r\n\r\n    function approveToMediator(IERC20 _token) private {\r\n        if (_allowance(_token, address(this), address(multiTokenMediator)).toUint() != uint256(-1)) {\r\n            _approve(_token, address(multiTokenMediator), Decimal.decimal(uint256(-1)));\r\n        }\r\n    }\r\n}\r\n\r\n// File: src/interface/IPriceFeed.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\ninterface IPriceFeed {\r\n    // get latest price\r\n    function getPrice(bytes32 _priceFeedKey) external view returns (uint256);\r\n\r\n    // get latest timestamp\r\n    function getLatestTimestamp(bytes32 _priceFeedKey) external view returns (uint256);\r\n\r\n    // get previous price with _back rounds\r\n    function getPreviousPrice(bytes32 _priceFeedKey, uint256 _numOfRoundBack) external view returns (uint256);\r\n\r\n    // get previous timestamp with _back rounds\r\n    function getPreviousTimestamp(bytes32 _priceFeedKey, uint256 _numOfRoundBack) external view returns (uint256);\r\n\r\n    // get twap price depending on _period\r\n    function getTwapPrice(bytes32 _priceFeedKey, uint256 _interval) external view returns (uint256);\r\n\r\n    function setLatestData(\r\n        bytes32 _priceFeedKey,\r\n        uint256 _price,\r\n        uint256 _timestamp,\r\n        uint256 _roundId\r\n    ) external;\r\n}\r\n\r\n// File: src/bridge/ethereum/RootBridge.sol\r\n\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ncontract RootBridge is BaseBridge {\r\n    using Decimal for Decimal.decimal;\r\n\r\n    uint256 public constant DEFAULT_GAS_LIMIT = 2e6;\r\n\r\n    //**********************************************************//\r\n    //   The order of below state variables can not be changed  //\r\n    //**********************************************************//\r\n\r\n    IPriceFeed public priceFeed;\r\n\r\n    //**********************************************************//\r\n    //  The order of above state variables can not be changed   //\r\n    //**********************************************************//\r\n\r\n    //\r\n    // PUBLIC\r\n    //\r\n    function initialize(IAMB _ambBridge, IMultiTokenMediator _multiTokenMediator) public initializer {\r\n        __BaseBridge_init(_ambBridge, _multiTokenMediator);\r\n    }\r\n\r\n    function updatePriceFeed(\r\n        address _priceFeedAddrOnL2,\r\n        bytes32 _priceFeedKey,\r\n        Decimal.decimal calldata _price,\r\n        uint256 _timestamp,\r\n        uint256 _roundId\r\n    ) external returns (bytes32 messageId) {\r\n        require(address(priceFeed) == _msgSender(), \"!priceFeed\");\r\n\r\n        bytes4 methodSelector = IPriceFeed.setLatestData.selector;\r\n        bytes memory data = abi.encodeWithSelector(\r\n            methodSelector,\r\n            _priceFeedKey,\r\n            _price.toUint(),\r\n            _timestamp,\r\n            _roundId\r\n        );\r\n        return callBridge(_priceFeedAddrOnL2, data, DEFAULT_GAS_LIMIT);\r\n    }\r\n\r\n    function setPriceFeed(address _priceFeed) external onlyOwner {\r\n        priceFeed = IPriceFeed(_priceFeed);\r\n    }\r\n\r\n    //\r\n    // INTERNALS\r\n    //\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"}],\"name\":\"MultiTokenMediatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Relayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ambBridge\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"erc20Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"_ambBridge\",\"type\":\"address\"},{\"internalType\":\"contract IMultiTokenMediator\",\"name\":\"_multiTokenMediator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiTokenMediator\",\"outputs\":[{\"internalType\":\"contract IMultiTokenMediator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"_ambBridge\",\"type\":\"address\"}],\"name\":\"setAMBBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiTokenMediator\",\"name\":\"_multiTokenMediator\",\"type\":\"address\"}],\"name\":\"setMultiTokenMediator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddrOnL2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_priceFeedKey\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_price\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"updatePriceFeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RootBridge","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://38ed780daca1a2b2c55c07728995eb3401b86421dc608b9ab97611e94658a02f"}]}