{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n    /$$   /$$     /$$ /$$   /$$  /$$$$$$  /$$$$$$$     /$$$$$$$$ /$$$$$$ /$$   /$$  /$$$$$$  /$$   /$$  /$$$$$$  /$$$$$$$$       /$$$$$$$  /$$$$$$$  /$$$$$$$$  /$$$$$$   /$$$$$$  /$$       /$$$$$$$$        /$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$$ /$$$$$$$   /$$$$$$   /$$$$$$  /$$$$$$$$\r\n  /$$$$$$|  $$   /$$/| $$  | $$ /$$__  $$| $$__  $$   | $$_____/|_  $$_/| $$$ | $$ /$$__  $$| $$$ | $$ /$$__  $$| $$_____/      | $$__  $$| $$__  $$| $$_____/ /$$__  $$ /$$__  $$| $$      | $$_____/       /$$__  $$ /$$__  $$| $$$ | $$|__  $$__/| $$__  $$ /$$__  $$ /$$__  $$|__  $$__/\r\n /$$__  $$\\  $$ /$$/ | $$  | $$| $$  \\ $$| $$  \\ $$   | $$        | $$  | $$$$| $$| $$  \\ $$| $$$$| $$| $$  \\__/| $$            | $$  \\ $$| $$  \\ $$| $$      | $$  \\__/| $$  \\ $$| $$      | $$            | $$  \\__/| $$  \\ $$| $$$$| $$   | $$   | $$  \\ $$| $$  \\ $$| $$  \\__/   | $$   \r\n| $$  \\__/ \\  $$$$/  | $$$$$$$$| $$  | $$| $$$$$$$    | $$$$$     | $$  | $$ $$ $$| $$$$$$$$| $$ $$ $$| $$      | $$$$$         | $$$$$$$/| $$$$$$$/| $$$$$   |  $$$$$$ | $$$$$$$$| $$      | $$$$$         | $$      | $$  | $$| $$ $$ $$   | $$   | $$$$$$$/| $$$$$$$$| $$         | $$   \r\n|  $$$$$$   \\  $$/   | $$__  $$| $$  | $$| $$__  $$   | $$__/     | $$  | $$  $$$$| $$__  $$| $$  $$$$| $$      | $$__/         | $$____/ | $$__  $$| $$__/    \\____  $$| $$__  $$| $$      | $$__/         | $$      | $$  | $$| $$  $$$$   | $$   | $$__  $$| $$__  $$| $$         | $$   \r\n \\____  $$   | $$    | $$  | $$| $$  | $$| $$  \\ $$   | $$        | $$  | $$\\  $$$| $$  | $$| $$\\  $$$| $$    $$| $$            | $$      | $$  \\ $$| $$       /$$  \\ $$| $$  | $$| $$      | $$            | $$    $$| $$  | $$| $$\\  $$$   | $$   | $$  \\ $$| $$  | $$| $$    $$   | $$   \r\n /$$  \\ $$   | $$    | $$  | $$|  $$$$$$/| $$$$$$$//$$| $$       /$$$$$$| $$ \\  $$| $$  | $$| $$ \\  $$|  $$$$$$/| $$$$$$$$      | $$      | $$  | $$| $$$$$$$$|  $$$$$$/| $$  | $$| $$$$$$$$| $$$$$$$$      |  $$$$$$/|  $$$$$$/| $$ \\  $$   | $$   | $$  | $$| $$  | $$|  $$$$$$/   | $$   \r\n|  $$$$$$/   |__/    |__/  |__/ \\______/ |_______/|__/|__/      |______/|__/  \\__/|__/  |__/|__/  \\__/ \\______/ |________/      |__/      |__/  |__/|________/ \\______/ |__/  |__/|________/|________/       \\______/  \\______/ |__/  \\__/   |__/   |__/  |__/|__/  |__/ \\______/    |__/   \r\n \\_  $$_/                                                                                                                                                                                                                                                                                   \r\n   \\__/                                                                                                                                                                                                                                                                                     \r\n                                                                                                                                                                                                                                                                                            \r\n\r\n*/\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeCast {\r\n\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n    \r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract PreSale {\r\n    using SafeCast for int256;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    \r\n    uint256 public _presaleTimestamp;\r\n    uint256 public _presaleEth;\r\n    uint256 public _presaleRate;\r\n    \r\n    address public _owner;\r\n    \r\n    address public _tokenAddr = 0x20F85e3F809A6F90a0595552afd5Ad812D133ed3;\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        \r\n        _owner = msg.sender;\r\n        _presaleEth = 135 ether;\r\n        _presaleRate = 100;\r\n        _presaleTimestamp = now + 14 days;\r\n    }\r\n    \r\n    receive() external payable  {\r\n        require(_presaleTimestamp > now,  \"PreSale Ended\");\r\n        require(_presaleEth >= msg.value, \"Sold out\");\r\n        require(msg.value > 0.1 ether,  \"Min 0.1 ETH\");\r\n        require(msg.value < 2.01 ether,  \"Max 2 ETH\");\r\n        \r\n        address payable dev_wallet = address(uint160(viewOwner()));\r\n        dev_wallet.transfer(msg.value);\r\n        \r\n        _presaleEth = _presaleEth.sub(msg.value);\r\n        uint256 amountBought = msg.value.mul(_presaleRate);\r\n        IERC20 _token = IERC20(_tokenAddr);\r\n        \r\n        _token.transfer( msg.sender, amountBought );\r\n    }\r\n    \r\n    function getTokensBack() public onlyOwner() {\r\n        IERC20 _token = IERC20(_tokenAddr);\r\n        \r\n        _token.transfer(address(uint160(viewOwner())), _token.balanceOf(address(this)) );\r\n    }\r\n    \r\n    \r\n    function viewOwner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_presaleEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_presaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_presaleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PreSale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7dde68515093bb7a0062c693a3ff99e45e07aa393087ba1f168f601c45c5efb9"}]}