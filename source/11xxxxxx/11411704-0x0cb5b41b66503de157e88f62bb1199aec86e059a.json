{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n\r\n}\r\n\r\ninterface IPreETHToken{\r\n    function mint(uint256 _preETHAmount, address _to) external;\r\n    function burn(uint256 _preETHAmount) external;\r\n    function contractBurn(uint256 _preETHAmount, address _burnAddress) external;\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n}\r\n\r\ninterface IEstReward{\r\n    function contractStake(uint256 amount, address _user) external;\r\n    function getReward(address _address) external;\r\n    function userStakeFromInvite(address _user, uint256 _amount) external;\r\n}\r\n\r\ninterface IDepositContract {\r\n    event DepositEvent(\r\n        bytes pubkey,\r\n        bytes withdrawal_credentials,\r\n        bytes amount,\r\n        bytes signature,\r\n        bytes index\r\n    );\r\n\r\n    function deposit(\r\n        bytes calldata pubkey,\r\n        bytes calldata withdrawal_credentials,\r\n        bytes calldata signature,\r\n        bytes32 deposit_data_root\r\n    ) external payable;\r\n    function get_deposit_root() external view returns (bytes32);\r\n    function get_deposit_count() external view returns (bytes memory);\r\n}\r\n\r\n\r\ncontract ESTDepositPool {\r\n  using SafeMath for uint;\r\n  uint256 private base = 100;\r\n  uint256 public minimumDeposit = 1 ether / base;\r\n  uint256 public refRatio = 10;\r\n  uint256 public totalLockedPreETHAmount = 0;\r\n  address public owner;\r\n  address public preETH;\r\n  address public estRewardAddress;\r\n  mapping(address=>uint) public userPreETHAmount;\r\n  mapping(address=>uint) public userInviteCount;\r\n  \r\n  mapping(address=>address) public userRef;\r\n  bool public isNeedStaked = true;\r\n  IDepositContract public DepositContract = IDepositContract(0x00000000219ab540356cBB839Cbe05303d7705Fa); // mainnet\r\n//   IDepositContract public DepositContract = IDepositContract(0x8c5fecdC472E27Bc447696F431E425D02dd46a8c); // prymont test\r\n   \r\n    // Events\r\n    event DepositReceived(address indexed from, uint256 amount, uint256 time);\r\n    \r\n    // Construct\r\n    constructor ()  public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n   /**\r\n    * @dev Modifier to scope access to admins\r\n    */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Account is not owner\");\r\n        _;\r\n    }\r\n\r\n    function setAddresses(address _preEth,address _estReward) public onlyOwner {\r\n        preETH = _preEth;\r\n        estRewardAddress = _estReward;\r\n    }\r\n\r\n    function setIsNeedStaked(bool isNeed) public onlyOwner {\r\n      isNeedStaked = isNeed;\r\n    }\r\n\r\n    // Accept a deposit from a user\r\n    function deposit(address _ref) external payable {\r\n        require(msg.sender != _ref, \"The sender address is the same of referer\");\r\n        require(msg.value >= minimumDeposit, \"The deposited amount is less than the minimum deposit size\");\r\n        require(estRewardAddress != address(0),\"Invalid EST award contract address!\");\r\n        \r\n        if(_ref != address(0) && userRef[msg.sender] == address(0)){\r\n          userRef[msg.sender] = _ref;\r\n          userInviteCount[msg.sender] = userInviteCount[msg.sender].add(1);\r\n        }\r\n\r\n        // Mint preETH to this contract account\r\n        IPreETHToken(preETH).mint(msg.value, estRewardAddress);\r\n        \r\n        if(isNeedStaked){\r\n          if(userPreETHAmount[userRef[msg.sender]] > 0){\r\n            IEstReward(estRewardAddress).contractStake(msg.value,msg.sender);\r\n            IEstReward(estRewardAddress).contractStake(msg.value.mul(refRatio).div(base), userRef[msg.sender]);\r\n            IEstReward(estRewardAddress).userStakeFromInvite(userRef[msg.sender], msg.value.mul(refRatio).div(base));\r\n          } else {\r\n            IEstReward(estRewardAddress).contractStake(msg.value,msg.sender);\r\n          }\r\n        } else {\r\n          if(userRef[msg.sender] != address(0)){\r\n            IEstReward(estRewardAddress).contractStake(msg.value.div(base),msg.sender);\r\n            IEstReward(estRewardAddress).contractStake(msg.value.mul(refRatio).div(base), userRef[msg.sender]);\r\n            IEstReward(estRewardAddress).userStakeFromInvite(userRef[msg.sender], msg.value.mul(refRatio).div(base));\r\n          } else {\r\n            IEstReward(estRewardAddress).contractStake(msg.value,msg.sender);\r\n          }\r\n           \r\n        }\r\n        \r\n        // Emit deposit received event\r\n        emit DepositReceived(msg.sender, msg.value, now);\r\n        // Process deposit\r\n        processDeposit(msg.sender, msg.value);\r\n    }\r\n    \r\n    function getUserInfo(address _user) external view returns(uint256 userDeposit,uint256 inviteCount){\r\n        userDeposit = userPreETHAmount[_user];\r\n        inviteCount = userInviteCount[_user];\r\n    }\r\n\r\n    function getUserPreETHBalance(address _user) public view returns(uint){\r\n      return userPreETHAmount[_user];\r\n    }\r\n\r\n    function processDeposit(address _user, uint _value) private {\r\n      // add user preETH amount\r\n      userPreETHAmount[_user] = userPreETHAmount[_user].add(_value);\r\n      totalLockedPreETHAmount = totalLockedPreETHAmount.add(_value);\r\n    }\r\n\r\n    function getUserPreETHPropotion(address _user) public view returns(uint256 totalLockedAmount,uint256 userAmount){\r\n      totalLockedAmount = totalLockedPreETHAmount;\r\n      userAmount = userPreETHAmount[_user];\r\n    }\r\n \r\n    \r\n    function burnPreETH(uint256 _preETHAmount) public {\r\n        require(_preETHAmount>0, \"Invalid amount\");\r\n        // IPreETHToken(preETH).burn(_preETHAmount);\r\n        IPreETHToken(preETH).contractBurn(_preETHAmount, msg.sender);\r\n        userPreETHAmount[msg.sender] = userPreETHAmount[msg.sender].sub(_preETHAmount);\r\n        msg.sender.transfer(_preETHAmount);\r\n    }\r\n    \r\n    function stakeETH( \r\n        bytes calldata pubkey,\r\n        bytes calldata withdrawal_credentials,\r\n        bytes calldata signature,\r\n        bytes32 deposit_data_root) public onlyOwner{\r\n        DepositContract.deposit{value:32 ether}(pubkey,withdrawal_credentials,signature,deposit_data_root);\r\n    }\r\n    \r\n    fallback () payable external {}\r\n    receive () payable external {}\r\n   \r\n   \r\n\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DepositContract\",\"outputs\":[{\"internalType\":\"contract IDepositContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_preETHAmount\",\"type\":\"uint256\"}],\"name\":\"burnPreETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPreETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPreETHPropotion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNeedStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_preEth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_estReward\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isNeed\",\"type\":\"bool\"}],\"name\":\"setIsNeedStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedPreETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInviteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPreETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ESTDepositPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://eec1d9fc293b2604a16ff9140c5233c6d2eceb518f3bc1b8a76f22d9dc53ebc7"}]}