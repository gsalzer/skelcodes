{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/ReentrancyGuardPausable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Reuse openzeppelin's ReentrancyGuard with Pausable feature\r\n */\r\ncontract ReentrancyGuardPausable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED_OR_PAUSED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrantAndUnpaused() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED_OR_PAUSED, \"ReentrancyGuard: reentrant call or paused\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED_OR_PAUSED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function _pause() internal {\r\n        _status = _ENTERED_OR_PAUSED;\r\n    }\r\n\r\n    function _unpause() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/YERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/* TODO: Actually methods are public instead of external */\r\ninterface YERC20 is IERC20 {\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function deposit(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _shares) external;\r\n}\r\n\r\n// File: contracts/UpgradeableOwnable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract UpgradeableOwnable {\r\n    bytes32 private constant _OWNER_SLOT = 0xa7b53796fd2d99cb1f5ae019b54f9e024446c3d12b483f733ccc62ed04eb126a;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        assert(_OWNER_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.owner\")) - 1));\r\n        _setOwner(msg.sender);\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        bytes32 slot = _OWNER_SLOT;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            sstore(slot, newOwner)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address o) {\r\n        bytes32 slot = _OWNER_SLOT;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            o := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner(), address(0));\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        _setOwner(newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/SmoothyV1.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SmoothyV1 is ReentrancyGuardPausable, ERC20, UpgradeableOwnable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 constant W_ONE = 1e18;\r\n    uint256 constant U256_1 = 1;\r\n    uint256 constant SWAP_FEE_MAX = 5e17;\r\n    uint256 constant REDEEM_FEE_MAX = 5e17;\r\n    uint256 constant ADMIN_FEE_PCT_MAX = 5e17;\r\n\r\n    /** @dev Fee collector of the contract */\r\n    address public _rewardCollector;\r\n\r\n    // Using mapping instead of array to save gas\r\n    mapping(uint256 => uint256) public _tokenInfos;\r\n    mapping(uint256 => address) public _yTokenAddresses;\r\n\r\n    // Best estimate of token balance in y pool.\r\n    // Save the gas cost of calling yToken to evaluate balanceInToken.\r\n    mapping(uint256 => uint256) public _yBalances;\r\n\r\n    mapping(address => uint256) public _tokenExist;\r\n\r\n    /*\r\n     * _totalBalance is expected to >= sum(_getBalance()'s), where the diff is the admin fee\r\n     * collected by _collectReward().\r\n     */\r\n    uint256 public _totalBalance;\r\n    uint256 public _swapFee = 4e14; // 1E18 means 100%\r\n    uint256 public _redeemFee = 0; // 1E18 means 100%\r\n    uint256 public _adminFeePct = 0; // % of swap/redeem fee to admin\r\n    uint256 public _adminInterestPct = 0; // % of interest to admins\r\n\r\n    uint256 public _ntokens;\r\n\r\n    uint256 constant YENABLE_OFF = 40;\r\n    uint256 constant DECM_OFF = 41;\r\n    uint256 constant TID_OFF = 46;\r\n\r\n    event Swap(\r\n        address indexed buyer,\r\n        uint256 bTokenIdIn,\r\n        uint256 bTokenIdOut,\r\n        uint256 inAmount,\r\n        uint256 outAmount\r\n    );\r\n\r\n    event SwapAll(\r\n        address indexed provider,\r\n        uint256[] amounts,\r\n        uint256 inOutFlag,\r\n        uint256 sTokenMintedOrBurned\r\n    );\r\n\r\n    event Mint(\r\n        address indexed provider,\r\n        uint256 inAmounts,\r\n        uint256 sTokenMinted\r\n    );\r\n\r\n    event Redeem(\r\n        address indexed provider,\r\n        uint256 bTokenAmount,\r\n        uint256 sTokenBurn\r\n    );\r\n\r\n    constructor ()\r\n        public\r\n        ERC20(\"\", \"\")\r\n    {\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return \"Smoothy LP Token\";\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return \"syUSD\";\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /***************************************\r\n     * Methods to change a token info\r\n     ***************************************/\r\n\r\n    /* return soft weight in 1e18 */\r\n    function _getSoftWeight(uint256 info) internal pure returns (uint256 w) {\r\n        return ((info >> 160) & ((U256_1 << 20) - 1)) * 1e12;\r\n    }\r\n\r\n    function _setSoftWeight(\r\n        uint256 info,\r\n        uint256 w\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 newInfo)\r\n    {\r\n        require (w <= W_ONE, \"soft weight must <= 1e18\");\r\n\r\n        // Only maintain 1e6 resolution.\r\n        newInfo = info & ~(((U256_1 << 20) - 1) << 160);\r\n        newInfo = newInfo | ((w / 1e12) << 160);\r\n    }\r\n\r\n    function _getHardWeight(uint256 info) internal pure returns (uint256 w) {\r\n        return ((info >> 180) & ((U256_1 << 20) - 1)) * 1e12;\r\n    }\r\n\r\n    function _setHardWeight(\r\n        uint256 info,\r\n        uint256 w\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 newInfo)\r\n    {\r\n        require (w <= W_ONE, \"hard weight must <= 1e18\");\r\n\r\n        // Only maintain 1e6 resolution.\r\n        newInfo = info & ~(((U256_1 << 20) - 1) << 180);\r\n        newInfo = newInfo | ((w / 1e12) << 180);\r\n    }\r\n\r\n    function _getDecimalMulitiplier(uint256 info) internal pure returns (uint256 dec) {\r\n        return (info >> (160 + DECM_OFF)) & ((U256_1 << 5) - 1);\r\n    }\r\n\r\n    function _setDecimalMultiplier(\r\n        uint256 info,\r\n        uint256 decm\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 newInfo)\r\n    {\r\n        require (decm < 18, \"decimal multipler is too large\");\r\n        newInfo = info & ~(((U256_1 << 5) - 1) << (160 + DECM_OFF));\r\n        newInfo = newInfo | (decm << (160 + DECM_OFF));\r\n    }\r\n\r\n    function _isYEnabled(uint256 info) internal pure returns (bool) {\r\n        return (info >> (160 + YENABLE_OFF)) & 0x1 == 0x1;\r\n    }\r\n\r\n    function _setYEnabled(uint256 info, bool enabled) internal pure returns (uint256) {\r\n        if (enabled) {\r\n            return info | (U256_1 << (160 + YENABLE_OFF));\r\n        } else {\r\n            return info & ~(U256_1 << (160 + YENABLE_OFF));\r\n        }\r\n    }\r\n\r\n    function _setTID(uint256 info, uint256 tid) internal pure returns (uint256) {\r\n        require (tid < 256, \"tid is too large\");\r\n        require (_getTID(info) == 0, \"tid cannot set again\");\r\n        return info | (tid << (160 + TID_OFF));\r\n    }\r\n\r\n    function _getTID(uint256 info) internal pure returns (uint256) {\r\n        return (info >> (160 + TID_OFF)) & 0xFF;\r\n    }\r\n\r\n    /****************************************\r\n     * Owner methods\r\n     ****************************************/\r\n    function pause(uint256 flag) external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause(uint256 flag) external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function changeRewardCollector(address newCollector) external onlyOwner {\r\n        _rewardCollector = newCollector;\r\n    }\r\n\r\n    function adjustWeights(\r\n        uint8 tid,\r\n        uint256 newSoftWeight,\r\n        uint256 newHardWeight\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(newSoftWeight <= newHardWeight, \"Soft-limit weight must <= Hard-limit weight\");\r\n        require(newHardWeight <= W_ONE, \"hard-limit weight must <= 1\");\r\n        require(tid < _ntokens, \"Backed token not exists\");\r\n\r\n        _tokenInfos[tid] = _setSoftWeight(_tokenInfos[tid], newSoftWeight);\r\n        _tokenInfos[tid] = _setHardWeight(_tokenInfos[tid], newHardWeight);\r\n    }\r\n\r\n    function changeSwapFee(uint256 swapFee) external onlyOwner {\r\n        require(swapFee <= SWAP_FEE_MAX, \"Swap fee must is too large\");\r\n        _swapFee = swapFee;\r\n    }\r\n\r\n    function changeRedeemFee(\r\n        uint256 redeemFee\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(redeemFee <= REDEEM_FEE_MAX, \"Redeem fee is too large\");\r\n        _redeemFee = redeemFee;\r\n    }\r\n\r\n    function changeAdminFeePct(uint256 pct) external onlyOwner {\r\n        require (pct <= ADMIN_FEE_PCT_MAX, \"Admin fee pct is too large\");\r\n        _adminFeePct = pct;\r\n    }\r\n\r\n    function changeAdminInterestPct(uint256 pct) external onlyOwner {\r\n        require (pct <= ADMIN_FEE_PCT_MAX, \"Admin interest fee pct is too large\");\r\n        _adminInterestPct = pct;\r\n    }\r\n\r\n    function initialize(\r\n        uint8 tid,\r\n        uint256 bTokenAmount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(tid < _ntokens, \"Backed token not exists\");\r\n        uint256 info = _tokenInfos[tid];\r\n        address addr = address(info);\r\n\r\n        IERC20(addr).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            bTokenAmount\r\n        );\r\n        _totalBalance = _totalBalance.add(bTokenAmount.mul(_normalizeBalance(info)));\r\n        _mint(msg.sender, bTokenAmount.mul(_normalizeBalance(info)));\r\n    }\r\n\r\n    function addTokens(\r\n        address[] memory tokens,\r\n        address[] memory yTokens,\r\n        uint256[] memory decMultipliers,\r\n        uint256[] memory softWeights,\r\n        uint256[] memory hardWeights\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(tokens.length == yTokens.length, \"tokens and ytokens must have the same length\");\r\n        require(\r\n            tokens.length == decMultipliers.length,\r\n            \"tokens and decMultipliers must have the same length\"\r\n        );\r\n        require(\r\n            tokens.length == hardWeights.length,\r\n            \"incorrect hard wt. len\"\r\n        );\r\n        require(\r\n            tokens.length == softWeights.length,\r\n            \"incorrect soft wt. len\"\r\n        );\r\n\r\n        for (uint8 i = 0; i < tokens.length; i++) {\r\n            require(_tokenExist[tokens[i]] == 0, \"token already added\");\r\n            _tokenExist[tokens[i]] = 1;\r\n\r\n            uint256 info = uint256(tokens[i]);\r\n            require(hardWeights[i] >= softWeights[i], \"hard wt. must >= soft wt.\");\r\n            require(hardWeights[i] <= W_ONE, \"hard wt. must <= 1e18\");\r\n            info = _setHardWeight(info, hardWeights[i]);\r\n            info = _setSoftWeight(info, softWeights[i]);\r\n            info = _setDecimalMultiplier(info, decMultipliers[i]);\r\n            uint256 tid = i + _ntokens;\r\n            info = _setTID(info, tid);\r\n            _yTokenAddresses[tid] = yTokens[i];\r\n            // _balances[i] = 0; // no need to set\r\n            if (yTokens[i] != address(0x0)) {\r\n                info = _setYEnabled(info, true);\r\n            }\r\n            _tokenInfos[tid] = info;\r\n        }\r\n        _ntokens = _ntokens.add(tokens.length);\r\n    }\r\n\r\n    function setYEnabled(uint256 tid, address yAddr) external onlyOwner {\r\n        uint256 info = _tokenInfos[tid];\r\n        if (_yTokenAddresses[tid] != address(0x0)) {\r\n            // Withdraw all tokens from yToken, and clear yBalance.\r\n            uint256 pricePerShare = YERC20(_yTokenAddresses[tid]).getPricePerFullShare();\r\n            uint256 share = YERC20(_yTokenAddresses[tid]).balanceOf(address(this));\r\n            uint256 cash = _getCashBalance(info);\r\n            YERC20(_yTokenAddresses[tid]).withdraw(share);\r\n            uint256 dcash = _getCashBalance(info).sub(cash);\r\n            require(dcash >= pricePerShare.mul(share).div(W_ONE), \"ytoken withdraw amount < expected\");\r\n\r\n            // Update _totalBalance with interest\r\n            _updateTotalBalanceWithNewYBalance(tid, dcash);\r\n            _yBalances[tid] = 0;\r\n        }\r\n\r\n        info = _setYEnabled(info, yAddr != address(0x0));\r\n        _yTokenAddresses[tid] = yAddr;\r\n        _tokenInfos[tid] = info;\r\n        // If yAddr != 0x0, we will rebalance in next swap/mint/redeem/rebalance call.\r\n    }\r\n\r\n    /**\r\n     * Calculate binary logarithm of x.  Revert if x <= 0.\r\n     * See LICENSE_LOG.md for license.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function lg2(int128 x) internal pure returns (int128) {\r\n        require (x > 0, \"x must be positive\");\r\n\r\n        int256 msb = 0;\r\n        int256 xc = x;\r\n\r\n        if (xc >= 0x10000000000000000) {xc >>= 64; msb += 64;}\r\n        if (xc >= 0x100000000) {xc >>= 32; msb += 32;}\r\n        if (xc >= 0x10000) {xc >>= 16; msb += 16;}\r\n        if (xc >= 0x100) {xc >>= 8; msb += 8;}\r\n        if (xc >= 0x10) {xc >>= 4; msb += 4;}\r\n        if (xc >= 0x4) {xc >>= 2; msb += 2;}\r\n        if (xc >= 0x2) {msb += 1;}  // No need to shift xc anymore\r\n\r\n        int256 result = (msb - 64) << 64;\r\n        uint256 ux = uint256 (x) << (127 - msb);\r\n        /* 20 iterations so that the resolution is aboout 2^-20 \\approx 5e-6 */\r\n        for (int256 bit = 0x8000000000000000; bit > 0x80000000000; bit >>= 1) {\r\n            ux *= ux;\r\n            uint256 b = ux >> 255;\r\n            ux >>= 127 + b;\r\n            result += bit * int256(b);\r\n        }\r\n\r\n        return int128(result);\r\n    }\r\n\r\n    function _safeToInt128(uint256 x) internal pure returns (int128 y) {\r\n        y = int128(x);\r\n        require(x == uint256(y), \"Conversion to int128 failed\");\r\n        return y;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the approx logarithm of a value with log(x) where x <= 1.1.\r\n     * All values are in integers with (1e18 == 1.0).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input value x must be greater than 1e18\r\n     */\r\n    function _logApprox(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 one = W_ONE;\r\n\r\n        require(x >= one, \"logApprox: x must >= 1\");\r\n\r\n        uint256 z = x - one;\r\n        uint256 zz = z.mul(z).div(one);\r\n        uint256 zzz = zz.mul(z).div(one);\r\n        uint256 zzzz = zzz.mul(z).div(one);\r\n        uint256 zzzzz = zzzz.mul(z).div(one);\r\n        return z.sub(zz.div(2)).add(zzz.div(3)).sub(zzzz.div(4)).add(zzzzz.div(5));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the logarithm of a value.\r\n     * All values are in integers with (1e18 == 1.0).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input value x must be greater than 1e18\r\n     */\r\n    function _log(uint256 x) internal pure returns (uint256 y) {\r\n        require(x >= W_ONE, \"log(x): x must be greater than 1\");\r\n        require(x < (W_ONE << 63), \"log(x): x is too large\");\r\n\r\n        if (x <= W_ONE.add(W_ONE.div(10))) {\r\n            return _logApprox(x);\r\n        }\r\n\r\n        /* Convert to 64.64 float point */\r\n        int128 xx = _safeToInt128((x << 64) / W_ONE);\r\n\r\n        int128 yy = lg2(xx);\r\n\r\n        /* log(2) * 1e18 \\approx 693147180559945344 */\r\n        y = (uint256(yy) * 693147180559945344) >> 64;\r\n\r\n        return y;\r\n    }\r\n\r\n    /**\r\n     * Return weights and cached balances of all tokens\r\n     * Note that the cached balance does not include the accrued interest since last rebalance.\r\n     */\r\n    function _getBalancesAndWeights()\r\n        internal\r\n        view\r\n        returns (uint256[] memory balances, uint256[] memory softWeights, uint256[] memory hardWeights, uint256 totalBalance)\r\n    {\r\n        uint256 ntokens = _ntokens;\r\n        balances = new uint256[](ntokens);\r\n        softWeights = new uint256[](ntokens);\r\n        hardWeights = new uint256[](ntokens);\r\n        totalBalance = 0;\r\n        for (uint8 i = 0; i < ntokens; i++) {\r\n            uint256 info = _tokenInfos[i];\r\n            balances[i] = _getCashBalance(info);\r\n            if (_isYEnabled(info)) {\r\n                balances[i] = balances[i].add(_yBalances[i]);\r\n            }\r\n            totalBalance = totalBalance.add(balances[i]);\r\n            softWeights[i] = _getSoftWeight(info);\r\n            hardWeights[i] = _getHardWeight(info);\r\n        }\r\n    }\r\n\r\n    function _getBalancesAndInfos()\r\n        internal\r\n        view\r\n        returns (uint256[] memory balances, uint256[] memory infos, uint256 totalBalance)\r\n    {\r\n        uint256 ntokens = _ntokens;\r\n        balances = new uint256[](ntokens);\r\n        infos = new uint256[](ntokens);\r\n        totalBalance = 0;\r\n        for (uint8 i = 0; i < ntokens; i++) {\r\n            infos[i] = _tokenInfos[i];\r\n            balances[i] = _getCashBalance(infos[i]);\r\n            if (_isYEnabled(infos[i])) {\r\n                balances[i] = balances[i].add(_yBalances[i]);\r\n            }\r\n            totalBalance = totalBalance.add(balances[i]);\r\n        }\r\n    }\r\n\r\n    function _getBalance(uint256 info) internal view returns (uint256 balance) {\r\n        balance = _getCashBalance(info);\r\n        if (_isYEnabled(info)) {\r\n            balance = balance.add(_yBalances[_getTID(info)]);\r\n        }\r\n    }\r\n\r\n    function getBalance(uint256 tid) public view returns (uint256) {\r\n        return _getBalance(_tokenInfos[tid]);\r\n    }\r\n\r\n    function _normalizeBalance(uint256 info) internal pure returns (uint256) {\r\n        uint256 decm = _getDecimalMulitiplier(info);\r\n        return 10 ** decm;\r\n    }\r\n\r\n    /* @dev Return normalized cash balance of a token */\r\n    function _getCashBalance(uint256 info) internal view returns (uint256) {\r\n        return IERC20(address(info)).balanceOf(address(this))\r\n            .mul(_normalizeBalance(info));\r\n    }\r\n\r\n    function _getBalanceDetail(\r\n        uint256 info\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256 pricePerShare, uint256 cashUnnormalized, uint256 yBalanceUnnormalized)\r\n    {\r\n        address yAddr = _yTokenAddresses[_getTID(info)];\r\n        pricePerShare = YERC20(yAddr).getPricePerFullShare();\r\n        cashUnnormalized = IERC20(address(info)).balanceOf(address(this));\r\n        uint256 share = YERC20(yAddr).balanceOf(address(this));\r\n        yBalanceUnnormalized = share.mul(pricePerShare).div(W_ONE);\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Methods for rebalance cash reserve\r\n     * After rebalancing, we will have cash reserve equaling to 10% of total balance\r\n     * There are two conditions to trigger a rebalancing\r\n     * - if there is insufficient cash for withdraw; or\r\n     * - if the cash reserve is greater than 20% of total balance.\r\n     * Note that we use a cached version of total balance to avoid high gas cost on calling\r\n     * getPricePerFullShare().\r\n     *************************************************************************************/\r\n    function _updateTotalBalanceWithNewYBalance(\r\n        uint256 tid,\r\n        uint256 yBalanceNormalizedNew\r\n    )\r\n        internal\r\n    {\r\n        uint256 adminFee = 0;\r\n        uint256 yBalanceNormalizedOld = _yBalances[tid];\r\n        // They yBalance should not be decreasing, but just in case,\r\n        if (yBalanceNormalizedNew >= yBalanceNormalizedOld) {\r\n            adminFee = (yBalanceNormalizedNew - yBalanceNormalizedOld).mul(_adminInterestPct).div(W_ONE);\r\n        }\r\n        _totalBalance = _totalBalance\r\n            .sub(yBalanceNormalizedOld)\r\n            .add(yBalanceNormalizedNew)\r\n            .sub(adminFee);\r\n    }\r\n\r\n    function _rebalanceReserve(\r\n        uint256 info\r\n    )\r\n        internal\r\n    {\r\n        require(_isYEnabled(info), \"yToken must be enabled for rebalancing\");\r\n\r\n        uint256 pricePerShare;\r\n        uint256 cashUnnormalized;\r\n        uint256 yBalanceUnnormalized;\r\n        (pricePerShare, cashUnnormalized, yBalanceUnnormalized) = _getBalanceDetail(info);\r\n        uint256 tid = _getTID(info);\r\n\r\n        // Update _totalBalance with interest\r\n        _updateTotalBalanceWithNewYBalance(tid, yBalanceUnnormalized.mul(_normalizeBalance(info)));\r\n\r\n        uint256 targetCash = yBalanceUnnormalized.add(cashUnnormalized).div(10);\r\n        if (cashUnnormalized > targetCash) {\r\n            uint256 depositAmount = cashUnnormalized.sub(targetCash);\r\n            // Reset allowance to bypass possible allowance check (e.g., USDT)\r\n            IERC20(address(info)).safeApprove(_yTokenAddresses[tid], 0);\r\n            IERC20(address(info)).safeApprove(_yTokenAddresses[tid], depositAmount);\r\n\r\n            // Calculate acutal deposit in the case that some yTokens may return partial deposit.\r\n            uint256 balanceBefore = IERC20(address(info)).balanceOf(address(this));\r\n            YERC20(_yTokenAddresses[tid]).deposit(depositAmount);\r\n            uint256 actualDeposit = balanceBefore.sub(IERC20(address(info)).balanceOf(address(this)));\r\n            _yBalances[tid] = yBalanceUnnormalized.add(actualDeposit).mul(_normalizeBalance(info));\r\n        } else {\r\n            uint256 expectedWithdraw = targetCash.sub(cashUnnormalized);\r\n            if (expectedWithdraw == 0) {\r\n                return;\r\n            }\r\n\r\n            uint256 balanceBefore = IERC20(address(info)).balanceOf(address(this));\r\n            // Withdraw +1 wei share to make sure actual withdraw >= expected.\r\n            YERC20(_yTokenAddresses[tid]).withdraw(expectedWithdraw.mul(W_ONE).div(pricePerShare).add(1));\r\n            uint256 actualWithdraw = IERC20(address(info)).balanceOf(address(this)).sub(balanceBefore);\r\n            require(actualWithdraw >= expectedWithdraw, \"insufficient cash withdrawn from yToken\");\r\n            _yBalances[tid] = yBalanceUnnormalized.sub(actualWithdraw).mul(_normalizeBalance(info));\r\n        }\r\n    }\r\n\r\n    /* @dev Forcibly rebalance so that cash reserve is about 10% of total. */\r\n    function rebalanceReserve(\r\n        uint256 tid\r\n    )\r\n        external\r\n        nonReentrantAndUnpaused\r\n    {\r\n        _rebalanceReserve(_tokenInfos[tid]);\r\n    }\r\n\r\n    /*\r\n     * @dev Rebalance the cash reserve so that\r\n     * cash reserve consists of 10% of total balance after substracting amountUnnormalized.\r\n     *\r\n     * Assume that current cash reserve < amountUnnormalized.\r\n     */\r\n    function _rebalanceReserveSubstract(\r\n        uint256 info,\r\n        uint256 amountUnnormalized\r\n    )\r\n        internal\r\n    {\r\n        require(_isYEnabled(info), \"yToken must be enabled for rebalancing\");\r\n\r\n        uint256 pricePerShare;\r\n        uint256 cashUnnormalized;\r\n        uint256 yBalanceUnnormalized;\r\n        (pricePerShare, cashUnnormalized, yBalanceUnnormalized) = _getBalanceDetail(info);\r\n\r\n        // Update _totalBalance with interest\r\n        _updateTotalBalanceWithNewYBalance(\r\n            _getTID(info),\r\n            yBalanceUnnormalized.mul(_normalizeBalance(info))\r\n        );\r\n\r\n        // Evaluate the shares to withdraw so that cash = 10% of total\r\n        uint256 expectedWithdraw = cashUnnormalized.add(yBalanceUnnormalized).sub(\r\n            amountUnnormalized).div(10).add(amountUnnormalized).sub(cashUnnormalized);\r\n        if (expectedWithdraw == 0) {\r\n            return;\r\n        }\r\n\r\n        // Withdraw +1 wei share to make sure actual withdraw >= expected.\r\n        uint256 withdrawShares = expectedWithdraw.mul(W_ONE).div(pricePerShare).add(1);\r\n        uint256 balanceBefore = IERC20(address(info)).balanceOf(address(this));\r\n        YERC20(_yTokenAddresses[_getTID(info)]).withdraw(withdrawShares);\r\n        uint256 actualWithdraw = IERC20(address(info)).balanceOf(address(this)).sub(balanceBefore);\r\n        require(actualWithdraw >= expectedWithdraw, \"insufficient cash withdrawn from yToken\");\r\n        _yBalances[_getTID(info)] = yBalanceUnnormalized.sub(actualWithdraw)\r\n            .mul(_normalizeBalance(info));\r\n    }\r\n\r\n    /* @dev Transfer the amount of token out.  Rebalance the cash reserve if needed */\r\n    function _transferOut(\r\n        uint256 info,\r\n        uint256 amountUnnormalized,\r\n        uint256 adminFee\r\n    )\r\n        internal\r\n    {\r\n        uint256 amountNormalized = amountUnnormalized.mul(_normalizeBalance(info));\r\n        if (_isYEnabled(info)) {\r\n            if (IERC20(address(info)).balanceOf(address(this)) < amountUnnormalized) {\r\n                _rebalanceReserveSubstract(info, amountUnnormalized);\r\n            }\r\n        }\r\n\r\n        IERC20(address(info)).safeTransfer(\r\n            msg.sender,\r\n            amountUnnormalized\r\n        );\r\n        _totalBalance = _totalBalance\r\n            .sub(amountNormalized)\r\n            .sub(adminFee.mul(_normalizeBalance(info)));\r\n    }\r\n\r\n    /* @dev Transfer the amount of token in.  Rebalance the cash reserve if needed */\r\n    function _transferIn(\r\n        uint256 info,\r\n        uint256 amountUnnormalized\r\n    )\r\n        internal\r\n    {\r\n        uint256 amountNormalized = amountUnnormalized.mul(_normalizeBalance(info));\r\n        IERC20(address(info)).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amountUnnormalized\r\n        );\r\n        _totalBalance = _totalBalance.add(amountNormalized);\r\n\r\n        // If there is saving ytoken, save the balance in _balance.\r\n        if (_isYEnabled(info)) {\r\n            uint256 tid = _getTID(info);\r\n            /* Check rebalance if needed */\r\n            uint256 cash = _getCashBalance(info);\r\n            if (cash > cash.add(_yBalances[tid]).mul(2).div(10)) {\r\n                _rebalanceReserve(info);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Methods for minting LP tokens\r\n     *************************************************************************************/\r\n\r\n    /*\r\n     * @dev Return the amount of sUSD should be minted after depositing bTokenAmount into the pool\r\n     * @param bTokenAmountNormalized - normalized amount of token to be deposited\r\n     * @param oldBalance - normalized amount of all tokens before the deposit\r\n     * @param oldTokenBlance - normalized amount of the balance of the token to be deposited in the pool\r\n     * @param softWeight - percentage that will incur penalty if the resulting token percentage is greater\r\n     * @param hardWeight - maximum percentage of the token\r\n     */\r\n    function _getMintAmount(\r\n        uint256 bTokenAmountNormalized,\r\n        uint256 oldBalance,\r\n        uint256 oldTokenBalance,\r\n        uint256 softWeight,\r\n        uint256 hardWeight\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 s)\r\n    {\r\n        /* Evaluate new percentage */\r\n        uint256 newBalance = oldBalance.add(bTokenAmountNormalized);\r\n        uint256 newTokenBalance = oldTokenBalance.add(bTokenAmountNormalized);\r\n\r\n        /* If new percentage <= soft weight, no penalty */\r\n        if (newTokenBalance.mul(W_ONE) <= softWeight.mul(newBalance)) {\r\n            return bTokenAmountNormalized;\r\n        }\r\n\r\n        require (\r\n            newTokenBalance.mul(W_ONE) <= hardWeight.mul(newBalance),\r\n            \"mint: new percentage exceeds hard weight\"\r\n        );\r\n\r\n        s = 0;\r\n        /* if new percentage <= soft weight, get the beginning of integral with penalty. */\r\n        if (oldTokenBalance.mul(W_ONE) <= softWeight.mul(oldBalance)) {\r\n            s = oldBalance.mul(softWeight).sub(oldTokenBalance.mul(W_ONE)).div(W_ONE.sub(softWeight));\r\n        }\r\n\r\n        // bx + (tx - bx) * (w - 1) / (w - v) + (S - x) * ln((S + tx) / (S + bx)) / (w - v)\r\n        uint256 t;\r\n        { // avoid stack too deep error\r\n        uint256 ldelta = _log(newBalance.mul(W_ONE).div(oldBalance.add(s)));\r\n        t = oldBalance.sub(oldTokenBalance).mul(ldelta);\r\n        }\r\n        t = t.sub(bTokenAmountNormalized.sub(s).mul(W_ONE.sub(hardWeight)));\r\n        t = t.div(hardWeight.sub(softWeight));\r\n        s = s.add(t);\r\n\r\n        require(s <= bTokenAmountNormalized, \"penalty should be positive\");\r\n    }\r\n\r\n    /*\r\n     * @dev Given the token id and the amount to be deposited, return the amount of lp token\r\n     */\r\n    function getMintAmount(\r\n        uint256 bTokenIdx,\r\n        uint256 bTokenAmount\r\n    )\r\n        public\r\n        view\r\n        returns (uint256 lpTokenAmount)\r\n    {\r\n        require(bTokenAmount > 0, \"Amount must be greater than 0\");\r\n\r\n        uint256 info = _tokenInfos[bTokenIdx];\r\n        require(info != 0, \"Backed token is not found!\");\r\n\r\n        // Obtain normalized balances\r\n        uint256 bTokenAmountNormalized = bTokenAmount.mul(_normalizeBalance(info));\r\n        // Gas saving: Use cached totalBalance with accrued interest since last rebalance.\r\n        uint256 totalBalance = _totalBalance;\r\n        uint256 sTokenAmount = _getMintAmount(\r\n            bTokenAmountNormalized,\r\n            totalBalance,\r\n            _getBalance(info),\r\n            _getSoftWeight(info),\r\n            _getHardWeight(info)\r\n        );\r\n\r\n        return sTokenAmount.mul(totalSupply()).div(totalBalance);\r\n    }\r\n\r\n    /*\r\n     * @dev Given the token id and the amount to be deposited, mint lp token\r\n     */\r\n    function mint(\r\n        uint256 bTokenIdx,\r\n        uint256 bTokenAmount,\r\n        uint256 lpTokenMintedMin\r\n    )\r\n        external\r\n        nonReentrantAndUnpaused\r\n    {\r\n        uint256 lpTokenAmount = getMintAmount(bTokenIdx, bTokenAmount);\r\n        require(\r\n            lpTokenAmount >= lpTokenMintedMin,\r\n            \"lpToken minted should >= minimum lpToken asked\"\r\n        );\r\n\r\n        _transferIn(_tokenInfos[bTokenIdx], bTokenAmount);\r\n        _mint(msg.sender, lpTokenAmount);\r\n        emit Mint(msg.sender, bTokenAmount, lpTokenAmount);\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Methods for redeeming LP tokens\r\n     *************************************************************************************/\r\n\r\n    /*\r\n     * @dev Return number of sUSD that is needed to redeem corresponding amount of token for another\r\n     *      token\r\n     * Withdrawing a token will result in increased percentage of other tokens, where\r\n     * the function is used to calculate the penalty incured by the increase of one token.\r\n     * @param totalBalance - normalized amount of the sum of all tokens\r\n     * @param tokenBlance - normalized amount of the balance of a non-withdrawn token\r\n     * @param redeemAount - normalized amount of the token to be withdrawn\r\n     * @param softWeight - percentage that will incur penalty if the resulting token percentage is greater\r\n     * @param hardWeight - maximum percentage of the token\r\n     */\r\n    function _redeemPenaltyFor(\r\n        uint256 totalBalance,\r\n        uint256 tokenBalance,\r\n        uint256 redeemAmount,\r\n        uint256 softWeight,\r\n        uint256 hardWeight\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 newTotalBalance = totalBalance.sub(redeemAmount);\r\n\r\n        /* Soft weight is satisfied.  No penalty is incurred */\r\n        if (tokenBalance.mul(W_ONE) <= newTotalBalance.mul(softWeight)) {\r\n            return 0;\r\n        }\r\n\r\n        require (\r\n            tokenBalance.mul(W_ONE) <= newTotalBalance.mul(hardWeight),\r\n            \"redeem: hard-limit weight is broken\"\r\n        );\r\n\r\n        uint256 bx = 0;\r\n        // Evaluate the beginning of the integral for broken soft weight\r\n        if (tokenBalance.mul(W_ONE) < totalBalance.mul(softWeight)) {\r\n            bx = totalBalance.sub(tokenBalance.mul(W_ONE).div(softWeight));\r\n        }\r\n\r\n        // x * (w - v) / w / w * ln(1 + (tx - bx) * w / (w * (S - tx) - x)) - (tx - bx) * v / w\r\n        uint256 tdelta = tokenBalance.mul(\r\n            _log(W_ONE.add(redeemAmount.sub(bx).mul(hardWeight).div(hardWeight.mul(newTotalBalance).div(W_ONE).sub(tokenBalance)))));\r\n        uint256 s1 = tdelta.mul(hardWeight.sub(softWeight))\r\n            .div(hardWeight).div(hardWeight);\r\n        uint256 s2 = redeemAmount.sub(bx).mul(softWeight).div(hardWeight);\r\n        return s1.sub(s2);\r\n    }\r\n\r\n    /*\r\n     * @dev Return number of sUSD that is needed to redeem corresponding amount of token\r\n     * Withdrawing a token will result in increased percentage of other tokens, where\r\n     * the function is used to calculate the penalty incured by the increase.\r\n     * @param bTokenIdx - token id to be withdrawn\r\n     * @param totalBalance - normalized amount of the sum of all tokens\r\n     * @param balances - normalized amount of the balance of each token\r\n     * @param softWeights - percentage that will incur penalty if the resulting token percentage is greater\r\n     * @param hardWeights - maximum percentage of the token\r\n     * @param redeemAount - normalized amount of the token to be withdrawn\r\n     */\r\n    function _redeemPenaltyForAll(\r\n        uint256 bTokenIdx,\r\n        uint256 totalBalance,\r\n        uint256[] memory balances,\r\n        uint256[] memory softWeights,\r\n        uint256[] memory hardWeights,\r\n        uint256 redeemAmount\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 s = 0;\r\n        for (uint256 k = 0; k < balances.length; k++) {\r\n            if (k == bTokenIdx) {\r\n                continue;\r\n            }\r\n\r\n            s = s.add(\r\n                _redeemPenaltyFor(totalBalance, balances[k], redeemAmount, softWeights[k], hardWeights[k]));\r\n        }\r\n        return s;\r\n    }\r\n\r\n    /*\r\n     * @dev Calculate the derivative of the penalty function.\r\n     * Same parameters as _redeemPenaltyFor.\r\n     */\r\n    function _redeemPenaltyDerivativeForOne(\r\n        uint256 totalBalance,\r\n        uint256 tokenBalance,\r\n        uint256 redeemAmount,\r\n        uint256 softWeight,\r\n        uint256 hardWeight\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 dfx = W_ONE;\r\n        uint256 newTotalBalance = totalBalance.sub(redeemAmount);\r\n\r\n        /* Soft weight is satisfied.  No penalty is incurred */\r\n        if (tokenBalance.mul(W_ONE) <= newTotalBalance.mul(softWeight)) {\r\n            return dfx;\r\n        }\r\n\r\n        // dx = dx + x * (w - v) / (w * (S - tx) - x) / w - v / w\r\n        //    = dx + (x - (S - tx) v) / (w * (S - tx) - x)\r\n        return dfx.add(tokenBalance.mul(W_ONE).sub(newTotalBalance.mul(softWeight))\r\n            .div(hardWeight.mul(newTotalBalance).div(W_ONE).sub(tokenBalance)));\r\n    }\r\n\r\n    /*\r\n     * @dev Calculate the derivative of the penalty function.\r\n     * Same parameters as _redeemPenaltyForAll.\r\n     */\r\n    function _redeemPenaltyDerivativeForAll(\r\n        uint256 bTokenIdx,\r\n        uint256 totalBalance,\r\n        uint256[] memory balances,\r\n        uint256[] memory softWeights,\r\n        uint256[] memory hardWeights,\r\n        uint256 redeemAmount\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 dfx = W_ONE;\r\n        uint256 newTotalBalance = totalBalance.sub(redeemAmount);\r\n        for (uint256 k = 0; k < balances.length; k++) {\r\n            if (k == bTokenIdx) {\r\n                continue;\r\n            }\r\n\r\n            /* Soft weight is satisfied.  No penalty is incurred */\r\n            uint256 softWeight = softWeights[k];\r\n            uint256 balance = balances[k];\r\n            if (balance.mul(W_ONE) <= newTotalBalance.mul(softWeight)) {\r\n                continue;\r\n            }\r\n\r\n            // dx = dx + x * (w - v) / (w * (S - tx) - x) / w - v / w\r\n            //    = dx + (x - (S - tx) v) / (w * (S - tx) - x)\r\n            uint256 hardWeight = hardWeights[k];\r\n            dfx = dfx.add(balance.mul(W_ONE).sub(newTotalBalance.mul(softWeight))\r\n                .div(hardWeight.mul(newTotalBalance).div(W_ONE).sub(balance)));\r\n        }\r\n        return dfx;\r\n    }\r\n\r\n    /*\r\n     * @dev Given the amount of sUSD to be redeemed, find the max token can be withdrawn\r\n     * This function is for swap only.\r\n     * @param tidOutBalance - the balance of the token to be withdrawn\r\n     * @param totalBalance - total balance of all tokens\r\n     * @param tidInBalance - the balance of the token to be deposited\r\n     * @param sTokenAmount - the amount of sUSD to be redeemed\r\n     * @param softWeight/hardWeight - normalized weights for the token to be withdrawn.\r\n     */\r\n    function _redeemFindOne(\r\n        uint256 tidOutBalance,\r\n        uint256 totalBalance,\r\n        uint256 tidInBalance,\r\n        uint256 sTokenAmount,\r\n        uint256 softWeight,\r\n        uint256 hardWeight\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 redeemAmountNormalized = Math.min(\r\n            sTokenAmount,\r\n            tidOutBalance.mul(999).div(1000)\r\n        );\r\n\r\n        for (uint256 i = 0; i < 256; i++) {\r\n            uint256 sNeeded = redeemAmountNormalized.add(\r\n                _redeemPenaltyFor(\r\n                    totalBalance,\r\n                    tidInBalance,\r\n                    redeemAmountNormalized,\r\n                    softWeight,\r\n                    hardWeight\r\n                ));\r\n            uint256 fx = 0;\r\n\r\n            if (sNeeded > sTokenAmount) {\r\n                fx = sNeeded - sTokenAmount;\r\n            } else {\r\n                fx = sTokenAmount - sNeeded;\r\n            }\r\n\r\n            // penalty < 1e-5 of out amount\r\n            if (fx < redeemAmountNormalized / 100000) {\r\n                require(redeemAmountNormalized <= sTokenAmount, \"Redeem error: out amount > lp amount\");\r\n                require(redeemAmountNormalized <= tidOutBalance, \"Redeem error: insufficient balance\");\r\n                return redeemAmountNormalized;\r\n            }\r\n\r\n            uint256 dfx = _redeemPenaltyDerivativeForOne(\r\n                totalBalance,\r\n                tidInBalance,\r\n                redeemAmountNormalized,\r\n                softWeight,\r\n                hardWeight\r\n            );\r\n\r\n            if (sNeeded > sTokenAmount) {\r\n                redeemAmountNormalized = redeemAmountNormalized.sub(fx.mul(W_ONE).div(dfx));\r\n            } else {\r\n                redeemAmountNormalized = redeemAmountNormalized.add(fx.mul(W_ONE).div(dfx));\r\n            }\r\n        }\r\n        require (false, \"cannot find proper resolution of fx\");\r\n    }\r\n\r\n    /*\r\n     * @dev Given the amount of sUSD token to be redeemed, find the max token can be withdrawn\r\n     * @param bTokenIdx - the id of the token to be withdrawn\r\n     * @param sTokenAmount - the amount of sUSD token to be redeemed\r\n     * @param totalBalance - total balance of all tokens\r\n     * @param balances/softWeight/hardWeight - normalized balances/weights of all tokens\r\n     */\r\n    function _redeemFind(\r\n        uint256 bTokenIdx,\r\n        uint256 sTokenAmount,\r\n        uint256 totalBalance,\r\n        uint256[] memory balances,\r\n        uint256[] memory softWeights,\r\n        uint256[] memory hardWeights\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 bTokenAmountNormalized = Math.min(\r\n            sTokenAmount,\r\n            balances[bTokenIdx].mul(999).div(1000)\r\n        );\r\n\r\n        for (uint256 i = 0; i < 256; i++) {\r\n            uint256 sNeeded = bTokenAmountNormalized.add(\r\n                _redeemPenaltyForAll(\r\n                    bTokenIdx,\r\n                    totalBalance,\r\n                    balances,\r\n                    softWeights,\r\n                    hardWeights,\r\n                    bTokenAmountNormalized\r\n                ));\r\n            uint256 fx = 0;\r\n\r\n            if (sNeeded > sTokenAmount) {\r\n                fx = sNeeded - sTokenAmount;\r\n            } else {\r\n                fx = sTokenAmount - sNeeded;\r\n            }\r\n\r\n            // penalty < 1e-5 of out amount\r\n            if (fx < bTokenAmountNormalized / 100000) {\r\n                require(bTokenAmountNormalized <= sTokenAmount, \"Redeem error: out amount > lp amount\");\r\n                require(bTokenAmountNormalized <= balances[bTokenIdx], \"Redeem error: insufficient balance\");\r\n                return bTokenAmountNormalized;\r\n            }\r\n\r\n            uint256 dfx = _redeemPenaltyDerivativeForAll(\r\n                bTokenIdx,\r\n                totalBalance,\r\n                balances,\r\n                softWeights,\r\n                hardWeights,\r\n                bTokenAmountNormalized\r\n            );\r\n\r\n            if (sNeeded > sTokenAmount) {\r\n                bTokenAmountNormalized = bTokenAmountNormalized.sub(fx.mul(W_ONE).div(dfx));\r\n            } else {\r\n                bTokenAmountNormalized = bTokenAmountNormalized.add(fx.mul(W_ONE).div(dfx));\r\n            }\r\n        }\r\n        require (false, \"cannot find proper resolution of fx\");\r\n    }\r\n\r\n    /*\r\n     * @dev Given token id and LP token amount, return the max amount of token can be withdrawn\r\n     * @param tid - the id of the token to be withdrawn\r\n     * @param lpTokenAmount - the amount of LP token\r\n     */\r\n    function _getRedeemByLpTokenAmount(\r\n        uint256 tid,\r\n        uint256 lpTokenAmount\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256 bTokenAmount, uint256 totalBalance, uint256 adminFee)\r\n    {\r\n        require(lpTokenAmount > 0, \"Amount must be greater than 0\");\r\n\r\n        uint256 info = _tokenInfos[tid];\r\n        require(info != 0, \"Backed token is not found!\");\r\n\r\n        // Obtain normalized balances.\r\n        // Gas saving: Use cached balances/totalBalance without accrued interest since last rebalance.\r\n        uint256[] memory balances;\r\n        uint256[] memory softWeights;\r\n        uint256[] memory hardWeights;\r\n        (balances, softWeights, hardWeights, totalBalance) = _getBalancesAndWeights();\r\n        bTokenAmount = _redeemFind(\r\n            tid,\r\n            lpTokenAmount.mul(_totalBalance).div(totalSupply()), // use pre-admin-fee-collected totalBalance\r\n            totalBalance,\r\n            balances,\r\n            softWeights,\r\n            hardWeights\r\n        ).div(_normalizeBalance(info));\r\n        uint256 fee = bTokenAmount.mul(_redeemFee).div(W_ONE);\r\n        adminFee = fee.mul(_adminFeePct).div(W_ONE);\r\n        bTokenAmount = bTokenAmount.sub(fee);\r\n    }\r\n\r\n    function getRedeemByLpTokenAmount(\r\n        uint256 tid,\r\n        uint256 lpTokenAmount\r\n    )\r\n        public\r\n        view\r\n        returns (uint256 bTokenAmount)\r\n    {\r\n        (bTokenAmount,,) = _getRedeemByLpTokenAmount(tid, lpTokenAmount);\r\n\r\n    }\r\n\r\n    function redeemByLpToken(\r\n        uint256 bTokenIdx,\r\n        uint256 lpTokenAmount,\r\n        uint256 bTokenMin\r\n    )\r\n        external\r\n        nonReentrantAndUnpaused\r\n    {\r\n        (uint256 bTokenAmount, uint256 totalBalance, uint256 adminFee) = _getRedeemByLpTokenAmount(\r\n            bTokenIdx,\r\n            lpTokenAmount\r\n        );\r\n        require(bTokenAmount >= bTokenMin, \"bToken returned < min bToken asked\");\r\n\r\n        // Make sure _totalBalance == sum(balances)\r\n        _collectReward(totalBalance);\r\n\r\n        _burn(msg.sender, lpTokenAmount);\r\n        _transferOut(_tokenInfos[bTokenIdx], bTokenAmount, adminFee);\r\n\r\n        emit Redeem(msg.sender, bTokenAmount, lpTokenAmount);\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Methods for swapping tokens\r\n     *************************************************************************************/\r\n\r\n    /*\r\n     * @dev Return the maximum amount of token can be withdrawn after depositing another token.\r\n     * @param bTokenIdIn - the id of the token to be deposited\r\n     * @param bTokenIdOut - the id of the token to be withdrawn\r\n     * @param bTokenInAmount - the amount (unnormalized) of the token to be deposited\r\n     */\r\n    function getSwapAmount(\r\n        uint256 bTokenIdxIn,\r\n        uint256 bTokenIdxOut,\r\n        uint256 bTokenInAmount\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 bTokenOutAmount)\r\n    {\r\n        uint256 infoIn = _tokenInfos[bTokenIdxIn];\r\n        uint256 infoOut = _tokenInfos[bTokenIdxOut];\r\n\r\n        (bTokenOutAmount,) = _getSwapAmount(infoIn, infoOut, bTokenInAmount);\r\n    }\r\n\r\n    function _getSwapAmount(\r\n        uint256 infoIn,\r\n        uint256 infoOut,\r\n        uint256 bTokenInAmount\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256 bTokenOutAmount, uint256 adminFee)\r\n    {\r\n        require(bTokenInAmount > 0, \"Amount must be greater than 0\");\r\n        require(infoIn != 0, \"Backed token is not found!\");\r\n        require(infoOut != 0, \"Backed token is not found!\");\r\n        require (infoIn != infoOut, \"Tokens for swap must be different!\");\r\n\r\n        // Gas saving: Use cached totalBalance without accrued interest since last rebalance.\r\n        // Here we assume that the interest earned from the underlying platform is too small to\r\n        // impact the result significantly.\r\n        uint256 totalBalance = _totalBalance;\r\n        uint256 tidInBalance = _getBalance(infoIn);\r\n        uint256 sMinted = 0;\r\n        uint256 softWeight = _getSoftWeight(infoIn);\r\n        uint256 hardWeight = _getHardWeight(infoIn);\r\n\r\n        { // avoid stack too deep error\r\n        uint256 bTokenInAmountNormalized = bTokenInAmount.mul(_normalizeBalance(infoIn));\r\n        sMinted = _getMintAmount(\r\n            bTokenInAmountNormalized,\r\n            totalBalance,\r\n            tidInBalance,\r\n            softWeight,\r\n            hardWeight\r\n        );\r\n\r\n        totalBalance = totalBalance.add(bTokenInAmountNormalized);\r\n        tidInBalance = tidInBalance.add(bTokenInAmountNormalized);\r\n        }\r\n        uint256 tidOutBalance = _getBalance(infoOut);\r\n\r\n        // Find the bTokenOutAmount, only account for penalty from bTokenIdxIn\r\n        // because other tokens should not have penalty since\r\n        // bTokenOutAmount <= sMinted <= bTokenInAmount (normalized), and thus\r\n        // for other tokens, the percentage decreased by bTokenInAmount will be\r\n        // >= the percetnage increased by bTokenOutAmount.\r\n        bTokenOutAmount = _redeemFindOne(\r\n            tidOutBalance,\r\n            totalBalance,\r\n            tidInBalance,\r\n            sMinted,\r\n            softWeight,\r\n            hardWeight\r\n        ).div(_normalizeBalance(infoOut));\r\n        uint256 fee = bTokenOutAmount.mul(_swapFee).div(W_ONE);\r\n        adminFee = fee.mul(_adminFeePct).div(W_ONE);\r\n        bTokenOutAmount = bTokenOutAmount.sub(fee);\r\n    }\r\n\r\n    /*\r\n     * @dev Swap a token to another.\r\n     * @param bTokenIdIn - the id of the token to be deposited\r\n     * @param bTokenIdOut - the id of the token to be withdrawn\r\n     * @param bTokenInAmount - the amount (unnormalized) of the token to be deposited\r\n     * @param bTokenOutMin - the mininum amount (unnormalized) token that is expected to be withdrawn\r\n     */\r\n    function swap(\r\n        uint256 bTokenIdxIn,\r\n        uint256 bTokenIdxOut,\r\n        uint256 bTokenInAmount,\r\n        uint256 bTokenOutMin\r\n    )\r\n        external\r\n        nonReentrantAndUnpaused\r\n    {\r\n        uint256 infoIn = _tokenInfos[bTokenIdxIn];\r\n        uint256 infoOut = _tokenInfos[bTokenIdxOut];\r\n        (\r\n            uint256 bTokenOutAmount,\r\n            uint256 adminFee\r\n        ) = _getSwapAmount(infoIn, infoOut, bTokenInAmount);\r\n        require(bTokenOutAmount >= bTokenOutMin, \"Returned bTokenAmount < asked\");\r\n\r\n        _transferIn(infoIn, bTokenInAmount);\r\n        _transferOut(infoOut, bTokenOutAmount, adminFee);\r\n\r\n        emit Swap(\r\n            msg.sender,\r\n            bTokenIdxIn,\r\n            bTokenIdxOut,\r\n            bTokenInAmount,\r\n            bTokenOutAmount\r\n        );\r\n    }\r\n\r\n    /*\r\n     * @dev Swap tokens given all token amounts\r\n     * The amounts are pre-fee amounts, and the user will provide max fee expected.\r\n     * Currently, do not support penalty.\r\n     * @param inOutFlag - 0 means deposit, and 1 means withdraw with highest bit indicating mint/burn lp token\r\n     * @param lpTokenMintedMinOrBurnedMax - amount of lp token to be minted/burnt\r\n     * @param maxFee - maximum percentage of fee will be collected for withdrawal\r\n     * @param amounts - list of unnormalized amounts of each token\r\n     */\r\n    function swapAll(\r\n        uint256 inOutFlag,\r\n        uint256 lpTokenMintedMinOrBurnedMax,\r\n        uint256 maxFee,\r\n        uint256[] calldata amounts\r\n    )\r\n        external\r\n        nonReentrantAndUnpaused\r\n    {\r\n        // Gas saving: Use cached balances/totalBalance without accrued interest since last rebalance.\r\n        (\r\n            uint256[] memory balances,\r\n            uint256[] memory infos,\r\n            uint256 oldTotalBalance\r\n        ) = _getBalancesAndInfos();\r\n        // Make sure _totalBalance = oldTotalBalance = sum(_getBalance()'s)\r\n        _collectReward(oldTotalBalance);\r\n\r\n        require (amounts.length == balances.length, \"swapAll amounts length != ntokens\");\r\n        uint256 newTotalBalance = 0;\r\n        uint256 depositAmount = 0;\r\n\r\n        { // avoid stack too deep error\r\n        uint256[] memory newBalances = new uint256[](balances.length);\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            uint256 normalizedAmount = _normalizeBalance(infos[i]).mul(amounts[i]);\r\n            if (((inOutFlag >> i) & 1) == 0) {\r\n                // In\r\n                depositAmount = depositAmount.add(normalizedAmount);\r\n                newBalances[i] = balances[i].add(normalizedAmount);\r\n            } else {\r\n                // Out\r\n                newBalances[i] = balances[i].sub(normalizedAmount);\r\n            }\r\n            newTotalBalance = newTotalBalance.add(newBalances[i]);\r\n        }\r\n\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            // If there is no mint/redeem, and the new total balance >= old one,\r\n            // then the weight must be non-increasing and thus there is no penalty.\r\n            if (amounts[i] == 0 && newTotalBalance >= oldTotalBalance) {\r\n                continue;\r\n            }\r\n\r\n            /*\r\n             * Accept the new amount if the following is satisfied\r\n             *     np_i <= max(p_i, w_i)\r\n             */\r\n            if (newBalances[i].mul(W_ONE) <= newTotalBalance.mul(_getSoftWeight(infos[i]))) {\r\n                continue;\r\n            }\r\n\r\n            // If no tokens in the pool, only weight contraints will be applied.\r\n            require(\r\n                oldTotalBalance != 0 &&\r\n                newBalances[i].mul(oldTotalBalance) <= newTotalBalance.mul(balances[i]),\r\n                \"penalty is not supported in swapAll now\"\r\n            );\r\n        }\r\n        }\r\n\r\n        // Calculate fee rate and mint/burn LP tokens\r\n        uint256 feeRate = 0;\r\n        uint256 lpMintedOrBurned = 0;\r\n        if (newTotalBalance == oldTotalBalance) {\r\n            // Swap only.  No need to burn or mint.\r\n            lpMintedOrBurned = 0;\r\n            feeRate = _swapFee;\r\n        } else if (((inOutFlag >> 255) & 1) == 0) {\r\n            require (newTotalBalance >= oldTotalBalance, \"swapAll mint: new total balance must >= old total balance\");\r\n            lpMintedOrBurned = newTotalBalance.sub(oldTotalBalance).mul(totalSupply()).div(oldTotalBalance);\r\n            require(lpMintedOrBurned >= lpTokenMintedMinOrBurnedMax, \"LP tokend minted < asked\");\r\n            feeRate = _swapFee;\r\n            _mint(msg.sender, lpMintedOrBurned);\r\n        } else {\r\n            require (newTotalBalance <= oldTotalBalance, \"swapAll redeem: new total balance must <= old total balance\");\r\n            lpMintedOrBurned = oldTotalBalance.sub(newTotalBalance).mul(totalSupply()).div(oldTotalBalance);\r\n            require(lpMintedOrBurned <= lpTokenMintedMinOrBurnedMax, \"LP tokend burned > offered\");\r\n            uint256 withdrawAmount = oldTotalBalance - newTotalBalance;\r\n            /*\r\n             * The fee is determined by swapAmount * swap_fee + withdrawAmount * withdraw_fee,\r\n             * where swapAmount = depositAmount if withdrawAmount >= 0.\r\n             */\r\n            feeRate = _swapFee.mul(depositAmount).add(_redeemFee.mul(withdrawAmount)).div(depositAmount.add(withdrawAmount));\r\n            _burn(msg.sender, lpMintedOrBurned);\r\n        }\r\n        emit SwapAll(msg.sender, amounts, inOutFlag, lpMintedOrBurned);\r\n\r\n        require (feeRate <= maxFee, \"swapAll fee is greater than max fee user offered\");\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            if (amounts[i] == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (((inOutFlag >> i) & 1) == 0) {\r\n                // In\r\n                _transferIn(infos[i], amounts[i]);\r\n            } else {\r\n                // Out (with fee)\r\n                uint256 fee = amounts[i].mul(feeRate).div(W_ONE);\r\n                uint256 adminFee = fee.mul(_adminFeePct).div(W_ONE);\r\n                _transferOut(infos[i], amounts[i].sub(fee), adminFee);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Methods for others\r\n     *************************************************************************************/\r\n\r\n    /* @dev Collect admin fee so that _totalBalance == sum(_getBalances()'s) */\r\n    function _collectReward(uint256 totalBalance) internal {\r\n        uint256 oldTotalBalance = _totalBalance;\r\n        if (totalBalance != oldTotalBalance) {\r\n            if (totalBalance > oldTotalBalance) {\r\n                _mint(_rewardCollector, totalSupply().mul(totalBalance - oldTotalBalance).div(oldTotalBalance));\r\n            }\r\n            _totalBalance = totalBalance;\r\n        }\r\n    }\r\n\r\n    /* @dev Collect admin fee.  Can be called by anyone */\r\n    function collectReward()\r\n        external\r\n        nonReentrantAndUnpaused\r\n    {\r\n        (,,,uint256 totalBalance) = _getBalancesAndWeights();\r\n        _collectReward(totalBalance);\r\n    }\r\n\r\n    function getTokenStats(uint256 bTokenIdx)\r\n        public\r\n        view\r\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals)\r\n    {\r\n        require(bTokenIdx < _ntokens, \"Backed token is not found!\");\r\n\r\n        uint256 info = _tokenInfos[bTokenIdx];\r\n\r\n        balance = _getBalance(info).div(_normalizeBalance(info));\r\n        softWeight = _getSoftWeight(info);\r\n        hardWeight = _getHardWeight(info);\r\n        decimals = ERC20(address(info)).decimals();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sTokenMinted\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sTokenBurn\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bTokenIdIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bTokenIdOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inOutFlag\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sTokenMintedOrBurned\",\"type\":\"uint256\"}],\"name\":\"SwapAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_adminFeePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_adminInterestPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ntokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tokenExist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_yBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_yTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"yTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decMultipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"softWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"hardWeights\",\"type\":\"uint256[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newSoftWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHardWeight\",\"type\":\"uint256\"}],\"name\":\"adjustWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"changeAdminFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"changeAdminInterestPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"}],\"name\":\"changeRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"changeRewardCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"changeSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bTokenIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getRedeemByLpTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bTokenIdxIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bTokenIdxOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bTokenInAmount\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bTokenOutAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bTokenIdx\",\"type\":\"uint256\"}],\"name\":\"getTokenStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"softWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bTokenIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenMintedMin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"o\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"rebalanceReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bTokenIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bTokenMin\",\"type\":\"uint256\"}],\"name\":\"redeemByLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yAddr\",\"type\":\"address\"}],\"name\":\"setYEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bTokenIdxIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bTokenIdxOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bTokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bTokenOutMin\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inOutFlag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenMintedMinOrBurnedMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"swapAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmoothyV1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3395a3d8f752cad02d27a22de50b13bd80349af5f508d1eea947ad150b3babc9"}]}