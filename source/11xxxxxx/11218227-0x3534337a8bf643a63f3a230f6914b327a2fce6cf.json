{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-07\r\n*/\r\n\r\npragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: No License\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b >0 ) ;\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\nlibrary EnumerableSet {\r\n   \r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    \r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            \r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n     \r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n      \r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {  \r\n             \r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n         \r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n         \r\n            set._values[toDeleteIndex] = lastvalue;\r\n            \r\n            set._indexes[lastvalue] = toDeleteIndex + 1; \r\n            \r\n            set._values.pop();\r\n \r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n \r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n  \r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   \r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n \r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    \r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n   \r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n   \r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n  \r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n   \r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n \r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n     \r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n \r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n \r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n}\r\n\r\n\r\ncontract PredictzDex is Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n \r\n  \r\n    \r\n    \r\n\r\n    /*\r\n    swapOwners[i] = [\r\n        0 => Swap ID,\r\n        1 => Swap Owner,\r\n        2 => Swap Token,\r\n        3 => Swap Quanitiy,\r\n        4 => Swap Deadline,\r\n        5 => Swap Status, 0 => Pending, 1 => Received, 2 => Finished \r\n    ]\r\n    */\r\n\r\n  \r\n  \r\n     \r\n    struct Swap {\r\n        address owner;\r\n        address token;\r\n        uint256 quantity;\r\n        uint256 balance;\r\n        uint256 decimals;\r\n        uint256 rate;\r\n        uint256 deadline;\r\n        uint256 status;   \r\n        bool exists;    \r\n    }\r\n    \r\n\r\n    mapping(uint256 => Swap)  swaps;\r\n     \r\n \r\n    uint256[] public swapOwners;\r\n\r\n \r\n   function getAllSwaps() view public  returns (uint256[] memory){\r\n       return swapOwners;\r\n   }\r\n    \r\n    function swap(uint256 swapID , address token, uint256 quantity,uint256 rate , uint256 decimals , uint256 deadline) public returns (uint256)  {\r\n        require(quantity > 0, \"Cannot Swap with 0 Tokens\");\r\n        require(deadline > now, \"Cannot Swap for before time\");\r\n        require(Token(token).transferFrom(msg.sender, address(this), quantity), \"Insufficient Token Allowance\");\r\n        \r\n        require(swaps[swapID].exists !=  true  , \"Swap already Exists\" );\r\n        \r\n        \r\n\r\n        Swap storage newswap = swaps[swapID];\r\n        newswap.owner =  msg.sender;\r\n        newswap.token =  token; \r\n        newswap.quantity =  quantity ;\r\n        newswap.balance =  quantity ;\r\n        newswap.decimals =  decimals ;\r\n        newswap.rate =  rate ;\r\n        newswap.deadline =  deadline; \r\n        newswap.status =  0 ;\r\n        newswap.exists =  true ;\r\n         \r\n        swapOwners.push(swapID) ;\r\n\r\n\r\n    }\r\n     \r\n\r\n\r\n        function getSwap(uint256  _swapID ) view public returns (address , address , uint256,  uint256 , uint256 , uint256 , uint256  ) {\r\n                    return (swaps[_swapID].owner , swaps[_swapID].token , swaps[_swapID].rate , swaps[_swapID].deadline , swaps[_swapID].quantity , swaps[_swapID].status , swaps[_swapID].balance   );\r\n        }\r\n    \r\n      function getSwapDecimals(uint256  _swapID ) view public returns (uint256 ) {\r\n                    return ( swaps[_swapID].decimals  );\r\n        }\r\n        \r\n       function calculateFee(uint256  _swapID , uint256 tokenAmt ) view public returns ( uint256 , uint256 , uint256 ) {\r\n                    return  (swaps[_swapID].balance , swaps[_swapID].deadline , swaps[_swapID].rate.mul(tokenAmt) );\r\n        }\r\n        \r\n         function calculateToken(uint256  _swapID , uint256 bidamt ) view public returns ( uint256 ) {\r\n                    return  (bidamt.div(swaps[_swapID].rate))  ;\r\n        }\r\n        \r\n        function calculateRate(uint256  equivalentToken)  pure public returns ( uint256 ) {\r\n                uint256 base = 1e18 ;\r\n                return  (base.div(equivalentToken)) ;\r\n        }\r\n    \r\n        function buy(uint256 amount, uint256 _swapID , uint256 tokenAmt) payable public {\r\n           require(swaps[_swapID].balance >= tokenAmt, \"Not Enough Tokens\");\r\n           require(swaps[_swapID].deadline > now, \"Pool Expired\");\r\n           require(msg.value == amount);\r\n           require(msg.value == swaps[_swapID].rate.mul(tokenAmt));\r\n            \r\n\t\t   Swap storage singleswap = swaps[_swapID];\r\n           \r\n\t\t   singleswap.balance = singleswap.balance.sub(tokenAmt.mul(singleswap.decimals)) ;\r\n\r\n           transferAnyERC20Tokens(singleswap.token, msg.sender , tokenAmt.mul(singleswap.decimals) ); \r\n        \r\n         }\r\n         \r\n           function withdraw() public onlyOwner{\r\n                msg.sender.transfer(address(this).balance);\r\n            }\r\n    \r\n    function transferAnyERC20Tokens(address _tokenAddr, address _to, uint256 _amount) private {\r\n        Token(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n    \r\n        function OwnertransferAnyERC20Tokens(address _tokenAddr, address _to, uint256 _amount) public onlyOwner {\r\n        \r\n        Token(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OwnertransferAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"equivalentToken\",\"type\":\"uint256\"}],\"name\":\"calculateRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidamt\",\"type\":\"uint256\"}],\"name\":\"calculateToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSwaps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapID\",\"type\":\"uint256\"}],\"name\":\"getSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapID\",\"type\":\"uint256\"}],\"name\":\"getSwapDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PredictzDex","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06ca4e950288ace5ce25f0a363973fa4ace59acb5a8cf3d66a1949c42cd0ddbd"}]}