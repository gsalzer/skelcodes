{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: No License (None)\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"Not Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0),\"Zero address not allowed\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Staking is Ownable {\r\n    uint256 constant NOMINATOR = 10**18;    // rate nominator\r\n    uint256 constant SECONDS = 31536000;    // number of seconde in a year (365 days)\r\n    IBEP20 public token;\r\n    uint256 public totalStakingAmount;\r\n\r\n    event SetOption(uint256 id, uint128 period, uint128 rate);\r\n    event RemoveOption(uint256 id, uint128 period, uint128 rate);\r\n    event CreateOrder(address indexed user, uint256 id, uint256 amount, uint256 startDate, uint128 period, uint128 rate);\r\n    event RemoveOrder(address indexed user, uint256 id, uint256 amount, uint256 startDate, uint128 period, uint128 rate);\r\n    event UpdateOrder(address indexed user, uint256 id, uint256 amount, uint256 startDate, uint128 period, uint128 rate);\r\n    event WithdrawStaking(address indexed user, uint256 amount);\r\n\r\n    struct Option {\r\n        uint128 period; // in seconds\r\n        uint128 rate;   // rate with 18 decimals\r\n    }\r\n\r\n    Option[] options;\r\n\r\n    struct Order {\r\n        uint256 amount;\r\n        uint256 startDate;\r\n        uint128 period; // in seconds\r\n        uint128 rate;   // rate with 18 decimals\r\n    }\r\n\r\n    mapping (address => Order[]) stakingOrders;\r\n\r\n    constructor (address _token) {\r\n        token = IBEP20(_token);\r\n    }\r\n\r\n    // Safe Math subtract function\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function getRewardsPool() public view returns(uint256 rewardsPool) {\r\n        return safeSub(token.balanceOf(address(this)),totalStakingAmount);\r\n    }\r\n\r\n    function getNumberOptions() external view returns(uint256 number) {\r\n        return options.length;\r\n    }\r\n\r\n    function getOptions() external view returns(Option[] memory) {\r\n        return options;\r\n    }\r\n\r\n    function getOption(uint256 id) external view returns(Option memory option) {\r\n        return options[id];\r\n    }\r\n\r\n\r\n    // period - in seconds\r\n    // rate - percent per year with 18 decimals\r\n    function addOption(uint128 period, uint128 rate) external onlyOwner returns(bool) {\r\n        uint256 id = options.length;\r\n        options.push(Option(period,rate));\r\n        emit SetOption(id, period, rate);\r\n        return true;\r\n    }\r\n\r\n    // period - in seconds\r\n    // rate - percent per year with 18 decimals\r\n    // id - id of option to change\r\n    function changeOption(uint128 period, uint128 rate, uint256 id) external onlyOwner returns(bool) {\r\n        options[id].period = period;\r\n        options[id].rate = rate;\r\n        emit SetOption(id, period, rate);\r\n        return true;\r\n    }\r\n\r\n    // id - id of option to remove\r\n    function removeOption(uint256 id) external onlyOwner returns(bool) {\r\n        uint256 last = options.length - 1;\r\n        require(id <= last, \"Wrong order id\");\r\n        emit RemoveOption(id, options[id].period, options[id].rate);\r\n\r\n        while (id < last) {\r\n            options[id] = options[id+1];\r\n            id++;\r\n        }\r\n        options.pop();\r\n        return true;\r\n    }\r\n\r\n    function getNumberOrders(address user) external view returns(uint256 number) {\r\n        return stakingOrders[user].length;\r\n    }\r\n\r\n    function getOrders(address user) external view returns(Order[] memory order) {\r\n        return stakingOrders[user];\r\n    }\r\n\r\n    function getOrder(address user, uint256 id) external view returns(Order memory order) {\r\n        return stakingOrders[user][id];\r\n    }\r\n\r\n    //user - address of user wallet\r\n    //id - order id of user\r\n    function calculateReward(address user, uint256 id) external view returns(uint256 reward) {\r\n        (reward, ) = _calculateReward(user, id);\r\n    }\r\n\r\n    function createOrder(uint256 optionId, uint256 amount) external returns(bool) {\r\n        require(optionId < options.length, \"Wrong option ID\");\r\n        require(amount > 0, \"Amount can't be zero\");\r\n        token.transferFrom(msg.sender,address(this),amount);\r\n        totalStakingAmount += amount;\r\n        uint256 id = stakingOrders[msg.sender].length;\r\n\r\n        Order memory order = Order(amount, block.timestamp, options[optionId].period, options[optionId].rate);\r\n        stakingOrders[msg.sender].push(order);\r\n        emit CreateOrder(msg.sender, id, order.amount, order.startDate, order.period, order.rate);\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint256 id) external returns(bool) {\r\n        (uint256 reward, bool complete) = _calculateReward(msg.sender, id);\r\n        require(complete, \"Staking not complete\");\r\n        require(getRewardsPool() >= reward, \"Not enough tokens for reward\");\r\n        Order memory o = stakingOrders[msg.sender][id];\r\n        totalStakingAmount = safeSub(totalStakingAmount, o.amount);\r\n        token.transfer(msg.sender, o.amount + reward);\r\n        _removeOrder(msg.sender, id);\r\n        emit RemoveOrder(msg.sender, id, o.amount, o.startDate, o.period, o.rate);\r\n        emit WithdrawStaking(msg.sender, o.amount + reward);\r\n        return true;\r\n    }\r\n\r\n    // in case of empty rewards Pool user can withdraw tokens without reward\r\n    function withdrawWithoutReward(uint256 id) external returns(bool) {\r\n        (, bool complete) = _calculateReward(msg.sender, id);\r\n        require(complete, \"Staking not complete\");\r\n        Order memory o = stakingOrders[msg.sender][id];\r\n        totalStakingAmount = safeSub(totalStakingAmount, o.amount);\r\n        token.transfer(msg.sender, o.amount);\r\n        _removeOrder(msg.sender, id);\r\n        emit RemoveOrder(msg.sender, id, o.amount, o.startDate, o.period, o.rate);\r\n        emit WithdrawStaking(msg.sender, o.amount);\r\n        return true;\r\n    }\r\n\r\n    function upgradeOrder(uint256 id, uint256 optionId) external returns(bool) {\r\n        (uint256 reward, bool complete) = _calculateReward(msg.sender, id);\r\n        require(!complete, \"Staking complete\");\r\n        require(getRewardsPool() >= reward, \"Not enough tokens for reward\");\r\n        require(optionId < options.length, \"Wrong option ID\");\r\n        Order storage o = stakingOrders[msg.sender][id];\r\n        Option memory opt = options[optionId];\r\n        require(o.period < opt.period, \"Not allowed change order to shorter period\");\r\n        totalStakingAmount += reward;\r\n        o.amount = o.amount + reward;\r\n        o.startDate = block.timestamp;\r\n        o.period = opt.period;\r\n        o.rate = opt.rate;\r\n        emit UpdateOrder(msg.sender, id, o.amount, o.startDate, o.period, o.rate);\r\n        return true;\r\n    }\r\n\r\n    function addToOrder(uint256 id, uint256 amount) external returns(bool) {\r\n        (uint256 reward, bool complete) = _calculateReward(msg.sender, id);\r\n        require(!complete, \"Staking complete\");\r\n        require(getRewardsPool() >= reward, \"Not enough tokens for reward\");\r\n        token.transferFrom(msg.sender,address(this),amount);\r\n        totalStakingAmount = totalStakingAmount + amount + reward;\r\n        Order storage o = stakingOrders[msg.sender][id];\r\n        o.amount = o.amount + amount + reward;\r\n        o.startDate = block.timestamp;\r\n        emit UpdateOrder(msg.sender, id, o.amount, o.startDate, o.period, o.rate);\r\n        return true;\r\n    }\r\n\r\n    function _removeOrder(address user, uint256 id) internal {\r\n        uint256 last = stakingOrders[user].length - 1;\r\n        require(id <= last, \"Wrong order id\");\r\n        if (id < last) {\r\n            stakingOrders[user][id] = stakingOrders[user][last];\r\n        }\r\n        stakingOrders[user].pop();\r\n    }\r\n\r\n    function _calculateReward(address user, uint256 id) internal view returns(uint256 reward, bool finished) {\r\n        Order memory o = stakingOrders[user][id];\r\n        uint256 timePassed = block.timestamp - o.startDate;\r\n        if (timePassed > o.period) {\r\n            timePassed = o.period;\r\n            finished = true;\r\n        }\r\n        reward = o.amount * timePassed * o.rate / (100 * SECONDS * NOMINATOR);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"CreateOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"RemoveOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"RemoveOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"SetOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"UpdateOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStaking\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"addOption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"changeOption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNumberOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOption\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct Staking.Option\",\"name\":\"option\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct Staking.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct Staking.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct Staking.Order[]\",\"name\":\"order\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeOption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"upgradeOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawWithoutReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001368452bfb5cd127971c8de22c58fbe89d35a6bf","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d4a066cfbbf0e9ee6621866b855d50735cab05dea8d2a633b772dea25b5264f8"}]}