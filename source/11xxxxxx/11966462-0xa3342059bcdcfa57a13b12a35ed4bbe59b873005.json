{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-03-02\r\n*/\r\n\r\n// Copyright (C) 2020, 2021 Lev Livnev <lev@liv.nev.org.uk>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ninterface JugAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function base() external view returns (address);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// https://github.com/dapphub/ds-token/blob/master/src/token.sol\r\ninterface DSTokenAbstract {\r\n    function name() external view returns (bytes32);\r\n    function symbol() external view returns (bytes32);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function approve(address) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function mint(uint256) external;\r\n    function mint(address,uint) external;\r\n    function burn(uint256) external;\r\n    function burn(address,uint) external;\r\n    function setName(bytes32) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface DaiJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/dai.sol\r\ninterface DaiAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function version() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function nonces(address) external view returns (uint256);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external view returns (bytes32);\r\n    function transfer(address, uint256) external;\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function mint(address, uint256) external;\r\n    function burn(address, uint256) external;\r\n    function approve(address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function permit(address, address, uint256, uint256, bool, uint8, bytes32, bytes32) external;\r\n}\r\n\r\ncontract RwaUrn {\r\n    // --- auth ---\r\n    mapping (address => uint256) public wards;\r\n    mapping (address => uint256) public can;\r\n    function rely(address usr) external auth {\r\n        wards[usr] = 1;\r\n        emit Rely(usr);\r\n    }\r\n    function deny(address usr) external auth {\r\n        wards[usr] = 0;\r\n        emit Deny(usr);\r\n    }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"RwaUrn/not-authorized\");\r\n        _;\r\n    }\r\n    function hope(address usr) external auth {\r\n        can[usr] = 1;\r\n        emit Hope(usr);\r\n    }\r\n    function nope(address usr) external auth {\r\n        can[usr] = 0;\r\n        emit Nope(usr);\r\n    }\r\n    modifier operator {\r\n        require(can[msg.sender] == 1, \"RwaUrn/not-operator\");\r\n        _;\r\n    }\r\n\r\n    VatAbstract  public vat;\r\n    JugAbstract  public jug;\r\n    GemJoinAbstract public gemJoin;\r\n    DaiJoinAbstract public daiJoin;\r\n    address public outputConduit;\r\n\r\n    // Events\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event Hope(address indexed usr);\r\n    event Nope(address indexed usr);\r\n    event File(bytes32 indexed what, address data);\r\n    event Lock(address indexed usr, uint256 wad);\r\n    event Free(address indexed usr, uint256 wad);\r\n    event Draw(address indexed usr, uint256 wad);\r\n    event Wipe(address indexed usr, uint256 wad);\r\n    event Quit(address indexed usr, uint256 wad);\r\n\r\n    // --- math ---\r\n    uint256 constant RAY = 10 ** 27;\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(x, sub(y, 1)) / y;\r\n    }\r\n\r\n    // --- init ---\r\n    constructor(\r\n        address vat_, address jug_, address gemJoin_, address daiJoin_, address outputConduit_\r\n    ) public {\r\n        // requires in urn that outputConduit isn't address(0)\r\n        vat = VatAbstract(vat_);\r\n        jug = JugAbstract(jug_);\r\n        gemJoin = GemJoinAbstract(gemJoin_);\r\n        daiJoin = DaiJoinAbstract(daiJoin_);\r\n        outputConduit = outputConduit_;\r\n        wards[msg.sender] = 1;\r\n        DSTokenAbstract(gemJoin.gem()).approve(address(gemJoin), uint256(-1));\r\n        DaiAbstract(daiJoin.dai()).approve(address(daiJoin), uint256(-1));\r\n        VatAbstract(vat_).hope(address(daiJoin));\r\n        emit Rely(msg.sender);\r\n        emit File(\"outputConduit\", outputConduit_);\r\n        emit File(\"jug\", jug_);\r\n    }\r\n\r\n    // --- administration ---\r\n    function file(bytes32 what, address data) external auth {\r\n        if (what == \"outputConduit\") { outputConduit = data; }\r\n        else if (what == \"jug\") { jug = JugAbstract(data); }\r\n        else revert(\"RwaUrn/unrecognised-param\");\r\n        emit File(what, data);\r\n    }\r\n\r\n    // --- cdp operation ---\r\n    // n.b. that the operator must bring the gem\r\n    function lock(uint256 wad) external operator {\r\n        require(wad <= 2**255 - 1, \"RwaUrn/overflow\");\r\n        DSTokenAbstract(gemJoin.gem()).transferFrom(msg.sender, address(this), wad);\r\n        // join with address this\r\n        gemJoin.join(address(this), wad);\r\n        vat.frob(gemJoin.ilk(), address(this), address(this), address(this), int(wad), 0);\r\n        emit Lock(msg.sender, wad);\r\n    }\r\n    // n.b. that the operator takes the gem\r\n    // and might not be the same operator who brought the gem\r\n    function free(uint256 wad) external operator {\r\n        require(wad <= 2**255, \"RwaUrn/overflow\");\r\n        vat.frob(gemJoin.ilk(), address(this), address(this), address(this), -int(wad), 0);\r\n        gemJoin.exit(msg.sender, wad);\r\n        emit Free(msg.sender, wad);\r\n    }\r\n    // n.b. DAI can only go to the output conduit\r\n    function draw(uint256 wad) external operator {\r\n        require(outputConduit != address(0));\r\n        bytes32 ilk = gemJoin.ilk();\r\n        jug.drip(ilk);\r\n        (,uint256 rate,,,) = vat.ilks(ilk);\r\n        uint256 dart = divup(mul(RAY, wad), rate);\r\n        require(dart <= 2**255 - 1, \"RwaUrn/overflow\");\r\n        vat.frob(ilk, address(this), address(this), address(this), 0, int(dart));\r\n        daiJoin.exit(outputConduit, wad);\r\n        emit Draw(msg.sender, wad);\r\n    }\r\n    // n.b. anyone can wipe\r\n    function wipe(uint256 wad) external {\r\n        daiJoin.join(address(this), wad);\r\n        bytes32 ilk = gemJoin.ilk();\r\n        jug.drip(ilk);\r\n        (,uint256 rate,,,) = vat.ilks(ilk);\r\n        uint256 dart = mul(RAY, wad) / rate;\r\n        require(dart <= 2 ** 255, \"RwaUrn/overflow\");\r\n        vat.frob(ilk, address(this), address(this), address(this), 0, -int(dart));\r\n        emit Wipe(msg.sender, wad);\r\n    }\r\n\r\n    // If Dai is sitting here after ES that should be sent back\r\n    function quit() external {\r\n        require(outputConduit != address(0));\r\n        require(vat.live() == 0, \"RwaUrn/vat-still-live\");\r\n        DSTokenAbstract dai = DSTokenAbstract(daiJoin.dai());\r\n        uint256 wad = dai.balanceOf(address(this));\r\n        dai.transfer(outputConduit, wad);\r\n        emit Quit(msg.sender, wad);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jug_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputConduit_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Free\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Hope\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Nope\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Quit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Wipe\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"can\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gemJoin\",\"outputs\":[{\"internalType\":\"contract GemJoinAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"contract JugAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outputConduit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"quit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RwaUrn","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b00000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f1000000000000000000000000476b81c12dc71edfad1f64b9e07caa60f4b156e20000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000b3efb912e1cbc0b26fc17388dd433cecd2206c3d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b2c2c6173ddf93c85c252d56ba8c4db9f22819967c22467c544c052d3faa9103"}]}