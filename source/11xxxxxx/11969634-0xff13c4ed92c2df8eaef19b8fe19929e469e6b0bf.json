{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title yV1\r\n * @dev yearn v1 vault\r\n */\r\ninterface yV1 {\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _shares) external;\r\n}\r\n\r\n/**\r\n * @title yS1\r\n * @dev yearn v1 strategy\r\n */\r\ninterface yS1 {\r\n    function setStrategist(address _strategist) external;\r\n    function setKeeper(address _keeper) external;\r\n}\r\n\r\n/**\r\n * @title yV2\r\n * @dev yearn v2 vault\r\n */\r\ninterface yV2 {\r\n    function deposit() external;\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw() external;\r\n    function withdraw(uint256 _shares) external;\r\n}\r\n\r\n/**\r\n * @title yS2\r\n * @dev yearn v2 strategy\r\n */\r\ninterface yS2 {\r\n    function setRewards(address _rewards) external;\r\n}\r\n\r\n/**\r\n * @title 1SplitAudit\r\n * @dev 1split on-chain aggregator\r\n */\r\ninterface One {\r\n    /**\r\n     * @notice Calculate expected returning amount of `destToken`\r\n     * @param fromToken (IERC20) Address of token or `address(0)` for Ether\r\n     * @param destToken (IERC20) Address of token or `address(0)` for Ether\r\n     * @param amount (uint256) Amount for `fromToken`\r\n     * @param parts (uint256) Number of pieces source volume could be splitted,\r\n     * works like granularity, higly affects gas usage. Should be called offchain,\r\n     * but could be called onchain if user swaps not his own funds, but this is still considered as not safe.\r\n     * @param flags (uint256) Flags for enabling and disabling some features, default 0\r\n     */\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See contants in IOneSplit.sol\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    /**\r\n     * @notice Calculate expected returning amount of `destToken`\r\n     * @param fromToken (IERC20) Address of token or `address(0)` for Ether\r\n     * @param destToken (IERC20) Address of token or `address(0)` for Ether\r\n     * @param amount (uint256) Amount for `fromToken`\r\n     * @param parts (uint256) Number of pieces source volume could be splitted,\r\n     * works like granularity, higly affects gas usage. Should be called offchain,\r\n     * but could be called onchain if user swaps not his own funds, but this is still considered as not safe.\r\n     * @param flags (uint256) Flags for enabling and disabling some features, default 0\r\n     * @param destTokenEthPriceTimesGasPrice (uint256) destToken price to ETH multiplied by gas price\r\n     */\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    /**\r\n     * @notice Swap `amount` of `fromToken` to `destToken`\r\n     * @param fromToken (IERC20) Address of token or `address(0)` for Ether\r\n     * @param destToken (IERC20) Address of token or `address(0)` for Ether\r\n     * @param amount (uint256) Amount for `fromToken`\r\n     * @param minReturn (uint256) Minimum expected return, else revert\r\n     * @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\r\n     * @param flags (uint256) Flags for enabling and disabling some features, default 0\r\n     */\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags // See contants in IOneSplit.sol\r\n    ) external payable returns(uint256);\r\n\r\n    /**\r\n     * @notice Swap `amount` of `fromToken` to `destToken`\r\n     * @param fromToken (IERC20) Address of token or `address(0)` for Ether\r\n     * @param destToken (IERC20) Address of token or `address(0)` for Ether\r\n     * @param amount (uint256) Amount for `fromToken`\r\n     * @param minReturn (uint256) Minimum expected return, else revert\r\n     * @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\r\n     * @param flags (uint256) Flags for enabling and disabling some features, default 0\r\n     * @param referral (address) Address of referral\r\n     * @param feePercent (uint256) Fees percents normalized to 1e18, limited to 0.03e18 (3%)\r\n     */\r\n    function swapWithReferral(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags, // See contants in IOneSplit.sol\r\n        address referral,\r\n        uint256 feePercent\r\n    ) external payable returns(uint256);\r\n}\r\n\r\ncontract Toolkit {\r\n\r\n    address public oneProto = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\r\n\r\n    constructor() public {}\r\n\r\n    function setStrategists(address[] calldata _targets, address _strategist) public {\r\n        for(uint256 i = 0; i < _targets.length; ++i) {\r\n            yS1(_targets[i]).setStrategist(_strategist);\r\n        }\r\n    }\r\n\r\n    function setKeepers(address[] calldata _targets, address _keeper) public {\r\n        for(uint256 i = 0; i < _targets.length; ++i) {\r\n            yS1(_targets[i]).setKeeper(_keeper);\r\n        }\r\n    }\r\n\r\n    function setRewards(address[] calldata _targets, address _rewards) public {\r\n        for(uint256 i = 0; i < _targets.length; ++i) {\r\n            yS2(_targets[i]).setRewards(_rewards);\r\n        }\r\n    }\r\n\r\n    function approves(\r\n        address[] calldata _tokens, \r\n        address[] calldata _spenders, \r\n        uint256[] calldata _amounts\r\n    ) public returns (bool) {\r\n        for(uint256 i = 0; i < _tokens.length; ++i) {\r\n            IERC20 token = IERC20(_tokens[i]);\r\n            token.approve(_spenders[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function approvesMAX(\r\n        address[] calldata _tokens, \r\n        address[] calldata _spenders\r\n    ) public returns (bool) {\r\n        for(uint256 i = 0; i < _tokens.length; ++i) {\r\n            IERC20 token = IERC20(_tokens[i]);\r\n            token.approve(_spenders[i], uint256(-1));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transfers(\r\n        address[] calldata _tokens, \r\n        address[] calldata _recipients, \r\n        uint256[] calldata _amounts\r\n    ) public returns (bool) {\r\n        for(uint256 i = 0; i < _tokens.length; ++i) {\r\n            IERC20 token = IERC20(_tokens[i]);\r\n            token.transfer(_recipients[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFroms(\r\n        address[] calldata _tokens, \r\n        address[] calldata _senders, \r\n        address[] calldata _recipients, \r\n        uint256[] calldata _amounts\r\n    ) external returns (bool) {\r\n        for(uint256 i = 0; i < _tokens.length; ++i) {\r\n            IERC20 token = IERC20(_tokens[i]);\r\n            token.transferFrom(_senders[i], _recipients[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function batchTransfers(\r\n        address _token, \r\n        address[] calldata _recipients, \r\n        uint256[] calldata _amounts\r\n    ) public returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        for(uint256 i = 0; i < _recipients.length; ++i) {\r\n            token.transfer(_recipients[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function deposit(address _to, uint256 _amount) external {\r\n        yV1(_to).deposit(_amount);\r\n    }\r\n\r\n    function deposits(address[] calldata _tos, uint256[] calldata _amounts) external {\r\n        for(uint256 i = 0; i < _tos.length; ++i) {\r\n            yV1(_tos[i]).deposit(_amounts[i]);\r\n        }\r\n    }\r\n\r\n    function withdraw(address _to, uint256 _share) external {\r\n        yV1(_to).withdraw(_share);\r\n    }\r\n\r\n    function withdraws(address[] calldata _tos, uint256[] calldata _shares) external {\r\n        for(uint256 i = 0; i < _tos.length; ++i) {\r\n            yV1(_tos[i]).withdraw(_shares[i]);\r\n        }\r\n    }\r\n\r\n    function swap(\r\n        address _from, \r\n        address _to, \r\n        uint256 _fromAmount, \r\n        uint256 _minReturn, \r\n        uint256[] calldata distribution, \r\n        uint256 _flags\r\n    ) public payable {\r\n        if (_from == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\r\n            require(_fromAmount == msg.value, \"swap::eth value not match\");\r\n        }\r\n        else {\r\n            IERC20(_from).approve(oneProto, uint256(-1));\r\n        }\r\n        One(oneProto).swap(IERC20(_from), IERC20(_to), _fromAmount, _minReturn, distribution, _flags);\r\n    }\r\n\r\n    function seizes(address[] calldata _tokens) public returns (bool) {\r\n        for(uint256 i = 0; i < _tokens.length; ++i) {\r\n            IERC20 token = IERC20(_tokens[i]);\r\n            token.transfer(msg.sender, token.balanceOf(address(this)));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function sweep() public returns (bool success) {\r\n        address sender = address(uint160(msg.sender));\r\n        uint256 _balance = address(this).balance;\r\n        (success, ) = sender.call{value: _balance}(\"\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"approves\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_spenders\",\"type\":\"address[]\"}],\"name\":\"approvesMAX\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"deposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneProto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"seizes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeepers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_flags\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_senders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFroms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"withdraws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Toolkit","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://46e69d862bff1e09322c00c28d34f3c36d6df462fd2400ad61a9db811006bef2"}]}