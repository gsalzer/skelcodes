{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n* Project $ERIS by nCyotee\r\n* Official site: https://eris.exchange/\r\n* \r\n* Have fun playing!\r\n* SPDX-License-Identifier: AGPL-3.0-or-later\r\n*\r\n**/\r\n\r\npragma solidity 0.7.4;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FinancialSafeMath {\r\n\r\n    using SafeMath for uint256;\r\n    function quadraticPricing( uint256 payment ) internal pure returns (uint256) {\r\n        return payment.mul(2).sqrrt();\r\n    }\r\n\r\n    function bondingPrice( uint256 multiplier, uint256 supply ) internal pure returns (uint256) {\r\n        return multiplier.mul( supply );\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () public {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), msg.sender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Eris is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // standard ERC20 variables. \r\n  string public constant name = \"Eris.Exchange\";\r\n  string public constant symbol = \"ERIS\";\r\n  uint256 public constant decimals = 18;\r\n  uint256 private constant _maximumSupply = 10 ** decimals;\r\n  uint256 public _totalSupply;\r\n  bool public start;\r\n  uint256 public Lim;\r\n  address public whiteaddress;\r\n  \r\n  // events\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  \r\n\r\n  mapping(address => uint256) public _balanceOf;\r\n  mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n  constructor(uint256 _initialSupply) public {\r\n\r\n    Lim = 10000000000000000000;\r\n    _owner = msg.sender;\r\n    _totalSupply = _maximumSupply * _initialSupply;\r\n    _balanceOf[msg.sender] = _maximumSupply * _initialSupply;\r\n    start = false;\r\n    whiteaddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  function totalSupply () public view returns (uint256) {\r\n    return _totalSupply; \r\n  }\r\n\r\n  function balanceOf (address who) public view returns (uint256) {\r\n    return _balanceOf[who];\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _value) internal {\r\n        if (start==false) {\r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n        } else {\r\n            if (_value < Lim) {\r\n                _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n                _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n                emit Transfer(_from, _to, _value);\r\n            }\r\n            else {\r\n                if(_from == _owner || _from == whiteaddress) {\r\n                    _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n                    _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n                    emit Transfer(_from, _to, _value);\r\n                }\r\n            }\r\n        }\r\n   }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    require(_balanceOf[msg.sender] >= _value);\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function burn (uint256 _burnAmount) public onlyOwner returns (bool success) {\r\n    _transfer(_owner, address(0), _burnAmount);\r\n    _totalSupply = _totalSupply.sub(_burnAmount);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    require(_spender != address(0));\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    require(_value <= _balanceOf[_from]);\r\n    require(_value <= allowance[_from][msg.sender]);\r\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function setGov (uint256 myLim) public {\r\n    require(msg.sender == _owner);\r\n    Lim = myLim;\r\n  }\r\n  \r\n  function GovernanceStart() public {\r\n        require(msg.sender == _owner);\r\n        if (start==false) \r\n            start = true;\r\n        else\r\n            start = false;\r\n   }\r\n   \r\n  function setGovernanceAddress(address newWallet) public {\r\n    require(msg.sender == _owner);\r\n    whiteaddress =  newWallet;\r\n  }\r\n  \r\n  \r\n  // function changeCharityAddress( address newCharityAddress_ ) public onlyOwner() {\r\n    //     charityAddress = payable(newCharityAddress_);\r\n    // }\r\n\r\n    // function changeDevAddress( address newDevAddress_ ) public onlyOwner() {\r\n    //     devAddress = payable(newDevAddress_);\r\n    // }\r\n\r\n    // function getSecondsLeftInLiquidityGenerationEvent() public view returns (uint256) {\r\n    //     return qplgmeStartTimestamp.add(qplgmeLength).sub(block.timestamp);\r\n    // }\r\n\r\n    // function startQPLGME() public onlyOwner() erisQPLGMEInactive() notHadQPLGME() {\r\n    //     qplgmeActive = true;\r\n    //     qplgmeStartTimestamp = block.timestamp;\r\n    //     emit QPLGMEStarted( qplgmeActive, qplgmeStartTimestamp );\r\n    // }\r\n\r\n    // function quadraticPricewithAdditionalPayment( address buyer, uint additionalAmountPaid ) public view returns ( uint ) {\r\n    //     return FinancialSafeMath.quadraticPricing( _weiPaidForErisByAddress[buyer].add( additionalAmountPaid ) ).mul(_erisToEthRatio).mul(1e9);\r\n    // }\r\n\r\n    // function erisForWeiPaid( uint256 payment ) public view returns ( uint256 ) {\r\n    //     return FinancialSafeMath.quadraticPricing( payment ).mul(_erisToEthRatio).mul(1e9);\r\n    // }\r\n\r\n    // function _erisForWeiPaid( uint256 payment ) private view returns ( uint256 ) {\r\n    //     return FinancialSafeMath.quadraticPricing( payment ).mul(_erisToEthRatio).mul(1e9);\r\n    // }\r\n\r\n    // function buyERIS() public payable erisQPLGMEActive {\r\n    //     uint256 amountPaidInWEI = msg.value;\r\n    //     _weth.deposit{value: amountPaidInWEI}();\r\n    //     totalWeiPaidForEris = totalWeiPaidForEris.add( amountPaidInWEI );\r\n    //     if( _weiPaidForErisByAddress[Context._msgSender()] > 0 ){\r\n    //         totalSupply = totalSupply.add( _erisForWeiPaid(_weiPaidForErisByAddress[Context._msgSender()].add(amountPaidInWEI)) ).sub( _erisForWeiPaid(_weiPaidForErisByAddress[Context._msgSender()] ) );\r\n    //     } else if( _weiPaidForErisByAddress[Context._msgSender()] == 0 ) {\r\n    //         totalSupply = totalSupply.add( _erisForWeiPaid(_weiPaidForErisByAddress[Context._msgSender()].add( amountPaidInWEI ) ) );\r\n    //     }\r\n    //     _weiPaidForErisByAddress[Context._msgSender()] = _weiPaidForErisByAddress[Context._msgSender()].add( amountPaidInWEI );\r\n    //     ethDonationToCharity = ethDonationToCharity.add( amountPaidInWEI.div(10) );\r\n    // }\r\n\r\n    // function buyERIS( uint256 amount) public payable erisQPLGMEActive() {\r\n    //     uint256 amountPaidInWEI = amount;\r\n    //     _testToken.transferFrom( Context._msgSender(), address(this), amount);\r\n\r\n    //     uin256 memory currentBuyersWeirPaidForEris_ = _weiPaidForErisByAddress[Context._msgSender()];\r\n    //     _weiPaidForErisByAddress[Context._msgSender()] = _weiPaidForErisByAddress[Context._msgSender()].add(amountPaidInWEI);\r\n\r\n    //     totalWeiPaidForEris = totalWeiPaidForEris.add(_weiPaidForErisByAddress[Context._msgSender()]).sub( currentBuyersWeirPaidForEris_ );\r\n\r\n    //     _totalSupply = _totalSupply.add( _erisForWeiPaid(_weiPaidForErisByAddress[Context._msgSender()].add(amountPaidInWEI)) ).sub( _erisForWeiPaid(_weiPaidForErisByAddress[Context._msgSender()] ) );\r\n\r\n    //     ethDonationToCharity = ethDonationToCharity.add( _weiPaidForErisByAddress[Context._msgSender()] / 10 ).sub( currentBuyersWeirPaidForEris_.div(10) );\r\n    // }\r\n\r\n    // function endQPLGME() public onlyOwner() {\r\n    //     if( !hadQPLGME ) {\r\n    //         _completeErisGME();\r\n    //     }\r\n    //     emit QPLGMEEnded( qplgmeActive, qplgmeEndTimestamp );\r\n    // }\r\n\r\n    // function collectErisFromQPLGME() public erisQPLGMEInactive() {\r\n    //     if( !hadQPLGME ) {\r\n    //         _completeErisGME();\r\n    //     }\r\n\r\n    //     if( _weiPaidForErisByAddress[Context._msgSender()] > 0 ){\r\n    //         uint256 weiPaidForErisByAddress_ = _weiPaidForErisByAddress[Context._msgSender()];\r\n    //         _weiPaidForErisByAddress[Context._msgSender()] = 0;\r\n    //         _balances[Context._msgSender()] =  _erisForWeiPaid( weiPaidForErisByAddress_ );\r\n    //     }\r\n    // }\r\n\r\n    // function _completeErisGME() private  {\r\n    //     qplgmeEndTimestamp = block.timestamp;\r\n    //     qplgmeActive = false;\r\n    //     hadQPLGME = true;\r\n        \r\n    //     // _balances[charityAddress] = _erisForWeiPaid( _weth.balanceOf( address( this ) ) );\r\n    //     _balances[charityAddress] = _erisForWeiPaid( _testToken.balanceOf( address( this ) ) );\r\n    //     _totalSupply = _totalSupply.add(_balances[charityAddress]);\r\n    //     // ethDonationToCharity = _weth.balanceOf( address(this) ).div(10);\r\n    //     ethDonationToCharity = _testToken.balanceOf( address(this) ).div(10);\r\n\r\n    //     // erisDueToReserves = _erisForWeiPaid( _weth.balanceOf( address( this ) ) );\r\n\r\n    //     _fundReservesAndSetTotalSupply();\r\n    //     _collectDonationToCharity();\r\n    //     _depositInUniswap();\r\n    // }\r\n\r\n    // function _fundReservesAndSetTotalSupply() private {\r\n    //     fundCharity();\r\n    //     fundDev();\r\n    // }\r\n\r\n    // function fundDev() private {\r\n    //     // _balances[devAddress] = _erisForWeiPaid( _weth.balanceOf( address( this ) ) );\r\n    //     _balances[devAddress] = _erisForWeiPaid( _testToken.balanceOf( address( this ) ) );\r\n    //     _totalSupply = _totalSupply.add(_balances[devAddress]);\r\n    // }\r\n\r\n    // function fundCharity() private {\r\n    // }\r\n\r\n    // function _collectDonationToCharity() private {\r\n    //     require( ethDonationToCharity > 0 );\r\n    //     ethDonationToCharity = 0;\r\n    //     // _weth.transfer( charityAddress, _weth.balanceOf( address(this) ).div(10) );\r\n    //     _testToken.transfer( charityAddress, _testToken.balanceOf( address(this) ).div(10) );\r\n    // }\r\n\r\n    // function _depositInUniswap() private {\r\n    //     // totalWeiPaidForEris = _weth.balanceOf( address(this) );\r\n    //     totalWeiPaidForEris = _testToken.balanceOf( address(this) );\r\n    //     _balances[address(_uniswapV2ErisWETHDEXPair)] = FinancialSafeMath.bondingPrice( _totalSupply.div(totalWeiPaidForEris), _totalSupply ).mul(_erisToEthRatio).div(1e2);\r\n    //     // _weth.transfer( address(_uniswapV2ErisWETHDEXPair), _weth.balanceOf( address(this) ) );\r\n    //     _testToken.transfer( address(_uniswapV2ErisWETHDEXPair), _testToken.balanceOf( address(this) ) );\r\n    //     _uniswapV2ErisWETHDEXPair.mint(address(this));\r\n    //     _totalLPTokensMinted = _uniswapV2ErisWETHDEXPair.balanceOf(address(this));\r\n    //     require(_totalLPTokensMinted != 0 , \"No LP deposited\");\r\n    //     _lpPerETHUnit = _totalLPTokensMinted.mul(1e18).div(totalWeiPaidForEris);\r\n    //     require(_lpPerETHUnit != 0 , \"Eris:292:_depositInUniswap(): No LP deposited\");\r\n    // }\r\n\r\n    // function erisDueToBuyerAtEndOfLGE( address buyer ) public view returns ( uint256 ){\r\n    //     return FinancialSafeMath.quadraticPricing( _weiPaidForErisByAddress[ buyer ] ).mul(_erisToEthRatio).mul(1e9);\r\n    //     //return _erisForWeiPaid( _weiPaidForErisByAddress[ buyer ] );\r\n    // }\r\n\r\n    // function withdrawPaidETHForfietAllERIS() public erisQPLGMEActive() {\r\n    //     uint256 weiPaid = _weiPaidForErisByAddress[Context._msgSender()];\r\n    //     _weiPaidForErisByAddress[Context._msgSender()] = 0 ;\r\n    //     _balances[Context._msgSender()] = 0;\r\n    //     totalWeiPaidForEris = totalWeiPaidForEris.sub( weiPaid );\r\n    //     ethDonationToCharity = ethDonationToCharity.sub( weiPaid.div(10) );\r\n    //     // _weth.withdraw( weiPaid );\r\n    //     // Context._msgSender().transfer( weiPaid );\r\n    //     _testToken.transfer( Context._msgSender(), weiPaid );\r\n    // }\r\n  \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GovernanceStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Lim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"myLim\",\"type\":\"uint256\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Eris","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000186a0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e99fbb0c832496702a0675b2610aefc2fcbb34e7b431025d0a0ccc0a47c1dfdf"}]}