{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts\\CircuitV1Mainnet.sol\n\npragma solidity ^0.6.12;\n\n\n\ninterface ICirERC20 {\n  function DEFAULT_ADMIN_ROLE (  ) external view returns ( bytes32 );\n  function MINTER_ROLE (  ) external view returns ( bytes32 );\n  function OPERATOR_ROLE (  ) external view returns ( bytes32 );\n  function allowance ( address owner, address spender ) external view returns ( uint256 );\n  function approve ( address spender, uint256 amount ) external returns ( bool );\n  function approveAndCall ( address spender, uint256 value ) external returns ( bool );\n  function balanceOf ( address account ) external view returns ( uint256 );\n  function burn ( uint256 amount ) external;\n  function burnFrom ( address account, uint256 amount ) external;\n  function cap (  ) external view returns ( uint256 );\n  function decimals (  ) external view returns ( uint8 );\n  function decreaseAllowance ( address spender, uint256 subtractedValue ) external returns ( bool );\n  function enableTransfer (  ) external;\n  function finishMinting (  ) external;\n  function getRoleAdmin ( bytes32 role ) external view returns ( bytes32 );\n  function getRoleMember ( bytes32 role, uint256 index ) external view returns ( address );\n  function getRoleMemberCount ( bytes32 role ) external view returns ( uint256 );\n  function grantRole ( bytes32 role, address account ) external;\n  function hasRole ( bytes32 role, address account ) external view returns ( bool );\n  function increaseAllowance ( address spender, uint256 addedValue ) external returns ( bool );\n  function mint ( address to, uint256 value ) external;\n  function mintingFinished (  ) external view returns ( bool );\n  function owner (  ) external view returns ( address );\n  function recoverERC20 ( address tokenAddress, uint256 tokenAmount ) external;\n  function renounceOwnership (  ) external;\n  function renounceRole ( bytes32 role, address account ) external;\n  function revokeRole ( bytes32 role, address account ) external;\n  function supportsInterface ( bytes4 interfaceId ) external view returns ( bool );\n  function totalSupply (  ) external view returns ( uint256 );\n  function transfer ( address to, uint256 value ) external returns ( bool );\n  function transferAndCall ( address to, uint256 value ) external returns ( bool );\n  function transferEnabled (  ) external view returns ( bool );\n  function transferFrom ( address from, address to, uint256 value ) external returns ( bool );\n  function transferFromAndCall ( address from, address to, uint256 value ) external returns ( bool );\n  function transferOwnership ( address newOwner ) external;\n}\n\n\ninterface ICompoundERC20 {\n  function mint(uint mintAmount) external returns (uint);\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\n  function borrow(uint borrowAmount) external returns (uint);\n  function repayBorrow(uint repayAmount) external returns (uint);\n  function borrowBalanceCurrent(address account) external returns (uint);\n  function exchangeRateCurrent() external returns (uint);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  function balanceOf(address account) external view returns (uint);\n  function balanceOfUnderlying(address account) external view returns (uint);\n  function decimals() external view returns (uint);\n  function underlying() external view returns (address);\n  function exchangeRateStored() external view returns (uint);\n  function supplyRatePerBlock() external view returns (uint);\n}\n\n// Compound finance comptroller\ninterface IComptroller {\n  function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n}\ncontract Circuit {\nusing SafeMath for uint256;\nuint256 contractIssuedBalance;\nuint256 initalPeg;\nuint256 lastCoinPrice;\nuint256 initalExchangeRate;\naddress admin;\nuint256 internal constant PRECISION = 10 ** 18;\nuint256 internal constant USDC_CONVERT_PRECISION = 10 ** 12;\nuint256 internal constant USDC_PRECISION = 10 ** 6;\nuint256 internal constant COMPOUND_PRECISION = 10 ** 8;\n\n//ERC20 underLyingAsset USDC\n IERC20 underLyingAsset = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n \n  //Compound asset: cUSDC\n ICompoundERC20 compoundToken = ICompoundERC20(0x39AA39c021dfbaE8faC545936693aC917d5E7563);\n \n //Cream asset: cUSDC\n ICompoundERC20 creamToken = ICompoundERC20(0x44fbeBd2F576670a6C33f6Fc0B00aA8c5753b322);\n\n //CircuitYeildBearingAsset CIUSDC\n ICirERC20 circuitYeildToken = ICirERC20(0x51F559202fa6bf9B82828ECA194090acF6EB223f);\n \n //COMP TOKEN\n IERC20 compToken = IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888);\n \n \n\n  constructor() public {\n    admin = msg.sender;//admin is deployer\n     initalPeg =1000000; //1 usdc\n    lastCoinPrice = 0;\n  }\n\n\n    function estimatePrice() public view returns (uint256) {\n       uint256 pricePerCoin=0;\n        uint256 totalValue=0;\n        if (contractIssuedBalance > initalPeg) {\n        totalValue = (storedUnderlyingAssetValueCompound() + storedUnderlyingAssetValueCream());\n        pricePerCoin = totalValue.mul(PRECISION).div(contractIssuedBalance);\n        }else{\n            pricePerCoin=initalPeg.mul(USDC_CONVERT_PRECISION);\n        }\n\n        return pricePerCoin;\n    }\n    \n\n    function viewContractIssuedBalance() external view returns(uint) {\n        return contractIssuedBalance;\n      }\n  \n    function getTotalUnderlyingAssetValue() public view returns (uint256) {\n      uint256 underlyingBalance;\n      underlyingBalance = (storedUnderlyingAssetValueCompound() + storedUnderlyingAssetValueCream());\n        return underlyingBalance;\n    }\n    \n    function storedUnderlyingAssetValueCompound() public view returns (uint256) {\n      uint256 exchangeRate;\n      uint256 compoundTokenBalance;\n      uint256 underlyingBalance;\n      compoundTokenBalance = compoundToken.balanceOf(address(this));\n\n      exchangeRate = compoundToken.exchangeRateStored();\n      underlyingBalance = compoundTokenBalance.mul(exchangeRate).div(USDC_PRECISION);\n        return underlyingBalance;\n    }\n    \n    function storedUnderlyingAssetValueCream() public view returns (uint256) {\n      uint256 exchangeRate;\n      uint256 creamTokenBalance;\n      uint256 underlyingBalance;\n      creamTokenBalance = creamToken.balanceOf(address(this));\n      exchangeRate = creamToken.exchangeRateStored();\n      underlyingBalance = creamTokenBalance.mul(exchangeRate).div(USDC_PRECISION);\n      \n      \n        return underlyingBalance;\n    }\n\n    function viewContractCompoundTokenBalance() external view returns (uint256) {\n        return compoundToken.balanceOf(address(this));\n    }\n\n    function viewContractCreamTokenBalance() external view returns (uint256) {\n        return creamToken.balanceOf(address(this));\n    }\n    \n   function viewLastCoinPrice() external view returns(uint) {\n    return lastCoinPrice;\n    }\n\n \n      function mintCircuitToken(uint amount) external {\n        address sender = msg.sender;\n        uint256 pricePerCoin=0;\n        uint256 totalValue=0;\n        uint256 amountMinted=0;\n        uint256 txFee;\n        uint256 mintAmount;\n        uint256 compoundAcrrueInterest;\n        if (contractIssuedBalance > initalPeg) {\n        compoundAcrrueInterest= compoundToken.exchangeRateCurrent();\n        \n        totalValue = (storedUnderlyingAssetValueCompound() + storedUnderlyingAssetValueCream());\n        //pricepercoin is in usdc so usdc precision is applied\n        pricePerCoin = totalValue.mul(PRECISION).div(contractIssuedBalance).div(USDC_CONVERT_PRECISION);\n        lastCoinPrice=pricePerCoin;\n        }else{\n            pricePerCoin=initalPeg;\n        }\n        require(underLyingAsset.transferFrom(sender, address(this), amount), 'Deposit failed');\n        mintAmount = amount.mul(USDC_PRECISION).div(pricePerCoin);\n        txFee = mintAmount.mul(10000).div(USDC_PRECISION);\n        //the amount minted is 1% less than mintAmount\n        amountMinted = (mintAmount - txFee).mul(USDC_CONVERT_PRECISION);\n        //convert back in to 18 decimals\n\n        contractIssuedBalance = contractIssuedBalance.add(amountMinted);\n        _approveDepositToken(amount);\n        require(compoundToken.mint((amount / 2)) == 0, \"Compound mint failed\");\n        require(creamToken.mint((amount / 2)) == 0, \"Cream mint failed\");\n        \n        circuitYeildToken.mint(sender, amountMinted);\n      }\n      function burnCircuitToken(uint amount) external {\n        uint256 pricePerCoinCompound=0;\n        uint256 pricePerCoinCream=0;\n        uint256 totalValueCompound =0;\n        uint256 totalValueCream =0;\n        uint256 amountHalf;\n        uint256 userUnderlyingValueCompound =0;\n        uint256 userUnderlyingValueCream =0;\n        uint256 userTotalUnderlyingValue =0;\n        address sender = msg.sender;\n        uint256 compoundAcrrueInterest;\n        compoundAcrrueInterest= compoundToken.exchangeRateCurrent();\n        totalValueCompound = storedUnderlyingAssetValueCompound();\n        pricePerCoinCompound = totalValueCompound.mul(PRECISION).div(contractIssuedBalance / 2);\n        \n        totalValueCream= storedUnderlyingAssetValueCream();\n        pricePerCoinCream = totalValueCream.mul(PRECISION).div(contractIssuedBalance / 2);\n        \n        \n        lastCoinPrice=((pricePerCoinCompound + pricePerCoinCream) / 2) ;\n        require(circuitYeildToken.transferFrom(sender, address(this), amount), 'Yeild token exchange failed.');\n        circuitYeildToken.burn(amount);\n        contractIssuedBalance = contractIssuedBalance.sub(amount);\n        \n        amountHalf = amount.div(2);\n        userUnderlyingValueCream= amountHalf.mul(pricePerCoinCream).div(PRECISION).div(USDC_CONVERT_PRECISION);\n        userUnderlyingValueCompound = amountHalf.mul(pricePerCoinCompound).div(PRECISION).div(USDC_CONVERT_PRECISION);\n        userTotalUnderlyingValue =(userUnderlyingValueCompound + userUnderlyingValueCream);\n        \n        require(compoundToken.redeemUnderlying(userUnderlyingValueCompound) == 0, \"Compound redeem failed\");\n        require(creamToken.redeemUnderlying(userUnderlyingValueCream) == 0, \"Cream redeem failed\");\n        require(underLyingAsset.transfer(sender,  userTotalUnderlyingValue), 'withdraw: failed');\n    }\n    \n    function claimDevFee() external{\n      uint256 compTokenBalance;\n      compTokenBalance = compToken.balanceOf(address(this));\n      require(compToken.transfer(admin,  compTokenBalance), 'withdraw: failed');\n    }\n    \n    function _approveDepositToken(uint256 _minimum) internal {\n        if(underLyingAsset.allowance(address(this), address(compoundToken)) < _minimum){\n            underLyingAsset.approve(address(compoundToken),uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff));\n        }\n        if(underLyingAsset.allowance(address(this), address(creamToken)) < _minimum){\n            underLyingAsset.approve(address(creamToken),uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff));\n        }\n    }\n\n\n  \n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnCircuitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnderlyingAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintCircuitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedUnderlyingAssetValueCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedUnderlyingAssetValueCream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewContractCompoundTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewContractCreamTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewContractIssuedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewLastCoinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Circuit","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}