{"status":"1","message":"OK","result":[{"SourceCode":"{\"EchoToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\r\\n\\r\\n\\r\\n\\r\\ncontract ERC20Basic {\\r\\n\\r\\n  function totalSupply() public view returns (uint256);  // totalSupply - 总发行量\\r\\n\\r\\n  function balanceOf(address who) public view returns (uint256);  // 余额\\r\\n\\r\\n  function transfer(address to, uint256 value) public returns (bool);  // 交易\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);  // 交易事件\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n\\r\\n\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n    if (a == 0) {\\r\\n\\r\\n      return 0;\\r\\n\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n\\r\\n    assert(c / a == b);\\r\\n\\r\\n    return c;\\r\\n\\r\\n  }\\r\\n\\r\\n  /**\\r\\n\\r\\n  * @dev Integer division of two numbers, truncating the quotient.\\r\\n\\r\\n  */\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n\\r\\n    uint256 c = a / b;\\r\\n\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n    return c;\\r\\n\\r\\n  }\\r\\n\\r\\n \\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n    assert(b \\u003c= a);\\r\\n\\r\\n    return a - b;\\r\\n\\r\\n  }\\r\\n\\r\\n \\r\\n\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n    uint256 c = a + b;\\r\\n\\r\\n    assert(c \\u003e= a);\\r\\n\\r\\n    return c;\\r\\n\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract ERC20 is ERC20Basic {\\r\\n\\r\\n  function allowance(address owner, address spender) public view returns (uint256);  // 获取被授权令牌余额,获取 _owner 地址授权给 _spender 地址可以转移的令牌的余额\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);  // A账户-》B账户的转账\\r\\n\\r\\n  function approve(address spender, uint256 value) public returns (bool);  // 授权，允许 _spender 地址从你的账户中转移 _value 个令牌到任何地方\\r\\n\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);  // 授权事件\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n\\r\\n* @title Basic token\\r\\n\\r\\n* @dev Basic version of StandardToken, with no allowances.\\r\\n\\r\\n*/\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping(address =\\u003e uint256) balances; \\r\\n\\r\\n  uint256 totalSupply_;  \\r\\n\\r\\n\\r\\n\\r\\n  function totalSupply() public view returns (uint256) {\\r\\n\\r\\n    return totalSupply_;\\r\\n\\r\\n  }\\r\\n\\r\\n\\r\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n\\r\\n    require(_to != address(0));  // 无效地址\\r\\n\\r\\n    require(_value \\u003c= balances[msg.sender]);  // 转账账户余额大于转账数目\\r\\n\\r\\n    // SafeMath.sub will throw if there is not enough balance.\\r\\n\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);  // 转账账户余额=账户余额-转账金额\\r\\n\\r\\n    balances[_to] = balances[_to].add(_value); // 接收账户的余额=原先账户余额+账金额\\r\\n\\r\\n    emit Transfer(msg.sender, _to, _value);  // 转账\\r\\n\\r\\n    return true;\\r\\n\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n\\r\\n    return balances[_owner];  // 查询合约调用者的余额\\r\\n\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\r\\n\\r\\n\\r\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n\\r\\n    require(_to != address(0)); // 到达B账户的地址不能为无效地址\\r\\n\\r\\n    require(_value \\u003c= balances[_from]);  // 转账账户余额大于转账金额\\r\\n\\r\\n    require(_value \\u003c= allowed[_from][msg.sender]);  // 允许_from地址转账给 _to地址\\r\\n\\r\\n    balances[_from] = balances[_from].sub(_value); \\r\\n\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n\\r\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);  // 允许转账的余额\\r\\n\\r\\n    emit Transfer(_from, _to, _value);\\r\\n\\r\\n    return true;\\r\\n\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n\\r\\n    return true;\\r\\n\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\r\\n\\r\\n    return allowed[_owner][_spender];\\r\\n\\r\\n  }\\r\\n\\r\\n  \\r\\n\\r\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\r\\n\\r\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n\\r\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n\\r\\n    return true;\\r\\n\\r\\n  }\\r\\n\\r\\n \\r\\n\\r\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\r\\n\\r\\n    uint oldValue = allowed[msg.sender][_spender];\\r\\n\\r\\n    if (_subtractedValue \\u003e oldValue) {\\r\\n\\r\\n      allowed[msg.sender][_spender] = 0;\\r\\n\\r\\n    } else {\\r\\n\\r\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n\\r\\n    }\\r\\n\\r\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n\\r\\n    return true;\\r\\n\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract EchoToken is StandardToken {\\r\\n\\r\\n    string public constant name = \\\"EchoToken\\\";\\r\\n\\r\\n    string public constant symbol = \\\"Echo\\\";\\r\\n\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    uint256 public constant INITIAL_SUPPLY = (10 ** 9) * (10 ** uint256(decimals));\\r\\n\\r\\n    /**\\r\\n\\r\\n    * @dev Constructor that gives msg.sender all of existing tokens.\\r\\n\\r\\n    */\\r\\n\\r\\n    constructor() public {\\r\\n\\r\\n        totalSupply_ = INITIAL_SUPPLY;\\r\\n\\r\\n        balances[msg.sender] = INITIAL_SUPPLY;\\r\\n\\r\\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\\r\\n\\r\\n    }\\r\\n\\r\\n}\"},\"EchoTokenLock1.01.sol\":{\"content\":\"pragma solidity ^0.4.18;\\r\\n\\r\\nimport \\\"./EchoToken.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract Ownable {\\r\\n\\r\\n  address public owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\r\\n\\r\\n  constructor() public {\\r\\n\\r\\n    owner = msg.sender;\\r\\n\\r\\n  }\\r\\n\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n\\r\\n    require(msg.sender == owner);\\r\\n\\r\\n    _;\\r\\n\\r\\n  }\\r\\n\\r\\n\\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n\\r\\n    require(newOwner != address(0));\\r\\n\\r\\n    emit OwnershipTransferred(owner, newOwner);\\r\\n\\r\\n    owner = newOwner;\\r\\n\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract EchoTokenLock is Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n \\r\\n    address public firstReserveWallet = 0xc6f2b171ce9c0d53dfEbE6428346895204345EE6;\\r\\n\\r\\n    address public secondReserveWallet = 0x456EF4ecfe42f3351D0006E9E219131022BC2700;\\r\\n    \\r\\n    address public fiveReserveWallet = 0x849b8168aD6F255A23c87b8B059231Cf74f6C976;\\r\\n    \\r\\n    address public sixReserveWallet = 0x9bEE59F321Ef10bCF7A1B5B87E22c32273544157;\\r\\n\\r\\n    address public sevenReserveWallet = 0xbB2e9ACBa084Ae0d804cBAA81776318199416E35;\\r\\n\\r\\n    address public eightReserveWallet = 0xec510cff20247E2b2A89ADfb7420d6361F07D32C;\\r\\n\\r\\n\\r\\n    uint256 public firstReserveAllocation = 3 * (10 ** 7) * (10 ** 18);\\r\\n\\r\\n    uint256 public secondReserveAllocation = 2 * (10 ** 7) * (10 ** 18);\\r\\n    \\r\\n    uint256 public fiveReserveAllocation = 5 * (10 ** 8) * (10 ** 18);\\r\\n\\r\\n    uint256 public sixReserveAllocation = 1 * (10 ** 7) * (10 ** 18);\\r\\n\\r\\n    uint256 public sevenReserveAllocation = 2 * (10 ** 7) * (10 ** 18);\\r\\n\\r\\n    uint256 public eightReserveAllocation = 2 * (10 ** 7) * (10 ** 18);\\r\\n\\r\\n    \\r\\n    uint256 public totalAllocation = 6 * (10 ** 8) * (10 ** 18);\\r\\n\\r\\n    \\r\\n\\r\\n    uint256 public firstReserveTimeLock = 4 * 365 days;\\r\\n    uint256 public firstLockStages = 4;\\r\\n\\r\\n \\r\\n    uint256 public secondReserveTimeLock = 10 * 365 days;\\r\\n    uint256 public secondLockStages = 10;\\r\\n    \\r\\n   \\r\\n    uint256 public fiveReserveTimeLock = 5 * 365 days;\\r\\n    uint256 public fiveLockStages = 1;\\r\\n    \\r\\n\\r\\n    uint256 public sixReserveTimeLock = 2 * 365 days;\\r\\n    uint256 public sixLockStages = 4;\\r\\n    \\r\\n\\r\\n    uint256 public sevenReserveTimeLock = 2 * 365 days;\\r\\n    uint256 public sevenLockStages = 4;\\r\\n\\r\\n  \\r\\n    uint256 public eightReserveTimeLock = 2 * 365 days;\\r\\n    uint256 public eightLockStages = 4;\\r\\n    \\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n    mapping(address =\\u003e uint256) public vestingStages; \\r\\n    \\r\\n\\r\\n\\r\\n    mapping(address =\\u003e uint256) public lockedLockStages;  \\r\\n    \\r\\n\\r\\n\\r\\n    mapping(address =\\u003e uint256) public allocations;  \\r\\n\\r\\n\\r\\n\\r\\n    mapping(address =\\u003e uint256) public timeLocks; \\r\\n    \\r\\n    mapping(address =\\u003e uint256) public nextTimeLocks;  \\r\\n\\r\\n    \\r\\n\\r\\n    mapping(address =\\u003e uint256) public claimed;  \\r\\n\\r\\n\\r\\n\\r\\n    uint256 public lockedAt = 0;\\r\\n\\r\\n    EchoToken public token;\\r\\n\\r\\n\\r\\n\\r\\n    event Allocated(address wallet, uint256 value);\\r\\n\\r\\n  \\r\\n\\r\\n    event Distributed(address wallet, uint256 value);\\r\\n\\r\\n \\r\\n\\r\\n    event Locked(uint256 lockTime);\\r\\n\\r\\n   \\r\\n\\r\\n    modifier onlyReserveWallets {  \\r\\n\\r\\n        require(allocations[msg.sender] \\u003e 0);\\r\\n\\r\\n        _;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    modifier onlyFirstReserve {\\r\\n    \\r\\n        require(msg.sender == firstReserveWallet || msg.sender == secondReserveWallet || msg.sender == fiveReserveWallet || msg.sender == sixReserveWallet || msg.sender == sevenReserveWallet || msg.sender == eightReserveWallet);\\r\\n\\r\\n        require(allocations[msg.sender] \\u003e 0);\\r\\n\\r\\n        _;\\r\\n        \\r\\n    }\\r\\n   \\r\\n\\r\\n  \\r\\n\\r\\n    modifier notLocked {  // 未锁定\\r\\n\\r\\n        require(lockedAt == 0);\\r\\n\\r\\n        _;\\r\\n\\r\\n    }\\r\\n\\r\\n    modifier locked { // 锁定\\r\\n\\r\\n        require(lockedAt \\u003e 0);\\r\\n\\r\\n        _;\\r\\n\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    modifier notAllocated {  \\r\\n\\r\\n        require(allocations[firstReserveWallet] == 0);\\r\\n\\r\\n        require(allocations[secondReserveWallet] == 0);\\r\\n        \\r\\n        require(allocations[fiveReserveWallet] == 0);\\r\\n\\r\\n        require(allocations[sixReserveWallet] == 0);\\r\\n        \\r\\n        require(allocations[sevenReserveWallet] == 0);\\r\\n        \\r\\n        require(allocations[eightReserveWallet] == 0);\\r\\n\\r\\n        _;\\r\\n\\r\\n    }\\r\\n\\r\\n    constructor(ERC20 _token) public {  \\r\\n\\r\\n        owner = msg.sender; \\r\\n\\r\\n        token = EchoToken(_token);\\r\\n\\r\\n    }\\r\\n\\r\\n    function allocate() public notLocked notAllocated onlyOwner { \\r\\n\\r\\n        //Makes sure Token Contract has the exact number of tokens\\r\\n\\r\\n        require(token.balanceOf(address(this)) == totalAllocation, \\\"TokenLock: Makes sure Token Contract has the exact number of tokens\\\"); \\r\\n\\r\\n        allocations[firstReserveWallet] = firstReserveAllocation;\\r\\n\\r\\n        allocations[secondReserveWallet] = secondReserveAllocation;\\r\\n\\r\\n        allocations[fiveReserveWallet] = fiveReserveAllocation;\\r\\n        \\r\\n        allocations[sixReserveWallet] = sixReserveAllocation;\\r\\n\\r\\n        allocations[sevenReserveWallet] = sevenReserveAllocation;\\r\\n\\r\\n        allocations[eightReserveWallet] = eightReserveAllocation;\\r\\n        \\r\\n        \\r\\n        emit Allocated(firstReserveWallet, firstReserveAllocation);\\r\\n\\r\\n        emit Allocated(secondReserveWallet, secondReserveAllocation);\\r\\n\\r\\n        emit Allocated(fiveReserveWallet, fiveReserveAllocation);\\r\\n        \\r\\n        emit Allocated(sixReserveWallet, sixReserveAllocation);\\r\\n\\r\\n        emit Allocated(sevenReserveWallet, sevenReserveAllocation);\\r\\n\\r\\n        emit Allocated(eightReserveWallet, eightReserveAllocation);\\r\\n\\r\\n        lock();\\r\\n\\r\\n    }\\r\\n\\r\\n    function getlockedLockStage(address reserveWallet) public view  returns(uint256){\\r\\n\\r\\n        uint256 vestingStage = vestingStages[reserveWallet];\\r\\n        uint256 reserveTimeLock = timeLocks[reserveWallet];\\r\\n        uint256 vestingMonths = reserveTimeLock.div(vestingStage);\\r\\n        \\r\\n        return vestingMonths;\\r\\n\\r\\n    }\\r\\n\\r\\n    function lock() internal notLocked onlyOwner {\\r\\n        \\r\\n        vestingStages[firstReserveWallet] = firstLockStages;\\r\\n\\r\\n        vestingStages[secondReserveWallet] = secondLockStages;\\r\\n\\r\\n        vestingStages[fiveReserveWallet] = fiveLockStages;\\r\\n        \\r\\n        vestingStages[sixReserveWallet] = sixLockStages;\\r\\n\\r\\n        vestingStages[sevenReserveWallet] = sevenLockStages;\\r\\n\\r\\n        vestingStages[eightReserveWallet] = eightLockStages;\\r\\n        \\r\\n        \\r\\n        timeLocks[firstReserveWallet] = firstReserveTimeLock;\\r\\n\\r\\n        timeLocks[secondReserveWallet] = secondReserveTimeLock;\\r\\n        \\r\\n        timeLocks[fiveReserveWallet] = fiveReserveTimeLock;\\r\\n\\r\\n        timeLocks[sixReserveWallet] = sixReserveTimeLock;\\r\\n\\r\\n        timeLocks[sevenReserveWallet] = sevenReserveTimeLock;\\r\\n\\r\\n        timeLocks[eightReserveWallet] = eightReserveTimeLock;\\r\\n        \\r\\n        \\r\\n        lockedAt = block.timestamp; // 区块当前时间\\r\\n                \\r\\n        nextTimeLocks[firstReserveWallet] = lockedAt.add(getlockedLockStage(firstReserveWallet));\\r\\n\\r\\n        nextTimeLocks[secondReserveWallet] = lockedAt.add(getlockedLockStage(secondReserveWallet));\\r\\n        \\r\\n        nextTimeLocks[fiveReserveWallet] = lockedAt.add(getlockedLockStage(fiveReserveWallet));\\r\\n\\r\\n        nextTimeLocks[sixReserveWallet] = lockedAt.add(getlockedLockStage(sixReserveWallet));\\r\\n\\r\\n        nextTimeLocks[sevenReserveWallet] = lockedAt.add(getlockedLockStage(sevenReserveWallet));\\r\\n\\r\\n        nextTimeLocks[eightReserveWallet] = lockedAt.add(getlockedLockStage(eightReserveWallet));\\r\\n        \\r\\n\\r\\n        emit Locked(lockedAt);\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n    function recoverFailedLock() external notLocked notAllocated onlyOwner {\\r\\n\\r\\n       \\r\\n\\r\\n        require(token.transfer(owner, token.balanceOf(address(this))));\\r\\n\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\\r\\n\\r\\n        return token.balanceOf(address(this));\\r\\n\\r\\n    }\\r\\n\\r\\n    // Number of tokens that are still locked\\r\\n\\r\\n    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\\r\\n\\r\\n        return allocations[msg.sender].sub(claimed[msg.sender]); \\r\\n\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function claimFirstReserve() onlyFirstReserve locked public {\\r\\n        \\r\\n        address reserveWallet = msg.sender;\\r\\n        uint256 nextTime = nextTimeLocks[reserveWallet];\\r\\n        \\r\\n        // Can\\u0027t claim before Lock ends\\r\\n        require(block.timestamp \\u003e= nextTime, \\\"TokenLock: release time is before current time\\\"); \\r\\n\\r\\n        uint256 payment = allocations[reserveWallet].div(vestingStages[reserveWallet]); // 总的解锁量\\r\\n        require(payment \\u003c= allocations[reserveWallet], \\\"TokenLock: no enough tokens to reserve\\\");\\r\\n        \\r\\n        uint256 totalLocked = claimed[reserveWallet].add(payment);\\r\\n        require(totalLocked \\u003c= allocations[reserveWallet], \\\"TokenLock: total release exceeded\\\"); \\r\\n\\r\\n        claimed[reserveWallet] = totalLocked;\\r\\n        nextTimeLocks[reserveWallet] = nextTime.add(getlockedLockStage(reserveWallet));\\r\\n        \\r\\n        require(token.transfer(reserveWallet, payment), \\\"TokenLock: transfer failed\\\"); \\r\\n        \\r\\n        emit Distributed(reserveWallet, payment);\\r\\n       \\r\\n    }\\r\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"eightLockStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"tokensCurrentlyInVault\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"reserveWallet\",\"type\":\"address\"}],\"name\":\"getlockedLockStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"tokensLocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sevenReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedLockStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eightReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eightReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sevenReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eightReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextTimeLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sixLockStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstLockStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondLockStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFirstReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveLockStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sixReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sevenLockStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sixReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sixReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sevenReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverFailedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EchoTokenLock","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001c64a0da3adb8fa2850a85a12d9a7808acdbcf50","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ad2b731d8e744bf5b5ee5d51da684a3b172367fe400eb07fd84f4331903eca10"}]}