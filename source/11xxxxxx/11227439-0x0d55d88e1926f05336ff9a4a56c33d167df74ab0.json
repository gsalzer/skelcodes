{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-03\r\n*/\r\npragma experimental ABIEncoderV2;\r\npragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract mr_contract {\r\n    using SafeMath for uint256;\r\n    address public MR;\r\n    address public manager;\r\n    address public FeeAddr;\r\n    mapping(address => uint256) private balances;\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n    struct rechangeRecords{\r\n        address rec_addr;\r\n        uint256 rec_value;\r\n        uint256 rec_time;\r\n    }\r\n    mapping(address => rechangeRecords[]) userRec;\r\n    \r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    \r\n    constructor(address _mr,address _fee) public {\r\n        MR = _mr;\r\n        FeeAddr = _fee;\r\n        manager = msg.sender;\r\n    }\r\n    \r\n    function deposit(uint256 value) external {\r\n        require(msg.sender != address(0) && value > 0);\r\n        IERC20(MR).transferFrom(msg.sender,address(this),value);\r\n        balances[msg.sender] = balances[msg.sender].add(value);\r\n        userRec[msg.sender].push(rechangeRecords(msg.sender,value,block.timestamp));\r\n        emit Deposit(msg.sender,value);\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(msg.sender != address(0) && balances[msg.sender] > 0);\r\n        uint256 amount = balances[msg.sender];\r\n        uint256 contractBalance = IERC20(MR).balanceOf(address(this));\r\n\t\tif (contractBalance < amount) {\r\n\t\t\tamount = contractBalance;\r\n\t\t}\r\n\r\n        uint256 fee = amount.div(10);\r\n\t\t_safeTransfer(MR,FeeAddr,fee);\r\n        _safeTransfer(MR,msg.sender,amount.sub(fee));\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        emit Withdraw(msg.sender,amount.sub(fee));\r\n    }\r\n    \r\n    function getUserRec(address addr) view external returns(rechangeRecords[] memory){\r\n        return userRec[addr];\r\n    }\r\n    \r\n    function getUserBalances(address addr) view public returns(uint256){\r\n        return balances[addr];\r\n    }\r\n    \r\n    function getPoolTotal()view public returns(uint256){\r\n        return IERC20(MR).balanceOf(address(this));\r\n    }\r\n    \r\n    function emergencyTreatment(address addr,uint256 value) public onlyOwner{\r\n        require(addr != address(0) && IERC20(MR).balanceOf(address(this)) >= value);\r\n        _safeTransfer(MR,addr,value);\r\n    }\r\n    \r\n    function transferOwner(address newOwner)public onlyOwner{\r\n        require(newOwner != address(0));\r\n        manager = newOwner;\r\n    }\r\n    \r\n    function _safeTransfer(address _token, address to, uint value) private {\r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(manager == msg.sender);\r\n        _;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"emergencyTreatment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserRec\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rec_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rec_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rec_time\",\"type\":\"uint256\"}],\"internalType\":\"struct mr_contract.rechangeRecords[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"mr_contract","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c4bfcf8821dbe9681f81e8213bbe1b7cabb78f13000000000000000000000000456dc7246131a3ecde2e60e7556a363edf47f294","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://122b0ad643f5cb89b4262741dbdcf687dd45fcf4e5b315c7dd0287247518b162"}]}