{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            set._indexes[lastvalue] = toDeleteIndex + 1;\r\n            set._values.pop();\r\n            delete set._indexes[value];\r\n            return true;\r\n            \r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n    bytes32 public constant MINTER_ROLE = \"MINTER\";\r\n\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[DEFAULT_ADMIN_ROLE].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n        require(!hasRole(_roles[DEFAULT_ADMIN_ROLE].adminRole, account), \"AccessControl: admin cannot grant himself\");\r\n        require(DEFAULT_ADMIN_ROLE != role, \"AccessControl: cannot grant adminRole\");\r\n        _grantRole(role, account);\r\n    }\r\n    \r\n    function transferAdminRole(address account) public virtual {\r\n        require(hasRole(_roles[DEFAULT_ADMIN_ROLE].adminRole, _msgSender()), \"AccessControl: sender must be an admin to transfer\");\r\n        require(_roles[DEFAULT_ADMIN_ROLE].members.at(0) != account, \"AccessControl: admin cannot transfer himself\");\r\n        _removeRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(DEFAULT_ADMIN_ROLE, account);\r\n        _removeRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, account);\r\n    }    \r\n\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[DEFAULT_ADMIN_ROLE].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n        require(!hasRole(_roles[DEFAULT_ADMIN_ROLE].adminRole, account), \"AccessControl: admin cannot revoke himself\");\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n        require(!hasRole(_roles[DEFAULT_ADMIN_ROLE].adminRole, account), \"AccessControl: admin cannot renounce himself\");\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    function _removeRole(bytes32 role, address account) internal virtual {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event General(address account);\r\n    \r\n}\r\n\r\ncontract Pausable is Context {\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n    bool private _paused;\r\n\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\ncontract WMART is Context, IERC20, AccessControl, Pausable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    struct stake {\r\n        uint256 col1;\r\n        uint256 prew1;\r\n        uint256 arew1;\r\n        uint256 rrew1;\r\n        uint256 date1;\r\n        uint256 col2;\r\n        uint256 prew2;\r\n        uint256 arew2;\r\n        uint256 rrew2;\r\n        uint256 date2;\r\n        uint256 col3;\r\n        uint256 prew3;\r\n        uint256 arew3;\r\n        uint256 rrew3;\r\n        uint256 date3; \r\n        uint256 bal;\r\n        address refAdd;\r\n        uint256 refPaid;\r\n        uint256 stakePaid;\r\n    } \r\n    \r\n    mapping(address =>  stake) private _stake;\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n    bool private _staking;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    uint256 private _maxSupply;\r\n    uint256 private _maxTxLimit;\r\n    uint256 private _t1Collateral;\r\n    uint256 private _t2Collateral;\r\n    uint256 private _t3Collateral;\r\n    uint256 private _t1LockTime;\r\n    uint256 private _t2LockTime;\r\n    uint256 private _t3LockTime; \r\n    uint256 private _rewardDuration;    \r\n    uint256 private _t1Reward;\r\n    uint256 private _t2Reward;\r\n    uint256 private _t3Reward;  \r\n    uint256 private _totalStake;   \r\n    uint256 private _refCom;\r\n    uint256 private _refPaid;\r\n    uint256 private _stakePaid;\r\n  \r\n    constructor () {\r\n        _name = \"Wrapped Martkist\";\r\n        _symbol = \"WMARTK\";\r\n        _decimals = 8;\r\n        _maxSupply = 3700000000000000;\r\n        _maxTxLimit = 200;\r\n        _t1Collateral = 100000000000;\r\n        _t2Collateral = 900000000000;\r\n        _t3Collateral = 1800000000000;\r\n        _t1LockTime = 2592000;\r\n        _t2LockTime = 7776000;\r\n        _t3LockTime = 31536000;\r\n        _rewardDuration = 86400;\r\n        _t1Reward = 33000000; \r\n        _t2Reward = 444000000;\r\n        _t3Reward = 2466000000;\r\n        _staking = true;\r\n        _refCom = 10;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, _msgSender());        \r\n    }    \r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function maxSupply() public view virtual returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n    \r\n    function isStaking() public view virtual returns (bool) {\r\n       return _staking; \r\n    } \r\n    \r\n    function maxTxLimit() public view virtual returns (uint256) {\r\n       return _maxTxLimit; \r\n    }    \r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function allBalance(address account) public view virtual returns (stake memory) { \r\n        stake memory stb;\r\n        stb = _stake[account];\r\n        stb.arew1 = (block.timestamp.sub(_stake[account].date1)).div(_rewardDuration).mul(_t1Reward).mul(_stake[account].col1.div(_t1Collateral));\r\n        stb.arew2 = (block.timestamp.sub(_stake[account].date2)).div(_rewardDuration).mul(_t2Reward).mul(_stake[account].col2.div(_t2Collateral));\r\n        stb.arew3 = (block.timestamp.sub(_stake[account].date3)).div(_rewardDuration).mul(_t3Reward).mul(_stake[account].col3.div(_t3Collateral));\r\n        stb.date1 = _stake[account].date1.add(_t1LockTime);\r\n        stb.date2 = _stake[account].date2.add(_t2LockTime);\r\n        stb.date3 = _stake[account].date3.add(_t3LockTime);\r\n        stb.bal = _balances[account];\r\n        return stb;\r\n    }   \r\n    \r\n    function stakeDetails() public view virtual returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        return (_t1Collateral, _t1Reward, _t1LockTime, _t2Collateral, _t2Reward, _t2LockTime, _t3Collateral, _t3Reward, _t3LockTime, _rewardDuration, _totalStake, _staking);\r\n    }\r\n    \r\n    function generalDetails() public view virtual returns (string memory, string memory, uint256, uint256, uint256, bool, uint256, uint256, uint256) {\r\n        return (_name, _symbol, _decimals, _totalSupply, _maxSupply, paused(), _refCom, _refPaid, _stakePaid);\r\n    }    \r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function stakingPause() public virtual {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"ERC20: Only ADMIN can pause staking\");\r\n        require(_staking, \"Staking: paused already\");\r\n        _staking = false;\r\n        emit General(_msgSender());\r\n    }\r\n\r\n    function stakingUnpause() public virtual {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"ERC20: Only ADMIN can unpause staking\");\r\n        require(!_staking, \"Staking: unpaused already\");\r\n        _staking = true;\r\n        emit General(_msgSender());\r\n    }     \r\n    \r\n    function totalStakeBalance() public view virtual returns (uint256) {\r\n       return _totalStake; \r\n    }  \r\n    \r\n    function generalConfig(uint256 no, uint256 value) public virtual {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Only ADMIN can change config\");\r\n        if(no == 1){\r\n            require(value >= _totalSupply, \"Value is less than _totalSupply\");    \r\n            _maxSupply = value;\r\n        } else if(no == 2){\r\n            _maxTxLimit = value;  \r\n        } else if(no == 3){\r\n            _refCom = value;\r\n        }\r\n        emit General(_msgSender());\r\n    }\r\n \r\n    function stakeConfig(uint256 no, uint256 value) public virtual {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Only ADMIN can change config\");\r\n        if(no == 1){    \r\n            _t1Collateral = value;\r\n        } else if(no == 2){\r\n            _t1Reward = value; \r\n        } else if(no == 3){\r\n            _t1LockTime = value;  \r\n        } else if(no == 4){    \r\n            _t2Collateral = value;\r\n        } else if(no == 5){\r\n            _t2Reward = value; \r\n        } else if(no == 6){\r\n            _t2LockTime = value;  \r\n        } else if(no == 7){    \r\n            _t3Collateral = value;\r\n        } else if(no == 8){\r\n            _t3Reward = value; \r\n        } else if(no == 9){\r\n            _t3LockTime = value;  \r\n        } else if(no == 10){\r\n            _rewardDuration = value; \r\n        }\r\n        emit General(_msgSender());\r\n    }    \r\n    \r\n    function increaseStake(uint256 tier, address refAdd) public virtual {\r\n        require(tier < 4 && tier > 0, \"Staking Tier Not Available\");\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(_staking, \"Staking: paused\");        \r\n        uint256 stakeAmount = 0;\r\n        uint256 stakeReward = 0;\r\n        uint256 collateral = 0;\r\n        uint256 reward = 0;\r\n        uint256 preward = 0;\r\n        uint256 diff = 0;\r\n        uint256 refRew = 0;\r\n        if(_stake[_msgSender()].refAdd == 0x0000000000000000000000000000000000000000 && refAdd != 0x0000000000000000000000000000000000000000 && refAdd != _msgSender()){\r\n            _stake[_msgSender()].refAdd = refAdd;\r\n        }         \r\n        if(tier == 1){\r\n            require(_stake[_msgSender()].col1 > 0, \"Not Staking\");\r\n            collateral = _t1Collateral;\r\n            reward = _t1Reward;\r\n            preward = _stake[_msgSender()].prew1;\r\n            stakeAmount = _stake[_msgSender()].col1;\r\n            diff = (block.timestamp.sub(_stake[_msgSender()].date1)).div(_rewardDuration);\r\n            refRew = _t1LockTime.div(_rewardDuration).mul(_t1Reward).mul(_refCom).div(100);\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(collateral, \"Stake amount exceeds balance\");\r\n            stakeReward = diff.mul(reward).mul(stakeAmount.div(collateral)).add(preward);\r\n            uint256 tempReward = diff.mul(reward).mul(stakeAmount.add(collateral).div(collateral)).add(preward);\r\n            require(_totalSupply.add(tempReward) <= _maxSupply, \"Exceeds Max Supply, you can't stake more\");\r\n            if(_stake[_msgSender()].refAdd != 0x0000000000000000000000000000000000000000){\r\n                _stake[_stake[_msgSender()].refAdd].rrew1 = _stake[_stake[_msgSender()].refAdd].rrew1.add(refRew);\r\n            } \r\n            _stake[_msgSender()].date1 = block.timestamp;\r\n            _stake[_msgSender()].col1 = _stake[_msgSender()].col1.add(collateral);\r\n            _stake[_msgSender()].prew1 = stakeReward;            \r\n        } else if(tier == 2){\r\n            require(_stake[_msgSender()].col2 > 0, \"Not Staking\");\r\n            collateral = _t2Collateral;\r\n            reward = _t2Reward; \r\n            preward = _stake[_msgSender()].prew1;\r\n            stakeAmount = _stake[_msgSender()].col2;\r\n            diff = (block.timestamp.sub(_stake[_msgSender()].date2)).div(_rewardDuration);\r\n            refRew = _t2LockTime.div(_rewardDuration).mul(_t2Reward).mul(_refCom).div(100);\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(collateral, \"Stake amount exceeds balance\");\r\n            stakeReward = diff.mul(reward).mul(stakeAmount.div(collateral)).add(preward);\r\n            uint256 tempReward = diff.mul(reward).mul(stakeAmount.add(collateral).div(collateral)).add(preward);\r\n            require(_totalSupply.add(tempReward) <= _maxSupply, \"Exceeds Max Supply, you can't stake more\");    \r\n            if(_stake[_msgSender()].refAdd != 0x0000000000000000000000000000000000000000){\r\n                _stake[_stake[_msgSender()].refAdd].rrew2 = _stake[_stake[_msgSender()].refAdd].rrew2.add(refRew);\r\n            } \r\n            _stake[_msgSender()].date2 = block.timestamp;\r\n            _stake[_msgSender()].col2 = _stake[_msgSender()].col2.add(collateral);\r\n            _stake[_msgSender()].prew2 = stakeReward;            \r\n        } else if(tier == 3){\r\n            require(_stake[_msgSender()].col3 > 0, \"Not Staking\");\r\n            collateral = _t3Collateral;\r\n            reward = _t3Reward; \r\n            preward = _stake[_msgSender()].prew1;\r\n            stakeAmount = _stake[_msgSender()].col3;\r\n            diff = (block.timestamp.sub(_stake[_msgSender()].date3)).div(_rewardDuration);\r\n            refRew = _t3LockTime.div(_rewardDuration).mul(_t3Reward).mul(_refCom).div(100);\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(collateral, \"Stake amount exceeds balance\");\r\n            stakeReward = diff.mul(reward).mul(stakeAmount.div(collateral)).add(preward);\r\n            uint256 tempReward = diff.mul(reward).mul(stakeAmount.add(collateral).div(collateral)).add(preward);\r\n            require(_totalSupply.add(tempReward) <= _maxSupply, \"Exceeds Max Supply, you can't stake more\"); \r\n            if(_stake[_msgSender()].refAdd != 0x0000000000000000000000000000000000000000){\r\n                _stake[_stake[_msgSender()].refAdd].rrew3 = _stake[_stake[_msgSender()].refAdd].rrew3.add(refRew);\r\n            }\r\n            _stake[_msgSender()].date3 = block.timestamp;\r\n            _stake[_msgSender()].col3 = _stake[_msgSender()].col3.add(collateral);\r\n            _stake[_msgSender()].prew3 = stakeReward;            \r\n        } \r\n        if(_stake[_msgSender()].refAdd != 0x0000000000000000000000000000000000000000){\r\n            _stake[_stake[_msgSender()].refAdd].refPaid = _stake[_stake[_msgSender()].refAdd].refPaid.add(refRew);\r\n            _refPaid = _refPaid.add(refRew);\r\n        }        \r\n        _totalStake = _totalStake.add(collateral);\r\n        emit Transfer(_msgSender(), address(0), collateral);\r\n    }\r\n    \r\n    function claimStake(uint256 tier) public virtual {\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(tier < 4 && tier > 0, \"Staking Tier Not Available\");\r\n        uint256 stakeAmount = 0;\r\n        uint256 stakeReward = 0;\r\n        uint256 collateral = 0;\r\n        uint256 reward = 0;\r\n        uint256 preward = 0;\r\n        uint256 diff = 0;\r\n        uint256 locktime = 0;\r\n        uint256 rreward = 0;\r\n        if(tier == 1){\r\n            require(_stake[_msgSender()].col1 > 0, \"Not Staking\");\r\n            require(block.timestamp >= (_stake[_msgSender()].date1 + locktime), \"Stake claim date not reached\");\r\n            collateral = _t1Collateral;\r\n            reward = _t1Reward;\r\n            preward = _stake[_msgSender()].prew1;\r\n            stakeAmount = _stake[_msgSender()].col1;\r\n            locktime = _t1LockTime;\r\n            diff = (block.timestamp.sub(_stake[_msgSender()].date1)).div(_rewardDuration);\r\n            rreward = _stake[_msgSender()].rrew1;\r\n            _stake[_msgSender()].rrew1 = 0;\r\n            _stake[_msgSender()].col1 = 0;\r\n            _stake[_msgSender()].date1 = 0;\r\n            _stake[_msgSender()].prew1 = 0;            \r\n        } else if(tier == 2){\r\n            require(_stake[_msgSender()].col2 > 0, \"Not Staking\");\r\n            require(block.timestamp >= (_stake[_msgSender()].date2 + locktime), \"Stake claim date not reached\");\r\n            collateral = _t2Collateral;\r\n            reward = _t2Reward; \r\n            preward = _stake[_msgSender()].prew1;\r\n            stakeAmount = _stake[_msgSender()].col2;\r\n            locktime = _t2LockTime;\r\n            diff = (block.timestamp.sub(_stake[_msgSender()].date2)).div(_rewardDuration);\r\n            rreward = _stake[_msgSender()].rrew2;\r\n            _stake[_msgSender()].rrew1 = 0;\r\n            _stake[_msgSender()].col2 = 0;\r\n            _stake[_msgSender()].date2 = 0;\r\n            _stake[_msgSender()].prew2 = 0;            \r\n        } else if(tier == 3){\r\n            require(_stake[_msgSender()].col3 > 0, \"Not Staking\");\r\n            require(block.timestamp >= (_stake[_msgSender()].date3 + locktime), \"Stake claim date not reached\");\r\n            collateral = _t3Collateral;\r\n            reward = _t3Reward; \r\n            preward = _stake[_msgSender()].prew1;\r\n            stakeAmount = _stake[_msgSender()].col3;\r\n            locktime = _t3LockTime;\r\n            diff = (block.timestamp.sub(_stake[_msgSender()].date3)).div(_rewardDuration);\r\n            rreward = _stake[_msgSender()].rrew3;\r\n            _stake[_msgSender()].rrew1 = 0;\r\n            _stake[_msgSender()].col3 = 0;\r\n            _stake[_msgSender()].date3 = 0;\r\n            _stake[_msgSender()].prew3 = 0;            \r\n        }\r\n        stakeReward = diff.mul(reward).mul(stakeAmount.div(collateral)).add(preward).add(rreward);\r\n        if((_totalSupply.add(stakeReward)) > _maxSupply){\r\n            stakeReward = _maxSupply.sub(_totalSupply);\r\n        }\r\n        if(stakeReward.sub(rreward) > 0){\r\n            _stake[_msgSender()].stakePaid = _stake[_msgSender()].stakePaid.add(stakeReward.sub(rreward));\r\n            _stakePaid = _stakePaid.add(stakeReward);\r\n        }\r\n        _totalSupply = _totalSupply.add(stakeReward);\r\n        _balances[_msgSender()] = _balances[_msgSender()].add(stakeAmount.add(stakeReward));\r\n        _totalStake = _totalStake.sub(stakeAmount);        \r\n        emit Transfer(address(0), _msgSender(), stakeAmount.add(stakeReward));\r\n    }    \r\n\r\n    function startStake(uint256 tier, address refAdd) public virtual {\r\n        require(tier < 4 && tier > 0, \"Staking Tier Not Available\");\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(_staking, \"Staking: paused\");        \r\n        uint256 collateral = 0;\r\n        uint256 tempReward = 0;\r\n        uint256 refRew = 0;\r\n        if(_stake[_msgSender()].refAdd == 0x0000000000000000000000000000000000000000 && refAdd != 0x0000000000000000000000000000000000000000 && refAdd != _msgSender()){\r\n            _stake[_msgSender()].refAdd = refAdd;\r\n        }        \r\n        if(tier == 1){\r\n            require(!(_stake[_msgSender()].col1 > 0), \"Already Staking, Use increaseStake\");\r\n            collateral = _t1Collateral;\r\n            tempReward = _t1LockTime.div(_rewardDuration).mul(_t1Reward);\r\n            refRew = tempReward.mul(_refCom).div(100);\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(collateral, \"Stake amount exceeds balance\");\r\n            require(_totalSupply.add(tempReward) <= _maxSupply, \"Exceeds Max Supply, you can't stake more\");  \r\n            if(_stake[_msgSender()].refAdd != 0x0000000000000000000000000000000000000000){\r\n                _stake[_stake[_msgSender()].refAdd].rrew1 = _stake[_stake[_msgSender()].refAdd].rrew1.add(refRew);\r\n                _refPaid = _refPaid.add(refRew);\r\n            }\r\n            _stake[_msgSender()].date1 = block.timestamp; \r\n            _stake[_msgSender()].col1 = collateral;            \r\n        } else if(tier == 2){\r\n            require(!(_stake[_msgSender()].col2 > 0), \"Already Staking, Use increaseStake\");\r\n            collateral = _t2Collateral;\r\n            tempReward = _t2LockTime.div(_rewardDuration).mul(_t2Reward);\r\n            refRew = tempReward.mul(_refCom).div(100);\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(collateral, \"Stake amount exceeds balance\");\r\n            require(_totalSupply.add(tempReward) <= _maxSupply, \"Exceeds Max Supply, you can't stake more\");\r\n            if(_stake[_msgSender()].refAdd != 0x0000000000000000000000000000000000000000){\r\n                _stake[_stake[_msgSender()].refAdd].rrew2 = _stake[_stake[_msgSender()].refAdd].rrew2.add(refRew);\r\n                _refPaid = _refPaid.add(refRew);\r\n            }  \r\n            _stake[_msgSender()].date2 = block.timestamp; \r\n            _stake[_msgSender()].col2 = collateral;            \r\n        } else if(tier == 3){\r\n            require(!(_stake[_msgSender()].col3 > 0), \"Already Staking, Use increaseStake\");\r\n            collateral = _t3Collateral;\r\n            tempReward = _t3LockTime.div(_rewardDuration).mul(_t3Reward);\r\n            refRew = tempReward.mul(_refCom).div(100);\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(collateral, \"Stake amount exceeds balance\");\r\n            require(_totalSupply.add(tempReward) <= _maxSupply, \"Exceeds Max Supply, you can't stake more\");  \r\n            if(_stake[_msgSender()].refAdd != 0x0000000000000000000000000000000000000000){\r\n                _stake[_stake[_msgSender()].refAdd].rrew3 = _stake[_stake[_msgSender()].refAdd].rrew3.add(refRew);\r\n                _refPaid = _refPaid.add(refRew);\r\n            } \r\n            _stake[_msgSender()].date3 = block.timestamp; \r\n            _stake[_msgSender()].col3 = collateral;            \r\n        }\r\n        if(_stake[_msgSender()].refAdd != 0x0000000000000000000000000000000000000000){\r\n            _stake[_stake[_msgSender()].refAdd].refPaid = _stake[_stake[_msgSender()].refAdd].refPaid.add(refRew);\r\n            _refPaid = _refPaid.add(refRew);\r\n        }        \r\n        _totalStake = _totalStake.add(collateral);\r\n        emit Transfer(_msgSender(), address(0), collateral);\r\n    }\r\n\r\n    \r\n\tfunction transferMulti(address[] memory to, uint256[] memory amount) public virtual {\r\n\t    uint256 sum_ = 0;\r\n\t    require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(_msgSender() != address(0), \"Transfer from the zero address\");\r\n\t\trequire(to.length == amount.length, \"Address array length not equal to value\");\r\n\t\trequire(to.length <= _maxTxLimit, \"Payout list greater than _maxTxLimit\");\r\n        for (uint8 g = 0; g < to.length; g++) {\r\n            require(to[g] != address(0), \"Transfer to the zero address\");\r\n            sum_ += amount[g];            \r\n        }\t\t\r\n        require(_balances[_msgSender()] >= sum_, \"Transfer amount exceeds balance\");\r\n\t\tfor (uint8 i = 0; i < to.length; i++) {\r\n\t\t    _transfer(_msgSender(), to[i], amount[i]);\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tfunction transferMultiFrom(address sender, address[] memory to, uint256[] memory amount) public virtual {\r\n\t    uint256 sum_ = 0;\r\n\t    require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(sender != address(0), \"Transfer from the zero address\");\r\n\t\trequire(to.length == amount.length, \"Address array length not equal to amount\");\r\n\t\trequire(to.length <= _maxTxLimit, \"Payout list greater than _maxTxLimit\");\r\n        for (uint8 g = 0; g < to.length; g++) {\r\n            require(to[g] != address(0), \"Transfer to the zero address\");\r\n            sum_ += amount[g];\r\n        }\t\t\r\n        require(_balances[sender] >= sum_, \"Transfer amount exceeds balance\");\r\n        require(_allowances[sender][_msgSender()] >= sum_, \"Transfer amount exceeds allowance\");\r\n\t\tfor (uint8 i = 0; i < to.length; i++) {\r\n            _transfer(sender, to[i], amount[i]);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount[i], \"ERC20: transfer amount exceeds allowance\"));\r\n\t\t}\r\n\t}\r\n\t\r\n    function mint(address to, uint256 amount) public virtual {\r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20: Only MINTER can Mint\");\r\n        require((_totalSupply.add(amount)) <= _maxSupply, \"Exceeds Max Supply\");\r\n        _mint(to, amount);\r\n    }\r\n    \r\n    function mintMulti(address[] memory to, uint256[] memory amount) public virtual {\r\n        uint256 sum_ = 0;\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");        \r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20: Only MINTER can Mint\");\r\n\t\trequire(to.length == amount.length, \"Address array length not equal to amount\");\r\n\t\trequire(to.length <= _maxTxLimit, \"Payout list greater than _maxTxLimit\");        \r\n        for (uint8 g = 0; g < to.length; g++) {\r\n            require(to[g] != address(0), \"ERC20: mint to the zero address\");\r\n            sum_ += amount[g];\r\n        }\r\n        require((_totalSupply.add(sum_)) <= _maxSupply, \"Exceeds Max Supply\");\r\n\t\tfor (uint8 i = 0; i < to.length; i++) {\r\n\t\t    _mint(to[i], amount[i]);\r\n\t\t}        \r\n    }    \r\n    \r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }  \r\n    \r\n    function burnMultiFrom(address[] memory account, uint256[] memory amount) public virtual {\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n\t\trequire(account.length == amount.length, \"Address array length not equal to amount\");\r\n\t\trequire(account.length <= _maxTxLimit, \"Payout list greater than _maxTxLimit\");  \r\n        for (uint8 g = 0; g < account.length; g++) {\r\n            require(account[g] != address(0), \"ERC20: burn from the zero address\");\r\n            require(_balances[account[g]] >= amount[g], \"ERC20: burn amount exceeds balance\");\r\n            require(_allowances[account[g]][_msgSender()] >= amount[g], \"Transfer amount exceeds allowance\");\r\n        }\r\n\t\tfor (uint8 i = 0; i < account.length; i++) {\r\n            uint256 decreasedAllowance = allowance(account[i], _msgSender()).sub(amount[i], \"ERC20: burn amount exceeds allowance\");\r\n            _approve(account[i], _msgSender(), decreasedAllowance);\r\n            _burn(account[i], amount[i]);\r\n\t\t}          \r\n    }     \r\n    \r\n    function pause() public virtual {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"ERC20: Only ADMIN can pause transfer\");\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public virtual {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"ERC20: Only ADMIN can unpause transfer\");\r\n        _unpause();\r\n    }    \r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(!paused(), \"ERC20: Token paused by ADMIN\");\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"General\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"col1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prew1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arew1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrew1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prew2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arew2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrew2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prew3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arew3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrew3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePaid\",\"type\":\"uint256\"}],\"internalType\":\"struct WMART.stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"burnMultiFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"claimStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"generalConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generalDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refAdd\",\"type\":\"address\"}],\"name\":\"increaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"mintMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"stakeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refAdd\",\"type\":\"address\"}],\"name\":\"startStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WMART","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://93fc7fe8b4f7c35db69a869c558ea55d57c84eb1ca0d493e2f2cea83eb8a7913"}]}