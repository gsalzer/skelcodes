{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n/// ChainLog.sol - An on-chain governance-managed contract registry\r\n\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\n/// @title An on-chain governance-managed contract registry\r\n/// @notice Publicly readable data; mutating functions must be called by an authorized user\r\ncontract ChainLog {\r\n\r\n    event Rely(address usr);\r\n    event Deny(address usr);\r\n    event UpdateVersion(string version);\r\n    event UpdateSha256sum(string sha256sum);\r\n    event UpdateIPFS(string ipfs);\r\n    event UpdateAddress(bytes32 key, address addr);\r\n    event RemoveAddress(bytes32 key);\r\n\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\r\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"ChainLog/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    struct Location {\r\n        uint256  pos;\r\n        address  addr;\r\n    }\r\n    mapping (bytes32 => Location) location;\r\n\r\n    bytes32[] public keys;\r\n\r\n    string public version;\r\n    string public sha256sum;\r\n    string public ipfs;\r\n\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        setVersion(\"0.0.0\");\r\n        setAddress(\"CHANGELOG\", address(this));\r\n    }\r\n\r\n    /// @notice Set the \"version\" of the current changelog\r\n    /// @param _version The version string (optional)\r\n    function setVersion(string memory _version) public auth {\r\n        version = _version;\r\n        emit UpdateVersion(_version);\r\n    }\r\n\r\n    /// @notice Set the \"sha256sum\" of some current external changelog\r\n    /// @dev designed to store sha256 of changelog.makerdao.com hosted log\r\n    /// @param _sha256sum The sha256 sum (optional)\r\n    function setSha256sum(string memory _sha256sum) public auth {\r\n        sha256sum = _sha256sum;\r\n        emit UpdateSha256sum(_sha256sum);\r\n    }\r\n\r\n    /// @notice Set the IPFS hash of a pinned changelog\r\n    /// @dev designed to store IPFS pin hash that can retreive changelog json\r\n    /// @param _ipfs The ipfs pin hash of an ipfs hosted log (optional)\r\n    function setIPFS(string memory _ipfs) public auth {\r\n        ipfs = _ipfs;\r\n        emit UpdateIPFS(_ipfs);\r\n    }\r\n\r\n    /// @notice Set the key-value pair for a changelog item\r\n    /// @param _key  the changelog key (ex. MCD_VAT)\r\n    /// @param _addr the address to the contract\r\n    function setAddress(bytes32 _key, address _addr) public auth {\r\n        if (count() > 0 && _key == keys[location[_key].pos]) {\r\n            location[_key].addr = _addr;   // Key exists in keys (update)\r\n        } else {\r\n            _addAddress(_key, _addr);      // Add key to keys array\r\n        }\r\n        emit UpdateAddress(_key, _addr);\r\n    }\r\n\r\n    /// @notice Removes the key from the keys list()\r\n    /// @dev removes the item from the array but moves the last element to it's place\r\n    //   WARNING: To save the expense of shifting an array on-chain,\r\n    //     this will replace the key to be deleted with the last key\r\n    //     in the array, and can therefore result in keys being out\r\n    //     of order. Use this only if you intend to reorder the list(),\r\n    //     otherwise consider using `setAddress(\"KEY\", address(0));`\r\n    /// @param _key the key to be removed\r\n    function removeAddress(bytes32 _key) public auth {\r\n        _removeAddress(_key);\r\n        emit RemoveAddress(_key);\r\n    }\r\n\r\n    /// @notice Returns the number of keys being tracked in the keys array\r\n    /// @return the number of keys as uint256\r\n    function count() public view returns (uint256) {\r\n        return keys.length;\r\n    }\r\n\r\n    /// @notice Returns the key and address of an item in the changelog array (for enumeration)\r\n    /// @dev _index is 0-indexed to the underlying array\r\n    /// @return a tuple containing the key and address associated with that key\r\n    function get(uint256 _index) public view returns (bytes32, address) {\r\n        return (keys[_index], location[keys[_index]].addr);\r\n    }\r\n\r\n    /// @notice Returns the list of keys being tracked by the changelog\r\n    /// @dev May fail if keys is too large, if so, call count() and iterate with get()\r\n    function list() public view returns (bytes32[] memory) {\r\n        return keys;\r\n    }\r\n\r\n    /// @notice Returns the address for a particular key\r\n    /// @param _key a bytes32 key (ex. MCD_VAT)\r\n    /// @return addr the contract address associated with the key\r\n    function getAddress(bytes32 _key) public view returns (address addr) {\r\n        addr = location[_key].addr;\r\n        require(addr != address(0), \"dss-chain-log/invalid-key\");\r\n    }\r\n\r\n    function _addAddress(bytes32 _key, address _addr) internal {\r\n        keys.push(_key);\r\n        location[keys[keys.length - 1]] = Location(\r\n            keys.length - 1,\r\n            _addr\r\n        );\r\n    }\r\n\r\n    function _removeAddress(bytes32 _key) internal {\r\n        uint256 index = location[_key].pos;       // Get pos in array\r\n        require(keys[index] == _key, \"dss-chain-log/invalid-key\");\r\n        bytes32 move  = keys[keys.length - 1];    // Get last key\r\n        keys[index] = move;                       // Replace\r\n        location[move].pos = index;               // Update array pos\r\n        keys.pop();                               // Trim last key\r\n        delete location[_key];                    // Delete struct data\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"RemoveAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UpdateAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"}],\"name\":\"UpdateIPFS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sha256sum\",\"type\":\"string\"}],\"name\":\"UpdateSha256sum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"UpdateVersion\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipfs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ipfs\",\"type\":\"string\"}],\"name\":\"setIPFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sha256sum\",\"type\":\"string\"}],\"name\":\"setSha256sum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sha256sum\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainLog","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8ae26e1195f9fa0a2708921ccaa27afca39c34e828da10e5b0670b110374f265"}]}