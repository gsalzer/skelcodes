{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract IResolver {\r\n    /**\r\n     * @dev Reset all domain records and set new ones\r\n     * @param keys New record keys\r\n     * @param values New record values\r\n     * @param tokenId ERC-721 token id of the domain\r\n     */\r\n    function reconfigure(string[] memory keys, string[] memory values, uint256 tokenId) public;\r\n\r\n    /**\r\n    * @dev Set all domain records for newly minted domain\r\n    * @param keys New record keys\r\n    * @param values New record values\r\n    * @param tokenId ERC-721 token id of the domain\r\n    */\r\n    function preconfigure(string[] memory keys, string[] memory values, uint256 tokenId) public;\r\n\r\n    /**\r\n     * @dev Set or update domain records\r\n     * @param keys New record keys\r\n     * @param values New record values\r\n     * @param tokenId ERC-721 token id of the domain\r\n     */\r\n    function setMany(string[] memory keys, string[] memory values, uint256 tokenId) public;\r\n\r\n    /**\r\n     * @dev Function to set record.\r\n     * @param key The key set the value of.\r\n     * @param value The value to set key to.\r\n     * @param tokenId ERC-721 token id to set.\r\n     */\r\n    function set(string calldata key, string calldata value, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Function to reset all existing records on a domain.\r\n     * @param tokenId ERC-721 token id to set.\r\n     */\r\n    function reset(uint256 tokenId) external;\r\n}\r\n\r\ninterface IRegistryReader {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID. Registry related function.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Gets the resolver of the specified token ID. Registry related function.\r\n     * @param tokenId uint256 ID of the token to query the resolver of\r\n     * @return address currently marked as the resolver of the given token ID\r\n     */\r\n    function resolverOf(uint256 tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @dev Provides child token (subdomain) of provided tokenId. Registry related function.\r\n     * @param tokenId uint256 ID of the token\r\n     * @param label label of subdomain (for `aaa.bbb.crypto` it will be `aaa`)\r\n     */\r\n    function childIdOf(uint256 tokenId, string calldata label) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Controller related function.\r\n     * @return bool whether the account is a controller\r\n     */\r\n    function isController(address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account. ERC721 related function.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`. ERC721 related function.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    \r\n    /**\r\n     * @dev ERC721 related function.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address);\r\n    \r\n    /**\r\n     * @dev ERC721 related function.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Registry related function.\r\n     * @return root hash.\r\n     */\r\n    function root() external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\ninterface IMintingController {\r\n\r\n    /**\r\n     * @dev Minter function that mints a Second Level Domain (SLD).\r\n     * @param to address to mint the new SLD to.\r\n     * @param label SLD label to mint.\r\n     */\r\n    function mintSLD(address to, string calldata label) external;\r\n\r\n    /**\r\n     * @dev Minter function that safely mints a Second Level Domain (SLD).\r\n     * Implements a ERC721Reciever check unlike mintSLD.\r\n     * @param to address to mint the new SLD to.\r\n     * @param label SLD label to mint.\r\n     */\r\n    function safeMintSLD(address to, string calldata label) external;\r\n\r\n    /**\r\n     * @dev Minter function that safely mints a Second Level Domain (SLD).\r\n     * Implements a ERC721Reciever check unlike mintSLD.\r\n     * @param to address to mint the new SLD to.\r\n     * @param label SLD label to mint.\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeMintSLD(address to, string calldata label, bytes calldata _data) external;\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others (`ERC165Checker`).\r\n *\r\n * For an implementation, see `ERC165`.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * \r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either `approve` or `setApproveForAll`.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either `approve` or `setApproveForAll`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract IRegistry is IERC721Metadata {\r\n\r\n    event NewURI(uint256 indexed tokenId, string uri);\r\n\r\n    event NewURIPrefix(string prefix);\r\n\r\n    event Resolve(uint256 indexed tokenId, address indexed to);\r\n\r\n    event Sync(address indexed resolver, uint256 indexed updateId, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Controlled function to set the token URI Prefix for all tokens.\r\n     * @param prefix string URI to assign\r\n     */\r\n    function controlledSetTokenURIPrefix(string calldata prefix) external;\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Mints a new a child token.\r\n     * Calculates child token ID using a namehash function.\r\n     * Requires the msg.sender to be the owner, approved, or operator of tokenId.\r\n     * Requires the token not exist.\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the parent token\r\n     * @param label subdomain label of the child token ID\r\n     */\r\n    function mintChild(address to, uint256 tokenId, string calldata label) external;\r\n\r\n    /**\r\n     * @dev Controlled function to mint a given token ID.\r\n     * Requires the msg.sender to be controller.\r\n     * Requires the token ID to not exist.\r\n     * @param to address the given token ID will be minted to\r\n     * @param label string that is a subdomain\r\n     * @param tokenId uint256 ID of the parent token\r\n     */\r\n    function controlledMintChild(address to, uint256 tokenId, string calldata label) external;\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a child token ID to another address.\r\n     * Calculates child token ID using a namehash function.\r\n     * Requires the msg.sender to be the owner, approved, or operator of tokenId.\r\n     * Requires the token already exist.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param label subdomain label of the child token ID\r\n     */\r\n    function transferFromChild(address from, address to, uint256 tokenId, string calldata label) external;\r\n\r\n    /**\r\n     * @dev Controlled function to transfers the ownership of a token ID to\r\n     * another address.\r\n     * Requires the msg.sender to be controller.\r\n     * Requires the token already exist.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function controlledTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a child token ID to another address.\r\n     * Calculates child token ID using a namehash function.\r\n     * Implements a ERC721Reciever check unlike transferFromChild.\r\n     * Requires the msg.sender to be the owner, approved, or operator of tokenId.\r\n     * Requires the token already exist.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 parent ID of the token to be transferred\r\n     * @param label subdomain label of the child token ID\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFromChild(address from, address to, uint256 tokenId, string calldata label, bytes calldata _data) external;\r\n\r\n    /// Shorthand for calling the above ^^^ safeTransferFromChild function with an empty _data parameter. Similar to ERC721.safeTransferFrom.\r\n    function safeTransferFromChild(address from, address to, uint256 tokenId, string calldata label) external;\r\n\r\n    /**\r\n     * @dev Controlled frunction to safely transfers the ownership of a token ID\r\n     * to another address.\r\n     * Implements a ERC721Reciever check unlike controlledSafeTransferFrom.\r\n     * Requires the msg.sender to be controller.\r\n     * Requires the token already exist.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 parent ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function controlledSafeTransferFrom(address from, address to, uint256 tokenId, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @dev Burns a child token ID.\r\n     * Calculates child token ID using a namehash function.\r\n     * Requires the msg.sender to be the owner, approved, or operator of tokenId.\r\n     * Requires the token already exist.\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param label subdomain label of the child token ID\r\n     */\r\n    function burnChild(uint256 tokenId, string calldata label) external;\r\n\r\n    /**\r\n     * @dev Controlled function to burn a given token ID.\r\n     * Requires the msg.sender to be controller.\r\n     * Requires the token already exist.\r\n     * @param tokenId uint256 ID of the token to be burned\r\n     */\r\n    function controlledBurn(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Sets the resolver of a given token ID to another address.\r\n     * Requires the msg.sender to be the owner, approved, or operator.\r\n     * @param to address the given token ID will resolve to\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function resolveTo(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gets the resolver of the specified token ID.\r\n     * @param tokenId uint256 ID of the token to query the resolver of\r\n     * @return address currently marked as the resolver of the given token ID\r\n     */\r\n    function resolverOf(uint256 tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @dev Controlled function to sets the resolver of a given token ID.\r\n     * Requires the msg.sender to be controller.\r\n     * @param to address the given token ID will resolve to\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function controlledResolveTo(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Provides child token (subdomain) of provided tokenId.\r\n     * @param tokenId uint256 ID of the token\r\n     * @param label label of subdomain (for `aaa.bbb.crypto` it will be `aaa`)\r\n     */\r\n    function childIdOf(uint256 tokenId, string calldata label) external pure returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfer domain ownership without resetting domain records.\r\n     * @param to address of new domain owner\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function setOwner(address to, uint256 tokenId) external;\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safeTransfer`. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the `IERC165` interface.\r\n *\r\n * Contracts may inherit from this and call `_registerInterface` to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC165.supportsInterface`.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See `IERC165.supportsInterface`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => Counters.Counter) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _ownedTokensCount[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID.\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender, \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner.\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\r\n     * Requires the msg.sender to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists.\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to].increment();\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * Deprecated, use _burn(uint256) instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[owner].decrement();\r\n        _tokenOwner[tokenId] = address(0);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from].decrement();\r\n        _ownedTokensCount[to].increment();\r\n\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC721Received` on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * This function is deprecated.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID.\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 Burnable Token\r\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC721Burnable is ERC721 {\r\n    /**\r\n     * @dev Burns a specific ERC721 token.\r\n     * @param tokenId uint256 id of the ERC721 token to be burned.\r\n     */\r\n    function burn(uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721Burnable: caller is not owner nor approved\");\r\n        _burn(tokenId);\r\n    }\r\n}\r\n\r\n// solium-disable error-reason\r\n/**\r\n * @title ControllerRole\r\n * @dev An Controller role defined using the Open Zeppelin Role system.\r\n */\r\ncontract ControllerRole {\r\n\r\n    using Roles for Roles.Role;\r\n\r\n    // NOTE: Commented out standard Role events to save gas.\r\n    // event ControllerAdded(address indexed account);\r\n    // event ControllerRemoved(address indexed account);\r\n\r\n    Roles.Role private _controllers;\r\n\r\n    constructor () public {\r\n        _addController(msg.sender);\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(isController(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isController(address account) public view returns (bool) {\r\n        return _controllers.has(account);\r\n    }\r\n\r\n    function addController(address account) public onlyController {\r\n        _addController(account);\r\n    }\r\n\r\n    function renounceController() public {\r\n        _removeController(msg.sender);\r\n    }\r\n\r\n    function _addController(address account) internal {\r\n        _controllers.add(account);\r\n        // emit ControllerAdded(account);\r\n    }\r\n\r\n    function _removeController(address account) internal {\r\n        _controllers.remove(account);\r\n        // emit ControllerRemoved(account);\r\n    }\r\n\r\n}\r\n\r\n// solium-disable no-empty-blocks,error-reason\r\n/**\r\n * @title Registry\r\n * @dev An ERC721 Token see https://eips.ethereum.org/EIPS/eip-721. With\r\n * additional functions so other trusted contracts to interact with the tokens.\r\n */\r\ncontract Registry is IRegistry, ControllerRole, ERC721Burnable {\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) internal _tokenURIs;\r\n\r\n    string internal _prefix;\r\n\r\n    // Mapping from token ID to resolver address\r\n    mapping (uint256 => address) internal _tokenResolvers;\r\n\r\n    // uint256(keccak256(abi.encodePacked(uint256(0x0), keccak256(abi.encodePacked(\"crypto\")))))\r\n    uint256 private constant _CRYPTO_HASH =\r\n        0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f;\r\n\r\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        _mint(address(0xdead), _CRYPTO_HASH);\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(0x5b5e139f); // ERC721 Metadata Interface\r\n        _tokenURIs[root()] = \"crypto\";\r\n        emit NewURI(root(), \"crypto\");\r\n    }\r\n\r\n    /// ERC721 Metadata extension\r\n\r\n    function name() external view returns (string memory) {\r\n        return \".crypto\";\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return \"UD\";\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId));\r\n        return string(abi.encodePacked(_prefix, _tokenURIs[tokenId]));\r\n    }\r\n\r\n    function controlledSetTokenURIPrefix(string calldata prefix) external onlyController {\r\n        _prefix = prefix;\r\n        emit NewURIPrefix(prefix);\r\n    }\r\n\r\n    /// Ownership\r\n\r\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool) {\r\n        return _isApprovedOrOwner(spender, tokenId);\r\n    }\r\n\r\n    /// Registry Constants\r\n\r\n    function root() public pure returns (uint256) {\r\n        return _CRYPTO_HASH;\r\n    }\r\n\r\n    function childIdOf(uint256 tokenId, string calldata label) external pure returns (uint256) {\r\n        return _childId(tokenId, label);\r\n    }\r\n\r\n    /// Minting\r\n\r\n    function mintChild(address to, uint256 tokenId, string calldata label) external onlyApprovedOrOwner(tokenId) {\r\n        _mintChild(to, tokenId, label);\r\n    }\r\n\r\n    function controlledMintChild(address to, uint256 tokenId, string calldata label) external onlyController {\r\n        _mintChild(to, tokenId, label);\r\n    }\r\n\r\n    function safeMintChild(address to, uint256 tokenId, string calldata label) external onlyApprovedOrOwner(tokenId) {\r\n        _safeMintChild(to, tokenId, label, \"\");\r\n    }\r\n\r\n    function safeMintChild(address to, uint256 tokenId, string calldata label, bytes calldata _data)\r\n        external\r\n        onlyApprovedOrOwner(tokenId)\r\n    {\r\n        _safeMintChild(to, tokenId, label, _data);\r\n    }\r\n\r\n    function controlledSafeMintChild(address to, uint256 tokenId, string calldata label, bytes calldata _data)\r\n        external\r\n        onlyController\r\n    {\r\n        _safeMintChild(to, tokenId, label, _data);\r\n    }\r\n\r\n    /// Transfering\r\n\r\n    function setOwner(address to, uint256 tokenId) external onlyApprovedOrOwner(tokenId)  {\r\n        super._transferFrom(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function transferFromChild(address from, address to, uint256 tokenId, string calldata label)\r\n        external\r\n        onlyApprovedOrOwner(tokenId)\r\n    {\r\n        _transferFrom(from, to, _childId(tokenId, label));\r\n    }\r\n\r\n    function controlledTransferFrom(address from, address to, uint256 tokenId) external onlyController {\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFromChild(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory label,\r\n        bytes memory _data\r\n    ) public onlyApprovedOrOwner(tokenId) {\r\n        uint256 childId = _childId(tokenId, label);\r\n        _transferFrom(from, to, childId);\r\n        require(_checkOnERC721Received(from, to, childId, _data));\r\n    }\r\n\r\n    function safeTransferFromChild(address from, address to, uint256 tokenId, string calldata label) external {\r\n        safeTransferFromChild(from, to, tokenId, label, \"\");\r\n    }\r\n\r\n    function controlledSafeTransferFrom(address from, address to, uint256 tokenId, bytes calldata _data)\r\n        external\r\n        onlyController\r\n    {\r\n        _transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n\r\n    /// Burning\r\n\r\n    function burnChild(uint256 tokenId, string calldata label) external onlyApprovedOrOwner(tokenId) {\r\n        _burn(_childId(tokenId, label));\r\n    }\r\n\r\n    function controlledBurn(uint256 tokenId) external onlyController {\r\n        _burn(tokenId);\r\n    }\r\n\r\n    /// Resolution\r\n\r\n    function resolverOf(uint256 tokenId) external view returns (address) {\r\n        address resolver = _tokenResolvers[tokenId];\r\n        require(resolver != address(0));\r\n        return resolver;\r\n    }\r\n\r\n    function resolveTo(address to, uint256 tokenId) external onlyApprovedOrOwner(tokenId) {\r\n        _resolveTo(to, tokenId);\r\n    }\r\n\r\n    function controlledResolveTo(address to, uint256 tokenId) external onlyController {\r\n        _resolveTo(to, tokenId);\r\n    }\r\n\r\n    function sync(uint256 tokenId, uint256 updateId) external {\r\n        require(_tokenResolvers[tokenId] == msg.sender);\r\n        emit Sync(msg.sender, updateId, tokenId);\r\n    }\r\n\r\n    /// Internal\r\n\r\n    function _childId(uint256 tokenId, string memory label) internal pure returns (uint256) {\r\n        require(bytes(label).length != 0);\r\n        return uint256(keccak256(abi.encodePacked(tokenId, keccak256(abi.encodePacked(label)))));\r\n    }\r\n\r\n    function _mintChild(address to, uint256 tokenId, string memory label) internal {\r\n        uint256 childId = _childId(tokenId, label);\r\n        _mint(to, childId);\r\n\r\n        require(bytes(label).length != 0);\r\n        require(_exists(childId));\r\n\r\n        bytes memory domain = abi.encodePacked(label, \".\", _tokenURIs[tokenId]);\r\n\r\n        _tokenURIs[childId] = string(domain);\r\n        emit NewURI(childId, string(domain));\r\n    }\r\n\r\n    function _safeMintChild(address to, uint256 tokenId, string memory label, bytes memory _data) internal {\r\n        _mintChild(to, tokenId, label);\r\n        require(_checkOnERC721Received(address(0), to, _childId(tokenId, label), _data));\r\n    }\r\n\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        super._transferFrom(from, to, tokenId);\r\n        // Clear resolver (if any)\r\n        if (_tokenResolvers[tokenId] != address(0x0)) {\r\n            delete _tokenResolvers[tokenId];\r\n        }\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal {\r\n        super._burn(tokenId);\r\n        // Clear resolver (if any)\r\n        if (_tokenResolvers[tokenId] != address(0x0)) {\r\n            delete _tokenResolvers[tokenId];\r\n        }\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n\r\n    function _resolveTo(address to, uint256 tokenId) internal {\r\n        require(_exists(tokenId));\r\n        emit Resolve(tokenId, to);\r\n        _tokenResolvers[tokenId] = to;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title MintingController\r\n * @dev Defines the functions for distribution of Second Level Domains (SLD)s.\r\n */\r\ncontract MintingController is IMintingController, MinterRole {\r\n\r\n    Registry internal _registry;\r\n\r\n    constructor (Registry registry) public {\r\n        _registry = registry;\r\n    }\r\n\r\n    function registry() external view returns (address) {\r\n        return address(_registry);\r\n    }\r\n\r\n    function mintSLD(address to, string memory label) public onlyMinter {\r\n        _registry.controlledMintChild(to, _registry.root(), label);\r\n    }\r\n\r\n    function safeMintSLD(address to, string calldata label) external {\r\n        safeMintSLD(to, label, \"\");\r\n    }\r\n\r\n    function safeMintSLD(address to, string memory label, bytes memory _data) public onlyMinter {\r\n        _registry.controlledSafeMintChild(to, _registry.root(), label, _data);\r\n    }\r\n\r\n    function mintSLDWithResolver(address to, string memory label, address resolver) public onlyMinter {\r\n        _registry.controlledMintChild(to, _registry.root(), label);\r\n        _registry.controlledResolveTo(resolver, _registry.childIdOf(_registry.root(), label));\r\n    }\r\n\r\n    function safeMintSLDWithResolver(address to, string calldata label, address resolver) external {\r\n        safeMintSLD(to, label, \"\");\r\n        _registry.controlledResolveTo(resolver, _registry.childIdOf(_registry.root(), label));\r\n    }\r\n\r\n    function safeMintSLDWithResolver(address to, string calldata label, address resolver, bytes calldata _data) external {\r\n        safeMintSLD(to, label, _data);\r\n        _registry.controlledResolveTo(resolver, _registry.childIdOf(_registry.root(), label));\r\n    }\r\n\r\n}\r\n\r\ncontract FreeMinter {\r\n    string public constant NAME = 'Unstoppable Free Domains Minter';\r\n    string public constant VERSION = '0.1.0';\r\n    string private constant DOMAIN_NAME_PREFIX = 'udtestdev-';\r\n\r\n    MintingController private _mintingController;\r\n    IResolver private _resolver;\r\n    IRegistryReader private _registry;\r\n\r\n    constructor(MintingController mintingController, IResolver resolver, IRegistryReader registry) public {\r\n        _mintingController = mintingController;\r\n        _resolver = resolver;\r\n        _registry = registry;\r\n    }\r\n\r\n    function claim(string calldata label) external {\r\n        mintSLD(label, msg.sender);\r\n    }\r\n\r\n    function claimTo(string calldata label, address receiver) external {\r\n        mintSLD(label, receiver);\r\n    }\r\n\r\n    function claimToWithRecords(string calldata label, address receiver, string[] calldata keys, string[] calldata values) external {\r\n        string memory labelWithPrefix = mintSLD(label, receiver);\r\n        if (keys.length == 0) {\r\n            return;\r\n        }\r\n        uint256 tokenId = _registry.childIdOf(_registry.root(), labelWithPrefix);\r\n        _resolver.preconfigure(keys, values, tokenId);\r\n    }\r\n\r\n    function mintSLD(string memory label, address receiver) private returns (string memory) {\r\n        string memory labelWithPrefix = string(abi.encodePacked(DOMAIN_NAME_PREFIX, label));\r\n        _mintingController.mintSLDWithResolver(receiver, labelWithPrefix, address(_resolver));\r\n\r\n        return labelWithPrefix;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract MintingController\",\"name\":\"mintingController\",\"type\":\"address\"},{\"internalType\":\"contract IResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"contract IRegistryReader\",\"name\":\"registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"name\":\"claimToWithRecords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FreeMinter","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b0ee56339c3253361730f50c08d3d7817ecd60ca000000000000000000000000b66dce2da6afaaa98f2013446dbcb0f4b0ab2842000000000000000000000000d1e5b0ff1287aa9f9a268759062e4ab08b9dacbe","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8219e324cc6187205eb892268d0f2cadbd7a31b2df54ce1e0ee2b0c87c21f640"}]}