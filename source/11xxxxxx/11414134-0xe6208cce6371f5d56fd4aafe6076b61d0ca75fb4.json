{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts-waifu/waif/utils/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts-waifu/waif/utils/Ownable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts-waifu/waif/utils/SafeMath.sol\r\n\r\npragma solidity 0.5.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath#sub: UNDERFLOW\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath#add: OVERFLOW\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts-waifu/waif/utils/IERC20.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts-waifu/waif/utils/Roles.sol\r\n\r\npragma solidity 0.5.0;\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts-waifu/waif/utils/MinterRole.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts-waifu/waif/utils/CanTransferRole.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\ncontract CanTransferRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event CanTransferAdded(address indexed account);\r\n    event CanTransferRemoved(address indexed account);\r\n\r\n    Roles.Role private _canTransfer;\r\n\r\n    constructor () internal {\r\n        _addCanTransfer(_msgSender());\r\n    }\r\n\r\n    modifier onlyCanTransfer() {\r\n        require(canTransfer(_msgSender()), \"CanTransferRole: caller does not have the CanTransfer role\");\r\n        _;\r\n    }\r\n\r\n    function canTransfer(address account) public view returns (bool) {\r\n        return _canTransfer.has(account);\r\n    }\r\n\r\n    function addCanTransfer(address account) public onlyCanTransfer {\r\n        _addCanTransfer(account);\r\n    }\r\n\r\n    function renounceCanTransfer() public {\r\n        _removeCanTransfer(_msgSender());\r\n    }\r\n\r\n    function _addCanTransfer(address account) internal {\r\n        _canTransfer.add(account);\r\n        emit CanTransferAdded(account);\r\n    }\r\n\r\n    function _removeCanTransfer(address account) internal {\r\n        _canTransfer.remove(account);\r\n        emit CanTransferRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts-waifu/waif/HaremNonTradable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HaremNonTradable is Ownable, MinterRole, CanTransferRole {\r\n    using SafeMath for uint256;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalClaimed;\r\n    string public name = \"HAREM - Non Tradable\";\r\n    string public symbol = \"HAREM\";\r\n    uint8 public decimals = 18;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Returns the total claimed Harem\r\n    // This is just purely used to display the total Harem claimed by users on the frontend\r\n    function totalClaimed() public view returns (uint256) {\r\n        return _totalClaimed;\r\n    }\r\n\r\n    // Add Harem claimed\r\n    function addClaimed(uint256 _amount) public onlyCanTransfer {\r\n        _totalClaimed = _totalClaimed.add(_amount);\r\n    }\r\n\r\n    // Set Harem claimed to a custom value, for if we wanna reset the counter on new season release\r\n    function setClaimed(uint256 _amount) public onlyCanTransfer {\r\n        require(_amount >= 0, \"Cant be negative\");\r\n        _totalClaimed = _amount;\r\n    }\r\n\r\n    // As this token is non tradable, only minters are allowed to transfer tokens between accounts\r\n    function transfer(address receiver, uint numTokens) public onlyCanTransfer returns (bool) {\r\n        require(numTokens <= _balances[msg.sender]);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(numTokens);\r\n        _balances[receiver] = _balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    // As this token is non tradable, only minters are allowed to transfer tokens between accounts\r\n    function transferFrom(address owner, address buyer, uint numTokens) public onlyCanTransfer returns (bool) {\r\n        require(numTokens <= _balances[owner]);\r\n\r\n        _balances[owner] = _balances[owner].sub(numTokens);\r\n        _balances[buyer] = _balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyMinter {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(address _account, uint256 value) public onlyCanTransfer {\r\n        require(_balances[_account] >= value, \"Cannot burn more than address has\");\r\n        _burn(_account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n}\r\n\r\n// File: contracts-waifu/waif/HaremFactory.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract HaremFactory is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of Harems\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accHaremPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accHaremPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 token; // Address of token contract.\r\n        uint256 haremsPerDay; // The amount of Harems per day generated for each token staked\r\n        uint256 maxStake; // The maximum amount of tokens which can be staked in this pool\r\n        uint256 lastUpdateTime; // Last timestamp that Harems distribution occurs.\r\n        uint256 accHaremPerShare; // Accumulated Harems per share, times 1e12. See below.\r\n    }\r\n\r\n    // Treasury address.\r\n    address public treasuryAddr;\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Record whether the pair has been added.\r\n    mapping(address => uint256) public tokenPID;\r\n\r\n    HaremNonTradable public Harem;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(HaremNonTradable _haremAddress, address _treasuryAddr) public {\r\n        Harem = _haremAddress;\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new token to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same token more than once. Rewards will be messed up if you do.\r\n    function add(IERC20 _token, uint256 _haremsPerDay, uint256 _maxStake) public onlyOwner {\r\n        require(tokenPID[address(_token)] == 0, \"GiverOfHarem:duplicate add.\");\r\n        require(address(_token) != address(Harem), \"Cannot add Harem as a pool\" );\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                token: _token,\r\n                maxStake: _maxStake,\r\n                haremsPerDay: _haremsPerDay,\r\n                lastUpdateTime: block.timestamp,\r\n                accHaremPerShare: 0\r\n            })\r\n        );\r\n        tokenPID[address(_token)] = poolInfo.length;\r\n    }\r\n\r\n  \r\n    function setMaxStake(uint256 pid, uint256 amount) public onlyOwner {\r\n        require(amount >= 0, \"Max stake cannot be negative\");\r\n        poolInfo[pid].maxStake = amount;\r\n    }\r\n\r\n    // Set the amount of Harems generated per day for each token staked\r\n    function setHaremsPerDay(uint256 pid, uint256 amount) public onlyOwner {\r\n        require(amount >= 0, \"Harems per day cannot be negative\");\r\n        updatePool(pid);\r\n        poolInfo[pid].haremsPerDay = amount;\r\n    }\r\n\r\n    // View function to see pending Harems on frontend.\r\n    function pendingHarem(uint256 _pid, address _user) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 blockTime = block.timestamp;\r\n        uint256 accHaremPerShare = pool.accHaremPerShare;\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        if (blockTime > pool.lastUpdateTime && tokenSupply != 0) {\r\n            uint256 haremReward = pendingHaremOfPool(_pid);\r\n            accHaremPerShare = accHaremPerShare.add(haremReward.mul(1e12).div(tokenSupply));\r\n        }\r\n        return user.amount.mul(accHaremPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // View function to calculate the total pending Harems of address across all pools\r\n    function totalPendingHarem(address _user) public view returns (uint256) {\r\n        uint256 total = 0;\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            total = total.add(pendingHarem(pid, _user));\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    // View function to see pending Harems on the whole pool\r\n    function pendingHaremOfPool(uint256 _pid) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 blockTime = block.timestamp;\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        return blockTime.sub(pool.lastUpdateTime).mul(tokenSupply.mul(pool.haremsPerDay).div(86400).div(1000000000000000000));\r\n    }\r\n\r\n    // Harvest pending Harems of a list of pools.\r\n    // Be careful of gas spending if you try to harvest a big number of pools\r\n    // Might be worth it checking in the frontend for the pool IDs with pending Harem for this address and only harvest those\r\n    function rugPull(uint256[] memory _pids) public {\r\n        for (uint i=0; i < _pids.length; i++) {\r\n            withdraw(_pids[i], 0);\r\n        }\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function rugPullAll() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastUpdateTime) {\r\n            return;\r\n        }\r\n        if (pool.haremsPerDay == 0) {\r\n            pool.lastUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        if (tokenSupply == 0) {\r\n            pool.lastUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        // return blockTime.sub(lastUpdateTime[account]).mul(balanceOf(account).mul(haremsPerDay).div(86400));\r\n        uint256 haremReward = pendingHaremOfPool(_pid);\r\n        //Harem.mint(treasuryAddr, haremReward.div(40)); // 2.5% Harem for the treasury (Usable to purchase NFTs)\r\n        Harem.mint(address(this), haremReward);\r\n\r\n        pool.accHaremPerShare = pool.accHaremPerShare.add(haremReward.mul(1e12).div(tokenSupply));\r\n        pool.lastUpdateTime = block.timestamp;\r\n    }\r\n\r\n    // Deposit LP tokens to pool for Harem allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(_amount.add(user.amount) <= pool.maxStake, \"Cannot stake beyond maxStake value\");\r\n\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accHaremPerShare).div(1e12).sub(user.rewardDebt);\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accHaremPerShare).div(1e12);\r\n        if (pending > 0) safeHaremTransfer(msg.sender, pending);\r\n        pool.token.transferFrom(address(msg.sender), address(this), _amount);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw tokens from pool.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accHaremPerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n        // In case the maxStake has been lowered and address is above maxStake, we force it to withdraw what is above current maxStake\r\n        // User can delay his/her withdraw/harvest to take advantage of a reducing of maxStake,\r\n        // if he/she entered the pool at maxStake before the maxStake reducing occured\r\n        uint256 leftAfterWithdraw = user.amount.sub(_amount);\r\n        if (leftAfterWithdraw > pool.maxStake) {\r\n            _amount = _amount.add(leftAfterWithdraw - pool.maxStake);\r\n        }\r\n\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accHaremPerShare).div(1e12);\r\n        safeHaremTransfer(msg.sender, pending);\r\n        pool.token.transfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount > 0, \"emergencyWithdraw: not good\");\r\n        uint256 _amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.token.transfer(address(msg.sender), _amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Safe Harem transfer function, just in case if rounding error causes pool to not have enough Harems.\r\n    function safeHaremTransfer(address _to, uint256 _amount) internal {\r\n        uint256 haremBal = Harem.balanceOf(address(this));\r\n        if (_amount > haremBal) {\r\n            Harem.transfer(_to, haremBal);\r\n            Harem.addClaimed(haremBal);\r\n        } else {\r\n            Harem.transfer(_to, _amount);\r\n            Harem.addClaimed(_amount);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function treasury(address _treasuryAddr) public {\r\n        require(msg.sender == treasuryAddr, \"Must be called from current treasury address\");\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"rugPull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"haremsPerDay\",\"type\":\"uint256\"},{\"name\":\"maxStake\",\"type\":\"uint256\"},{\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"name\":\"accHaremPerShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Harem\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"treasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rugPullAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_haremsPerDay\",\"type\":\"uint256\"},{\"name\":\"_maxStake\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHaremsPerDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingHaremOfPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalPendingHarem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingHarem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_haremAddress\",\"type\":\"address\"},{\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HaremFactory","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000547e1fc96805d123290c1cfb52d5bebc01ed3bfa0000000000000000000000007d2498a05f2c6d6d53db8dfb5826e279012996eb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7da582f0a07c56918569bf32c87dc0bf0fd38bdea8f7a0a7b46f273cf4f8d3e5"}]}