{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n\"\"\"\r\n@title Claimable Reward\r\n@author Curve Finance\r\n@license MIT\r\n@notice Used for share reward\r\n\"\"\"\r\n\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface Gauge:\r\n    def integrate_fraction(_address: address) -> uint256: view\r\n    def integrate_inv_supply_of(account: address) -> uint256: view\r\n    def working_supply() -> uint256: view\r\n    def working_balances(account: address) -> uint256: view\r\n\r\n\r\nevent CommitOwnership:\r\n    admin: address\r\n\r\nevent ApplyOwnership:\r\n    admin: address\r\n\r\nevent Deposit:\r\n    coin: indexed(address)\r\n    value: uint256\r\n\r\nevent ClaimStarted:\r\n    coin: indexed(address)\r\n    account: indexed(address)\r\n\r\nevent ClaimReward:\r\n    to: indexed(address)\r\n    value: uint256\r\n\r\nevent Withdrawal:\r\n    coin: address\r\n    value: uint256\r\n\r\n\r\nINTEGRATE_INV_SUPPLY_FACTOR: constant(uint256) = 10 ** 18\r\n\r\n\r\nowner: public(address)\r\nfuture_owner: public(address)\r\n\r\ngauge: public(address)\r\nlast_fraction: public(HashMap[address, HashMap[address, uint256]])\r\nlast_integrate_inv: public(HashMap[address, HashMap[address, uint256]])\r\nintegrated_deposit: public(HashMap[address, uint256])\r\ncommited_deposit_for: public(HashMap[address, HashMap[address, uint256]])\r\ncurrent_working_supply: public(HashMap[address, uint256])\r\n\r\n\r\n@external\r\ndef __init__(_gauge: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _gauge Liquidity gauge contract address\r\n    \"\"\"\r\n    self.gauge = _gauge\r\n    self.owner = msg.sender\r\n\r\n\r\n@view\r\n@internal\r\ndef _claimable_tokens(_coin: address, account: address) -> uint256:\r\n    total_balance: uint256 = ERC20(_coin).balanceOf(self)\r\n    fraction: uint256 = Gauge(self.gauge).integrate_fraction(account)\r\n    old_fraction: uint256 = self.last_fraction[_coin][account]\r\n    integrate_inv: uint256 = Gauge(self.gauge).integrate_inv_supply_of(account)\r\n    old_integrate_inv: uint256 = self.last_integrate_inv[_coin][account]\r\n    working_supply: uint256 = max(self.current_working_supply[_coin], Gauge(self.gauge).working_supply())\r\n\r\n    if fraction == old_fraction or integrate_inv == old_integrate_inv or self.integrated_deposit[_coin] == self.commited_deposit_for[_coin][account]:\r\n        return 0\r\n\r\n    delta_fraction: uint256 = fraction - old_fraction\r\n    delta_integrate_inv: uint256 = integrate_inv - old_integrate_inv\r\n\r\n    claim_amount: uint256 = (self.integrated_deposit[_coin] - self.commited_deposit_for[_coin][account]) * INTEGRATE_INV_SUPPLY_FACTOR * delta_fraction / delta_integrate_inv / working_supply\r\n\r\n    if claim_amount > total_balance:\r\n        if total_balance * INTEGRATE_INV_SUPPLY_FACTOR * delta_fraction / delta_integrate_inv / working_supply > total_balance:\r\n            return total_balance\r\n        else:\r\n            return total_balance * INTEGRATE_INV_SUPPLY_FACTOR * delta_fraction / delta_integrate_inv / working_supply\r\n\r\n    return claim_amount\r\n\r\n\r\n@view\r\n@external\r\ndef claimable_tokens(_coin: address) -> uint256:\r\n    \"\"\"\r\n    @notice Return amount of available _coin for claim\r\n    @param _coin Address of ERC20 token for claim reward \r\n    \"\"\"\r\n    return self._claimable_tokens(_coin, msg.sender)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef deposit(_coin: address, _value: uint256):\r\n    \"\"\"\r\n    @notice Deposit _value of _coin available to claim for gauge holder users\r\n    @param _coin Address of ERC20 token for claim reward \r\n    @param _value amount of _coin for claim reward \r\n    \"\"\"\r\n    assert _value > 0, \"zero amount not allowed\"\r\n    assert ERC20(_coin).transferFrom(msg.sender, self, _value)\r\n    self.current_working_supply[_coin] = Gauge(self.gauge).working_supply()\r\n    self.integrated_deposit[_coin] += _value\r\n\r\n    log Deposit(_coin, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef claim(_coin: address):\r\n    \"\"\"\r\n    @notice Claims available reward in _coin to caller\r\n    @param _coin Address of ERC20 token for claim reward\r\n    \"\"\"\r\n    available_amount: uint256 = self._claimable_tokens(_coin, msg.sender)\r\n    assert available_amount > 0, \"already claimed\"\r\n\r\n    ERC20(_coin).transfer(msg.sender, available_amount)\r\n    self.last_integrate_inv[_coin][msg.sender] = Gauge(self.gauge).integrate_inv_supply_of(msg.sender)\r\n    self.last_fraction[_coin][msg.sender] = Gauge(self.gauge).integrate_fraction(msg.sender)\r\n    self.commited_deposit_for[_coin][msg.sender] = self.integrated_deposit[_coin]\r\n\r\n    log ClaimReward(msg.sender, available_amount)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef emergency_withdrawal(_coin: address):\r\n    \"\"\"\r\n    @notice Emergency withdrawal for _coin amount from contract to owner\r\n    @param _coin Address of ERC20 token for withdrawal\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"owner only\"\r\n    available_amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    assert available_amount > 0, \"zero amount\"\r\n    assert ERC20(_coin).transfer(self.owner, available_amount)\r\n\r\n    log Withdrawal(_coin, available_amount)\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(addr: address):\r\n    \"\"\"\r\n    @notice Transfer ownership of ClaimableReward to `addr`\r\n    @param addr Address to have ownership transferred to\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"owner only\"\r\n    self.future_owner = addr\r\n    log CommitOwnership(addr)\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership():\r\n    \"\"\"\r\n    @notice Apply pending ownership transfer\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"owner only\"\r\n    _owner: address = self.future_owner\r\n    assert _owner != ZERO_ADDRESS, \"owner not set\"\r\n    self.owner = _owner\r\n    log ApplyOwnership(_owner)","ABI":"[{\"name\":\"CommitOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Deposit\",\"inputs\":[{\"type\":\"address\",\"name\":\"coin\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ClaimStarted\",\"inputs\":[{\"type\":\"address\",\"name\":\"coin\",\"indexed\":true},{\"type\":\"address\",\"name\":\"account\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ClaimReward\",\"inputs\":[{\"type\":\"address\",\"name\":\"to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdrawal\",\"inputs\":[{\"type\":\"address\",\"name\":\"coin\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_gauge\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"claimable_tokens\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":14518},{\"name\":\"deposit\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":131578},{\"name\":\"claim\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":182119},{\"name\":\"emergency_withdrawal\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":61532},{\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37744},{\"name\":\"apply_transfer_ownership\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38600},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1271},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1301},{\"name\":\"gauge\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"last_fraction\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1791},{\"name\":\"last_integrate_inv\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1821},{\"name\":\"integrated_deposit\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1636},{\"name\":\"commited_deposit_for\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1881},{\"name\":\"current_working_supply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1696}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000f98450b5602fa59cc66e1379dffb6fddc724cfc4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}