{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n\"\"\"\r\n@title Curve LiquidityGaugeV2 Ownership Proxy\r\n@author Curve Finance\r\n@license MIT\r\n\"\"\"\r\n\r\ninterface LiquidityGauge:\r\n    def set_rewards(_reward_contract: address, _sigs: bytes32, _reward_tokens: address[8]): nonpayable\r\n    def set_killed(_is_killed: bool): nonpayable\r\n    def commit_transfer_ownership(addr: address): nonpayable\r\n    def accept_transfer_ownership(): nonpayable\r\n\r\n\r\nevent CommitAdmins:\r\n    ownership_admin: address\r\n    emergency_admin: address\r\n\r\nevent ApplyAdmins:\r\n    ownership_admin: address\r\n    emergency_admin: address\r\n\r\n\r\nownership_admin: public(address)\r\nemergency_admin: public(address)\r\n\r\nfuture_ownership_admin: public(address)\r\nfuture_emergency_admin: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_ownership_admin: address, _emergency_admin: address):\r\n    self.ownership_admin = _ownership_admin\r\n    self.emergency_admin = _emergency_admin\r\n\r\n\r\n@external\r\ndef commit_set_admins(_o_admin: address, _e_admin: address):\r\n    \"\"\"\r\n    @notice Set ownership admin to `_o_admin` and emergency admin to `_e_admin`\r\n    @param _o_admin Ownership admin\r\n    @param _e_admin Emergency admin\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    self.future_ownership_admin = _o_admin\r\n    self.future_emergency_admin = _e_admin\r\n\r\n    log CommitAdmins(_o_admin, _e_admin)\r\n\r\n\r\n@external\r\ndef accept_set_admins():\r\n    \"\"\"\r\n    @notice Apply the effects of `commit_set_admins`\r\n    @dev Only callable by the new owner admin\r\n    \"\"\"\r\n    assert msg.sender == self.future_ownership_admin, \"Access denied\"\r\n\r\n    e_admin: address = self.future_emergency_admin\r\n    self.ownership_admin = msg.sender\r\n    self.emergency_admin = e_admin\r\n\r\n    log ApplyAdmins(msg.sender, e_admin)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef commit_transfer_ownership(_gauge: address, new_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership for liquidity gauge `_gauge` to `new_owner`\r\n    @param _gauge Gauge which ownership is to be transferred\r\n    @param new_owner New gauge owner address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n    LiquidityGauge(_gauge).commit_transfer_ownership(new_owner)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef accept_transfer_ownership(_gauge: address):\r\n    \"\"\"\r\n    @notice Apply transferring ownership of `_gauge`\r\n    @param _gauge Gauge address\r\n    \"\"\"\r\n    LiquidityGauge(_gauge).accept_transfer_ownership()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_killed(_gauge: address, _is_killed: bool):\r\n    \"\"\"\r\n    @notice Set the killed status for `_gauge`\r\n    @dev When killed, the gauge always yields a rate of 0 and so cannot mint CRV\r\n    @param _gauge Gauge address\r\n    @param _is_killed Killed status to set\r\n    \"\"\"\r\n    assert msg.sender in [self.ownership_admin, self.emergency_admin], \"Access denied\"\r\n\r\n    LiquidityGauge(_gauge).set_killed(_is_killed)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_rewards(_gauge: address, _reward_contract: address, _sigs: bytes32, _reward_tokens: address[8]):\r\n    \"\"\"\r\n    @notice Set the active reward contract for `_gauge`\r\n    @param _gauge Gauge address\r\n    @param _reward_contract Reward contract address. Set to ZERO_ADDRESS to\r\n                            disable staking.\r\n    @param _sigs Four byte selectors for staking, withdrawing and claiming,\r\n                 right padded with zero bytes. If the reward contract can\r\n                 be claimed from but does not require staking, the staking\r\n                 and withdraw selectors should be set to 0x00\r\n    @param _reward_tokens List of claimable tokens for this reward contract\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    LiquidityGauge(_gauge).set_rewards(_reward_contract, _sigs, _reward_tokens)","ABI":"[{\"name\":\"CommitAdmins\",\"inputs\":[{\"type\":\"address\",\"name\":\"ownership_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"emergency_admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyAdmins\",\"inputs\":[{\"type\":\"address\",\"name\":\"ownership_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"emergency_admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_ownership_admin\"},{\"type\":\"address\",\"name\":\"_emergency_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"commit_set_admins\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_o_admin\"},{\"type\":\"address\",\"name\":\"_e_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":73291},{\"name\":\"accept_set_admins\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":73922},{\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_gauge\"},{\"type\":\"address\",\"name\":\"new_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58951},{\"name\":\"accept_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_gauge\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":57956},{\"name\":\"set_killed\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_gauge\"},{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":60232},{\"name\":\"set_rewards\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_gauge\"},{\"type\":\"address\",\"name\":\"_reward_contract\"},{\"type\":\"bytes32\",\"name\":\"_sigs\"},{\"type\":\"address[8]\",\"name\":\"_reward_tokens\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59443},{\"name\":\"ownership_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1241},{\"name\":\"emergency_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1271},{\"name\":\"future_ownership_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1301},{\"name\":\"future_emergency_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000040907540d8a6c65c637785e8f8b742ae6b0b996800000000000000000000000000669df67e4827fcc0e48a1838a8d5ab79281909","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}