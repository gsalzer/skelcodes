{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/income.sol\n\npragma solidity >=0.4.23 <0.6.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {cs := extcodesize(self)}\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\ncontract ERC20 is Initializable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string public  name;\r\n    string public  symbol;\r\n    uint256 public decimals;\r\n\r\n    function initialize() initializer public {\r\n        name = \"INCOME\";\r\n        symbol = \"ICE\";\r\n        decimals = 8;\r\n        _totalSupply = 100000000 * 10 ** decimals;\r\n        _balances[msg.sender] = 2000000 * 10 ** decimals;\r\n        _balances[address(this)] = _totalSupply.sub(_balances[msg.sender]);\r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n    }\r\n\r\n    function receiveLoad(uint amount) internal ;\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        if(recipient == address(this)){\r\n            receiveLoad(amount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract Owned is Initializable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\r\n    function initialize() initializer public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract WhitelistCfoRole is Initializable, Owned {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistCfoAdded(address indexed account);\r\n    event WhitelistCfoRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistCfos;\r\n\r\n\r\n    function initialize() initializer public {\r\n        _addWhitelistCfo(0xFA70F2664F73E5a620d495Daf08dcAE2Fa4D1BB6);\r\n\r\n    }\r\n\r\n    modifier onlyWhitelistCfo() {\r\n        require(isWhitelistCfo(msg.sender), \"WhitelistCfoRole: caller does not have the WhitelistCfo role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistCfo(address account) public view returns (bool) {\r\n        return _whitelistCfos.has(account);\r\n    }\r\n\r\n    function addWhitelistCfo(address account) public onlyOwner {\r\n        _addWhitelistCfo(account);\r\n    }\r\n\r\n    function removeWhitelistCfo(address account) public onlyOwner {\r\n        _removeWhitelistCfo(account);\r\n    }\r\n\r\n\r\n\r\n    function _addWhitelistCfo(address account) internal {\r\n        _whitelistCfos.add(account);\r\n        emit WhitelistCfoAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistCfo(address account) internal {\r\n        _whitelistCfos.remove(account);\r\n        emit WhitelistCfoRemoved(account);\r\n    }\r\n}\r\n\r\n\r\ncontract ICE is Initializable, ERC20, WhitelistCfoRole {\r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n    struct Lock {\r\n        uint load_amount;\r\n        uint unlock_date;\r\n    }\r\n    uint firstDay;\r\n\r\n    uint  ethManager;\r\n    ///\r\n    struct LoadChange{\r\n        bool ischange;\r\n        uint amount;\r\n    }\r\n    //    uint users;//all users\r\n    mapping(address=>bool) isLocking;\r\n\r\n    uint private floor_amount;\r\n    uint private exchanged;\r\n    uint private load_lock;\r\n\r\n    uint private load_price;\r\n    uint private eth_unit;\r\n\r\n    uint lockdays;\r\n    uint divdDuration;\r\n\r\n\r\n    mapping(string => address) manager;\r\n\r\n\r\n    mapping(address => Lock)  locks;\r\n\r\n\r\n    mapping(address => uint) user_load_divs_total;\r\n    mapping(address => uint) user_eth_divs_total;\r\n\r\n\r\n    mapping(uint=>LoadChange) public loadDaily;\r\n    mapping(uint=>uint) public ethDaily;\r\n    mapping(address=>uint) public userDivdDate;\r\n    mapping(address=>mapping(uint=>LoadChange)) loadChanges;\r\n\r\n\r\n    function initialize() initializer public {\r\n        ERC20.initialize();\r\n        Owned.initialize();\r\n        WhitelistCfoRole.initialize();\r\n        addInit();\r\n\r\n        load_price = 500000000000000;\r\n        eth_unit =  500000000000000;\r\n\r\n        floor_amount =450000000000000;// 45000000000000;\r\n        firstDay = now;\r\n        lockdays = 3 days;\r\n        divdDuration = 1 days;\r\n\r\n    }\r\n\r\n\r\n    function addInit() private {\r\n        manager[\"A\"] = 0xFA70F2664F73E5a620d495Daf08dcAE2Fa4D1BB6;\r\n        manager[\"B\"] = 0x54aF5DfBC8C4DB5443E86ff9b280ec123b1Ad02A;\r\n        manager[\"C\"] = 0x3Ae02e0440C50CC170e498CB9C8509B2fF196371;\r\n        manager[\"D\"] = 0x0f7e8e9D34bd8A06197e3eFE46555E2Bb3372e94;\r\n        manager[\"E\"] = 0xBF2100b958CFF96Cd20897444AE0B172dcc9A5a6;\r\n     \r\n        manager[\"TEN\"] = 0x587f580430Fcb37cd8f6126781D9ce0A9d73FE23;\r\n\r\n\r\n    }\r\n\r\n    function changeAddress(string nickname, address newaddress) external onlyOwner {\r\n        manager[nickname] = newaddress;\r\n\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(addr)}\r\n        return size > 0;\r\n    }\r\n\r\n    function receiveEth() public payable{\r\n        require(!isContract(msg.sender), \"Should not be contract address\");\r\n        require(msg.value > 0, \"Can't Zero\");\r\n        require(exchanged < 1800000000000000, \"The exchange is over\");\r\n        require(mosteth() >= msg.value, \"Not so much\");\r\n        uint coin;\r\n\r\n        coin = exchangeload(msg.value);\r\n        exchanged = exchanged.add(coin);\r\n        uint level = exchanged.div(floor_amount).add(1);\r\n        load_lock = load_lock.add(coin);\r\n\r\n        locks[msg.sender].unlock_date = now + lockdays;\r\n        locks[msg.sender].load_amount = locks[msg.sender].load_amount.add(coin);\r\n\r\n        uint today=now.div(divdDuration).add(1);\r\n        uint ethvalue = msg.value.mul(level).div(10);\r\n        loadDaily[today].amount = load_lock;\r\n        loadDaily[today].ischange = true;\r\n        ethDaily[today] = ethDaily[today].add(ethvalue);\r\n        ethManager = ethManager.add(msg.value.sub(ethvalue));\r\n        loadChanges[msg.sender][today].ischange = true;\r\n        loadChanges[msg.sender][today].amount = locks[msg.sender].load_amount;\r\n\r\n        if(userDivdDate[msg.sender]==0){\r\n            userDivdDate[msg.sender]=now.div(divdDuration);\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        receiveEth();\r\n    }\r\n\r\n\r\n\r\n    function checkredeemable() public view returns (uint amount) {\r\n        if (now > locks[msg.sender].unlock_date) {\r\n            return locks[msg.sender].load_amount;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function ethsharediv() external onlyWhitelistCfo {\r\n\r\n        uint ethpercentten = ethManager.div(10);\r\n        //10 percent\r\n        uint256 ethshare = (ethManager.sub(ethpercentten)).div(100);\r\n\r\n        address(uint160(manager[\"TEN\"])).transfer(ethpercentten);\r\n\r\n        address(uint160(manager[\"A\"])).transfer(ethshare.mul(50));\r\n        address(uint160(manager[\"B\"])).transfer(ethshare.mul(20));\r\n        address(uint160(manager[\"C\"])).transfer(ethshare.mul(10));\r\n        address(uint160(manager[\"D\"])).transfer(ethshare.mul(10));\r\n        address(uint160(manager[\"E\"])).transfer(ethshare.mul(10));\r\n \r\n        ethManager =0;\r\n\r\n    }\r\n\r\n    function receiveLoad(uint amount) internal   {\r\n        lockload(amount);\r\n    }\r\n\r\n    function lockload(uint amount) internal {\r\n        uint today=now.div(divdDuration).add(1);\r\n        locks[msg.sender].load_amount = locks[msg.sender].load_amount.add(amount);\r\n        locks[msg.sender].unlock_date = now + lockdays;\r\n        load_lock = load_lock.add(amount);\r\n\r\n\r\n        loadDaily[today].amount = load_lock;\r\n        loadDaily[today].ischange = true;\r\n        loadChanges[msg.sender][today].ischange = true;\r\n        loadChanges[msg.sender][today].amount = locks[msg.sender].load_amount;\r\n\r\n\r\n        if(userDivdDate[msg.sender]==0){\r\n            userDivdDate[msg.sender]= now.div(divdDuration);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function redeem() external {\r\n        require(locks[msg.sender].unlock_date < now, \"locking\");\r\n        uint today=now.div(divdDuration).add(1);\r\n        uint total = locks[msg.sender].load_amount;\r\n        load_lock = load_lock.sub(total);\r\n        locks[msg.sender].load_amount = 0;\r\n        loadDaily[today].amount = load_lock;\r\n        loadDaily[today].ischange = true;\r\n        loadChanges[msg.sender][today].ischange = true;\r\n        loadChanges[msg.sender][today].amount = 0;\r\n        isLocking[msg.sender]=false;\r\n        _transfer(address(this), msg.sender, total);\r\n    }\r\n\r\n\r\n    function mosteth() internal view returns (uint mount){\r\n        uint256 unit_eth = 5000000;\r\n        uint256 level = exchanged.div(floor_amount).add(1);\r\n        uint256 remain = level.mul(floor_amount).sub(exchanged);\r\n        mount = remain.mul(unit_eth.mul(level));\r\n        level++;\r\n        for (uint i = level; i <= 4; i++) {\r\n            mount = mount.add(i.mul(unit_eth).mul(floor_amount));\r\n        }\r\n        return mount;\r\n    }\r\n\r\n\r\n    function exchangeload(uint amounteth) internal returns (uint mount){\r\n        uint256 unit_eth = 5000000;\r\n        uint256 level = exchanged.div(floor_amount).add(1);\r\n        uint256 remain = level.mul(floor_amount).sub(exchanged);\r\n        if (amounteth > remain.mul(unit_eth.mul(level))) {\r\n            mount = remain;\r\n            amounteth = amounteth.sub(remain.mul(unit_eth.mul(level)));\r\n            level++;\r\n            load_price = eth_unit.mul(level);\r\n            for (uint i = level; i <= 4; i++) {\r\n                if (amounteth > (unit_eth.mul(i)).mul(floor_amount)) {\r\n                    mount = mount.add(floor_amount);\r\n                    amounteth = amounteth.sub(unit_eth.mul(i).mul(floor_amount));\r\n                } else {\r\n                    mount = mount.add(amounteth.div(unit_eth.mul(i)));\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            mount = amounteth.div(unit_eth.mul(level));\r\n        }\r\n        return mount;\r\n\r\n    }\r\n\r\n    function get(uint index) public view returns (uint) {\r\n\r\n        if (index == 1) {\r\n            return load_price;\r\n        } else if (index == 2) {\r\n            return locks[msg.sender].load_amount;\r\n        } else if (index == 3) {\r\n            return locks[msg.sender].unlock_date;\r\n        }  else if (index == 6) {\r\n            return user_load_divs_total[msg.sender];\r\n        } else if (index == 7) {\r\n            return user_eth_divs_total[msg.sender];\r\n        }  else if (index == 26) {\r\n            return exchanged;\r\n        }  else if (index == 29) {\r\n            return load_price.add(eth_unit);\r\n        }\r\n    }\r\n\r\n\r\n    function getDivdLoad()public view  returns (uint) {\r\n        uint bonus;\r\n        uint divAmount;\r\n        uint userLockTemp;\r\n        uint allLockTemp;\r\n        if(userDivdDate[msg.sender]==0){\r\n            return 0;\r\n        }\r\n        for(uint j=userDivdDate[msg.sender]+1;j<=now.div(divdDuration);j++){\r\n            if(loadDaily[j].ischange){\r\n                if(loadChanges[msg.sender][j].ischange ){\r\n                    userLockTemp = loadChanges[msg.sender][j].amount;\r\n                    if(userLockTemp ==0){\r\n                        continue;\r\n                    }\r\n                }\r\n                allLockTemp = loadDaily[j].amount;\r\n            }\r\n            bonus = getBonus(j);\r\n            divAmount = divAmount.add(bonus.mul(userLockTemp).div(allLockTemp));\r\n        }\r\n        return divAmount;\r\n\r\n    }\r\n\r\n\r\n    function getBonus(uint day)private view returns (uint){\r\n        uint allDays = 127*180+firstDay.div(divdDuration);\r\n        if(day > allDays){\r\n            return 0;\r\n        }\r\n        uint bonus;\r\n        uint begin ;\r\n        uint sang = day.sub(firstDay.div(divdDuration)).div(180);\r\n        if(sang>5){\r\n            sang =5;\r\n        }\r\n        if(sang == 0){\r\n            begin = 8000000*1e8;\r\n        }else if(sang ==1){\r\n            begin =5600000*1e8;\r\n        }else if ( sang ==2){\r\n            begin = 3360000*1e8;\r\n        }else if(sang ==3){\r\n            begin =1548000*1e8;\r\n        }else if (sang ==4){\r\n            begin = 962700*1e8;\r\n        }else if(sang == 5){\r\n            begin = 493300*1e8;\r\n        }\r\n        bonus =begin.div(180);\r\n        return bonus;\r\n    }\r\n\r\n\r\n    function getDivdEth() public view returns (uint){\r\n        uint divAmount;\r\n        if(userDivdDate[msg.sender]==0){\r\n            return 0;\r\n        }\r\n        uint userLockTemp;\r\n        uint allLockTemp;\r\n        for(uint j=userDivdDate[msg.sender]+1;j<=now.div(divdDuration);j++){\r\n            if(loadDaily[j].ischange){\r\n                if(loadChanges[msg.sender][j].ischange){\r\n                    userLockTemp = loadChanges[msg.sender][j].amount;\r\n                    if(userLockTemp ==0 ){\r\n                        continue;\r\n                    }\r\n                }\r\n                allLockTemp = loadDaily[j].amount;\r\n            }\r\n\r\n            if(ethDaily[j]==0){\r\n                continue;\r\n            }\r\n            divAmount = divAmount.add(ethDaily[j].mul(userLockTemp).div(allLockTemp));\r\n        }\r\n        return divAmount;\r\n    }\r\n\r\n\r\n    function withdraw() external {\r\n        uint load = getDivdLoad();\r\n        uint eth = getDivdEth();\r\n        require(load>0 || eth >0,\"no award \");\r\n        uint today=now.div(divdDuration).add(1);\r\n        loadDaily[today].amount = load_lock;\r\n        loadDaily[today].ischange = true;\r\n        loadChanges[msg.sender][today].ischange = true;\r\n        loadChanges[msg.sender][today].amount = locks[msg.sender].load_amount;\r\n        userDivdDate[msg.sender] = now.div(divdDuration);\r\n        user_load_divs_total[msg.sender] =user_load_divs_total[msg.sender].add(load);\r\n        user_eth_divs_total[msg.sender] =  user_eth_divs_total[msg.sender].add(eth);\r\n        _transfer(address(this), msg.sender, load);\r\n        address(uint160(msg.sender)).transfer(eth);\r\n    }\r\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDivdLoad\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistCfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethsharediv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDivdEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loadDaily\",\"outputs\":[{\"name\":\"ischange\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistCfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"newaddress\",\"type\":\"address\"}],\"name\":\"changeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistCfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDivdDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethDaily\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkredeemable\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistCfoAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistCfoRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ICE","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}