{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/SyntLayerDist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport { IUniswapV2Router02, Ownable, SafeMath } from './abstractions/Balancer.sol';\\nimport { IERC20Burnable,IERC20 } from './interfaces/IERC20Burnable.sol';\\nimport './interfaces/IUniswapFactory.sol';\\n\\ninterface ISYNL is IERC20Burnable {\\n    function uniswapV2Pair() external view returns (address);\\n    function unlock() external;\\n    function initPair() external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\\ncontract SyntLayerDist is Ownable, ReentrancyGuard{\\n    using SafeMath for uint;\\n\\n    uint256 startTime = 0;\\n\\n    ISYNL public SYNL = ISYNL(address(0));\\n\\n    IUniswapV2Router02 constant uniswap =  IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    IUniswapV2Factory constant uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n\\n    bool public isStopped = false;\\n    bool public isRefundEnabled = false;\\n    bool public distStarted = false;\\n\\n    uint public tokensBought = 0;\\n\\n    uint256 public timeWhitelistSale = 15 minutes;\\n\\n    bool public teamClaimed = false;\\n\\n    bool justTrigger = false;\\n\\n    address public pool;\\n\\n    uint256 constant hardCap = 370 ether;\\n    uint256 constant minSend = 0.1 ether;\\n    uint256 constant maxAddrCap = 3 ether;\\n\\n    uint256 constant tokensPerETH = 602;\\n    uint256 constant listingPriceTokensPerETH = 542;\\n\\n    uint256 public ethSent;\\n\\n    uint256 public lockedLiquidityAmount;\\n    uint256 public timeTowithdrawTeamTokens;\\n    uint256 public refundTime;\\n\\n    mapping(address => uint) ethSpent;\\n    mapping(address => bool) public PRIVLIST;\\n\\n\\n    constructor() public {\\n        //Add refund time to 2 days from now,incase we need to refund\\n        refundTime = block.timestamp.add(2 days);\\n        PRIVLIST[msg.sender] = true;\\n    }\\n\\n\\n    receive() external payable {\\n        buyTokens();\\n    }\\n\\n    function enableRefunds() external onlyOwner nonReentrant {\\n        isRefundEnabled = true;\\n        isStopped = true;\\n    }\\n\\n    function batchAddWhitelisted(address[] calldata addrs) public onlyOwner {\\n        for(uint i=0;i<addrs.length;i++) {\\n            PRIVLIST[addrs[i]] = true;\\n        }\\n    }\\n\\n    function isPrivsalePhase() public view returns (bool) {\\n        return block.timestamp < startTime.add(timeWhitelistSale);\\n    }\\n\\n    function getRefund() external nonReentrant {\\n        require(msg.sender == tx.origin);\\n        require(!justTrigger);\\n        // Refund should be enabled by the owner OR 7 days passed\\n        require(isRefundEnabled || block.timestamp >= refundTime,\\\"Cannot refund\\\");\\n        address payable user = msg.sender;\\n        uint256 amount = ethSpent[user];\\n        ethSpent[user] = 0;\\n        user.transfer(amount);\\n    }\\n\\n    function lockLiqIncontract() external onlyOwner  {\\n        pool = SYNL.uniswapV2Pair();\\n        IERC20 liquidityTokens = IERC20(pool);\\n        uint256 liquidityBalance = liquidityTokens.balanceOf(address(this));\\n        liquidityTokens.transfer(address(SYNL),liquidityBalance);\\n\\n        lockedLiquidityAmount = lockedLiquidityAmount.add(liquidityBalance);\\n    }\\n\\n    function setSYNT( address addr) external onlyOwner nonReentrant {\\n        require(address(SYNL) == address(0), \\\"You can set the address only once\\\");\\n        SYNL = ISYNL(addr);\\n    }\\n\\n    function setPrivatesaleDuration(uint256 newDuration) public onlyOwner {\\n        timeWhitelistSale = newDuration;\\n    }\\n\\n    function startDistribution() external onlyOwner {\\n        startTime = block.timestamp;\\n        distStarted = true;\\n    }\\n\\n     function pauseDistribution() external onlyOwner {\\n        distStarted = false;\\n    }\\n\\n    function buyTokens() public payable nonReentrant {\\n        require(msg.sender == tx.origin,\\\"No contract allowed\\\");\\n        require(distStarted == true, \\\"!distStarted\\\");\\n        require(SYNL != ISYNL(address(0)), \\\"!SYNL\\\");\\n        require(PRIVLIST[msg.sender] || !isPrivsalePhase(), \\\"privsale unauth\\\");\\n        require(!isStopped, \\\"stopped\\\");\\n        require(msg.value >= minSend, \\\"<minsend\\\");\\n        require(msg.value <= maxAddrCap, \\\">maxaddrcap\\\");\\n        require(ethSent < hardCap, \\\"Hard cap reaches\\\");\\n        require (msg.value.add(ethSent) <= hardCap, \\\"Hardcap will be reached\\\");\\n        require(ethSpent[msg.sender].add(msg.value) <= maxAddrCap, \\\"You cannot buy more\\\");\\n\\n        uint256 tokens = msg.value.mul(tokensPerETH);\\n        require(SYNL.balanceOf(address(this)) >= tokens, \\\"Not enough tokens in the contract\\\");\\n\\n        ethSpent[msg.sender] = ethSpent[msg.sender].add(msg.value);\\n        tokensBought = tokensBought.add(tokens);\\n        ethSent = ethSent.add(msg.value);\\n        SYNL.transfer(msg.sender, tokens);\\n    }\\n\\n    function userEthSpenttInDistribution(address user) external view returns (uint) {\\n        return ethSpent[user];\\n    }\\n\\n    function claimTeamFeeAndAddLiquidity() external onlyOwner  {\\n       require(!teamClaimed);\\n       uint256 amountETH = address(this).balance.mul(35).div(100);\\n       payable(owner()).transfer(amountETH);\\n       teamClaimed = true;\\n\\n       addLiquidity();\\n    }\\n\\n    function addLiquidity() internal {\\n        uint256 ETH = address(this).balance;\\n        uint256 tokensForUniswap = ETH.mul(listingPriceTokensPerETH);\\n        uint256 tokensExcess = SYNL.balanceOf(address(this)).sub(tokensForUniswap);\\n        SYNL.unlock();\\n        SYNL.initPair();\\n        SYNL.approve(address(uniswap), tokensForUniswap);\\n        uniswap.addLiquidityETH\\n        { value: ETH }\\n        (\\n            address(SYNL),\\n            tokensForUniswap,\\n            tokensForUniswap,\\n            ETH,\\n            address(SYNL),\\n            block.timestamp\\n        );\\n        //Send what remains to owner\\n       if (tokensExcess > 0){\\n           SYNL.transfer(owner(),tokensExcess);\\n       }\\n\\n       justTrigger = true;\\n        if(!isStopped)\\n            isStopped = true;\\n        //Transfer ownership to deployer\\n        SYNL.transferOwnership(owner());\\n   }\\n\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/abstractions/Balancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport { Ownable, SafeMath } from '../interfaces/CommonImports.sol';\\nimport { IERC20Burnable } from '../interfaces/IERC20Burnable.sol';\\nimport '../interfaces/IUniswapV2Router02.sol';\\nimport '../interfaces/IBalancer.sol';\\n\\ninterface IFreeFromUpTo {\\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\\n    function balanceOf(address account) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\ncontract BalancerNew is Ownable, IBalancer {\\n    using SafeMath for uint256;\\n\\n    address internal UniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address payable public override treasury;\\n    IERC20Burnable token;\\n    IUniswapV2Router02 routerInterface = IUniswapV2Router02(UniRouter);\\n    address internal WETH = routerInterface.WETH();\\n\\n    constructor() public {\\n        treasury = msg.sender;\\n    }\\n\\n    function setToken(address tokenAddr) public onlyOwner {\\n        token = IERC20Burnable(tokenAddr);\\n    }\\n\\n    function setTreasury(address treasuryN) external override{\\n        require(msg.sender == address(token), \\\"only token\\\");\\n        treasury = payable(treasuryN);\\n    }\\n\\n    receive () external payable {}\\n\\n    /** Path stuff **/\\n    function getPath(address tokent,bool isSell) internal view returns (address[] memory path){\\n        path = new address[](2);\\n        path[0] = isSell ? tokent : WETH;\\n        path[1] = isSell ? WETH : tokent;\\n        return path;\\n    }\\n\\n    function getSellPath(address tokent) public view returns (address[] memory path) {\\n        path = getPath(tokent,true);\\n    }\\n\\n    function getBuyPath(address tokent) public view returns (address[] memory path){\\n        path = getPath(tokent,false);\\n    }\\n    /** Path stuff end **/\\n\\n    function rebalance(address rewardRecp) external override returns (uint256) {\\n        require(msg.sender == address(token), \\\"only token\\\");\\n        swapEthForTokens();\\n        uint256 lockableBalance = token.balanceOf(address(this));\\n        uint256 callerReward = token.getCallerCut(lockableBalance);\\n        token.transfer(rewardRecp, callerReward);\\n        token.burn(lockableBalance.sub(callerReward,\\\"Underflow on burn\\\"));\\n        return lockableBalance.sub(callerReward,\\\"underflow on return\\\");\\n    }\\n\\n    function swapEthForTokens() private {\\n\\n        uint256 treasuryAmount = token.getCallerCut(address(this).balance);\\n        (bool success,) = treasury.call{value: treasuryAmount}(\\\"\\\");\\n        require(success,\\\"treasury send failed\\\");\\n\\n        routerInterface.swapExactETHForTokensSupportingFeeOnTransferTokens{value: address(this).balance}(\\n                0,\\n                getBuyPath(address(token)),\\n                address(this),\\n                block.timestamp.add(200)\\n            );\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        //Approve before swap\\n        token.approve(UniRouter,tokenAmount);\\n        routerInterface.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                tokenAmount,\\n                0,\\n                getSellPath(address(token)),\\n                address(this),\\n                block.timestamp.add(200)\\n        );\\n    }\\n\\n\\n\\n    function addLiq(uint256 tokenAmount,uint256 ethamount) private {\\n        //Approve before adding liq\\n        token.approve(UniRouter,tokenAmount);\\n        routerInterface.addLiquidityETH{value:ethamount}(\\n            address(token),\\n            tokenAmount,\\n            0,\\n            ethamount.div(2),//Atleast half of eth should be added\\n            address(token),\\n            block.timestamp.add(200)\\n        );\\n    }\\n\\n    function AddLiq() external override returns (bool) {\\n        //Sell half of the amount to ETH\\n        uint256 tokenAmount  = token.balanceOf(address(this)).div(2);\\n        //Swap half of it to eth\\n        swapTokensForETH(tokenAmount);\\n        //Add liq with remaining eth and tokens\\n        addLiq(token.balanceOf(address(this)),address(this).balance);\\n        //If any eth remains swap to token\\n        if(address(this).balance > 0)\\n            swapEthForTokens();\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/CommonImports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IBalancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\ninterface IBalancer {\\n  function treasury (  ) external view returns ( address payable );\\n  function setTreasury ( address treasuryN ) external;\\n  function rebalance ( address rewardRecp ) external returns ( uint256 );\\n  function AddLiq (  ) external returns (bool);\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport {IERC20} from '../interfaces/CommonImports.sol';\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) external;\\n    function getLiqAddBudget(uint256 amount) external view returns (uint256);\\n    function getCallerCut(uint256 amount) external view returns (uint256);\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IUniswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n      uint amountOutMin,\\n      address[] calldata path,\\n      address to,\\n      uint deadline\\n    ) external payable;\\n    function removeLiquidityETH(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline\\n    ) external returns (uint amountETH);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PRIVLIST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYNL\",\"outputs\":[{\"internalType\":\"contract ISYNL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"batchAddWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTeamFeeAndAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrivsalePhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRefundEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockLiqIncontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setPrivatesaleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSYNT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeTowithdrawTeamTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeWhitelistSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userEthSpenttInDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SyntLayerDist","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}