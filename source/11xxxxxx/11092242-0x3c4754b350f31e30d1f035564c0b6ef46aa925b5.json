{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// \n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n *\n * Credit: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/contracts/Initializable.sol\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// \n/**\n * @notice An account contracted created for each user address.\n * @dev Anyone can directy deposit assets to the Account contract.\n * @dev Only operators can withdraw asstes or perform operation from the Account contract.\n */\ncontract Account is Initializable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /**\n     * @dev Asset is withdrawn from the Account.\n     */\n    event Withdrawn(address indexed tokenAddress, address indexed targetAddress, uint256 amount);\n\n    /**\n     * @dev Spender is allowed to spend an asset.\n     */\n    event Approved(address indexed tokenAddress, address indexed targetAddress, uint256 amount);\n\n    /**\n     * @dev A transaction is invoked on the Account.\n     */\n    event Invoked(address indexed targetAddress, uint256 value, bytes data);\n\n    address public owner;\n    mapping(address => bool) public admins;\n    mapping(address => bool) public operators;\n\n    /**\n     * @dev Initializes the owner, admin and operator roles.\n     * @param _owner Address of the contract owner\n     * @param _initialAdmins The list of addresses that are granted the admin role.\n     */\n    function initialize(address _owner, address[] memory _initialAdmins) public initializer {\n        owner = _owner;\n        // Grant the admin role to the initial admins\n        for (uint256 i = 0; i < _initialAdmins.length; i++) {\n            admins[_initialAdmins[i]] = true;\n        }\n    }\n\n    /**\n     * @dev Throws if called by any account that does not have operator role.\n     */\n    modifier onlyOperator() {\n        require(isOperator(msg.sender), \"not operator\");\n        _;\n    }\n\n    /**\n     * @dev Transfers the ownership of the account to another address.\n     * The new owner can be an zero address which means renouncing the ownership.\n     * @param _owner New owner address\n     */\n    function transferOwnership(address _owner) public {\n        require(msg.sender == owner, \"not owner\");\n        owner = _owner;\n    }\n\n    /**\n     * @dev Grants admin role to a new address.\n     * @param _account New admin address.\n     */\n    function grantAdmin(address _account) public {\n        require(msg.sender == owner, \"not owner\");\n        require(!admins[_account], \"already admin\");\n\n        admins[_account] = true;\n    }\n\n    /**\n     * @dev Revokes the admin role from an address. Only owner can revoke admin.\n     * @param _account The admin address to revoke.\n     */\n    function revokeAdmin(address _account) public {\n        require(msg.sender == owner, \"not owner\");\n        require(admins[_account], \"not admin\");\n\n        admins[_account] = false;\n    }\n\n    /**\n     * @dev Grants operator role to a new address. Only owner or admin can grant operator roles.\n     * @param _account The new operator address.\n     */\n    function grantOperator(address _account) public {\n        require(msg.sender == owner || admins[msg.sender], \"not admin\");\n        require(!operators[_account], \"already operator\");\n\n        operators[_account] = true;\n    }\n\n    /**\n     * @dev Revoke operator role from an address. Only owner or admin can revoke operator roles.\n     * @param _account The operator address to revoke.\n     */\n    function revokeOperator(address _account) public {\n        require(msg.sender == owner || admins[msg.sender], \"not admin\");\n        require(operators[_account], \"not operator\");\n\n        operators[_account] = false;\n    }\n\n    /**\n     * @dev Allows Account contract to receive ETH.\n     */\n    receive() payable external {}\n\n    /**\n     * @dev Checks whether a user is an operator of the contract.\n     * Since admin role can grant operator role and owner can grant admin role, we treat both\n     * admins and owner as operators!\n     * @param userAddress Address to check whether it's an operator.\n     */\n    function isOperator(address userAddress) public view returns (bool) {\n        return userAddress == owner || admins[userAddress] || operators[userAddress];\n    }\n\n    /**\n     * @dev Withdraws ETH from the Account contract. Only operators can withdraw ETH.\n     * @param targetAddress Address to send the ETH to.\n     * @param amount Amount of ETH to withdraw.\n     */\n    function withdraw(address payable targetAddress, uint256 amount) public onlyOperator {\n        targetAddress.transfer(amount);\n        // Use address(-1) to represent ETH.\n        emit Withdrawn(address(-1), targetAddress, amount);\n    }\n\n    /**\n     * @dev Withdraws ERC20 token from the Account contract. Only operators can withdraw ERC20 tokens.\n     * @param tokenAddress Address of the ERC20 to withdraw.\n     * @param targetAddress Address to send the ERC20 to.\n     * @param amount Amount of ERC20 token to withdraw.\n     */\n    function withdrawToken(address tokenAddress, address targetAddress, uint256 amount) public onlyOperator {\n        IERC20(tokenAddress).safeTransfer(targetAddress, amount);\n        emit Withdrawn(tokenAddress, targetAddress, amount);\n    }\n\n    /**\n     * @dev Withdraws ERC20 token from the Account contract. If the Account contract does not have sufficient balance,\n     * try to withdraw from the owner's address as well. This is useful if users wants to keep assets in their own wallet\n     * by setting adequate allowance to the Account contract.\n     * @param tokenAddress Address of the ERC20 to withdraw.\n     * @param targetAddress Address to send the ERC20 to.\n     * @param amount Amount of ERC20 token to withdraw.\n     */\n    function withdrawTokenFallThrough(address tokenAddress, address targetAddress, uint256 amount) public onlyOperator {\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\n        // If we have enough token balance, send the token directly.\n        if (tokenBalance >= amount) {\n            IERC20(tokenAddress).safeTransfer(targetAddress, amount);\n            emit Withdrawn(tokenAddress, targetAddress, amount);\n        } else {\n            IERC20(tokenAddress).safeTransferFrom(owner, targetAddress, amount.sub(tokenBalance));\n            IERC20(tokenAddress).safeTransfer(targetAddress, tokenBalance);\n            emit Withdrawn(tokenAddress, targetAddress, amount);\n        }\n    }\n\n    /**\n     * @dev Allows the spender address to spend up to the amount of token.\n     * @param tokenAddress Address of the ERC20 that can spend.\n     * @param targetAddress Address which can spend the ERC20.\n     * @param amount Amount of ERC20 that can be spent by the target address.\n     */\n    function approveToken(address tokenAddress, address targetAddress, uint256 amount) public onlyOperator {\n        IERC20(tokenAddress).safeApprove(targetAddress, 0);\n        if (amount > 0) {\n            IERC20(tokenAddress).safeApprove(targetAddress, amount);\n        }\n        emit Approved(tokenAddress, targetAddress, amount);\n    }\n\n    /**\n     * @notice Performs a generic transaction on the Account contract.\n     * @param target The address for the target contract.\n     * @param value The value of the transaction.\n     * @param data The data of the transaction.\n     */\n    function invoke(address target, uint256 value, bytes memory data) public onlyOperator returns (bytes memory result) {\n        bool success;\n        (success, result) = target.call{value: value}(data);\n        if (!success) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n        emit Invoked(target, value, data);\n    }\n}\n\n// \n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n *\n * Credit: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/upgradeability/Proxy.sol\n */\nabstract contract Proxy {\n\n  /**\n   * @dev Receive function.\n   * Implemented entirely in `_fallback`.\n   */\n  receive () payable external {\n    _fallback();\n  }\n\n  /**\n   * @dev Fallback function.\n   * Implemented entirely in `_fallback`.\n   */\n  fallback () payable external {\n    _fallback();\n  }\n\n  /**\n   * @return The Address of the implementation.\n   */\n  function _implementation() internal virtual view returns (address);\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   */\n  function _delegate(address implementation) internal {\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize())\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize()) }\n      default { return(0, returndatasize()) }\n    }\n  }\n\n  /**\n   * @dev Function that is run as the first thing in the fallback function.\n   * Can be redefined in derived contracts to add functionality.\n   * Redefinitions must call super._willFallback().\n   */\n  function _willFallback() internal virtual {\n  }\n\n  /**\n   * @dev fallback implementation.\n   * Extracted to enable manual triggering.\n   */\n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n\n// \n/**\n * @title BaseUpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n *\n * Credit: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/upgradeability/BaseUpgradeabilityProxy.sol\n */\ncontract BaseUpgradeabilityProxy is Proxy {\n    /**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   */\n    event Upgraded(address indexed implementation);\n\n    /**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n   * validated in the constructor.\n   */\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n   * @dev Returns the current implementation.\n   * @return impl Address of the current implementation\n   */\n    function _implementation() internal override view returns (address impl) {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            impl := sload(slot)\n        }\n    }\n\n    /**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   */\n    function _setImplementation(address newImplementation) internal {\n        require(\n            Address.isContract(newImplementation),\n            \"Implementation not set\"\n        );\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n            sstore(slot, newImplementation)\n        }\n        emit Upgraded(newImplementation);\n    }\n}\n\n// \n/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n * Credit: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol\n */\ncontract AdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n  /**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   */\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  /**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n   * validated in the constructor.\n   */\n\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  /**\n   * Contract constructor.\n   * @param _logic address of the initial implementation.\n   * @param _admin Address of the proxy administrator.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _logic, address _admin) public payable {\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n    _setImplementation(_logic);\n    _setAdmin(_admin);\n  }\n\n  /**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * @return The address of the proxy admin.\n   */\n  function admin() external ifAdmin returns (address) {\n    return _admin();\n  }\n\n  /**\n   * @return The address of the implementation.\n   */\n  function implementation() external ifAdmin returns (address) {\n    return _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   */\n  function changeAdmin(address newAdmin) external ifAdmin {\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   */\n  function changeImplementation(address newImplementation) external ifAdmin {\n    _setImplementation(newImplementation);\n  }\n\n  /**\n   * @return adm The admin slot.\n   */\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   */\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n}\n\n// \n/**\n * @notice Factory of Account contracts.\n */\ncontract AccountFactory {\n\n    /**\n     * @dev A new Account contract is created.\n     */\n    event AccountCreated(address indexed userAddress, address indexed accountAddress);\n\n    address public governance;\n    address public accountBase;\n    mapping(address => address) public accounts;\n\n    /**\n     * @dev Constructor for Account Factory.\n     * @param _accountBase Base account implementation.\n     */\n    constructor(address _accountBase) public {\n        require(_accountBase != address(0x0), \"account base not set\");\n        governance = msg.sender;\n        accountBase = _accountBase;\n    }\n\n    /**\n     * @dev Updates the base account implementation. Base account must be set.\n     */\n    function setAccountBase(address _accountBase) public {\n        require(msg.sender == governance, \"not governance\");\n        require(_accountBase != address(0x0), \"account base not set\");\n\n        accountBase = _accountBase;\n    }\n\n    /**\n     * @dev Updates the govenance address. Governance can be empty address which means\n     * renouncing the governance.\n     */\n    function setGovernance(address _governance) public {\n        require(msg.sender == governance, \"not governance\");\n        governance = _governance;\n    }\n\n    /**\n     * @dev Creates a new Account contract for the caller.\n     * Users can create multiple accounts by invoking this method multiple times. However,\n     * only the latest one is actively tracked and used by the platform.\n     * @param _initialAdmins The list of addresses that are granted the admin role.\n     */\n    function createAccount(address[] memory _initialAdmins) public returns (Account) {\n        AdminUpgradeabilityProxy proxy = new AdminUpgradeabilityProxy(accountBase, msg.sender);\n        Account account = Account(address(proxy));\n        account.initialize(msg.sender, _initialAdmins);\n        accounts[msg.sender] = address(account);\n\n        emit AccountCreated(msg.sender, address(account));\n\n        return account;\n    }\n}\n\n// \n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// \n/**\n * @notice Interface for ERC20 token which supports minting new tokens.\n */\ninterface IERC20Mintable is IERC20 {\n    \n    function mint(address _user, uint256 _amount) external;\n\n}\n\n// \n/**\n * @notice Interface for ERC20 token which supports mint and burn.\n */\ninterface IERC20MintableBurnable is IERC20Mintable {\n    \n    function burn(address _user, uint256 _amount) external;\n}\n\n// \n/**\n * @notice ACoconut swap.\n */\ncontract ACoconutSwap is Initializable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /**\n     * @dev Token swapped between two underlying tokens.\n     */\n    event TokenSwapped(address indexed buyer, address indexed tokenSold, address indexed tokenBought, uint256 amountSold, uint256 amountBought);\n    /**\n     * @dev New pool token is minted.\n     */\n    event Minted(address indexed provider, uint256 mintAmount, uint256[] amounts, uint256 feeAmount);\n    /**\n     * @dev Pool token is redeemed.\n     */\n    event Redeemed(address indexed provider, uint256 redeemAmount, uint256[] amounts, uint256 feeAmount);\n    /**\n     * @dev Fee is collected.\n     */\n    event FeeCollected(address indexed feeRecipient, uint256 feeAmount);\n\n    uint256 public constant feeDenominator = 10 ** 10;\n    address[] public tokens;\n    uint256[] public precisions; // 10 ** (18 - token decimals)\n    uint256[] public balances; // Converted to 10 ** 18\n    uint256 public mintFee; // Mint fee * 10**10\n    uint256 public swapFee; // Swap fee * 10**10\n    uint256 public redeemFee; // Redeem fee * 10**10\n    address public feeRecipient;\n    address public poolToken;\n    uint256 public totalSupply; // The total amount of pool token minted by the swap.\n                                // It might be different from the pool token supply as the pool token can have multiple minters.\n\n    address public governance;\n    mapping(address => bool) public admins;\n    bool public paused;\n\n    uint256 public initialA;\n\n    /**\n     * @dev Initialize the ACoconut Swap.\n     */\n    function initialize(address[] memory _tokens, uint256[] memory _precisions, uint256[] memory _fees,\n        address _poolToken, uint256 _A) public initializer {\n        require(_tokens.length == _precisions.length, \"input mismatch\");\n        require(_fees.length == 3, \"no fees\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            require(_tokens[i] != address(0x0), \"token not set\");\n            require(_precisions[i] != 0, \"precision not set\");\n            balances.push(0);\n        }\n        require(_poolToken != address(0x0), \"pool token not set\");\n\n        governance = msg.sender;\n        feeRecipient = msg.sender;\n        tokens = _tokens;\n        precisions = _precisions;\n        mintFee = _fees[0];\n        swapFee = _fees[1];\n        redeemFee = _fees[2];\n        poolToken = _poolToken;\n\n        initialA = _A;\n\n        // The swap must start with paused state!\n        paused = true;\n    }\n\n    /**\n     * @dev Returns the current value of A. This method might be updated in the future.\n     */\n    function getA() public view returns (uint256) {\n        return initialA;\n    }\n\n    /**\n     * @dev Computes D given token balances.\n     * @param _balances Normalized balance of each token.\n     * @param _A Amplification coefficient from getA()\n     */\n    function _getD(uint256[] memory _balances, uint256 _A) internal pure returns (uint256) {\n        uint256 sum = 0;\n        uint256 i = 0;\n        uint256 Ann = _A;\n        for (i = 0; i < _balances.length; i++) {\n            sum = sum.add(_balances[i]);\n            Ann = Ann.mul(_balances.length);\n        }\n        if (sum == 0)   return 0;\n\n        uint256 prevD = 0;\n        uint256 D = sum;\n        for (i = 0; i < 255; i++) {\n            uint256 pD = D;\n            for (uint256 j = 0; j < _balances.length; j++) {\n                // pD = pD * D / (_x * balance.length)\n                pD = pD.mul(D).div(_balances[j].mul(_balances.length));\n            }\n            prevD = D;\n            // D = (Ann * sum + pD * balance.length) * D / ((Ann - 1) * D + (balance.length + 1) * pD)\n            D = Ann.mul(sum).add(pD.mul(_balances.length)).mul(D).div(Ann.sub(1).mul(D).add(_balances.length.add(1).mul(pD)));\n            if (D > prevD) {\n                if (D - prevD <= 1) break;\n            } else {\n                if (prevD - D <= 1) break;\n            }\n        }\n\n        return D;\n    }\n\n    /**\n     * @dev Computes token balance given D.\n     * @param _balances Converted balance of each token except token with index _j.\n     * @param _j Index of the token to calculate balance.\n     * @param _D The target D value.\n     * @param _A Amplification coeffient.\n     * @return Converted balance of the token with index _j.\n     */\n    function _getY(uint256[] memory _balances, uint256 _j, uint256 _D, uint256 _A) internal pure returns (uint256) {\n        uint256 c = _D;\n        uint256 S_ = 0;\n        uint256 Ann = _A;\n        uint256 i = 0;\n        for (i = 0; i < _balances.length; i++) {\n            Ann = Ann.mul(_balances.length);\n            if (i == _j) continue;\n            S_ = S_.add(_balances[i]);\n            // c = c * D / (_x * N)\n            c = c.mul(_D).div(_balances[i].mul(_balances.length));\n        }\n        // c = c * D / (Ann * N)\n        c = c.mul(_D).div(Ann.mul(_balances.length));\n        // b = S_ + D / Ann\n        uint256 b = S_.add(_D.div(Ann));\n        uint256 prevY = 0;\n        uint256 y = _D;\n\n        // 255 since the result is 256 digits\n        for (i = 0; i < 255; i++) {\n            prevY = y;\n            // y = (y * y + c) / (2 * y + b - D)\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(_D));\n            if (y > prevY) {\n                if (y - prevY <= 1) break;\n            } else {\n                if (prevY - y <= 1) break;\n            }\n        }\n\n        return y;\n    }\n\n    /**\n     * @dev Compute the amount of pool token that can be minted.\n     * @param _amounts Unconverted token balances.\n     * @return The amount of pool token minted.\n     */\n    function getMintAmount(uint256[] calldata _amounts) external view returns (uint256, uint256) {\n        uint256[] memory _balances = balances;\n        require(_amounts.length == _balances.length, \"invalid amount\");\n        \n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n        uint256 i = 0;\n        for (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0)   continue;\n            // balance = balance + amount * precision\n            _balances[i] = _balances[i].add(_amounts[i].mul(precisions[i]));\n        }\n        uint256 newD = _getD(_balances, A);\n        // newD should be bigger than or equal to oldD\n        uint256 mintAmount = newD.sub(oldD);\n        uint256 feeAmount = 0;\n\n        if (mintFee > 0) {\n            feeAmount = mintAmount.mul(mintFee).div(feeDenominator);\n            mintAmount = mintAmount.sub(feeAmount);\n        }\n\n        return (mintAmount, feeAmount);\n    }\n\n    /**\n     * @dev Mints new pool token.\n     * @param _amounts Unconverted token balances used to mint pool token.\n     * @param _minMintAmount Minimum amount of pool token to mint.\n     */\n    function mint(uint256[] calldata _amounts, uint256 _minMintAmount) external nonReentrant {\n        uint256[] memory _balances = balances;\n        // If swap is paused, only admins can mint.\n        require(!paused || admins[msg.sender], \"paused\");\n        require(_balances.length == _amounts.length, \"invalid amounts\");\n\n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n        uint256 i = 0;\n        for (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0) {\n                // Initial deposit requires all tokens provided!\n                require(oldD > 0, \"zero amount\");\n                continue;\n            }\n            _balances[i] = _balances[i].add(_amounts[i].mul(precisions[i]));\n        }\n        uint256 newD = _getD(_balances, A);\n        // newD should be bigger than or equal to oldD\n        uint256 mintAmount = newD.sub(oldD);\n\n        uint256 fee = mintFee;\n        uint256 feeAmount;\n        if (fee > 0) {\n            feeAmount = mintAmount.mul(fee).div(feeDenominator);\n            mintAmount = mintAmount.sub(feeAmount);\n        }\n        require(mintAmount >= _minMintAmount, \"fewer than expected\");\n\n        // Transfer tokens into the swap\n        for (i = 0; i < _amounts.length; i++) {\n            if (_amounts[i] == 0)    continue;\n            // Update the balance in storage\n            balances[i] = _balances[i];\n            IERC20(tokens[i]).safeTransferFrom(msg.sender, address(this), _amounts[i]);\n        }\n        totalSupply = newD;\n        IERC20MintableBurnable(poolToken).mint(feeRecipient, feeAmount);\n        IERC20MintableBurnable(poolToken).mint(msg.sender, mintAmount);\n\n        emit Minted(msg.sender, mintAmount, _amounts, feeAmount);\n    }\n\n    /**\n     * @dev Computes the output amount after the swap.\n     * @param _i Token index to swap in.\n     * @param _j Token index to swap out.\n     * @param _dx Unconverted amount of token _i to swap in.\n     * @return Unconverted amount of token _j to swap out.\n     */\n    function getSwapAmount(uint256 _i, uint256 _j, uint256 _dx) external view returns (uint256) {\n        uint256[] memory _balances = balances;\n        require(_i != _j, \"same token\");\n        require(_i < _balances.length, \"invalid in\");\n        require(_j < _balances.length, \"invalid out\");\n        require(_dx > 0, \"invalid amount\");\n\n        uint256 A = getA();\n        uint256 D = totalSupply;\n        // balance[i] = balance[i] + dx * precisions[i]\n        _balances[_i] = _balances[_i].add(_dx.mul(precisions[_i]));\n        uint256 y = _getY(_balances, _j, D, A);\n        // dy = (balance[j] - y - 1) / precisions[j] in case there was rounding errors\n        uint256 dy = _balances[_j].sub(y).sub(1).div(precisions[_j]);\n\n        if (swapFee > 0) {\n            dy = dy.sub(dy.mul(swapFee).div(feeDenominator));\n        }\n\n        return dy;\n    }\n\n    /**\n     * @dev Exchange between two underlying tokens.\n     * @param _i Token index to swap in.\n     * @param _j Token index to swap out.\n     * @param _dx Unconverted amount of token _i to swap in.\n     * @param _minDy Minimum token _j to swap out in converted balance.\n     */\n    function swap(uint256 _i, uint256 _j, uint256 _dx, uint256 _minDy) external nonReentrant {\n        uint256[] memory _balances = balances;\n        // If swap is paused, only admins can swap.\n        require(!paused || admins[msg.sender], \"paused\");\n        require(_i != _j, \"same token\");\n        require(_i < _balances.length, \"invalid in\");\n        require(_j < _balances.length, \"invalid out\");\n        require(_dx > 0, \"invalid amount\");\n\n        uint256 A = getA();\n        uint256 D = totalSupply;\n        // balance[i] = balance[i] + dx * precisions[i]\n        _balances[_i] = _balances[_i].add(_dx.mul(precisions[_i]));\n        uint256 y = _getY(_balances, _j, D, A);\n        // dy = (balance[j] - y - 1) / precisions[j] in case there was rounding errors\n        uint256 dy = _balances[_j].sub(y).sub(1).div(precisions[_j]);\n        // Update token balance in storage\n        balances[_j] = y;\n        balances[_i] = _balances[_i];\n\n        uint256 fee = swapFee;\n        if (fee > 0) {\n            dy = dy.sub(dy.mul(fee).div(feeDenominator));\n        }\n        require(dy >= _minDy, \"fewer than expected\");\n\n        IERC20(tokens[_i]).safeTransferFrom(msg.sender, address(this), _dx);\n        // Important: When swap fee > 0, the swap fee is charged on the output token.\n        // Therefore, balances[j] < tokens[j].balanceOf(this)\n        // Since balances[j] is used to compute D, D is unchanged.\n        // collectFees() is used to convert the difference between balances[j] and tokens[j].balanceOf(this)\n        // into pool token as fees!\n        IERC20(tokens[_j]).safeTransfer(msg.sender, dy);\n\n        emit TokenSwapped(msg.sender, tokens[_i], tokens[_j], _dx, dy);\n    }\n\n    /**\n     * @dev Computes the amounts of underlying tokens when redeeming pool token.\n     * @param _amount Amount of pool tokens to redeem.\n     * @return Amounts of underlying tokens redeemed.\n     */\n    function getRedeemProportionAmount(uint256 _amount) external view returns (uint256[] memory, uint256) {\n        uint256[] memory _balances = balances;\n        require(_amount > 0, \"zero amount\");\n\n        uint256 D = totalSupply;\n        uint256[] memory amounts = new uint256[](_balances.length);\n        uint256 feeAmount = 0;\n        if (redeemFee > 0) {\n            feeAmount = _amount.mul(redeemFee).div(feeDenominator);\n            // Redemption fee is charged with pool token before redemption.\n            _amount = _amount.sub(feeAmount);\n        }\n\n        for (uint256 i = 0; i < _balances.length; i++) {\n            // We might choose to use poolToken.totalSupply to compute the amount, but decide to use\n            // D in case we have multiple minters on the pool token.\n            amounts[i] = _balances[i].mul(_amount).div(D).div(precisions[i]);\n        }\n\n        return (amounts, feeAmount);\n    }\n\n    /**\n     * @dev Redeems pool token to underlying tokens proportionally.\n     * @param _amount Amount of pool token to redeem.\n     * @param _minRedeemAmounts Minimum amount of underlying tokens to get.\n     */\n    function redeemProportion(uint256 _amount, uint256[] calldata _minRedeemAmounts) external nonReentrant {\n        uint256[] memory _balances = balances;\n        // If swap is paused, only admins can redeem.\n        require(!paused || admins[msg.sender], \"paused\");\n        require(_amount > 0, \"zero amount\");\n        require(_balances.length == _minRedeemAmounts.length, \"invalid mins\");\n\n        uint256 D = totalSupply;\n        uint256[] memory amounts = new uint256[](_balances.length);\n        uint256 fee = redeemFee;\n        uint256 feeAmount;\n        if (fee > 0) {\n            feeAmount = _amount.mul(fee).div(feeDenominator);\n            // Redemption fee is paid with pool token\n            // No conversion is needed as the pool token has 18 decimals\n            IERC20(poolToken).safeTransferFrom(msg.sender, feeRecipient, feeAmount);\n            _amount = _amount.sub(feeAmount);\n        }\n\n        for (uint256 i = 0; i < _balances.length; i++) {\n            // We might choose to use poolToken.totalSupply to compute the amount, but decide to use\n            // D in case we have multiple minters on the pool token.\n            uint256 tokenAmount = _balances[i].mul(_amount).div(D);\n            // Important: Underlying tokens must convert back to original decimals!\n            amounts[i] = tokenAmount.div(precisions[i]);\n            require(amounts[i] >= _minRedeemAmounts[i], \"fewer than expected\");\n            // Updates the balance in storage\n            balances[i] = _balances[i].sub(tokenAmount);\n            IERC20(tokens[i]).safeTransfer(msg.sender, amounts[i]);\n        }\n\n        totalSupply = D.sub(_amount);\n        // After reducing the redeem fee, the remaining pool tokens are burned!\n        IERC20MintableBurnable(poolToken).burn(msg.sender, _amount);\n\n        emit Redeemed(msg.sender, _amount.add(feeAmount), amounts, feeAmount);\n    }\n\n    /**\n     * @dev Computes the amount when redeeming pool token to one specific underlying token.\n     * @param _amount Amount of pool token to redeem.\n     * @param _i Index of the underlying token to redeem to.\n     * @return Amount of underlying token that can be redeem to.\n     */\n    function getRedeemSingleAmount(uint256 _amount, uint256 _i) external view returns (uint256, uint256) {\n        uint256[] memory _balances = balances;\n        require(_amount > 0, \"zero amount\");\n        require(_i < _balances.length, \"invalid token\");\n\n        uint256 A = getA();\n        uint256 D = totalSupply;\n        uint256 feeAmount = 0;\n        if (redeemFee > 0) {\n            feeAmount = _amount.mul(redeemFee).div(feeDenominator);\n            // Redemption fee is charged with pool token before redemption.\n            _amount = _amount.sub(feeAmount);\n        }\n        // The pool token amount becomes D - _amount\n        uint256 y = _getY(_balances, _i, D.sub(_amount), A);\n        uint256 dy = _balances[_i].sub(y).div(precisions[_i]);\n\n        return (dy, feeAmount);\n    }\n\n    /**\n     * @dev Redeem pool token to one specific underlying token.\n     * @param _amount Amount of pool token to redeem.\n     * @param _i Index of the token to redeem to.\n     * @param _minRedeemAmount Minimum amount of the underlying token to redeem to.\n     */\n    function redeemSingle(uint256 _amount, uint256 _i, uint256 _minRedeemAmount) external nonReentrant {\n        uint256[] memory _balances = balances;\n        // If swap is paused, only admins can redeem.\n        require(!paused || admins[msg.sender], \"paused\");\n        require(_amount > 0, \"zero amount\");\n        require(_i < _balances.length, \"invalid token\");\n\n        uint256 A = getA();\n        uint256 D = totalSupply;\n        uint256 fee = redeemFee;\n        uint256 feeAmount = 0;\n        if (fee > 0) {\n            // Redemption fee is charged with pool token before redemption.\n            feeAmount = _amount.mul(fee).div(feeDenominator);\n            // No conversion is needed as the pool token has 18 decimals\n            IERC20(poolToken).safeTransferFrom(msg.sender, feeRecipient, feeAmount);\n            _amount = _amount.sub(feeAmount);\n        }\n\n        // y is converted(18 decimals)\n        uint256 y = _getY(_balances, _i, D.sub(_amount), A);\n        // dy is not converted\n        uint256 dy = _balances[_i].sub(y).div(precisions[_i]);\n        require(dy >= _minRedeemAmount, \"fewer than expected\");\n        // Updates token balance in storage\n        balances[_i] = y;\n        uint256[] memory amounts = new uint256[](_balances.length);\n        amounts[_i] = dy;\n        IERC20(tokens[_i]).safeTransfer(msg.sender, dy);\n\n        totalSupply = D.sub(_amount);\n        IERC20MintableBurnable(poolToken).burn(msg.sender, _amount);\n\n        emit Redeemed(msg.sender, _amount.add(feeAmount), amounts, feeAmount);\n    }\n\n    /**\n     * @dev Compute the amount of pool token that needs to be redeemed.\n     * @param _amounts Unconverted token balances.\n     * @return The amount of pool token that needs to be redeemed.\n     */\n    function getRedeemMultiAmount(uint256[] calldata _amounts) external view returns (uint256, uint256) {\n        uint256[] memory _balances = balances;\n        require(_amounts.length == balances.length, \"length not match\");\n        \n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n        for (uint256 i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0)   continue;\n            // balance = balance + amount * precision\n            _balances[i] = _balances[i].sub(_amounts[i].mul(precisions[i]));\n        }\n        uint256 newD = _getD(_balances, A);\n\n        // newD should be smaller than or equal to oldD\n        uint256 redeemAmount = oldD.sub(newD);\n        uint256 feeAmount = 0;\n        if (redeemFee > 0) {\n            redeemAmount = redeemAmount.mul(feeDenominator).div(feeDenominator.sub(redeemFee));\n            feeAmount = redeemAmount.sub(oldD.sub(newD));\n        }\n\n        return (redeemAmount, feeAmount);\n    }\n\n    /**\n     * @dev Redeems underlying tokens.\n     * @param _amounts Amounts of underlying tokens to redeem to.\n     * @param _maxRedeemAmount Maximum of pool token to redeem.\n     */\n    function redeemMulti(uint256[] calldata _amounts, uint256 _maxRedeemAmount) external nonReentrant {\n        uint256[] memory _balances = balances;\n        require(_amounts.length == balances.length, \"length not match\");\n        // If swap is paused, only admins can redeem.\n        require(!paused || admins[msg.sender], \"paused\");\n        \n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n        uint256 i = 0;\n        for (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0)   continue;\n            // balance = balance + amount * precision\n            _balances[i] = _balances[i].sub(_amounts[i].mul(precisions[i]));\n        }\n        uint256 newD = _getD(_balances, A);\n\n        // newD should be smaller than or equal to oldD\n        uint256 redeemAmount = oldD.sub(newD);\n        uint256 fee = redeemFee;\n        uint256 feeAmount = 0;\n        if (fee > 0) {\n            redeemAmount = redeemAmount.mul(feeDenominator).div(feeDenominator.sub(fee));\n            feeAmount = redeemAmount.sub(oldD.sub(newD));\n            // No conversion is needed as the pool token has 18 decimals\n            IERC20(poolToken).safeTransferFrom(msg.sender, feeRecipient, feeAmount);\n        }\n        require(redeemAmount <= _maxRedeemAmount, \"more than expected\");\n\n        // Updates token balances in storage.\n        balances = _balances;\n        uint256 burnAmount = redeemAmount.sub(feeAmount);\n        totalSupply = oldD.sub(burnAmount);\n        IERC20MintableBurnable(poolToken).burn(msg.sender, burnAmount);\n        for (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0)   continue;\n            IERC20(tokens[i]).safeTransfer(msg.sender, _amounts[i]);\n        }\n\n        emit Redeemed(msg.sender, redeemAmount, _amounts, feeAmount);\n    }\n\n    /**\n     * @dev Return the amount of fee that's not collected.\n     */\n    function getPendingFeeAmount() external view returns (uint256) {\n        uint256[] memory _balances = balances;\n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n\n        for (uint256 i = 0; i < _balances.length; i++) {\n            _balances[i] = IERC20(tokens[i]).balanceOf(address(this)).mul(precisions[i]);\n        }\n        uint256 newD = _getD(_balances, A);\n\n        return newD.sub(oldD);\n    }\n\n    /**\n     * @dev Collect fee based on the token balance difference.\n     */\n    function collectFee() external returns (uint256) {\n        require(admins[msg.sender], \"not admin\");\n        uint256[] memory _balances = balances;\n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n\n        for (uint256 i = 0; i < _balances.length; i++) {\n            _balances[i] = IERC20(tokens[i]).balanceOf(address(this)).mul(precisions[i]);\n        }\n        uint256 newD = _getD(_balances, A);\n        uint256 feeAmount = newD.sub(oldD);\n        if (feeAmount == 0) return 0;\n\n        balances = _balances;\n        totalSupply = newD;\n        address _feeRecipient = feeRecipient;\n        IERC20MintableBurnable(poolToken).mint(_feeRecipient, feeAmount);\n\n        emit FeeCollected(_feeRecipient, feeAmount);\n\n        return feeAmount;\n    }\n\n    /**\n     * @dev Updates the govenance address.\n     */\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"not governance\");\n        governance = _governance;\n    }\n\n    /**\n     * @dev Updates the mint fee.\n     */\n    function setMintFee(uint256 _mintFee) external {\n        require(msg.sender == governance, \"not governance\");\n        mintFee = _mintFee;\n    }\n\n    /**\n     * @dev Updates the swap fee.\n     */\n    function setSwapFee(uint256 _swapFee) external {\n        require(msg.sender == governance, \"not governance\");\n        swapFee = _swapFee;\n    }\n\n    /**\n     * @dev Updates the redeem fee.\n     */\n    function setRedeemFee(uint256 _redeemFee) external {\n        require(msg.sender == governance, \"not governance\");\n        redeemFee = _redeemFee;\n    }\n\n    /**\n     * @dev Updates the recipient of mint/swap/redeem fees.\n     */\n    function setFeeRecipient(address _feeRecipient) external {\n        require(msg.sender == governance, \"not governance\");\n        require(_feeRecipient != address(0x0), \"fee recipient not set\");\n        feeRecipient = _feeRecipient;\n    }\n\n    /**\n     * @dev Updates the pool token.\n     */\n    function setPoolToken(address _poolToken) external {\n        require(msg.sender == governance, \"not governance\");\n        require(_poolToken != address(0x0), \"pool token not set\");\n        poolToken = _poolToken;\n    }\n\n    /**\n     * @dev Pause mint/swap/redeem actions. Can unpause later.\n     */\n    function pause() external {\n        require(msg.sender == governance, \"not governance\");\n        require(!paused, \"paused\");\n\n        paused = true;\n    }\n\n    /**\n     * @dev Unpause mint/swap/redeem actions.\n     */\n    function unpause() external {\n        require(msg.sender == governance, \"not governance\");\n        require(paused, \"not paused\");\n\n        paused = false;\n    }\n\n    /**\n     * @dev Updates the admin role for the address.\n     * @param _account Address to update admin role.\n     * @param _allowed Whether the address is granted the admin role.\n     */\n    function setAdmin(address _account, bool _allowed) external {\n        require(msg.sender == governance, \"not governance\");\n        require(_account != address(0x0), \"account not set\");\n\n        admins[_account] = _allowed;\n    }\n}\n\n// \n/**\n * @dev Application to help interact with ACoconutSwap with account.\n */\ncontract SwapApplication is Initializable {\n    using SafeMath for uint256;\n\n    address public governance;\n    ACoconutSwap public swap;\n\n    /**\n     * @dev Initializes swap application.\n     */\n    function initialize(address _swap) public initializer {\n        require(_swap != address(0x0), \"swap not set\");\n        \n        governance = msg.sender;\n        swap = ACoconutSwap(_swap);\n    }\n\n    /**\n     * @dev Updates the govenance address.\n     */\n    function setGovernance(address _governance) public {\n        require(msg.sender == governance, \"not governance\");\n        governance = _governance;\n    }\n\n    /**\n     * @dev Updates the swap address.\n     */\n    function setSwap(address _swap) public {\n        require(msg.sender == governance, \"not governance\");\n        require(_swap != address(0x0), \"swap not set\");\n\n        swap = ACoconutSwap(_swap);\n    }\n\n    modifier validAccount(address _account) {\n        Account account = Account(payable(_account));\n        require(account.owner() == msg.sender, \"not owner\");\n        require(account.isOperator(address(this)), \"not operator\");\n        _;\n    }\n\n    /**\n     * @dev Mints new pool token.\n     * @param _account The account address used to mint.\n     * @param _amounts Unconverted token balances used to mint pool token.\n     * @param _minMintAmount Minimum amount of pool token to mint.\n     */\n    function mintToken(address _account, uint256[] memory _amounts, uint256 _minMintAmount) public validAccount(_account) {\n        Account account = Account(payable(_account));\n        // We don't perform input validations here as they are done in ACoconutSwap.\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            account.approveToken(swap.tokens(i), address(swap), _amounts[i]);\n        }\n\n        bytes memory methodData = abi.encodeWithSignature(\"mint(uint256[],uint256)\", _amounts, _minMintAmount);\n        account.invoke(address(swap), 0, methodData);\n    }\n\n    /**\n     * @dev Exchange between two underlying tokens.\n     * @param _account The account address used to swap.\n     * @param _i Token index to swap in.\n     * @param _j Token index to swap out.\n     * @param _dx Unconverted amount of token _i to swap in.\n     * @param _minDy Minimum token _j to swap out in converted balance.\n     */\n    function swapToken(address _account, uint256 _i, uint256 _j, uint256 _dx, uint256 _minDy) public validAccount(_account) {\n        Account account = Account(payable(_account));\n        // We don't perform input validations here as they are done in ACoconutSwap.\n        account.approveToken(swap.tokens(_i), address(swap), _dx);\n\n        bytes memory methodData = abi.encodeWithSignature(\"swap(uint256,uint256,uint256,uint256)\", _i, _j, _dx, _minDy);\n        account.invoke(address(swap), 0, methodData);\n    }\n\n    /**\n     * @dev Redeems pool token to underlying tokens proportionally.\n     * @param _account The account address used to redeem.\n     * @param _amount Amount of pool token to redeem.\n     * @param _minRedeemAmounts Minimum amount of underlying tokens to get.\n     */\n    function redeemProportion(address _account, uint256 _amount, uint256[] memory _minRedeemAmounts) public validAccount(_account) {\n        Account account = Account(payable(_account));\n        // We don't perform input validations here as they are done in ACoconutSwap.\n        account.approveToken(swap.poolToken(), address(swap), _amount);\n\n        bytes memory methodData = abi.encodeWithSignature(\"redeemProportion(uint256,uint256[])\", _amount, _minRedeemAmounts);\n        account.invoke(address(swap), 0, methodData);\n    }\n\n    /**\n     * @dev Redeem pool token to one specific underlying token.\n     * @param _account The account address used to redeem.\n     * @param _amount Amount of pool token to redeem.\n     * @param _i Index of the token to redeem to.\n     * @param _minRedeemAmount Minimum amount of the underlying token to redeem to.\n     */\n    function redeemSingle(address _account, uint256 _amount, uint256 _i, uint256 _minRedeemAmount) public validAccount(_account) {\n        Account account = Account(payable(_account));\n        // We don't perform input validations here as they are done in ACoconutSwap.\n        account.approveToken(swap.poolToken(), address(swap), _amount);\n\n        bytes memory methodData = abi.encodeWithSignature(\"redeemSingle(uint256,uint256,uint256)\", _amount, _i, _minRedeemAmount);\n        account.invoke(address(swap), 0, methodData);\n    }\n\n    /**\n     * @dev Redeems underlying tokens.\n     * @param _account The account address used to redeem.\n     * @param _amounts Amounts of underlying tokens to redeem to.\n     * @param _maxRedeemAmount Maximum of pool token to redeem.\n     */\n    function redeemMulti(address _account, uint256[] memory _amounts, uint256 _maxRedeemAmount) public validAccount(_account) {\n        Account account = Account(payable(_account));\n        // We don't perform input validations here as they are done in ACoconutSwap.\n        // The amount of acBTC to burn is unknown yet. Simply set the allowance to the maximum redeem amount.\n        account.approveToken(swap.poolToken(), address(swap), _maxRedeemAmount);\n\n        bytes memory methodData = abi.encodeWithSignature(\"redeemMulti(uint256[],uint256)\", _amounts, _maxRedeemAmount);\n        account.invoke(address(swap), 0, methodData);\n\n        // Clears the allowance afterward\n        account.approveToken(swap.poolToken(), address(this), 0);\n    }\n}","ABI":"[{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minMintAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxRedeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_minRedeemAmounts\",\"type\":\"uint256[]\"}],\"name\":\"redeemProportion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRedeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"setSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"contract ACoconutSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDy\",\"type\":\"uint256\"}],\"name\":\"swapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwapApplication","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"250","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}