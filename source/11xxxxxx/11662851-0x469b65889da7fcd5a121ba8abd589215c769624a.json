{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\ncontract BIOPToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    address public binaryOptions = 0x0000000000000000000000000000000000000000;\r\n    address public gov;\r\n    address public owner;\r\n    uint256 public earlyClaimsAvailable = 450000000000000000000000000000;\r\n    uint256 public totalClaimsAvailable = 300000000000000000000000000000;\r\n    bool public earlyClaims = true;\r\n    bool public binaryOptionsSet = false;\r\n\r\n    constructor(string memory name_, string memory symbol_) public ERC20(name_, symbol_) {\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyBinaryOptions() {\r\n        require(binaryOptions == msg.sender, \"Ownable: caller is not the Binary Options Contract\");\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(binaryOptions == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function updateEarlyClaim(uint256 amount) external onlyBinaryOptions {\r\n        require(totalClaimsAvailable.sub(amount) >= 0, \"insufficent claims available\");\r\n        require (earlyClaims, \"Launch has closed\");\r\n        \r\n        earlyClaimsAvailable = earlyClaimsAvailable.sub(amount);\r\n        _mint(tx.origin, amount);\r\n        if (earlyClaimsAvailable <= 0) {\r\n            earlyClaims = false;\r\n        }\r\n    }\r\n\r\n     function updateClaim( uint256 amount) external onlyBinaryOptions {\r\n        require(totalClaimsAvailable.sub(amount) >= 0, \"insufficent claims available\");\r\n        totalClaimsAvailable.sub(amount);\r\n        _mint(tx.origin, amount);\r\n    }\r\n\r\n    function setupBinaryOptions(address payable options_) external {\r\n        require(binaryOptionsSet != true, \"binary options is already set\");\r\n        binaryOptions = options_;\r\n    }\r\n\r\n    function setupGovernance(address payable gov_) external onlyOwner {\r\n        _mint(owner, 100000000000000000000000000000);\r\n        _mint(gov_, 450000000000000000000000000000);\r\n        owner = 0x0000000000000000000000000000000000000000;\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\ninterface IRC {\r\n    /**\r\n     * @notice Returns the rate to pay out for a given amount\r\n     * @param amount the bet amount to calc a payout for\r\n     * @param maxAvailable the total pooled ETH unlocked and available to bet\r\n     * @return profit total possible profit amount\r\n     */\r\n    function rate(uint256 amount, uint256 maxAvailable) external view returns (uint256);\r\n\r\n}\r\n\r\ncontract RateCalc is IRC {\r\n    using SafeMath for uint256;\r\n     /**\r\n     * @notice Calculates maximum option buyer profit\r\n     * @param amount Option amount\r\n     * @return profit total possible profit amount\r\n     */\r\n    function rate(uint256 amount, uint256 maxAvailable) external view override returns (uint256)  {\r\n        require(amount <= maxAvailable, \"greater then pool funds available\");\r\n        uint256 oneTenth = amount.div(10);\r\n        uint256 halfMax = maxAvailable.div(2);\r\n        if (amount > halfMax) {\r\n            return amount.mul(2).add(oneTenth).add(oneTenth);\r\n        } else {\r\n            if(oneTenth > 0) {\r\n                return amount.mul(2).sub(oneTenth);\r\n            } else {\r\n                uint256 oneThird = amount.div(4);\r\n                require(oneThird > 0, \"invalid bet amount\");\r\n                return amount.mul(2).sub(oneThird);\r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Binary Options Eth Pool\r\n * @author github.com/Shalquiana\r\n * @dev Pool ETH Tokens and use it for optionss\r\n * Biop\r\n */\r\ncontract BinaryOptions is ERC20 {\r\n    using SafeMath for uint256;\r\n    address payable devFund;\r\n    address payable owner;\r\n    address public biop;\r\n    address public rcAddress;//address of current rate calculators\r\n    mapping(address=>uint256) public nextWithdraw;\r\n    mapping(address=>bool) public enabledPairs;\r\n    uint256 public minTime;\r\n    uint256 public maxTime;\r\n    address public defaultPair;\r\n    uint256 public lockedAmount;\r\n    uint256 public exerciserFee = 50;//in tenth percent\r\n    uint256 public expirerFee = 50;//in tenth percent\r\n    uint256 public devFundBetFee = 2;//tenth of percent\r\n    uint256 public poolLockSeconds = 2 days;\r\n    uint256 public contractCreated;\r\n    uint256 public launchEnd;\r\n    bool public open = true;\r\n    Option[] public options;\r\n    \r\n    //reward amounts\r\n    uint256 aStakeReward = 120000000000000000000;\r\n    uint256 bStakeReward = 60000000000000000000;\r\n    uint256 betReward = 40000000000000000000;\r\n    uint256 exerciseReward = 2000000000000000000;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /* Types */\r\n    enum OptionType {Put, Call}\r\n    enum State {Active, Exercised, Expired}\r\n    struct Option {\r\n        State state;\r\n        address payable holder;\r\n        uint256 strikePrice;\r\n        uint256 purchaseValue;\r\n        uint256 lockedValue;//purchaseAmount+possible reward for correct bet\r\n        uint256 expiration;\r\n        OptionType optionType;\r\n        address priceProvider;\r\n    }\r\n\r\n    /* Events */\r\n     event Create(\r\n        uint256 indexed id,\r\n        address payable account,\r\n        uint256 strikePrice,\r\n        uint256 lockedValue,\r\n        OptionType direction\r\n    );\r\n    event Payout(uint256 poolLost, address winner);\r\n    event Exercise(uint256 indexed id);\r\n    event Expire(uint256 indexed id);\r\n\r\n\r\n    function getMaxAvailable() public view returns(uint256) {\r\n        uint256 balance = address(this).balance;\r\n        if (balance > lockedAmount) {\r\n            return balance.sub(lockedAmount);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_, address pp_, address biop_, address rateCalc_) public ERC20(name_, symbol_){\r\n        devFund = msg.sender;\r\n        owner = msg.sender;\r\n        biop = biop_;\r\n        rcAddress = rateCalc_;\r\n        lockedAmount = 0;\r\n        contractCreated = block.timestamp;\r\n        launchEnd = block.timestamp+28 days;\r\n        enabledPairs[pp_] = true; //default pair ETH/USD\r\n        defaultPair = pp_;\r\n        minTime = 900;//15 minutes\r\n        maxTime = 60 minutes;\r\n    }\r\n\r\n    /**\r\n     * @dev the default price provider. This is a convenience method\r\n     */\r\n    function defaultPriceProvider() public view returns (address) {\r\n        return defaultPair;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev add a price provider to the enabledPairs list\r\n     * @param newRC_ the address of the AggregatorV3Interface price provider contract address to add.\r\n     */\r\n    function setRateCalcAddress(address newRC_) external onlyOwner {\r\n        rcAddress = newRC_; \r\n    }\r\n\r\n    /**\r\n     * @dev add a price provider to the enabledPairs list\r\n     * @param newPP_ the address of the AggregatorV3Interface price provider contract address to add.\r\n     */\r\n    function addPP(address newPP_) external onlyOwner {\r\n        enabledPairs[newPP_] = true; \r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * @dev remove a price provider from the enabledPairs list\r\n     * @param oldPP_ the address of the AggregatorV3Interface price provider contract address to remove.\r\n     */\r\n    function removePP(address oldPP_) external onlyOwner {\r\n        enabledPairs[oldPP_] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev update the max time for option bets\r\n     * @param newMax_ the new maximum time (in seconds) an option may be created for (inclusive).\r\n     */\r\n    function setMaxTime(uint256 newMax_) external onlyOwner {\r\n        maxTime = newMax_;\r\n    }\r\n\r\n    /**\r\n     * @dev update the max time for option bets\r\n     * @param newMin_ the new minimum time (in seconds) an option may be created for (inclusive).\r\n     */\r\n    function setMinTime(uint256 newMin_) external onlyOwner {\r\n        minTime = newMin_;\r\n    }\r\n\r\n    /**\r\n     * @dev address of this contract, convenience method\r\n     */\r\n    function thisAddress() public view returns (address){\r\n        return address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev set the fee users can recieve for exercising other users options\r\n     * @param exerciserFee_ the new fee (in tenth percent) for exercising a options itm\r\n     */\r\n    function updateExerciserFee(uint256 exerciserFee_) external onlyOwner {\r\n        require(exerciserFee_ > 1 && exerciserFee_ < 500, \"invalid fee\");\r\n        exerciserFee = exerciserFee_;\r\n    }\r\n\r\n     /**\r\n     * @dev set the fee users can recieve for expiring other users options\r\n     * @param expirerFee_ the new fee (in tenth percent) for expiring a options\r\n     */\r\n    function updateExpirerFee(uint256 expirerFee_) external onlyOwner {\r\n        require(expirerFee_ > 1 && expirerFee_ < 50, \"invalid fee\");\r\n        expirerFee = expirerFee_;\r\n    }\r\n\r\n    /**\r\n     * @dev set the fee users pay to buy an option\r\n     * @param devFundBetFee_ the new fee (in tenth percent) to buy an option\r\n     */\r\n    function updateDevFundBetFee(uint256 devFundBetFee_) external onlyOwner {\r\n        require(devFundBetFee_ >= 0 && devFundBetFee_ < 50, \"invalid fee\");\r\n        devFundBetFee = devFundBetFee_;\r\n    }\r\n\r\n     /**\r\n     * @dev update the pool stake lock up time.\r\n     * @param newLockSeconds_ the new lock time, in seconds\r\n     */\r\n    function updatePoolLockSeconds(uint256 newLockSeconds_) external onlyOwner {\r\n        require(newLockSeconds_ >= 0 && newLockSeconds_ < 14 days, \"invalid fee\");\r\n        poolLockSeconds = newLockSeconds_;\r\n    }\r\n\r\n    /**\r\n     * @dev used to transfer ownership\r\n     * @param newOwner_ the address of governance contract which takes over control\r\n     */\r\n    function transferOwner(address payable newOwner_) external onlyOwner {\r\n        owner = newOwner_;\r\n    }\r\n    \r\n    /**\r\n     * @dev used to transfer devfund \r\n     * @param newDevFund the address of governance contract which takes over control\r\n     */\r\n    function transferDevFund(address payable newDevFund) external onlyOwner {\r\n        devFund = newDevFund;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev used to send this pool into EOL mode when a newer one is open\r\n     */\r\n    function closeStaking() external onlyOwner {\r\n        open = false;\r\n    }\r\n\r\n    /**\r\n     * @dev update the amount of early user governance tokens that have been assigned\r\n     * @param amount the amount assigned\r\n     */\r\n    function updateRewards(uint256 amount) internal {\r\n        BIOPToken b = BIOPToken(biop);\r\n        if (b.earlyClaims()) {\r\n            b.updateEarlyClaim(amount.mul(4));\r\n        } else if (b.totalClaimsAvailable() > 0){\r\n            b.updateClaim(amount);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev send ETH to the pool. Recieve pETH token representing your claim.\r\n     * If rewards are available recieve BIOP governance tokens as well.\r\n    */\r\n    function stake() external payable {\r\n        require(open == true, \"pool deposits has closed\");\r\n        require(msg.value >= 100, \"stake to small\");\r\n        if (block.timestamp < launchEnd) {\r\n            nextWithdraw[msg.sender] = block.timestamp + 14 days;\r\n            _mint(msg.sender, msg.value);\r\n        } else {\r\n            nextWithdraw[msg.sender] = block.timestamp + poolLockSeconds;\r\n            _mint(msg.sender, msg.value);\r\n        }\r\n\r\n        if (msg.value >= 2000000000000000000) {\r\n            updateRewards(aStakeReward);\r\n        } else {\r\n            updateRewards(bStakeReward);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev recieve ETH from the pool. \r\n     * If the current time is before your next available withdraw a 1% fee will be applied.\r\n     * @param amount The amount of pETH to send the pool.\r\n    */\r\n    function withdraw(uint256 amount) public {\r\n       require (balanceOf(msg.sender) >= amount, \"Insufficent Share Balance\");\r\n\r\n        uint256 valueToRecieve = amount.mul(address(this).balance).div(totalSupply());\r\n        _burn(msg.sender, amount);\r\n        if (block.timestamp <= nextWithdraw[msg.sender]) {\r\n            //early withdraw fee\r\n            uint256 penalty = valueToRecieve.div(100);\r\n            require(devFund.send(penalty), \"transfer failed\");\r\n            require(msg.sender.send(valueToRecieve.sub(penalty)), \"transfer failed\");\r\n        } else {\r\n            require(msg.sender.send(valueToRecieve), \"transfer failed\");\r\n        }\r\n    }\r\n\r\n     /**\r\n    @dev Open a new call or put options.\r\n    @param type_ type of option to buy\r\n    @param pp_ the address of the price provider to use (must be in the list of enabledPairs)\r\n    @param time_ the time until your options expiration (must be minTime < time_ > maxTime)\r\n    */\r\n    function bet(OptionType type_, address pp_, uint256 time_) external payable {\r\n        require(\r\n            type_ == OptionType.Call || type_ == OptionType.Put,\r\n            \"Wrong option type\"\r\n        );\r\n        require(\r\n            time_ >= minTime && time_ <= maxTime,\r\n            \"Invalid time\"\r\n        );\r\n        require(msg.value >= 100, \"bet to small\");\r\n        require(enabledPairs[pp_], \"Invalid  price provider\");\r\n        uint depositValue;\r\n        if (devFundBetFee > 0) {\r\n            uint256 fee = msg.value.div(devFundBetFee).div(100);\r\n            require(devFund.send(fee), \"devFund fee transfer failed\");\r\n            depositValue = msg.value.sub(fee);\r\n            \r\n        } else {\r\n            depositValue = msg.value;\r\n        }\r\n\r\n        RateCalc rc = RateCalc(rcAddress);\r\n        uint256 lockValue = getMaxAvailable();\r\n        lockValue = rc.rate(depositValue, lockValue.sub(depositValue));\r\n        \r\n\r\n\r\n         \r\n        AggregatorV3Interface priceProvider = AggregatorV3Interface(pp_);\r\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\r\n        uint256 optionID = options.length;\r\n        uint256 totalLock = lockValue.add(depositValue);\r\n        Option memory op = Option(\r\n            State.Active,\r\n            msg.sender,\r\n            uint256(latestPrice),\r\n            depositValue,\r\n            totalLock,//purchaseAmount+possible reward for correct bet\r\n            block.timestamp + time_,//all options 1hr to start\r\n            type_,\r\n            pp_\r\n        );\r\n        lock(totalLock);\r\n        options.push(op);\r\n        emit Create(optionID, msg.sender, uint256(latestPrice), totalLock, type_);\r\n        updateRewards(betReward);\r\n    }\r\n\r\n     /**\r\n     * @notice exercises a option\r\n     * @param optionID id of the option to exercise\r\n     */\r\n    function exercise(uint256 optionID)\r\n        external\r\n    {\r\n        Option memory option = options[optionID];\r\n        require(block.timestamp <= option.expiration, \"expiration date margin has passed\");\r\n        AggregatorV3Interface priceProvider = AggregatorV3Interface(option.priceProvider);\r\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\r\n        uint256 uLatestPrice = uint256(latestPrice);\r\n        if (option.optionType == OptionType.Call) {\r\n            require(uLatestPrice > option.strikePrice, \"price is to low\");\r\n        } else {\r\n            require(uLatestPrice < option.strikePrice, \"price is to high\");\r\n        }\r\n\r\n        //option expires ITM, we pay out\r\n        payout(option.lockedValue.sub(option.purchaseValue), msg.sender, option.holder);\r\n        \r\n        lockedAmount = lockedAmount.sub(option.lockedValue);\r\n        emit Exercise(optionID);\r\n        updateRewards(exerciseReward);\r\n    }\r\n\r\n     /**\r\n     * @notice expires a option\r\n     * @param optionID id of the option to expire\r\n     */\r\n    function expire(uint256 optionID)\r\n        external\r\n    {\r\n        Option memory option = options[optionID];\r\n        require(block.timestamp > option.expiration, \"expiration date has not passed\");\r\n        unlock(option.lockedValue.sub(option.purchaseValue), msg.sender, expirerFee);\r\n        emit Expire(optionID);\r\n        lockedAmount = lockedAmount.sub(option.lockedValue);\r\n\r\n        updateRewards(exerciseReward);\r\n    }\r\n\r\n    /**\r\n    @dev called by BinaryOptions contract to lock pool value coresponding to new binary options bought. \r\n    @param amount amount in ETH to lock from the pool total.\r\n    */\r\n    function lock(uint256 amount) internal {\r\n        lockedAmount = lockedAmount.add(amount);\r\n    }\r\n\r\n    /**\r\n    @dev called by BinaryOptions contract to unlock pool value coresponding to an option expiring otm. \r\n    @param amount amount in ETH to unlock\r\n    @param goodSamaritan the user paying to unlock these funds, they recieve a fee\r\n    */\r\n    function unlock(uint256 amount, address payable goodSamaritan, uint256 eFee) internal {\r\n        require(amount <= lockedAmount, \"insufficent locked pool balance to unlock\");\r\n        uint256 fee = amount.div(eFee).div(100);\r\n        if (fee > 0) {\r\n            require(goodSamaritan.send(fee), \"good samaritan transfer failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    @dev called by BinaryOptions contract to payout pool value coresponding to binary options expiring itm. \r\n    @param amount amount in BIOP to unlock\r\n    @param exerciser address calling the exercise/expire function, this may the winner or another user who then earns a fee.\r\n    @param winner address of the winner.\r\n    @notice exerciser fees are subject to change see updateFeePercent above.\r\n    */\r\n    function payout(uint256 amount, address payable exerciser, address payable winner) internal {\r\n        require(amount <= lockedAmount, \"insufficent pool balance available to payout\");\r\n        require(amount <= address(this).balance, \"insufficent balance in pool\");\r\n        if (exerciser != winner) {\r\n            //good samaratin fee\r\n            uint256 fee = amount.div(exerciserFee).div(100);\r\n            if (fee > 0) {\r\n                require(exerciser.send(fee), \"exerciser transfer failed\");\r\n                require(winner.send(amount.sub(fee)), \"winner transfer failed\");\r\n            }\r\n        } else {  \r\n            require(winner.send(amount), \"winner transfer failed\");\r\n        }\r\n        emit Payout(amount, winner);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"biop_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateCalc_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BinaryOptions.OptionType\",\"name\":\"direction\",\"type\":\"uint8\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Exercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Expire\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPP_\",\"type\":\"address\"}],\"name\":\"addPP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BinaryOptions.OptionType\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pp_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPriceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundBetFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exerciserFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"expire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"enum BinaryOptions.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"enum BinaryOptions.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLockSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldPP_\",\"type\":\"address\"}],\"name\":\"removePP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax_\",\"type\":\"uint256\"}],\"name\":\"setMaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin_\",\"type\":\"uint256\"}],\"name\":\"setMinTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRC_\",\"type\":\"address\"}],\"name\":\"setRateCalcAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevFund\",\"type\":\"address\"}],\"name\":\"transferDevFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFundBetFee_\",\"type\":\"uint256\"}],\"name\":\"updateDevFundBetFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exerciserFee_\",\"type\":\"uint256\"}],\"name\":\"updateExerciserFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirerFee_\",\"type\":\"uint256\"}],\"name\":\"updateExpirerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockSeconds_\",\"type\":\"uint256\"}],\"name\":\"updatePoolLockSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BinaryOptions","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000c3771668ac4d9c727f54dbde11ed94acadd5ff8600000000000000000000000079bc59b174d4579cf16734864522a58bd92eb504000000000000000000000000000000000000000000000000000000000000000b506f6f6c2053686172657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047045544800000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8598787fda06f075e740a5c453762141f6f8ac6e5ad928a8bac428d92d7b427f"}]}