{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\ncontract Lottery {\r\n\r\n    address public manager;\r\n    address public winner;\r\n\r\n    address[] private players;\r\n\r\n    modifier isNotManager() {\r\n        require(msg.sender != manager);\r\n        _;\r\n    }\r\n\r\n    modifier isManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    modifier isNotInList() {\r\n        for (uint i=0; i < players.length; i++) {\r\n            require(msg.sender != players[0]);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validValue() {\r\n        require(msg.value == .01 ether);\r\n        _;\r\n    }\r\n\r\n    modifier isAnyPlayers() {\r\n        require(players.length > 0);\r\n        _;\r\n    }\r\n\r\n    function Lottery() public {\r\n        manager = msg.sender;\r\n    }\r\n\r\n    function enter() public isNotManager isNotInList validValue payable {\r\n        players.push(msg.sender);\r\n    }\r\n\r\n    function pickWinner() public isManager isAnyPlayers payable returns(address) {\r\n        uint index = random();\r\n        uint share = (this.balance) * 20 / 100;\r\n        winner = players[index];\r\n\r\n        players[index].transfer(this.balance - share); // and the winner get the whole rest of the money\r\n        manager.transfer(share);\r\n\r\n        players = new address[](0);\r\n\r\n        return winner;\r\n    }\r\n\r\n    function entryPlayers() public view returns(address[]) {\r\n        return players;\r\n    }\r\n\r\n    function random() private view returns(uint) {\r\n        return uint(keccak256(block.difficulty, now, players)) % players.length;\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"entryPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://113b37730a23dfbcb91466b79abc9ebb5716eb5f0ea999163cd8473cffb10e7d"}]}