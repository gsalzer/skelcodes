{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/aaron/fct/TheSink/coupons/contracts/DEE.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract DEE {\\r\\n    using SafeMath for uint256;\\r\\n    uint256 public unsettled;\\r\\n    uint256 public staked;\\r\\n    uint airDropped;\\r\\n    uint8 constant toAirdrop = 200;\\r\\n    uint public tokenClaimCount;\\r\\n\\r\\n    struct Fees {\\r\\n        uint stake;\\r\\n        uint dev;\\r\\n        uint farm;\\r\\n        uint airdrop;\\r\\n    }\\r\\n    Fees fees;\\r\\n    address payable public admin;\\r\\n    address payable public partnership;\\r\\n    address public TheStake;\\r\\n    address public UniswapPair;\\r\\n    address public bounce;\\r\\n    address public lockedTokens;\\r\\n\\r\\n    address [] assets;\\r\\n    address [] tokensClaimable;\\r\\n    address payable[] public shareHolders;\\r\\n    struct Participant {\\r\\n        bool staking;\\r\\n        uint256 stake;\\r\\n    }\\r\\n\\r\\n    address[toAirdrop] airdropList;\\r\\n    mapping(address => Participant) public staking;\\r\\n    mapping(address => mapping(address => uint256)) public payout;\\r\\n    mapping(address => uint256) public ethPayout;\\r\\n    mapping(address => uint256) public tokenUnsettled;\\r\\n    mapping(address => uint256) public totalTokensClaimable;\\r\\n\\r\\n    IERC20 LPToken;\\r\\n\\r\\n    receive() external payable { }\\r\\n\\r\\n    modifier onlyAdmin {\\r\\n        require(msg.sender == admin, \\\"Only the admin can do this\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _TheStake)  public {\\r\\n        admin = msg.sender;\\r\\n        fees.stake = 40;\\r\\n        fees.dev = 10;\\r\\n        fees.airdrop = 40;\\r\\n        fees.farm = 60;\\r\\n        TheStake = _TheStake;\\r\\n    }\\r\\n\\r\\n    /* Admin Controls */\\r\\n    function changeAdmin(address payable _admin) external onlyAdmin {\\r\\n        admin = _admin;\\r\\n    }\\r\\n\\r\\n    function setPartner(address payable _partnership) external onlyAdmin {\\r\\n        partnership = _partnership;\\r\\n    }\\r\\n\\r\\n    function setUniswapPair(address _uniswapPair) external onlyAdmin {\\r\\n        UniswapPair = _uniswapPair;\\r\\n    }\\r\\n\\r\\n    function addAsset(address _asset) external onlyAdmin {\\r\\n        assets.push(_asset);\\r\\n    }\\r\\n\\r\\n    function remAsset(address _asset) external onlyAdmin {\\r\\n        for(uint i = 0; i < assets.length ; i++ ) {\\r\\n            if(assets[i] == _asset) delete assets[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setStake(address _stake) external onlyAdmin {\\r\\n        require(TheStake == address(0), \\\"This can only be done once.\\\");\\r\\n        TheStake = _stake;\\r\\n    }\\r\\n\\r\\n    function setBounce(address _bounce) external onlyAdmin {\\r\\n        require(bounce == address(0), \\\"This can only be done once.\\\");\\r\\n        bounce = _bounce;\\r\\n    }\\r\\n    \\r\\n    function setLockedTokens(address _contract) external onlyAdmin {\\r\\n        lockedTokens = _contract;\\r\\n    }    \\r\\n\\r\\n    function setLPToken(address _lptokens) external onlyAdmin {\\r\\n        LPToken = IERC20(_lptokens);\\r\\n    }\\r\\n    \\r\\n    function addPendingTokenRewards(uint256 _transferFee, address _token) external {\\r\\n        require(assetFound(msg.sender) == true, 'Only Assets can Add Fees.');\\r\\n        uint topay = _transferFee.add(tokenUnsettled[_token]);\\r\\n\\r\\n        if(topay < 10000 || topay < shareHolders.length || shareHolders.length == 0)\\r\\n            tokenUnsettled[_token] = topay;\\r\\n        else {\\r\\n            tokenUnsettled[_token] = 0;\\r\\n            payout[admin][_token] =  payout[admin][_token].add(percent(fees.dev*10000/totalFee(), topay) );\\r\\n\\r\\n            addClaimableToken(_token, topay);\\r\\n            addRecentTransactor(tx.origin);\\r\\n\\r\\n            for(uint i = 0 ; i < shareHolders.length ; i++) {\\r\\n               address hodler = address(shareHolders[i]);\\r\\n               uint perc = staking[hodler].stake.mul(10000) / staked;\\r\\n               if(address(LPToken) != address(0)) {\\r\\n                    uint farmPerc = LPToken.balanceOf(hodler).mul(10000) / LPtotalSupply();\\r\\n                    if(farmPerc > 0) payout[hodler][_token] = payout[hodler][_token].add(percent(farmPerc, percent(fees.farm*10000/totalFee(), topay)));\\r\\n               }\\r\\n               if(eligableForAirdrop(hodler) ) {\\r\\n                    payout[hodler][_token] = payout[hodler][_token].add(percent(perc, percent(fees.airdrop*10000/totalFee(), topay)));    \\r\\n               }\\r\\n               payout[hodler][_token] = payout[hodler][_token].add(percent(perc, percent(fees.stake*10000/totalFee(), topay)));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addPendingETHRewards() external payable {\\r\\n        require(assetFound(msg.sender) == true, 'Only Assets can Add Fees.');\\r\\n        uint topay = unsettled.add(msg.value);\\r\\n        if(topay < 10000 || topay < shareHolders.length || shareHolders.length == 0)\\r\\n            unsettled = topay;\\r\\n        else {\\r\\n            unsettled = 0;\\r\\n            ethPayout[admin] = ethPayout[admin].add(percent(fees.dev*10000/totalFee(), topay));\\r\\n             \\r\\n            for(uint i = 0 ; i < shareHolders.length ; i++) {\\r\\n               address hodler = address(shareHolders[i]);\\r\\n               uint perc = staking[hodler].stake.mul(10000) / staked;\\r\\n               if(address(LPToken) != address(0)) {\\r\\n                   uint farmPerc = LPToken.balanceOf(hodler).mul(10000) / LPtotalSupply();\\r\\n                   if(farmPerc > 0) ethPayout[hodler] = ethPayout[hodler].add(percent(farmPerc, percent(fees.farm*10000/totalFee(), topay)));\\r\\n               }\\r\\n               if(eligableForAirdrop(hodler) ) {\\r\\n                    ethPayout[hodler] = ethPayout[hodler].add(percent(perc, percent(fees.airdrop*10000/totalFee(), topay)));    \\r\\n               }               \\r\\n               ethPayout[hodler] = ethPayout[hodler].add(percent(perc, percent(fees.stake*10000/totalFee(), topay)));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external {\\r\\n        require(msg.sender == tx.origin, \\\"LIMIT_CONTRACT_INTERACTION\\\");\\r\\n        IERC20 _stake = IERC20(TheStake);\\r\\n        _stake.transferFrom(msg.sender, address(this), _amount);\\r\\n        staking[msg.sender].stake = staking[msg.sender].stake.add(_amount);\\r\\n        staked = staked.add(_amount);\\r\\n        if(staking[msg.sender].staking == false){\\r\\n            staking[msg.sender].staking = true;\\r\\n            shareHolders.push(msg.sender);\\r\\n        }\\r\\n    }\\r\\n \\r\\n    function unstake(uint _amount) external {\\r\\n        require(msg.sender == tx.origin, \\\"LIMIT_CONTRACT_INTERACTION\\\");        \\r\\n        IERC20 _stake = IERC20(TheStake);\\r\\n        if(_amount == 0) _amount = staking[msg.sender].stake;\\r\\n        claimBoth();\\r\\n        require(staking[msg.sender].stake >= _amount, \\\"Trying to remove too much stake\\\");\\r\\n        staking[msg.sender].stake = staking[msg.sender].stake.sub(_amount);\\r\\n        staked = staked.sub(_amount);\\r\\n        if(staking[msg.sender].stake <= 0) {\\r\\n            staking[msg.sender].staking = false;\\r\\n            for(uint i = 0 ; i < shareHolders.length ; i++){\\r\\n                if(shareHolders[i] == msg.sender){\\r\\n                    delete shareHolders[i];\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _stake.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function claim() public {\\r\\n        require(msg.sender == tx.origin, \\\"LIMIT_CONTRACT_INTERACTION\\\");        \\r\\n        for(uint i = 0; i < tokensClaimable.length; i++) {\\r\\n            address _claimToken = tokensClaimable[i];\\r\\n            if(payout[msg.sender][_claimToken] > 0) {\\r\\n                uint256 topay = payout[msg.sender][_claimToken];\\r\\n                delete payout[msg.sender][_claimToken];\\r\\n                IERC20(_claimToken).transfer(msg.sender, topay);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimEth() public payable {\\r\\n        require(msg.sender == tx.origin, \\\"LIMIT_CONTRACT_INTERACTION\\\");\\r\\n        uint topay = ethPayout[msg.sender];\\r\\n        require(ethPayout[msg.sender] > 0, \\\"NO PAYOUT\\\");\\r\\n        delete ethPayout[msg.sender];\\r\\n        msg.sender.transfer(topay);\\r\\n    }\\r\\n\\r\\n    function claimBoth() public payable {\\r\\n        if(ethPayout[msg.sender] > 0) claimEth();\\r\\n        claim();\\r\\n    }\\r\\n\\r\\n    function burned(address _token) public view returns(uint256) {\\r\\n        if(_token == TheStake) return IERC20(_token).balanceOf(address(this)).sub(staked);\\r\\n        return IERC20(_token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function calculateAmountsAfterFee(address _sender, uint _amount) external view returns(uint256, uint256){\\r\\n        if( _amount < 10000 ||\\r\\n            _sender == address(this) ||\\r\\n            _sender == UniswapPair ||\\r\\n            _sender == admin ||\\r\\n            _sender == bounce)\\r\\n            return(_amount, 0);\\r\\n        uint fee_amount = percent(totalFee(), _amount);\\r\\n        return (_amount.sub(fee_amount), fee_amount);\\r\\n    }\\r\\n\\r\\n    function totalFee() private view returns(uint) {\\r\\n        return fees.airdrop + fees.dev + fees.stake + fees.farm;\\r\\n    }\\r\\n\\r\\n    function eligableForAirdrop(address _addr) private view returns (bool) {\\r\\n        for(uint i; i < toAirdrop; i++) {\\r\\n            if(airdropList[i] == _addr) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function assetFound(address _asset) private view returns(bool) {\\r\\n        for(uint i = 0; i < assets.length; i++) {\\r\\n            if( assets[i] == _asset) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    \\r\\n    function addClaimableToken(address _token, uint256 _amount) private {\\r\\n        totalTokensClaimable[_token] = totalTokensClaimable[_token].add(_amount);\\r\\n        for(uint i = 0; i < tokensClaimable.length ; i++ ) {\\r\\n            if(_token == tokensClaimable[i]) return;\\r\\n        }\\r\\n        tokensClaimable.push(_token);\\r\\n    }\\r\\n\\r\\n    function addRecentTransactor(address _actor) internal {\\r\\n        airdropList[airDropped] = _actor;\\r\\n        airDropped += 1;\\r\\n        if(airDropped >= toAirdrop) airDropped = 0;\\r\\n    }\\r\\n\\r\\n    function LPtotalSupply() internal view returns (uint256) {\\r\\n        return LPToken.totalSupply().sub(IERC20(LPToken).balanceOf(lockedTokens));\\r\\n    }\\r\\n    \\r\\n    function percent(uint256 perc, uint256 whole) private pure returns(uint256) {\\r\\n        uint256 a = (whole / 10000).mul(perc);\\r\\n        return a;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TheStake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TheStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPendingETHRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addPendingTokenRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bounce\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateAmountsAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBoth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnership\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"remAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bounce\",\"type\":\"address\"}],\"name\":\"setBounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptokens\",\"type\":\"address\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_partnership\",\"type\":\"address\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapPair\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareHolders\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staking\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenClaimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenUnsettled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokensClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsettled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DEE","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007546db954ca0747f5dbca073e64c5dd50a96f87e","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}