{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAccessControl {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAddressRegistry {\\n    event AvalancheUpdated(address indexed newAddress);\\n    event LGEUpdated(address indexed newAddress);\\n    event LodgeUpdated(address indexed newAddress);\\n    event LoyaltyUpdated(address indexed newAddress);\\n    event PwdrUpdated(address indexed newAddress);\\n    event PwdrPoolUpdated(address indexed newAddress);\\n    event SlopesUpdated(address indexed newAddress);\\n    event SnowPatrolUpdated(address indexed newAddress);\\n    event TreasuryUpdated(address indexed newAddress);\\n    event UniswapRouterUpdated(address indexed newAddress);\\n    event VaultUpdated(address indexed newAddress);\\n    event WethUpdated(address indexed newAddress);\\n    \\n    function getAvalanche() external view returns (address);\\n    function setAvalanche(address _address) external;\\n\\n    function getLGE() external view returns (address);\\n    function setLGE(address _address) external;\\n\\n    function getLodge() external view returns (address);\\n    function setLodge(address _address) external;\\n\\n    function getLoyalty() external view returns (address);\\n    function setLoyalty(address _address) external;\\n\\n    function getPwdr() external view returns (address);\\n    function setPwdr(address _address) external;\\n\\n    function getPwdrPool() external view returns (address);\\n    function setPwdrPool(address _address) external;\\n\\n    function getSlopes() external view returns (address);\\n    function setSlopes(address _address) external;\\n\\n    function getSnowPatrol() external view returns (address);\\n    function setSnowPatrol(address _address) external;\\n\\n    function getTreasury() external view returns (address payable);\\n    function setTreasury(address _address) external;\\n\\n    function getUniswapRouter() external view returns (address);\\n    function setUniswapRouter(address _address) external;\\n\\n    function getVault() external view returns (address);\\n    function setVault(address _address) external;\\n\\n    function getWeth() external view returns (address);\\n    function setWeth(address _address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAvalanche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAvalanche {\\n    event Activated(address indexed user);\\n    event Claim(address indexed user, uint256 pwdrAmount);    \\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event PwdrRewardAdded(address indexed user, uint256 pwdrReward);\\n    event EthRewardAdded(address indexed user, uint256 ethReward);\\n\\n    function active() external view returns (bool);\\n    function activate() external;\\n\\n    function addPwdrReward(address _from, uint256 _amount) external;\\n    // function addEthReward() external virtual payable;\\n    function deposit(uint256 _amount) external;\\n    function depositFor(address _from, address _user, uint256 _amount) external;\\n    function claim() external;\\n    function claimFor(address _user) external;\\n    function withdraw(uint256 _amount) external;\\n\\n    function payoutNumber() external view returns (uint256);\\n    function timeUntilNextPayout() external view returns (uint256); \\n    function rewardAtPayout(uint256 _payoutNumber) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPWDR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IPWDR {\\n    event EpochUpdated(address _address, uint256 _epoch, uint256 _phase);\\n\\n    function MAX_SUPPLY() external view returns (uint256);\\n    function maxSupplyHit() external view returns (bool);\\n    function transferFee() external view returns (uint256);\\n    function currentEpoch() external view returns (uint256);\\n    function currentPhase() external view returns (uint256);\\n    function epochMaxSupply(uint _epoch) external view returns (uint256);\\n    function epochBaseRate(uint _epoch) external view returns (uint256);\\n\\n    function accumulating() external view returns (bool);\\n    function currentMaxSupply() external view returns (uint256);\\n    function currentBaseRate() external view returns (uint256);\\n    // function incrementEpoch() external;\\n    // function incrementPhase() external;\\n    \\n    function updateEpoch(uint256 _epoch, uint256 _phase) external;\\n    function mint(address _to, uint256 _amount) external;\\n    function setTransferFee(uint256 _transferFee) external;\\n    function addToTransferWhitelist(bool _addToSenderWhitelist, address _address) external;\\n    function removeFromTransferWhitelist(bool _removeFromSenderWhitelist, address _address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISnowPatrol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AltitudeBase } from \\\"../utils/AltitudeBase.sol\\\";\\n\\ninterface ISnowPatrol {\\n    function ADMIN_ROLE() external pure returns (bytes32);\\n    function LGE_ROLE() external pure returns (bytes32);\\n    function PWDR_ROLE() external pure returns (bytes32);\\n    function SLOPES_ROLE() external pure returns (bytes32);\\n    function setCoreRoles() external;\\n}\"\r\n    },\r\n    \"contracts/token/PWDR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IUniswapV2Factory } from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport { IUniswapV2Router02 } from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport { IPWDR } from \\\"../interfaces/IPWDR.sol\\\";\\nimport { IAvalanche } from '../interfaces/IAvalanche.sol';\\nimport { PWDRBase } from \\\"./PWDRBase.sol\\\";\\n\\ncontract PWDR is IPWDR, PWDRBase {\\n    event EpochUpdated(address _address, uint256 _epoch, uint256 _phase);\\n\\n    uint256 public override constant MAX_SUPPLY = 21000000 * 1e18; // max supply 21M\\n\\n    bool public override maxSupplyHit; // has max supply been reached\\n    uint256 public override transferFee; // PWDR transfer fee, 1 = 0.1%. Default 1.5%\\n\\n    uint256 public override currentEpoch;\\n    uint256 public override currentPhase; // current phase; 0 = Accumulation ,1 = Distribution\\n    uint256[] public override epochMaxSupply; // max total supply for each epoch, running total\\n    uint256[] public override epochBaseRate; // base APR of Slope rewards\\n    \\n    // Mapping of whitelisted sender and recipient addresses that don't pay the transfer fee. \\n    // Allows PWDR token holders to whitelist future contracts\\n    mapping(address => bool) public senderWhitelist;\\n    mapping(address => bool) public recipientWhitelist;\\n\\n    modifier Accumulation {\\n        require(\\n            currentPhase == 0,\\n            \\\"PWDR is not in Accumulation\\\"\\n        );\\n        _;\\n    }\\n    \\n    modifier MaxSupplyNotReached {\\n        require(!maxSupplyHit, \\\"Max PWDR Supply has been reached\\\");\\n        _;\\n    }\\n\\n    modifier OnlyAuthorized {\\n        require(\\n            msg.sender == avalancheAddress()\\n            || msg.sender == lgeAddress()\\n            || msg.sender == slopesAddress(),\\n            \\\"Only LGE, Slopes, and Avalanche contracts can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address addressRegistry) \\n        public \\n        PWDRBase(addressRegistry, \\\"Altitude\\\", \\\"PWDR\\\") \\n    {\\n        transferFee = 15;\\n        _initializeEpochs();\\n    }\\n\\n    function _initializeEpochs() \\n        private \\n    {\\n        _setupEpoch(5250000 * 1e18, 0); // 5.25M PWDR for LGE\\n        _setupEpoch(13250000 * 1e18, 800); // +8M PWDR, 800%\\n        _setupEpoch(17250000 * 1e18, 400); // +4M PWDR, 400%\\n        _setupEpoch(19250000 * 1e18, 200); // +2M PWDR, 200%\\n        _setupEpoch(20250000 * 1e18, 100); // +1M PWDR, 100%\\n        _setupEpoch(20750000 * 1e18, 50); // +500K PWDR, 50%\\n        _setupEpoch(21000000 * 1e18, 25); // +250K PWDR, 25%\\n    }\\n\\n    function _setupEpoch(uint256 maxSupply, uint256 baseRate) \\n        private \\n    {\\n        epochMaxSupply.push(maxSupply);\\n        epochBaseRate.push(baseRate);\\n    }\\n\\n    function currentMaxSupply() \\n        external \\n        view\\n        override \\n        returns (uint256)\\n    {\\n        return epochMaxSupply[currentEpoch];\\n    }\\n\\n    function currentBaseRate() \\n        external \\n        view \\n        override\\n        returns (uint256)\\n    {\\n        return epochBaseRate[currentEpoch];\\n    }\\n\\n    function accumulating()\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return currentEpoch > 0 && currentEpoch <= 6\\n            && currentPhase == 0;\\n    }\\n\\n    function updateEpoch(uint256 _epoch, uint256 _phase)\\n        external\\n        override\\n        OnlyAuthorized\\n    {\\n        // require valid update calls\\n        if (currentPhase == 0) {\\n            require(\\n                _epoch == currentEpoch && _phase == 1,\\n                \\\"Invalid Epoch Phase Update Call\\\"\\n            );\\n        } else {\\n            // change this to _epoch == currentEpoch + 1 in prod\\n            require(\\n                _epoch > currentEpoch && _phase == 0,\\n                \\\"Invalid Epoch Update Call\\\"\\n            );\\n        }\\n\\n        currentEpoch = _epoch;\\n        currentPhase = _phase;\\n\\n        emit EpochUpdated(_msgSender(), _epoch, _phase);\\n    }\\n\\n    // Creates `_amount` PWDR token to `_to`. \\n    // Can only be called by the LGE, Slopes, and Avalanche contracts\\n    //  when epoch and max supply numbers allow\\n    function mint(address _to, uint256 _amount)\\n        external\\n        override\\n        Accumulation\\n        MaxSupplyNotReached\\n        OnlyAuthorized\\n    {\\n        uint256 supply = totalSupply();\\n        uint256 epochSupply = epochMaxSupply[currentEpoch];\\n\\n        // update phase if epoch max supply is hit during this mint\\n        if (supply.add(_amount) >= epochSupply) {\\n            _amount = epochSupply.sub(supply);\\n            \\n            if (supply.add(_amount) >= MAX_SUPPLY) {\\n                maxSupplyHit = true;\\n            }\\n\\n            // activate gets called at every accumulation end to reset rewards\\n            IAvalanche(avalancheAddress()).activate();            \\n\\n            if (currentEpoch == 0) {\\n                currentEpoch += 1;\\n            } else {\\n                currentPhase += 1;\\n            }\\n            emit EpochUpdated(_msgSender(), currentEpoch, currentPhase);\\n        }\\n\\n        if (_amount > 0) {\\n            _mint(_to, _amount);\\n        }\\n    }\\n\\n    // Transfer override to support transfer fees that are sent to Avalanche\\n    function _transfer(\\n        address sender, \\n        address recipient, \\n        uint256 amount\\n    ) \\n        internal\\n        override\\n    {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        uint256 transferFeeAmount;\\n        uint256 tokensToTransfer;\\n        if (amount > 0) {\\n            address avalancheAddress = avalancheAddress();\\n\\n            // Send a fee to the Avalanche staking contract if this isn't a whitelisted transfer\\n            if (_isWhitelistedTransfer(sender, recipient) != true) {\\n                transferFeeAmount = amount.mul(transferFee).div(1000);\\n                _balances[avalancheAddress] = _balances[avalancheAddress].add(transferFeeAmount);\\n                IAvalanche(avalancheAddress).addPwdrReward(sender, transferFeeAmount);\\n                emit Transfer(sender, avalancheAddress, transferFeeAmount);\\n            }\\n            tokensToTransfer = amount.sub(transferFeeAmount);\\n            _balances[sender] = _balances[sender].sub(tokensToTransfer, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n            if (tokensToTransfer > 0) {\\n                _balances[recipient] = _balances[recipient].add(tokensToTransfer);\\n\\n                // If the Avalanche is the transfer recipient, add rewards to keep balances updated\\n                if (recipient == avalancheAddress) {\\n                    IAvalanche(avalancheAddress).addPwdrReward(sender, tokensToTransfer);\\n                }\\n            }\\n\\n        }\\n        emit Transfer(sender, recipient, tokensToTransfer);\\n    }\\n\\n    // Admin calls this at token deployment to setup PWDR-LP LGE transfers\\n    function calculateUniswapPoolAddress() \\n        external\\n        view \\n        HasPatrol(\\\"ADMIN\\\")\\n        returns (address)\\n    {\\n        address uniswapRouter = uniswapRouterAddress();\\n        address wethAddress = wethAddress();\\n\\n        // Calculate the address the PWDR-ETH Uniswap pool will exist at\\n        address factoryAddress = IUniswapV2Router02(uniswapRouter).factory();\\n        // return IUniswapV2Factory(factoryAddress).createPair(wethAddress, address(this));\\n\\n        // token0 must be strictly less than token1 by sort order to determine the correct address\\n        (address token0, address token1) = address(this) < wethAddress \\n            ? (address(this), wethAddress) \\n            : (wethAddress, address(this));\\n\\n        //uniswap address pre-calculation using create2\\n        return address(uint(keccak256(abi.encodePacked(\\n            hex'ff',\\n            factoryAddress,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\\n        ))));\\n    }\\n\\n    // Sets the PWDR transfer fee that gets rewarded to Avalanche stakers. Can't be higher than 5%.\\n    function setTransferFee(uint256 _transferFee) \\n        public\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        require(_transferFee <= 50, \\\"over 5%\\\");\\n        transferFee = _transferFee;\\n    }\\n\\n    // Add an address to the sender or recipient transfer whitelist\\n    function addToTransferWhitelist(bool _addToSenderWhitelist, address _address) \\n        public\\n        override \\n        HasPatrol(\\\"ADMIN\\\") \\n    {\\n        if (_addToSenderWhitelist == true) {\\n            senderWhitelist[_address] = true;\\n        } else {\\n            recipientWhitelist[_address] = true;\\n        }\\n    }\\n\\n    // Remove an address from the sender or recipient transfer whitelist\\n    function removeFromTransferWhitelist(bool _removeFromSenderWhitelist, address _address) \\n        public\\n        override\\n        HasPatrol(\\\"ADMIN\\\") \\n    {\\n        if (_removeFromSenderWhitelist == true) {\\n            senderWhitelist[_address] = false;\\n        } else  {\\n            recipientWhitelist[_address] = false;\\n        }\\n    }\\n\\n    // Internal function to determine if a PWDR transfer is being sent or received by a whitelisted address\\n    function _isWhitelistedTransfer(\\n        address _sender, \\n        address _recipient\\n    ) \\n        internal \\n        view \\n        returns (bool) \\n    {\\n        // Ecosytem contracts should not pay transfer fees\\n        return _sender == avalancheAddress() || _recipient == avalancheAddress()\\n            || _sender == lgeAddress() || _recipient == lgeAddress()\\n            || _sender == slopesAddress() || _recipient == slopesAddress()\\n            || senderWhitelist[_sender] == true || recipientWhitelist[_recipient] == true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/PWDRBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n// import { ERC20 } from \\\"../utils/ERC20/ERC20.sol\\\";\\n\\nimport { PWDRToken } from \\\"./PWDRToken.sol\\\";\\nimport { PatrolBase } from \\\"../utils/PatrolBase.sol\\\";\\n\\nabstract contract PWDRBase is PatrolBase, PWDRToken {\\n    constructor(\\n        address addressRegistry,\\n        string memory name_, \\n        string memory symbol_\\n    ) \\n        public\\n        PWDRToken(name_, symbol_)\\n    {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"\r\n    },\r\n    \"contracts/token/PWDRToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n// import { ERC20 } from \\\"../utils/ERC20/ERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { Context } from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n// Standed ERC20 with internal _balances, virtual _transfer, and add'l helper funcs\\n// Modificiations made out of ecosystem necessity  \\nabstract contract PWDRToken is IERC20, Context {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) internal _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual;\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AddressBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { UtilitiesBase } from \\\"./UtilitiesBase.sol\\\";\\n\\nabstract contract AddressBase is UtilitiesBase {\\n    address internal _addressRegistry;\\n\\n    function _setAddressRegistry(address _address)\\n        internal\\n    {\\n        _addressRegistry = _address;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/AltitudeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { ISnowPatrol } from \\\"../interfaces/ISnowPatrol.sol\\\";\\nimport { AddressBase } from \\\"./AddressBase.sol\\\";\\n\\nabstract contract AltitudeBase is AddressBase {\\n    modifier OnlyLGE {\\n        require(\\n            _msgSender() == lgeAddress(), \\n            \\\"Only the LGE contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyLoyalty {\\n        require(\\n            _msgSender() == loyaltyAddress(), \\n            \\\"Only the Loyalty contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyPWDR {\\n        require(\\n            _msgSender() == pwdrAddress(),\\n            \\\"Only PWDR Contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlySlopes {\\n        require(\\n            _msgSender() == slopesAddress(), \\n            \\\"Only the Slopes contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function avalancheAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getAvalanche();\\n    }\\n\\n    function lgeAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLGE();\\n    }\\n\\n    function lodgeAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLodge();\\n    }\\n\\n    function loyaltyAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLoyalty();\\n    }\\n\\n    function pwdrAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getPwdr();\\n    }\\n\\n    function pwdrPoolAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getPwdrPool();\\n    }\\n\\n    function slopesAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getSlopes();\\n    }\\n\\n    function snowPatrolAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getSnowPatrol();\\n    }\\n\\n    function treasuryAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getTreasury();\\n    }\\n\\n    function uniswapRouterAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getUniswapRouter();\\n    }\\n\\n    function vaultAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getVault();\\n    }\\n\\n    function wethAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getWeth();\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/PatrolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AltitudeBase } from \\\"./AltitudeBase.sol\\\";\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { IAccessControl } from \\\"../interfaces/IAccessControl.sol\\\";\\n\\ncontract PatrolBase is AltitudeBase {\\n    modifier HasPatrol(bytes memory _patrol) {\\n        require(\\n            IAccessControl(snowPatrolAddress()).hasRole(keccak256(_patrol), address(_msgSender())),\\n            \\\"Account does not have sufficient role to call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function hasPatrol(bytes memory _patrol, address _address)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return IAccessControl(snowPatrolAddress()).hasRole(keccak256(_patrol), _address);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/UtilitiesBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\nabstract contract UtilitiesBase is Context {\\n    modifier NonZeroAmount(uint256 _amount) {\\n        require(\\n            _amount > 0, \\n            \\\"Amount must be greater than zero\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NonZeroTokenBalance(address _address) {\\n        require(\\n            IERC20(_address).balanceOf(address(this)) > 0,\\n            \\\"No tokens to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NonZeroETHBalance(address _address) {\\n        require(\\n            address(this).balance > 0,\\n            \\\"No ETH to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyOrigin {\\n        require(\\n            tx.origin == address(this), \\n            \\\"Only origin contract can call this function\\\"\\n        );\\n        _;\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addToSenderWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToTransferWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateUniswapPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyHit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipientWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_removeFromSenderWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromTransferWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PWDR","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000001ec4a8b60191230c4c6b4db79e321441b63bd143","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}