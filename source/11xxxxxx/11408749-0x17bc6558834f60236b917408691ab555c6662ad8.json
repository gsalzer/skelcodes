{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.1 https://hardhat.org\r\n\r\n// File contracts/v612/ICOREGlobals.sol\r\n// COPYRIGHT cVault.finance TEAM\r\n// NO COPY\r\n// COPY = BAD\r\n// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\r\n//\r\n//  _     _             _     _ _ _           \r\n// | |   (_)           (_)   | (_) |         \r\n// | |    _  __ _ _   _ _  __| |_| |_ _   _  \r\n// | |   | |/ _` | | | | |/ _` | | __| | | | \r\n// | |___| | (_| | |_| | | (_| | | |_| |_| | \r\n// \\_____/_|\\__, |\\__,_|_|\\__,_|_|\\__|\\__, |  \r\n//             | |                     __/ |                                                                               \r\n//             |_|                    |___/               \r\n//  _____                           _   _               _____                _                                                                    \r\n// |  __ \\                         | | (_)             |  ___|              | |  \r\n// | |  \\/ ___ _ __   ___ _ __ __ _| |_ _  ___  _ __   | |____   _____ _ __ | |_ \r\n// | | __ / _ \\ '_ \\ / _ \\ '__/ _` | __| |/ _ \\| '_ \\  |  __\\ \\ / / _ \\ '_ \\| __|\r\n// | |_\\ \\  __/ | | |  __/ | | (_| | |_| | (_) | | | | | |___\\ V /  __/ | | | |_ \r\n//  \\____/\\___|_| |_|\\___|_|  \\__,_|\\__|_|\\___/|_| |_| \\____/ \\_/ \\___|_| |_|\\__|\r\n//\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                      \r\n//    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                        \r\n//       \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                        \r\n//          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                          \r\n//            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                           \r\n//               \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                             \r\n//                  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                              \r\n//                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\                               \r\n//                    \\\\\\\\\\\\\\\\\\\\\\\\\\                                \r\n//                    \\\\\\\\\\\\\\\\\\\\\\\\                                 \r\n//                   \\\\\\\\\\\\\\\\\\\\\\\\                                  \r\n//                  \\\\\\\\\\\\\\\\\\\\\\\\                                   \r\n//                 \\\\\\\\\\\\\\\\\\\\\\\\                                    \r\n//                \\\\\\\\\\\\\\\\\\\\\\\\                                     \r\n//               \\\\\\\\\\\\\\\\\\\\\\\\                                      \r\n//               \\\\\\\\\\\\\\\\\\\\\\\\                                      \r\n//          `     \\\\\\\\\\\\\\\\\\\\\\\\      `    `                         \r\n//             *    \\\\\\\\\\\\\\\\\\\\\\\\  *   *                            \r\n//      `    *    *   \\\\\\\\\\\\\\\\\\\\\\\\   *  *   `                      \r\n//              *   *   \\\\\\\\\\\\\\\\\\\\  *                              \r\n//           `    *   * \\\\\\\\\\\\\\\\\\ *   *   `                        \r\n//        `    `     *  \\\\\\\\\\\\\\\\   *   `_____                      \r\n//              \\ \\ \\ * \\\\\\\\\\\\\\  * /  /\\`````\\                    \r\n//            \\ \\ \\ \\  \\\\\\\\\\\\  / / / /  \\`````\\                    \r\n//          \\ \\ \\ \\ \\ \\\\\\\\\\\\ / / / / |[] | [] |\r\n//                                  EqPtz5qN7HM\r\n//\r\n// This contract lets people kickstart pair liquidity on uniswap together\r\n// By pooling tokens together for a period of time\r\n// A bundle of sticks makes one mighty liquidity pool\r\n//\r\n// SPDX-License-Identifier: MIT\r\n// COPYRIGHT cVault.finance TEAM\r\n// NO COPY\r\n// COPY = BAD\r\n// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\r\n\r\ninterface ICOREGlobals {\r\n    function CORETokenAddress() external view returns (address);\r\n    function COREVaultAddress() external returns (address);\r\n    function UniswapFactory() external view returns (address);\r\n    function TransferHandler() external view returns (address);\r\n    function isContract(address) external view returns (bool);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IWETH.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol@v3.0.0\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n\r\n\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.2.0\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.2.0\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/v612/COREv1/ICoreVault.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface ICoreVault {\r\n    function devaddr() external returns (address);\r\n    function addPendingRewards(uint _amount) external;\r\n}\r\n\r\n\r\n// File contracts/v612/LGE3.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n\r\ninterface ICOREVault {\r\n    function depositFor(address, uint256 , uint256 ) external;\r\n}\r\n\r\n\r\ninterface IERC95 {\r\n    function wrapAtomic(address) external;\r\n    function transfer(address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function skim(address to) external;\r\n    function unpauseTransfers() external;\r\n\r\n}\r\n\r\n\r\ninterface ICORETransferHandler {\r\n    function sync(address) external returns(bool,bool);\r\n    function feePercentX100() external returns (uint8); \r\n\r\n}\r\n\r\ncontract CORE_LGE_3 is Initializable, OwnableUpgradeSafe {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private locked;\r\n    // Reentrancy lock \r\n    modifier lock() {\r\n        require(locked == 0, 'CORE LGE: LOCKED');\r\n        locked = 1;\r\n        _; // Can't re-eter until function is finished\r\n        locked = 0;\r\n    }\r\n\r\n    /// Addresses of different tokens\r\n    address public WETH;\r\n    address public CORE;\r\n    address public DAI;\r\n    address public cDAIxcCOREUniswapPair;\r\n    address public cDAI; // TODO : Add setters\r\n    address public cCORE;\r\n    address payable public CORE_MULTISIG;\r\n\r\n    // Uniswap factories for recognising LP tokens\r\n    address public uniswapFactory;\r\n    address public sushiswapFactory;\r\n\r\n\r\n    ////////////////////////////////////////\r\n    // Variables for calculating LP gotten per each user\r\n    // Note all contributions get \"flattened\" to CORE \r\n    // This means we just calculate how much CORE it would buy with the running average\r\n    // And use that as the counter\r\n    uint256 public totalLPCreated;    \r\n    uint256 private totalCOREUnitsContributed;\r\n    uint256 public LPPerCOREUnitContributed; // stored as 1e18 more - this is done for change\r\n    ////////////////////////////////////////\r\n\r\n\r\n    event Contibution(uint256 COREvalue, address from);\r\n    event COREBought(uint256 COREamt);\r\n\r\n    mapping(address => PriceAverage) _averagePrices;\r\n    struct PriceAverage{\r\n       uint8 lastAddedHead;\r\n       uint256[20] price;\r\n       uint256 cumulativeLast20Blocks;\r\n       bool arrayFull;\r\n       uint lastBlockOfIncrement; // Just update once per block ( by buy token function )\r\n    }\r\n    mapping (address => bool) public claimed; \r\n    mapping (address => bool) public doNotSellList;\r\n    mapping (address => uint256) public credit;\r\n    mapping (address => uint256) public tokenReserves;\r\n\r\n    ICOREGlobals public coreGlobals;\r\n    bool public LGEStarted;\r\n    bool public LGEFinished;\r\n    bool public LGEPaused;\r\n    uint256 public contractStartTimestamp;\r\n    uint256 public contractStartTimestampSaved;\r\n    uint256 public LGEDurationDays;\r\n\r\n    // Upgrade 1\r\n    mapping (address => bool ) public snapshotAdded;\r\n    /// Upgrade 1 end\r\n\r\n\r\n    function initialize() public initializer {\r\n        require(msg.sender == address(0x5A16552f59ea34E44ec81E58b3817833E9fD5436));\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n\r\n        contractStartTimestamp = uint256(-1); // wet set it here to max so checks fail\r\n        LGEDurationDays = 7 days;\r\n\r\n        DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n        CORE = 0x62359Ed7505Efc61FF1D56fEF82158CcaffA23D7;\r\n        WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        uniswapFactory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n        sushiswapFactory = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\r\n        CORE_MULTISIG = 0x5A16552f59ea34E44ec81E58b3817833E9fD5436;\r\n        coreGlobals = ICOREGlobals(0x255CA4596A963883Afe0eF9c85EA071Cc050128B);\r\n    \r\n        doNotSellList[DAI] = true;\r\n        doNotSellList[CORE] = true;\r\n        doNotSellList[WETH] = true;\r\n\r\n    }\r\n\r\n    /// Starts LGE by admin call\r\n    function startLGE() public onlyOwner {\r\n        require(LGEStarted == false, \"Already started\");\r\n\r\n        contractStartTimestamp = block.timestamp;\r\n        LGEStarted = true;\r\n\r\n        rescueRatioLock(CORE);\r\n        rescueRatioLock(DAI); \r\n    }\r\n    \r\n\r\n    \r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    /// CONTRIBUTIONS\r\n    /// Contributions user functions\r\n\r\n\r\n    // Handling weth deposits\r\n    function addLiquidityETH() lock external payable {\r\n        require(LGEStarted == true, \"LGE : Didn't start\");\r\n        require(LGEFinished == false, \"LGE : Liquidity generation finished\");\r\n        require(isLGEOver() == false, \"LGE : Is over.\");\r\n        require(msg.value > 0, \"LGE : You should deposit something most likely\");\r\n        \r\n        IWETH(WETH).deposit{value: msg.value}();\r\n\r\n        uint256 valueInCOREUnits = getAveragePriceLast20BlocksIn1WETHPriceWorth(CORE).mul(msg.value).div(1e18);\r\n        credit[msg.sender] = credit[msg.sender].add(valueInCOREUnits);\r\n        tokenReserves[WETH] = tokenReserves[WETH].add(msg.value);\r\n        totalCOREUnitsContributed = totalCOREUnitsContributed.add(valueInCOREUnits);\r\n\r\n        updateRunningAverages();\r\n\r\n    }\r\n\r\n    // Main function to contribute any token\r\n    // Which will sell eveyr token we don't keep for WETH\r\n    function contributeWithAllowance(address _token, uint256 _amountContribution) lock public {\r\n\r\n        require(LGEStarted == true, \"LGE : Didn't start\");\r\n        require(LGEFinished == false, \"LGE : Liquidity generation finished\");\r\n        require(isLGEOver() == false, \"LGE : Is over.\");\r\n        require(_amountContribution > 0, \"LGE : You should deposit something most likely\");\r\n\r\n        // We get the token from person safely\r\n        // We check against reserves\r\n        // We update our reserves with amount that flew in\r\n        address [] memory tokensToSell;\r\n\r\n        address token0;\r\n        // We check if we can call a method for token 0\r\n        // Which uniswap pairs have and nothhing else does\r\n        // If this is a trap token, which has this method, it wont be on the factory\r\n        try IUniswapV2Pair(_token).token0() { token0 = IUniswapV2Pair(_token).token0(); } catch { }\r\n\r\n        // We try to get it before if it was a normal token it would just not get written\r\n        if(token0 != address(0)) {\r\n            address token1 = IUniswapV2Pair(_token).token1();\r\n            bool isUniLP = IUniswapV2Factory(uniswapFactory).getPair(token1,token0) !=  address(0);\r\n            bool isSushiLP = IUniswapV2Factory(sushiswapFactory).getPair(token0,token1) !=  address(0);\r\n            if(!isUniLP && !isSushiLP) { revert(\"LGE : LP Token type not accepted\"); } // reverts here\r\n            // If its a LP we sell it\r\n            safeTransferFrom(_token, msg.sender, _token, _amountContribution);\r\n            uint256 balanceToken0Before = IERC20(token0).balanceOf(address(this));\r\n            uint256 balanceToken1Before = IERC20(token1).balanceOf(address(this));\r\n            IUniswapV2Pair(_token).burn(address(this));\r\n            uint256 balanceToken0After = IERC20(token0).balanceOf(address(this));\r\n            uint256 balanceToken1After = IERC20(token1).balanceOf(address(this));\r\n\r\n            uint256 amountOutToken0 = token0 == WETH ? \r\n                balanceToken0After.sub(balanceToken0Before)\r\n                : sellTokenForWETH(token0, balanceToken0After.sub(balanceToken0Before), false);\r\n\r\n            uint256 amountOutToken1 = token1 == WETH ? \r\n                balanceToken1After.sub(balanceToken1Before)\r\n                : sellTokenForWETH(token1, balanceToken1After.sub(balanceToken1Before), false);\r\n\r\n            uint256 balanceWETHNew = IERC20(WETH).balanceOf(address(this));\r\n\r\n            uint256 reserveWETH = tokenReserves[WETH];\r\n\r\n            require(balanceWETHNew > reserveWETH, \"sir.\");\r\n            uint256 totalWETHAdded = amountOutToken0.add(amountOutToken1);\r\n            require(tokenReserves[WETH].add(totalWETHAdded) <= balanceWETHNew, \"Ekhm\"); // In case someone sends dirty dirty dust\r\n            tokenReserves[WETH] = balanceWETHNew;\r\n            uint256 valueInCOREUnits = getAveragePriceLast20BlocksIn1WETHPriceWorth(CORE).mul(totalWETHAdded).div(1e18);\r\n\r\n            credit[msg.sender] = credit[msg.sender].add(valueInCOREUnits);\r\n            emit Contibution(valueInCOREUnits, msg.sender);\r\n            totalCOREUnitsContributed = totalCOREUnitsContributed.add(valueInCOREUnits);\r\n\r\n            // We did everything\r\n            updateRunningAverages();\r\n            return;\r\n        } \r\n        \r\n    \r\n        // We loop over each token\r\n\r\n        if(doNotSellList[_token] && token0 == address(0)) { // We dont sell this token aka its CORE or DAI\r\n                                                            // Not needed check but maybe?\r\n            // We count it as higher even tho FoT\r\n            if(_token == CORE) {\r\n                safeTransferFrom(CORE, msg.sender, address(this), _amountContribution);\r\n                uint256 COREReserves = IERC20(CORE).balanceOf(address(this));\r\n                require(COREReserves >= tokenReserves[CORE], \"Didn't get enough CORE\");\r\n                credit[msg.sender] = credit[msg.sender].add(_amountContribution); // we can trust this cause\r\n                                                                                  // we know CORE\r\n                tokenReserves[CORE] = COREReserves;\r\n                totalCOREUnitsContributed = totalCOREUnitsContributed.add(_amountContribution);\r\n\r\n                emit Contibution(_amountContribution, msg.sender);\r\n            }\r\n\r\n            else if(_token == DAI) {\r\n                safeTransferFrom(DAI, msg.sender, address(this), _amountContribution);\r\n                uint256 DAIReserves = IERC20(DAI).balanceOf(address(this));\r\n                require(DAIReserves >= tokenReserves[DAI].add(_amountContribution), \"Didn't get enough DAI\");\r\n\r\n                uint256 valueInWETH = \r\n                    _amountContribution\r\n                    .mul(1e18) \r\n                    .div(getAveragePriceLast20BlocksIn1WETHPriceWorth(DAI)); // 1weth buys this much DAI so we divide to get numer of weth\r\n\r\n                uint256 valueInCOREUnits = getAveragePriceLast20BlocksIn1WETHPriceWorth(CORE).mul(valueInWETH).div(1e18);\r\n\r\n                credit[msg.sender] = credit[msg.sender].add(valueInCOREUnits);\r\n                                                                    // We can similiary trust this cause we know DAI\r\n                tokenReserves[DAI] = DAIReserves; \r\n                emit Contibution(valueInCOREUnits, msg.sender);\r\n                totalCOREUnitsContributed = totalCOREUnitsContributed.add(valueInCOREUnits);\r\n\r\n            }\r\n\r\n            else if(_token == WETH) { \r\n                // This is when WETH is deposited\r\n                // When its deposited from LP it will be alse so we wont ry to transfer from.\r\n                safeTransferFrom(WETH, msg.sender, address(this), _amountContribution);\r\n                uint256 reservesWETHNew = IERC20(WETH).balanceOf(address(this));\r\n                require(reservesWETHNew >= tokenReserves[WETH].add(_amountContribution), \"Didn't get enough WETH\");\r\n                tokenReserves[WETH] = reservesWETHNew;\r\n                uint256 valueInCOREUnits = getAveragePriceLast20BlocksIn1WETHPriceWorth(CORE).mul(_amountContribution).div(1e18);\r\n                credit[msg.sender] = credit[msg.sender].add(valueInCOREUnits);\r\n                emit Contibution(valueInCOREUnits, msg.sender);\r\n                totalCOREUnitsContributed = totalCOREUnitsContributed.add(valueInCOREUnits);\r\n\r\n            }\r\n            else {\r\n                revert(\"Unsupported Token Error, somehow on not to sell list\");\r\n            }\r\n\r\n        // If its DAI we sell if for WETH if we have too much dai\r\n        } else {\r\n            uint256 amountOut = sellTokenForWETH(_token, _amountContribution, true);\r\n            uint256 balanceWETHNew = IERC20(WETH).balanceOf(address(this));\r\n            uint256 reserveWETH = tokenReserves[WETH];\r\n            require(balanceWETHNew > reserveWETH, \"sir.\");\r\n            require(reserveWETH.add(amountOut) <= balanceWETHNew, \"Ekhm\"); // In case someone sends dirty dirty dust\r\n            tokenReserves[WETH] = balanceWETHNew;\r\n            uint256 valueInCOREUnits = getAveragePriceLast20BlocksIn1WETHPriceWorth(CORE).mul(amountOut).div(1e18);\r\n            credit[msg.sender] = credit[msg.sender].add(valueInCOREUnits);\r\n            emit Contibution(valueInCOREUnits, msg.sender);\r\n            totalCOREUnitsContributed = totalCOREUnitsContributed.add(valueInCOREUnits);\r\n\r\n\r\n        }\r\n        updateRunningAverages(); // After transactions are done\r\n    }\r\n\r\n    /// Claiming LP User functions\r\n    function claimLP() lock public {\r\n        safeTransfer(cDAIxcCOREUniswapPair, msg.sender, _claimLP());\r\n    }\r\n\r\n    function claimAndStakeLP() lock public {\r\n        address vault = coreGlobals.COREVaultAddress();\r\n        IUniswapV2Pair(cDAIxcCOREUniswapPair).approve(vault, uint(-1));\r\n        ICOREVault(vault).depositFor(msg.sender, 3, _claimLP());\r\n    }\r\n\r\n    function _claimLP() internal returns (uint256 claimable){ \r\n        uint256 credit = credit[msg.sender]; // gas savings\r\n\r\n        require(LGEFinished == true, \"LGE : Liquidity generation not finished\");\r\n        require(claimed[msg.sender] == false, \"LGE : Already claimed\");\r\n        require(credit > 0, \"LGE : Nothing to be claimed\");\r\n\r\n        claimed[msg.sender] =  true;\r\n        claimable = credit.mul(LPPerCOREUnitContributed).div(1e18);\r\n            // LPPerUnitContributed is stored at 1e18 multiplied\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    /// VIEWS\r\n\r\n\r\n    function isLGEOver() public view returns (bool) {\r\n        return block.timestamp > contractStartTimestamp.add(LGEDurationDays);\r\n    }\r\n    // returns WETH value of both reserves (dai and CORE for internal purposes)\r\n    function getDAIandCOREReservesValueInETH() internal view returns (uint256 COREValueETH, uint256 DAIValueETH) {\r\n        (uint256 reserveCORE, uint256 reserveDAI) = (tokenReserves[CORE], tokenReserves[DAI]);\r\n        COREValueETH = reserveCORE.div(1e8).mul(getWETHValueOf1e8TokenUnits(CORE));\r\n        DAIValueETH = reserveDAI.div(1e8).mul(getWETHValueOf1e8TokenUnits(DAI));\r\n    }\r\n\r\n   // returns WETH value of both reserves (dai and CORE + WETH)\r\n    function getLGEContributionsValue() public view returns (uint256 COREValueETH, uint256 DAIValueETH, uint256 ETHValue) {\r\n        (uint256 reserveCORE, uint256 reserveDAI) = (tokenReserves[CORE], tokenReserves[DAI]);\r\n        COREValueETH = reserveCORE.div(1e8).mul(getWETHValueOf1e8TokenUnits(CORE));\r\n        DAIValueETH = reserveDAI.div(1e8).mul(getWETHValueOf1e8TokenUnits(DAI));\r\n        ETHValue =  IERC20(WETH).balanceOf(address(this));\r\n    }\r\n\r\n    function getWETHValueOf1e8TokenUnits(address _token) internal view returns (uint256) {\r\n         address pairWithWETH = IUniswapV2Factory(uniswapFactory).getPair(_token, WETH);\r\n         if(pairWithWETH == address(0)) return 0;\r\n         IUniswapV2Pair pair = IUniswapV2Pair(pairWithWETH);\r\n         (uint256 reserve0, uint256 reserve1 ,) = pair.getReserves();\r\n\r\n         if(pair.token0() == WETH) {\r\n             return getAmountOut(1e8,reserve1,reserve0);\r\n         } else {\r\n             return getAmountOut(1e8,reserve0,reserve1);\r\n         }\r\n    }\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal  pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n\r\n\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    /// Admin balancing functions\r\n    function buyCOREforWETH(uint256 amountWETH, uint256 minAmountCOREOut) onlyOwner public {\r\n        (uint256 COREValueETH, uint256 DAIValueETH) = getDAIandCOREReservesValueInETH();\r\n        require(COREValueETH.add(amountWETH) <= DAIValueETH, \"Buying too much CORE\");\r\n        IUniswapV2Pair pair = IUniswapV2Pair(0x32Ce7e48debdccbFE0CD037Cc89526E4382cb81b);// CORE/WETH pair\r\n        safeTransfer(WETH, address(pair), amountWETH);\r\n        // CORE is token0\r\n        (uint256 reservesCORE, uint256 reservesWETH, ) = pair.getReserves();\r\n        uint256 coreOUT = getAmountOut(amountWETH, reservesWETH, reservesCORE);\r\n        pair.swap(coreOUT, 0, address(this), \"\");\r\n        tokenReserves[CORE] = tokenReserves[CORE].add(coreOUT);\r\n        tokenReserves[WETH] = IERC20(WETH).balanceOf(address(this)); \r\n        require(coreOUT >= minAmountCOREOut, \"Buy Slippage too high\");\r\n        emit COREBought(coreOUT);\r\n    }\r\n\r\n\r\n    function buyDAIforWETH(uint256 amountWETH, uint256 minAmountDAIOut) onlyOwner public {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);// DAI/WETH pair\r\n        safeTransfer(WETH, address(pair), amountWETH);\r\n        // DAI is token0\r\n        (uint256 reservesDAI, uint256 reservesWETH, ) = pair.getReserves();\r\n        uint256 daiOUT = getAmountOut(amountWETH, reservesWETH, reservesDAI);\r\n        pair.swap(daiOUT, 0, address(this), \"\");\r\n        tokenReserves[DAI] = IERC20(DAI).balanceOf(address(this)); \r\n        tokenReserves[WETH] = IERC20(WETH).balanceOf(address(this)); \r\n        require(daiOUT >= minAmountDAIOut, \"Buy Slippage too high\");\r\n    }\r\n\r\n    function sellDAIforWETH(uint256 amountDAI, uint256 minAmountWETH) onlyOwner public {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);// DAI/WETH pair\r\n        safeTransfer(DAI, address(pair), amountDAI);\r\n        // DAI is token0\r\n        (uint256 reservesDAI, uint256 reservesWETH, ) = pair.getReserves();\r\n        uint256 wethOUT = getAmountOut(amountDAI, reservesDAI, reservesWETH);\r\n        pair.swap(0, wethOUT, address(this), \"\");\r\n        tokenReserves[DAI] = IERC20(DAI).balanceOf(address(this)); \r\n        tokenReserves[WETH] = IERC20(WETH).balanceOf(address(this)); \r\n        require(wethOUT >= minAmountWETH, \"Buy Slippage too high\");\r\n    }   \r\n\r\n\r\n\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    /// Anti flash loan manipulation running averages\r\n    function updateRunningAverages() internal {\r\n         if(_averagePrices[DAI].lastBlockOfIncrement != block.number) {\r\n            _averagePrices[DAI].lastBlockOfIncrement = block.number;\r\n            updateRunningAveragePrice(DAI, false);\r\n          }\r\n         if(_averagePrices[CORE].lastBlockOfIncrement != block.number) {\r\n            _averagePrices[CORE].lastBlockOfIncrement = block.number;\r\n            updateRunningAveragePrice(CORE, false);\r\n         }\r\n    }\r\n\r\n    // This is out tokens per 1WETH (1e18 units)\r\n    function getAveragePriceLast20BlocksIn1WETHPriceWorth(address token) public view returns (uint256) {\r\n       return _averagePrices[token].cumulativeLast20Blocks.div(_averagePrices[token].arrayFull ? 20 : _averagePrices[token].lastAddedHead);\r\n       // We check if the \"array is full\" because 20 writes might not have happened yet\r\n       // And therefor the average would be skewed by dividing it by 20\r\n    }\r\n\r\n\r\n    // NOTE outTokenFor1WETH < lastQuote.mul(150).div(100) check\r\n    function updateRunningAveragePrice(address token, bool isRescue) internal returns (uint256) {\r\n\r\n        PriceAverage storage currentAveragePrices =  _averagePrices[token];\r\n        address pairWithWETH = IUniswapV2Factory(uniswapFactory).getPair(token, WETH);\r\n        uint256 wethReserves; uint256 tokenReserves;\r\n        if(WETH == IUniswapV2Pair(pairWithWETH).token0()) {\r\n            ( wethReserves, tokenReserves,) = IUniswapV2Pair(pairWithWETH).getReserves();\r\n        } else {\r\n            (tokenReserves, wethReserves,) = IUniswapV2Pair(pairWithWETH).getReserves();\r\n\r\n        }\r\n        // Get amt you would get for 1eth \r\n        uint256 outTokenFor1WETH = getAmountOut(1e18, wethReserves, tokenReserves);\r\n        // console.log(\"Inside running average out token for 1 weth is\", outTokenFor1WETH);\r\n\r\n        uint8 i = currentAveragePrices.lastAddedHead;\r\n        \r\n        ////////////////////\r\n        /// flash loan safety\r\n        //we check the last first quote price against current\r\n        uint256 oldestQuoteIndex;\r\n        if(currentAveragePrices.arrayFull == true) {\r\n            if (i != 19 ) {\r\n               oldestQuoteIndex = i + 1;\r\n            } // its 0 already else\r\n        } else {\r\n            if (i > 0) {\r\n                oldestQuoteIndex = i -1;\r\n            } // its 0 already else\r\n        }\r\n        uint256 firstQuote = currentAveragePrices.price[oldestQuoteIndex];\r\n \r\n        // Safety flash loan revert\r\n        // If change is above 50%\r\n        // This can be rescued by the bool \"isRescue\"\r\n        if(isRescue == false){\r\n            require(outTokenFor1WETH < firstQuote.mul(15000).div(10000), \"Change too big from first recorded price\");\r\n        }\r\n        ////////////////////\r\n        \r\n        currentAveragePrices.cumulativeLast20Blocks = currentAveragePrices.cumulativeLast20Blocks.sub(currentAveragePrices.price[i]);\r\n        currentAveragePrices.price[i] = outTokenFor1WETH;\r\n        currentAveragePrices.cumulativeLast20Blocks = currentAveragePrices.cumulativeLast20Blocks.add(outTokenFor1WETH);\r\n        currentAveragePrices.lastAddedHead++;\r\n        if(currentAveragePrices.lastAddedHead > 19) {\r\n            currentAveragePrices.lastAddedHead = 0;\r\n            currentAveragePrices.arrayFull = true;\r\n        }\r\n        return currentAveragePrices.cumulativeLast20Blocks;\r\n    }\r\n\r\n    // Because its possible that price of someting legitimately goes +50%\r\n    // Then the updateRunningAveragePrice would be stuck until it goes down,\r\n    // This allows the admin to \"rescue\" it by writing a new average\r\n    // skiping the +50% check\r\n    function rescueRatioLock(address token) public onlyOwner{\r\n        updateRunningAveragePrice(token, true);\r\n    }\r\n\r\n\r\n    function totalCreditsSnapShot(address [] memory allDepositors, uint256 _expectedLenght) public onlyOwner {\r\n\r\n        uint256 lenUsers = allDepositors.length;\r\n\r\n        for (uint256 loop = 0; loop < lenUsers; loop++) {\r\n            address curentAddress = allDepositors[loop];\r\n            if(snapshotAdded[curentAddress] == false) {\r\n                snapshotAdded[curentAddress] = true;\r\n                totalCOREUnitsContributed = totalCOREUnitsContributed.add(credit[curentAddress]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function editTotalUnits(uint256 _amountUnitsCORE, bool ifThisIsTrueItWillSubstractInsteadOfAdding) onlyOwner public {\r\n        if(ifThisIsTrueItWillSubstractInsteadOfAdding)    \r\n            { totalCOREUnitsContributed = totalCOREUnitsContributed.sub(totalCOREUnitsContributed); }\r\n        else {\r\n            totalCOREUnitsContributed = totalCOREUnitsContributed.add(totalCOREUnitsContributed);\r\n        }\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    /// Ending the LGE\r\n    function addLiquidityToPair() public onlyOwner {\r\n        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays), \"LGE : Liquidity generation ongoing\");\r\n        require(LGEFinished == false, \"LGE : Liquidity generation finished\");\r\n        require(IERC20(WETH).balanceOf(address(this)) < 1 ether, \"Too much WETH still left over in the contract\");\r\n        require(CORE_MULTISIG != address(0), \"CORE MUTISIG NOT SET\");\r\n        require(cCORE != address(0), \"cCORE NOT SET\");\r\n        require(cDAI != address(0), \"cDAI NOT SET\");\r\n        require(totalCOREUnitsContributed > 600e18, \"CORE total units are wrong\"); // 600 CORE\r\n        (uint256 COREValueETH, uint256 DAIValueETH) = getDAIandCOREReservesValueInETH();\r\n\r\n        //If there is too much CORE we just take it from the top, no refunds in LGE3\r\n        if(COREValueETH > DAIValueETH) {\r\n            uint256 DELTA = COREValueETH - DAIValueETH;\r\n            uint256 percentOfCORETooMuch = DELTA.mul(1e18).div(COREValueETH); // carry 1e18\r\n            // Skim too much\r\n            uint256 balanceCORE = IERC20(CORE).balanceOf(address(this));\r\n            safeTransfer(CORE, CORE_MULTISIG, balanceCORE.mul(percentOfCORETooMuch).div(1e18));\r\n        }\r\n\r\n        // Else DAI is bigger value, we just allow it to be 4% bigger max \r\n        // We set max deviation from price of 4%\r\n        require(COREValueETH.mul(104).div(100) > DAIValueETH, \"Deviation from current price is too high\" );\r\n\r\n        // !!!!!!!!!!!\r\n        //unlock wrapping\r\n        IERC95(cCORE).unpauseTransfers();\r\n        IERC95(cDAI).unpauseTransfers();\r\n        //!!!!!!!!!\r\n\r\n        // Optimistically get pair\r\n        cDAIxcCOREUniswapPair = IUniswapV2Factory(uniswapFactory).getPair(cCORE , cDAI);\r\n        if(cDAIxcCOREUniswapPair == address(0)) { // Pair doesn't exist yet \r\n            // create pair returns address\r\n            cDAIxcCOREUniswapPair = IUniswapV2Factory(uniswapFactory).createPair(\r\n                cDAI,\r\n                cCORE\r\n            );\r\n        }\r\n\r\n\r\n        uint256 balanceCORE = IERC20(CORE).balanceOf(address(this));\r\n        uint256 balanceDAI = IERC20(DAI).balanceOf(address(this));\r\n        uint256 DEV_FEE = 1000; \r\n        address CORE_MULTISIG = ICoreVault(coreGlobals.COREVaultAddress()).devaddr();\r\n        uint256 devFeeCORE = balanceCORE.mul(DEV_FEE).div(10000);\r\n        uint256 devFeeDAI = balanceDAI.mul(DEV_FEE).div(10000);\r\n\r\n\r\n        // transfer dev fee\r\n        safeTransfer(CORE, CORE_MULTISIG, devFeeCORE);\r\n        safeTransfer(DAI, CORE_MULTISIG, devFeeDAI);\r\n\r\n        // Wrap and send to uniswap pair\r\n\r\n        safeTransfer(CORE, cCORE, balanceCORE.sub(devFeeCORE));\r\n        safeTransfer(DAI, cDAI, balanceDAI.sub(devFeeDAI));\r\n\r\n        IERC95(cCORE).wrapAtomic(cDAIxcCOREUniswapPair);\r\n        IERC95(cDAI).wrapAtomic(cDAIxcCOREUniswapPair);\r\n\r\n\r\n        require(IERC95(cDAI).balanceOf(cDAIxcCOREUniswapPair) == balanceDAI.sub(devFeeDAI), \"Pair did not recieve enough DAI\");\r\n        require(IERC95(cDAI).balanceOf(cDAIxcCOREUniswapPair) > 15e23 , \"Pair did not recieve enough DAI\"); //1.5mln dai\r\n        require(IERC95(cCORE).balanceOf(cDAIxcCOREUniswapPair) == balanceCORE.sub(devFeeCORE), \"Pair did not recieve enough CORE\");\r\n        require(IERC95(cCORE).balanceOf(cDAIxcCOREUniswapPair) > 350e18 , \"Pair did not recieve enough CORE\"); //350 core\r\n\r\n\r\n        // Mint tokens from uniswap pair\r\n        IUniswapV2Pair pair = IUniswapV2Pair(cDAIxcCOREUniswapPair); // cCORE/cDAI pair\r\n        \r\n        //we get lp tokens\r\n        require(pair.totalSupply() == 0, \"Somehow total supply is higher, sanity fail\");\r\n        pair.mint(address(this));\r\n        require(pair.totalSupply() > 0, \"We didn't create tokens!\");\r\n\r\n        totalLPCreated = pair.balanceOf(address(this));\r\n        LPPerCOREUnitContributed = totalLPCreated.mul(1e18).div(totalCOREUnitsContributed); // Stored as 1e18 more for round erorrs and change\r\n        require(LPPerCOREUnitContributed > 0, \"LP Per Unit Contribute Must be above Zero\");\r\n        require(totalLPCreated >= 27379e18, \"Didn't create enough lp\");\r\n        //Sync pair\r\n        ICORETransferHandler(coreGlobals.TransferHandler()).sync(cDAIxcCOREUniswapPair);\r\n\r\n        LGEFinished = true;\r\n\r\n    }\r\n\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    /// Helper functions\r\n\r\n\r\n    // If LGE doesn't trigger in 24h after its complete its possible to withdraw tokens\r\n    // Because then we can assume something went wrong since LGE is a publically callable function\r\n    // And otherwise everything is stuck.\r\n    function safetyTokenWithdraw(address token) onlyOwner public {\r\n        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays).add(1 days));\r\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n    function safetyETHWithdraw() onlyOwner public {\r\n        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays).add(1 days));\r\n        msg.sender.call.value(address(this).balance)(\"\");\r\n    }\r\n\r\n    function setCDAI(address _cDAI) onlyOwner public {\r\n        cDAI = _cDAI;\r\n    }\r\n\r\n    function setcCORE(address _cCORE) onlyOwner public {\r\n        cCORE = _cCORE;\r\n    }\r\n\r\n    // Added safety function to extend LGE in case multisig #2 isn't avaiable from emergency life events\r\n    // TODO x3 add your key here\r\n    function editLGETime(uint256 numHours, bool shouldSubstract) public {\r\n        require(msg.sender == 0x82810e81CAD10B8032D39758C8DBa3bA47Ad7092 \r\n            || msg.sender == 0xC91FE1ee441402D854B8F22F94Ddf66618169636 \r\n            || msg.sender == CORE_MULTISIG, \"LGE: Requires admin\");\r\n        require(numHours <= 24);\r\n        if(shouldSubstract) {\r\n            LGEDurationDays = LGEDurationDays.sub(numHours.mul(1 hours));\r\n        } else {\r\n            LGEDurationDays = LGEDurationDays.add(numHours.mul(1 hours));\r\n        }\r\n    }\r\n\r\n    function pauseLGE() public {\r\n        require(msg.sender == 0x82810e81CAD10B8032D39758C8DBa3bA47Ad7092 \r\n            || msg.sender == 0xC91FE1ee441402D854B8F22F94Ddf66618169636 \r\n            || msg.sender == CORE_MULTISIG, \"LGE: Requires admin\");\r\n        require(LGEPaused == false, \"LGE : LGE Already paused\");\r\n        contractStartTimestampSaved = contractStartTimestamp;\r\n        contractStartTimestamp = uint256(-1);\r\n        LGEPaused = true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    // Note selling tokens doesn't need slippage protection usually\r\n    // Because front run bots dont hold, usually\r\n    // but maybe rekt\r\n    function sellTokenForWETH(address _token, uint256 _amountTransfer, bool fromPerson) internal returns (uint256 amountOut) {\r\n        \r\n        // we just sell on uni cause fuck you\r\n        // console.log(\"Selling token\", _token);\r\n        require(_token != DAI, \"No sell DAI\");\r\n        address pairWithWETH = IUniswapV2Factory(uniswapFactory).getPair(_token, WETH);\r\n        require(pairWithWETH != address(0), \"Unsupported shitcoin\"); \r\n        // console.log(\"Got pair with shitcoin\", pairWithWETH);\r\n        // console.log(\"selling token for amount\", _amountTransfer);\r\n\r\n        IERC20 shitcoin = IERC20(_token);\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairWithWETH);\r\n        // check how much pair has\r\n        uint256 balanceBefore = shitcoin.balanceOf(pairWithWETH); // can pumpthis, but fails later\r\n        // Send all token to pair\r\n        if(fromPerson) {\r\n            safeTransferFrom(_token, msg.sender, pairWithWETH, _amountTransfer); // re\r\n        } else {\r\n            safeTransfer(_token, pairWithWETH, _amountTransfer);\r\n        }\r\n        // check how much it got\r\n        uint256 balanceAfter = shitcoin.balanceOf(pairWithWETH);\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        // console.log(\"Reserve0\",reserve0);\r\n        // console.log(\"Reserve1\",reserve1);\r\n\r\n        uint256 DELTA = balanceAfter.sub(balanceBefore, \"Fuqq\");\r\n        // console.log(\"Delta after send\", DELTA);\r\n        // Make a swaperoo                    \r\n        if(pair.token0() == _token) { // weth is 1\r\n                                       // in, reservein, reserveout\r\n            amountOut = getAmountOut(DELTA, reserve0, reserve1);\r\n            require(amountOut < reserve1.mul(30).div(100), \"Too much slippage in selling\");\r\n            pair.swap(0, amountOut, address(this), \"\");\r\n\r\n        } else { // WETH is 0\r\n            amountOut = getAmountOut(DELTA, reserve1, reserve0);\r\n            pair.swap(amountOut, 0, address(this), \"\");\r\n            require(amountOut < reserve0.mul(30).div(100), \"Too much slippage in selling\");\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'LGE3: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'LGE3: TRANSFER_FROM_FAILED');\r\n    }\r\n   \r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"COREamt\",\"type\":\"uint256\"}],\"name\":\"COREBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"COREvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Contibution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORE_MULTISIG\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LGEDurationDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LGEFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LGEPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LGEStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPPerCOREUnitContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityToPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountCOREOut\",\"type\":\"uint256\"}],\"name\":\"buyCOREforWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountDAIOut\",\"type\":\"uint256\"}],\"name\":\"buyDAIforWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cCORE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDAIxcCOREUniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndStakeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartTimestampSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountContribution\",\"type\":\"uint256\"}],\"name\":\"contributeWithAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreGlobals\",\"outputs\":[{\"internalType\":\"contract ICOREGlobals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"doNotSellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numHours\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldSubstract\",\"type\":\"bool\"}],\"name\":\"editLGETime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUnitsCORE\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ifThisIsTrueItWillSubstractInsteadOfAdding\",\"type\":\"bool\"}],\"name\":\"editTotalUnits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAveragePriceLast20BlocksIn1WETHPriceWorth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLGEContributionsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"COREValueETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DAIValueETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLGEOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueRatioLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyETHWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"safetyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountWETH\",\"type\":\"uint256\"}],\"name\":\"sellDAIforWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cDAI\",\"type\":\"address\"}],\"name\":\"setCDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cCORE\",\"type\":\"address\"}],\"name\":\"setcCORE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"snapshotAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allDepositors\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_expectedLenght\",\"type\":\"uint256\"}],\"name\":\"totalCreditsSnapShot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CORE_LGE_3","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ad85c347d74d28eb5c92a296e54c2315558862891df952f7ee73e0d0c1f523da"}]}