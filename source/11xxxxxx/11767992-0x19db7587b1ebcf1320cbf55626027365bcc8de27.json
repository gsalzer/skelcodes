{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.6.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// File: contracts/protocol/IController.sol\r\n\r\ninterface IController {\r\n    function ADMIN_ROLE() external view returns (bytes32);\r\n\r\n    function HARVESTER_ROLE() external view returns (bytes32);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n\r\n    function setAdmin(address _admin) external;\r\n\r\n    function setTreasury(address _treasury) external;\r\n\r\n    function grantRole(bytes32 _role, address _addr) external;\r\n\r\n    function revokeRole(bytes32 _role, address _addr) external;\r\n\r\n    /*\r\n    @notice Set strategy for vault\r\n    @param _vault Address of vault\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\r\n    */\r\n    function setStrategy(\r\n        address _vault,\r\n        address _strategy,\r\n        uint _min\r\n    ) external;\r\n\r\n    // calls to strategy\r\n    /*\r\n    @notice Invest token in vault into strategy\r\n    @param _vault Address of vault\r\n    */\r\n    function invest(address _vault) external;\r\n\r\n    function harvest(address _strategy) external;\r\n\r\n    function skim(address _strategy) external;\r\n\r\n    /*\r\n    @notice Withdraw from strategy to vault\r\n    @param _strategy Address of strategy\r\n    @param _amount Amount of underlying token to withdraw\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function withdraw(\r\n        address _strategy,\r\n        uint _amount,\r\n        uint _min\r\n    ) external;\r\n\r\n    /*\r\n    @notice Withdraw all from strategy to vault\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function withdrawAll(address _strategy, uint _min) external;\r\n\r\n    /*\r\n    @notice Exit from strategy\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function exit(address _strategy, uint _min) external;\r\n}\r\n\r\n// File: contracts/protocol/IVault.sol\r\n\r\n/*\r\nversion 1.2.0\r\n\r\nChanges\r\n- function deposit(uint) declared in IERC20Vault\r\n*/\r\n\r\ninterface IVault {\r\n    function admin() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function timeLock() external view returns (address);\r\n\r\n    /*\r\n    @notice For EthVault, must return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    */\r\n    function token() external view returns (address);\r\n\r\n    function strategy() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (bool);\r\n\r\n    function reserveMin() external view returns (uint);\r\n\r\n    function withdrawFee() external view returns (uint);\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function whitelist(address _addr) external view returns (bool);\r\n\r\n    function setWhitelist(address _addr, bool _approve) external;\r\n\r\n    function setAdmin(address _admin) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function setTimeLock(address _timeLock) external;\r\n\r\n    function setPause(bool _paused) external;\r\n\r\n    function setReserveMin(uint _reserveMin) external;\r\n\r\n    function setWithdrawFee(uint _fee) external;\r\n\r\n    /*\r\n    @notice Returns the amount of asset (ETH or ERC20) in the vault\r\n    */\r\n    function balanceInVault() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns the estimate amount of asset in strategy\r\n    @dev Output may vary depending on price of liquidity provider token\r\n         where the underlying asset is invested\r\n    */\r\n    function balanceInStrategy() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns amount of tokens invested strategy\r\n    */\r\n    function totalDebtInStrategy() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns the total amount of asset in vault + total debt\r\n    */\r\n    function totalAssets() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns minimum amount of tokens that should be kept in vault for\r\n            cheap withdraw\r\n    @return Reserve amount\r\n    */\r\n    function minReserve() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns the amount of tokens available to be invested\r\n    */\r\n    function availableToInvest() external view returns (uint);\r\n\r\n    /*\r\n    @notice Approve strategy\r\n    @param _strategy Address of strategy\r\n    */\r\n    function approveStrategy(address _strategy) external;\r\n\r\n    /*\r\n    @notice Revoke strategy\r\n    @param _strategy Address of strategy\r\n    */\r\n    function revokeStrategy(address _strategy) external;\r\n\r\n    /*\r\n    @notice Set strategy\r\n    @param _min Minimum undelying asset current strategy must return. Prevents slippage\r\n    */\r\n    function setStrategy(address _strategy, uint _min) external;\r\n\r\n    /*\r\n    @notice Transfers asset in vault to strategy\r\n    */\r\n    function invest() external;\r\n\r\n    /*\r\n    @notice Calculate amount of asset that can be withdrawn\r\n    @param _shares Amount of shares\r\n    @return Amount of asset that can be withdrawn\r\n    */\r\n    function getExpectedReturn(uint _shares) external view returns (uint);\r\n\r\n    /*\r\n    @notice Withdraw asset\r\n    @param _shares Amount of shares to burn\r\n    @param _min Minimum amount of asset expected to return\r\n    */\r\n    function withdraw(uint _shares, uint _min) external;\r\n\r\n    /*\r\n    @notice Transfer asset in vault to admin\r\n    @param _token Address of asset to transfer\r\n    @dev _token must not be equal to vault asset\r\n    */\r\n    function sweep(address _token) external;\r\n}\r\n\r\n// File: contracts/protocol/IStrategy.sol\r\n\r\n/*\r\nversion 1.2.0\r\n\r\nChanges\r\n\r\nChanges listed here do not affect interaction with other contracts (Vault and Controller)\r\n- removed function assets(address _token) external view returns (bool);\r\n- remove function deposit(uint), declared in IStrategyERC20\r\n- add function setSlippage(uint _slippage);\r\n- add function setDelta(uint _delta);\r\n*/\r\n\r\ninterface IStrategy {\r\n    function admin() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    /*\r\n    @notice Returns address of underlying asset (ETH or ERC20)\r\n    @dev Must return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for ETH strategy\r\n    */\r\n    function underlying() external view returns (address);\r\n\r\n    /*\r\n    @notice Returns total amount of underlying transferred from vault\r\n    */\r\n    function totalDebt() external view returns (uint);\r\n\r\n    function performanceFee() external view returns (uint);\r\n\r\n    function slippage() external view returns (uint);\r\n\r\n    /* \r\n    @notice Multiplier used to check total underlying <= total debt * delta / DELTA_MIN\r\n    */\r\n    function delta() external view returns (uint);\r\n\r\n    function setAdmin(address _admin) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function setPerformanceFee(uint _fee) external;\r\n\r\n    function setSlippage(uint _slippage) external;\r\n\r\n    function setDelta(uint _delta) external;\r\n\r\n    /*\r\n    @notice Returns amount of underlying asset locked in this contract\r\n    @dev Output may vary depending on price of liquidity provider token\r\n         where the underlying asset is invested\r\n    */\r\n    function totalAssets() external view returns (uint);\r\n\r\n    /*\r\n    @notice Withdraw `_amount` underlying asset\r\n    @param amount Amount of underlying asset to withdraw\r\n    */\r\n    function withdraw(uint _amount) external;\r\n\r\n    /*\r\n    @notice Withdraw all underlying asset from strategy\r\n    */\r\n    function withdrawAll() external;\r\n\r\n    /*\r\n    @notice Sell any staking rewards for underlying and then deposit undelying\r\n    */\r\n    function harvest() external;\r\n\r\n    /*\r\n    @notice Increase total debt if profit > 0 and total assets <= max,\r\n            otherwise transfers profit to vault.\r\n    @dev Guard against manipulation of external price feed by checking that\r\n         total assets is below factor of total debt\r\n    */\r\n    function skim() external;\r\n\r\n    /*\r\n    @notice Exit from strategy\r\n    @dev Must transfer all underlying tokens back to vault\r\n    */\r\n    function exit() external;\r\n\r\n    /*\r\n    @notice Transfer token accidentally sent here to admin\r\n    @param _token Address of token to transfer\r\n    @dev _token must not be equal to underlying token\r\n    */\r\n    function sweep(address _token) external;\r\n}\r\n\r\n// File: contracts/AccessControl.sol\r\n\r\ncontract AccessControl {\r\n    event GrantRole(bytes32 indexed role, address indexed addr);\r\n    event RevokeRole(bytes32 indexed role, address indexed addr);\r\n\r\n    mapping(bytes32 => mapping(address => bool)) public hasRole;\r\n\r\n    modifier onlyAuthorized(bytes32 _role) {\r\n        require(hasRole[_role][msg.sender], \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    function _grantRole(bytes32 _role, address _addr) internal {\r\n        require(_addr != address(0), \"address = zero\");\r\n\r\n        hasRole[_role][_addr] = true;\r\n\r\n        emit GrantRole(_role, _addr);\r\n    }\r\n\r\n    function _revokeRole(bytes32 _role, address _addr) internal {\r\n        require(_addr != address(0), \"address = zero\");\r\n\r\n        hasRole[_role][_addr] = false;\r\n\r\n        emit RevokeRole(_role, _addr);\r\n    }\r\n}\r\n\r\n// File: contracts/Controller.sol\r\n\r\n/*\r\nversion 1.2.0\r\n\r\nChanges from Controller 1.1.0\r\n- Check vault and strategy are approved by admin.\r\n  Protect from arbitrary contract to be passed into invest, harvest, skim, etc...\r\n- compatible with ERC20 and ETH vault / strategy\r\n  (checks withdraw min for ERC20 and ETH strategies)\r\n- add setStrategyAndInvest\r\n*/\r\n\r\ncontract Controller is IController, AccessControl {\r\n    using SafeMath for uint;\r\n\r\n    event ApproveVault(address vault, bool approved);\r\n    event ApproveStrategy(address strategy, bool approved);\r\n\r\n    // WARNING: not address of ETH, used as placeholder\r\n    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    // keccak256(abi.encodePacked(\"ADMIN\"));\r\n    bytes32 public constant override ADMIN_ROLE =\r\n        0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42;\r\n    // keccak256(abi.encodePacked(\"HARVESTER\"));\r\n    bytes32 public constant override HARVESTER_ROLE =\r\n        0x27e3e4d29d60af3ae6456513164bb5db737d6fc8610aa36ad458736c9efb884c;\r\n\r\n    address public override admin;\r\n    // treasury must be able to receive ETH from ETH vault and strategy\r\n    address public override treasury;\r\n\r\n    // approved vaults\r\n    mapping(address => bool) public vaults;\r\n    // approved strategies\r\n    mapping(address => bool) public strategies;\r\n\r\n    constructor(address _treasury) public {\r\n        require(_treasury != address(0), \"treasury = zero address\");\r\n\r\n        admin = msg.sender;\r\n        treasury = _treasury;\r\n\r\n        _grantRole(ADMIN_ROLE, admin);\r\n        _grantRole(HARVESTER_ROLE, admin);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"!admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyApprovedVault(address _vault) {\r\n        require(vaults[_vault], \"!approved vault\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyApprovedStrategy(address _strategy) {\r\n        require(strategies[_strategy], \"!approved strategy\");\r\n        _;\r\n    }\r\n\r\n    modifier isCurrentStrategy(address _strategy) {\r\n        address vault = IStrategy(_strategy).vault();\r\n        /*\r\n        Check that _strategy is the current strategy used by the vault.\r\n        */\r\n        require(IVault(vault).strategy() == _strategy, \"!strategy\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _admin) external override onlyAdmin {\r\n        require(_admin != address(0), \"admin = zero address\");\r\n\r\n        _revokeRole(ADMIN_ROLE, admin);\r\n        _revokeRole(HARVESTER_ROLE, admin);\r\n\r\n        _grantRole(ADMIN_ROLE, _admin);\r\n        _grantRole(HARVESTER_ROLE, _admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    function setTreasury(address _treasury) external override onlyAdmin {\r\n        require(_treasury != address(0), \"treasury = zero address\");\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function grantRole(bytes32 _role, address _addr) external override onlyAdmin {\r\n        require(_role == ADMIN_ROLE || _role == HARVESTER_ROLE, \"invalid role\");\r\n        _grantRole(_role, _addr);\r\n    }\r\n\r\n    function revokeRole(bytes32 _role, address _addr) external override onlyAdmin {\r\n        require(_role == ADMIN_ROLE || _role == HARVESTER_ROLE, \"invalid role\");\r\n        _revokeRole(_role, _addr);\r\n    }\r\n\r\n    function approveVault(address _vault) external onlyAdmin {\r\n        require(!vaults[_vault], \"already approved vault\");\r\n        vaults[_vault] = true;\r\n        emit ApproveVault(_vault, true);\r\n    }\r\n\r\n    function revokeVault(address _vault) external onlyAdmin {\r\n        require(vaults[_vault], \"!approved vault\");\r\n        vaults[_vault] = false;\r\n        emit ApproveVault(_vault, false);\r\n    }\r\n\r\n    function approveStrategy(address _strategy) external onlyAdmin {\r\n        require(!strategies[_strategy], \"already approved strategy\");\r\n        strategies[_strategy] = true;\r\n        emit ApproveStrategy(_strategy, true);\r\n    }\r\n\r\n    function revokeStrategy(address _strategy) external onlyAdmin {\r\n        require(strategies[_strategy], \"!approved strategy\");\r\n        strategies[_strategy] = false;\r\n        emit ApproveStrategy(_strategy, false);\r\n    }\r\n\r\n    function setStrategy(\r\n        address _vault,\r\n        address _strategy,\r\n        uint _min\r\n    ) external override onlyAuthorized(ADMIN_ROLE) {\r\n        IVault(_vault).setStrategy(_strategy, _min);\r\n    }\r\n\r\n    function invest(address _vault)\r\n        external\r\n        override\r\n        onlyAuthorized(HARVESTER_ROLE)\r\n        onlyApprovedVault(_vault)\r\n    {\r\n        IVault(_vault).invest();\r\n    }\r\n\r\n    /*\r\n    @notice Set strategy for vault and invest\r\n    @param _vault Address of vault\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\r\n    @dev Set strategy and invest in single transaction to avoid front running\r\n    */\r\n    function setStrategyAndInvest(\r\n        address _vault,\r\n        address _strategy,\r\n        uint _min\r\n    ) external onlyAuthorized(ADMIN_ROLE) {\r\n        IVault(_vault).setStrategy(_strategy, _min);\r\n        IVault(_vault).invest();\r\n    }\r\n\r\n    function harvest(address _strategy)\r\n        external\r\n        override\r\n        onlyAuthorized(HARVESTER_ROLE)\r\n        onlyApprovedStrategy(_strategy)\r\n        isCurrentStrategy(_strategy)\r\n    {\r\n        IStrategy(_strategy).harvest();\r\n    }\r\n\r\n    function skim(address _strategy)\r\n        external\r\n        override\r\n        onlyAuthorized(HARVESTER_ROLE)\r\n        onlyApprovedStrategy(_strategy)\r\n        isCurrentStrategy(_strategy)\r\n    {\r\n        IStrategy(_strategy).skim();\r\n    }\r\n\r\n    modifier checkWithdraw(address _strategy, uint _min) {\r\n        address vault = IStrategy(_strategy).vault();\r\n        address token = IVault(vault).token();\r\n\r\n        uint balBefore;\r\n        uint balAfter;\r\n        if (token == ETH) {\r\n            balBefore = address(vault).balance;\r\n            _;\r\n            balAfter = address(vault).balance;\r\n        } else {\r\n            balBefore = IERC20(token).balanceOf(vault);\r\n            _;\r\n            balAfter = IERC20(token).balanceOf(vault);\r\n        }\r\n\r\n        require(balAfter.sub(balBefore) >= _min, \"withdraw < min\");\r\n    }\r\n\r\n    function withdraw(\r\n        address _strategy,\r\n        uint _amount,\r\n        uint _min\r\n    )\r\n        external\r\n        override\r\n        onlyAuthorized(HARVESTER_ROLE)\r\n        onlyApprovedStrategy(_strategy)\r\n        isCurrentStrategy(_strategy)\r\n        checkWithdraw(_strategy, _min)\r\n    {\r\n        IStrategy(_strategy).withdraw(_amount);\r\n    }\r\n\r\n    function withdrawAll(address _strategy, uint _min)\r\n        external\r\n        override\r\n        onlyAuthorized(HARVESTER_ROLE)\r\n        onlyApprovedStrategy(_strategy)\r\n        isCurrentStrategy(_strategy)\r\n        checkWithdraw(_strategy, _min)\r\n    {\r\n        IStrategy(_strategy).withdrawAll();\r\n    }\r\n\r\n    function exit(address _strategy, uint _min)\r\n        external\r\n        override\r\n        onlyAuthorized(ADMIN_ROLE)\r\n        onlyApprovedStrategy(_strategy)\r\n        isCurrentStrategy(_strategy)\r\n        checkWithdraw(_strategy, _min)\r\n    {\r\n        IStrategy(_strategy).exit();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GrantRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RevokeRole\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARVESTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"approveVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"revokeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setStrategyAndInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009a4c3fc4683b95ebf11b535057b00812f6a549bb","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ce4ac617069d87601c9f954e4050815721eaefe03653d9ab2fde6e431f862284"}]}