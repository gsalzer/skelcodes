{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RoyalDecks.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/SafeMath96.sol\\\";\\nimport \\\"./libraries/SafeMath32.sol\\\";\\n\\n// Stake a package from one NFT and some amount of $KINGs to \\\"farm\\\" more $KINGs.\\n// If $KING airdrops for NFT holders happen, rewards will go to stake holders.\\ncontract RoyalDecks is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeMath96 for uint96;\\n    using SafeMath32 for uint32;\\n\\n    using SafeERC20 for IERC20;\\n\\n    // The $KING amount to return on stake withdrawal is calculated as:\\n    // `amountDue = Stake.amountStaked * TermSheet.kingFactor/1e+6` (1)\\n\\n    // On top of amount (1), airdrop $KING rewards may be distributed\\n    // between NFTs holders. The contract collects airdrops for users.\\n    // Any time, pended airdrop $KING amount entitled to a stake holder:\\n    // `airdrop = accAirKingPerNft[nft] - accAirKingBias[stakeId]`  (2)\\n\\n    struct Stake {\\n        uint96 amountStaked;   // $KING amount staked on `startTime`\\n        uint96 amountDue;      // $KING amount due on `unlockTime`\\n        uint32 startTime;      // UNIX-time the tokens get staked on\\n        uint32 unlockTime;     // UNIX-time the tokens get locked until\\n    }\\n\\n    struct TermSheet {\\n        bool enabled;          // If staking is enabled\\n        address nft;           // ERC-721 contract of the NFT to stake\\n        uint96 minAmount;      // Min $KING amount to stake (with the NFT)\\n        uint96 kingFactor;     // Multiplier, scaled by 1e+6 (see (1) above)\\n        uint16 lockHours;      // Staking period in hours\\n    }\\n\\n    // All stakes of a user\\n    struct UserStakes {\\n        // Set of (unique) stake IDs (see `encodeStakeId` function)\\n        uint256[] ids;\\n        // Mapping from stake ID to stake data\\n        mapping(uint256 => Stake) data;\\n    }\\n\\n    bool public emergencyWithdrawEnabled = false;\\n\\n    // Latest block when airdrops rewards was \\\"collected\\\"\\n    uint32 lastAirBlock;\\n\\n    // Amounts in $KING\\n    uint96 public kingDue;\\n    uint96 public kingReserves;\\n\\n    // The $KING token contract\\n    address public king;\\n\\n    // Info on each TermSheet\\n    TermSheet[] internal termSheets;\\n\\n    // Addresses and \\\"airdrop weights\\\" of NFT contracts (stored as uint256)\\n    uint256[] internal airPools;\\n    uint256 constant internal MAX_AIR_POOLS_QTY = 12; // to limit gas\\n\\n    // Mapping from user account to user stakes\\n    mapping(address => UserStakes) internal stakes;\\n\\n    // Mapping from NFT address to accumulated airdrop rewards - see (2) above\\n    mapping(address => uint256) internal accAirKingPerNft;\\n\\n    // Mapping from stake ID to \\\"reward bias\\\" for the stake - see (2) above\\n    mapping(uint256 => uint256) internal accAirKingBias;\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 stakeId,       // ID of the NFT\\n        uint256 amountStaked,  // $KING amount staked\\n        uint256 amountDue,     // $KING amount to be returned\\n        uint256 unlockTime     // UNIX-time when the stake is unlocked\\n    );\\n\\n    event Withdraw(\\n        address indexed user,\\n        uint256 stakeId        // ID of the NFT\\n    );\\n\\n    event Emergency(bool enabled);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 stakeId        // ID of the NFT\\n    );\\n\\n    event NewTermSheet(\\n        uint256 indexed termsId,\\n        address indexed nft,   // Address of the ERC-721 contract\\n        uint256 minAmount,     // Min $KING amount to stake\\n        uint256 lockHours,     // Staking period in hours\\n        uint256 kingFactor     // See (1) above\\n    );\\n\\n    event TermsEnabled(uint256 indexed termsId);\\n    event TermsDisabled(uint256 indexed termsId);\\n\\n    // $KING added to or removed from stakes repayment reserves\\n    event Reserved(uint256 amount);\\n    event Removed(uint256 amount);\\n\\n    // $KING amount collected as an airdrop reward\\n    event Airdrop(uint256 amount);\\n\\n    constructor(address _king) public {\\n        king = _king;\\n    }\\n\\n    // Stake ID uniquely identifies a stake\\n    // (`stakeHours` excessive for stakes identification but needed for the UI)\\n    function encodeStakeId(\\n        address nft,           // NFT contract address\\n        uint256 nftId,         // Token ID (limited to 48 bits)\\n        uint256 startTime,     // UNIX time (limited to 32 bits)\\n        uint256 stakeHours     // Stake duration (limited to 16 bits)\\n    ) public pure returns (uint256) {\\n        require(nftId < 2**48, \\\"RDeck::nftId_EXCEEDS_48_BITS\\\");\\n        require(startTime < 2**32, \\\"RDeck::nftId_EXCEEDS_32_BITS\\\");\\n        require(stakeHours < 2**16, \\\"RDeck::stakeHours_EXCEEDS_16_BITS\\\");\\n        return _encodeStakeId(nft, nftId, startTime, stakeHours);\\n    }\\n\\n    function decodeStakeId(uint256 stakeId)\\n        public\\n        pure\\n        returns (\\n            address nft,\\n            uint256 nftId,\\n            uint256 startTime,\\n            uint256 stakeHours\\n        )\\n    {\\n        nft = address(stakeId >> 96);\\n        nftId = (stakeId >> 48) & (2**48 - 1);\\n        startTime = (stakeId >> 16) & (2**32 - 1);\\n        stakeHours = stakeId & (2**16 - 1);\\n    }\\n\\n    function stakeIds(address user) external view returns (uint256[] memory) {\\n        _revertZeroAddress(user);\\n        UserStakes storage userStakes = stakes[user];\\n        return userStakes.ids;\\n    }\\n\\n    function stakeData(\\n        address user,\\n        uint256 stakeId\\n    ) external view returns (Stake memory)\\n    {\\n        return stakes[_nonZeroAddr(user)].data[stakeId];\\n    }\\n\\n    function pendedAirdrop(\\n        uint256 stakeId\\n    ) external view returns (uint256 kingAmount) {\\n        kingAmount = 0;\\n        (address nft, , , ) = decodeStakeId(stakeId);\\n        if (nft != address(0)) {\\n            uint256 accAir = accAirKingPerNft[nft];\\n            if (accAir > 1) {\\n                uint256 bias = accAirKingBias[stakeId];\\n                if (accAir > bias) kingAmount = accAir.sub(bias);\\n            }\\n        }\\n    }\\n\\n    function termSheet(uint256 termsId) external view returns (TermSheet memory) {\\n        return termSheets[_validTermsID(termsId)];\\n    }\\n\\n    function termsLength() external view returns (uint256) {\\n        return termSheets.length;\\n    }\\n\\n    // Deposit 1 NFT and `kingAmount` of $KING\\n    function deposit(\\n        uint256 termsId,       // term sheet ID\\n        uint256 nftId,         // ID of NFT to stake\\n        uint256 kingAmount     // $KING amount to stake\\n    ) public nonReentrant {\\n        TermSheet memory terms = termSheets[_validTermsID(termsId)];\\n        require(terms.enabled, \\\"deposit: terms disabled\\\");\\n\\n        uint96 amountStaked = SafeMath96.fromUint(kingAmount);\\n        require(amountStaked >= terms.minAmount, \\\"deposit: too small amount\\\");\\n\\n        uint96 amountDue = SafeMath96.fromUint(\\n            kingAmount.mul(uint256(terms.kingFactor)).div(1e6)\\n        );\\n        uint96 _totalDue = kingDue.add(amountDue);\\n        uint96 _newReserves = kingReserves.add(amountStaked);\\n        require(_newReserves >= _totalDue, \\\"deposit: too low reserves\\\");\\n\\n        uint256 stakeId = _encodeStakeId(\\n            terms.nft,\\n            nftId,\\n            now,\\n            terms.lockHours\\n        );\\n\\n        IERC20(king).safeTransferFrom(msg.sender, address(this), amountStaked);\\n        IERC721(terms.nft).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            nftId,\\n            _NFT_PASS\\n        );\\n\\n        kingDue = _totalDue;\\n        kingReserves = _newReserves;\\n\\n        uint32 startTime = SafeMath32.fromUint(now);\\n        uint32 unlockTime = startTime.add(uint32(terms.lockHours) * 3600);\\n        _addUserStake(\\n            stakes[msg.sender],\\n            stakeId,\\n            Stake(\\n                amountStaked,\\n                amountDue,\\n                startTime,\\n                SafeMath32.fromUint(unlockTime)\\n            )\\n        );\\n\\n        uint256 accAir = accAirKingPerNft[terms.nft];\\n        if (accAir > 1) accAirKingBias[stakeId] = accAir;\\n\\n        emit Deposit(msg.sender, stakeId, kingAmount, amountDue, unlockTime);\\n    }\\n\\n    // Withdraw staked 1 NFT and entire $KING token amount due\\n    function withdraw(uint256 stakeId) public nonReentrant {\\n        _withdraw(stakeId, false);\\n        emit Withdraw(msg.sender, stakeId);\\n    }\\n\\n    // Withdraw staked 1 NFT and staked $KING token amount, w/o any rewards\\n    // !!! All possible rewards entitled be lost. Use in emergency only !!!\\n    function emergencyWithdraw(uint256 stakeId) public nonReentrant {\\n        _withdraw(stakeId, true);\\n        emit EmergencyWithdraw(msg.sender, stakeId);\\n    }\\n\\n    // Account for $KING amount the contact has got as airdrops for NFTs staked\\n    // !!! Be cautious of high gas cost\\n    function collectAirdrops() external nonReentrant {\\n        if (block.number <= lastAirBlock) return;\\n        lastAirBlock = SafeMath32.fromUint(block.number);\\n\\n        // $KING balance exceeding `kingReserves` treated as airdrop rewards\\n        uint256 reward;\\n        {\\n            uint256 _kingReserves = kingReserves;\\n            uint256 kingBalance = IERC20(king).balanceOf(address(this));\\n            if (kingBalance <= _kingReserves) return;\\n            reward = kingBalance.sub(_kingReserves);\\n            kingReserves = SafeMath96.fromUint(_kingReserves.add(reward));\\n            kingDue = kingDue.add(uint96(reward));\\n        }\\n\\n        // First, compute \\\"weights\\\" for rewards distribution\\n        address[MAX_AIR_POOLS_QTY] memory nfts;\\n        uint256[MAX_AIR_POOLS_QTY] memory weights;\\n        uint256 totalWeight;\\n        uint256 qty = airPools.length;\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < qty; i++) {\\n            (address nft, uint256 weight) = _unpackAirPoolData(airPools[i]);\\n            uint256 nftQty = IERC721(nft).balanceOf(address(this));\\n            if (nftQty == 0 || weight == 0) continue;\\n            nfts[k] = nft;\\n            weights[k] = weight;\\n            k++;\\n            totalWeight = totalWeight.add(nftQty.mul(weight));\\n        }\\n\\n        // Then account for rewards in pools\\n        for (uint i = 0; i <= k; i++) {\\n            address nft = nfts[i];\\n            accAirKingPerNft[nft] = accAirKingPerNft[nft].add(\\n                reward.mul(weights[i]).div(totalWeight) // can't be zero\\n            );\\n        }\\n        emit Airdrop(reward);\\n    }\\n\\n    function addTerms(TermSheet[] memory _termSheets) public onlyOwner {\\n        for (uint256 i = 0; i < _termSheets.length; i++) {\\n            _addTermSheet(_termSheets[i]);\\n        }\\n    }\\n\\n    function enableTerms(uint256 termsId) external onlyOwner {\\n        termSheets[_validTermsID(termsId)].enabled = true;\\n        emit TermsEnabled(termsId);\\n    }\\n\\n    function disableTerms(uint256 termsId) external onlyOwner {\\n        termSheets[_validTermsID(termsId)].enabled = false;\\n        emit TermsDisabled(termsId);\\n    }\\n\\n    function enableEmergencyWithdraw() external onlyOwner {\\n        emergencyWithdrawEnabled = true;\\n        emit Emergency(true);\\n    }\\n\\n    function disableEmergencyWithdraw() external onlyOwner {\\n        emergencyWithdrawEnabled = false;\\n        emit Emergency(false);\\n    }\\n\\n    function addAirdropPools(\\n        address[] memory nftAddresses,\\n        uint8[] memory nftWeights\\n    ) public onlyOwner {\\n        uint length = nftAddresses.length;\\n        require(length == nftWeights.length, \\\"RDeck:INVALID_ARRAY_LENGTH\\\");\\n        for (uint256 i = 0; i < length; i++) {\\n            require(\\n                airPools.length < MAX_AIR_POOLS_QTY,\\n                \\\"RDeck:MAX_AIR_POOLS_QTY\\\"\\n            );\\n            uint8 w = nftWeights[i];\\n            require(w != 0, \\\"RDeck:INVALID_AIR_WEIGHT\\\");\\n            address a = nftAddresses[i];\\n            _revertZeroAddress(a);\\n            require(accAirKingPerNft[a] == 0, \\\"RDeck:AIR_POOL_EXISTS\\\");\\n            accAirKingPerNft[a] == 1;\\n            airPools.push(_packAirPoolData(a, w));\\n        }\\n    }\\n\\n    // Caution: it may kill pended airdrop rewards\\n    function removeAirdropPool(\\n        address nft,\\n        uint8 weight\\n    ) external onlyOwner {\\n        require(accAirKingPerNft[nft] != 0, \\\"RDeck:UNKNOWN_AIR_POOL\\\");\\n        accAirKingPerNft[nft] = 0;\\n        _removeArrayElement(airPools, _packAirPoolData(nft, weight));\\n    }\\n\\n    function addKingReserves(address from, uint256 amount) external onlyOwner {\\n        IERC20(king).safeTransferFrom(from, address(this), amount);\\n        kingReserves = kingReserves.add(SafeMath96.fromUint(amount));\\n        emit Reserved(amount);\\n    }\\n\\n    function removeKingReserves(uint256 amount) external onlyOwner {\\n        uint96 _newReserves = kingReserves.sub(SafeMath96.fromUint(amount));\\n        require(_newReserves >= kingDue, \\\"RDeck:TOO_LOW_RESERVES\\\");\\n\\n        kingReserves = _newReserves;\\n        IERC20(king).safeTransfer(owner(), amount);\\n        emit Removed(amount);\\n    }\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    // Equals to `bytes4(keccak256(\\\"RoyalDecks\\\"))`\\n    bytes private constant _NFT_PASS = abi.encodePacked(bytes4(0x8adbe135));\\n\\n    // Implementation of the ERC721 Receiver\\n    function onERC721Received(address, address, uint256, bytes calldata data)\\n        external\\n        returns (bytes4)\\n    {\\n        // Only accept transfers with _NFT_PASS passed as `data`\\n        return (data.length == 4 && data[0] == 0x8a && data[3] == 0x35)\\n            ? _ERC721_RECEIVED\\n            : bytes4(0);\\n    }\\n\\n    function _withdraw(uint256 stakeId, bool isEmergency) internal {\\n        require(\\n            !isEmergency || emergencyWithdrawEnabled,\\n            \\\"withdraw: emergency disabled\\\"\\n        );\\n\\n        (address nft, uint256 nftId, , ) = decodeStakeId(stakeId);\\n\\n        UserStakes storage userStakes = stakes[msg.sender];\\n        Stake memory stake = userStakes.data[stakeId];\\n        require(\\n            isEmergency || now >= stake.unlockTime,\\n            \\\"withdraw: stake is locked\\\"\\n        );\\n\\n        uint96 amountDue = stake.amountDue;\\n        require(amountDue != 0, \\\"withdraw: unknown or returned stake\\\");\\n\\n        { // Pended airdrop rewards\\n            uint256 accAir = accAirKingPerNft[nft];\\n            if (accAir > 1) {\\n                uint256 bias = accAirKingBias[stakeId];\\n                if (accAir > bias) amountDue = amountDue.add(\\n                    SafeMath96.fromUint(accAir.sub(bias))\\n                );\\n            }\\n        }\\n\\n        uint96 amountToUser = isEmergency ? stake.amountStaked : amountDue;\\n\\n        _removeUserStake(userStakes, stakeId);\\n        kingDue = kingDue.sub(amountDue);\\n        kingReserves = kingReserves.sub(amountDue);\\n\\n        IERC20(king).safeTransfer(msg.sender, uint256(amountToUser));\\n        IERC721(nft).safeTransferFrom(address(this), msg.sender, nftId);\\n    }\\n\\n    function _addTermSheet(TermSheet memory tS) internal {\\n        _revertZeroAddress(tS.nft);\\n        require(\\n            (tS.minAmount != 0) && (tS.lockHours != 0) && (tS.kingFactor != 0),\\n            \\\"RDeck::add:INVALID_ZERO_PARAM\\\"\\n        );\\n        require(_isMissingTerms(tS), \\\"RDeck::add:TERMS_DUPLICATED\\\");\\n        termSheets.push(tS);\\n\\n        emit NewTermSheet(\\n            termSheets.length - 1,\\n            tS.nft,\\n            tS.minAmount,\\n            tS.lockHours,\\n            tS.kingFactor\\n        );\\n        if (tS.enabled) emit TermsEnabled(termSheets.length);\\n    }\\n\\n    function _safeKingTransfer(address _to, uint256 _amount) internal {\\n        uint256 kingBal = IERC20(king).balanceOf(address(this));\\n        IERC20(king).safeTransfer(_to, _amount > kingBal ? kingBal : _amount);\\n    }\\n\\n    // Returns `true` if the term sheet has NOT been yet added.\\n    function _isMissingTerms(TermSheet memory newSheet)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < termSheets.length; i++) {\\n            TermSheet memory sheet = termSheets[i];\\n            if (\\n                sheet.nft == newSheet.nft &&\\n                sheet.minAmount == newSheet.minAmount &&\\n                sheet.lockHours == newSheet.lockHours &&\\n                sheet.kingFactor == newSheet.kingFactor\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _addUserStake(\\n        UserStakes storage userStakes,\\n        uint256 stakeId,\\n        Stake memory stake\\n    ) internal {\\n        require(\\n            userStakes.data[stakeId].amountDue == 0,\\n            \\\"RDeck:DUPLICATED_STAKE_ID\\\"\\n        );\\n        userStakes.data[stakeId] = stake;\\n        userStakes.ids.push(stakeId);\\n    }\\n\\n    function _removeUserStake(UserStakes storage userStakes, uint256 stakeId)\\n        internal\\n    {\\n        require(\\n            userStakes.data[stakeId].amountDue != 0,\\n            \\\"RDeck:INVALID_STAKE_ID\\\"\\n        );\\n        userStakes.data[stakeId].amountDue = 0;\\n        _removeArrayElement(userStakes.ids, stakeId);\\n    }\\n\\n    // Assuming the given array does contain the given element\\n    function _removeArrayElement(uint256[] storage arr, uint256 el) internal {\\n        uint256 lastIndex = arr.length - 1;\\n        if (lastIndex != 0) {\\n            uint256 replaced = arr[lastIndex];\\n            if (replaced != el) {\\n                // Shift elements until the one being removed is replaced\\n                do {\\n                    uint256 replacing = replaced;\\n                    replaced = arr[lastIndex - 1];\\n                    lastIndex--;\\n                    arr[lastIndex] = replacing;\\n                } while (replaced != el && lastIndex != 0);\\n            }\\n        }\\n        // Remove the last (and quite probably the only) element\\n        arr.pop();\\n    }\\n\\n    function _encodeStakeId(\\n        address nft,\\n        uint256 nftId,\\n        uint256 startTime,\\n        uint256 stakeHours\\n    ) internal pure returns (uint256) {\\n        require(nftId < 2**48, \\\"RDeck::nftId_EXCEEDS_48_BITS\\\");\\n        return uint256(nft) << 96 | nftId << 48 | startTime << 16 | stakeHours;\\n    }\\n\\n    function _packAirPoolData(\\n        address nft,\\n        uint8 weight\\n    ) internal pure returns(uint256) {\\n        return (uint256(nft) << 8) | uint256(weight);\\n    }\\n\\n    function _unpackAirPoolData(\\n        uint256 packed\\n    ) internal pure returns(address nft, uint8 weight)\\n    {\\n        return (address(packed >> 8), uint8(packed & 7));\\n    }\\n\\n    function _revertZeroAddress(address _address) internal pure {\\n        require(_address != address(0), \\\"RDeck::ZERO_ADDRESS\\\");\\n    }\\n\\n    function _nonZeroAddr(address _address) private pure returns (address) {\\n        _revertZeroAddress(_address);\\n        return _address;\\n    }\\n\\n    function _validTermsID(uint256 termsId) private view returns (uint256) {\\n        require(termsId < termSheets.length, \\\"RDeck::INVALID_TERMS_ID\\\");\\n        return termsId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath32.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nlibrary SafeMath32 {\\n\\n    function add(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\\n        uint32 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\\n        return add(a, b, \\\"SafeMath32: addition overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\\n        return sub(a, b, \\\"SafeMath32: subtraction overflow\\\");\\n    }\\n\\n    function fromUint(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function fromUint(uint n) internal pure returns (uint32) {\\n        return fromUint(n, \\\"SafeMath32: exceeds 32 bits\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath96.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nlibrary SafeMath96 {\\n\\n    function add(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function add(uint96 a, uint96 b) internal pure returns (uint96) {\\n        return add(a, b, \\\"SafeMath96: addition overflow\\\");\\n    }\\n\\n    function sub(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function sub(uint96 a, uint96 b) internal pure returns (uint96) {\\n        return sub(a, b, \\\"SafeMath96: subtraction overflow\\\");\\n    }\\n\\n    function fromUint(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function fromUint(uint n) internal pure returns (uint96) {\\n        return fromUint(n, \\\"SafeMath96: exceeds 96 bits\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_king\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Emergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kingFactor\",\"type\":\"uint256\"}],\"name\":\"NewTermSheet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Removed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"TermsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"TermsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"nftWeights\",\"type\":\"uint8[]\"}],\"name\":\"addAirdropPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addKingReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"kingFactor\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"lockHours\",\"type\":\"uint16\"}],\"internalType\":\"struct RoyalDecks.TermSheet[]\",\"name\":\"_termSheets\",\"type\":\"tuple[]\"}],\"name\":\"addTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAirdrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"decodeStakeId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeHours\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kingAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"disableTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"enableTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeHours\",\"type\":\"uint256\"}],\"name\":\"encodeStakeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"king\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kingDue\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kingReserves\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"pendedAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"}],\"name\":\"removeAirdropPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeKingReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"amountStaked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"amountDue\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"}],\"internalType\":\"struct RoyalDecks.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"termSheet\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"kingFactor\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"lockHours\",\"type\":\"uint16\"}],\"internalType\":\"struct RoyalDecks.TermSheet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RoyalDecks","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005a731151d6510eb475cc7a0072200cffc9a3bfe5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}