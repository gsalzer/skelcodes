{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-02-02\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n// File: contracts/Unifarm.sol\r\n\r\ncontract Admin is Ownable {\r\n    struct tokenInfo {\r\n        bool isExist;\r\n        uint8 decimal;\r\n        uint256 userStakeLimit;\r\n        uint256 maxStake;\r\n    }\r\n\r\n    address[] public tokens;\r\n    mapping(address => address[]) public tokensSequenceList;\r\n    mapping(address => tokenInfo) public tokenDetails;\r\n    mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\r\n    mapping(address => mapping(address => bool)) public tokenBlockedStatus;\r\n    uint256[] public intervalDays = [1, 8, 15, 22, 29, 36];\r\n    uint256 public stakeDuration = 90 days;\r\n\r\n    event TokenDetails(\r\n        address indexed tokenAddress,\r\n        uint256 userStakeimit,\r\n        uint256 totalStakeLimit,\r\n        uint256 Time\r\n    );\r\n\r\n    function addToken(\r\n        address tokenAddress,\r\n        uint256 userMaxStake,\r\n        uint256 totalStake,\r\n        uint8 decimal\r\n    ) public onlyOwner returns (bool) {\r\n        if (tokenDetails[tokenAddress].isExist == false)\r\n            tokens.push(tokenAddress);\r\n\r\n        tokenDetails[tokenAddress].isExist = true;\r\n        tokenDetails[tokenAddress].decimal = decimal;\r\n        tokenDetails[tokenAddress].userStakeLimit = userMaxStake;\r\n        tokenDetails[tokenAddress].maxStake = totalStake;\r\n\r\n        emit TokenDetails(\r\n            tokenAddress,\r\n            userMaxStake,\r\n            totalStake,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setDailyDistribution(\r\n        address[] memory stakedToken,\r\n        address[] memory rewardToken,\r\n        uint256[] memory dailyDistribution\r\n    ) public onlyOwner {\r\n        require(\r\n            stakedToken.length == rewardToken.length &&\r\n                rewardToken.length == dailyDistribution.length,\r\n            \"Invalid Input\"\r\n        );\r\n\r\n        for (uint8 i = 0; i < stakedToken.length; i++) {\r\n            require(\r\n                tokenDetails[stakedToken[i]].isExist == true &&\r\n                    tokenDetails[rewardToken[i]].isExist == true,\r\n                \"Token not exist\"\r\n            );\r\n            tokenDailyDistribution[stakedToken[i]][\r\n                rewardToken[i]\r\n            ] = dailyDistribution[i];\r\n        }\r\n    }\r\n\r\n    function updateSequence(\r\n        address stakedToken,\r\n        address[] memory rewardTokenSequence\r\n    ) public onlyOwner {\r\n        tokensSequenceList[stakedToken] = new address[](0);\r\n\r\n        for (uint8 i = 0; i < rewardTokenSequence.length; i++) {\r\n            require(\r\n                rewardTokenSequence.length <= tokens.length,\r\n                \" Invalid Index\"\r\n            );\r\n            require(\r\n                tokenDetails[rewardTokenSequence[i]].isExist == true,\r\n                \"Token Not Exist\"\r\n            );\r\n            tokensSequenceList[stakedToken].push(rewardTokenSequence[i]);\r\n        }\r\n    }\r\n\r\n    function updateToken(\r\n        address tokenAddress,\r\n        uint256 userMaxStake,\r\n        uint256 totalStake\r\n    ) public onlyOwner {\r\n        require(tokenDetails[tokenAddress].isExist == true, \"Token Not Exist\");\r\n        tokenDetails[tokenAddress].userStakeLimit = userMaxStake;\r\n        tokenDetails[tokenAddress].maxStake = totalStake;\r\n        emit TokenDetails(\r\n            tokenAddress,\r\n            userMaxStake,\r\n            totalStake,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updateStakeDuration(uint256 durationTime) public onlyOwner {\r\n        stakeDuration = durationTime;\r\n    }\r\n\r\n    function updateIntervalDays(uint256[] memory _interval) public onlyOwner {\r\n        intervalDays = new uint256[](0);\r\n\r\n        for (uint8 i = 0; i < _interval.length; i++) {\r\n            require(stakeDuration > _interval[i], \"Invalid Interval Day\");\r\n            intervalDays.push(_interval[i]);\r\n        }\r\n    }\r\n\r\n    function changeTokenBlockedStatus(\r\n        address stakedToken,\r\n        address rewardToken,\r\n        bool status\r\n    ) public onlyOwner {\r\n        require(\r\n            tokenDetails[stakedToken].isExist == true &&\r\n                tokenDetails[rewardToken].isExist == true,\r\n            \"Token not exist\"\r\n        );\r\n        tokenBlockedStatus[stakedToken][rewardToken] = status;\r\n        emit TokenDetails(\r\n            stakedToken,\r\n            tokenDetails[stakedToken].userStakeLimit,\r\n            tokenDetails[stakedToken].maxStake,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function safeWithdraw(address tokenAddress, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        IERC20(tokenAddress).transfer(owner(), amount);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @title Unifarm Contract\r\n * @author OroPocket\r\n */\r\n\r\ncontract Unifarm is Admin {\r\n    // Wrappers over Solidity's arithmetic operations\r\n    using SafeMath for uint256;\r\n    \r\n    // Stores Stake Details\r\n    struct stakeInfo {\r\n        address user;\r\n        address[] tokenAddress;\r\n        bool[] isActive;\r\n        uint256[] stakeId;\r\n        uint256[] stakedAmount;\r\n        uint256[] startTime;\r\n    }\r\n\r\n    // Mapping\r\n    mapping(address => stakeInfo) public stakingDetails;\r\n    mapping(address => uint256) public totalStaking;\r\n    mapping(address => mapping(address => uint256)) public tokenRewardsEarned;\r\n    uint256 public constant DAYS = 1 days;\r\n    \r\n    // Events\r\n    event Stake(\r\n        address indexed userAddress,\r\n        address indexed tokenAddress,\r\n        uint256 stakedAmount,\r\n        uint256 Time\r\n    );\r\n    event Claim(\r\n        address indexed userAddress,\r\n        address indexed stakedTokenAddress,\r\n        address indexed tokenAddress,\r\n        uint256 claimRewards,\r\n        uint256 Time\r\n    );\r\n    event UnStake(\r\n        address indexed userAddress,\r\n        address indexed unStakedtokenAddress,\r\n        uint256 unStakedAmount,\r\n        uint256 Time\r\n    );\r\n    \r\n    /**\r\n     * @notice Stake tokens to earn rewards\r\n     * @param tokenAddress Staking token address\r\n     * @param amount Amount of tokens to be staked\r\n     */\r\n    function stake(address tokenAddress, uint256 amount) external {\r\n        // checks \r\n        require(\r\n            tokenDetails[tokenAddress].isExist == true,\r\n            \"STAKE : Token is not Exist\"\r\n        );\r\n        require(\r\n            amount <= tokenDetails[tokenAddress].userStakeLimit,\r\n            \"STAKE : Amount should be within permit\"\r\n        );\r\n        require(\r\n            totalStaking[tokenAddress].add(amount) <=\r\n                tokenDetails[tokenAddress].maxStake,\r\n            \"STAKE : Maxlimit exceeds\"\r\n        );\r\n        \r\n        // Storing stake details\r\n        stakingDetails[msg.sender].stakeId.push(\r\n            stakingDetails[msg.sender].stakeId.length\r\n        );\r\n        stakingDetails[msg.sender].isActive.push(true);\r\n        stakingDetails[msg.sender].user = msg.sender;\r\n        stakingDetails[msg.sender].tokenAddress.push(tokenAddress);\r\n        stakingDetails[msg.sender].stakedAmount.push(amount);\r\n        stakingDetails[msg.sender].startTime.push(block.timestamp);\r\n\r\n        // Update total staking amount\r\n        totalStaking[tokenAddress] = totalStaking[tokenAddress].add(amount);\r\n        \r\n        // Transfer tokens from userf to contract\r\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\r\n        \r\n        // Emit state changes\r\n        emit Stake(msg.sender, tokenAddress, amount, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @notice Claim accumulated rewards\r\n     * @param stakeId Stake ID of the user\r\n     * @param stakedAmount Staked amount of the user\r\n     */\r\n     function claimRewards(uint256 stakeId, uint stakedAmount) internal {\r\n        // Local variables\r\n        uint256 rewardsEarned;\r\n        uint256 interval;\r\n        uint256 noOfDays;\r\n        \r\n        noOfDays = stakingDetails[msg.sender].startTime[stakeId].add(stakeDuration);\r\n        // Interval calculation\r\n        if (noOfDays > block.timestamp) {\r\n            uint256 endOfProfit = block.timestamp;\r\n            interval = endOfProfit.sub(\r\n                stakingDetails[msg.sender].startTime[stakeId]\r\n            );\r\n        } else {\r\n            uint256 endOfProfit = noOfDays;\r\n            interval = endOfProfit.sub(\r\n                stakingDetails[msg.sender].startTime[stakeId]\r\n            );\r\n        }\r\n        \r\n        // Reward calculation\r\n        if (interval >= DAYS) {\r\n            noOfDays = interval.div(DAYS);\r\n            rewardsEarned = noOfDays.mul(\r\n                getOneDayReward(\r\n                    stakedAmount,\r\n                    stakingDetails[msg.sender].tokenAddress[stakeId],\r\n                    stakingDetails[msg.sender].tokenAddress[stakeId]\r\n                )\r\n            );\r\n            sendToken(\r\n                stakingDetails[msg.sender].tokenAddress[stakeId],\r\n                stakingDetails[msg.sender].tokenAddress[stakeId],\r\n                rewardsEarned\r\n            );\r\n            uint8 i = 1;\r\n            while (i < intervalDays.length) {\r\n                if (noOfDays >= intervalDays[i]) {\r\n                    uint256 balDays = (noOfDays.sub(intervalDays[i].sub(1)));\r\n\r\n                    address rewardToken =\r\n                        tokensSequenceList[\r\n                            stakingDetails[msg.sender].tokenAddress[stakeId]\r\n                        ][i];\r\n\r\n                    if (\r\n                        rewardToken !=\r\n                        stakingDetails[msg.sender].tokenAddress[stakeId] &&\r\n                        tokenBlockedStatus[\r\n                            stakingDetails[msg.sender].tokenAddress[stakeId]\r\n                        ][rewardToken] ==\r\n                        false\r\n                    ) {\r\n                        rewardsEarned = balDays.mul(\r\n                            getOneDayReward(\r\n                                stakedAmount,\r\n                                stakingDetails[msg.sender].tokenAddress[stakeId],\r\n                                rewardToken\r\n                            )\r\n                        );\r\n                        sendToken(\r\n                            stakingDetails[msg.sender].tokenAddress[stakeId],\r\n                            rewardToken,\r\n                            rewardsEarned\r\n                        );\r\n                    }\r\n                    i = i + 1;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Get rewards for one day \r\n     * @param stakedAmount Stake amount of the user\r\n     * @param stakedToken Staked token address of the user\r\n     * @param rewardToken Reward token address \r\n     * @return reward One dayh reward for the user\r\n     */\r\n    function getOneDayReward(\r\n        uint256 stakedAmount,\r\n        address stakedToken,\r\n        address rewardToken\r\n    ) public view returns (uint256 reward) {\r\n        // Formula for reward calculation\r\n        reward = (\r\n            stakedAmount.mul(\r\n                tokenDailyDistribution[stakedToken][rewardToken]\r\n            )\r\n        )\r\n            .div(tokenDetails[stakedToken].maxStake);\r\n    }\r\n    \r\n    /**\r\n     * @notice Get rewards for one day \r\n     * @param stakedToken Stake amount of the user\r\n     * @param tokenAddress Reward token address \r\n     * @param amount Amount to be transferred as reward\r\n     */\r\n    function sendToken(\r\n        address stakedToken,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) internal {\r\n        // Checks\r\n        if (tokenAddress != address(0)) {\r\n            require(\r\n                IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n                \"SEND : Insufficient Balance\"\r\n            );\r\n            // Transfer of rewards\r\n            IERC20(tokenAddress).transfer(msg.sender, amount);\r\n            \r\n            // Emit state changes\r\n            emit Claim(\r\n                msg.sender,\r\n                stakedToken,\r\n                tokenAddress,\r\n                amount,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Unstake and claim rewards\r\n     * @param stakeId Stake ID of the user\r\n     */\r\n    function unStake(uint256 stakeId) external returns (bool) {\r\n        // Checks\r\n        require(\r\n            stakingDetails[msg.sender].stakedAmount[stakeId] > 0,\r\n            \"CLAIM : Insufficient Staked Amount\"\r\n        );\r\n        \r\n        // State updation \r\n        uint stakedAmount = stakingDetails[msg.sender].stakedAmount[stakeId];\r\n        stakingDetails[msg.sender].stakedAmount[stakeId] = 0;\r\n        stakingDetails[msg.sender].isActive[stakeId] = false;\r\n        \r\n        // Balance check\r\n        require(\r\n            IERC20(stakingDetails[msg.sender].tokenAddress[stakeId])\r\n                .balanceOf(address(this)) >=\r\n                stakedAmount,\r\n            \"UNSTAKE : Insufficient Balance\"\r\n        );\r\n        \r\n        // Transfer staked token back to user\r\n        IERC20(stakingDetails[msg.sender].tokenAddress[stakeId]).transfer(\r\n            msg.sender,\r\n            stakedAmount\r\n        );\r\n        \r\n        // Claim pending rewards\r\n        claimRewards(stakeId, stakedAmount);\r\n\r\n       // Emit state changes\r\n        emit UnStake(\r\n            msg.sender,\r\n            stakingDetails[msg.sender].tokenAddress[stakeId],\r\n            stakedAmount,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice View staking details\r\n     * @param _user User address\r\n     */\r\n    function viewStakingDetails(address _user)\r\n        public\r\n        view\r\n        returns (\r\n            address[] memory,\r\n            bool[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        return (\r\n            stakingDetails[_user].tokenAddress,\r\n            stakingDetails[_user].isActive,\r\n            stakingDetails[_user].stakeId,\r\n            stakingDetails[_user].stakedAmount,\r\n            stakingDetails[_user].startTime\r\n        );\r\n    }\r\n    \r\n        /**\r\n     * @notice View accumulated rewards for staked tokens\r\n     * @param user Wallet address of th user\r\n     * @param stakeId Stake ID of the user\r\n     * @param rewardTokenAddress Staked token of the user\r\n     * @return availableReward Returns the avilable rewards \r\n     */\r\n    function viewAvailableRewards(\r\n        address user,\r\n        uint256 stakeId,\r\n        address rewardTokenAddress\r\n    ) public view returns (uint256 availableReward) {\r\n        \r\n        // Checks\r\n        require(\r\n            stakingDetails[user].stakedAmount[stakeId] > 0,\r\n            \"CLAIM : Insufficient Staked Amount\"\r\n        );\r\n    \r\n        // Local variables\r\n        uint256 rewardsEarned;\r\n        uint256 interval;\r\n        uint256 noOfDays;\r\n        \r\n        noOfDays = stakingDetails[user].startTime[stakeId].add(stakeDuration);\r\n        // Interval calculation\r\n        if (noOfDays > block.timestamp) {\r\n            uint256 endOfProfit = block.timestamp;\r\n            interval = endOfProfit.sub(stakingDetails[user].startTime[stakeId]);\r\n        } else {\r\n            uint256 endOfProfit = noOfDays;\r\n            interval = endOfProfit.sub(stakingDetails[user].startTime[stakeId]);\r\n        }\r\n\r\n        if (interval >= DAYS) {\r\n            noOfDays = interval.div(DAYS);\r\n            rewardsEarned = noOfDays.mul(\r\n                getOneDayReward(\r\n                    stakingDetails[user].stakedAmount[stakeId],\r\n                    stakingDetails[user].tokenAddress[stakeId],\r\n                    stakingDetails[user].tokenAddress[stakeId]\r\n                )\r\n            );\r\n            \r\n            if(rewardTokenAddress == stakingDetails[user].tokenAddress[stakeId])\r\n                return rewardsEarned;\r\n                \r\n            else {\r\n                // Reward calculation for given reward token address\r\n                uint8 i = 1;\r\n                while (i < intervalDays.length) {\r\n                    if (noOfDays >= intervalDays[i]) {\r\n                        uint256 balDays = (noOfDays.sub(intervalDays[i].sub(1)));\r\n    \r\n                        address rewardToken =\r\n                            tokensSequenceList[\r\n                                stakingDetails[user].tokenAddress[stakeId]\r\n                            ][i];\r\n    \r\n                        if (\r\n                            rewardToken !=\r\n                            stakingDetails[user].tokenAddress[stakeId] &&\r\n                            tokenBlockedStatus[\r\n                                stakingDetails[user].tokenAddress[stakeId]\r\n                            ][rewardToken] ==\r\n                            false\r\n                        ) {\r\n                            if (rewardToken == rewardTokenAddress) {\r\n                                rewardsEarned = balDays.mul(\r\n                                    getOneDayReward(\r\n                                        stakingDetails[user].stakedAmount[stakeId],\r\n                                        stakingDetails[user].tokenAddress[stakeId],\r\n                                        rewardToken\r\n                                    )\r\n                                );\r\n    \r\n                                return (rewardsEarned);\r\n                            }\r\n                        }\r\n                        i = i + 1; \r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userStakeimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"TokenDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unStakedtokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userMaxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeTokenBlockedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getOneDayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"intervalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakedToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardToken\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dailyDistribution\",\"type\":\"uint256[]\"}],\"name\":\"setDailyDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBlockedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDailyDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDetails\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"userStakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensSequenceList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_interval\",\"type\":\"uint256[]\"}],\"name\":\"updateIntervalDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokenSequence\",\"type\":\"address[]\"}],\"name\":\"updateSequence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationTime\",\"type\":\"uint256\"}],\"name\":\"updateStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userMaxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"viewAvailableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewStakingDetails\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Unifarm","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://656ddba88ce61b724622afbd3119e0694f643d36fc35a4c8ad610ce13a2e4eb8"}]}