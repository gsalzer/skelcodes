pragma solidity 0.7.6;

interface IFuture {
    struct Registration {
        uint256 startIndex;
        uint256 scaledBalance;
    }

    /**
     * @notice Getter for the PAUSE future parameter
     * @return true if new periods are paused, false otherwise
     */
    function PAUSED() external view returns (bool);

    /**
     * @notice Getter for the PERIOD future parameter
     * @return returns the period duration of the future
     */
    function PERIOD_DURATION() external view returns (uint256);

    /**
     * @notice Getter for the PLATFORM_NAME future parameter
     * @return returns the platform of the future
     */
    function PLATFORM_NAME() external view returns (uint256);

    /**
     * @notice Initializer
     * @param _controller the address of the controller
     * @param _ibt the address of the corresponding IBT
     * @param _periodDuration the length of the period (in days)
     * @param _platformName the name of the platform and tools
     * @param _deployerAddress the future deployer address
     * @param _admin the address of the ACR admin
     */
    function initialize(
        address _controller,
        address _ibt,
        uint256 _periodDuration,
        string memory _platformName,
        address _deployerAddress,
        address _admin
    ) external;

    /**
     * @notice Set future wallet address
     * @param _futureVault the address of the new future wallet
     * @dev needs corresponding permissions for sender
     */
    function setFutureVault(address _futureVault) external;

    /**
     * @notice Set futureWallet address
     * @param _futureWallet the address of the new futureWallet
     * @dev needs corresponding permissions for sender
     */
    function setFutureWallet(address _futureWallet) external;

    /**
     * @notice Set liquidity gauge address
     * @param _liquidityGauge the address of the new liquidity gauge
     * @dev needs corresponding permissions for sender
     */
    function setLiquidityGauge(address _liquidityGauge) external;

    /**
     * @notice Set apwibt address
     * @param _apwibt the address of the new apwibt
     * @dev used only for exceptional purpose
     */
    function setAPWIBT(address _apwibt) external;

    /**
     * @notice Sender registers an amount of IBT for the next period
     * @param _user address to register to the future
     * @param _amount amount of IBT to be registered
     * @dev called by the controller only
     */
    function register(address _user, uint256 _amount) external;

    /**
     * @notice Sender unregisters an amount of IBT for the next period
     * @param _user user addresss
     * @param _amount amount of IBT to be unregistered
     */
    function unregister(address _user, uint256 _amount) external;

    /**
     * @notice Sender unlocks the locked funds corresponding to their apwIBT holding
     * @param _user the user address
     * @param _amount amount of funds to unlocked
     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked
     */
    function withdrawLockFunds(address _user, uint256 _amount) external;

    /**
     * @notice Send the user their owed FYT (and apwIBT if there are some claimable)
     * @param _user address of the user to send the FYT to
     */
    function claimFYT(address _user) external;

    /**
     * @notice Start a new period
     * @dev needs corresponding permissions for sender
     */
    function startNewPeriod() external;

    /**
     * @notice Check if a user has unclaimed FYT
     * @param _user the user to check
     * @return true if the user can claim some FYT, false otherwise
     */
    function hasClaimableFYT(address _user) external view returns (bool);

    /**
     * @notice Check if a user has unclaimed apwIBT
     * @param _user the user to check
     * @return true if the user can claim some apwIBT, false otherwise
     */
    function hasClaimableAPWIBT(address _user) external view returns (bool);

    /**
     * @notice Getter for user registered amount
     * @param _user user to return the registered funds of
     * @return the registered amount, 0 if no registrations
     * @dev the registration can be older than the next period
     */
    function getRegisteredAmount(address _user) external view returns (uint256);

    /**
     * @notice Getter for user IBT amount that is unlockable
     * @param _user user to unlock the IBT from
     * @return the amount of IBT the user can unlock
     */
    function getUnlockableFunds(address _user) external view returns (uint256);

    /**
     * @notice Getter for yield that is generated by the user funds during the current period
     * @param _user user to check the unrealized yield of
     * @return the yield (amount of IBT) currently generated by the locked funds of the user
     */
    function getUnrealisedYield(address _user) external view returns (uint256);

    /**
     * @notice Getter for the amount of apwIBT that the user can claim
     * @param _user the user to check the claimable apwIBT of
     * @return the amount of apwIBT claimable by the user
     */
    function getClaimableAPWIBT(address _user) external view returns (uint256);

    /**
     * @notice Getter for the amount of FYT that the user can claim for a certain period
     * @param _user user to check the check the claimable FYT of
     * @param _periodID period ID to check the claimable FYT of
     * @return the amount of FYT claimable by the user for this period ID
     */
    function getClaimableFYTForPeriod(address _user, uint256 _periodID) external view returns (uint256);

    /**
     * @notice Getter for next period index
     * @return next period index
     * @dev index starts at 1
     */
    function getNextPeriodIndex() external view returns (uint256);

    /**
     * @notice Getter for controller address
     * @return the controller address
     */
    function getControllerAddress() external view returns (address);

    /**
     * @notice Getter for future wallet address
     * @return future wallet address
     */
    function getFutureVaultAddress() external view returns (address);

    /**
     * @notice Getter for futureWallet address
     * @return futureWallet address
     */
    function getFutureWalletAddress() external view returns (address);

    /**
     * @notice Getter for liquidity gauge address
     * @return liquidity gauge address
     */
    function getLiquidityGaugeAddress() external view returns (address);

    /**
     * @notice Getter for the IBT address
     * @return IBT address
     */
    function getIBTAddress() external view returns (address);

    /**
     * @notice Getter for future apwIBT address
     * @return apwIBT address
     */
    function getAPWIBTAddress() external view returns (address);

    /**
     * @notice Getter for FYT address of a particular period
     * @param _periodIndex period index
     * @return FYT address
     */
    function getFYTofPeriod(uint256 _periodIndex) external view returns (address);

    /* Admin functions*/

    /**
     * @notice Pause registrations and the creation of new periods
     */
    function pausePeriods() external;

    /**
     * @notice Resume registrations and the creation of new periods
     */
    function resumePeriods() external;
}

