{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// @title Planets (yield farming)\r\n/// @author Meteor Finance\r\ncontract Planets is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    address public governance;\r\n    address public rewardToken;\r\n    bool public killed;\r\n    uint256 public adminDeadline;\r\n    uint256 public totalDistributed;\r\n    mapping (address=>bool) tokens;\r\n    mapping (address=>mapping (address=>uint256)) public entryBlock;\r\n    mapping (address=>uint256) public rewards;\r\n    mapping (address=>uint256) public totalValue;\r\n    mapping (address=>mapping (address=>uint256)) public balances;\r\n    \r\n    event Deposit(address indexed owner, address indexed token, uint256 value);\r\n    event Withdraw(address indexed owner, address indexed token, uint256 value, bool rewardOnly);\r\n\r\n    constructor (address _governance, address _rewardToken) public {\r\n        governance = _governance;\r\n        rewardToken = _rewardToken;\r\n        killed = false;\r\n        adminDeadline = block.timestamp.add(86400);\r\n    }\r\n    \r\n    modifier govOnly() {\r\n        require(msg.sender == governance, \"Only governance address can interact with this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier contractAlive() {\r\n        require(killed==false, \"Contract is killed, please try emergencyWithdraw()\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice Deposit funds to the smart contract\r\n    /// @param _token address of the token to deposit\r\n    /// @param _amount amount of the token to deposit\r\n    /// @return True if deposit is successful\r\n    function deposit(address _token, uint256 _amount) external contractAlive nonReentrant returns (bool) {\r\n        require(tokens[_token] == true, \"Token is not allowed for deposit.\");\r\n        require(IERC20(_token).allowance(msg.sender, address(this)) >= _amount, \"You do not have enough allowance for this operation.\");\r\n        if (entryBlock[msg.sender][_token]>0) {\r\n            _withdrawRewards(msg.sender, _token, true);\r\n        } else {\r\n            entryBlock[msg.sender][_token] = block.number;\r\n        }\r\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\r\n        balances[msg.sender][_token] = balances[msg.sender][_token].add(_amount);\r\n        totalValue[_token] = totalValue[_token].add(_amount);\r\n        emit Deposit(msg.sender, _token, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Claim rewards and withdraw\r\n    /// @param _token address of the token to withdraw\r\n    /// @param _rewardOnly true if only claiming rewards otherwise false\r\n    /// @return True if withdraw is successful\r\n    function _withdrawRewards(address _receiver, address _token, bool _rewardOnly) internal contractAlive returns (bool) {\r\n        require(entryBlock[_receiver][_token]!=block.number, \"Please wait at least one block before new deposit\");\r\n        require(81000>totalDistributed, \"Contract is out of rewards, please use emergencyWithraw()\");\r\n        uint256 rewardAmount = block.number.sub(entryBlock[_receiver][_token]).mul(rewards[_token]).mul(balances[_receiver][_token]).div(totalValue[_token]);\r\n        require(rewardAmount>0, \"No rewards are available for this address. Try emergencyWithdraw()\");\r\n        if (!_rewardOnly) {\r\n            require(balances[_receiver][_token]>0, \"Token balance must be bigger than 0\");\r\n            IERC20(_token).transfer(_receiver, balances[_receiver][_token]);\r\n            totalValue[_token] = totalValue[_token].sub(balances[_receiver][_token]);\r\n            balances[_receiver][_token] = 0;\r\n            entryBlock[_receiver][_token] = 0;\r\n\r\n        } else {\r\n            entryBlock[_receiver][_token] = block.number;\r\n        }\r\n        IERC20(rewardToken).transfer(_receiver, rewardAmount.mul(100000000000000000));\r\n        totalDistributed = totalDistributed.add(rewardAmount);\r\n        emit Withdraw(_receiver, _token, rewardAmount, _rewardOnly);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Claim rewards and withdraw\r\n    /// @param _token address of the token to withdraw\r\n    /// @param _rewardOnly true if only claiming rewards otherwise false\r\n    /// @return True if withdraw is successful\r\n    function withdraw(address _token, bool _rewardOnly) public contractAlive nonReentrant returns (bool) {\r\n        require(entryBlock[msg.sender][_token]>0, \"Please make sure you have made a deposit.\");\r\n        return _withdrawRewards(msg.sender, _token, _rewardOnly);\r\n    }\r\n\r\n    /// @notice Emergency withdraw without claiming rewards\r\n    /// @param _token address of the token to deposit\r\n    /// @return True if withdraw is successful\r\n    function emergencyWithdraw(address _token) external nonReentrant returns (bool) {\r\n        require(balances[msg.sender][_token]>0, \"You do not have balance to withdraw\");\r\n        IERC20(_token).transfer(msg.sender, balances[msg.sender][_token]);\r\n        totalValue[_token] = totalValue[_token].sub(balances[msg.sender][_token]);\r\n        balances[msg.sender][_token] = 0;\r\n        entryBlock[msg.sender][_token] = 0;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // @notice Admin withdraw for emergencies\r\n    // @param _amount Amount of reward token to withdraw\r\n    function adminWithdraw(uint256 _amount) external govOnly {\r\n        require(adminDeadline>block.timestamp);\r\n        IERC20(rewardToken).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    /// @notice Add new token\r\n    /// @param _token address of the token to add\r\n    /// @param _reward amount of starting rewards\r\n    /// @return True if token adding is successful\r\n    function addToken(address _token, uint256 _reward) external govOnly returns (bool) {\r\n        tokens[_token] = true;\r\n        rewards[_token] = _reward;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Delete token\r\n    /// @param _token address of the token to remove\r\n    /// @return True if token removing is successful\r\n    function delToken(address _token) external govOnly returns (bool) {\r\n        require(tokens[_token] == true, \"Token already does not exist, so you can not remove it\");\r\n        tokens[_token] = false;\r\n        rewards[_token] = 0;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Change governance address\r\n    /// @param _governance address of the new governance address\r\n    /// @return True if address change is successful\r\n    function transferGov(address _governance) external govOnly returns (bool) {\r\n        governance = _governance;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Kill contract (freezes deposits)\r\n    /// @return True if contract killing is successful\r\n    function kill() external govOnly returns (bool) {\r\n        killed = true;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Unkill contract (unfreezes deposits)\r\n    /// @return True if contract unkilling is successful\r\n    function unkill() external govOnly returns (bool) {\r\n        killed = false;\r\n        return true;\r\n    }\r\n }","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rewardOnly\",\"type\":\"bool\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"delToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entryBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"transferGov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_rewardOnly\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Planets","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003f027af4305905e1db4db7a7200136bfb1d481da000000000000000000000000d6a82bc919e4abdc3eb2dc801d40c965dbce5071","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://12c02782ba085ea7fed6419dbb524ca84b957f23a49b9dabe7c24bd36b3f65b0"}]}