{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"curve.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity \\u003e=0.6.0 \\u003c0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"./SafeERC20.sol\\\";\\n\\ninterface Gauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function claim_rewards() external;\\n\\n    function claimable_tokens(address) external view returns (uint256);\\n\\n    function claimable_reward(address, address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n}\\n\\ninterface ICurveFi {\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool is_deposit) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 amount, int128 i) external view returns (uint256);\\n}\\n\\ninterface ICrvV3 is IERC20 {\\n    function minter() external view returns (address);\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"synthetix.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity \\u003e=0.6.0 \\u003c0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"./SafeERC20.sol\\\";\\n\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\\n\\ninterface ISynth is IERC20 {\\n    function transferAndSettle(address to, uint256 value) external returns (bool);\\n\\n    function transferFromAndSettle(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\\ninterface ISynthetix is IERC20 {\\n    function exchange(\\n        bytes32 sourceCurrencyKey,\\n        uint256 sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint256 amountReceived);\\n\\n    function exchangeOnBehalf(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint256 sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint256 amountReceived);\\n}\\n\\ninterface IExchanger {\\n    // Views\\n    function getAmountsForExchange(\\n        uint256 sourceAmount,\\n        bytes32 sourceCurrencyKey,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountReceived,\\n            uint256 fee,\\n            uint256 exchangeFeeRate\\n        );\\n\\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\\n\\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint256);\\n\\n    // Mutative functions\\n    function exchange(\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint256 sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress\\n    ) external returns (uint256 amountReceived);\\n}\\n\\ninterface DelegateApprovals {\\n    function approveExchangeOnBehalf(address delegate) external;\\n}\\n\"},\"uniswap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity \\u003e=0.6.0 \\u003c0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IUniswapV2Router01 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\\n\"},\"ZapYvecrvSwapSusd.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\nimport {SafeERC20, SafeMath, IERC20, Address} from \\\"./SafeERC20.sol\\\";\\n\\nimport {ICurveFi} from \\\"./curve.sol\\\";\\nimport {IUniswapV2Router02} from \\\"./uniswap.sol\\\";\\nimport {ISynthetix, IExchanger, ISynth} from \\\"./synthetix.sol\\\";\\n\\ninterface IYVault is IERC20 {\\n    function deposit(uint256 amount, address recipient) external;\\n\\n    function withdraw(uint256 shares, address recipient) external;\\n\\n    function pricePerShare() external view returns (uint256);\\n}\\n\\ncontract ZapYvecrvSusd is Ownable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public constant uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public constant sushiswapRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\\n\\n    IYVault public yVault = IYVault(address(0x0e880118C29F095143dDA28e64d95333A9e75A47));\\n    ICurveFi public curveStableSwap = ICurveFi(address(0xc5424B857f758E906013F3555Dad202e4bdB4567)); // Curve ETH/sEth StableSwap pool contract\\n    IUniswapV2Router02 public swapRouter;\\n    // IAddressResolver public SynthetixResolver = IAddressResolver(address(0x823bE81bbF96BEc0e25CA13170F5AaCb5B79ba83)); // synthetix AddressResolver contract\\n    ISynthetix public synthetix = ISynthetix(address(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F)); // synthetix ProxyERC20\\n    IExchanger public synthetixExchanger = IExchanger(address(0x0bfDc04B38251394542586969E2356d0D731f7DE));\\n\\n    IERC20 public want = IERC20(address(0xA3D87FffcE63B53E0d54fAa1cc983B7eB0b74A9c)); // Curve.fi ETH/sEth (eCRV)\\n    IERC20 public weth = IERC20(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2));\\n    ISynth public sEth = ISynth(address(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb)); // synthetix ProxysETH\\n    ISynth public sUsd = ISynth(address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51)); // synthetix ProxyERC20sUSD\\n\\n    // uint256 public constant DEFAULT_SLIPPAGE = 50; // slippage allowance out of 10000: 5%\\n    bool private _noReentry = false;\\n    address[] public swapPathZapIn;\\n    address[] public swapPathZapOut;\\n\\n    constructor() public Ownable() {\\n        swapRouter = IUniswapV2Router02(sushiswapRouter);\\n\\n        swapPathZapIn = new address[](2);\\n        swapPathZapIn[0] = address(weth);\\n        swapPathZapIn[1] = address(sUsd);\\n\\n        swapPathZapOut = new address[](2);\\n        swapPathZapOut[0] = address(sUsd);\\n        swapPathZapOut[1] = address(weth);\\n\\n        // In approves\\n        // Route: ETH -\\u003e(swapRouter)-\\u003e sUsd -\\u003e(synthetix)-\\u003e sEth -\\u003e(curveStableSwap)-\\u003e eCRV/want -\\u003e(yVault)-\\u003e yveCRV\\n        sUsd.approve(address(synthetix), uint256(-1));\\n        sEth.approve(address(curveStableSwap), uint256(-1));\\n        want.safeApprove(address(yVault), uint256(-1));\\n\\n        // Out approves\\n        // Route: yveCRV -\\u003e(yVault)-\\u003e eCRV/want -\\u003e(curveStableSwap)-\\u003e sEth -\\u003e(synthetix)-\\u003e sUsd -\\u003e(swapRouter)-\\u003e ETH\\n        want.safeApprove(address(curveStableSwap), uint256(-1));\\n        sEth.approve(address(synthetix), uint256(-1));\\n        sUsd.approve(address(swapRouter), uint256(-1));\\n    }\\n\\n    // Accept ETH and zap in with no token swap\\n    receive() external payable {\\n        if (_noReentry) {\\n            return;\\n        }\\n        _zapIn(0);\\n    }\\n\\n    //\\n    // Zap In\\n    //\\n\\n    // Zap In - Step 1\\n    function estimateZapInWithSwap(uint256 ethAmount, uint256 percentSwapSeth) external view returns (uint256) {\\n        require(percentSwapSeth \\u003e= 0 \\u0026\\u0026 percentSwapSeth \\u003c= 100, \\\"INVALID PERCENTAGE VALUE\\\");\\n\\n        uint256 estimatedSethAmount = 0;\\n        if (percentSwapSeth \\u003e 0) {\\n            uint256 swappingEthAmount = ethAmount.mul(percentSwapSeth).div(100);\\n            ethAmount = ethAmount.sub(swappingEthAmount);\\n\\n            uint256[] memory amounts = swapRouter.getAmountsOut(swappingEthAmount, swapPathZapIn);\\n            uint256 estimatedSusdAmount = amounts[amounts.length - 1];\\n            (estimatedSethAmount, , ) = synthetixExchanger.getAmountsForExchange(estimatedSusdAmount, \\\"sUSD\\\", \\\"sETH\\\");\\n        }\\n\\n        return curveStableSwap.calc_token_amount([ethAmount, estimatedSethAmount], true);\\n    }\\n\\n    // Zap In - Step 2 (optional)\\n    // Requires user to run: DelegateApprovals.approveExchangeOnBehalf(\\u003czap_contract_address\\u003e)\\n    // synthetix DelegateApprovals contract: 0x15fd6e554874B9e70F832Ed37f231Ac5E142362f\\n    function swapEthToSeth() external payable {\\n        uint256 swappingEthAmount = address(this).balance;\\n        swapRouter.swapExactETHForTokens{value: swappingEthAmount}(swappingEthAmount, swapPathZapIn, address(this), now);\\n\\n        uint256 susdAmount = sUsd.balanceOf(address(this));\\n        sUsd.transfer(msg.sender, susdAmount);\\n        synthetix.exchangeOnBehalf(msg.sender, \\\"sUSD\\\", susdAmount, \\\"sETH\\\");\\n    }\\n\\n    // Zap In - Step 3\\n    // Requires user to run: sEth.approve(\\u003czap_contract_address\\u003e, \\u003cseth_amount\\u003e)\\n    // synthetix ProxysETH contract: 0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb\\n    function zapIn(uint256 sethAmount) external payable {\\n        if (_noReentry) {\\n            return;\\n        }\\n        // if (slippageAllowance == 0) {\\n        //     slippageAllowance = DEFAULT_SLIPPAGE;\\n        // }\\n        _zapIn(sethAmount);\\n    }\\n\\n    function _zapIn(uint256 sethAmount) internal {\\n        uint256 ethBalance = address(this).balance;\\n        sethAmount = Math.min(sethAmount, sEth.balanceOf(msg.sender));\\n        require(ethBalance \\u003e 0 || sethAmount \\u003e 0, \\\"INSUFFICIENT FUNDS\\\");\\n\\n        if (sethAmount \\u003e 0) {\\n            // uint256 waitLeft = synthetixExchanger.maxSecsLeftInWaitingPeriod(msg.sender, \\\"sEth\\\")\\n            sEth.transferFromAndSettle(msg.sender, address(this), sethAmount);\\n        }\\n        curveStableSwap.add_liquidity{value: ethBalance}([ethBalance, sethAmount], 0);\\n\\n        uint256 outAmount = want.balanceOf(address(this));\\n        // require(outAmount.mul(slippageAllowance.add(10000)).div(10000) \\u003e= ethBalance.add(sethBalance), \\\"TOO MUCH SLIPPAGE\\\");\\n\\n        yVault.deposit(outAmount, msg.sender);\\n    }\\n\\n    //\\n    // Zap Out\\n    //\\n\\n    // Zap Out - Step 1\\n    function estimateZapOutWithSwap(uint256 yvTokenAmount, uint256 percentSwapSusd) external view returns (uint256) {\\n        require(percentSwapSusd \\u003e= 0 \\u0026\\u0026 percentSwapSusd \\u003c= 100, \\\"INVALID PERCENTAGE VALUE\\\");\\n\\n        uint256 wantAmount = yvTokenAmount.mul(yVault.pricePerShare());\\n\\n        uint256 estimatedSwappedEthAmount = 0;\\n        if (percentSwapSusd \\u003e 0) {\\n            uint256 swappingWantAmount = wantAmount.mul(percentSwapSusd).div(100);\\n            wantAmount = wantAmount.sub(swappingWantAmount);\\n\\n            uint256 sethAmount = curveStableSwap.calc_withdraw_one_coin(swappingWantAmount, 1);\\n            (uint256 susdAmount, , ) = synthetixExchanger.getAmountsForExchange(sethAmount, \\\"sETH\\\", \\\"sUSD\\\");\\n            uint256[] memory amounts = swapRouter.getAmountsOut(susdAmount, swapPathZapOut);\\n            estimatedSwappedEthAmount = amounts[amounts.length - 1];\\n        }\\n\\n        uint256 estimatedEthAmount = curveStableSwap.calc_withdraw_one_coin(wantAmount, 0);\\n\\n        return estimatedEthAmount.add(estimatedSwappedEthAmount);\\n    }\\n\\n    // Zap Out - Step 2\\n    // Requires user to run: DelegateApprovals.approveExchangeOnBehalf(\\u003czap_contract_address\\u003e)\\n    // synthetix DelegateApprovals contract: 0x15fd6e554874B9e70F832Ed37f231Ac5E142362f\\n    function zapOut(uint256 yvTokenAmount, uint256 percentSwapSusd) external {\\n        require(percentSwapSusd \\u003e= 0 \\u0026\\u0026 percentSwapSusd \\u003c= 100, \\\"INVALID PERCENTAGE VALUE\\\");\\n\\n        uint256 yvTokenBalance = Math.min(yvTokenAmount, yVault.balanceOf(msg.sender));\\n        require(yvTokenBalance \\u003e 0, \\\"INSUFFICIENT FUNDS\\\");\\n\\n        yVault.withdraw(yvTokenBalance, address(this));\\n        uint256 wantBalance = want.balanceOf(address(this));\\n\\n        _noReentry = true;\\n        curveStableSwap.remove_liquidity_one_coin(wantBalance.mul(percentSwapSusd).div(100), 0, 0);\\n        wantBalance = want.balanceOf(address(this));\\n        curveStableSwap.remove_liquidity_one_coin(wantBalance, 0, 0);\\n        _noReentry = false;\\n\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance \\u003e 0) {\\n            msg.sender.transfer(ethBalance);\\n        }\\n\\n        uint256 sethBalance = sEth.balanceOf(address(this));\\n        if (sethBalance \\u003e 0) {\\n            sEth.transfer(msg.sender, sethBalance);\\n            synthetix.exchangeOnBehalf(msg.sender, \\\"sETH\\\", sethBalance, \\\"sUSD\\\");\\n        }\\n\\n        uint256 leftover = yVault.balanceOf(address(this));\\n        if (leftover \\u003e 0) {\\n            yVault.transfer(msg.sender, leftover);\\n        }\\n    }\\n\\n    // Zap Out - Step 3 (Optional)\\n    // Requires user to run: sUsd.approve(\\u003czap_contract_address\\u003e, \\u003csusd_amount\\u003e)\\n    // synthetix ProxysETH contract: 0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb\\n    function swapSusdToEth(uint256 susdAmount) external {\\n        uint256 susdBalance = Math.min(susdAmount, sUsd.balanceOf(msg.sender));\\n        require(susdBalance \\u003e 0, \\\"INSUFFICIENT FUNDS\\\");\\n\\n        // uint256 waitLeft = synthetixExchanger.maxSecsLeftInWaitingPeriod(msg.sender, \\\"sUsd\\\");\\n        sUsd.transferFromAndSettle(msg.sender, address(this), susdBalance);\\n        susdBalance = sUsd.balanceOf(address(this));\\n        swapRouter.swapExactTokensForETH(susdBalance, 0, swapPathZapOut, address(this), now);\\n\\n        uint256 ethBalance = address(this).balance;\\n        msg.sender.transfer(ethBalance);\\n    }\\n\\n    //\\n    // Misc external functions\\n    //\\n\\n    //There should never be any tokens in this contract\\n    function rescueTokens(address token, uint256 amount) external onlyOwner {\\n        if (token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n            amount = Math.min(address(this).balance, amount);\\n            msg.sender.transfer(amount);\\n        } else {\\n            IERC20 want = IERC20(token);\\n            amount = Math.min(want.balanceOf(address(this)), amount);\\n            want.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function updateVaultAddress(address _vault) external onlyOwner {\\n        yVault = IYVault(_vault);\\n        want.safeApprove(_vault, uint256(-1));\\n    }\\n\\n    function setSwapRouter(\\n        bool isUniswap,\\n        address[] calldata _swapPathZapIn,\\n        address[] calldata _swapPathZapOut\\n    ) external onlyOwner {\\n        if (isUniswap) {\\n            swapRouter = IUniswapV2Router02(uniswapRouter);\\n        } else {\\n            swapRouter = IUniswapV2Router02(sushiswapRouter);\\n        }\\n\\n        swapPathZapIn = _swapPathZapIn;\\n        swapPathZapIn = _swapPathZapOut;\\n\\n        sUsd.approve(address(swapRouter), uint256(-1)); // For zap out\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"curveStableSwap\",\"outputs\":[{\"internalType\":\"contract ICurveFi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentSwapSeth\",\"type\":\"uint256\"}],\"name\":\"estimateZapInWithSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yvTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentSwapSusd\",\"type\":\"uint256\"}],\"name\":\"estimateZapOutWithSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sEth\",\"outputs\":[{\"internalType\":\"contract ISynth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sUsd\",\"outputs\":[{\"internalType\":\"contract ISynth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUniswap\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_swapPathZapIn\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_swapPathZapOut\",\"type\":\"address[]\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEthToSeth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPathZapIn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPathZapOut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"susdAmount\",\"type\":\"uint256\"}],\"name\":\"swapSusdToEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthetix\",\"outputs\":[{\"internalType\":\"contract ISynthetix\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthetixExchanger\",\"outputs\":[{\"internalType\":\"contract IExchanger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"updateVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yVault\",\"outputs\":[{\"internalType\":\"contract IYVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sethAmount\",\"type\":\"uint256\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yvTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentSwapSusd\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ZapYvecrvSusd","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://74079b805db0fc13ba081772cf38781582d5ee1413cf8e8136ca49597781123e"}]}