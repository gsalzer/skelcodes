{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * \"Stash\" (v0.2 beta)\r\n * A simple tool for a personal smart contract wallet to help protect your assets.\r\n * \r\n * For more info checkout: https://squirrel.finance\r\n * \r\n */\r\n\r\ncontract StakePlugin {\r\n    \r\n    ERC20 nuts = ERC20(0x84294FC9710e1252d407d3D80A84bC39001bd4A8);\r\n    ERC20 bond = ERC20(0x0391D2021f89DC339F60Fff84546EA23E337750f);\r\n    \r\n    NutsStaking nutsStaking = NutsStaking(0x07f2479b209461A8b624A536902F396F631007e9);\r\n    SquirrelStash stash;\r\n    \r\n    constructor(address stashAddress) public {\r\n        stash = SquirrelStash(stashAddress);\r\n    }\r\n    \r\n    modifier adminOnly() {\r\n        require(stash.adminAddresses(msg.sender) > 0);\r\n        _;\r\n    }\r\n    \r\n    function stake(uint256 amount) external adminOnly {\r\n        stash.pluginToken(nuts, amount);\r\n        bytes memory empty;\r\n        nuts.approveAndCall(nutsStaking, amount, empty);\r\n    }\r\n    \r\n    function claimYield() external adminOnly {\r\n        nutsStaking.claimYield();\r\n        bond.transfer(stash, bond.balanceOf(this));\r\n    }\r\n    \r\n    function cashout(uint256 amount) external adminOnly {\r\n        nutsStaking.cashout(amount);\r\n        nuts.transfer(stash, nuts.balanceOf(this));\r\n        uint256 bonds = bond.balanceOf(this);\r\n        if (bonds > 0) {\r\n            bond.transfer(stash, bonds);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\ncontract NutsStaking {\r\n    function receiveApproval(address player, uint256 amount, address, bytes) external;\r\n    function cashout(uint256 amount) external;\r\n    function claimYield() public;\r\n    function dividendsOf(address farmer) view public returns (uint256);\r\n    mapping(address => uint256) public balances;\r\n}\r\n\r\n\r\n\r\ncontract PluginFactory {\r\n    function createPlugin(address stash) external returns(address);\r\n}\r\n\r\ncontract ERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    \r\n    string public symbol;\r\n    uint8 public decimals;\r\n}\r\n\r\ncontract SquirrelStash {\r\n    mapping(address => uint256) public adminAddresses; // Can withdraw to whitelisted addresses only\r\n    function pluginToken(address token, uint256 amount) external;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"stashAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"StakePlugin","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b8af2596c079adff434f3d7370353d884cec3fd","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b18f587dcc95439a605c06352d479f117ae19a2fb11eb96239b3d71f1ede6729"}]}