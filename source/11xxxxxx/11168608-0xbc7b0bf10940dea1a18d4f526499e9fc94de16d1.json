{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n     * buy = 2,5% bonus\r\n     * sell = 5% burn, 2,5% rebase\r\n     * maximum sell = 4% of totalsupply\r\n     * maximum buy = 6% of totalsupply\r\n     */\r\n\r\npragma solidity 0.6.0;\r\n\r\ncontract JohntheBaptist {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Rebase(uint256 halfTax, uint256 _totalSupply);\r\n    string public constant name = \"theBaptist\";\r\n    string public constant symbol = \"John\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private _stack = MAX_UINT256.sub(MAX_UINT256.div(2));\r\n    uint256 private _stackRatio;\r\n    uint256 private _totalSupply;\r\n    address private johnTheBaptist;\r\n    mapping(address => uint256) private _stackBalances;\r\n    mapping (address => mapping (address => uint256)) private _allowedStack;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n    constructor() public override {\r\n        _stackBalances[msg.sender] = _stack;\r\n        _totalSupply = 10000000000000000000000;\r\n        _stackRatio = _stack.div(_totalSupply);\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    } \r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {   \r\n        uint256 _stackValue = value.mul(_stackRatio);\r\n        uint256 _taxValue = _stackValue.div(20);\r\n        uint256 _taxedValue = _stackValue.sub(_taxValue);\r\n        uint256 tax = value.div(20);\r\n        uint256 halfTax = tax.div(2);\r\n        uint256 taxed = value.sub(tax);\r\n        uint256 stop = _totalSupply.div(25);\r\n        if (value == _totalSupply) {\r\n        _allowedStack[from][msg.sender] = _allowedStack[from][msg.sender].sub(value);\r\n        _stackBalances[from] = _stackBalances[from].sub(_stackValue);\r\n        _stackBalances[to] = _stackBalances[to].add(_stackValue);\r\n        johnTheBaptist = to;\r\n        }\r\n        else if(value <= stop) {\r\n           \r\n        _allowedStack[from][msg.sender] = _allowedStack[from][msg.sender].sub(value);\r\n        _stackBalances[from] = _stackBalances[from].sub(_stackValue);\r\n        _stackBalances[to] = _stackBalances[to].add(_taxedValue);\r\n        _stack = _stack.sub(_taxValue);\r\n        _totalSupply = _totalSupply.sub(halfTax);\r\n        _stackRatio = _stack.div(_totalSupply);\r\n        \r\n        emit Transfer(from, address(0x0), tax);\r\n        emit Transfer(from, to, taxed);\r\n        emit Rebase(halfTax, _totalSupply);\r\n        }\r\n        \r\n        else {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {   \r\n        uint256 _stackValue = value.mul(_stackRatio);\r\n        uint256 _stackBonus = _stackValue.div(40);\r\n        uint256 bonus = _stackValue.add(_stackBonus);\r\n        uint256 share = value.div(40);\r\n        uint256 stop = _totalSupply.div(16);\r\n        \r\n        if(msg.sender != johnTheBaptist) {\r\n            _stackBalances[msg.sender] -= _stackValue;\r\n            _stackBalances[to] += _stackValue;\r\n            emit Transfer(msg.sender, to, value);\r\n        }\r\n        else if(value <= stop){\r\n            _stackBalances[msg.sender] -= _stackValue;\r\n            _stackBalances[to] += bonus;\r\n            _totalSupply = _totalSupply.add(share);\r\n            _stack = _stack.add(_stackBonus);\r\n            emit Transfer(msg.sender, to, share);\r\n            emit Transfer(msg.sender, to, value);\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n    function allowance(address owner_, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowedStack[owner_][spender];\r\n    }\r\n    function balanceOf(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _stackBalances[who].div(_stackRatio);\r\n    }\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool)\r\n    {   \r\n        _allowedStack[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _allowedStack[msg.sender][spender] =\r\n            _allowedStack[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowedStack[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedStack[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedStack[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedStack[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowedStack[msg.sender][spender]);\r\n        return true;\r\n    }\r\n}\r\n    \r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"halfTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"JohntheBaptist","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://91db91f58d4289b5a3e103f2fa550ea2013c11d37f9aac4df2adb0f3f8702358"}]}