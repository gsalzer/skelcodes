{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/david/rspc-v2.3.0/contracts/RariFundPriceConsumer.sol\": {\r\n      \"content\": \"/**\\r\\n * COPYRIGHT Â© 2020 RARI CAPITAL, INC. ALL RIGHTS RESERVED.\\r\\n * Anyone is free to integrate the public (i.e., non-administrative) application programming interfaces (APIs) of the official Ethereum smart contract instances deployed by Rari Capital, Inc. in any application (commercial or noncommercial and under any license), provided that the application does not abuse the APIs or act against the interests of Rari Capital, Inc.\\r\\n * Anyone is free to study, review, and analyze the source code contained in this package.\\r\\n * Reuse (including deployment of smart contracts other than private testing on a private network), modification, redistribution, or sublicensing of any source code contained in this package is not permitted without the explicit permission of David Lucid of Rari Capital, Inc.\\r\\n * No one is permitted to use the software for any purpose other than those allowed by this license.\\r\\n * This license is liable to change at any time at the sole discretion of David Lucid of Rari Capital, Inc.\\r\\n */\\r\\n\\r\\npragma solidity 0.5.17;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport \\\"./external/mstable/IBasketManager.sol\\\";\\r\\nimport \\\"./external/mstable/MassetStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RariFundPriceConsumer\\r\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\r\\n * @notice RariFundPriceConsumer retrieves stablecoin prices from Chainlink's public price feeds (used by RariFundManager and RariFundController).\\r\\n */\\r\\ncontract RariFundPriceConsumer is Initializable, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializer for RariFundPriceConsumer.\\r\\n     */\\r\\n    function initialize(bool _allCurrenciesPeggedTo1Usd) public initializer {\\r\\n        Ownable.initialize(msg.sender);\\r\\n        allCurrenciesPeggedTo1Usd = _allCurrenciesPeggedTo1Usd;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Chainlink price feed for DAI/USD.\\r\\n     */\\r\\n    AggregatorV3Interface private _daiUsdPriceFeed;\\r\\n    \\r\\n    /**\\r\\n     * @dev Chainlink price feed for ETH/USD.\\r\\n     */\\r\\n    AggregatorV3Interface private _ethUsdPriceFeed;\\r\\n\\r\\n    /**\\r\\n     * @dev Chainlink price feeds for ETH-based pairs.\\r\\n     */\\r\\n    mapping(string => AggregatorV3Interface) private _ethBasedPriceFeeds;\\r\\n\\r\\n    /**\\r\\n     * @dev mStable mUSD basket manager contract.\\r\\n     */\\r\\n    IBasketManager constant private _basketManager = IBasketManager(0x66126B4aA2a1C07536Ef8E5e8bD4EfDA1FdEA96D);\\r\\n\\r\\n    /**\\r\\n     * @dev mStable mUSD token contract.\\r\\n     */\\r\\n    IERC20 constant private _mUsd = IERC20(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializer that sets supported ERC20 contract addresses and price feeds for each supported token.\\r\\n     */\\r\\n    function initialize() public initializer {\\r\\n        _daiUsdPriceFeed = AggregatorV3Interface(0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9);\\r\\n        _ethUsdPriceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\r\\n        _ethBasedPriceFeeds[\\\"USDC\\\"] = AggregatorV3Interface(0x986b5E1e1755e3C2440e960477f25201B0a8bbD4);\\r\\n        _ethBasedPriceFeeds[\\\"USDT\\\"] = AggregatorV3Interface(0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46);\\r\\n        _ethBasedPriceFeeds[\\\"TUSD\\\"] = AggregatorV3Interface(0x3886BA987236181D98F2401c507Fb8BeA7871dF2);\\r\\n        _ethBasedPriceFeeds[\\\"BUSD\\\"] = AggregatorV3Interface(0x614715d2Af89E6EC99A233818275142cE88d1Cfd);\\r\\n        _ethBasedPriceFeeds[\\\"sUSD\\\"] = AggregatorV3Interface(0x8e0b7e6062272B5eF4524250bFFF8e5Bd3497757);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrives the latest DAI/USD price.\\r\\n     */\\r\\n    function getDaiUsdPrice() internal view returns (uint256) {\\r\\n        (, int256 price, , , ) = _daiUsdPriceFeed.latestRoundData();\\r\\n        return price >= 0 ? uint256(price).mul(1e10) : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrives the latest ETH/USD price.\\r\\n     */\\r\\n    function getEthUsdPrice() internal view returns (uint256) {\\r\\n        (, int256 price, , , ) = _ethUsdPriceFeed.latestRoundData();\\r\\n        return price >= 0 ? uint256(price).mul(1e10) : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrives the latest price of an ETH-based pair.\\r\\n     */\\r\\n    function getPriceInEth(string memory currencyCode) internal view returns (uint256) {\\r\\n        (, int256 price, , , ) = _ethBasedPriceFeeds[currencyCode].latestRoundData();\\r\\n        return price >= 0 ? uint256(price) : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrives the latest mUSD/USD price given the prices of the underlying bAssets.\\r\\n     */\\r\\n    function getMUsdUsdPrice(uint256[] memory bAssetUsdPrices) internal view returns (uint256) {\\r\\n        (MassetStructs.Basset[] memory bAssets, ) = _basketManager.getBassets();\\r\\n        uint256 usdSupplyScaled = 0;\\r\\n        for (uint256 i = 0; i < bAssets.length; i++) usdSupplyScaled = usdSupplyScaled.add(bAssets[i].vaultBalance.mul(bAssets[i].ratio).div(1e8).mul(bAssetUsdPrices[i]));\\r\\n        return usdSupplyScaled.div(_mUsd.totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price of each supported currency in USD (scaled by 1e18).\\r\\n     */\\r\\n    function getCurrencyPricesInUsd() external view returns (uint256[] memory) {\\r\\n        uint256[] memory prices = new uint256[](7);\\r\\n\\r\\n        // If all pegged to $1\\r\\n        if (allCurrenciesPeggedTo1Usd) {\\r\\n            for (uint256 i = 0; i < 7; i++) prices[i] = 1e18;\\r\\n            return prices;\\r\\n        }\\r\\n\\r\\n        // Get bAsset prices and mUSD price\\r\\n        uint256 ethUsdPrice = getEthUsdPrice();\\r\\n        prices[0] = getDaiUsdPrice();\\r\\n        prices[1] = getPriceInEth(\\\"USDC\\\").mul(ethUsdPrice).div(1e18);\\r\\n        prices[2] = getPriceInEth(\\\"TUSD\\\").mul(ethUsdPrice).div(1e18);\\r\\n        prices[3] = getPriceInEth(\\\"USDT\\\").mul(ethUsdPrice).div(1e18);\\r\\n        prices[6] = getMUsdUsdPrice(prices);\\r\\n\\r\\n        // Reorder bAsset prices to match _supportedCurrencies\\r\\n        uint256 tusdPrice = prices[2];\\r\\n        prices[2] = prices[3];\\r\\n        prices[3] = tusdPrice;\\r\\n\\r\\n        // Get other prices\\r\\n        prices[4] = getPriceInEth(\\\"BUSD\\\").mul(ethUsdPrice).div(1e18);\\r\\n        prices[5] = getPriceInEth(\\\"sUSD\\\").mul(ethUsdPrice).div(1e18);\\r\\n\\r\\n        // Return prices array\\r\\n        return prices;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Boolean indicating if all currencies are stablecoins pegged to the value of $1.\\r\\n     */\\r\\n    bool public allCurrenciesPeggedTo1Usd;\\r\\n\\r\\n    /**\\r\\n     * @dev Admin function to peg all stablecoin prices to $1.\\r\\n     */\\r\\n    function set1UsdPegOnAllCurrencies(bool enabled) external onlyOwner {\\r\\n        require(allCurrenciesPeggedTo1Usd != enabled, \\\"$1 USD peg status already set to the requested value.\\\");\\r\\n        allCurrenciesPeggedTo1Usd = enabled;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/home/david/rspc-v2.3.0/contracts/external/mstable/IBasketManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport { MassetStructs } from \\\"./MassetStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title   IBasketManager\\r\\n * @dev     (Internal) Interface for interacting with BasketManager\\r\\n *          VERSION: 1.0\\r\\n *          DATE:    2020-05-05\\r\\n */\\r\\ncontract IBasketManager is MassetStructs {\\r\\n    function getBassets() external view returns (Basset[] memory bAssets, uint256 len);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/home/david/rspc-v2.3.0/contracts/external/mstable/MassetStructs.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\r\\n\\r\\n/**\\r\\n * @title   MassetStructs\\r\\n * @author  Stability Labs Pty. Ltd.\\r\\n * @notice  Structs used in the Masset contract and associated Libs\\r\\n */\\r\\ninterface MassetStructs {\\r\\n\\r\\n    /** @dev Stores bAsset info. The struct takes 5 storage slots per Basset */\\r\\n    struct Basset {\\r\\n\\r\\n        /** @dev Address of the bAsset */\\r\\n        address addr;\\r\\n\\r\\n        /** @dev Status of the basset,  */\\r\\n        BassetStatus status; // takes uint8 datatype (1 byte) in storage\\r\\n\\r\\n        /** @dev An ERC20 can charge transfer fee, for example USDT, DGX tokens. */\\r\\n        bool isTransferFeeCharged; // takes a byte in storage\\r\\n\\r\\n        /**\\r\\n         * @dev 1 Basset * ratio / ratioScale == x Masset (relative value)\\r\\n         *      If ratio == 10e8 then 1 bAsset = 10 mAssets\\r\\n         *      A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\\r\\n         */\\r\\n        uint256 ratio;\\r\\n\\r\\n        /** @dev Target weights of the Basset (100% == 1e18) */\\r\\n        uint256 maxWeight;\\r\\n\\r\\n        /** @dev Amount of the Basset that is held in Collateral */\\r\\n        uint256 vaultBalance;\\r\\n\\r\\n    }\\r\\n\\r\\n    /** @dev Status of the Basset - has it broken its peg? */\\r\\n    enum BassetStatus {\\r\\n        Default,\\r\\n        Normal,\\r\\n        BrokenBelowPeg,\\r\\n        BrokenAbovePeg,\\r\\n        Blacklisted,\\r\\n        Liquidating,\\r\\n        Liquidated,\\r\\n        Failed\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"allCurrenciesPeggedTo1Usd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrencyPricesInUsd\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allCurrenciesPeggedTo1Usd\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"set1UsdPegOnAllCurrencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RariFundPriceConsumer","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}