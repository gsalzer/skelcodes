{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IMineParam.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IMineParam {\r\n    function minePrice() external view returns (uint256);\r\n    function getMinePrice() external view returns (uint256);\r\n    function mineIncomePerTPerSecInWei() external view returns(uint256);\r\n    function incomePerTPerSecInWei() external view returns(uint256);\r\n    function setIncomePerTPerSecInWeiAndUpdateMinePrice(uint256 _incomePerTPerSecInWei) external;\r\n    function updateMinePrice() external;\r\n    function paramSetter() external view returns(address);\r\n    function addListener(address _listener) external;\r\n    function removeListener(address _listener) external returns(bool);\r\n}\r\n\r\n// Dependency file: contracts/modules/Ownable.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// Dependency file: contracts/modules/Paramable.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n// import 'contracts/modules/Ownable.sol';\r\n\r\ncontract Paramable is Ownable {\r\n    address public paramSetter;\r\n\r\n    event ParamSetterChanged(address indexed previousSetter, address indexed newSetter);\r\n\r\n    constructor() public {\r\n        paramSetter = msg.sender;\r\n    }\r\n\r\n    modifier onlyParamSetter() {\r\n        require(msg.sender == owner || msg.sender == paramSetter, \"!paramSetter\");\r\n        _;\r\n    }\r\n\r\n    function setParamSetter(address _paramSetter) external onlyOwner {\r\n        require(_paramSetter != address(0), \"param setter is the zero address\");\r\n        emit ParamSetterChanged(paramSetter, _paramSetter);\r\n        paramSetter = _paramSetter;\r\n    }\r\n\r\n}\r\n\r\n\r\n// Root file: contracts/MineParamSetter.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import 'contracts/interfaces/IMineParam.sol';\r\n// import 'contracts/modules/Paramable.sol';\r\n\r\ninterface IPOWToken {\r\n    function mineParam() external returns (address);\r\n}\r\n\r\ncontract MineParamSetter is Paramable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public minIncomeRate;\r\n    uint256 public maxIncomeRate;\r\n    uint256 public minPriceRate;\r\n    uint256 public maxPriceRate;\r\n\r\n    function setRate(uint256 _minIncomeRate, uint256 _maxIncomeRate, uint256 _minPriceRate, uint256 _maxPriceRate) public onlyParamSetter {\r\n        minIncomeRate = _minIncomeRate;\r\n        maxIncomeRate = _maxIncomeRate;\r\n        minPriceRate = _minPriceRate;\r\n        maxPriceRate = _maxPriceRate;\r\n    }\r\n\r\n    // return >9 is pass\r\n    function checkWithCode (address[] memory params, uint256[] memory values) public view returns (uint256) {\r\n        if(params.length != values.length) {\r\n            return 1;\r\n        }\r\n        for(uint256 i; i<params.length; i++) {\r\n            if(IMineParam(params[i]).paramSetter() != address(this)) {\r\n                return 2;\r\n            }\r\n            uint256 oldIncomePer = IMineParam(params[i]).incomePerTPerSecInWei();\r\n            uint256 oldPrice = IMineParam(params[i]).minePrice();\r\n            uint256 _incomePerTPerSecInWei = values[i];\r\n            \r\n            if(oldIncomePer == 0 || oldPrice == 0) {\r\n                return 10;\r\n            } else {\r\n                uint256 rate;\r\n                if(_incomePerTPerSecInWei > oldIncomePer) {\r\n                    rate = _incomePerTPerSecInWei.sub(oldIncomePer).mul(10000).div(oldIncomePer);\r\n                } else {\r\n                    rate = oldIncomePer.sub(_incomePerTPerSecInWei).mul(10000).div(oldIncomePer);\r\n                }\r\n                if(rate >= minIncomeRate && rate <= maxIncomeRate) {\r\n                    return 11;\r\n                }\r\n\r\n                uint256 currentPrice = IMineParam(params[i]).getMinePrice();\r\n                rate = 0;\r\n                if(currentPrice > oldPrice) {\r\n                    rate = currentPrice.sub(oldPrice).mul(10000).div(oldPrice);\r\n                } else {\r\n                    rate = oldPrice.sub(currentPrice).mul(10000).div(oldPrice);\r\n                }\r\n                if(rate >= minIncomeRate && rate <= maxIncomeRate) {\r\n                    return 12;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function check (address[] memory params, uint256[] memory values) public view returns (bool) {\r\n        uint256 result = checkWithCode(params, values);\r\n        if(result > 9)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    function update (address[] memory params, uint256[] memory values) public onlyParamSetter {\r\n        require(params.length == values.length, 'invalid parameters');\r\n        for(uint256 i; i<params.length; i++) {\r\n            bool isUpdate;\r\n            uint256 oldIncomePer = IMineParam(params[i]).incomePerTPerSecInWei();\r\n            uint256 oldPrice = IMineParam(params[i]).minePrice();\r\n            uint256 _incomePerTPerSecInWei = values[i];\r\n\r\n            if(oldIncomePer == 0 || oldPrice == 0) {\r\n                isUpdate = true;\r\n            } else {\r\n                uint256 rate;\r\n                if(_incomePerTPerSecInWei > oldIncomePer) {\r\n                    rate = _incomePerTPerSecInWei.sub(oldIncomePer).mul(10000).div(oldIncomePer);\r\n                } else {\r\n                    rate = oldIncomePer.sub(_incomePerTPerSecInWei).mul(10000).div(oldIncomePer);\r\n                }\r\n                if(rate >= minIncomeRate && rate <= maxIncomeRate) {\r\n                    isUpdate = true;\r\n                }\r\n\r\n                if(!isUpdate) {\r\n                    uint256 currentPrice = IMineParam(params[i]).getMinePrice();\r\n                    if(currentPrice > oldPrice) {\r\n                        rate = currentPrice.sub(oldPrice).mul(10000).div(oldPrice);\r\n                    } else {\r\n                        rate = oldPrice.sub(currentPrice).mul(10000).div(oldPrice);\r\n                    }\r\n                    if(rate >= minIncomeRate && rate <= maxIncomeRate) {\r\n                        isUpdate = true;\r\n                    }\r\n                }\r\n            }\r\n            if(isUpdate) {\r\n                updateOne(params[i], _incomePerTPerSecInWei);\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateOne (address param, uint256 _incomePerTPerSecInWei) public onlyParamSetter {\r\n        IMineParam(param).setIncomePerTPerSecInWeiAndUpdateMinePrice(_incomePerTPerSecInWei);\r\n    }\r\n\r\n    function updateMinePrice(address param) external onlyParamSetter {\r\n        IMineParam(param).updateMinePrice();\r\n    }\r\n\r\n    function addListener(address param, address _listener) external onlyParamSetter {\r\n        IMineParam(param).addListener(_listener);\r\n    }\r\n\r\n    function removeListener(address param, address _listener) external onlyParamSetter returns(bool){\r\n        return IMineParam(param).removeListener(_listener);\r\n    }\r\n\r\n    function setHashTokenMineParam(address hashToken) public onlyParamSetter {\r\n        IMineParam(IPOWToken(hashToken).mineParam()).addListener(hashToken);\r\n    }\r\n\r\n    function setHashTokenMineParams(address[] memory hashTokens) public onlyParamSetter {\r\n        for(uint256 i; i<hashTokens.length; i++) {\r\n            setHashTokenMineParam(hashTokens[i]);\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSetter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSetter\",\"type\":\"address\"}],\"name\":\"ParamSetterChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"param\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_listener\",\"type\":\"address\"}],\"name\":\"addListener\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"params\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"params\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"checkWithCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxIncomeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPriceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minIncomeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPriceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paramSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"param\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_listener\",\"type\":\"address\"}],\"name\":\"removeListener\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"hashToken\",\"type\":\"address\"}],\"name\":\"setHashTokenMineParam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"hashTokens\",\"type\":\"address[]\"}],\"name\":\"setHashTokenMineParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paramSetter\",\"type\":\"address\"}],\"name\":\"setParamSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minIncomeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncomeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"params\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"param\",\"type\":\"address\"}],\"name\":\"updateMinePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"param\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incomePerTPerSecInWei\",\"type\":\"uint256\"}],\"name\":\"updateOne\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MineParamSetter","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8365f14500f04e93d0ef283bcb8a3ed55530c38f7f5817594d36adc9378be170"}]}