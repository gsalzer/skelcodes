{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0;\r\n\r\ncontract DoubleRewardsInvestment {\r\n    string public name = \"doublerewards.investments\";\r\n    string public symbol = \"DOUBLE\";\r\n    uint256 public totalSupply = 20000000000000000000000;\r\n    uint8 public decimals = 18;\r\n\r\n    address public owner;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor() public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        \r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\NoSell\\RewardsContract.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ncontract RewardsContract {\r\n    string public name = \"Reward Contract\";\r\n    address public owner;\r\n\r\n    DoubleRewardsInvestment public doubleRewardsToken;\r\n    event eventLogString(string value);\r\n\r\n    address[] private users;\r\n    mapping(address => bool) private isGetReward;\r\n\r\n    constructor(DoubleRewardsInvestment _doubleRewardsToken) public {\r\n        doubleRewardsToken = _doubleRewardsToken;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function getRewards() public {\r\n        uint256 balance = doubleRewardsToken.balanceOf(msg.sender);\r\n        if (balance <= 0) {\r\n            emit eventLogString(\r\n                \"You must to buy token on Uniswap first before claiming reward!\"\r\n            );\r\n        }\r\n        require(\r\n            balance > 0,\r\n            \"You must to buy token on Uniswap first before claiming reward!\"\r\n        );\r\n        if (isGetReward[msg.sender]) {\r\n            emit eventLogString(\r\n                \"You can only claim reward 1 time!\"\r\n            );\r\n        }\r\n        require(!isGetReward[msg.sender], \"You can only claim reward 1 time!\");\r\n\r\n        doubleRewardsToken.transfer(msg.sender, balance);\r\n\r\n        if (!isGetReward[msg.sender]) {\r\n            isGetReward[msg.sender] = true;\r\n            users.push(msg.sender);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract DoubleRewardsInvestment\",\"name\":\"_doubleRewardsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"eventLogString\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"doubleRewardsToken\",\"outputs\":[{\"internalType\":\"contract DoubleRewardsInvestment\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardsContract","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008097737269825c54fdda2a2dd1bf17f39727c31f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f3fa5037b1bb784c05bc75597b7f7e49ba792270736e0734615e01626aeec107"}]}