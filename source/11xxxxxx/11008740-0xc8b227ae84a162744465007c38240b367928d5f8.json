{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/sakeswap/interfaces/ISakeSwapRouter.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.2;\r\n\r\ninterface ISakeSwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB\r\n        );\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH\r\n        );\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB\r\n        );\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        bool ifmint\r\n    ) external;\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function mint(address to, uint value) external returns (bool);\r\n    function burn(address from, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/ISakeSwapFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ISakeSwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function migrator() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setMigrator(address) external;\r\n}\r\n\r\n// File: contracts/sakeswap/interfaces/ISakeSwapPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ISakeSwapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function stoken() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    function dealSlippageWithIn(address[] calldata path, uint amountIn, address to, bool ifmint) external returns (uint amountOut);\r\n    function dealSlippageWithOut(address[] calldata path, uint amountOut, address to, bool ifmint) external returns (uint extra);\r\n    function getAmountOutMarket(address token, uint amountIn) external view returns (uint _out, uint t0Price);\r\n    function getAmountInMarket(address token, uint amountOut) external view returns (uint _in, uint t0Price);\r\n    function getAmountOutFinal(address token, uint256 amountIn) external view returns (uint256 amountOut, uint256 stokenAmount);\r\n    function getAmountInFinal(address token, uint256 amountOut) external view returns (uint256 amountIn, uint256 stokenAmount);\r\n    function getTokenMarketPrice(address token) external view returns (uint price);\r\n}\r\n\r\n// File: contracts/sakeswap/libraries/SafeMath.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// File: contracts/tools/SakeSwapBatchTrade.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SakeSwapBatchTrade {\r\n    using SafeMath for uint256;\r\n    ISakeSwapFactory public factory = ISakeSwapFactory(0x75e48C954594d64ef9613AeEF97Ad85370F13807);\r\n    ISakeSwapRouter public router = ISakeSwapRouter(0x9C578b573EdE001b95d51a55A3FAfb45f5608b1f);\r\n    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // constructor(address _router, address _weth, address _factory) public {\r\n    //     router = ISakeSwapRouter(_router);\r\n    //     weth = _weth;\r\n    //     factory = ISakeSwapFactory(_factory);\r\n    // }\r\n\r\n    event MultiSwap(address indexed user, uint256 consume, uint256 stoken, uint256 lptoken);\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == weth); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    function swapExactETHForTokens(\r\n        address token,\r\n        uint8 swapTimes,\r\n        bool addLiquidity\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 consumeAmount,\r\n            uint256 stokenAmount,\r\n            uint256 lptokenAmount\r\n        )\r\n    {\r\n        require(msg.value > 0 && (swapTimes > 0 || addLiquidity == true), \"invalid params\");\r\n        consumeAmount = msg.value;\r\n        address pair = factory.getPair(weth, token);\r\n        address stoken = ISakeSwapPair(pair).stoken();\r\n        IWETH(weth).deposit{value: msg.value}();\r\n        IERC20(weth).approve(address(router), uint256(-1));\r\n        IERC20(token).approve(address(router), uint256(-1));\r\n        if (swapTimes > 0) _swapExactTokensForTokens(weth, token, swapTimes);\r\n        uint256 remain = IERC20(weth).balanceOf(address(this));\r\n        if (addLiquidity) {\r\n            lptokenAmount = _addLiquidity(weth, token, remain);\r\n            uint256 wethDust = IERC20(weth).balanceOf(address(this));\r\n            if (wethDust > 0) {\r\n                IWETH(weth).withdraw(wethDust);\r\n                msg.sender.transfer(wethDust);\r\n            }\r\n            IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n            consumeAmount = consumeAmount.sub(wethDust);\r\n        } else {\r\n            IWETH(weth).withdraw(remain);\r\n            msg.sender.transfer(remain);\r\n            consumeAmount = consumeAmount.sub(remain);\r\n        }\r\n        stokenAmount = IERC20(stoken).balanceOf(address(this));\r\n        IERC20(stoken).transfer(msg.sender, stokenAmount);\r\n        emit MultiSwap(msg.sender, consumeAmount, stokenAmount, lptokenAmount);\r\n    }\r\n\r\n    // function swapExactTokensForTokens(\r\n    //     address tokenA,\r\n    //     address tokenB,\r\n    //     uint256 amountIn,\r\n    //     uint8 swapTimes,\r\n    //     bool addLiquidity\r\n    // )\r\n    //     external\r\n    //     returns (\r\n    //         uint256 consumeAmount,\r\n    //         uint256 stokenAmount,\r\n    //         uint256 lptokenAmount\r\n    //     )\r\n    // {\r\n    //     require(amountIn > 0 && (swapTimes > 0 || addLiquidity == true), \"invalid params\");\r\n    //     IERC20(tokenA).approve(address(router), uint256(-1));\r\n    //     IERC20(tokenB).approve(address(router), uint256(-1));\r\n    //     address pair = factory.getPair(tokenA, tokenB);\r\n    //     address stoken = ISakeSwapPair(pair).stoken();\r\n    //     IERC20(tokenA).transferFrom(msg.sender, address(this), amountIn);\r\n    //     if (swapTimes > 0) _swapExactTokensForTokens(tokenA, tokenB, swapTimes);\r\n    //     if (addLiquidity) lptokenAmount = _addLiquidity(tokenA, tokenB, IERC20(tokenA).balanceOf(address(this)));\r\n    //     consumeAmount = amountIn.sub(IERC20(tokenA).balanceOf(address(this)));\r\n    //     stokenAmount = IERC20(stoken).balanceOf(address(this));\r\n    //     IERC20(tokenA).transfer(msg.sender, IERC20(tokenA).balanceOf(address(this)));\r\n    //     IERC20(tokenB).transfer(msg.sender, IERC20(tokenB).balanceOf(address(this)));\r\n    //     IERC20(stoken).transfer(msg.sender, stokenAmount);\r\n    //     emit MultiSwap(msg.sender, consumeAmount, stokenAmount, lptokenAmount);\r\n    // }\r\n\r\n    function _swapExactTokensForTokens(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint8 swapTimes\r\n    ) internal {\r\n        address[] memory pathForward = new address[](2);\r\n        address[] memory pathBackward = new address[](2);\r\n        pathForward[0] = tokenA;\r\n        pathForward[1] = tokenB;\r\n        pathBackward[0] = tokenB;\r\n        pathBackward[1] = tokenA;\r\n        for (uint8 i = 0; i < swapTimes; i++) {\r\n            uint256 amountA = IERC20(tokenA).balanceOf(address(this));\r\n            router.swapExactTokensForTokens(amountA, 0, pathForward, address(this), now + 60, true);\r\n            uint256 amountB = IERC20(tokenB).balanceOf(address(this));\r\n            router.swapExactTokensForTokens(amountB, 0, pathBackward, address(this), now + 60, true);\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amount\r\n    ) internal returns (uint256 liquidity) {\r\n        uint256 half = amount / 2;\r\n        uint256 swapAmount = amount.sub(half);\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        router.swapExactTokensForTokens(swapAmount, 0, path, address(this), now + 60, false);\r\n        (, , liquidity) = router.addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            half,\r\n            IERC20(tokenB).balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            now + 60\r\n        );\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"consume\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stoken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lptoken\",\"type\":\"uint256\"}],\"name\":\"MultiSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ISakeSwapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"swapTimes\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"addLiquidity\",\"type\":\"bool\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"consumeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lptokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SakeSwapBatchTrade","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bf2b2f4d3370d7ddde465574e0f50fb86d9a9a9c550397adb142e438f14545d5"}]}