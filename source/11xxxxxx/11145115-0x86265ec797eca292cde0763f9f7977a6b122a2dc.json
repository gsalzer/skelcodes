{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IUniswapV2Pair\r\n{\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract UniUtils\r\n{\r\n    constructor() public\r\n    {\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n          addr := mload(add(bys,20))\r\n        } \r\n    }\r\n    \r\n    function copy(bytes memory dst, bytes memory src, uint start, uint count) private pure {\r\n        for(uint i = 0; i < count; i++)\r\n        {\r\n            dst[start+i] = src[i];\r\n        }\r\n    }\r\n\r\n    function getPackedReserves(bytes calldata pack) external view returns (bytes memory)\r\n    {\r\n        uint count = pack.length/20;\r\n        bytes memory result = new bytes(28*count);\r\n        \r\n        for(uint i = 0; i < count; i++)\r\n        {\r\n            uint s = i*20;\r\n            uint e = s + 20;\r\n            bytes calldata ab = pack[s:e];\r\n            \r\n            address a0 = bytesToAddress(ab);\r\n            \r\n            (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(a0).getReserves();\r\n            \r\n            bytes memory r = abi.encodePacked(reserve0,reserve1);\r\n            copy(result, r, i*28, 28);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pack\",\"type\":\"bytes\"}],\"name\":\"getPackedReserves\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniUtils","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b61284ad26133a66433b4ecf9622011976e539ad13399832a2cb6a50383a54ef"}]}