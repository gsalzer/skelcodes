{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24; \r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public coinvest;\r\n  mapping (address => bool) public admins;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    coinvest = msg.sender;\r\n    admins[owner] = true;\r\n    admins[coinvest] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyCoinvest() {\r\n      require(msg.sender == coinvest);\r\n      _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n      require(admins[msg.sender]);\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n  /**\r\n   * @dev Changes the Coinvest wallet that will receive funds from investment contract.\r\n   * @param _newCoinvest The address of the new wallet.\r\n  **/\r\n  function transferCoinvest(address _newCoinvest) \r\n    external\r\n    onlyCoinvest\r\n  {\r\n    require(_newCoinvest != address(0));\r\n    coinvest = _newCoinvest;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to add admins who are allowed to add funds to the investment contract.\r\n   * @param _user The address of the admin to add or remove.\r\n   * @param _status True to add the user, False to remove the user.\r\n  **/\r\n  function alterAdmin(address _user, bool _status)\r\n    external\r\n    onlyCoinvest\r\n  {\r\n    require(_user != address(0));\r\n    require(_user != coinvest);\r\n    admins[_user] = _status;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenSwap is Ownable {\r\n    \r\n    ERC20Interface public tokenV1;\r\n    ERC20Interface public tokenV2;\r\n    ERC20Interface public tokenV3;\r\n    ERC20Interface public tokenV4;\r\n    \r\n    /**\r\n     * @param _tokenV1 The original ERC223 version of the Coinvest token.\r\n     * @param _tokenV2 The second iteration of the token using ERC865.\r\n     * @param _tokenV3 The third iteration of the Coinvest token.\r\n     * @param _tokenV4 The new iteration of the CoinDeFi token (the 3rd with gas savings).\r\n    **/\r\n    constructor(address _tokenV1, address _tokenV2, address _tokenV3, address _tokenV4) public {\r\n        tokenV1 = ERC20Interface(_tokenV1);\r\n        tokenV2 = ERC20Interface(_tokenV2);\r\n        tokenV3 = ERC20Interface(_tokenV3);\r\n        tokenV4 = ERC20Interface(_tokenV4);\r\n    }\r\n    /**\r\n     * @param _from The address that has transferred this contract tokens.\r\n     * @param _value The amount of tokens that have been transferred.\r\n     * @param _data The extra data sent with transfer (should be nothing).\r\n    **/\r\n    function tokenFallback(address _from, uint _value, bytes _data)\r\n      external\r\n    {\r\n        require(msg.sender == address(tokenV1));\r\n        require(_value > 0);\r\n        require(tokenV4.transfer(_from, _value));\r\n        _data;\r\n    }\r\n    /**\r\n     * @dev approveAndCall will be used on the old token to transfer from the user\r\n     * to the contract, which will then return to them the new tokens.\r\n     * @param _from The user that is making the call.\r\n     * @param _amount The amount of tokens being transferred to this swap contract.\r\n     * @param _token The address of the token contract (address(oldToken))--not used.\r\n     * @param _data Extra data with the call--not used.\r\n    **/\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data)\r\n      public\r\n    {\r\n        address sender = msg.sender;\r\n        require(sender == address(tokenV2) || sender == address(tokenV3));\r\n        require(_amount > 0);\r\n        require(ERC20Interface(sender).transferFrom(_from, address(this), _amount));\r\n        require(tokenV4.transfer(_from, _amount));\r\n        _token; _data;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allow the owner to take Ether or tokens off of this contract if they are accidentally sent.\r\n     * @param _tokenContract The address of the token to withdraw (0x0 if Ether).\r\n     * @notice This allows Coinvest to take all valuable tokens from the TokenSwap contract.\r\n    **/\r\n    function tokenEscape(address _tokenContract)\r\n      external\r\n      onlyCoinvest\r\n    {\r\n        // Somewhat pointless require as Coinvest can withdraw V2 and exchange for more V3.\r\n        require(_tokenContract != address(tokenV1) && _tokenContract != address(tokenV3));\r\n        \r\n        if (_tokenContract == address(0)) coinvest.transfer(address(this).balance);\r\n        else {\r\n            ERC20Interface lostToken = ERC20Interface(_tokenContract);\r\n        \r\n            uint256 stuckTokens = lostToken.balanceOf(address(this));\r\n            lostToken.transfer(coinvest, stuckTokens);\r\n        }    \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"coinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"alterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenV2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"tokenEscape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenV1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenV4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenV3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCoinvest\",\"type\":\"address\"}],\"name\":\"transferCoinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenV1\",\"type\":\"address\"},{\"name\":\"_tokenV2\",\"type\":\"address\"},{\"name\":\"_tokenV3\",\"type\":\"address\"},{\"name\":\"_tokenV4\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSwap","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004306ce4a5d8b21ee158cb8396a4f6866f14d6ac80000000000000000000000005e8f855966d638135a968861e80dda722291b06d000000000000000000000000eb547ed1d8a3ff1461abaa7f0022fed4836e00a4000000000000000000000000e61fdaf474fac07063f2234fb9e60c1163cfa850","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eed45333c7998da8a02927a5054173084dc18afe387db6d410fa155abf6f61a8"}]}