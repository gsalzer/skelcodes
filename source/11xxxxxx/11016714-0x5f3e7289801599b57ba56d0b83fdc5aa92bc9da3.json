{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2020-10-09\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    \r\n    address payable public owner;\r\n    \r\n    address payable public newOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _trasnferOwnership(msg.sender);\r\n    }\r\n    \r\n    function _trasnferOwnership(address payable _whom) internal {\r\n        emit OwnershipTransferred(owner,_whom);\r\n        owner = _whom;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"ERR_AUTHORIZED_ADDRESS_ONLY\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable _newOwner)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(_newOwner != address(0),\"ERR_ZERO_ADDRESS\");\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    \r\n    function acceptOwnership() external\r\n        virtual\r\n        returns (bool){\r\n            require(msg.sender == newOwner,\"ERR_ONLY_NEW_OWNER\");\r\n            owner = newOwner;\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            newOwner = address(0);\r\n            return true;\r\n        }\r\n    \r\n    \r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface Oraclize{\r\n    function oracleCallback(uint256 requsestId,uint256 balance) external returns(bool);\r\n}\r\n\r\ncontract JointerOracle is Ownable{\r\n    \r\n    uint256 public requsestId;\r\n\r\n    mapping(address => bool) public isAllowedAddress;\r\n    mapping(uint256 => bool) public requestFullFilled;\r\n    mapping(uint256 => address) public requestedBy;\r\n    mapping(uint256 => address) public requestedToken;\r\n    mapping(uint256 => address) public requestedUser;\r\n    \r\n    event BalanceRequested(uint256 requsestId,uint256 network,address token,address user);\r\n    event BalanceUpdated(uint256 requsestId,address token,address user,uint256 balance);\r\n    \r\n    // parmeter pass networkId like eth_mainNet = 1,ropsten = 97 etc \r\n    // token pramter is which token balance you want for native currnecy pass address(0)\r\n    // user which address you want to show\r\n    function getBalance(uint256 network,address token,address user) external returns(uint256){\r\n        require(isAllowedAddress[msg.sender],\"ERR_ALLOWED_ADDRESS_ONLY\");\r\n        requsestId +=1;\r\n        requestedBy[requsestId] = msg.sender;\r\n        requestedUser[requsestId] = user;\r\n        requestedToken[requsestId] = token;\r\n        emit BalanceRequested(requsestId,network,token,user);\r\n        return requsestId;\r\n    }\r\n    \r\n    \r\n    \r\n    function oracleCallback(uint256 _requsestId,uint256 _balances) external onlyOwner returns(bool){\r\n        require(requestFullFilled[_requsestId]==false,\"ERR_REQUESTED_IS_FULLFILLED\");\r\n        address _requestedBy = requestedBy[requsestId];\r\n        Oraclize(_requestedBy).oracleCallback(requsestId,_balances);\r\n        emit BalanceUpdated(requsestId,requestedToken[_requsestId],requestedUser[_requsestId],_balances);\r\n        requestFullFilled[_requsestId] = true;\r\n        return true;\r\n    }\r\n    \r\n    function changeAllowedAddress(address _which,bool _bool) external onlyOwner returns(bool){\r\n        isAllowedAddress[_which] = _bool;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requsestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"BalanceRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requsestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_which\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"changeAllowedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requsestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balances\",\"type\":\"uint256\"}],\"name\":\"oracleCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestFullFilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requsestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"JointerOracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5aa74508c4fe22bfce306e1573bb83601067592ff59a1567f0bbfe1369f21c63"}]}