{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/oracle/IExchangeRateOracle.sol\r\n\r\n\r\n/**\r\n * @title IExchangeRateOracle\r\n * @notice provides interface for fetching exchange rate values onchain, underlying implementations could use different oracles.\r\n*/\r\ninterface IExchangeRateOracle {\r\n\r\n    /**\r\n     * @notice return the value and the value's timestamp given a request ID\r\n     * @dev use granularity instead of defaulting to 18 for future oracle integrations\r\n     * @param requestId     a number that specifies the exchange rate pair\r\n     * @return false if could not get value, true with valid value, granularity, and timestamp if could get value\r\n     */\r\n    function getCurrentValue(uint256 requestId) external view returns (bool, uint256, uint256, uint256);\r\n}\r\n\r\n// File: contracts/acquisition/ITokenPool.sol\r\n\r\n\r\n/**\r\n * @title ITokenPool\r\n * @notice provides interface for token pool where ERC20 tokens can be deposited and withdraw\r\n*/\r\ninterface ITokenPool {\r\n\r\n    /**\r\n    * @notice deposit token into the pool from the source\r\n    * @param amount     amount of token to deposit\r\n    * @return true if success\r\n    */\r\n    function depositAssetToken(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @notice withdraw token from the pool back to the source\r\n    * @param amount     amount of token to withdraw\r\n    * @return true if success\r\n    */\r\n    function withdrawAssetToken(uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/acquisition/FixedPriceCADSingleSourceTokenPool.sol\r\n\r\n\r\n/**\r\n * @title FixedPriceCADSingleSourceTokenPool\r\n * @notice Convert USD into a wToken in CAD. wToken is transfered from a single-source pool to the sender of USD, while USD is transferred to the source.\r\n*/\r\ncontract FixedPriceCADSingleSourceTokenPool is ITokenPool {\r\n    using SafeMath for uint256;\r\n\r\n    event TokenDeposited(uint256 amount);\r\n    event TokenWithdrawn(uint256 amount);\r\n\r\n    event TokenTransaction(address indexed from, address to, uint256 tokenAmount, uint256 usdAmount);\r\n\r\n    // source where the wTokens come from\r\n    address public _poolSource;\r\n\r\n    // address of the wToken\r\n    IERC20 public _wToken;\r\n\r\n    // address of the USD to CAD oracle\r\n    IExchangeRateOracle public _oracle;\r\n\r\n    // wTokens, if fix-priced in CAD, will not require more than 2 decimals\r\n    uint256 public _fixedPriceCADCent;\r\n\r\n    // Dai contract\r\n    IERC20 public _daiContract;\r\n\r\n    // USDC contract\r\n    IERC20 public _usdcContract;\r\n\r\n    // USDT contract\r\n    IERC20 public _usdtContract;\r\n\r\n\r\n    constructor(\r\n        address poolSource,\r\n        address tokenAddress,\r\n        address oracleAddress,\r\n        uint256 fixedPriceCADCent,\r\n\r\n        address daiContractddress,\r\n        address usdcContractAddress,\r\n        address usdtContractAddress\r\n    ) public {\r\n        _poolSource = poolSource;\r\n        _wToken = IERC20(tokenAddress);\r\n        _oracle = IExchangeRateOracle(oracleAddress);\r\n        _fixedPriceCADCent = fixedPriceCADCent;\r\n\r\n        _daiContract = IERC20(daiContractddress);\r\n        _usdcContract = IERC20(usdcContractAddress);\r\n        _usdtContract = IERC20(usdtContractAddress);\r\n    }\r\n\r\n    /**\r\n    * @notice deposit token into the pool from the source\r\n    * @param amount     amount of token to deposit\r\n    * @return true if success\r\n    */\r\n    function depositAssetToken(uint256 amount) external virtual override returns (bool) {\r\n        require(msg.sender == _poolSource, \"Only designated source can deposit token\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n\r\n        _wToken.transferFrom(_poolSource, address(this), amount);\r\n\r\n        emit TokenDeposited(amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice withdraw token from the pool back to the source\r\n    * @param amount     amount of token to withdraw\r\n    * @return true if success\r\n    */\r\n    function withdrawAssetToken(uint256 amount) external virtual override returns (bool) {\r\n        require(msg.sender == _poolSource, \"Only designated source can withdraw token\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n\r\n        _wToken.transfer(_poolSource, amount);\r\n\r\n        emit TokenWithdrawn(amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice generic function for handling USD deposits and transfer of wTokens as a result\r\n    * @param usdAmount      amount of USD to deposit\r\n    * @param to             address to receive the resulting wTokens\r\n    * @param usdType        1 for Dai, 2 for USDC, 3 for USDT\r\n    * @return true if success\r\n    */\r\n    function depositTo(uint256 usdAmount, address to, uint32 usdType) internal returns (bool) {\r\n        require(usdAmount > 0, \"USD amount must be greater than 0\");\r\n        require(to != address(0), \"Recipient cannot be zero address\");\r\n\r\n        uint256 usdAmountInWad = usdAmount;\r\n        if (usdType > 1) {\r\n            // USDC and USDT both have 6 decimals, need to change to 18\r\n            usdAmountInWad = usdAmount.mul(1e12);\r\n        }\r\n\r\n\r\n        // check if there is enough wToken supply to make the conversion\r\n        uint256 tokenAmount = usdToToken(usdAmountInWad);\r\n\r\n        // through not strictly needed, useful to have a clear message for this error case\r\n        require(_wToken.balanceOf(address(this)) >= tokenAmount, \"Insufficient token supply in the pool\");\r\n\r\n        // transfer corresponding USD tokens to source of wTokens\r\n        if (usdType == 1) {\r\n            _daiContract.transferFrom(msg.sender, _poolSource, usdAmount);\r\n        } else if (usdType == 2) {\r\n            _usdcContract.transferFrom(msg.sender, _poolSource, usdAmount);\r\n        } else if (usdType == 3) {\r\n            _usdtContract.transferFrom(msg.sender, _poolSource, usdAmount);\r\n        } else {\r\n            revert(\"Unsupported USD type\");\r\n        }\r\n\r\n        // transfer wToken to recipient\r\n        _wToken.transfer(to, tokenAmount);\r\n\r\n        emit TokenTransaction(msg.sender, to, tokenAmount, usdAmountInWad);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice deposit Dai and get back wTokens\r\n    * @param usdAmount      amount of Dai to deposit\r\n    * @return true if success\r\n    */\r\n    function depositDai(uint256 usdAmount) external returns (bool) {\r\n        return depositTo(usdAmount, msg.sender, 1);\r\n    }\r\n\r\n    /**\r\n    * @notice deposit USDC and get back wTokens\r\n    * @param usdAmount      amount of USDC to deposit\r\n    * @return true if success\r\n    */\r\n    function depositUSDC(uint256 usdAmount) external returns (bool) {\r\n        return depositTo(usdAmount, msg.sender, 2);\r\n    }\r\n\r\n    /**\r\n    * @notice deposit USDT and get back wTokens\r\n    * @param usdAmount      amount of USDT to deposit\r\n    * @return true if success\r\n    */\r\n    function depositUSDT(uint256 usdAmount) external returns (bool) {\r\n        return depositTo(usdAmount, msg.sender, 3);\r\n    }\r\n\r\n    /**\r\n    * @notice given an USD amount, calculate resulting wToken amount\r\n    * @param usdAmount      amount of USD for conversion\r\n    * @return amount of resulting wTokens\r\n    */\r\n    function usdToToken(uint256 usdAmount) public view returns (uint256) {\r\n        (bool success, uint256 USDToCADRate, uint256 granularity,) = _oracle.getCurrentValue(1);\r\n        require(success, \"Failed to fetch USD/CAD exchange rate\");\r\n        require(granularity <= 36, \"USD rate granularity too high\");\r\n\r\n        // use mul before div\r\n        return usdAmount.mul(USDToCADRate).mul(100).div(10 ** granularity).div(_fixedPriceCADCent);\r\n    }\r\n\r\n    /**\r\n    * @notice view how many tokens are currently available\r\n    * @return amount of tokens available in the pool\r\n    */\r\n    function tokensAvailable() public view returns (uint256) {\r\n        return _wToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @notice view max amount of USD deposit that can be accepted\r\n    * @return max amount of USD deposit (18 decimal places)\r\n    */\r\n    function availableTokenInUSD() external view returns (uint256) {\r\n        (bool success, uint256 USDToCADRate, uint256 granularity,) = _oracle.getCurrentValue(1);\r\n        require(success, \"Failed to fetch USD/CAD exchange rate\");\r\n        require(granularity <= 36, \"USD rate granularity too high\");\r\n\r\n        uint256 tokenAmount = tokensAvailable();\r\n\r\n        return tokenAmount.mul(_fixedPriceCADCent).mul(10 ** granularity).div(100).div(USDToCADRate);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceCADCent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daiContractddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"TokenTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_daiContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fixedPriceCADCent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oracle\",\"outputs\":[{\"internalType\":\"contract IExchangeRateOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_poolSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdcContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokenInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAssetToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"depositDai\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"usdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAssetToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FixedPriceCADSingleSourceTokenPool","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e8d9b65dca1b23b61982ac1cf71bf895e4cafad3000000000000000000000000058843c1d91f611db374a1ffcbbcc61a74f613cc00000000000000000000000051a0113d51280b57e42eeddbe6b4a31f38416eb500000000000000000000000000000000000000000000000000000000000000640000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0fbdc24ea5c8ab6da1b2a51392d67e8d70b90a4bc8bc5d8ac85af3cd905710a7"}]}