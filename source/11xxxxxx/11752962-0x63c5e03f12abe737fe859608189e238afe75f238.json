{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.7.6;\r\n\r\n// v. 0.9 comments in future versions\r\n\r\nlibrary SafeMathChainlink {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external view returns (string memory tokenName);\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\r\n    address _requester, uint256 _nonce)\r\n    internal pure returns (uint256)\r\n  {\r\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  function makeRequestId(\r\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  using SafeMathChainlink for uint256;\r\n\r\n\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n    internal virtual;\r\n\r\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\r\n    internal returns (bytes32 requestId)\r\n  {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash].add(1);\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface immutable internal LINK;\r\n  address immutable private vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  constructor(address _vrfCoordinator, address _link)  {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n}\r\n\r\ncontract OwnableOperable {\r\n    \r\n    address public owner;\r\n    address public operator;\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns(bool) {\r\n        return account == owner;\r\n    }\r\n    \r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner  {\r\n        \r\n    _transferOwnership(newOwner);\r\n    }\r\n\r\n  function _transferOwnership(address newOwner)  internal {\r\n    owner = newOwner;\r\n    \r\n  }\r\n    \r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    function isOperator(address account) public view returns(bool) {\r\n    return account == operator;\r\n    }\r\n    \r\n    function addOperator(address account) public onlyOwner {\r\n    _addOperator(account);\r\n    }\r\n    \r\n  function _addOperator(address account) internal {\r\n    operator = account;\r\n    }\r\n}\r\n\r\n\r\ncontract TransmutationEngine is VRFConsumerBase, OwnableOperable {\r\n    using SafeMathChainlink for uint256;\r\n    \r\n    address constant XPbAddress = 0xbC81BF5B3173BCCDBE62dba5f5b695522aD63559;\r\n    \r\n    uint32 public currentSession = 0;\r\n    uint32 public nextSession = 1;\r\n    \r\n    struct Engine_params { \r\n        address rewardsVault;\r\n        uint8 alchemyCut;\r\n        uint8 priceBlockSpread;\r\n        uint8 maxBlockDistance;  // Maximum block distance between game entry and price block:\r\n    }                            // The chance of success for each transmutation is calculated\r\n                                 // using average token prices over priceBlockSpread consecutive  \r\n                                 // blocks. The block number of the last of these blocks is commited  \r\n                                 // by the user, but this block has to be at a maxBlockDistance  \r\n                                 // from entry block, otherwise the game entry tx will fail. \r\n                                 \r\n    Engine_params public EngineParameters;\r\n    \r\n    event modifyParams(address _rewardsVault, uint8 _alchemyCut, uint8 _priceBlockSpread, uint8 _maxBlockDistance);\r\n    \r\n    \r\n    struct Transmute_registry_blueprint { \r\n        bytes32 randReqId;\r\n        uint16 randomness;\r\n        bool vrf;\r\n        bool complete;\r\n    }\r\n    \r\n    mapping (uint64 => Transmute_registry_blueprint) public transmutation_sessions;\r\n    \r\n    \r\n    mapping (uint8 => address) public transmutation_formulas; // mapping of all ERC20 tokens ever used. For reference purposes.\r\n    \r\n    event addFormula(uint8 _slot, address _newFormula);\r\n    \r\n    \r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    \r\n    constructor () \r\n        VRFConsumerBase(\r\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952,\r\n            0x514910771AF9Ca656af840dff83E8264EcF986CA \r\n        ) \r\n    {\r\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\r\n        fee = 5000 * 4000 * 1e11; \r\n        \r\n        owner = msg.sender;\r\n        operator = msg.sender;\r\n        \r\n        EngineParameters = Engine_params({ \r\n                                            rewardsVault: 0xA91B501e356a60deE0f1927B377C423Cfeda4d1E,\r\n                                            alchemyCut: 3, //%\r\n                                            priceBlockSpread: 30,\r\n                                            maxBlockDistance: 60\r\n                                                                 });\r\n                                                                 \r\n        emit modifyParams(EngineParameters.rewardsVault, EngineParameters.alchemyCut, EngineParameters.priceBlockSpread, EngineParameters.maxBlockDistance);                                                         \r\n                                                                \r\n    }\r\n    \r\n    function modify_params(address _rewardsVault, uint8 _alchemyCut, uint8 _priceBlockSpread, uint8 _maxBlockDistance) onlyOwner public {\r\n        EngineParameters = Engine_params({ \r\n                                            rewardsVault: _rewardsVault,\r\n                                            alchemyCut: _alchemyCut, //%\r\n                                            priceBlockSpread: _priceBlockSpread,\r\n                                            maxBlockDistance: _maxBlockDistance\r\n                                                        });\r\n                                                        \r\n        emit modifyParams(_rewardsVault, _alchemyCut, _priceBlockSpread, _maxBlockDistance);\r\n                                                                \r\n    }\r\n    \r\n    function add_formula(uint8 _slot, address _newFormula) onlyOwner public {\r\n        \r\n        transmutation_formulas[_slot] = _newFormula;\r\n                                                        \r\n        emit addFormula(_slot, _newFormula);\r\n                                                                \r\n    }\r\n    \r\n    function init_session() onlyOperator public {\r\n        \r\n        require(currentSession == nextSession -1, 'SESSION_ALREADY_OPEN');\r\n        require(transmutation_sessions[currentSession].complete == true, 'WAIT_FOR_PREV_SESSION');\r\n        \r\n        currentSession = nextSession;\r\n        \r\n        transmutation_sessions[currentSession] = Transmute_registry_blueprint({ \r\n                                                                                randReqId: 0,\r\n                                                                                randomness: 0,\r\n                                                                                vrf: false,\r\n                                                                                complete: false\r\n                                                                                                });\r\n    }\r\n    \r\n    \r\n    function submit_transmutation(uint8 formula, uint32 priceBlock, uint32 session, uint64 amount) public {\r\n        \r\n        require(session == currentSession, 'WRONG_SESSID');\r\n        \r\n        require(currentSession == nextSession, 'SESSION_NOT_OPEN');\r\n        \r\n        require(priceBlock + EngineParameters.maxBlockDistance >= block.number, 'PRICE_TOO_FAR');\r\n        \r\n        IERC20(XPbAddress).transferFrom(msg.sender, EngineParameters.rewardsVault, uint128(amount) * 1e9);\r\n\r\n            }\r\n    \r\n    \r\n    function close_session() onlyOperator public {\r\n        \r\n        require(currentSession == nextSession, 'SESSION_NOT_OPEN');\r\n        \r\n        bytes32 reqId = requestRandomness(keyHash, fee, block.timestamp);\r\n        \r\n        transmutation_sessions[currentSession].randReqId = reqId;\r\n        \r\n        nextSession = nextSession +1;\r\n        \r\n    }\r\n    \r\n     \r\n    function fulfillRandomness(bytes32 requestId, uint randomness) internal override {\r\n        \r\n        if(transmutation_sessions[currentSession].randReqId == requestId){\r\n            transmutation_sessions[currentSession].randomness = uint16(randomness);     // obtain 5 digit randomness (0 - 65535)\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function complete_session() onlyOperator public {\r\n        \r\n        require(currentSession == nextSession-1, 'SESSION_STILL_OPEN');\r\n        require(transmutation_sessions[currentSession].complete == false, 'NO_!');\r\n        \r\n        transmutation_sessions[currentSession].complete = true;\r\n        \r\n    }\r\n    \r\n   \r\n    function recoverERC20(address _token, address _to, uint _value) public onlyOwner() {\r\n        IERC20(_token).transfer(_to, _value);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_slot\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFormula\",\"type\":\"address\"}],\"name\":\"addFormula\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardsVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_alchemyCut\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_priceBlockSpread\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_maxBlockDistance\",\"type\":\"uint8\"}],\"name\":\"modifyParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EngineParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"alchemyCut\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceBlockSpread\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxBlockDistance\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_slot\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_newFormula\",\"type\":\"address\"}],\"name\":\"add_formula\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close_session\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete_session\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSession\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init_session\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsVault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_alchemyCut\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_priceBlockSpread\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxBlockDistance\",\"type\":\"uint8\"}],\"name\":\"modify_params\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSession\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"formula\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"priceBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"session\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"submit_transmutation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"transmutation_formulas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"transmutation_sessions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"randReqId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"randomness\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"vrf\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"complete\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TransmutationEngine","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://191c692d3e6a90f23dd12543248f5c3648ff8da9ff5f64e94c408291a69919cf"}]}