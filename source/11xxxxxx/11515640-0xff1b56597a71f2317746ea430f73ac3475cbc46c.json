{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.3;\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n/** This example code is designed to quickly deploy an example contract using Remix.\r\n *  If you have never used Remix, try our example walkthrough: https://docs.chain.link/docs/example-walkthrough\r\n *  You will need testnet ETH and LINK.\r\n *     - Kovan ETH faucet: https://faucet.kovan.network/\r\n *     - Kovan LINK faucet: https://kovan.chain.link/\r\n */\r\ncontract PriceConsumerV3 {\r\n    /**\r\n     * Network: Kovan\r\n     * Aggregator: ETH/USD\r\n     * Address: 0x9326BFA02ADD2366b30bacB125260Af641031331\r\n     */\r\n    constructor() public {}\r\n\r\n    /**\r\n     * Returns the latest market price\r\n     */\r\n    function getLatestMarketPrice(address aggregatorAddr) public view returns (int) {\r\n        require(aggregatorAddr != address(0), \"Incorrect address\");\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(aggregatorAddr);\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n\r\n    function priceOfBatch(address[] memory _aggregators) public view returns (int[] memory) {\r\n        require(_aggregators.length > 0, \"Should contain more than one aggregator address\");\r\n        // Variables\r\n        int[] memory batchPrices = new int[](_aggregators.length);\r\n        // Iterate over each owner and token ID\r\n        for (uint256 i = 0; i < _aggregators.length; i++) {\r\n            AggregatorV3Interface priceFeed = AggregatorV3Interface(_aggregators[i]);\r\n            (\r\n                uint80 roundID, \r\n                int price,\r\n                uint startedAt,\r\n                uint timeStamp,\r\n                uint80 answeredInRound\r\n            ) = priceFeed.latestRoundData();\r\n            batchPrices[i] = price;\r\n        }\r\n        return batchPrices;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddr\",\"type\":\"address\"}],\"name\":\"getLatestMarketPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"}],\"name\":\"priceOfBatch\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PriceConsumerV3","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5f2e483724a429a83b87b7b61dda63afbccb86f9d34101a07d3a371069a6d2af"}]}