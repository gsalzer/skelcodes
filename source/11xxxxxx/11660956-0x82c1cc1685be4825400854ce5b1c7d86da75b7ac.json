{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n\"\"\"\r\n@title Synth Settler\r\n@author Curve.fi\r\n@license MIT\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface AddressProvider:\r\n    def get_address(_id: uint256) -> address: view\r\n\r\ninterface RegistrySwap:\r\n    def exchange(\r\n        _pool: address,\r\n        _from: address,\r\n        _to: address,\r\n        _amount: uint256,\r\n        _expected: uint256,\r\n        _receiver: address,\r\n    ) -> uint256: payable\r\n\r\ninterface Synthetix:\r\n    def exchangeWithTracking(\r\n        sourceCurrencyKey: bytes32,\r\n        sourceAmount: uint256,\r\n        destinationCurrencyKey: bytes32,\r\n        originator: address,\r\n        trackingCode: bytes32,\r\n    ): nonpayable\r\n    def settle(currencyKey: bytes32) -> uint256[3]: nonpayable\r\n\r\ninterface Synth:\r\n    def currencyKey() -> bytes32: nonpayable\r\n\r\n\r\nADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\r\nSNX: constant(address) = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F\r\n\r\n# \"CURVE\" as a bytes32\r\nTRACKING_CODE: constant(bytes32) = 0x4355525645000000000000000000000000000000000000000000000000000000\r\n\r\n# synth -> spender -> is approved?\r\nis_approved: HashMap[address, HashMap[address, bool]]\r\n\r\nadmin: public(address)\r\nsynth: public(address)\r\n\r\n@external\r\ndef __init__():\r\n    self.admin = msg.sender\r\n\r\n\r\n@external\r\ndef convert_synth(\r\n    _target: address,\r\n    _amount: uint256,\r\n    _source_key: bytes32,\r\n    _dest_key: bytes32\r\n) -> bool:\r\n    \"\"\"\r\n    @notice Convert between two synths\r\n    @dev Called via `SynthSwap.swap_into_synth`\r\n    @param _target Address of the synth being converted into\r\n    @param _amount Amount of the original synth to convert\r\n    @param _source_key Currency key for the initial synth\r\n    @param _dest_key Currency key for the target synth\r\n    @return bool Success\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n\r\n    self.synth = _target\r\n    Synthetix(SNX).exchangeWithTracking(_source_key, _amount, _dest_key, msg.sender, TRACKING_CODE)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef exchange(\r\n    _target: address,\r\n    _pool: address,\r\n    _amount: uint256,\r\n    _expected: uint256,\r\n    _receiver: address,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Exchange the synth deposited in this contract for another asset\r\n    @dev Called via `SynthSwap.swap_from_synth`\r\n    @param _target Address of the asset being swapped into\r\n    @param _pool Address of the Curve pool used in the exchange\r\n    @param _amount Amount of the deposited synth to exchange\r\n    @param _expected Minimum amount of `_target` to receive in the exchange\r\n    @param _receiver Receiver address for `_target`\r\n    @return uint256 Amount of the deposited synth remaining in the contract\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n\r\n    synth: address = self.synth\r\n    registry_swap: address = AddressProvider(ADDRESS_PROVIDER).get_address(2)\r\n\r\n    if not self.is_approved[synth][registry_swap]:\r\n        ERC20(synth).approve(registry_swap, MAX_UINT256)\r\n        self.is_approved[synth][registry_swap] = True\r\n\r\n    RegistrySwap(registry_swap).exchange(_pool, synth, _target, _amount, _expected, _receiver)\r\n\r\n    return ERC20(synth).balanceOf(self)\r\n\r\n\r\n@external\r\ndef withdraw(_receiver: address, _amount: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw the synth deposited in this contract\r\n    @dev Called via `SynthSwap.withdraw`\r\n    @param _receiver Receiver address for the deposited synth\r\n    @param _amount Amount of the deposited synth to withdraw\r\n    @return uint256 Amount of the deposited synth remaining in the contract\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n\r\n    synth: address = self.synth\r\n    ERC20(synth).transfer(_receiver, _amount)\r\n\r\n    return ERC20(synth).balanceOf(self)\r\n\r\n\r\n@external\r\ndef settle() -> bool:\r\n    \"\"\"\r\n    @notice Settle the synth deposited in this contract\r\n    @dev Settlement is performed when swapping or withdrawing, there\r\n         is no requirement to call this function separately\r\n    @return bool Success\r\n    \"\"\"\r\n    currency_key: bytes32 = Synth(self.synth).currencyKey()\r\n    Synthetix(SNX).settle(currency_key)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef initialize():\r\n    \"\"\"\r\n    @notice Initialize the contract\r\n    @dev This function is seperate from `__init__` because of the factory\r\n         pattern used in `SynthSwap`. It may be called once per deployment.\r\n    \"\"\"\r\n    assert self.admin == ZERO_ADDRESS\r\n\r\n    self.admin = msg.sender","ABI":"[{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"convert_synth\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_target\"},{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"bytes32\",\"name\":\"_source_key\"},{\"type\":\"bytes32\",\"name\":\"_dest_key\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37972},{\"name\":\"exchange\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_target\"},{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"uint256\",\"name\":\"_expected\"},{\"type\":\"address\",\"name\":\"_receiver\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":41296},{\"name\":\"withdraw\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_receiver\"},{\"type\":\"uint256\",\"name\":\"_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":3441},{\"name\":\"settle\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":3118},{\"name\":\"initialize\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36232},{\"name\":\"admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1211},{\"name\":\"synth\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1241}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}