{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface IStateSender {\r\n    function syncState(address receiver, bytes calldata data) external;\r\n}\r\n\r\ninterface IStateReceiver {\r\n    function onStateReceive(uint256 stateId, bytes calldata data) external;\r\n}\r\n\r\n\r\n/**\r\n* @notice Dummy State Sender contract to simulate plasma state sender while testing\r\n*/\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/common/AccessControlMixin.sol\r\n\r\n\r\ncontract AccessControlMixin is AccessControl {\r\n    string private _revertMsg;\r\n    function _setupContractId(string memory contractId) internal {\r\n        _revertMsg = string(abi.encodePacked(contractId, \": INSUFFICIENT_PERMISSIONS\"));\r\n    }\r\n\r\n    modifier only(bytes32 role) {\r\n        require(\r\n            hasRole(role, _msgSender()),\r\n            _revertMsg\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/root/StateSender/IStateSender.sol\r\n\r\n// File: contracts/lib/RLPReader.sol\r\n\r\n/*\r\n * @author Hamdi Allam hamdi.allam97@gmail.com\r\n * Please reach out with any questions or concerns\r\n * https://github.com/hamdiallam/Solidity-RLP/blob/e681e25a376dbd5426b509380bc03446f05d0f97/contracts/RLPReader.sol\r\n */\r\n\r\nlibrary RLPReader {\r\n    uint8 constant STRING_SHORT_START = 0x80;\r\n    uint8 constant STRING_LONG_START = 0xb8;\r\n    uint8 constant LIST_SHORT_START = 0xc0;\r\n    uint8 constant LIST_LONG_START = 0xf8;\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct RLPItem {\r\n        uint256 len;\r\n        uint256 memPtr;\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded bytes\r\n     */\r\n    function toRlpItem(bytes memory item)\r\n        internal\r\n        pure\r\n        returns (RLPItem memory)\r\n    {\r\n        require(item.length > 0, \"RLPReader: INVALID_BYTES_LENGTH\");\r\n        uint256 memPtr;\r\n        assembly {\r\n            memPtr := add(item, 0x20)\r\n        }\r\n\r\n        return RLPItem(item.length, memPtr);\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded list in bytes\r\n     */\r\n    function toList(RLPItem memory item)\r\n        internal\r\n        pure\r\n        returns (RLPItem[] memory)\r\n    {\r\n        require(isList(item), \"RLPReader: ITEM_NOT_LIST\");\r\n\r\n        uint256 items = numItems(item);\r\n        RLPItem[] memory result = new RLPItem[](items);\r\n        uint256 listLength = _itemLength(item.memPtr);\r\n        require(listLength == item.len, \"RLPReader: LIST_DECODED_LENGTH_MISMATCH\");\r\n\r\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint256 dataLen;\r\n        for (uint256 i = 0; i < items; i++) {\r\n            dataLen = _itemLength(memPtr);\r\n            result[i] = RLPItem(dataLen, memPtr);\r\n            memPtr = memPtr + dataLen;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\r\n    function isList(RLPItem memory item) internal pure returns (bool) {\r\n        uint8 byte0;\r\n        uint256 memPtr = item.memPtr;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < LIST_SHORT_START) return false;\r\n        return true;\r\n    }\r\n\r\n    /** RLPItem conversions into data types **/\r\n\r\n    // @returns raw rlp encoding in bytes\r\n    function toRlpBytes(RLPItem memory item)\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory result = new bytes(item.len);\r\n\r\n        uint256 ptr;\r\n        assembly {\r\n            ptr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr, ptr, item.len);\r\n        return result;\r\n    }\r\n\r\n    function toAddress(RLPItem memory item) internal pure returns (address) {\r\n        require(!isList(item), \"RLPReader: DECODING_LIST_AS_ADDRESS\");\r\n        // 1 byte for the length prefix\r\n        require(item.len == 21, \"RLPReader: INVALID_ADDRESS_LENGTH\");\r\n\r\n        return address(toUint(item));\r\n    }\r\n\r\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\r\n        require(!isList(item), \"RLPReader: DECODING_LIST_AS_UINT\");\r\n        require(item.len <= 33, \"RLPReader: INVALID_UINT_LENGTH\");\r\n\r\n        uint256 itemLength = _itemLength(item.memPtr);\r\n        require(itemLength == item.len, \"RLPReader: UINT_DECODED_LENGTH_MISMATCH\");\r\n\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n        uint256 len = item.len - offset;\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr + offset;\r\n        assembly {\r\n            result := mload(memPtr)\r\n\r\n            // shfit to the correct location if neccesary\r\n            if lt(len, 32) {\r\n                result := div(result, exp(256, sub(32, len)))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // enforces 32 byte length\r\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\r\n        uint256 itemLength = _itemLength(item.memPtr);\r\n        require(itemLength == item.len, \"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\");\r\n        // one byte prefix\r\n        require(item.len == 33, \"RLPReader: INVALID_UINT_STRICT_LENGTH\");\r\n\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr + 1;\r\n        assembly {\r\n            result := mload(memPtr)\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        uint256 listLength = _itemLength(item.memPtr);\r\n        require(listLength == item.len, \"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\");\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n\r\n        uint256 len = item.len - offset; // data length\r\n        bytes memory result = new bytes(len);\r\n\r\n        uint256 destPtr;\r\n        assembly {\r\n            destPtr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr + offset, destPtr, len);\r\n        return result;\r\n    }\r\n\r\n    /*\r\n     * Private Helpers\r\n     */\r\n\r\n    // @return number of payload items inside an encoded list.\r\n    function numItems(RLPItem memory item) private pure returns (uint256) {\r\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\r\n        // require(isList(item), \"RLPReader: NUM_ITEMS_NOT_LIST\");\r\n\r\n        uint256 count = 0;\r\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint256 endPtr = item.memPtr + item.len;\r\n        while (currPtr < endPtr) {\r\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\r\n            require(currPtr <= endPtr, \"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\");\r\n            count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    // @return entire rlp item byte length\r\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\r\n        uint256 itemLen;\r\n        uint256 byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\r\n        else if (byte0 < STRING_LONG_START)\r\n            itemLen = byte0 - STRING_SHORT_START + 1;\r\n        else if (byte0 < LIST_SHORT_START) {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\r\n                memPtr := add(memPtr, 1) // skip over the first byte\r\n\r\n                /* 32 byte word size */\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        } else if (byte0 < LIST_LONG_START) {\r\n            itemLen = byte0 - LIST_SHORT_START + 1;\r\n        } else {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xf7)\r\n                memPtr := add(memPtr, 1)\r\n\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        return itemLen;\r\n    }\r\n\r\n    // @return number of bytes until the data\r\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\r\n        uint256 byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) return 0;\r\n        else if (\r\n            byte0 < STRING_LONG_START ||\r\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\r\n        ) return 1;\r\n        else if (byte0 < LIST_SHORT_START)\r\n            // being explicit\r\n            return byte0 - (STRING_LONG_START - 1) + 1;\r\n        else return byte0 - (LIST_LONG_START - 1) + 1;\r\n    }\r\n\r\n    /*\r\n     * @param src Pointer to source\r\n     * @param dest Pointer to destination\r\n     * @param len Amount of memory to copy from the source\r\n     */\r\n    function copy(\r\n        uint256 src,\r\n        uint256 dest,\r\n        uint256 len\r\n    ) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        // left over bytes. Mask is used to remove unwanted bytes from the word\r\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/MerklePatriciaProof.sol\r\n\r\n/*\r\n * @title MerklePatriciaVerifier\r\n * @author Sam Mayo (sammayo888@gmail.com)\r\n *\r\n * @dev Library for verifing merkle patricia proofs.\r\n */\r\n\r\n\r\nlibrary MerklePatriciaProof {\r\n    /*\r\n     * @dev Verifies a merkle patricia proof.\r\n     * @param value The terminating value in the trie.\r\n     * @param encodedPath The path in the trie leading to value.\r\n     * @param rlpParentNodes The rlp encoded stack of nodes.\r\n     * @param root The root hash of the trie.\r\n     * @return The boolean validity of the proof.\r\n     */\r\n    function verify(\r\n        bytes memory value,\r\n        bytes memory encodedPath,\r\n        bytes memory rlpParentNodes,\r\n        bytes32 root\r\n    ) internal pure returns (bool) {\r\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\r\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\r\n\r\n        bytes memory currentNode;\r\n        RLPReader.RLPItem[] memory currentNodeList;\r\n\r\n        bytes32 nodeKey = root;\r\n        uint256 pathPtr = 0;\r\n\r\n        bytes memory path = _getNibbleArray(encodedPath);\r\n        if (path.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (uint256 i = 0; i < parentNodes.length; i++) {\r\n            if (pathPtr > path.length) {\r\n                return false;\r\n            }\r\n\r\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\r\n            if (nodeKey != keccak256(currentNode)) {\r\n                return false;\r\n            }\r\n            currentNodeList = RLPReader.toList(parentNodes[i]);\r\n\r\n            if (currentNodeList.length == 17) {\r\n                if (pathPtr == path.length) {\r\n                    if (\r\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\r\n                        keccak256(value)\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                uint8 nextPathNibble = uint8(path[pathPtr]);\r\n                if (nextPathNibble > 16) {\r\n                    return false;\r\n                }\r\n                nodeKey = bytes32(\r\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\r\n                );\r\n                pathPtr += 1;\r\n            } else if (currentNodeList.length == 2) {\r\n                uint256 traversed = _nibblesToTraverse(\r\n                    RLPReader.toBytes(currentNodeList[0]),\r\n                    path,\r\n                    pathPtr\r\n                );\r\n                if (pathPtr + traversed == path.length) {\r\n                    //leaf node\r\n                    if (\r\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\r\n                        keccak256(value)\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                //extension node\r\n                if (traversed == 0) {\r\n                    return false;\r\n                }\r\n\r\n                pathPtr += traversed;\r\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _nibblesToTraverse(\r\n        bytes memory encodedPartialPath,\r\n        bytes memory path,\r\n        uint256 pathPtr\r\n    ) private pure returns (uint256) {\r\n        uint256 len = 0;\r\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\r\n        // and slicedPath have elements that are each one hex character (1 nibble)\r\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\r\n        bytes memory slicedPath = new bytes(partialPath.length);\r\n\r\n        // pathPtr counts nibbles in path\r\n        // partialPath.length is a number of nibbles\r\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\r\n            bytes1 pathNibble = path[i];\r\n            slicedPath[i - pathPtr] = pathNibble;\r\n        }\r\n\r\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\r\n            len = partialPath.length;\r\n        } else {\r\n            len = 0;\r\n        }\r\n        return len;\r\n    }\r\n\r\n    // bytes b must be hp encoded\r\n    function _getNibbleArray(bytes memory b)\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory nibbles = \"\";\r\n        if (b.length > 0) {\r\n            uint8 offset;\r\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\r\n            if (hpNibble == 1 || hpNibble == 3) {\r\n                nibbles = new bytes(b.length * 2 - 1);\r\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\r\n                nibbles[0] = oddNibble;\r\n                offset = 1;\r\n            } else {\r\n                nibbles = new bytes(b.length * 2 - 2);\r\n                offset = 0;\r\n            }\r\n\r\n            for (uint256 i = offset; i < nibbles.length; i++) {\r\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\r\n            }\r\n        }\r\n        return nibbles;\r\n    }\r\n\r\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\r\n        private\r\n        pure\r\n        returns (bytes1)\r\n    {\r\n        return\r\n            bytes1(\r\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\r\n            );\r\n    }\r\n}\r\n\r\n// File: contracts/root/ICheckpointManager.sol\r\n\r\n\r\ncontract ICheckpointManager {\r\n    struct HeaderBlock {\r\n        bytes32 root;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 createdAt;\r\n        address proposer;\r\n    }\r\n\r\n    /**\r\n     * @notice mapping of checkpoint header numbers to block details\r\n     * @dev These checkpoints are submited by plasma contracts\r\n     */\r\n    mapping(uint256 => HeaderBlock) public headerBlocks;\r\n}\r\n\r\n// File: contracts/lib/Merkle.sol\r\n\r\n\r\nlibrary Merkle {\r\n    function checkMembership(\r\n        bytes32 leaf,\r\n        uint256 index,\r\n        bytes32 rootHash,\r\n        bytes memory proof\r\n    ) internal pure returns (bool) {\r\n        require(proof.length % 32 == 0, \"Invalid proof length\");\r\n        uint256 proofHeight = proof.length / 32;\r\n        // Proof of size n means, height of the tree is n+1.\r\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\r\n        require(index < 2 ** proofHeight, \"Leaf index is too big\");\r\n\r\n        bytes32 proofElement;\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 32; i <= proof.length; i += 32) {\r\n            assembly {\r\n                proofElement := mload(add(proof, i))\r\n            }\r\n\r\n            if (index % 2 == 0) {\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(computedHash, proofElement)\r\n                );\r\n            } else {\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(proofElement, computedHash)\r\n                );\r\n            }\r\n\r\n            index = index / 2;\r\n        }\r\n        return computedHash == rootHash;\r\n    }\r\n}\r\n\r\n// File: contracts/tunnel/BaseRootTunnel.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BaseRootTunnel is AccessControlMixin {\r\n    using RLPReader for bytes;\r\n    using RLPReader for RLPReader.RLPItem;\r\n    using Merkle for bytes32;\r\n    using SafeMath for uint256;\r\n\r\n    // keccak256(MessageSent(bytes))\r\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\r\n\r\n    // state sender contract\r\n    IStateSender public stateSender;\r\n    // root chain manager\r\n    ICheckpointManager public checkpointManager;\r\n    // child tunnel contract which receives and sends messages \r\n    address public childTunnel;\r\n    // storage to avoid duplicate exits\r\n    mapping(bytes32 => bool) public processedExits;\r\n\r\n    constructor() internal {\r\n      _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n      _setupContractId(\"RootTunnel\");\r\n    }\r\n\r\n    /**\r\n     * @notice Set the state sender, callable only by admins\r\n     * @dev This should be the state sender from plasma contracts\r\n     * It is used to send bytes from root to child chain\r\n     * @param newStateSender address of state sender contract\r\n     */\r\n    function setStateSender(address newStateSender)\r\n        external\r\n        only(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        stateSender = IStateSender(newStateSender);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the checkpoint manager, callable only by admins\r\n     * @dev This should be the plasma contract responsible for keeping track of checkpoints\r\n     * @param newCheckpointManager address of checkpoint manager contract\r\n     */\r\n    function setCheckpointManager(address newCheckpointManager)\r\n        external\r\n        only(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        checkpointManager = ICheckpointManager(newCheckpointManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the child chain tunnel, callable only by admins\r\n     * @dev This should be the contract responsible to receive data bytes on child chain\r\n     * @param newChildTunnel address of child tunnel contract\r\n     */\r\n    function setChildTunnel(address newChildTunnel)\r\n        external\r\n        only(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(newChildTunnel != address(0x0), \"RootTunnel: INVALID_CHILD_TUNNEL_ADDRESS\");\r\n        childTunnel = newChildTunnel;\r\n    }\r\n\r\n    /**\r\n     * @notice Send bytes message to Child Tunnel\r\n     * @param message bytes message that will be sent to Child Tunnel\r\n     * some message examples -\r\n     *   abi.encode(tokenId);\r\n     *   abi.encode(tokenId, tokenMetadata);\r\n     *   abi.encode(messageType, messageData);\r\n     */\r\n    function _sendMessageToChild(bytes memory message) internal {\r\n        stateSender.syncState(childTunnel, message);\r\n    }\r\n\r\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\r\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\r\n            .toRlpItem()\r\n            .toList();\r\n\r\n        // checking if exit has already been processed\r\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\r\n        bytes32 exitHash = keccak256(\r\n            abi.encodePacked(\r\n                inputDataRLPList[2].toUint(), // blockNumber\r\n                // first 2 nibbles are dropped while generating nibble array\r\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\r\n                // so converting to nibble array and then hashing it\r\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\r\n                inputDataRLPList[9].toUint() // receiptLogIndex\r\n            )\r\n        );\r\n        require(\r\n            processedExits[exitHash] == false,\r\n            \"RootTunnel: EXIT_ALREADY_PROCESSED\"\r\n        );\r\n        processedExits[exitHash] = true;\r\n\r\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\r\n            .toBytes()\r\n            .toRlpItem()\r\n            .toList();\r\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\r\n            .toList()[\r\n                inputDataRLPList[9].toUint() // receiptLogIndex\r\n            ];\r\n\r\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\r\n        \r\n        // check child tunnel\r\n        require(childTunnel == RLPReader.toAddress(logRLPList[0]), \"RootTunnel: INVALID_CHILD_TUNNEL\");\r\n\r\n        // verify receipt inclusion\r\n        require(\r\n            MerklePatriciaProof.verify(\r\n                inputDataRLPList[6].toBytes(), // receipt\r\n                inputDataRLPList[8].toBytes(), // branchMask\r\n                inputDataRLPList[7].toBytes(), // receiptProof\r\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\r\n            ),\r\n            \"RootTunnel: INVALID_RECEIPT_PROOF\"\r\n        );\r\n\r\n        // verify checkpoint inclusion\r\n        _checkBlockMembershipInCheckpoint(\r\n            inputDataRLPList[2].toUint(), // blockNumber\r\n            inputDataRLPList[3].toUint(), // blockTime\r\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\r\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\r\n            inputDataRLPList[0].toUint(), // headerNumber\r\n            inputDataRLPList[1].toBytes() // blockProof\r\n        );\r\n\r\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\r\n\r\n        require(\r\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\r\n            \"RootTunnel: INVALID_SIGNATURE\"\r\n        );\r\n\r\n        // received message data\r\n        bytes memory receivedData = logRLPList[2].toBytes();\r\n        (bytes memory message) = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\r\n        return message;\r\n    }\r\n\r\n    function _checkBlockMembershipInCheckpoint(\r\n        uint256 blockNumber,\r\n        uint256 blockTime,\r\n        bytes32 txRoot,\r\n        bytes32 receiptRoot,\r\n        uint256 headerNumber,\r\n        bytes memory blockProof\r\n    ) private view returns (uint256) {\r\n        (\r\n            bytes32 headerRoot,\r\n            uint256 startBlock,\r\n            ,\r\n            uint256 createdAt,\r\n\r\n        ) = checkpointManager.headerBlocks(headerNumber);\r\n\r\n        require(\r\n            keccak256(\r\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\r\n            )\r\n                .checkMembership(\r\n                blockNumber.sub(startBlock),\r\n                headerRoot,\r\n                blockProof\r\n            ),\r\n            \"RootTunnel: INVALID_HEADER\"\r\n        );\r\n        return createdAt;\r\n    }\r\n\r\n    /**\r\n     * @notice receive message from  L2 to L1, validated by proof\r\n     * @dev This function verifies if the transaction actually happened on child chain\r\n     *\r\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\r\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\r\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\r\n     *  2 - blockNumber - Block number containing the reference tx on child chain\r\n     *  3 - blockTime - Reference tx block time\r\n     *  4 - txRoot - Transactions root of block\r\n     *  5 - receiptRoot - Receipts root of block\r\n     *  6 - receipt - Receipt of the reference transaction\r\n     *  7 - receiptProof - Merkle proof of the reference receipt\r\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\r\n     *  9 - receiptLogIndex - Log Index to read from the receipt\r\n     */\r\n    function receiveMessage(bytes memory inputData) public virtual {\r\n        bytes memory message = _validateAndExtractMessage(inputData);\r\n        _processMessageFromChild(message);\r\n    }\r\n\r\n    /**\r\n     * @notice Process message received from Child Tunnel\r\n     * @dev function needs to be implemented to handle message as per requirement\r\n     * This is called by onStateReceive function.\r\n     * Since it is called via a system call, any event will not be emitted during its execution.\r\n     * @param message bytes message that was sent from Child Tunnel\r\n     */\r\n    function _processMessageFromChild(bytes memory message) virtual internal;\r\n}\r\n\r\ncontract RooySyncer is BaseRootTunnel{\r\n     /// @dev Event emitted when data is passed\r\n    event ReceivedData(address indexed _from, bytes _bytes_data);\r\n    \r\n    function _processMessageFromChild(bytes memory _message) internal override {\r\n         (address _dest, bytes memory data) = abi.decode(_message, (address, bytes));\r\n\r\n        // (bool success,) = _dest.call(data);\r\n\r\n        // if (!success) {\r\n        //     revert(\"Failed\");\r\n        // }\r\n        emit ReceivedData(msg.sender, data);\r\n    }\r\n    \r\n    /// @dev Send data to Matic\r\n    function syncOnMatic(bytes calldata _data) external {\r\n       _sendMessageToChild(_data);\r\n    }\r\n\r\n    function calculateSumOnChildChain(uint256 number) external {\r\n        _sendMessageToChild(abi.encode(number));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_bytes_data\",\"type\":\"bytes\"}],\"name\":\"ReceivedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"calculateSumOnChildChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCheckpointManager\",\"type\":\"address\"}],\"name\":\"setCheckpointManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildTunnel\",\"type\":\"address\"}],\"name\":\"setChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStateSender\",\"type\":\"address\"}],\"name\":\"setStateSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateSender\",\"outputs\":[{\"internalType\":\"contract IStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"syncOnMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RooySyncer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dac34cd61fdb4c2d8426cfb3b9b40367ba3f4302e4c47018dfe8b5a9cf78d2a0"}]}