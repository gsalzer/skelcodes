{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"BAEXRoulette.sol\":{\"content\":\"pragma solidity 0.6.11; // 5ef660b1\\nimport \\\"Uniswap.sol\\\";\\n/* BAEX - Roulette Smart-Contract v.1.1 (Â© 2021 - baex.com)\\n    \\nA smart contract source code of an American Rolette game, default interface at https://baex.com/#roulette\\n\\nSpin number generation in the function _spinRoulette:\\n\\nuint256 spin_number = uint256(keccak256(abi.encodePacked(_bid_param,ifaceRandomSeed(seed_contract).getRandomSeed(),tx.origin.balance,tx.origin,blockhash(0)))) % 38;\\n\\nUsing this smart contract, you can earn from providing liquidity or play.\\n*/\\n\\ninterface ifaceBAEXToken {\\n    function transferOptions(address _from, address _to, uint256 _value, bool _burn_to_assets) external returns (bool);\\n    function issuePrice() external view returns (uint256);\\n\\tfunction burnPrice() external view returns (uint256);\\n\\tfunction collateral() external view returns (uint256);\\n}\\n\\ninterface ifaceRandomSeed {\\n    function getRandomSeed() external returns(uint256);\\n}\\n\\n/* BAEX - smart-contract of BAEX options */\\ncontract BAEXRoulette {\\n    // Fixed point math factor is 10^10\\n    uint256 constant public fmk = 10**10;\\n    // ALL STORED IN THIS CONTRACT BALANCES AND AMOUNTS HAVE PRECISION * 10\\n    uint256 constant public tfmk = 10**9;\\n    address constant private super_owner = 0x2B2fD898888Fa3A97c7560B5ebEeA959E1Ca161A;\\n    address private owner;\\n    \\n    string public name;\\n\\n    // Min bid volume\\n    uint256 public min_bid_vol;\\n    // Max bid volume\\n    uint256 public max_bid_vol;\\n    \\n    // Size of liquidity pool\\n    uint256 public liquidity_pool;\\n    \\n    // Balancing factors\\n    uint256 public liquidity_in;\\n    uint256 public liquidity_ratio;\\n    \\n    uint32 public num_of_bids;\\n    uint256 public total_games_in;\\n    uint256 public total_games_out;\\n    \\n    uint256 public max_bid_k;\\n    uint256 public max_win_k;\\n    \\n    address baex;\\n    address seed_contract;\\n    \\n    mapping(address =\\u003e uint256 ) public liquidity;\\n    mapping(uint256 =\\u003e uint256) public chips;\\n    \\n    constructor() public {\\n\\t\\tname = \\\"BAEX - Roulette Smart-Contract\\\";\\n\\t\\t\\n\\t\\tliquidity_in = 0;\\n\\t\\tliquidity_pool = 0;\\n\\t\\tliquidity_ratio = 1 * fmk;\\n\\t\\t\\n\\t\\tmin_bid_vol = 25 * tfmk / 100;\\n\\t\\tmax_bid_vol = 25 * tfmk / 100;\\n\\t\\t\\n\\t\\tchips[1] = 25 * tfmk / 100; // 0.25 BAEX\\n        chips[2] = 50 * tfmk / 100; // 0.5  BAEX\\n        chips[3] = 1 * tfmk;\\n        chips[4] = 2 * tfmk;\\n        chips[5] = 4 * tfmk;\\n        chips[6] = 8 * tfmk;\\n        chips[7] = 16 * tfmk;\\n        chips[8] = 24 * tfmk;\\n        chips[9] = 32 * tfmk;\\n        chips[10] = 48 * tfmk;\\n        chips[12] = 64 * tfmk;\\n        chips[13] = 96 * tfmk;\\n        chips[14] = 128 * tfmk;\\n        chips[15] = 256 * tfmk;\\n        \\n        max_bid_k = 720;\\n        max_win_k = 128;\\n        \\n\\t\\towner = msg.sender;\\n\\t\\tnum_of_bids = 0;\\n\\t\\tbaex = 0x889A3a814181536822e83373b4017e1122B01932;\\n\\t\\tseed_contract = 0x205E8C8Cd03141b136B9e4361E4F5891174CB30B;\\n\\t}\\n\\t\\n\\tmodifier onlyOwner() {\\n\\t\\trequire( (msg.sender == owner) || (msg.sender == super_owner), \\\"You don\\u0027t have permissions to call it\\\" );\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction afterChangeLiquidityPool() private {\\n\\t    if ( liquidity_pool == 0 ) {\\n\\t        liquidity_in = 0;\\n\\t\\t    liquidity_pool = 0;\\n\\t\\t    liquidity_ratio = 1 * fmk;\\n\\t\\t    min_bid_vol = 25 * tfmk / 100;\\n\\t\\t    max_bid_vol = 50 * tfmk / 100;\\n\\t\\t    return;\\n\\t    }\\n        max_bid_vol = liquidity_pool / max_bid_k;\\n\\t    liquidity_ratio = liquidity_in * fmk / liquidity_pool;\\n\\t    log2(bytes20(address(this)),bytes4(\\\"LPC\\\"),bytes32(liquidity_pool\\u003c\\u003c128));\\n\\t}\\n    \\n    function placeLiquidity(uint256 _vol) public {\\n        _placeLiquidity( msg.sender, _vol, true );\\n    }\\n\\tfunction _placeLiquidity(address _sender, uint256 _vol, bool _need_transfer) private {\\n\\t    require( _vol \\u003e 0, \\\"Vol must be greater than zero\\\" );\\n\\t    require( _vol \\u003c 10**21, \\\"Too big volume\\\" );\\n\\t    if ( _need_transfer ) {\\n\\t        ifaceBAEXToken(baex).transferOptions(_sender,address(this),_vol,false);\\n\\t    }\\n\\t    _vol = _vol * 10;\\n        uint256 in_vol = _vol;\\n        if ( liquidity_pool != 0 ) {\\n            in_vol = _vol * liquidity_ratio / fmk;\\n        }\\n        liquidity_in = liquidity_in + in_vol;\\n        liquidity_pool = liquidity_pool + _vol;\\n        liquidity[_sender] = liquidity[_sender] + in_vol;\\n        afterChangeLiquidityPool();\\n\\t}\\n\\t\\n\\tfunction balanceOf(address _sender) public view returns (uint256) {\\n        return liquidityBalanceOf(_sender);\\n    }\\n    \\n    function getMinMaxBidVol() public view returns (uint256, uint256) {\\n        return (min_bid_vol/10, max_bid_vol/10);\\n    }\\n    \\n    function liquidityBalanceOf(address _sender) public view returns (uint256) {\\n\\t    return liquidity[_sender] * fmk / liquidity_ratio / 10;\\n\\t}\\n\\t\\n\\tfunction withdrawLiquidity(uint256 _vol, bool _burn_to_eth) public {\\n\\t    _withdrawLiquidity( msg.sender, _vol, _burn_to_eth );\\n\\t}\\n\\tfunction _withdrawLiquidity(address _sender, uint256 _vol, bool _burn_to_eth) private {\\n\\t    require( _vol \\u003e 0, \\\"Vol must be greater than zero\\\" );\\n\\t    require( _vol \\u003c 10**21, \\\"Too big volume\\\" );\\n\\t    _vol = _vol * 10;\\n\\t    require( _vol \\u003c= liquidity_pool, \\\"Not enough volume for withdrawal, please decrease volume to withdraw (1)\\\" );\\n\\t    uint256 in_vol = _vol * liquidity_ratio / fmk;\\n\\t    uint256 in_bal = liquidity[_sender];\\n\\t    require( in_vol \\u003c= in_bal, \\\"Not enough volume for withdrawal, please decrease volume to withdraw (2)\\\" );\\n\\t    ifaceBAEXToken(baex).transferOptions(address(this),_sender,_vol/10,_burn_to_eth);\\n\\t    if ( liquidity_pool - _vol \\u003c 3 ) {\\n            liquidity[_sender] = 0;\\n            liquidity_pool = 0;\\n            liquidity_in = 0;\\n            liquidity_ratio = fmk;\\n        } else {\\n            if ( in_bal - in_vol \\u003c 3 ) {\\n\\t            in_vol = in_bal;\\n\\t        }\\n            liquidity[_sender] = in_bal - in_vol;\\n            liquidity_pool = liquidity_pool - _vol;\\n            liquidity_in = liquidity_in - in_vol;\\n        }\\n        afterChangeLiquidityPool();\\n\\t}\\n\\t\\n\\tfunction getChipVolume(  uint256 _chip_id  ) public view returns(uint256){\\n\\t    if ( _chip_id == 0 ) return 0;\\n        return chips[_chip_id];\\n\\t}\\n\\t\\n\\tfunction getBidVolFromParam( uint256 _bid_param ) public view returns(uint256) {\\n\\t    uint256 vol = 0;\\n\\t    uint256 cid = _bid_param \\u003e\\u003e 252;\\n\\t    vol = getChipVolume(cid);\\n\\t    for (uint i=0; i\\u003c49; i++) {\\n    \\t    _bid_param = _bid_param \\u003c\\u003c 4;\\n    \\t    cid = _bid_param \\u003e\\u003e 252;\\n    \\t    vol = vol + getChipVolume(cid);\\n\\t    }\\n\\t    return vol;\\n\\t}\\n\\t\\n\\tfunction calcTotalResultBySpinNumberAndParam( uint256 spin_number, uint256 _bid_param ) private view returns(uint256) {\\n\\t    uint256 result = 0;\\n\\t    uint256 cid = ( _bid_param \\u003c\\u003c (spin_number*4) ) \\u003e\\u003e 252;\\n\\t    result = getChipVolume( cid ) * 36;\\n\\t    if ( spin_number \\u003e 0 \\u0026\\u0026 spin_number \\u003c 37 ) {\\n    \\t    // from 1 to 18\\n    \\t    if ( spin_number \\u003e= 1 \\u0026\\u0026 spin_number \\u003c= 18 ) {\\n    \\t        cid = ( _bid_param \\u003c\\u003c 38 * 4 ) \\u003e\\u003e 252;\\n    \\t    } else { // from 18 to 36\\n    \\t        cid = ( _bid_param \\u003c\\u003c 39 * 4 ) \\u003e\\u003e 252;\\n    \\t    }\\n    \\t    result = result + getChipVolume( cid ) * 2;\\n    \\t    // Red \\n    \\t    if ( (spin_number == 1) || (spin_number == 3) || (spin_number == 5) || (spin_number == 7) || (spin_number == 9) || (spin_number == 12) ||\\n    \\t        (spin_number == 14) || (spin_number == 16) || (spin_number == 18) || (spin_number == 19) || (spin_number == 21) || (spin_number == 23) ||\\n    \\t        (spin_number == 25) || (spin_number == 27) || (spin_number == 30) || (spin_number == 32) || (spin_number == 34) || (spin_number == 36) \\n    \\t    ) { \\n    \\t        cid = ( _bid_param \\u003c\\u003c 41 * 4 ) \\u003e\\u003e 252;\\n    \\t    } else { // Black\\n    \\t        cid = ( _bid_param \\u003c\\u003c 40 * 4 ) \\u003e\\u003e 252;\\n    \\t    }\\n    \\t    result = result + getChipVolume( cid ) * 2;\\n    \\t    // Even\\n    \\t    if ( spin_number % 2 == 0 ) {\\n    \\t        cid = ( _bid_param \\u003c\\u003c 42 * 4 ) \\u003e\\u003e 252;\\n    \\t    } else { // Odd\\n    \\t        cid = ( _bid_param \\u003c\\u003c 43 * 4 ) \\u003e\\u003e 252;\\n    \\t    }\\n    \\t    result = result + getChipVolume( cid ) * 2;\\n    \\t    // Dozen 1\\n    \\t    if ( spin_number \\u003e= 1 \\u0026\\u0026 spin_number \\u003c= 12 ) {\\n    \\t        cid = ( _bid_param \\u003c\\u003c 44 * 4 ) \\u003e\\u003e 252;\\n    \\t    } else if ( spin_number \\u003e= 13 \\u0026\\u0026 spin_number \\u003c= 24 ) { // Dozen 2\\n    \\t        cid = ( _bid_param \\u003c\\u003c 45 * 4 ) \\u003e\\u003e 252;\\n    \\t    } else { // Dozen 3\\n    \\t        cid = ( _bid_param \\u003c\\u003c 46 * 4 ) \\u003e\\u003e 252;\\n    \\t    }\\n    \\t    result = result + getChipVolume( cid ) * 3;\\n    \\t    // Third 1\\n    \\t    if ( spin_number % 3 == 1 ) {\\n    \\t        cid = ( _bid_param \\u003c\\u003c 47 * 4 ) \\u003e\\u003e 252;\\n    \\t    } else if ( spin_number % 3 == 2) { // Third 2\\n    \\t        cid = ( _bid_param \\u003c\\u003c 48 * 4 ) \\u003e\\u003e 252;\\n    \\t    } else { // Third 3\\n    \\t        cid = ( _bid_param \\u003c\\u003c 49 * 4 ) \\u003e\\u003e 252;\\n    \\t    }\\n    \\t    result = result + getChipVolume( cid ) * 3;\\n    \\t}\\n\\t    return result;\\n\\t}\\n\\t\\n\\t\\n\\t/**\\n    * @dev Spin the roullete\\n\\t* @dev uint256 _bid_param - coded as 4 bits per one field (one hex number from 0 to F, 256 bits cointains 64 hex digits) from high bits\\n\\t* @dev                      every 4 bits store ID of the chip, you can find volumes of every chip in the chips variable\\n    * @dev  0       - ZERO\\n    * @dev  1-36    - 1-36\\n    * @dev  37      - Double ZERO\\n    * @dev  38      - Numbers from 1 to 18\\n    * @dev  39      - Numbers from 19 to 36\\n    * @dev  40-41   - Black / Red\\n    * @dev  42-43   - Even / Odd\\n    * @dev  44-46   - Dozens\\n    * @dev  47-49   - Thirds\\n    * @dev  50-63   - Not used\\n    * @dev \\n    * @dev  Example of the _bid_param :\\n    * @dev    0000000000000000000000000000000000000000300000500000000000000000\\n    * @dev    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^     ^\\n    * @dev    0123456789111......................330  B     3nd                             \\n    * @dev              012                      560  L     D\\n    * @dev                                            A     O\\n    * @dev                                            C     Z\\n    * @dev                                            K     E \\n    * @dev                                                  N\\n    * @dev\\n    * @dev  That\\u0027s mean chip with id 3 (default volume is 1 BAEX) on BLACK\\n    * @dev    and chip with id 5 (default volume is 4 BAEX) on 2nd DOZEN\\n    * @dev \\n    */\\n\\tfunction spinRoulette(uint256 _bid_param) public {\\n\\t    _spinRoulette(msg.sender, _bid_param);\\n\\t}\\n\\tfunction _spinRoulette(address _sender, uint256 _bid_param) private {\\n\\t    uint256 _vol = getBidVolFromParam( _bid_param );\\n\\t    require( tx.origin == msg.sender, \\\"Only origin addresses can call it\\\" );\\n\\t    require( _vol \\u003e 0, \\\"Bid volume must be greater than zero\\\" );\\n\\t    require( _vol \\u003c 10**21, \\\"Too big bid volume\\\" );\\n\\t    require( _vol \\u003e= min_bid_vol, \\\"Your bid volume less than minimal bid volume\\\" );\\n\\t    require( _vol \\u003c= max_bid_vol, \\\"Your bid volume greater than maximum bid volume\\\" );\\n\\t    require( IERC20(baex).balanceOf(_sender) \\u003e= _vol/10, \\\"Not enough balance to place this bid\\\" );\\n\\t    require( liquidity_pool/max_bid_k \\u003e= _vol, \\\"Not enough liquidity in the pool\\\" );\\n\\t    // GENERATE ROULETTE SPIN RANDOM\\n\\t    uint256 spin_number = uint256(keccak256(abi.encodePacked(_bid_param,ifaceRandomSeed(seed_contract).getRandomSeed(),tx.origin.balance,tx.origin,blockhash(0)))) % 38;\\n\\t    // ---\\n\\t    uint256 result = calcTotalResultBySpinNumberAndParam( spin_number, _bid_param );\\n\\t    require( result \\u003c= (liquidity_pool / max_win_k), \\\"Your bid volume is too high\\\" );\\n\\t    total_games_in = total_games_in + _vol/10;\\n\\t    ifaceBAEXToken(baex).transferOptions(_sender,address(this),_vol/10,false);\\n\\t    if ( spin_number == 37 ) {\\n\\t        ifaceBAEXToken(baex).transferOptions(address(this),owner,_vol/10,false);\\n\\t    } else {\\n\\t        liquidity_pool = liquidity_pool + _vol;\\n\\t    }\\n\\t    if ( result \\u003e 0 ) {\\n\\t        liquidity_pool = liquidity_pool - result;\\n\\t        ifaceBAEXToken(baex).transferOptions(address(this),_sender,result/10,false);\\n\\t        total_games_out = total_games_out + result/10;\\n\\t    }\\n\\t    afterChangeLiquidityPool();\\n\\t    // LOG THE RESULT OF THE SPIN\\n\\t    log3(bytes20(address(this)),bytes8(\\\"ROLL\\\"),bytes32(uint256(msg.sender)),bytes32((spin_number\\u003c\\u003c224) | result));\\n\\t    num_of_bids++;\\n\\t}\\n\\t\\n\\t/* Admin functions */\\n\\tfunction transferOwnership(address newOwner) public onlyOwner {\\n\\t\\trequire(newOwner != address(0));\\n\\t\\towner = newOwner;\\n\\t}\\n\\t\\n\\tfunction setTokenAddress(address _token_address) public onlyOwner {\\n\\t    baex = _token_address;\\n\\t}\\n\\t\\n\\tfunction setSeedContract(address _seed_contract) public onlyOwner {\\n\\t    seed_contract = _seed_contract;\\n\\t}\\n\\t\\n\\tfunction setMaxBidAndWin(uint256 _max_bid_k, uint256 _max_win_k) public onlyOwner {\\n\\t    max_bid_k = _max_bid_k;\\n\\t    max_win_k = _max_win_k;\\n\\t}\\n\\t\\n\\tfunction setChip(uint256 _chip_id, uint256 _vol) public onlyOwner {\\n\\t    chips[_chip_id] = _vol;\\n\\t    if (_chip_id == 1) {\\n\\t        min_bid_vol = _vol;\\n\\t    }\\n\\t}\\n\\t\\n\\tfunction onTransferTokens(address _from, address _to, uint256 _value) public returns (bool) {\\n\\t    require( msg.sender == address(baex), \\\"You don\\u0027t have permission to call it\\\" );\\n\\t    if ( _to == address(this) ) {\\n\\t        _placeLiquidity( _from, _value, false );\\n\\t    }\\n\\t}\\n\\t\\n\\t// This function can transfer any of wrong sended ERC20 tokens to the contract exclude BAEX tokens,\\n\\t// because sendeding of the BAEX tokens to this contract is the valid operation\\n\\tfunction transferWrongSendedERC20FromContract(address _contract) public {\\n\\t    require( _contract != address(baex), \\\"Transfer of BAEX token is fortradeen\\\");\\n\\t    require( msg.sender == super_owner, \\\"Your are not super owner\\\");\\n\\t    IERC20(_contract).transfer( super_owner, IERC20(_contract).balanceOf(address(this)) );\\n\\t}\\n\\t\\n\\t// If someone send ETH to this contract it will send it back\\n\\treceive() external payable  {\\n        msg.sender.transfer(msg.value);\\n\\t}\\n\\t/*------------------*/\\n\\t\\n}\\n/* END of: Smart-contract */\\n\\n// SPDX-License-Identifier: UNLICENSED\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"Uniswap.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"Uniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n// Factory 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\\n// Router 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fmk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bid_param\",\"type\":\"uint256\"}],\"name\":\"getBidVolFromParam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chip_id\",\"type\":\"uint256\"}],\"name\":\"getChipVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinMaxBidVol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"liquidityBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_in\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_bid_k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_bid_vol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_win_k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_bid_vol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"num_of_bids\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"onTransferTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vol\",\"type\":\"uint256\"}],\"name\":\"placeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chip_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vol\",\"type\":\"uint256\"}],\"name\":\"setChip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_bid_k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_win_k\",\"type\":\"uint256\"}],\"name\":\"setMaxBidAndWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seed_contract\",\"type\":\"address\"}],\"name\":\"setSeedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_address\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bid_param\",\"type\":\"uint256\"}],\"name\":\"spinRoulette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tfmk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_games_in\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_games_out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"transferWrongSendedERC20FromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vol\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_burn_to_eth\",\"type\":\"bool\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BAEXRoulette","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1400000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://591e1e3d14ad942f6b14076c40a0ca3c9f599967232b581df0bca18c0234d7e3"}]}