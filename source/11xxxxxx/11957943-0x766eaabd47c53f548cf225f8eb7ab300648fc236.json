{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract wCHXMapping is Ownable {\r\n    event AddressMapped(address indexed ethAddress, string chxAddress, string signature);\r\n    event AddressMappingRemoved(address indexed ethAddress, string chxAddress, string signature);\r\n\r\n    mapping (address => string) private ethToChxAddresses;\r\n    mapping (string => address) private chxToEthAddresses;\r\n    mapping (string => string) private chxToSignatures;\r\n\r\n    constructor()\r\n        public\r\n    {\r\n    }\r\n\r\n    function chxAddress(address _ethAddress)\r\n        external\r\n        view\r\n        returns (string memory) \r\n    {\r\n        return ethToChxAddresses[_ethAddress];\r\n    }\r\n\r\n    function ethAddress(string calldata _chxAddress)\r\n        external\r\n        view\r\n        returns (address) \r\n    {\r\n        return chxToEthAddresses[_chxAddress];\r\n    }\r\n\r\n    function signature(string calldata _chxAddress)\r\n        external\r\n        view\r\n        returns (string memory) \r\n    {\r\n        return chxToSignatures[_chxAddress];\r\n    }\r\n\r\n    function mapAddress(string calldata _chxAddress, string calldata _signature)\r\n        external\r\n    {\r\n        address _ethAddress = _msgSender();\r\n\r\n        require(bytes(ethToChxAddresses[_ethAddress]).length == 0);\r\n        require(chxToEthAddresses[_chxAddress] == address(0));\r\n        require(bytes(chxToSignatures[_chxAddress]).length == 0);\r\n        checkChxAddress(_chxAddress);\r\n        checkSignature(_signature);\r\n\r\n        ethToChxAddresses[_ethAddress] = _chxAddress;\r\n        chxToEthAddresses[_chxAddress] = _ethAddress;\r\n        chxToSignatures[_chxAddress] = _signature;\r\n\r\n        emit AddressMapped(_ethAddress, _chxAddress, _signature);\r\n    }\r\n\r\n    function removeMappedAddress(address _ethAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        string memory _chxAddress = ethToChxAddresses[_ethAddress];\r\n        require(bytes(_chxAddress).length != 0);\r\n\r\n        string memory _signature = chxToSignatures[_chxAddress];\r\n        require(bytes(_signature).length != 0);\r\n        require(chxToEthAddresses[_chxAddress] == _ethAddress);\r\n        \r\n        delete ethToChxAddresses[_ethAddress];\r\n        delete chxToEthAddresses[_chxAddress];\r\n        delete chxToSignatures[_chxAddress];\r\n        \r\n        emit AddressMappingRemoved(_ethAddress, _chxAddress, _signature);\r\n    }\r\n\r\n    function isAlphanumericChar(bytes1 _char)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return (_char >= 0x30 && _char <= 0x39) || \r\n            (_char >= 0x41 && _char <= 0x5A) || \r\n            (_char >= 0x61 && _char <= 0x7A);\r\n    }\r\n\r\n    function checkChxAddress(string memory _chxAddress)\r\n        private \r\n        pure\r\n    {\r\n        bytes memory _strBytes = bytes(_chxAddress);\r\n        bytes memory _prefix = bytes(\"CH\");\r\n        require(_strBytes[0] == _prefix[0] && _strBytes[1] == _prefix[1], \"Invalid CHX address\");\r\n\r\n        bytes1 _lastChar = _strBytes[_strBytes.length - 1];\r\n        require(isAlphanumericChar(_lastChar), \"CHX address ends with incorrect character\");\r\n    }\r\n\r\n    function checkSignature(string memory _signature)\r\n        private \r\n        pure\r\n    {\r\n        bytes memory _strBytes = bytes(_signature);\r\n\r\n        bytes1 _firstChar = _strBytes[0];\r\n        require(isAlphanumericChar(_firstChar), \"Signature ends with incorrect character\");\r\n\r\n        bytes1 _lastChar = _strBytes[_strBytes.length - 1];\r\n        require(isAlphanumericChar(_lastChar), \"Signature ends with incorrect character\");\r\n    }\r\n\r\n    // Enable recovery of ether sent by mistake to this contract's address.\r\n    function drainStrayEther(uint _amount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        payable(owner()).transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    // Enable recovery of any ERC20 compatible token sent by mistake to this contract's address.\r\n    function drainStrayTokens(IERC20 _token, uint _amount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return _token.transfer(owner(), _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chxAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"AddressMapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chxAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"AddressMappingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethAddress\",\"type\":\"address\"}],\"name\":\"chxAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainStrayEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainStrayTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chxAddress\",\"type\":\"string\"}],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chxAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"}],\"name\":\"mapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethAddress\",\"type\":\"address\"}],\"name\":\"removeMappedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chxAddress\",\"type\":\"string\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"wCHXMapping","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4edcf2ad117c31b7398fea6aa12657595b1218e4129557f3a3ce94a084473c6f"}]}