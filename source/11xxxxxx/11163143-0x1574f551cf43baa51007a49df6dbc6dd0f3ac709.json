{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.3;\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract MasterChef is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n\t\tuint256 pid;\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n\t\tuint256 reward;\r\n        uint256 rewardPaid; \r\n\t\tuint256 userRewardPerTokenPaid;\r\n    }\r\n\t// Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n\t\r\n\r\n\t\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. Pizzas to distribute per block.\r\n        uint256 lastRewardTime;  // Last block number that Pizzas distribution occurs.\r\n        uint256 accPizzaPerShare; // Accumulated Pizzas per share, times 1e18. See below.\r\n\t\tuint256 totalPool;\r\n    }\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n\t\r\n\r\n\r\n\r\n    \r\n\tstruct User {\r\n        uint id; \r\n        address referrer; \r\n\r\n\t\tuint256[] referAmount;\r\n\r\n\t\tuint256 referReward;\r\n\r\n        uint256 totalReward;\r\n\t\r\n\t\tuint256 referRewardPerTokenPaid;\r\n\r\n    }\t\r\n\tmapping(address => User) public users;\r\n\t\r\n\r\n\tuint public lastUserId = 2;\r\n\tmapping(uint256 => address) public regisUser;\r\n\r\n\r\n\r\n\t\r\n\t\r\n\t\r\n\r\n\tbool initialized = false;\r\n\r\n    //uint256 public initreward = 1250*1e18;\r\n\r\n    uint256 public starttime = 1599829200;\r\n\r\n    uint256 public periodFinish = 0;\r\n\r\n    uint256 public rewardRate = 0;\r\n\r\n    uint256 public totalMinted = 0;\r\n\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\n\r\n\t//The Pizza TOKEN!\r\n\t//  IERC20 public pizza = IERC20(0x54CF703014A82B4FF7E9a95DD45e453e1Ba13eb1);\r\n    IERC20 public pizza ;\r\n\r\n\r\n\r\n\taddress public defaultReferAddr = address(0xCfCe2a772ae87c5Fae474b2dE0324ee19C2c145f);\r\n\t\r\n\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // Bonus muliplier for early pizza makers.\r\n    uint256 public constant BONUS_MULTIPLIER = 1;\r\n\r\n\r\n\r\n\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n\r\n //constructor\r\n   // function initContract \r\n\t constructor (IERC20 _pizza,uint256 _rewardRate,uint256 _starttime,uint256 _periodFinish,address _defaultReferAddr) public onlyOwner{\t\r\n\t\trequire(initialized == false,\"has initialized\");\r\n        pizza = _pizza;\r\n\t\trewardRate = _rewardRate;\r\n\t\tstarttime = _starttime;\r\n\t\tperiodFinish = _periodFinish;\r\n\t\tdefaultReferAddr =  _defaultReferAddr;\r\n\t\r\n\t\tUser memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            referAmount:new uint256[](2),\r\n\t\t\treferReward:0,\r\n\t\t\ttotalReward:0,\r\n\t\t\treferRewardPerTokenPaid:0\t\t\r\n        });\t\t\r\n\t\tusers[defaultReferAddr] = user;\t\r\n\t\t\r\n\t\tregisUser[1] = \tdefaultReferAddr;\r\n\t\tinitialized = true;\t\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\t\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n\t\treturn (users[user].id != 0);\r\n    }\r\n\t\r\n\r\n\t\r\n\tfunction registrationExt(address referrerAddress) external {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n       //require(msg.value == 0.05 ether, \"registration cost 0.05\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n       // uint32 size;\r\n        //assembly {\r\n        //    size := extcodesize(userAddress)\r\n       // }\r\n\t\t//require(size == 0, \"cannot be a contract\");\r\n\t\trequire(!Address.isContract(userAddress), \"cannot be a contract\");\r\n        \r\n \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n\t\t\treferAmount:new uint256[](2),\r\n\t\t\ttotalReward:0,\r\n\t\t\treferReward:0,\r\n\t\t\treferRewardPerTokenPaid:0\t\t\r\n        });\r\n\t\t\r\n\t\tregisUser[lastUserId] = userAddress;\r\n        \r\n        users[userAddress] = user;\r\n\t\t\r\n        lastUserId++;\r\n        \r\n        emit  Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n\t\r\n\r\n\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function addLp(uint256 _allocPoint, IERC20 _lpToken) public onlyOwner {   \r\n        uint256 lastRewardTime = block.timestamp > starttime ? block.timestamp : starttime;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardTime: lastRewardTime,\r\n            accPizzaPerShare: 0,\r\n\t\t\ttotalPool:0\r\n        }));\t\t\r\n    }\r\n\t\r\n\t\r\n\r\n\r\n    // Update the given pool's Pizza allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\r\n\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\t\r\n\tfunction setTotalAllocPoint(uint256 _totalAllocPoint) public onlyOwner{\r\n\t\ttotalAllocPoint = _totalAllocPoint;\r\n\t}\r\n\t\r\n\tfunction setRewardRate(uint256 _rewardRate) public onlyOwner {\r\n\t\trewardRate = _rewardRate;\t\r\n\t} \r\n\r\n\t\r\n  \r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        if (_to <= periodFinish) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= periodFinish) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return periodFinish.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                _to.sub(periodFinish)\r\n            );\r\n        }\r\n    }\r\n\r\n\tfunction getRewardRate() public view returns(uint256){\r\n\t\t\r\n\t\tif(totalMinted < 6000*1e18){\r\n\t\t\treturn rewardRate;\r\n\t\t}else if(totalMinted >= 6000*1e18   && totalMinted <= 8000 * 1e18){\r\n\t\t\treturn rewardRate.mul(50).div(100);\r\n\t\t//\treturn rewardRate;\r\n\t\t}else if(totalMinted >8000*1e18 && totalMinted <= 9000 * 1e18){\r\n\t\t\treturn  rewardRate.mul(25).div(100);\r\n\t\t//\treturn rewardRate;\r\n\t\t}else{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n    function pendingPizza(uint256 _pid, address _user) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accPizzaPerShare = pool.accPizzaPerShare;\r\n        uint256 lpSupply = pool.totalPool;\r\n\t\tuint256 result = user.reward;\r\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\r\n            uint256 multiplier =  getMultiplier(pool.lastRewardTime, block.timestamp);\r\n            uint256 pizzaReward = multiplier.mul(getRewardRate()).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accPizzaPerShare = pool.accPizzaPerShare.add(pizzaReward.mul(1e18).div(lpSupply));\r\n        }\r\n\r\n\t\tresult = result.add(user.amount.mul((accPizzaPerShare).sub(user.userRewardPerTokenPaid)).div(1e18));\r\n\t\r\n        \r\n\t\treturn result;\r\n    }\r\n\t\r\n\r\n\tfunction pendingAllPizza(address _user) public view returns (uint256) {\r\n\t\tuint256  result = 0;\r\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\r\n\t\t\tresult = result.add(pendingPizza(i,_user));\r\n\t\t}\r\n        return result;\r\n    }\r\n\t\r\n\r\n\tfunction allPizzaAmount(address _user) public view returns (uint256) {\r\n\t\tuint256 result = 0;\r\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\r\n\t\t\tUserInfo storage user = userInfo[i][_user];\r\n\t\t\tresult = result.add(pendingPizza(i,_user).add(user.rewardPaid));\r\n\t\t}\r\n        return result;\r\n    }\r\n\t\r\n\r\n\tfunction getAllDeposit(address _user) public view returns (uint256) {\r\n\t\tuint256 result = 0;\r\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\r\n\t\t\tUserInfo storage user = userInfo[i][_user];\t\t\r\n\t\t\tresult = result.add(user.amount);\r\n\t\t}\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\n\tfunction getReferAmount(address _user,uint256 _index) public view returns(uint256){\r\n\t\tif(isUserExists(_user)){\r\n\t\t\treturn\tusers[_user].referAmount[_index];\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid,address _user) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTime) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.totalPool;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardTime = block.timestamp;\r\n            return;\r\n        }\r\n\t\tUserInfo storage user = userInfo[_pid][_user];\r\n\t\t\r\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\r\n        uint256 pizzaReward = multiplier.mul(getRewardRate()).mul(pool.allocPoint).div(totalAllocPoint);\r\n        totalMinted = totalMinted.add(pizzaReward);\r\n\r\n\r\n\t\t//pizza.mint(address(this), pizzaReward);\r\n        pool.accPizzaPerShare = pool.accPizzaPerShare.add(pizzaReward.mul(1e18).div(lpSupply));\r\n\t\t\r\n\t\tuser.reward = user.amount.mul((pool.accPizzaPerShare).sub(user.userRewardPerTokenPaid)).div(1e18).add(user.reward);\r\n\t\t\r\n\t\t\r\n\t\tuser.userRewardPerTokenPaid = pool.accPizzaPerShare;\r\n        pool.lastRewardTime = block.timestamp;\r\n    }\r\n\r\n\r\n    // Deposit LP tokens to MasterChef for pizza allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public checkStart {\r\n\r\n\t\trequire(isUserExists(msg.sender), \"user don't exists\");\t\t\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid,msg.sender);\t\r\n\t\t\r\n        if(_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n\t\t\tuser.pid = _pid;\r\n\t\t\tpool.totalPool = pool.totalPool.add(_amount);   \t\t\r\n\t\r\n\t\t\taddress _referrer = users[msg.sender].referrer;\r\n\t\t\tfor(uint256 i = 0;i<2;i++){\t\t\t\t\r\n\t\t\t\tif(_referrer!= address(0) && isUserExists(_referrer)){\r\n\t\t\t\t\tusers[_referrer].referAmount[i] = _amount.add(users[_referrer].referAmount[i]);\t\t\t\t\t\r\n\t\t\t\t\t_referrer = users[_referrer].referrer;\r\n\t\t\t\t}else break;\r\n\t\t\t}\t\t\t\t\r\n        }\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\t\r\n\r\n    function getReward(uint256 _pid) public  {\r\n\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 accPizzaPerShare = pool.accPizzaPerShare;\r\n        uint256 lpSupply = pool.totalPool;\r\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\r\n            uint256 multiplier =  getMultiplier(pool.lastRewardTime, block.timestamp);\r\n            uint256 pizzaReward = multiplier.mul(getRewardRate()).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accPizzaPerShare = pool.accPizzaPerShare.add(pizzaReward.mul(1e18).div(lpSupply));\r\n        }\r\n        uint256 reward = user.amount.mul((accPizzaPerShare).sub(user.userRewardPerTokenPaid)).div(1e18).add(user.reward);\r\n\t\r\n        if (reward > 0) {\r\n\t\t\tsafePizzaTransfer(msg.sender, reward);\r\n\t\t\tuser.rewardPaid = user.rewardPaid.add(reward);\r\n\t\t\tuser.reward = 0;\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\t\t\r\n\t\tuser.userRewardPerTokenPaid = accPizzaPerShare;\r\n    }\r\n\t\r\n\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public{\t\t\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\t\r\n\t\t\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        \r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid,msg.sender);\r\n               \r\n\r\n\t\tsafePizzaTransfer(msg.sender, user.reward);\r\n\t\t\r\n\t\tuser.rewardPaid = user.rewardPaid.add(user.reward);\r\n\t\temit RewardPaid(msg.sender, user.rewardPaid);\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\t\t\t\r\n\t\t\tpool.totalPool = pool.totalPool.sub(_amount);   \t\r\n\t\t\taddress _referrer = users[msg.sender].referrer;\r\n\t\t\tfor(uint256 i = 0;i<2;i++){\r\n\t\t\t\tif(_referrer!= address(0) && isUserExists(_referrer)){\r\n\t\t\t\t\tusers[_referrer].referAmount[i] = users[_referrer].referAmount[i].sub(_amount);\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tsafePizzaTransfer(_referrer, user.reward.mul(10).div(100).div(i+1));\r\n\t\t\t\t\t_referrer = users[_referrer].referrer;\r\n\t\t\t\t}else break;\r\n\t\t\t}\t\r\n        }\r\n\t\tuser.reward = 0;\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n   // function emergencyWithdraw(uint256 _pid) public {\r\n   //     PoolInfo storage pool = poolInfo[_pid];\r\n    //    UserInfo storage user = userInfo[_pid][msg.sender];\r\n   //     pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n   //     emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n  //      user.amount = 0;\r\n   // }\r\n\r\n    // Safe pizza transfer function, just in case if rounding error causes pool to not have enough pizzas.\r\n    function safePizzaTransfer(address _to, uint256 _amount) internal {\r\n        uint256 pizzaBal = pizza.balanceOf(address(this));\r\n        if (_amount > pizzaBal) {\r\n            pizza.transfer(_to, pizzaBal);\r\n        } else {\r\n            pizza.transfer(_to, _amount);\r\n        }\r\n    }   \r\n\r\n\t\r\n\tmodifier checkStart(){\r\n       require(block.timestamp  > starttime,\"not start\");\r\n       _;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_pizza\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_defaultReferAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allPizzaAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultReferAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAllPizza\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingPizza\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pizza\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPizzaPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"regisUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAllocPoint\",\"type\":\"uint256\"}],\"name\":\"setTotalAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referRewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MasterChef","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b02899b895ad5dd975784adde42c92362503a0250000000000000000000000000000000000000000000000000010729fa58404be000000000000000000000000000000000000000000000000000000005f9d09d7000000000000000000000000000000000000000000000000000000005f9d0dbf00000000000000000000000049e39fb0cb1461597436d67119d982ffa0e56688","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://716fd8a5936b1f8e1c52e31f3be5a4acd3d21ce8679a54898c22650004848ebc"}]}