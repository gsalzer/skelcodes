{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.4;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IESDS {\r\n    function redeemCoupons(uint256 epoch, uint256 couponAmount) external;\r\n    function transferCoupons(address sender, address recipient, uint256 epoch, uint256 amount) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// @notice Lets anybody trustlessly redeem coupons on anyone else's behalf for a fee (default fee is 1%).\r\n//    Requires that the coupon holder has previously approved this contract via the ESDS `approveCoupons` function.\r\n// @dev Bots should scan for the `CouponApproval` event emitted by the ESDS `approveCoupons` function to find out which \r\n//    users have approved this contract to redeem their coupons.\r\ncontract CouponClipper {\r\n\r\n    IERC20 constant private ESD = IERC20(0x36F3FD68E7325a35EB768F1AedaAe9EA0689d723);\r\n    IESDS constant private ESDS = IESDS(0x443D2f2755DB5942601fa062Cc248aAA153313D3);\r\n\r\n    // The percent fee offered by coupon holders to callers (bots), in basis points\r\n    // E.g., offers[_user] = 500 indicates that _user will pay 500 basis points (5%) to the caller\r\n    mapping(address => uint256) private offers;\r\n\r\n    // @notice Gets the number of basis points the _user is offering the bots\r\n    // @dev The default value is 100 basis points (1%).\r\n    //   That is, `offers[_user] = 0` is interpretted as 1%.\r\n    //   This way users who are comfortable with the default 1% offer don't have to make any additional contract calls.\r\n    // @param _user The account whose offer we're looking up.\r\n    // @return The number of basis points the account is offering the callers (bots)\r\n    function getOffer(address _user) public view returns (uint256) {\r\n        uint256 offer = offers[_user];\r\n        return offer == 0 ? 100 : offer;\r\n    }\r\n\r\n    // @notice Allows msg.sender to change the number of basis points they are offering.\r\n    // @dev An _offer value of 0 will be interpretted as the \"default offer\", which is 100 basis points (1%).\r\n    // @param _offer The number of basis points msg.sender wants to offer the callers (bots).\r\n    function setOffer(uint256 _offer) external {\r\n        require(_offer <= 10_000, \"Offer exceeds 100%.\");\r\n        offers[msg.sender] = _offer;\r\n    }\r\n\r\n    // @notice Allows anyone to redeem coupons for ESD on the coupon-holder's bahalf\r\n    // @param _user Address of the user holding the coupons (and who has approved this contract)\r\n    // @param _epoch The epoch in which the _user purchased the coupons\r\n    // @param _couponAmount The number of coupons to redeem (18 decimals)\r\n    function redeem(address _user, uint256 _epoch, uint256 _couponAmount) external {\r\n        \r\n        // pull user's coupons into this contract (requires that the user has approved this contract)\r\n        ESDS.transferCoupons(_user, address(this), _epoch, _couponAmount);\r\n        \r\n        // redeem the coupons for ESD\r\n        ESDS.redeemCoupons(_epoch, _couponAmount);\r\n        \r\n        // pay the caller their fee\r\n        uint256 botFee = _couponAmount * getOffer(_user) / 10_000;\r\n        ESD.transfer(msg.sender, botFee); // @audit-ok : reverts on failure\r\n        \r\n        // send the ESD to the user\r\n        ESD.transfer(_user, _couponAmount - botFee); // @audit-ok : no underflow and reverts on failure\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_couponAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offer\",\"type\":\"uint256\"}],\"name\":\"setOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CouponClipper","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c9cc75de052d71081ece699893ad229dc3bbaadbb5c2c4ccb588d72b1c50cfe9"}]}