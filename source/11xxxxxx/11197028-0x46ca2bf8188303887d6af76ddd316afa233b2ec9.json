{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.10;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address account) external returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// Adventure Awaits: find all 4 clues, solve the puzzle and claim the reward\r\n// #0xPoland #0xPolandHeist\r\ncontract Puzzle {\r\n    uint256 constant BLOCKS_TO_WAIT = 10;\r\n\r\n    bytes32 public hash;\r\n    address public winner;\r\n    mapping(address => bytes32) public commits;\r\n    mapping(address => uint256) public commitBlock;\r\n\r\n    constructor(bytes32 _hash) public payable {\r\n        hash = _hash;\r\n    }\r\n\r\n    function commit(bytes32 _hash) public {\r\n        commits[msg.sender] = _hash;\r\n        commitBlock[msg.sender] = block.number;\r\n    }\r\n\r\n    function reveal(string memory _solution) public {\r\n        bytes32 solutionHash = keccak256(abi.encodePacked(_solution));\r\n        bytes32 solutionDoubleHash = keccak256(abi.encodePacked(solutionHash));\r\n        bytes32 commitHash = keccak256(abi.encodePacked(msg.sender, solutionHash));\r\n        require(winner == address(0), 'Already won');\r\n        require(block.number > commitBlock[msg.sender] + BLOCKS_TO_WAIT, 'No front-running');\r\n        require(solutionDoubleHash == hash, 'Invalid solution');\r\n        require(commitHash == commits[msg.sender], 'Did not commit');\r\n        winner = msg.sender;\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == winner, 'Not a winner');\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawToken(ERC20 token) public {\r\n        require(msg.sender == winner, 'Not a winner');\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_solution\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Puzzle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"5746fe8ae2bf9fb24bcdf4972ea78c0211211e23c376461956d46d8d8a6519ba","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a5891634f1b84e48cb5f0cddbc81b9fb01a8fbc18c24f3099d1f4cdf4384160d"}]}