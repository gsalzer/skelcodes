{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/uniswap/interface/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/StakingBitgear.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract StakingBitgear is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Pair public pair;\r\n    bool private ifGearZeroTokenInPair;\r\n    IERC20 public gearAddress;\r\n\r\n    uint256 public zeroDayStartTime;\r\n    uint256 public dayDurationSec;\r\n    uint256 constant public numDaysInMonth = 30;\r\n    uint256 constant public monthsInYear = 12;\r\n    modifier onlyWhenOpen\r\n    {\r\n        require(\r\n            now >= zeroDayStartTime,\r\n            \"StakingBitgear: Contract is not open yet\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    uint256 public allLpTokensStaked;\r\n    uint256 public allGearTokens;\r\n    uint256 public unfreezedGearTokens;\r\n    uint256 public freezedGearTokens;\r\n    event LpTokensIncome(address who, uint256 amount, uint256 day);\r\n    event LpTokensOutcome(address who, uint256 amount, uint256 day);\r\n    event GearTokenIncome(address who, uint256 amount, uint256 day);\r\n    event GearTokenOutcome(address who, uint256 amount, uint256 day);\r\n    event TokenFreezed(address who, uint256 amount, uint256 day);\r\n    event TokenUnfreezed(address who, uint256 amount, uint256 day);\r\n\r\n    uint256 public stakeIdLast;\r\n    uint256 constant public maxNumMonths = 3;\r\n    uint256[] public MonthsApyPercentsNumerator = [15, 20, 30];\r\n    uint256[] public MonthsApyPercentsDenominator = [100, 100, 100];\r\n    struct StakeInfo\r\n    {\r\n        uint256 stakeId;\r\n        uint256 startDay;\r\n        uint256 numMonthsStake;\r\n        uint256 stakedLP;\r\n        uint256 stakedGear;\r\n        uint256 freezedRewardGearTokens;\r\n    }\r\n    mapping(address => StakeInfo[]) public stakeList;\r\n    event StakeStart(\r\n        address who,\r\n        uint256 LpIncome,\r\n        uint256 gearEquivalent,\r\n        uint256 gearEarnings,\r\n        uint256 numMonths,\r\n        uint256 day,\r\n        uint256 stakeId\r\n    );\r\n    event StakeEnd(\r\n        address who,\r\n        uint256 stakeId,\r\n        uint256 LpOutcome,\r\n        uint256 gearEarnings,\r\n        uint256 servedNumMonths,\r\n        uint256 day\r\n    );\r\n\r\n    constructor(\r\n        IUniswapV2Pair _pair,\r\n        IERC20 _gearAddress,\r\n        uint256 _zeroDayStartTime,\r\n        uint256 _dayDurationSec\r\n    )\r\n        public\r\n    {\r\n        pair = _pair;\r\n        gearAddress = _gearAddress;\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        require(\r\n            token0 == address(gearAddress) || token1 == address(gearAddress),\r\n            \"StakingBitgear: Invalid LP address\"\r\n        );\r\n        zeroDayStartTime = _zeroDayStartTime;\r\n        dayDurationSec = _dayDurationSec;\r\n        ifGearZeroTokenInPair = (token0 == address(gearAddress));\r\n        _testMonthsApyPercents();\r\n    }\r\n\r\n    function gearTokenDonation(uint256 amount) external\r\n    {\r\n        address sender = _msgSender();\r\n        require(\r\n            gearAddress.transferFrom(sender, address(this), amount),\r\n            \"StakingBitgear: Could not get gear tokens\"\r\n        );\r\n        allGearTokens = allGearTokens.add(amount);\r\n        unfreezedGearTokens = unfreezedGearTokens.add(amount);\r\n        emit GearTokenIncome(sender, amount, _currentDay());\r\n    }\r\n\r\n    function gearOwnerWithdraw(uint256 amount) external onlyOwner\r\n    {\r\n        address sender = _msgSender();\r\n        require(\r\n            sender == owner(),\r\n            \"StakingBitgear: Sender is not owner\"\r\n        );\r\n        require(\r\n            allGearTokens > amount,\r\n            \"StakingBitgear: Not enough value on this contract\"\r\n        );\r\n        require(\r\n            unfreezedGearTokens > amount,\r\n            \"StakingBitgear: Not enough unfreezed value on this contract\"\r\n        );\r\n        require(\r\n            gearAddress.transfer(sender, amount),\r\n            \"StakingBitgear: Could not send gear tokens\"\r\n        );\r\n        allGearTokens = allGearTokens.sub(amount);\r\n        unfreezedGearTokens = unfreezedGearTokens.sub(amount);\r\n        emit GearTokenOutcome(sender, amount, _currentDay());\r\n    }\r\n\r\n    function stakeStart(uint256 amount, uint256 numMonthsStake) external onlyWhenOpen\r\n    {\r\n        require(\r\n            numMonthsStake > 0 && numMonthsStake <= maxNumMonths,\r\n            \"StakingBitgear: Wrong number of months\"\r\n        );\r\n        address sender = _msgSender();\r\n        // Get LP tokens\r\n        require(\r\n            pair.transferFrom(sender, address(this), amount),\r\n            \"StakingBitgear: LP token transfer failed\"\r\n        );\r\n        allLpTokensStaked = allLpTokensStaked.add(amount);\r\n        uint256 currDay = _currentDay();\r\n        emit LpTokensIncome(sender, amount, currDay);\r\n        // Calculate equivalent of LP tokens in Gear tokens\r\n        uint256 LpPairTotalSupply = pair.totalSupply();\r\n        uint256 gearPairTotalReserves;\r\n        //uint256 ethPairTotalReserves;\r\n        if (ifGearZeroTokenInPair)\r\n            (gearPairTotalReserves, /* ethPairTotalReserves */,) = pair.getReserves();\r\n        else\r\n            (/* ethPairTotalReserves */, gearPairTotalReserves,) = pair.getReserves();\r\n        uint256 gearEquivalent = gearPairTotalReserves.mul(amount).div(LpPairTotalSupply);\r\n        // Calculate earnings in Gear tokens that user will get\r\n        uint256 gearEarnings = _getGearEarnings(gearEquivalent, numMonthsStake);\r\n        // Freeze Gear tokens on contract\r\n        require(\r\n            unfreezedGearTokens >= gearEarnings,\r\n            \"StakingBitgear: Insufficient funds of Gear tokens to this stake\"\r\n        );\r\n        unfreezedGearTokens = unfreezedGearTokens.sub(gearEarnings);\r\n        freezedGearTokens = freezedGearTokens.add(gearEarnings);\r\n        emit TokenFreezed(sender, gearEarnings, currDay);\r\n        // Add stake into stakeList\r\n        StakeInfo memory st = StakeInfo(\r\n            ++stakeIdLast,\r\n            currDay,\r\n            numMonthsStake,\r\n            amount,\r\n            gearEquivalent,\r\n            gearEarnings\r\n        );\r\n        stakeList[sender].push(st);\r\n        emit StakeStart(\r\n            sender,\r\n            amount,\r\n            gearEquivalent,\r\n            gearEarnings,\r\n            numMonthsStake,\r\n            currDay,\r\n            stakeIdLast\r\n        );\r\n    }\r\n\r\n    function stakeEnd(uint256 stakeIndex, uint256 stakeId) external onlyWhenOpen\r\n    {\r\n        address sender = _msgSender();\r\n        require(\r\n            stakeIndex >= 0 && stakeIndex < stakeList[sender].length,\r\n            \"StakingBitgear: Wrong stakeIndex\"\r\n        );\r\n        StakeInfo storage st = stakeList[sender][stakeIndex];\r\n        require(\r\n            st.stakeId == stakeId,\r\n            \"StakingBitgear: Wrong stakeId\"\r\n        );\r\n        uint256 currDay = _currentDay();\r\n        uint256 servedNumOfMonths = _getServedMonths(currDay, st.startDay, st.numMonthsStake);\r\n        uint256 gearTokensToReturn = _getGearEarnings(st.stakedGear, servedNumOfMonths);\r\n        require(\r\n            st.freezedRewardGearTokens >= gearTokensToReturn,\r\n            \"StakingBitgear: Internal error!\"\r\n        );\r\n\r\n        pair.transfer(sender, st.stakedLP);\r\n        allLpTokensStaked = allLpTokensStaked.sub(st.stakedLP);\r\n        emit LpTokensOutcome(sender, st.stakedLP, currDay);\r\n\r\n        uint256 remainingGearTokens = st.freezedRewardGearTokens.sub(gearTokensToReturn);\r\n        unfreezedGearTokens = unfreezedGearTokens.add(remainingGearTokens);\r\n        freezedGearTokens = freezedGearTokens.sub(st.freezedRewardGearTokens);\r\n        emit TokenUnfreezed(sender, st.freezedRewardGearTokens, currDay);\r\n        allGearTokens = allGearTokens.sub(gearTokensToReturn);\r\n        gearAddress.transfer(sender, gearTokensToReturn);\r\n        emit GearTokenOutcome(sender, gearTokensToReturn, currDay);\r\n\r\n        emit StakeEnd(\r\n            sender,\r\n            st.stakeId,\r\n            st.stakedLP,\r\n            gearTokensToReturn,\r\n            servedNumOfMonths,\r\n            currDay\r\n        );\r\n        _removeStake(stakeIndex, stakeId);\r\n    }\r\n\r\n    function stakeListCount(address who) external view returns(uint256)\r\n    {\r\n        return stakeList[who].length;\r\n    }\r\n\r\n    function currentDay() external view onlyWhenOpen returns(uint256)\r\n    {\r\n        return _currentDay();\r\n    }\r\n\r\n    function getDayUnixTime(uint256 day) public view returns(uint256)\r\n    {\r\n        return zeroDayStartTime.add(day.mul(dayDurationSec));\r\n    }\r\n\r\n    function changeMonthsApyPercents(\r\n        uint256 month,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            month > 0 && month <= maxNumMonths,\r\n            \"StakingBitgear: Wrong month\"\r\n        );\r\n        MonthsApyPercentsNumerator[month.sub(1)] = numerator;\r\n        MonthsApyPercentsDenominator[month.sub(1)] = denominator;\r\n        _testMonthsApyPercents();\r\n    }\r\n\r\n    function getEndDayOfStakeInUnixTime(\r\n        address who,\r\n        uint256 stakeIndex,\r\n        uint256 stakeId\r\n    )\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(\r\n            stakeIndex < stakeList[who].length,\r\n            \"StakingBitgear: Wrong stakeIndex\"\r\n        );\r\n        require(\r\n            stakeId == stakeList[who][stakeIndex].stakeId,\r\n            \"StakingBitgear: Wrong stakeId\"\r\n        );\r\n\r\n        return getDayUnixTime(\r\n            stakeList[who][stakeIndex].startDay.add(\r\n                stakeList[who][stakeIndex].numMonthsStake.mul(\r\n                    numDaysInMonth\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function getStakeDivsNow(\r\n        address who,\r\n        uint256 stakeIndex,\r\n        uint256 stakeId\r\n    )\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(\r\n            stakeIndex < stakeList[who].length,\r\n            \"StakingBitgear: Wrong stakeIndex\"\r\n        );\r\n        require(\r\n            stakeId == stakeList[who][stakeIndex].stakeId,\r\n            \"StakingBitgear: Wrong stakeId\"\r\n        );\r\n\r\n        uint256 currDay = _currentDay();\r\n        uint256 servedMonths = _getServedMonths(\r\n            currDay,\r\n            stakeList[who][stakeIndex].startDay,\r\n            stakeList[who][stakeIndex].numMonthsStake\r\n        );\r\n        return _getGearEarnings(stakeList[who][stakeIndex].stakedGear, servedMonths);\r\n    }\r\n\r\n    function _getServedMonths(\r\n        uint256 currDay,\r\n        uint256 startDay,\r\n        uint256 numMonthsStake\r\n    )\r\n        private\r\n        pure\r\n        returns(uint256 servedMonths)\r\n    {\r\n        servedMonths = currDay.sub(startDay).div(numDaysInMonth);\r\n        if (servedMonths > numMonthsStake)\r\n            servedMonths = numMonthsStake;\r\n    }\r\n\r\n    function _getGearEarnings(\r\n        uint256 gearAmount,\r\n        uint256 numOfMonths\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 reward)\r\n    {\r\n        require(\r\n            numOfMonths >= 0 && numOfMonths <= maxNumMonths,\r\n            \"StakingBitgear: Wrong numOfMonths\"\r\n        );\r\n        for (uint256 month = 1; month <= numOfMonths; ++month)\r\n        {\r\n            reward +=\r\n                gearAmount.add(reward)\r\n                    .mul(MonthsApyPercentsNumerator[month - 1])\r\n                    .div(monthsInYear)\r\n                    .div(MonthsApyPercentsDenominator[month - 1]);\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    function _currentDay() private view returns(uint256)\r\n    {\r\n        return now.sub(zeroDayStartTime).div(dayDurationSec);\r\n    }\r\n\r\n    function _removeStake(uint256 stakeIndex, uint256 stakeId) private\r\n    {\r\n        address sender = _msgSender();\r\n        uint256 stakeListLength = stakeList[sender].length;\r\n        require(\r\n            stakeIndex >= 0 && stakeIndex < stakeListLength,\r\n            \"StakingBitgear: Wrong stakeIndex\"\r\n        );\r\n        StakeInfo storage st = stakeList[sender][stakeIndex];\r\n        require(\r\n            st.stakeId == stakeId,\r\n            \"StakingBitgear: Wrong stakeId\"\r\n        );\r\n        if (stakeIndex < stakeListLength - 1)\r\n            stakeList[sender][stakeIndex] = stakeList[sender][stakeListLength - 1];\r\n        stakeList[sender].pop();\r\n    }\r\n\r\n    function _testMonthsApyPercents() private view\r\n    {\r\n        uint256 amount = 100000;\r\n        require(\r\n            maxNumMonths == 3,\r\n            \"StakingBitgear: Wrong MonthsApyPercents parameters\"\r\n        );\r\n        require(\r\n            amount\r\n                .mul(MonthsApyPercentsNumerator[0])\r\n                .div(MonthsApyPercentsDenominator[0])\r\n                >=\r\n            amount.mul(5).div(100),\r\n            \"StakingBitgear: Wrong MonthsApyPercents parameters\"\r\n        );\r\n        require(\r\n            amount\r\n                .mul(MonthsApyPercentsNumerator[1])\r\n                .div(MonthsApyPercentsDenominator[1])\r\n                >=\r\n            amount.mul(7).div(100),\r\n            \"StakingBitgear: Wrong MonthsApyPercents parameters\"\r\n        );\r\n        require(\r\n            amount\r\n                .mul(MonthsApyPercentsNumerator[2])\r\n                .div(MonthsApyPercentsDenominator[2])\r\n                >=\r\n            amount.mul(10).div(100),\r\n            \"StakingBitgear: Wrong MonthsApyPercents parameters\"\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_gearAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zeroDayStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dayDurationSec\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"GearTokenIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"GearTokenOutcome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"LpTokensIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"LpTokensOutcome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LpOutcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gearEarnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"servedNumMonths\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"StakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LpIncome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gearEquivalent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gearEarnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numMonths\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"StakeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"TokenFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"TokenUnfreezed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MonthsApyPercentsDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MonthsApyPercentsNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allGearTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLpTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"changeMonthsApyPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayDurationSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezedGearTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gearAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gearOwnerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gearTokenDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getDayUnixTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getEndDayOfStakeInUnixTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getStakeDivsNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthsInYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numDaysInMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeIdLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numMonthsStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedGear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezedRewardGearTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"stakeListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numMonthsStake\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezedGearTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroDayStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingBitgear","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000dd5d1a256b25e1087fc3b098b443e96cfa73237d0000000000000000000000001b980e05943de3db3a459c72325338d327b6f5a9000000000000000000000000000000000000000000000000000000005fdfe5800000000000000000000000000000000000000000000000000000000000015180","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a2bc1917a8e664409a256b99dd89d282d446a93b9bea2164c6765df0ea310906"}]}