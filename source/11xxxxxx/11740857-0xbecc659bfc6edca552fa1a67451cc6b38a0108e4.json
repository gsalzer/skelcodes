{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IFeeCollector.sol\r\n\r\npragma solidity >=0.6.0 <=0.7.5;\r\n\r\ninterface IFeeCollector {\r\n  function deposit(bool[] calldata _depositTokensEnabled, uint256[] calldata _minTokenOut, uint256 _minPoolAmountOut) external; // called by whitelisted address\r\n  function setSplitAllocation(uint256[] calldata _allocations) external; // allocation of fees sent SmartTreasury vs FeeTreasury\r\n  // function setFeeTreasuryAddress(address _feeTreasuryAddress) external; // called by admin\r\n\r\n  function addBeneficiaryAddress(address _newBeneficiary, uint256[] calldata _newAllocation) external;\r\n  function removeBeneficiaryAt(uint256 _index, uint256[] calldata _newAllocation) external;\r\n  function replaceBeneficiaryAt(uint256 _index, address _newBeneficiary, uint256[] calldata _newAllocation) external;\r\n  function setSmartTreasuryAddress(address _smartTreasuryAddress) external; // If for any reason the pool needs to be migrated, call this function. Called by admin\r\n\r\n  function addAddressToWhiteList(address _addressToAdd) external; // Whitelist address. Called by admin\r\n  function removeAddressFromWhiteList(address _addressToRemove) external; // Remove from whitelist. Called by admin\r\n\r\n  function registerTokenToDepositList(address _tokenAddress) external; // Register a token which can converted to ETH and deposited to smart treasury. Called by admin\r\n  function removeTokenFromDepositList(address _tokenAddress) external; // Unregister a token. Called by admin\r\n\r\n   // withdraw arbitrary token to address. Called by admin\r\n  function withdraw(address _token, address _toAddress, uint256 _amount) external;\r\n  // exchange liquidity token for underlying token and withdraw to _toAddress\r\n  function withdrawUnderlying(address _toAddress, uint256 _amount, uint256[] calldata minTokenOut) external;\r\n\r\n  function replaceAdmin(address _newAdmin) external; // called by admin\r\n}\r\n\r\n// File: contracts/interfaces/BalancerInterface.sol\r\n\r\npragma solidity = 0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface BPool {\r\n  event LOG_SWAP(\r\n    address indexed caller,\r\n    address indexed tokenIn,\r\n    address indexed tokenOut,\r\n    uint256         tokenAmountIn,\r\n    uint256         tokenAmountOut\r\n  );\r\n\r\n  event LOG_JOIN(\r\n    address indexed caller,\r\n    address indexed tokenIn,\r\n    uint256         tokenAmountIn\r\n  );\r\n\r\n  event LOG_EXIT(\r\n    address indexed caller,\r\n    address indexed tokenOut,\r\n    uint256         tokenAmountOut\r\n  );\r\n\r\n  event LOG_CALL(\r\n    bytes4  indexed sig,\r\n    address indexed caller,\r\n    bytes           data\r\n  ) anonymous;\r\n\r\n  function isPublicSwap() external view returns (bool);\r\n  function isFinalized() external view returns (bool);\r\n  function isBound(address t) external view returns (bool);\r\n  function getNumTokens() external view returns (uint);\r\n  function getCurrentTokens() external view returns (address[] memory tokens);\r\n  function getFinalTokens() external view returns (address[] memory tokens);\r\n  function getDenormalizedWeight(address token) external view returns (uint);\r\n  function getTotalDenormalizedWeight() external view returns (uint);\r\n  function getNormalizedWeight(address token) external view returns (uint);\r\n  function getBalance(address token) external view returns (uint);\r\n  function getSwapFee() external view returns (uint);\r\n  function getController() external view returns (address);\r\n\r\n  function setSwapFee(uint swapFee) external;\r\n  function setController(address manager) external;\r\n  function setPublicSwap(bool public_) external;\r\n  function finalize() external;\r\n  function bind(address token, uint balance, uint denorm) external;\r\n  function unbind(address token) external;\r\n  function gulp(address token) external;\r\n\r\n  function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n  function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n\r\n  function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;   \r\n  function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n\r\n  function swapExactAmountIn(\r\n    address tokenIn,\r\n    uint tokenAmountIn,\r\n    address tokenOut,\r\n    uint minAmountOut,\r\n    uint maxPrice\r\n  ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n\r\n  function swapExactAmountOut(\r\n    address tokenIn,\r\n    uint maxAmountIn,\r\n    address tokenOut,\r\n    uint tokenAmountOut,\r\n    uint maxPrice\r\n  ) external returns (uint tokenAmountIn, uint spotPriceAfter);\r\n\r\n  function joinswapExternAmountIn(\r\n    address tokenIn,\r\n    uint tokenAmountIn,\r\n    uint minPoolAmountOut\r\n  ) external returns (uint poolAmountOut);\r\n\r\n  function joinswapPoolAmountOut(\r\n    address tokenIn,\r\n    uint poolAmountOut,\r\n    uint maxAmountIn\r\n  ) external returns (uint tokenAmountIn);\r\n\r\n  function exitswapPoolAmountIn(\r\n    address tokenOut,\r\n    uint poolAmountIn,\r\n    uint minAmountOut\r\n  ) external returns (uint tokenAmountOut);\r\n\r\n  function exitswapExternAmountOut(\r\n    address tokenOut,\r\n    uint tokenAmountOut,\r\n    uint maxPoolAmountIn\r\n  ) external returns (uint poolAmountIn);\r\n\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address whom) external view returns (uint);\r\n  function allowance(address src, address dst) external view returns (uint);\r\n\r\n  function approve(address dst, uint amt) external returns (bool);\r\n  function transfer(address dst, uint amt) external returns (bool);\r\n  function transferFrom(\r\n    address src, address dst, uint amt\r\n  ) external returns (bool);\r\n}\r\n\r\ninterface ConfigurableRightsPool {\r\n  event LogCall(\r\n    bytes4  indexed sig,\r\n    address indexed caller,\r\n    bytes data\r\n  ) anonymous;\r\n\r\n  event LogJoin(\r\n    address indexed caller,\r\n    address indexed tokenIn,\r\n    uint tokenAmountIn\r\n  );\r\n\r\n  event LogExit(\r\n    address indexed caller,\r\n    address indexed tokenOut,\r\n    uint tokenAmountOut\r\n  );\r\n\r\n  event CapChanged(\r\n    address indexed caller,\r\n    uint oldCap,\r\n    uint newCap\r\n  );\r\n    \r\n  event NewTokenCommitted(\r\n    address indexed token,\r\n    address indexed pool,\r\n    address indexed caller\r\n  );\r\n\r\n  function createPool(\r\n    uint initialSupply\r\n    // uint minimumWeightChangeBlockPeriodParam,\r\n    // uint addTokenTimeLockInBlocksParam\r\n  ) external;\r\n\r\n  function createPool(\r\n    uint initialSupply,\r\n    uint minimumWeightChangeBlockPeriodParam,\r\n    uint addTokenTimeLockInBlocksParam\r\n  ) external;\r\n\r\n  function updateWeightsGradually(\r\n    uint[] calldata newWeights,\r\n    uint startBlock,\r\n    uint endBlock\r\n  ) external;\r\n\r\n  function joinswapExternAmountIn(\r\n    address tokenIn,\r\n    uint tokenAmountIn,\r\n    uint minPoolAmountOut\r\n  ) external;\r\n  \r\n  function whitelistLiquidityProvider(address provider) external;\r\n  function removeWhitelistedLiquidityProvider(address provider) external;\r\n  function canProvideLiquidity(address provider) external returns (bool);\r\n  function getController() external view returns (address);\r\n  function setController(address newOwner) external;\r\n\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function balanceOf(address account) external returns (uint);\r\n  function totalSupply() external returns (uint);\r\n  function bPool() external view returns (BPool);\r\n\r\n  function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n}\r\n\r\ninterface IBFactory {\r\n  event LOG_NEW_POOL(\r\n    address indexed caller,\r\n    address indexed pool\r\n  );\r\n\r\n  event LOG_BLABS(\r\n    address indexed caller,\r\n    address indexed blabs\r\n  );\r\n\r\n  function isBPool(address b) external view returns (bool);\r\n  function newBPool() external returns (BPool);\r\n}\r\n\r\ninterface ICRPFactory {\r\n  event LogNewCrp(\r\n    address indexed caller,\r\n    address indexed pool\r\n  );\r\n\r\n  struct PoolParams {\r\n    // Balancer Pool Token (representing shares of the pool)\r\n    string poolTokenSymbol;\r\n    string poolTokenName;\r\n    // Tokens inside the Pool\r\n    address[] constituentTokens;\r\n    uint[] tokenBalances;\r\n    uint[] tokenWeights;\r\n    uint swapFee;\r\n  }\r\n\r\n  struct Rights {\r\n    bool canPauseSwapping;\r\n    bool canChangeSwapFee;\r\n    bool canChangeWeights;\r\n    bool canAddRemoveTokens;\r\n    bool canWhitelistLPs;\r\n    bool canChangeCap;\r\n  }\r\n\r\n  function newCrp(\r\n    address factoryAddress,\r\n    PoolParams calldata poolParams,\r\n    Rights calldata rights\r\n  ) external returns (ConfigurableRightsPool);\r\n}\r\n\r\n// File: contracts/FeeCollector.sol\r\n\r\npragma solidity = 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n@title Idle finance Fee collector\r\n@author Asaf Silman\r\n@notice Receives fees from idle strategy tokens and routes to fee treasury and smart treasury\r\n */\r\ncontract FeeCollector is IFeeCollector, AccessControl {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  IUniswapV2Router02 private constant uniswapRouterV2 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n  address private immutable weth;\r\n\r\n  // Need to use openzeppelin enumerableset\r\n  EnumerableSet.AddressSet private depositTokens;\r\n\r\n  uint256[] private allocations; // 100000 = 100%. allocation sent to beneficiaries\r\n  address[] private beneficiaries; // Who are the beneficiaries of the fees generated from IDLE. The first beneficiary is always going to be the smart treasury\r\n\r\n  uint128 public constant MAX_BENEFICIARIES = 5;\r\n  uint128 public constant MIN_BENEFICIARIES = 2;\r\n  uint256 public constant FULL_ALLOC = 100000;\r\n\r\n  uint256 public constant MAX_NUM_FEE_TOKENS = 15; // Cap max tokens to 15\r\n  bytes32 public constant WHITELISTED = keccak256(\"WHITELISTED_ROLE\");\r\n\r\n  modifier smartTreasurySet {\r\n    require(beneficiaries[0]!=address(0), \"Smart Treasury not set\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin {\r\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Unauthorised\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhitelisted {\r\n    require(hasRole(WHITELISTED, msg.sender), \"Unauthorised\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Initialise the FeeCollector contract.\r\n  @dev Sets the smartTreasury, weth address, uniswap router, and fee split allocations.\r\n  @dev Also initialises the sender as admin, and whitelists for calling `deposit()`\r\n  @dev At deploy time the smart treasury will not have been deployed yet.\r\n       setSmartTreasuryAddress should be called after the treasury has been deployed.\r\n  @param _weth The wrapped ethereum address.\r\n  @param _feeTreasuryAddress The address of idle's fee treasury.\r\n  @param _idleRebalancer Idle rebalancer address\r\n  @param _multisig The multisig account to transfer ownership to after contract initialised\r\n  @param _initialDepositTokens The initial tokens to register with the fee deposit\r\n   */\r\n  constructor (\r\n    address _weth,\r\n    address _feeTreasuryAddress,\r\n    address _idleRebalancer,\r\n    address _multisig,\r\n    address[] memory _initialDepositTokens\r\n  ) public {\r\n    require(_weth != address(0), \"WETH cannot be the 0 address\");\r\n    require(_feeTreasuryAddress != address(0), \"Fee Treasury cannot be 0 address\");\r\n    require(_idleRebalancer != address(0), \"Rebalancer cannot be 0 address\");\r\n    require(_multisig != address(0), \"Multisig cannot be 0 address\");\r\n\r\n    require(_initialDepositTokens.length <= MAX_NUM_FEE_TOKENS);\r\n    \r\n    _setupRole(DEFAULT_ADMIN_ROLE, _multisig); // setup multisig as admin\r\n    _setupRole(WHITELISTED, _multisig); // setup multisig as whitelisted address\r\n    _setupRole(WHITELISTED, _idleRebalancer); // setup multisig as whitelisted address\r\n\r\n    // configure weth address and ERC20 interface\r\n    weth = _weth;\r\n\r\n    allocations = new uint256[](3); // setup fee split ratio\r\n    allocations[0] = 80000;\r\n    allocations[1] = 15000;\r\n    allocations[2] = 5000;\r\n\r\n    beneficiaries = new address[](3); // setup beneficiaries\r\n    beneficiaries[1] = _feeTreasuryAddress; // setup fee treasury address\r\n    beneficiaries[2] = _idleRebalancer; // setup fee treasury address\r\n\r\n    address _depositToken;\r\n    for (uint256 index = 0; index < _initialDepositTokens.length; index++) {\r\n      _depositToken = _initialDepositTokens[index];\r\n      require(_depositToken != address(0), \"Token cannot be 0 address\");\r\n      require(_depositToken != _weth, \"WETH not supported\"); // There is no WETH -> WETH pool in uniswap\r\n      require(depositTokens.contains(_depositToken) == false, \"Already exists\");\r\n\r\n      IERC20(_depositToken).safeIncreaseAllowance(address(uniswapRouterV2), type(uint256).max); // max approval\r\n      depositTokens.add(_depositToken);\r\n    }\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Converts all registered fee tokens to WETH and deposits to\r\n          fee treasury and smart treasury based on split allocations.\r\n  @dev The fees are swaped using Uniswap simple route. E.g. Token -> WETH.\r\n   */\r\n  function deposit(\r\n    bool[] memory _depositTokensEnabled,\r\n    uint256[] memory _minTokenOut,\r\n    uint256 _minPoolAmountOut\r\n  ) public override smartTreasurySet onlyWhitelisted {\r\n    _deposit(_depositTokensEnabled, _minTokenOut, _minPoolAmountOut);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @dev implements deposit()\r\n   */\r\n  function _deposit(\r\n    bool[] memory _depositTokensEnabled,\r\n    uint256[] memory _minTokenOut,\r\n    uint256 _minPoolAmountOut\r\n  ) internal {\r\n    uint256 counter = depositTokens.length();\r\n    require(_depositTokensEnabled.length == counter, \"Invalid length\");\r\n    require(_minTokenOut.length == counter, \"Invalid length\");\r\n\r\n    uint256 _currentBalance;\r\n    IERC20 _tokenInterface;\r\n\r\n    uint256 wethBalance;\r\n\r\n    address[] memory path = new address[](2);\r\n    path[1] = weth; // output will always be weth\r\n    \r\n    // iterate through all registered deposit tokens\r\n    for (uint256 index = 0; index < counter; index++) {\r\n      if (_depositTokensEnabled[index] == false) {continue;}\r\n\r\n      _tokenInterface = IERC20(depositTokens.at(index));\r\n\r\n      _currentBalance = _tokenInterface.balanceOf(address(this));\r\n      \r\n      // Only swap if balance > 0\r\n      if (_currentBalance > 0) {\r\n        // create simple route; token->WETH\r\n        \r\n        path[0] = address(_tokenInterface);\r\n        \r\n        // swap token\r\n        uniswapRouterV2.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n          _currentBalance,\r\n          _minTokenOut[index], \r\n          path,\r\n          address(this),\r\n          block.timestamp.add(1800)\r\n        );\r\n      }\r\n    }\r\n\r\n    // deposit all swapped WETH + the already present weth balance\r\n    // to beneficiaries\r\n    // the beneficiary at index 0 is the smart treasury\r\n    wethBalance = IERC20(weth).balanceOf(address(this));\r\n    if (wethBalance > 0){\r\n      // feeBalances[0] is fee sent to smartTreasury\r\n      uint256[] memory feeBalances = _amountsFromAllocations(allocations, wethBalance);\r\n      uint256 smartTreasuryFee = feeBalances[0];\r\n\r\n      if (wethBalance.sub(smartTreasuryFee) > 0){\r\n          // NOTE: allocation starts at 1, NOT 0, since 0 is reserved for smart treasury\r\n          for (uint256 a_index = 1; a_index < allocations.length; a_index++){\r\n            IERC20(weth).safeTransfer(beneficiaries[a_index], feeBalances[a_index]);\r\n          }\r\n        }\r\n\r\n      if (smartTreasuryFee > 0) {\r\n        ConfigurableRightsPool crp = ConfigurableRightsPool(beneficiaries[0]); // the smart treasury is at index 0\r\n        crp.joinswapExternAmountIn(weth, smartTreasuryFee, _minPoolAmountOut);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Sets the split allocations of fees to send to fee beneficiaries\r\n  @dev The split allocations must sum to 100000.\r\n  @dev Before the split allocation is updated internally a call to `deposit()` is made\r\n       such that all fee accrued using the previous allocations.\r\n  @dev smartTreasury must be set for this to be called.\r\n  @param _allocations The updated split ratio.\r\n   */\r\n  function setSplitAllocation(uint256[] calldata _allocations) external override smartTreasurySet onlyAdmin {\r\n    _depositAllTokens();\r\n\r\n    _setSplitAllocation(_allocations);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Internal function to sets the split allocations of fees to send to fee beneficiaries\r\n  @dev The split allocations must sum to 100000.\r\n  @dev smartTreasury must be set for this to be called.\r\n  @param _allocations The updated split ratio.\r\n   */\r\n  function _setSplitAllocation(uint256[] memory _allocations) internal {\r\n    require(_allocations.length == beneficiaries.length, \"Invalid length\");\r\n    \r\n    uint256 sum=0;\r\n    for (uint256 i=0; i<_allocations.length; i++) {\r\n      sum = sum.add(_allocations[i]);\r\n    }\r\n\r\n    require(sum == FULL_ALLOC, \"Ratio does not equal 100000\");\r\n\r\n    allocations = _allocations;\r\n  }\r\n\r\n  /**\r\n  @author Andrea @ idle.finance\r\n  @notice Helper function to deposit all tokens\r\n   */\r\n  function _depositAllTokens() internal {\r\n    uint256 numTokens = depositTokens.length();\r\n    bool[] memory depositTokensEnabled = new bool[](numTokens);\r\n    uint256[] memory minTokenOut = new uint256[](numTokens);\r\n\r\n    for (uint256 i = 0; i < numTokens; i++) {\r\n      depositTokensEnabled[i] = true;\r\n      minTokenOut[i] = 1;\r\n    }\r\n\r\n    _deposit(depositTokensEnabled, minTokenOut, 1);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Adds an address as a beneficiary to the idle fees\r\n  @dev The new beneficiary will be pushed to the end of the beneficiaries array.\r\n  The new allocations must include the new beneficiary\r\n  @dev There is a maximum of 5 beneficiaries which can be registered with the fee collector\r\n  @param _newBeneficiary The new beneficiary to add\r\n  @param _newAllocation The new allocation of fees including the new beneficiary\r\n   */\r\n  function addBeneficiaryAddress(address _newBeneficiary, uint256[] calldata _newAllocation) external override smartTreasurySet onlyAdmin {\r\n    require(beneficiaries.length < MAX_BENEFICIARIES, \"Max beneficiaries\");\r\n    require(_newBeneficiary!=address(0), \"beneficiary cannot be 0 address\");\r\n\r\n    for (uint256 i = 0; i < beneficiaries.length; i++) {\r\n      require(beneficiaries[i] != _newBeneficiary, \"Duplicate beneficiary\");\r\n    }\r\n\r\n    _depositAllTokens();\r\n\r\n    beneficiaries.push(_newBeneficiary);\r\n\r\n    _setSplitAllocation(_newAllocation);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice removes a beneficiary at a given index.\r\n  @notice WARNING: when using this method be very careful to note the new allocations\r\n  The beneficiary at the LAST index, will be replaced with the beneficiary at `_index`.\r\n  The new allocations need to reflect this updated array.\r\n\r\n  eg.\r\n  if beneficiaries = [a, b, c, d]\r\n  and removeBeneficiaryAt(1, [...]) is called\r\n\r\n  the final beneficiaries array will be\r\n  [a, d, c]\r\n  `_newAllocations` should be based off of this final array.\r\n\r\n  @dev Cannot remove beneficiary past MIN_BENEFICIARIES. set to 2\r\n  @dev Cannot replace the smart treasury beneficiary at index 0\r\n  @param _index The index of the beneficiary to remove\r\n  @param _newAllocation The new allocation of fees removing the beneficiary. NOTE !! The order of beneficiaries will change !!\r\n   */\r\n  function removeBeneficiaryAt(uint256 _index, uint256[] calldata _newAllocation) external override smartTreasurySet onlyAdmin {\r\n    require(_index >= 1, \"Invalid beneficiary to remove\");\r\n    require(_index < beneficiaries.length, \"Out of range\");\r\n    require(beneficiaries.length > MIN_BENEFICIARIES, \"Min beneficiaries\");\r\n    \r\n    _depositAllTokens();\r\n\r\n    // replace beneficiary with index with final beneficiary, and call pop\r\n    beneficiaries[_index] = beneficiaries[beneficiaries.length-1];\r\n    beneficiaries.pop();\r\n    \r\n    // NOTE THE ORDER OF ALLOCATIONS\r\n    _setSplitAllocation(_newAllocation);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice replaces a beneficiary at a given index with a new one\r\n  @notice a new allocation must be passed for this method\r\n  @dev Cannot replace the smart treasury beneficiary at index 0\r\n  @param _index The index of the beneficiary to replace\r\n  @param _newBeneficiary The new beneficiary address\r\n  @param _newAllocation The new allocation of fees\r\n  */\r\n  function replaceBeneficiaryAt(uint256 _index, address _newBeneficiary, uint256[] calldata _newAllocation) external override smartTreasurySet onlyAdmin {\r\n    require(_index >= 1, \"Invalid beneficiary to remove\");\r\n    require(_newBeneficiary!=address(0), \"Beneficiary cannot be 0 address\");\r\n\r\n    for (uint256 i = 0; i < beneficiaries.length; i++) {\r\n      require(beneficiaries[i] != _newBeneficiary, \"Duplicate beneficiary\");\r\n    }\r\n\r\n    _depositAllTokens();\r\n    \r\n    beneficiaries[_index] = _newBeneficiary;\r\n\r\n    _setSplitAllocation(_newAllocation);\r\n  }\r\n  \r\n  /**\r\n  @author Asaf Silman\r\n  @notice Sets the smart treasury address.\r\n  @dev This needs to be called atleast once to properly initialise the contract\r\n  @dev Sets maximum approval for WETH to the new smart Treasury\r\n  @dev The smart treasury address cannot be the 0 address.\r\n  @param _smartTreasuryAddress The new smart treasury address\r\n   */\r\n  function setSmartTreasuryAddress(address _smartTreasuryAddress) external override onlyAdmin {\r\n    require(_smartTreasuryAddress!=address(0), \"Smart treasury cannot be 0 address\");\r\n\r\n    // When contract is initialised, the smart treasury address is not yet set\r\n    // Only call change allowance to 0 if previous smartTreasury was not the 0 address.\r\n    if (beneficiaries[0] != address(0)) {\r\n      IERC20(weth).safeApprove(beneficiaries[0], 0); // set approval for previous fee address to 0\r\n    }\r\n    // max approval for new smartTreasuryAddress\r\n    IERC20(weth).safeIncreaseAllowance(_smartTreasuryAddress, type(uint256).max);\r\n    beneficiaries[0] = _smartTreasuryAddress;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Gives an address the WHITELISTED role. Used for calling `deposit()`.\r\n  @dev Can only be called by admin.\r\n  @param _addressToAdd The address to grant the role.\r\n   */\r\n  function addAddressToWhiteList(address _addressToAdd) external override onlyAdmin{\r\n    grantRole(WHITELISTED, _addressToAdd);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Removed an address from whitelist.\r\n  @dev Can only be called by admin\r\n  @param _addressToRemove The address to revoke the WHITELISTED role.\r\n   */\r\n  function removeAddressFromWhiteList(address _addressToRemove) external override onlyAdmin {\r\n    revokeRole(WHITELISTED, _addressToRemove);\r\n  }\r\n    \r\n  /**\r\n  @author Asaf Silman\r\n  @notice Registers a fee token to the fee collecter\r\n  @dev There is a maximum of 15 fee tokens than can be registered.\r\n  @dev WETH cannot be accepted as a fee token.\r\n  @dev The token must be a complient ERC20 token.\r\n  @dev The fee token is approved for the uniswap router\r\n  @param _tokenAddress The token address to register\r\n   */\r\n  function registerTokenToDepositList(address _tokenAddress) external override onlyAdmin {\r\n    require(depositTokens.length() < MAX_NUM_FEE_TOKENS, \"Too many tokens\");\r\n    require(_tokenAddress != address(0), \"Token cannot be 0 address\");\r\n    require(_tokenAddress != weth, \"WETH not supported\"); // There is no WETH -> WETH pool in uniswap\r\n    require(depositTokens.contains(_tokenAddress) == false, \"Already exists\");\r\n\r\n    IERC20(_tokenAddress).safeIncreaseAllowance(address(uniswapRouterV2), type(uint256).max); // max approval\r\n    depositTokens.add(_tokenAddress);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Removed a fee token from the fee collector.\r\n  @dev Resets uniswap approval to 0.\r\n  @param _tokenAddress The fee token address to remove.\r\n   */\r\n  function removeTokenFromDepositList(address _tokenAddress) external override onlyAdmin {\r\n    IERC20(_tokenAddress).safeApprove(address(uniswapRouterV2), 0); // 0 approval for uniswap\r\n    depositTokens.remove(_tokenAddress);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Withdraws a arbitrarty ERC20 token from feeCollector to an arbitrary address.\r\n  @param _token The ERC20 token address.\r\n  @param _toAddress The destination address.\r\n  @param _amount The amount to transfer.\r\n   */\r\n  function withdraw(address _token, address _toAddress, uint256 _amount) external override onlyAdmin {\r\n    IERC20(_token).safeTransfer(_toAddress, _amount);\r\n  }\r\n\r\n  /**\r\n   * Copied from idle.finance IdleTokenGovernance.sol\r\n   *\r\n   * Calculate amounts from percentage allocations (100000 => 100%)\r\n   * @author idle.finance\r\n   * @param _allocations : token allocations percentages\r\n   * @param total : total amount\r\n   * @return newAmounts : array with amounts\r\n   */\r\n  function _amountsFromAllocations(uint256[] memory _allocations, uint256 total) internal pure returns (uint256[] memory newAmounts) {\r\n    newAmounts = new uint256[](_allocations.length);\r\n    uint256 currBalance;\r\n    uint256 allocatedBalance;\r\n\r\n    for (uint256 i = 0; i < _allocations.length; i++) {\r\n      if (i == _allocations.length - 1) {\r\n        newAmounts[i] = total.sub(allocatedBalance);\r\n      } else {\r\n        currBalance = total.mul(_allocations[i]).div(FULL_ALLOC);\r\n        allocatedBalance = allocatedBalance.add(currBalance);\r\n        newAmounts[i] = currBalance;\r\n      }\r\n    }\r\n    return newAmounts;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Exchanges balancer pool token for the underlying assets and withdraws\r\n  @param _toAddress The address to send the underlying tokens to\r\n  @param _amount The underlying amount of balancer pool tokens to exchange\r\n  */\r\n  function withdrawUnderlying(address _toAddress, uint256 _amount, uint256[] calldata minTokenOut) external override smartTreasurySet onlyAdmin{\r\n    ConfigurableRightsPool crp = ConfigurableRightsPool(beneficiaries[0]);\r\n    BPool smartTreasuryBPool = crp.bPool();\r\n\r\n    uint256 numTokensInPool = smartTreasuryBPool.getNumTokens();\r\n    require(minTokenOut.length == numTokensInPool, \"Invalid length\");\r\n\r\n\r\n    address[] memory poolTokens = smartTreasuryBPool.getCurrentTokens();\r\n    uint256[] memory feeCollectorTokenBalances = new uint256[](numTokensInPool);\r\n\r\n    for (uint256 i=0; i<poolTokens.length; i++) {\r\n      // get the balance of a poolToken of the fee collector\r\n      feeCollectorTokenBalances[i] = IERC20(poolTokens[i]).balanceOf(address(this));\r\n    }\r\n\r\n    // tokens are exitted to feeCollector\r\n    crp.exitPool(_amount, minTokenOut);\r\n\r\n    IERC20 tokenInterface;\r\n    uint256 tokenBalanceToTransfer;\r\n    for (uint256 i=0; i<poolTokens.length; i++) {\r\n      tokenInterface = IERC20(poolTokens[i]);\r\n\r\n      tokenBalanceToTransfer = tokenInterface.balanceOf(address(this)).sub( // get the new balance of token\r\n        feeCollectorTokenBalances[i] // subtract previous balance\r\n      );\r\n\r\n      if (tokenBalanceToTransfer > 0) {\r\n        // transfer to `_toAddress` [newBalance - oldBalance]\r\n        tokenInterface.safeTransfer(\r\n          _toAddress,\r\n          tokenBalanceToTransfer\r\n        ); // transfer to `_toAddress`\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Replaces the current admin with a new admin.\r\n  @dev The current admin rights are revoked, and given the new address.\r\n  @dev The caller must be admin (see onlyAdmin modifier).\r\n  @param _newAdmin The new admin address.\r\n   */\r\n  function replaceAdmin(address _newAdmin) external override onlyAdmin {\r\n    grantRole(DEFAULT_ADMIN_ROLE, _newAdmin);\r\n    revokeRole(DEFAULT_ADMIN_ROLE, msg.sender); // caller must be admin\r\n  }\r\n\r\n  function getSplitAllocation() external view returns (uint256[] memory) { return (allocations); }\r\n\r\n  function isAddressWhitelisted(address _address) external view returns (bool) {return (hasRole(WHITELISTED, _address)); }\r\n  function isAddressAdmin(address _address) external view returns (bool) {return (hasRole(DEFAULT_ADMIN_ROLE, _address)); }\r\n\r\n  function getBeneficiaries() external view returns (address[] memory) { return (beneficiaries); }\r\n  function getSmartTreasuryAddress() external view returns (address) { return (beneficiaries[0]); }\r\n\r\n  function isTokenInDespositList(address _tokenAddress) external view returns (bool) {return (depositTokens.contains(_tokenAddress)); }\r\n  function getNumTokensInDepositList() external view returns (uint256) {return (depositTokens.length());}\r\n\r\n  function getDepositTokens() external view returns (address[] memory) {\r\n    uint256 numTokens = depositTokens.length();\r\n\r\n    address[] memory depositTokenList = new address[](numTokens);\r\n    for (uint256 index = 0; index < numTokens; index++) {\r\n      depositTokenList[index] = depositTokens.at(index);\r\n    }\r\n    return (depositTokenList);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idleRebalancer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialDepositTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FULL_ALLOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BENEFICIARIES\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUM_FEE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BENEFICIARIES\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTED\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToAdd\",\"type\":\"address\"}],\"name\":\"addAddressToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_newAllocation\",\"type\":\"uint256[]\"}],\"name\":\"addBeneficiaryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"_depositTokensEnabled\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minTokenOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiaries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumTokensInDepositList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSplitAllocation\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isTokenInDespositList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"registerTokenToDepositList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_newAllocation\",\"type\":\"uint256[]\"}],\"name\":\"removeBeneficiaryAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTokenFromDepositList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"replaceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_newAllocation\",\"type\":\"uint256[]\"}],\"name\":\"replaceBeneficiaryAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartTreasuryAddress\",\"type\":\"address\"}],\"name\":\"setSmartTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"setSplitAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minTokenOut\",\"type\":\"uint256[]\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeeCollector","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000069a62c24f16d4914a48919613e8ee330641bcb94000000000000000000000000b3c8e5534f0063545cbbb7ce86854bf42db8872b000000000000000000000000e8ea8bae250028a8709a3841e0ae1a44820d677b00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000070000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000085d4780b73119b644ae5ecd22b37600000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f510000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5b898a15cb0a34155ddffe2fdf6e10a8ec694f7105b1f2a452c3125868cb88d6"}]}