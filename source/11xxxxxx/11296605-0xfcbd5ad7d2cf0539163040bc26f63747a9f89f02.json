{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.3 https://hardhat.org\r\n\r\n// File contracts/utils/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: No License\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @title Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function symbol() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IProtocolFactory.sol\r\n\r\n// SPDX-License-Identifier: No License\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev ProtocolFactory contract interface. See {ProtocolFactory}.\r\n * @author crypto-pumpkin@github\r\n */\r\ninterface IProtocolFactory {\r\n  /// @notice emit when a new protocol is supported in COVER\r\n  event ProtocolInitiation(address protocolAddress);\r\n\r\n  function getAllProtocolAddresses() external view returns (address[] memory);\r\n  function getRedeemFees() external view returns (uint16 _numerator, uint16 _denominator);\r\n  function redeemFeeNumerator() external view returns (uint16);\r\n  function redeemFeeDenominator() external view returns (uint16);\r\n  function protocolImplementation() external view returns (address);\r\n  function coverImplementation() external view returns (address);\r\n  function coverERC20Implementation() external view returns (address);\r\n  function treasury() external view returns (address);\r\n  function governance() external view returns (address);\r\n  function claimManager() external view returns (address);\r\n  function protocols(bytes32 _protocolName) external view returns (address);\r\n\r\n  function getProtocolsLength() external view returns (uint256);\r\n  function getProtocolNameAndAddress(uint256 _index) external view returns (bytes32, address);\r\n  /// @notice return contract address, the contract may not be deployed yet\r\n  function getProtocolAddress(bytes32 _name) external view returns (address);\r\n  /// @notice return contract address, the contract may not be deployed yet\r\n  function getCoverAddress(bytes32 _protocolName, uint48 _timestamp, address _collateral, uint256 _claimNonce) external view returns (address);\r\n  /// @notice return contract address, the contract may not be deployed yet\r\n  function getCovTokenAddress(bytes32 _protocolName, uint48 _timestamp, address _collateral, uint256 _claimNonce, bool _isClaimCovToken) external view returns (address);\r\n\r\n  /// @notice access restriction - owner (dev)\r\n  /// @dev update this will only affect contracts deployed after\r\n  function updateProtocolImplementation(address _newImplementation) external returns (bool);\r\n  /// @dev update this will only affect contracts deployed after\r\n  function updateCoverImplementation(address _newImplementation) external returns (bool);\r\n  /// @dev update this will only affect contracts deployed after\r\n  function updateCoverERC20Implementation(address _newImplementation) external returns (bool);\r\n  function assignClaimManager(address _address) external returns (bool);\r\n  function addProtocol(\r\n    bytes32 _name,\r\n    bool _active,\r\n    address _collateral,\r\n    uint48[] calldata _timestamps,\r\n    bytes32[] calldata _timestampNames\r\n  ) external returns (address);\r\n\r\n  /// @notice access restriction - governance\r\n  function updateClaimManager(address _address) external returns (bool);\r\n  function updateFees(uint16 _redeemFeeNumerator, uint16 _redeemFeeDenominator) external returns (bool);\r\n  function updateGovernance(address _address) external returns (bool);\r\n  function updateTreasury(address _address) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IProtocol.sol\r\n\r\n// SPDX-License-Identifier: No License\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Protocol contract interface. See {Protocol}.\r\n * @author crypto-pumpkin@github\r\n */\r\ninterface IProtocol {\r\n  /// @notice emit when a claim against the protocol is accepted\r\n  event ClaimAccepted(uint256 newClaimNonce);\r\n\r\n  function getProtocolDetails()\r\n    external view returns (\r\n      bytes32 _name,\r\n      bool _active,\r\n      uint256 _claimNonce,\r\n      uint256 _claimRedeemDelay,\r\n      uint256 _noclaimRedeemDelay,\r\n      address[] memory _collaterals,\r\n      uint48[] memory _expirationTimestamps,\r\n      address[] memory _allCovers,\r\n      address[] memory _allActiveCovers\r\n    );\r\n  function active() external view returns (bool);\r\n  function name() external view returns (bytes32);\r\n  function claimNonce() external view returns (uint256);\r\n  /// @notice delay # of seconds for redeem with accepted claim, redeemCollateral is not affected\r\n  function claimRedeemDelay() external view returns (uint256);\r\n  /// @notice delay # of seconds for redeem without accepted claim, redeemCollateral is not affected\r\n  function noclaimRedeemDelay() external view returns (uint256);\r\n  function activeCovers(uint256 _index) external view returns (address);\r\n  function claimDetails(uint256 _claimNonce) external view returns (uint16 _payoutNumerator, uint16 _payoutDenominator, uint48 _incidentTimestamp, uint48 _timestamp);\r\n  function collateralStatusMap(address _collateral) external view returns (uint8 _status);\r\n  function expirationTimestampMap(uint48 _expirationTimestamp) external view returns (bytes32 _name, uint8 _status);\r\n  function coverMap(address _collateral, uint48 _expirationTimestamp) external view returns (address);\r\n\r\n  function collaterals(uint256 _index) external view returns (address);\r\n  function collateralsLength() external view returns (uint256);\r\n  function expirationTimestamps(uint256 _index) external view returns (uint48);\r\n  function expirationTimestampsLength() external view returns (uint256);\r\n  function activeCoversLength() external view returns (uint256);\r\n  function claimsLength() external view returns (uint256);\r\n  function addCover(address _collateral, uint48 _timestamp, uint256 _amount)\r\n    external returns (bool);\r\n\r\n  /// @notice access restriction - claimManager\r\n  function enactClaim(uint16 _payoutNumerator, uint16 _payoutDenominator, uint48 _incidentTimestamp, uint256 _protocolNonce) external returns (bool);\r\n\r\n  /// @notice access restriction - dev\r\n  function setActive(bool _active) external returns (bool);\r\n  function updateExpirationTimestamp(uint48 _expirationTimestamp, bytes32 _expirationTimestampName, uint8 _status) external returns (bool);\r\n  function updateCollateral(address _collateral, uint8 _status) external returns (bool);\r\n\r\n  /// @notice access restriction - governance\r\n  function updateClaimRedeemDelay(uint256 _claimRedeemDelay) external returns (bool);\r\n  function updateNoclaimRedeemDelay(uint256 _noclaimRedeemDelay) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBalancerPool.sol\r\n\r\n// SPDX-License-Identifier: No License\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface IBalancerPool {\r\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\r\n}\r\n\r\n\r\n// File contracts/Minter.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.6;\r\n\r\ncontract Arbys is Ownable {\r\n    IProtocolFactory public factory;\r\n    IERC20 public daiToken;\r\n    uint48 public expirationTime;\r\n\r\n    // Initialize, called once\r\n    constructor (\r\n      IProtocolFactory _factory,\r\n      IERC20 daiToken_\r\n    )\r\n      public Ownable()\r\n    {\r\n      factory = _factory;\r\n      daiToken = daiToken_;\r\n    }\r\n\r\n    function arbitrageSell(IProtocol _protocol, IBalancerPool _claimPool, IBalancerPool _noclaimPool, uint48 _expiration, uint _daiAmount) external {\r\n      daiToken.transferFrom(msg.sender, address(this), _daiAmount);\r\n      if (daiToken.allowance(address(this), address(_protocol)) < _daiAmount) {\r\n        daiToken.approve(address(_protocol), _daiAmount);\r\n      }\r\n      _protocol.addCover(address(daiToken), _expiration, _daiAmount);\r\n\r\n      address noclaimTokenAddr = factory.getCovTokenAddress(_protocol.name(), _expiration, address(daiToken), _protocol.claimNonce(), false);\r\n      address claimTokenAddr = factory.getCovTokenAddress(_protocol.name(), _expiration, address(daiToken), _protocol.claimNonce(), true);\r\n\r\n      _swapTokenForDai(_noclaimPool, IERC20(noclaimTokenAddr), _daiAmount);\r\n      _swapTokenForDai(_claimPool, IERC20(claimTokenAddr), _daiAmount);\r\n\r\n      uint256 bal = daiToken.balanceOf(address(this));\r\n      require(bal > _daiAmount, \"No arbys\");\r\n      require(daiToken.transfer(msg.sender, bal), \"ERR_TRANSFER_FAILED\");\r\n    }\r\n\r\n    function _swapTokenForDai(IBalancerPool _bPool, IERC20 token, uint _sellAmount) private {\r\n        if (token.allowance(address(this), address(_bPool)) < _sellAmount) {\r\n          token.approve(address(_bPool), _sellAmount);\r\n        }\r\n        IBalancerPool(_bPool).swapExactAmountIn(\r\n            address(token),\r\n            _sellAmount,\r\n            address(daiToken),\r\n            0, // minAmountOut, set to 0 -> sell no matter how low the price of CLAIM tokens are\r\n            2**256 - 1 // maxPrice, set to max -> accept any swap prices\r\n        );\r\n    }\r\n\r\n    function destroy() external onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IProtocolFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"daiToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"contract IBalancerPool\",\"name\":\"_claimPool\",\"type\":\"address\"},{\"internalType\":\"contract IBalancerPool\",\"name\":\"_noclaimPool\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"arbitrageSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirationTime\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IProtocolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Arbys","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000edfc81bf63527337cd2193925f9c0cf2d537acca0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://de3bf326aaa0a7ee1ada5a980f7f7ba32c4a25469a4cd300f7a81e1ae3329d4a"}]}