{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    // safeApprove should only be called when setting an initial allowance, \r\n    // or when resetting it to zero. To increase and decrease it, use \r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n    require(token.approve(spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period.\r\n *\r\n * Note you do not want to transfer tokens you have withdrawn back to this contract. This will\r\n * result in some fraction of your transferred tokens being locked up again.\r\n *\r\n * Code taken from OpenZeppelin/openzeppelin-solidity at commit 4115686b4f8c1abf29f1f855eb15308076159959.\r\n * (Revocation options removed by Reserve.)\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  event TokensReleased(address token, uint256 amount);\r\n\r\n  // beneficiary of tokens after they are released\r\n  address private _beneficiary;\r\n\r\n  uint256 private _cliff;\r\n  uint256 private _start;\r\n  uint256 private _duration;\r\n\r\n  mapping (address => uint256) private _released;\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n   * of the balance will have vested.\r\n   * @param beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param start the time (as Unix time) at which point vesting starts\r\n   * @param duration duration in seconds of the period in which the tokens will vest\r\n   */\r\n  constructor(\r\n    address beneficiary,\r\n    uint256 start,\r\n    uint256 cliffDuration,\r\n    uint256 duration\r\n  )\r\n    public\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(cliffDuration <= duration);\r\n    require(duration > 0);\r\n    require(start.add(duration) > block.timestamp);\r\n\r\n    _beneficiary = beneficiary;\r\n    _duration = duration;\r\n    _cliff = start.add(cliffDuration);\r\n    _start = start;\r\n  }\r\n\r\n  /**\r\n   * @return the beneficiary of the tokens.\r\n   */\r\n  function beneficiary() public view returns(address) {\r\n    return _beneficiary;\r\n  }\r\n\r\n  /**\r\n   * @return the cliff time of the token vesting.\r\n   */\r\n  function cliff() public view returns(uint256) {\r\n    return _cliff;\r\n  }\r\n\r\n  /**\r\n   * @return the start time of the token vesting.\r\n   */\r\n  function start() public view returns(uint256) {\r\n    return _start;\r\n  }\r\n\r\n  /**\r\n   * @return the duration of the token vesting.\r\n   */\r\n  function duration() public view returns(uint256) {\r\n    return _duration;\r\n  }\r\n\r\n  /**\r\n   * @return the amount of the token released.\r\n   */\r\n  function released(address token) public view returns(uint256) {\r\n    return _released[token];\r\n  }\r\n\r\n  /**\r\n   * @return the amount of token that can be released at the current block timestamp.\r\n   */\r\n  function releasable(address token) public view returns(uint256) {\r\n    return _releasableAmount(IERC20(token));\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(IERC20 token) public {\r\n    uint256 unreleased = _releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    _released[token] = _released[token].add(unreleased);\r\n\r\n    token.safeTransfer(_beneficiary, unreleased);\r\n\r\n    emit TokensReleased(token, unreleased);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function _releasableAmount(IERC20 token) private view returns (uint256) {\r\n    return _vestedAmount(token).sub(_released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function _vestedAmount(IERC20 token) private view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(_released[token]);\r\n\r\n    if (block.timestamp < _cliff) {\r\n      return 0;\r\n    } else if (block.timestamp >= _start.add(_duration)) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title TokenVestingFactory\r\n * @dev A factory to deploy instances of TokenVesting for RSR, nothing more. \r\n */\r\ncontract TokenVestingFactory  {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  event TokenVestingDeployed(address indexed location, address indexed recipient);\r\n\r\n\r\n  constructor() public {}\r\n\r\n  function deployVestingContract(address recipient, uint256 startVestingInThisManySeconds, uint256 vestForThisManySeconds) public returns (address) {\r\n    TokenVesting vesting = new TokenVesting(\r\n        recipient, \r\n        block.timestamp, \r\n        startVestingInThisManySeconds, \r\n        vestForThisManySeconds\r\n    );\r\n\r\n    emit TokenVestingDeployed(address(vesting), recipient);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"startVestingInThisManySeconds\",\"type\":\"uint256\"},{\"name\":\"vestForThisManySeconds\",\"type\":\"uint256\"}],\"name\":\"deployVestingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"location\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokenVestingDeployed\",\"type\":\"event\"}]","ContractName":"TokenVestingFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fc34c7672dd2b705f1a7fa68c80905b7c08ca08ad9eb8e338771fc1352beb4ec"}]}