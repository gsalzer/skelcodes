{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * \r\n * Buccaneer Farm Contract\r\n                                      ..',;:clloooooollc:;,'..                                      \r\n                                .':ldk0XNWWWNKOkxxxxkOKXWWWNX0kdl:'.                                \r\n                            .;okKNWMMMMMNOo;..        ..;lkXMMMMMWNKko:.                            \r\n                        .,oOXWMMMMMMMMXd,                  'oKWMMMMMMMWXOo;.                        \r\n                     .;d0WMMMMMMMMMMWk'                      .xNMMMMMMMMMMWKd;.                     \r\n                   'l0NMMMMMMMMMMMMWx.                        .oNMMMMMMMMMMMMW0o'                   \r\n                 ,xXMMMMMMMMMMMMMMM0,                          .OMMMMMMMMMMMMMMMXx;                 \r\n               ,xNMMMMMMMMMMMMMMMMMx.                           oWMMMMMMMMMMMMMMMMNk;               \r\n             'dXMMMMMMMMMMMMMMMMMMMk.                          .dWMMMMMMMMMMMMMMMMMMNx'             \r\n           .cKMMMMMMMMMMMMMMMMMMMMMk.                          .dWMMMMMMMMMMMMMMMMMMMMXl.           \r\n          'xWMMMMMMMMMMMMMMMMMMMMMNl                            :XMMMMMMMMMMMMMMMMMMMMMWk'          \r\n         ;0WMMMMMMMMMMMMMMMMMMMMMMWd.                           lNMMMMMMMMMMMMMMMMMMMMMMMK:         \r\n        cXMWNWMMMMMMMMMMMMMMMMMMMMMO..:c;.                .,cc..xMMMMMMMMMMMMMMMMMMMMMWWWMXc        \r\n       cXMMWNX00XNWMMMMMMMMMMMMMMMMk.'OMWXOdc,.      .':dOXWMK,.dWMMMMMMMMMMMMMMMMNXKKXNWMMNl       \r\n      :XMMMMMMN0kxxOKNWMMMMMMMMMMMMk. ,dO0KXN0c.     :0NXK0Ox;  oWMMMMMMMMMMMWNKOxxkKNMMMMMMXc      \r\n     ,0MMMMMMMMMWXOdllxOKNWMMMMMMMMNkc,. ...'.        .'... .,cxXMMMMMMMMWNKOxlldOXWMMMMMMMMMK;     \r\n    .kWMMMMMMMMMMMMWXko::lxO0XNWMMMMMMW0l.                .c0NMMMMMMWNX0Oxl::okXWMMMMMMMMMMMMMO.    \r\n    cNMMMMMMMMMMMMMMMMWKxc;;:lxk0KNWMMMMWo.               cNMMMMWNK0Oxl:;;cxKWMMMMMMMMMMMMMMMMNl    \r\n   .OMMMMMMMMMMMMMMMMMMMMN0d:,:dOOO00KXWWXl'............'c0WWXK00OOOd:,:d0NMMMMMMMMMMMMMMMMMMMM0'   \r\n   cNMMMMMMMMMMMMMMMMMMMMMMWNOocoOX0kxO0XNNXXXXKKKKKKKXXXNNXKOkkKXOocoONMMMMMMMMMMMMMMMMMMMMMMMNc   \r\n  .dMMMMMMMMMMMMMMMMMMMMMMMMMMWXkdoxxl;:loxkKNWMMMMMMWNKOxol::lxxddOXWMMMMMMMMMMMMMMMMMMMMMMMMMMx.  \r\n  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkkkd:....,:coxkkxol:,....:dkkOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0'  \r\n  '0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK00xc....'......'....ck0KXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,  \r\n  ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXx;'..........';xXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;  \r\n  ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0ko;...     ....;ok0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;  \r\n  '0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkdl;......',,'......;ldkKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,  \r\n  .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOxoc;'...,cdOXNNXOdc,...';coxOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO.  \r\n   oWMMMMMMMMMMMMMMMMMMMMMMMMMNKOxlc;,'';lx0XWMMMMMMMMWX0xl:'',;clxOKNMMMMMMMMMMMMMMMMMMMMMMMMMWd   \r\n   ;KMMMMMMMMMMMMMMMMMMMMMMWXOxl:,,,:okKNWMMMMMMMMMMMMMMMMWN0ko:,',:lxOXWMMMMMMMMMMMMMMMMMMMMMMX;   \r\n   .xWMMMMMMMMMMMMMMMMMMWX0dc:;;cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMNKkdc;;;cdOXWMMMMMMMMMMMMMMMMMMWx.   \r\n    ,KMMMMMMMMMMMMMMMWXOdc:cldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdl::cdOXWMMMMMMMMMMMMMMMX;    \r\n     lNMMMMMMMMMMMWXOdllox0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xolldOXWMMMMMMMMMMMWo.    \r\n     .xWMMMMMMMWX0xxxk0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0kxdx0XWMMMMMMMWk.     \r\n      .kWMMMWNK0O0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK0O0KNWMMMWO'      \r\n       .kWMWNXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXNWMWO'       \r\n        .xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk'        \r\n         .oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd.         \r\n           :0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK:           \r\n            .dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd.            \r\n              ,kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk;              \r\n                ;kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk;.               \r\n                  ,dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx;                  \r\n                    .cONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl.                    \r\n                       'lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOl'                       \r\n                          .:dOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOd:.                          \r\n                              .;lx0XNWMMMMMMMMMMMMMMMMMMMMMMMMMWX0xl:.                              \r\n                                   .,:coxkO0KXXNNNNNNXXK0Okxol:,..                                  \r\n                                           ..............                                           \r\n**/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * ERC thought to be used for UNI LP token\r\n */\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n * Essentially arrays of a specified type and length which require reconstituting the entire array for construction\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/MasterChef.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface tokenTumble {\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function transfer(address to, uint256 value) external;\r\n}\r\n\r\ninterface BuccV2 {\r\n    function displayUserCount(address userDisplay) external returns (uint256);\r\n    function specialTransfer(uint256 toIdentity, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function findUser(uint256 user) external returns (address);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n    /**\r\n     * Only purpose of Ownable is to set rates of emission manually.\r\n     * Re-intrancy errors and uniswap issues can cause emission rates to be played with.\r\n     * Transfering ownership to something automatic is plausible down the line, but not a goal.\r\n     * LP token remains in the hands of Uniswap safely.\r\n     **/\r\ncontract Sargasso is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 lastRewardBlock;  // Not relevant on initial setup, the tracer block\r\n        uint256 accBuccMultiplierEarned; // Accumulated BUCCs per share, times 1e12. Takes time to update at first.\r\n    }\r\n    \r\n\r\n    uint256 private fellowBuccaneers;\r\n    BuccV2 private buccTransfer;\r\n    tokenTumble private selectedTokentoTumble;\r\n    uint256 private contractTokens;\r\n    mapping (address => bool) private hasJoined;\r\n    mapping (address => bool) private userLock;\r\n    mapping (address => bool) private secondaryUserLock;\r\n    mapping (address => uint256) private ethAmount;\r\n    mapping (address => uint256) private subscription;\r\n    mapping (address => mapping(address => uint256)) private userSpecifiedTokenLock;\r\n    mapping (address => uint256) private totalTokensSpecifiedAddress;\r\n    mapping (address => address) private key;\r\n    mapping (address => bool) private hasKey;\r\n    mapping (address => bool) private isaKey;\r\n    mapping (address => address) private inverseLook;\r\n    uint256 private keylock = now;\r\n    uint256 private totalETH;\r\n    uint256 private ethDeposits;\r\n    uint256 private subscriptionFee = 0;\r\n    \r\n    // Dev address.\r\n    address private buccsAddress;\r\n    address private v2Address;\r\n    uint256 private bonusEndBlock;\r\n    uint256 private buccPerBlock;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) private userInfo;\r\n    // Total allocation points. Again, not relevant\r\n    uint256 private totalAllocPoint = 1;\r\n    uint256 private startBlock;\r\n    \r\n    \r\n    constructor(\r\n        address _devAddr,\r\n        address _v2Address,\r\n        uint256 _buccPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock\r\n    ) public {\r\n        buccsAddress = _devAddr;\r\n        v2Address = _v2Address;\r\n        buccPerBlock = _buccPerBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n        startBlock = _startBlock;\r\n    }\r\n    \r\n    // Setting up pools, likely sticking with one, so redudant \r\n    function add(IERC20 _lpToken, bool _withUpdate) public onlyOwner {\r\n        require(msg.sender == buccsAddress, \"You are not BUCC.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        //totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accBuccMultiplierEarned: 0\r\n        }));\r\n    }\r\n\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return bonusEndBlock.sub(_from).add(\r\n                _to.sub(bonusEndBlock)\r\n            );\r\n        }\r\n    }\r\n    \r\n    \r\n    function changeSubscriptionFee(uint256 changeSubscriptionFeeTo) public onlyOwner returns (bool) {\r\n        require(msg.sender == buccsAddress, \"You are not BUCC.\");\r\n        subscriptionFee = changeSubscriptionFeeTo;\r\n    }\r\n    \r\n    \r\n    function changev2Address(address updateAddress) public onlyOwner returns (bool) {\r\n        require(msg.sender == buccsAddress, \"You are not BUCC.\");\r\n        v2Address = updateAddress;\r\n    }\r\n    \r\n    function viewFellowBuccaneers() public view returns (uint256) {\r\n        return fellowBuccaneers;\r\n    }\r\n    \r\n    function viewContractTokens() public view returns (uint256) {\r\n        return contractTokens;\r\n    }\r\n    \r\n    function addContractTokens(uint256 amount) public {\r\n        buccTransfer = BuccV2(v2Address);\r\n        buccTransfer.transferFrom(msg.sender, address(this), amount);\r\n        contractTokens += amount;\r\n    }\r\n\r\n    // View function to see BUCC per individual\r\n    function pendingBucc(uint256 _pid) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        //buccc per share\r\n        uint256 accBuccMultiplierEarned = pool.accBuccMultiplierEarned;\r\n        //total supply\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            //used to calculate the in-between value of each block based on the multiplier \r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 buccReward = multiplier.mul(buccPerBlock);\r\n            accBuccMultiplierEarned = accBuccMultiplierEarned.add(buccReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accBuccMultiplierEarned).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n    \r\n    function isUser() public view returns (bool) {\r\n        return hasJoined[msg.sender];\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 buccReward = multiplier.mul(buccPerBlock);\r\n        pool.accBuccMultiplierEarned = pool.accBuccMultiplierEarned.add(buccReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n    \r\n    function buccperBlock(uint256 multiplicationFactor) public onlyOwner {\r\n        require(msg.sender == buccsAddress, \"You are not BUCC.\");\r\n        buccPerBlock = multiplicationFactor;\r\n    }\r\n    \r\n    function viewLPPerson(uint256 _pid) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        return user.amount;\r\n    }\r\n    \r\n    function deposit(uint256 _pid, uint256 input) public {\r\n        require(userLock[msg.sender] == false);\r\n        userLock[msg.sender] = true;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        //To withdraw rewards, covert send\r\n        if (user.amount > 0) {\r\n            uint256 collectRewards = user.amount.mul(pool.accBuccMultiplierEarned).div(1e12).sub(user.rewardDebt);\r\n            require(collectRewards <= contractTokens, \"Not enough tokens\");\r\n            secretBUCCTransfer(collectRewards);\r\n        }\r\n        if (hasJoined[msg.sender] == false) {\r\n            hasJoined[msg.sender] = true;\r\n            fellowBuccaneers += 1;\r\n        }\r\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), input);\r\n        user.amount = user.amount.add(input);\r\n        user.rewardDebt = user.amount.mul(pool.accBuccMultiplierEarned).div(1e12);\r\n        userLock[msg.sender] = false;\r\n    }\r\n    \r\n    \r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 input) public {\r\n        require(userLock[msg.sender] == false);\r\n        userLock[msg.sender] = true;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= input, \"withdraw: not good\");\r\n        //buccaneer related\r\n        hasJoined[msg.sender] = false;\r\n        fellowBuccaneers -= 1;\r\n        updatePool(_pid);\r\n        //transfer rewards, covert send\r\n        uint256 collectRewards = user.amount.mul(pool.accBuccMultiplierEarned).div(1e12).sub(user.rewardDebt);\r\n        require(collectRewards <= contractTokens, \"Not enough tokens\");\r\n        secretBUCCTransfer(collectRewards);\r\n        contractTokens -= collectRewards;\r\n        user.amount = user.amount.sub(input);\r\n        user.rewardDebt = user.amount.mul(pool.accBuccMultiplierEarned).div(1e12);\r\n        pool.lpToken.safeTransfer(address(msg.sender), input);\r\n        userLock[msg.sender] = false;\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        require(userLock[msg.sender] == false);\r\n        userLock[msg.sender] = true;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        hasJoined[msg.sender] = false;\r\n        fellowBuccaneers -= 1;\r\n        userLock[msg.sender] = false;\r\n    }\r\n    \r\n    function specialdeposit(uint256 _pid, uint256 userNum) public {\r\n        require(userLock[msg.sender] == false);\r\n        userLock[msg.sender] = true;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        //To withdraw rewards, covert send\r\n        if (user.amount > 0) {\r\n            uint256 collectRewards = user.amount.mul(pool.accBuccMultiplierEarned).div(1e12).sub(user.rewardDebt);\r\n            require(collectRewards <= contractTokens, \"Not enough tokens\");\r\n            sendtoRecipient(userNum, collectRewards);\r\n        }\r\n        //pool.lpToken.safeTransferFrom(address(msg.sender), address(this), input);\r\n        //user.amount = user.amount.add(input);\r\n        user.rewardDebt = user.amount.mul(pool.accBuccMultiplierEarned).div(1e12);\r\n        userLock[msg.sender] = false;\r\n    }\r\n    \r\n    \r\n    function sendtoRecipient(uint256 userNum, uint256 _amount) internal {\r\n        buccTransfer = BuccV2(v2Address);\r\n        uint256 buccBal = buccTransfer.balanceOf(address(this));\r\n        require(userNum != 0, \"Address not added to contract.\");\r\n        require(_amount < contractTokens, \"Not enough tokens\");\r\n        if (_amount > buccBal) {\r\n            buccTransfer.specialTransfer(userNum, buccBal);\r\n            contractTokens = 0;\r\n        } else {\r\n            buccTransfer.specialTransfer(userNum, _amount);\r\n            contractTokens -= _amount;\r\n        }\r\n    }\r\n\r\n    \r\n    function secretBUCCTransfer(uint256 _amount) internal {\r\n        buccTransfer = BuccV2(v2Address);\r\n        uint256 buccBal = buccTransfer.balanceOf(address(this));\r\n        uint256 userNum = buccTransfer.displayUserCount(msg.sender);\r\n        require(userNum != 0, \"Address not added to contract.\");\r\n        if (_amount > buccBal) {\r\n            buccTransfer.specialTransfer(userNum, buccBal);\r\n            contractTokens = 0;\r\n        } else {\r\n            buccTransfer.specialTransfer(userNum, _amount);\r\n            contractTokens -= _amount;\r\n        }\r\n    }\r\n\r\n    function dev(address _buccsAddress) public onlyOwner {\r\n        require(msg.sender == buccsAddress, \"You are not BUCC.\");\r\n        buccsAddress = _buccsAddress;\r\n    }\r\n\r\n    \r\n    function returnsubscriptionFee() public view returns (uint256) {\r\n        return subscriptionFee;\r\n    }\r\n    \r\n    function paySubscription() public {\r\n        require(secondaryUserLock[msg.sender] == false);\r\n        secondaryUserLock[msg.sender] = true;\r\n        buccTransfer = BuccV2(v2Address);\r\n        require(buccTransfer.transferFrom(msg.sender, address(this), subscriptionFee));\r\n        require(isaKey[msg.sender] == false);\r\n        contractTokens += subscriptionFee;\r\n        subscription[msg.sender] = now;\r\n        secondaryUserLock[msg.sender] = false;\r\n    }\r\n  \r\n    function checkSubscription() public view returns (bool) {\r\n        if (subscription[msg.sender] + 30 days > now) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    //sending eth after tumbling\r\n    function ETHsend(uint256 userAmount, uint256 userNum) public payable {\r\n        require(secondaryUserLock[msg.sender] == false);\r\n        secondaryUserLock[msg.sender] = true;\r\n        //check it can be sent\r\n        require(userAmount <= ethAmount[key[msg.sender]]);\r\n        require(userAmount > 1);\r\n        require(ethAmount[key[msg.sender]] > 1);\r\n        totalETH -= userAmount;\r\n        ethAmount[key[msg.sender]] -= userAmount;\r\n        buccTransfer = BuccV2(v2Address);\r\n        require(!KeyLock());\r\n        address payable lookUP = payable(buccTransfer.findUser(userNum));\r\n        require(lookUP != 0x0000000000000000000000000000000000000000, \"Address not added to contract.\");\r\n        keylock = now;\r\n        lookUP.transfer(userAmount);\r\n        buccTransfer.specialTransfer(userNum, 0);\r\n        secondaryUserLock[msg.sender] = false;\r\n    }\r\n    \r\n    function KeyLock() public view returns (bool) {\r\n        if (keylock > now - 3 seconds) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function addKey(uint256 userNum) public {\r\n        require(userNum % 1 == 0);\r\n        require(secondaryUserLock[msg.sender] == false);\r\n        secondaryUserLock[msg.sender] = true;\r\n        require(isaKey[msg.sender] == false);\r\n        require(userNum != 0);\r\n        buccTransfer = BuccV2(v2Address);\r\n        require(!KeyLock());\r\n        address lookUP = buccTransfer.findUser(userNum);\r\n        keylock = now;\r\n        require(lookUP != msg.sender);\r\n        //prevent double adding\r\n        require(isaKey[lookUP] == false);\r\n        isaKey[lookUP] = true;\r\n        inverseLook[msg.sender] = lookUP;\r\n        key[lookUP] = msg.sender;\r\n        hasKey[msg.sender] = true;\r\n        buccTransfer.specialTransfer(userNum, 0);\r\n        secondaryUserLock[msg.sender] = false;\r\n    }\r\n    \r\n    function viewHasKey() public view returns (bool) {\r\n        return hasKey[msg.sender];\r\n    }\r\n    \r\n    function isKey() public view returns (bool) {\r\n        return isaKey[msg.sender];\r\n    }\r\n    \r\n    //return total ETH\r\n    function returnTotalETH() public view returns (uint256) {\r\n        return totalETH;\r\n    }\r\n    \r\n    //returns eth of user\r\n    function returnUserETH() public view returns (uint256) {\r\n        return ethAmount[msg.sender];\r\n    }\r\n    \r\n    //returns eth of user\r\n    function returnKeyUserETH() public view returns (uint256) {\r\n        return ethAmount[key[msg.sender]];\r\n    }\r\n    \r\n    function returnUserTokens(address specifiedToken) public view returns (uint256) {\r\n        return userSpecifiedTokenLock[specifiedToken][msg.sender];\r\n    }\r\n    \r\n    function returnKeyUserTokens(address specifiedToken) public view returns (uint256) {\r\n        return userSpecifiedTokenLock[specifiedToken][key[msg.sender]];\r\n    }\r\n    \r\n    function returnKeyforUser() public view returns (address) {\r\n        return inverseLook[msg.sender];\r\n    }\r\n    \r\n    function manualDeletion() public {\r\n        //DELETIONS\r\n        delete(hasKey[msg.sender]);\r\n        delete(key[inverseLook[msg.sender]]);\r\n        delete(isaKey[inverseLook[msg.sender]]);\r\n        delete(inverseLook[msg.sender]);\r\n    }\r\n    \r\n    \r\n    //sending tokens after tumbling\r\n    function tokenSend(address specifiedToken, uint256 userAmount, uint256 userNum) public {\r\n        require(secondaryUserLock[msg.sender] == false);\r\n        secondaryUserLock[msg.sender] = true;\r\n        require(userAmount <= userSpecifiedTokenLock[specifiedToken][key[msg.sender]]);\r\n        require(userAmount > 1);\r\n        //change amounts\r\n        userSpecifiedTokenLock[specifiedToken][key[msg.sender]] -= userAmount;\r\n        totalTokensSpecifiedAddress[specifiedToken] -= userAmount;\r\n        //setup\r\n        buccTransfer = BuccV2(v2Address);\r\n        selectedTokentoTumble = tokenTumble(specifiedToken);\r\n        require(!KeyLock());\r\n        address lookUP = buccTransfer.findUser(userNum);\r\n        keylock = now;\r\n        //confirm\r\n        selectedTokentoTumble.transfer(lookUP, userAmount);\r\n        buccTransfer.specialTransfer(userNum, 0);\r\n        //DELETIONS\r\n        secondaryUserLock[msg.sender] = false;\r\n    }\r\n    \r\n    function returnSpecifiedAddressTokens(address specifiedToken) public view returns (uint256) {\r\n        return totalTokensSpecifiedAddress[specifiedToken];\r\n    }\r\n    \r\n    function preApproveTokens(address specifiedToken, uint256 userSpecifiedAmount) public {\r\n        require(secondaryUserLock[msg.sender] == false);\r\n        secondaryUserLock[msg.sender] = true;\r\n        require(checkSubscription());\r\n        require(hasKey[msg.sender]);\r\n        require(specifiedToken != v2Address);\r\n        buccTransfer = BuccV2(v2Address);\r\n        selectedTokentoTumble = tokenTumble(specifiedToken);\r\n        //transfers\r\n        selectedTokentoTumble.transferFrom(msg.sender, address(this), userSpecifiedAmount);\r\n        //user amounts\r\n        userSpecifiedTokenLock[specifiedToken][msg.sender] += userSpecifiedAmount;\r\n        totalTokensSpecifiedAddress[specifiedToken] += userSpecifiedAmount;\r\n        secondaryUserLock[msg.sender] = false;\r\n    }\r\n    \r\n     receive() external payable {\r\n        require(secondaryUserLock[msg.sender] == false);\r\n        secondaryUserLock[msg.sender] = true;\r\n        require(msg.value != 0);\r\n        require(hasKey[msg.sender]);\r\n        require(checkSubscription());\r\n        totalETH += msg.value;\r\n        ethAmount[msg.sender] += msg.value;\r\n        secondaryUserLock[msg.sender] = false;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_v2Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buccPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"}],\"name\":\"ETHsend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KeyLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addContractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplicationFactor\",\"type\":\"uint256\"}],\"name\":\"buccperBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"changeSubscriptionFeeTo\",\"type\":\"uint256\"}],\"name\":\"changeSubscriptionFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updateAddress\",\"type\":\"address\"}],\"name\":\"changev2Address\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buccsAddress\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualDeletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paySubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingBucc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBuccMultiplierEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"specifiedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userSpecifiedAmount\",\"type\":\"uint256\"}],\"name\":\"preApproveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnKeyUserETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"specifiedToken\",\"type\":\"address\"}],\"name\":\"returnKeyUserTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnKeyforUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"specifiedToken\",\"type\":\"address\"}],\"name\":\"returnSpecifiedAddressTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnTotalETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnUserETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"specifiedToken\",\"type\":\"address\"}],\"name\":\"returnUserTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnsubscriptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"}],\"name\":\"specialdeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"specifiedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"}],\"name\":\"tokenSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewContractTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFellowBuccaneers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewHasKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewLPPerson\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Sargasso","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000606366d1e3e675a3e60846a78e8abcbd773cd1a3000000000000000000000000d5a7d515fb8b3337acb9b053743e0bc18f50c8550000000000000000000000000000000000000000000000000000000000fe502a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://39866b76e18023a3d891bff8c4d7d42bf6ee099aab9ff13fc860fd9fc9de4f30"}]}