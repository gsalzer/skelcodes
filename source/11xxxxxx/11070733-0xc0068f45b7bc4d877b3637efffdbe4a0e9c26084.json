{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\ncontract Permissions {\r\n\r\n  \r\n  mapping (address=>bool) public permits;\r\n\r\n  event AddPermit(address _addr);\r\n  event RemovePermit(address _addr);\r\n  event ChangeAdmin(address indexed _newAdmin,address indexed _oldAdmin);\r\n  \r\n  address public admin;\r\n  bytes32 public adminChangeKey;\r\n  \r\n  \r\n  function verify(bytes32 root,bytes32 leaf,bytes32[] memory proof) public pure returns (bool)\r\n  {\r\n      bytes32 computedHash = leaf;\r\n\r\n      for (uint256 i = 0; i < proof.length; i++) {\r\n        bytes32 proofElement = proof[i];\r\n\r\n        if (computedHash < proofElement) {\r\n        // Hash(current computed hash + current element of the proof)\r\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n        } else {\r\n        // Hash(current element of the proof + current computed hash)\r\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n       }\r\n      }\r\n\r\n     // Check if the computed hash (root) is equal to the provided root\r\n      return computedHash == root;\r\n   }    \r\n  function changeAdmin(address _newAdmin,bytes32 _keyData,bytes32[] memory merkleProof,bytes32 _newRootKey) public onlyAdmin {\r\n         bytes32 leaf = keccak256(abi.encodePacked(msg.sender,'contractDB',_keyData));\r\n         require(verify(adminChangeKey, leaf,merkleProof), 'Invalid proof.');\r\n         \r\n         admin = _newAdmin;\r\n         adminChangeKey = _newRootKey;\r\n         \r\n         emit ChangeAdmin(_newAdmin,msg.sender);      \r\n  }\r\n  \r\n  constructor() public {\r\n    permits[msg.sender] = true;\r\n    admin = msg.sender;\r\n    adminChangeKey = 0xc07b01d617f249e77fe6f0df68daa292fe6ec653a9234d277713df99c0bb8ebf;\r\n  }\r\n  \r\n  modifier onlyAdmin(){\r\n      require(msg.sender == admin);\r\n      _;\r\n  }\r\n\r\n  modifier onlyPermits(){\r\n    require(permits[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function isPermit(address _addr) public view returns(bool){\r\n    return permits[_addr];\r\n  }\r\n  \r\n  function addPermit(address _addr) public onlyAdmin{\r\n    if(permits[_addr] == false){\r\n        permits[_addr] = true;\r\n        emit AddPermit(_addr);\r\n    }\r\n  }\r\n  \r\n  function removePermit(address _addr) public onlyAdmin{\r\n    permits[_addr] = false;\r\n    emit RemovePermit(_addr);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"MUL ERROR\");\r\n    c = c / (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    c = c * (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a,\"Sub Error\");\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a,\"add ERROR\");\r\n    return c;\r\n  }\r\n}\r\ncontract LoanDocDB{\r\n    function isValidDoc(uint256 _docID) public view returns (bool);\r\n    function getDocCredit(uint256 _docID) public view returns(uint256);\r\n   // function getDocIntValue(uint256 _docID,uint256 _field) public view returns(uint256);\r\n   \r\n}\r\n\r\ncontract S1Global{\r\n    function getAllMaxAddr() public returns(uint256);\r\n    function getAddress(uint256 idx) public returns(address);\r\n}\r\n\r\ncontract OldDB{\r\n     function loanContractData(uint256 _idx) public view returns(uint256[] memory _data,bytes8 _cur,address[] memory _addr);\r\n     function getMaxDB() external view  returns(uint256);\r\n     function version() public view returns(uint256);\r\n}\r\n\r\n \r\ncontract LoanContractDB is Permissions {\r\n   \r\n  using SafeMath for uint256;\r\n\r\n  event LoanContractIssue(address indexed _addr,uint256 indexed _contractID);\r\n  event LoanContractActive(uint256 indexed tokenID,uint256 indexed contracID,address indexed borrow,uint256 amount,uint256 expirationLoanTime,uint256 interest,uint256 termPay); // if 30 mean pay every 30 day unix time stamp fill day it will convert to unix\r\n  event LoanReFinance(uint256 indexed contractID,uint256 expirationTime,uint256 interest,uint256 termPay);\r\n  event LoanCloseContract(address indexed borrow,address indexed lender,uint256 indexed guarantorID,uint256 contractId);\r\n  event LoanDefault(address indexed borrow,address indexed lender,uint256 indexed guarantorID,uint256 contractId);\r\n  event NewDefaultTerm(uint256 indexed _old,uint256 indexed _new);\r\n  event LoanDelay(uint256 indexed contractID,uint256 interest,uint256 termpay);\r\n  event PaidContract(uint256 indexed contractID,uint256 _paid,uint256 _interest);\r\n\r\n  // CONTRACT_PEDDING->CONTRACT_MINTCAT->CONTRACT_ACTIVE\r\n\r\n  enum CONTRACT_STATUS {CONTRACT_PEDDING,CONTRACT_ACTIVE,CONTRACT_EXPIRE,CONTRACT_CLOSE,CONTRACT_REJECT,CONTRACT_APPROVE,CONTRACT_DEFAULT,CONTRACT_MINTCAT}\r\n\r\n  struct LoanContract{\r\n    uint256 documentID; // link to documentID;\r\n    uint256 loanAmount;\r\n    uint256 paidAmount;\r\n    uint256 intAmount; // all interes paid;\r\n    uint256 exchangeRate;\r\n    uint256 guarantorID;  // RatToken Type GuarantorID\r\n    uint256 issuedTime;\r\n    uint256 intTime; // interest calculate time;\r\n    uint256 expirationTime; //end contract\r\n    \r\n    uint256 interest; // summary interest rate\r\n    uint256 comInt; // company interest reat\r\n    uint256 lendersInt; // pools interest\r\n    uint256 guarantorInt;\r\n\r\n    uint256 termPay;  // day \r\n    CONTRACT_STATUS status;\r\n    bytes8  currency;\r\n    address borrow;\r\n    address lender; // pools\r\n    uint256 lenderID; // index for pools\r\n    uint256 defaultAmount;\r\n  }\r\n\r\n  LoanDocDB  public docDB;\r\n  LoanContract[] loanContracts;\r\n\r\n  mapping(uint256 => uint256[]) allLoanInDoc; \r\n // mapping(address => uint256[]) ownerToContract;\r\n // mapping(address => uint256[]) ownertoDocument;\r\n\r\n  mapping (uint256=>uint256) public loanConIDToIdx;\r\n  mapping (uint256=>uint256) public loanConIdxToID;\r\n\r\n  mapping (uint256=>uint256) public conIDToToken;\r\n  mapping (uint256=>uint256) public TokenToConID;\r\n\r\n  uint256 public defaultTerm;\r\n  uint256 public sumDefault;\r\n  uint256 public version = 6;\r\n  uint256 oneDay = 1 days;\r\n //bool copyOldData;\r\n  \r\n  constructor() public{\r\n    defaultTerm = 90 days;\r\n    docDB = LoanDocDB(0x640e24719710bc5994918a81F1650a3bAB7ec1C5);\r\n  }\r\n\r\n\r\n     function canMintCat(uint256 _tokenID) public view returns (bool){\r\n        require(TokenToConID[_tokenID] > 0,\"Not have this Token on Contract DB\");\r\n        uint256 conIdx = loanConIDToIdx[TokenToConID[_tokenID]];\r\n        require(conIdx > 0,\"Not have this Idx\");\r\n        if(loanContracts[conIdx-1].status == CONTRACT_STATUS.CONTRACT_PEDDING)\r\n          return true;\r\n        else\r\n          return false;\r\n     }\r\n     \r\n     function setAlreadyMint(uint256 _tokenID) public onlyPermits{\r\n        require(TokenToConID[_tokenID] > 0,\"Not have this Token on Contract DB\");\r\n        uint256 conIdx = loanConIDToIdx[TokenToConID[_tokenID]];\r\n        require(conIdx > 0,\"Not have this Idx\");\r\n        if(loanContracts[conIdx-1].status == CONTRACT_STATUS.CONTRACT_PEDDING)\r\n          loanContracts[conIdx-1].status = CONTRACT_STATUS.CONTRACT_MINTCAT;\r\n     }\r\n     // \r\n     function getMintAmount(uint256 _tokenID) public view returns(uint256){\r\n         require(TokenToConID[_tokenID] > 0,\"Not have this Token on Contract DB\");\r\n         return getLoanAmount(TokenToConID[_tokenID]);\r\n     }\r\n\r\n    function checkAllow(address _from,address _to,uint256 _TokenID) public  returns (bool){\r\n        return true;\r\n    }\r\n\r\n\r\n   function setS1Global(address _addr) external onlyAdmin returns(bool){\r\n        S1Global  s1 = S1Global(_addr);\r\n        for(uint256 i=0;i<s1.getAllMaxAddr();i++){\r\n            addPermit(s1.getAddress(i));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setDefaultTerm(uint256 _newDay) external onlyAdmin returns(bool){\r\n        emit NewDefaultTerm(defaultTerm,_newDay);\r\n        defaultTerm = _newDay;\r\n        return true;\r\n    }\r\n\r\n    function getLoanAmount(uint256 _conID) public view returns(uint256){\r\n        require(loanConIDToIdx[_conID] > 0,\"Not have this Contact ID\");\r\n        return loanContracts[loanConIDToIdx[_conID] - 1].loanAmount;\r\n    }\r\n    \r\n    function getBorrowAddr(uint256 _contractID) public view onlyPermits returns (address){\r\n        uint256 idx = loanConIDToIdx[_contractID];\r\n        if(idx > 0){\r\n            idx = idx - 1;\r\n            return loanContracts[idx].borrow;\r\n        }\r\n    }\r\n\r\n    function getPaidInfo(uint256 _conID) public view onlyPermits returns(uint256[] memory _data,address _contract){\r\n        require(loanConIDToIdx[_conID]>0,\"Not have this contract ID\");\r\n        uint256 idx = loanConIDToIdx[_conID];\r\n        if(idx > 0){\r\n            _data = new uint256[](5);\r\n            idx = idx - 1;\r\n            _contract = loanContracts[idx].lender;\r\n            (_data[0],_data[1],_data[2],_data[3]) = debitContract(_conID);\r\n            _data[4] = loanContracts[idx].lenderID;\r\n\r\n            \r\n            // _data[0] = loanContracts[idx].loanAmount;\r\n            // _data[1] = loanContracts[idx].paidAmount;\r\n            // _data[2] = loanContracts[idx].comInt;\r\n            // _guaID = loanContracts[idx].guarantorID;\r\n            // _borrow = loanContracts[idx].borrow;\r\n            // _lean = loanContracts[idx].lender;\r\n            // _leanIdx = loanContracts[idx].lenderID;\r\n        }\r\n    }\r\n\r\n    function getContractInfo(uint256 _conID) public view onlyPermits returns(uint256 _loan,uint256 _paid,uint256 _commission,uint256 _guaID,address _borrow,address _lean,uint256 _leanIdx){\r\n        uint256 idx = loanConIDToIdx[_conID];\r\n        if(idx > 0){\r\n            idx = idx - 1;\r\n            _loan = loanContracts[idx].loanAmount;\r\n            _paid = loanContracts[idx].paidAmount;\r\n            _commission = loanContracts[idx].comInt;\r\n            _guaID = loanContracts[idx].guarantorID;\r\n            _borrow = loanContracts[idx].borrow;\r\n            _lean = loanContracts[idx].lender;\r\n            _leanIdx = loanContracts[idx].lenderID;\r\n        }\r\n    }\r\n\r\n    function setLoanDocDB(address _addr) public onlyAdmin{\r\n        docDB = LoanDocDB(_addr);\r\n    }\r\n\r\n\r\n  \r\n    function stringToBytes8(string memory source) public pure returns (bytes8 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    \r\n    \r\n    function getMaxContractInDoc(uint256 _docID) public view returns(uint256){\r\n        return allLoanInDoc[_docID].length;\r\n    }\r\n    \r\n    function getContractInDoc(uint256 _docID,uint256 _idx) public view returns(uint256){\r\n        require(_idx < allLoanInDoc[_docID].length,\"Array index outof\");\r\n        return allLoanInDoc[_docID][_idx];\r\n    }\r\n    \r\n    // External get and update value \r\n    function getMaxDB() external view onlyPermits returns(uint256){\r\n        return loanContracts.length;\r\n\r\n    }\r\n  \r\n    function isValidContract(uint256 _contractID) public view returns (bool){\r\n        return (loanConIDToIdx[_contractID] != 0);\r\n    }\r\n    \r\n    function setConID2Token(uint256 _TokenID,uint256 _conID) public onlyPermits returns(bool){\r\n        require(conIDToToken[_conID] == 0,\"Already set con id\");\r\n        require(TokenToConID[_TokenID] == 0,\"Token already use\");\r\n        \r\n        conIDToToken[_conID] = _TokenID;\r\n        TokenToConID[_TokenID] = _conID;\r\n        return true;\r\n    }\r\n    \r\n\r\n    function createLoanContract(uint256 _docID,uint256 _contractID,uint256 _amount,address _borrow,uint256 _intCom,uint256 _intLean,uint256 _intGua,string memory _currency) public onlyPermits returns(bool) {\r\n            require(_amount > 0,\"ERROR loanAmount = 0\");\r\n            uint256  curCredit;\r\n            curCredit = checkCreditOnDoc(_docID);\r\n            require(curCredit >= _amount,\"Outof credit to loan\");\r\n            require(isValidContract(_contractID) == false,\"ERROR:createloanContract invalid contractID\");\r\n            \r\n            // make new loan\r\n            LoanContract memory _contract = LoanContract({\r\n                documentID:_docID,\r\n                loanAmount:_amount,\r\n                paidAmount:0,\r\n                intAmount:0,\r\n                exchangeRate:0,\r\n                guarantorID:0,\r\n                issuedTime:0,\r\n                expirationTime:0,\r\n                interest:_intCom + _intLean + _intGua,\r\n                comInt:_intCom,\r\n                lendersInt:_intLean,\r\n                guarantorInt:_intGua,\r\n                termPay:0,\r\n                status:CONTRACT_STATUS.CONTRACT_PEDDING,\r\n                currency:stringToBytes8(_currency),\r\n                borrow:_borrow,\r\n                lender:address(0),\r\n                intTime:0,\r\n                defaultAmount:0,\r\n                lenderID:0\r\n                }\r\n                );\r\n                \r\n            uint256  idx = loanContracts.push(_contract);\r\n            loanConIDToIdx[_contractID] = idx;\r\n            loanConIdxToID[idx] = _contractID;\r\n\r\n            allLoanInDoc[_docID].push(_contractID);\r\n         //   ownerToContract[_borrow].push(_contractID);\r\n            \r\n            emit LoanContractIssue(_borrow,_contractID);\r\n            return true;\r\n    }\r\n\r\n    function loanContractData(uint256 _idx) public view onlyPermits returns(uint256[] memory _data,bytes8 _cur,address[] memory _addr){\r\n        _data = new uint256[](17);\r\n        _addr = new address[](2);\r\n        \r\n        _data[0] = loanContracts[_idx].documentID;\r\n        _data[1] = loanContracts[_idx].loanAmount;\r\n        _data[2] = loanContracts[_idx].paidAmount;\r\n        _data[3] = loanContracts[_idx].intAmount;\r\n        _data[4] = loanContracts[_idx].exchangeRate;\r\n        _data[5] = loanContracts[_idx].guarantorID;\r\n        _data[6] = loanContracts[_idx].issuedTime;\r\n        _data[7] = loanContracts[_idx].intTime;\r\n        _data[8] = loanContracts[_idx].expirationTime;\r\n\r\n        _data[9] = loanContracts[_idx].interest;\r\n        _data[10] = loanContracts[_idx].comInt;\r\n        _data[11] = loanContracts[_idx].lendersInt;\r\n        _data[12] = loanContracts[_idx].guarantorInt;\r\n\r\n        _data[13]= loanContracts[_idx].termPay;\r\n        _data[14] = loanContracts[_idx].defaultAmount;\r\n        _data[15] = loanContracts[_idx].lenderID;\r\n        _data[16]= uint256(loanContracts[_idx].status);\r\n        _cur = loanContracts[_idx].currency;\r\n        _addr[0] = loanContracts[_idx].borrow;\r\n        _addr[1] = loanContracts[_idx].lender;\r\n    }\r\n    \r\n    function loanContractDataFromID(uint256 _conID) public view onlyPermits returns(uint256[] memory _data,bytes8 _cur,address[] memory _addr){\r\n        require(loanConIDToIdx[_conID] > 0,\"Not have this Contract ID\");\r\n        return loanContractData(loanConIDToIdx[_conID] - 1);\r\n    }\r\n    \r\n    function loanInterest(uint256 _conID) public view returns(uint256 _com,uint256 _lend,uint256 _gua){\r\n        require(loanConIDToIdx[_conID] > 0,\"Not have this Contract ID\");\r\n        uint256 _idx = loanConIDToIdx[_conID] - 1;\r\n        _com = loanContracts[_idx].comInt;\r\n        _lend = loanContracts[_idx].lendersInt;\r\n        _gua = loanContracts[_idx].guarantorInt;\r\n    }\r\n\r\n    function updateContractDataFromID(uint256 _conID,uint256[] memory _data,bytes8 _cur,address[] memory _addr) public onlyPermits returns(bool){\r\n        require(loanConIDToIdx[_conID] > 0,\"Not have this Contract ID\");\r\n        uint256 _idx = loanConIDToIdx[_conID] - 1;\r\n        require(loanContracts[_idx].status == CONTRACT_STATUS.CONTRACT_PEDDING,\"Only pedding can edit\");\r\n        \r\n        if( _data[0] != loanContracts[_idx].documentID) \r\n            loanContracts[_idx].documentID = _data[0];\r\n        \r\n        if( _data[1] != loanContracts[_idx].loanAmount)\r\n            loanContracts[_idx].loanAmount = _data[1];\r\n       \r\n        if(_data[2] != loanContracts[_idx].paidAmount)\r\n            loanContracts[_idx].paidAmount = _data[2];\r\n       \r\n        if(_data[3] != loanContracts[_idx].intAmount)\r\n            loanContracts[_idx].intAmount = _data[3];\r\n            \r\n        if(_data[4] != loanContracts[_idx].exchangeRate)\r\n            loanContracts[_idx].exchangeRate = _data[4];\r\n            \r\n        if(_data[5] != loanContracts[_idx].guarantorID)\r\n            loanContracts[_idx].guarantorID = _data[5];\r\n            \r\n        if(_data[6] != loanContracts[_idx].issuedTime)\r\n            loanContracts[_idx].issuedTime = _data[6];\r\n            \r\n        if( _data[7] != loanContracts[_idx].intTime)\r\n            loanContracts[_idx].intTime = _data[7];\r\n            \r\n        if(_data[8] != loanContracts[_idx].expirationTime)\r\n           loanContracts[_idx].expirationTime = _data[8];\r\n           \r\n        if(_data[9] != loanContracts[_idx].interest)\r\n            loanContracts[_idx].interest = _data[9];\r\n            \r\n        if(_data[10] != loanContracts[_idx].comInt)\r\n            loanContracts[_idx].comInt = _data[10];\r\n            \r\n        if(_data[11] != loanContracts[_idx].lendersInt)\r\n            loanContracts[_idx].lendersInt = _data[11];\r\n            \r\n        if(_data[12] != loanContracts[_idx].guarantorInt)\r\n           loanContracts[_idx].guarantorInt = _data[12];\r\n\r\n        if(_data[13] != loanContracts[_idx].termPay)\r\n            loanContracts[_idx].termPay = _data[13];\r\n            \r\n        if(_data[14] != loanContracts[_idx].defaultAmount)\r\n            loanContracts[_idx].defaultAmount = _data[14];\r\n            \r\n        if(_data[15] != loanContracts[_idx].lenderID)\r\n            loanContracts[_idx].lenderID = _data[15];\r\n\r\n        if(_data[16] != uint256(loanContracts[_idx].status))\r\n             loanContracts[_idx].status = CONTRACT_STATUS(_data[16]);\r\n             \r\n        if(_cur  != loanContracts[_idx].currency)\r\n            loanContracts[_idx].currency = _cur;\r\n        if(_addr[0] != loanContracts[_idx].borrow)\r\n            loanContracts[_idx].borrow = _addr[0];\r\n            \r\n        if(_addr[1] != loanContracts[_idx].lender)\r\n           loanContracts[_idx].lender = _addr[1];\r\n        \r\n        \r\n        return true;\r\n    }  \r\n\r\n\r\n    // interface for other contract call to manage payable\r\n    // calculate from outside\r\n    function updatePaidContract(uint256 _contractID,uint256 _paidAmount,uint256 _interPaid) external onlyPermits returns(bool){\r\n        require(loanConIDToIdx[_contractID] > 0,\"ERROR:updatePaidContract Not have this contract\");\r\n        uint256 loanIdx = loanConIDToIdx[_contractID]  - 1;\r\n        \r\n        require(loanContracts[loanIdx].status == CONTRACT_STATUS.CONTRACT_ACTIVE,\"Loan Contract not Active\");\r\n        require(loanContracts[loanIdx].expirationTime >= now,\"Contract are expire\");\r\n        \r\n        loanContracts[loanIdx].paidAmount += _paidAmount;\r\n        loanContracts[loanIdx].intAmount += _interPaid;\r\n        loanContracts[loanIdx].intTime = now; // reset interest cal\r\n\r\n        if(loanContracts[loanIdx].paidAmount >= loanContracts[loanIdx].loanAmount){\r\n            // Close Contract\r\n            loanContracts[loanIdx].status = CONTRACT_STATUS.CONTRACT_CLOSE;\r\n            emit LoanCloseContract(loanContracts[loanIdx].borrow,loanContracts[loanIdx].lender,loanContracts[loanIdx].guarantorID,_contractID);\r\n        }\r\n        \r\n        emit PaidContract(_contractID,_paidAmount,_interPaid);\r\n        \r\n        return true;\r\n\r\n\r\n        \r\n    }\r\n\r\n    function defaultContract(uint256 _contractID,uint256 _defAmount) external onlyPermits returns(bool){\r\n        require(loanConIDToIdx[_contractID] > 0,\"ERROR:defaultContract Not have this contract\");\r\n        uint256 loanIdx = loanConIDToIdx[_contractID]  - 1;\r\n\r\n        LoanContract memory  conDB = loanContracts[loanIdx];\r\n        require(conDB.status == CONTRACT_STATUS.CONTRACT_ACTIVE,\"Loan Contract not Active\");\r\n      //  require(now - conDB.intTime  >= defaultTerm,\"Contract not default yet\"); remove bc control by our contract\r\n\r\n        // check have guarantor or not\r\n        loanContracts[loanIdx].status = CONTRACT_STATUS.CONTRACT_DEFAULT;\r\n        loanContracts[loanIdx].defaultAmount = _defAmount;\r\n        loanContracts[loanIdx].expirationTime = now;\r\n\r\n        sumDefault += _defAmount;\r\n        emit LoanDefault(conDB.borrow,conDB.lender,conDB.guarantorID,_contractID);\r\n        return true;\r\n    }\r\n\r\n    // When not pay on term payment can increate interset or decreate and make new term\r\n    function delayPayment(uint256 _contractID,uint256 _newInterest,uint256 _newTerm) external onlyPermits returns(bool){\r\n        require(loanConIDToIdx[_contractID] > 0,\"ERROR:renewContract Not have this contract\");\r\n        uint256 loanIdx = loanConIDToIdx[_contractID]  - 1;\r\n       // LoanContract memory  conDB = loanContracts[loanIdx];\r\n       // require(conDB.intTime + conDB.termPay > now,\"ERROR:delayPayment contract not delay\");\r\n\r\n        loanContracts[loanIdx].termPay = _newTerm * oneDay;\r\n        loanContracts[loanIdx].interest = _newInterest;\r\n\r\n        emit LoanDelay(_contractID,_newInterest,_newTerm * oneDay);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    // When contract expire\r\n    function renewContract(uint256 _contractID,uint256 _newExpireTime,uint256 _newTerm,uint256 _newInter) \r\n    external onlyPermits returns(bool){\r\n         require(loanConIDToIdx[_contractID] > 0,\"ERROR:renewContract Not have this contract\");\r\n         uint256 loanIdx = loanConIDToIdx[_contractID]  - 1;\r\n         \r\n         require(loanContracts[loanIdx].expirationTime > now,\"ERROR:renew contract not expire\");\r\n         \r\n          loanContracts[loanIdx].expirationTime = _newExpireTime;\r\n          loanContracts[loanIdx].termPay = _newTerm * oneDay;\r\n          loanContracts[loanIdx].interest = _newInter;\r\n          \r\n          // 100 SGD ,10%  1 year  = 110\r\n          // defaulue  20%   == 120 \r\n          //    110 + 5%\r\n          emit LoanReFinance(_contractID,_newExpireTime,_newInter,_newTerm * oneDay);\r\n\r\n          return true;\r\n    }\r\n    \r\n\r\n    function rejectContract(uint256 _contractID) external onlyPermits returns(bool){\r\n          require(loanConIDToIdx[_contractID] > 0,\"ERROR:renewContract Not have this contract\");\r\n          uint256 loanIdx = loanConIDToIdx[_contractID]  - 1;\r\n\r\n          if(loanContracts[loanIdx].status == CONTRACT_STATUS.CONTRACT_PEDDING){\r\n            loanContracts[loanIdx].status = CONTRACT_STATUS.CONTRACT_REJECT;\r\n            return true;\r\n\r\n          }\r\n          else\r\n          {\r\n            return false;\r\n          }\r\n    }\r\n\r\n    \r\n// USE for approve section\r\n     //enum CONTRACT_STATUS {CONTRACT_PEDDING,CONTRACT_ACTIVE,CONTRACT_EXPIRE,CONTRACT_CLOSE,CONTRACT_REJECT,CONTRACT_APPROVE}\r\n\r\n    function checkCreditOnDoc(uint256 _docID) public view returns(uint256){\r\n        require(docDB.isValidDoc(_docID) == true,\"ERROR:_checkCredit invalid docID\");\r\n        uint256 summaryLoan = 0;\r\n        \r\n        if(allLoanInDoc[_docID].length > 0){\r\n            for(uint256 i=0;i<allLoanInDoc[_docID].length;i++){\r\n                uint256 loanIdx = loanConIDToIdx[allLoanInDoc[_docID][i]] - 1;\r\n                \r\n                if(loanContracts[loanIdx].status == CONTRACT_STATUS.CONTRACT_ACTIVE ||\r\n                   loanContracts[loanIdx].status == CONTRACT_STATUS.CONTRACT_PEDDING ||\r\n                   loanContracts[loanIdx].status == CONTRACT_STATUS.CONTRACT_APPROVE)\r\n                    summaryLoan += loanContracts[loanIdx].loanAmount - loanContracts[loanIdx].paidAmount;\r\n            }\r\n        }\r\n\r\n        return (docDB.getDocCredit(_docID) - summaryLoan);\r\n        \r\n    }\r\n\r\n    \r\n\r\n    function activeContract(uint256 _contractID,uint256 _termpay,\r\n                            uint256 expirationTime,address lender,uint256 _guaTokenID, uint256 _exRate,uint256 _lenderID) public onlyPermits returns(bool){\r\n        require(loanConIDToIdx[_contractID] > 0,\"ERROR:activeContract Not have this contract\");\r\n        uint256 loanIdx = loanConIDToIdx[_contractID]  - 1;\r\n    //    uint256 tokenID = tokenToContract[_contractID];\r\n        require(loanContracts[loanIdx].status == CONTRACT_STATUS.CONTRACT_MINTCAT,\"Loan Contract not Mint yet\");\r\n        \r\n    //    ratToken.intTransfer(loanContracts[loanIdx].borrow,lender,tokenID);\r\n    \r\n        loanContracts[loanIdx].issuedTime = now;\r\n        loanContracts[loanIdx].intTime = now;\r\n        loanContracts[loanIdx].lender = lender;\r\n      //  loanContracts[loanIdx].interest = _intCom + _intLean + _intGua;\r\n        loanContracts[loanIdx].termPay = _termpay * oneDay;\r\n        loanContracts[loanIdx].expirationTime = expirationTime;\r\n        loanContracts[loanIdx].guarantorID = _guaTokenID;\r\n        loanContracts[loanIdx].exchangeRate = _exRate;\r\n        loanContracts[loanIdx].lenderID = _lenderID;\r\n        loanContracts[loanIdx].status = CONTRACT_STATUS.CONTRACT_ACTIVE;\r\n        \r\n        emit LoanContractActive(conIDToToken[_contractID],_contractID,loanContracts[loanIdx].borrow,loanContracts[loanIdx].loanAmount,\r\n                                    expirationTime,loanContracts[loanIdx].interest ,_termpay * oneDay);\r\n\r\n        return true;\r\n        \r\n    }\r\n\r\n    uint256 public SECPYEAR = 31536000;\r\n\r\n    function intPerSec(uint256 _intPY) internal view returns(uint256){\r\n        //31536000  sec per year;\r\n        return _intPY / SECPYEAR / 100;\r\n        \r\n    }\r\n    \r\n\r\n    function debitContract(uint256 _contractID) public view returns (uint256 _priciple,uint256 _comInt,uint256 _loanInt,uint256 _guaInt){\r\n           require(loanConIDToIdx[_contractID] > 0,\"ERROR:debitContract Not have this contract\");\r\n           uint256 loanIdx = loanConIDToIdx[_contractID]  - 1;\r\n           \r\n//           uint256 interest =  loanContracts[loanIdx].interest;\r\n           uint256 currentLoan = loanContracts[loanIdx].loanAmount - loanContracts[loanIdx].paidAmount;\r\n           uint256  lastTime;\r\n           if(loanContracts[loanIdx].expirationTime < now)\r\n                lastTime = loanContracts[loanIdx].expirationTime;\r\n           else\r\n                lastTime = now;\r\n//           uint256 intSec = intPerSec(interest) * (now - loanContracts[loanIdx].intTime);\r\n            uint256  comInt =  intPerSec(loanContracts[loanIdx].comInt) * (lastTime - loanContracts[loanIdx].intTime);        \r\n            uint256  loanInt = intPerSec(loanContracts[loanIdx].lendersInt) * (lastTime - loanContracts[loanIdx].intTime); \r\n            uint256 guaInt = intPerSec(loanContracts[loanIdx].guarantorInt) * (lastTime - loanContracts[loanIdx].intTime); \r\n\r\n            // 20%  per -> ShuttleOne 5% VC-Invester 0% Guaranto 15%\r\n            // 20 % Shutleone 20%\r\n\r\n           _priciple = currentLoan;\r\n           _comInt = currentLoan.mul(comInt,18);\r\n           _loanInt = currentLoan.mul(loanInt,18);\r\n           _guaInt = currentLoan.mul(guaInt,18);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"ChangeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrow\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guarantorID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"LoanCloseContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contracID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationLoanTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"termPay\",\"type\":\"uint256\"}],\"name\":\"LoanContractActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"}],\"name\":\"LoanContractIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrow\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guarantorID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"LoanDefault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"termpay\",\"type\":\"uint256\"}],\"name\":\"LoanDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"termPay\",\"type\":\"uint256\"}],\"name\":\"LoanReFinance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"NewDefaultTerm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"PaidContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemovePermit\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECPYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenToConID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termpay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_guaTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lenderID\",\"type\":\"uint256\"}],\"name\":\"activeContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminChangeKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"canMintCat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_newRootKey\",\"type\":\"bytes32\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_TokenID\",\"type\":\"uint256\"}],\"name\":\"checkAllow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"}],\"name\":\"checkCreditOnDoc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conIDToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_intCom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intLean\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intGua\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"createLoanContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"}],\"name\":\"debitContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priciple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_comInt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanInt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guaInt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defAmount\",\"type\":\"uint256\"}],\"name\":\"defaultContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTerm\",\"type\":\"uint256\"}],\"name\":\"delayPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"docDB\",\"outputs\":[{\"internalType\":\"contract LoanDocDB\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"}],\"name\":\"getBorrowAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getContractInDoc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"}],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guaID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lean\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_leanIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"}],\"name\":\"getLoanAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"}],\"name\":\"getMaxContractInDoc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxDB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"}],\"name\":\"getPaidInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"}],\"name\":\"isValidContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanConIDToIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanConIdxToID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"loanContractData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes8\",\"name\":\"_cur\",\"type\":\"bytes8\"},{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"}],\"name\":\"loanContractDataFromID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes8\",\"name\":\"_cur\",\"type\":\"bytes8\"},{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"}],\"name\":\"loanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_com\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gua\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"}],\"name\":\"rejectContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newExpireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newInter\",\"type\":\"uint256\"}],\"name\":\"renewContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"setAlreadyMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_TokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"}],\"name\":\"setConID2Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDay\",\"type\":\"uint256\"}],\"name\":\"setDefaultTerm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLoanDocDB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setS1Global\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes8\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"result\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes8\",\"name\":\"_cur\",\"type\":\"bytes8\"},{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"updateContractDataFromID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interPaid\",\"type\":\"uint256\"}],\"name\":\"updatePaidContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LoanContractDB","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7f9ad96bce368ceaf59c6cac9a6c7d73942f18e5e8300eb6fadb59a8a0683748"}]}