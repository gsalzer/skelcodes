{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/registry/IRegistry.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\ncontract IRegistry {\r\n    function getVotingAddress() public view returns (address);\r\n\r\n    function getExchangeFactoryAddress() public view returns (address);\r\n\r\n    function getWethAddress() public view returns (address);\r\n\r\n    function getMessageProcessorAddress() public view returns (address);\r\n\r\n    function getFsTokenAddress() public view returns (address);\r\n\r\n    function getFsTokenProxyAdminAddress() public view returns (address);\r\n\r\n    function getIncentivesAddress() public view returns (address);\r\n\r\n    function getWalletAddress() public view returns (address payable);\r\n\r\n    function getReplayTrackerAddress() public view returns (address);\r\n\r\n    function getLiquidityTokenFactoryAddress() public view returns (address);\r\n\r\n    function hasLiquidityTokensnapshotAccess(address sender) public view returns (bool);\r\n\r\n    function hasWalletAccess(address sender) public view returns (bool);\r\n\r\n    function removeWalletAccess(address _walletAccessor) public;\r\n\r\n    function isValidOracleAddress(address oracleAddress) public view returns (bool);\r\n\r\n    function isValidVerifierAddress(address verifierAddress) public view returns (bool);\r\n\r\n    function isValidStamperAddress(address stamperAddress) public view returns (bool);\r\n\r\n    function isExchange(address exchangeAddress) public view returns (bool);\r\n\r\n    function addExchange(address _exchange) public;\r\n\r\n    function removeExchange(address _exchange) public;\r\n\r\n    function updateVotingAddress(address _address) public;\r\n}\r\n\r\n// File: contracts/registry/IRegistryUpdateConsumer.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n// Implemented by objects that need to know about registry updates.\r\ninterface IRegistryUpdateConsumer {\r\n    function onRegistryRefresh() external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/registry/RegistryHolder.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n// Holds a reference to the registry\r\n// Eventually Ownership will be renounced\r\ncontract RegistryHolder is Ownable {\r\n    address private registryAddress;\r\n\r\n    function getRegistryAddress() public view returns (address) {\r\n        return registryAddress;\r\n    }\r\n\r\n    // Change the address of registry, if the caller is the voting system as identified by the old\r\n    // registry.\r\n    function updateRegistry(address _newAddress) public {\r\n        require(isOwner() || isVotingSystem(), \"Only owner or voting system\");\r\n        require(_newAddress != address(0), \"Zero address\");\r\n        registryAddress = _newAddress;\r\n    }\r\n\r\n    function isVotingSystem() private view returns (bool) {\r\n        if (registryAddress == address(0)) {\r\n            return false;\r\n        }\r\n        return IRegistry(registryAddress).getVotingAddress() == msg.sender;\r\n    }\r\n}\r\n\r\n// File: contracts/registry/KnowsRegistry.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n\r\n// Base class for objects that need to know about other objects in the system\r\n// This allows us to share modifiers and have a unified way of looking up other objects.\r\ncontract KnowsRegistry is IRegistryUpdateConsumer {\r\n    RegistryHolder private registryHolder;\r\n\r\n    modifier onlyVotingSystem() {\r\n        require(isVotingSystem(msg.sender), \"Only voting system\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExchangeFactory() {\r\n        require(isExchangeFactory(msg.sender), \"Only exchange factory\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExchangeFactoryOrVotingSystem() {\r\n        require(isExchangeFactory(msg.sender) || isVotingSystem(msg.sender), \"Only exchange factory or voting\");\r\n        _;\r\n    }\r\n\r\n    modifier requiresWalletAcccess() {\r\n        require(getRegistry().hasWalletAccess(msg.sender), \"requires wallet access\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMessageProcessor() {\r\n        require(getRegistry().getMessageProcessorAddress() == msg.sender, \"only MessageProcessor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExchange() {\r\n        require(getRegistry().isExchange(msg.sender), \"Only exchange\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegistry() {\r\n        require(getRegistryAddress() == msg.sender, \"only registry\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOracle() {\r\n        require(isValidOracleAddress(msg.sender), \"only oracle\");\r\n        _;\r\n    }\r\n\r\n    modifier requiresLiquidityTokenSnapshotAccess() {\r\n        require(getRegistry().hasLiquidityTokensnapshotAccess(msg.sender), \"only incentives\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _registryHolder) public {\r\n        registryHolder = RegistryHolder(_registryHolder);\r\n    }\r\n\r\n    function getRegistryHolder() internal view returns (RegistryHolder) {\r\n        return registryHolder;\r\n    }\r\n\r\n    function getRegistry() internal view returns (IRegistry) {\r\n        return IRegistry(getRegistryAddress());\r\n    }\r\n\r\n    function getRegistryAddress() internal view returns (address) {\r\n        return registryHolder.getRegistryAddress();\r\n    }\r\n\r\n    function isRegistryHolder(address a) internal view returns (bool) {\r\n        return a == address(registryHolder);\r\n    }\r\n\r\n    function isValidOracleAddress(address oracleAddress) public view returns (bool) {\r\n        return getRegistry().isValidOracleAddress(oracleAddress);\r\n    }\r\n\r\n    function isValidVerifierAddress(address verifierAddress) public view returns (bool) {\r\n        return getRegistry().isValidVerifierAddress(verifierAddress);\r\n    }\r\n\r\n    function isValidStamperAddress(address stamperAddress) public view returns (bool) {\r\n        return getRegistry().isValidStamperAddress(stamperAddress);\r\n    }\r\n\r\n    function isVotingSystem(address a) public view returns (bool) {\r\n        return a == getRegistry().getVotingAddress();\r\n    }\r\n\r\n    function isExchangeFactory(address a) public view returns (bool) {\r\n        return a == getRegistry().getExchangeFactoryAddress();\r\n    }\r\n\r\n    function checkNotNull(address a) internal pure returns (address) {\r\n        require(a != address(0), \"address must be non zero\");\r\n        return a;\r\n    }\r\n\r\n    function checkNotNullAP(address payable a) internal pure returns (address payable) {\r\n        require(a != address(0), \"address must be non zero\");\r\n        return a;\r\n    }\r\n}\r\n\r\n// File: contracts/messageProcessor/IReplayTracker.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IReplayTracker {\r\n    function reserve(uint256 replayNumber) external;\r\n}\r\n\r\n// File: contracts/messageProcessor/ReplayTracker.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n// ReplayTracker ensures that a user interaction number can only be used\r\n// once per user address.\r\ncontract ReplayTracker is KnowsRegistry, IReplayTracker {\r\n    mapping(uint256 => bool) private replayNumbers;\r\n\r\n    constructor(address registryHolder) public KnowsRegistry(registryHolder) {}\r\n\r\n    function isUsed(uint256 replayNumber) public view returns (bool) {\r\n        return replayNumbers[replayNumber];\r\n    }\r\n\r\n    function reserve(uint256 replayNumber) public onlyMessageProcessor {\r\n        require(!replayNumbers[replayNumber], \"replay\");\r\n        replayNumbers[replayNumber] = true;\r\n    }\r\n\r\n    function onRegistryRefresh() public onlyRegistry {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isExchangeFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"replayNumber\",\"type\":\"uint256\"}],\"name\":\"isUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"isValidOracleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stamperAddress\",\"type\":\"address\"}],\"name\":\"isValidStamperAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"isValidVerifierAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isVotingSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onRegistryRefresh\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"replayNumber\",\"type\":\"uint256\"}],\"name\":\"reserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReplayTracker","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"000000000000000000000000d9cf4ca71d2ed15040cc702c2b146bfb848b7a1b","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9163bc3796ba501747e6c91494d3930570d54d909f0f2aca2993fc71e4b63115"}]}