{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   *\r\n   * _Available since v2.4.0._\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   *\r\n   * _Available since v2.4.0._\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   *\r\n   * _Available since v2.4.0._\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IExtendedAggregator.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IExtendedAggregator {\r\n  function getToken() external view returns (address);\r\n\r\n  function getTokenType() external view returns (uint256);\r\n\r\n  function getPlatformId() external view returns (uint256);\r\n\r\n  function getSubTokens() external view returns (address[] memory);\r\n\r\n  function latestAnswer() external view returns (int256);\r\n}\r\n\r\n// File: contracts/interfaces/ILatestAnswerGetter.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface ILatestAnswerGetter {\r\n  function latestAnswer() external view returns (int256);\r\n}\r\n\r\n// File: contracts/interfaces/IPriceOracleGetter.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IPriceOracleGetter {\r\n  function getAssetPrice(address _asset) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Metadata.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IERC20Metadata {\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/interfaces/IPriceGetterCpm.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IPriceGetterCpm {\r\n  function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/misc/EthAddressLib.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\nlibrary EthAddressLib {\r\n  /**\r\n   * @dev returns the address used within the protocol to identify ETH\r\n   * @return the address assigned to ETH\r\n   */\r\n  function ethAddress() internal pure returns (address) {\r\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n  }\r\n}\r\n\r\n// File: contracts/misc/MathUtils.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\nlibrary MathUtils {\r\n  /**\r\n   * @notice Returns the square root of an uint256 x\r\n   * - Uses the Babylonian method, but using (x + 1) / 2 as initial guess in order to have decreasing guessing iterations\r\n   * which allow to do z < y instead of checking that z*z is within a range of precision respect to x\r\n   * @param x The number to calculate the sqrt from\r\n   * @return The root\r\n   */\r\n  function sqrt(uint256 x) internal pure returns (uint256) {\r\n    uint256 z = (x + 1) / 2;\r\n    uint256 y = x;\r\n    while (z < y) {\r\n      y = z;\r\n      z = (x / z + z) / 2;\r\n    }\r\n    return y;\r\n  }\r\n}\r\n\r\n// File: contracts/proxies/CpmPriceProvider.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/** @title CpmPriceProvider\r\n * @author Aave\r\n * @notice Constant Product Market price provider for a token/ETH pair , represented by a CPM token\r\n * - Using an external price source for the token side of the pair and an extra oracle as fallback\r\n * - IMPORTANT. It's as assumption that the last calculation on latestAnswer() doesn't overflow because\r\n *   the token/ETH balances and prices are validated before creating the corresponding CpmPriceProvider\r\n *   for them.\r\n */\r\ncontract CpmPriceProvider is IExtendedAggregator {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public immutable PRICE_DEVIATION; // 10 represents a 1% deviation\r\n  IERC20 internal immutable CPM_TOKEN;\r\n  IERC20 public immutable TOKEN;\r\n  bool public immutable PEGGED_TO_ETH;\r\n  ILatestAnswerGetter public immutable TOKEN_PRICE_PROVIDER;\r\n  IPriceOracleGetter public immutable FALLBACK_ORACLE;\r\n  uint256 public immutable TOKEN_DECIMALS;\r\n  uint256 internal immutable CPM_TOKEN_TYPE;\r\n  uint256 internal immutable PLATFORM_ID;\r\n  address[] internal subTokens;\r\n\r\n  event Setup(\r\n    address indexed creator,\r\n    IERC20 indexed cpmToken,\r\n    IERC20 indexed token,\r\n    bool peggedToEth,\r\n    uint256 priceDeviation,\r\n    ILatestAnswerGetter tokenPriceProvider,\r\n    IPriceOracleGetter fallbackOracle,\r\n    uint256 cpmTokenType,\r\n    uint256 platformId\r\n  );\r\n\r\n  constructor(\r\n    IERC20 _cpmToken,\r\n    IERC20 _token,\r\n    bool _peggedToEth,\r\n    uint256 _priceDeviation,\r\n    ILatestAnswerGetter _tokenPriceProvider,\r\n    IPriceOracleGetter _fallbackOracle,\r\n    uint256 _cpmTokenType,\r\n    uint256 _platformId\r\n  ) public {\r\n    CPM_TOKEN = _cpmToken;\r\n    TOKEN = _token;\r\n    PEGGED_TO_ETH = _peggedToEth;\r\n    PRICE_DEVIATION = _priceDeviation;\r\n    TOKEN_PRICE_PROVIDER = _tokenPriceProvider;\r\n    FALLBACK_ORACLE = _fallbackOracle;\r\n    TOKEN_DECIMALS = (_peggedToEth) ? 18 : uint256(IERC20Metadata(address(_token)).decimals());\r\n    CPM_TOKEN_TYPE = _cpmTokenType;\r\n    PLATFORM_ID = _platformId;\r\n    subTokens.push(EthAddressLib.ethAddress());\r\n    subTokens.push(address(_token));\r\n    emit Setup(\r\n      msg.sender,\r\n      _cpmToken,\r\n      _token,\r\n      _peggedToEth,\r\n      _priceDeviation,\r\n      _tokenPriceProvider,\r\n      _fallbackOracle,\r\n      _cpmTokenType,\r\n      _platformId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the price in ETH wei of 1 big unit of CPM_TOKEN, taking into account the different ETH prices of the underlyings\r\n   * - If a big deviation between the price token -> ETH within the CPM compared with the price in the TOKEN_PRICE_PROVIDER is detected,\r\n   * it reverts, as there is an ongoing attempt to manipulate the price\r\n   * @return The price\r\n   */\r\n  function latestAnswer() external override view returns (int256) {\r\n    uint256 _cpmTokenSupply = CPM_TOKEN.totalSupply();\r\n    int256 _signedPrice = (PEGGED_TO_ETH) ? 1 ether : TOKEN_PRICE_PROVIDER.latestAnswer();\r\n    uint256 _externalPriceOfTokenBigUnitsInWei = (_signedPrice > 0)\r\n      ? uint256(_signedPrice)\r\n      : FALLBACK_ORACLE.getAssetPrice(address(TOKEN));\r\n    if (_externalPriceOfTokenBigUnitsInWei == 0) {\r\n      return 0;\r\n    }\r\n    uint256 _cpmPriceOfTokenBigUnitsInWei = IPriceGetterCpm(address(CPM_TOKEN))\r\n      .getTokenToEthInputPrice(10**TOKEN_DECIMALS);\r\n\r\n    uint256 _cpmEthBalanceInWei = address(CPM_TOKEN).balance;\r\n    uint256 _cpmTokenBalanceInDecimalUnits = TOKEN.balanceOf(address(CPM_TOKEN));\r\n    uint256 _priceDeviation = _cpmPriceOfTokenBigUnitsInWei.mul(1000).div(\r\n      _externalPriceOfTokenBigUnitsInWei\r\n    );\r\n\r\n    // In the case of a high deviation, revert to not cause any potential issues to the system\r\n    require(\r\n      _priceDeviation < (1000 + PRICE_DEVIATION) && _priceDeviation > (1000 - PRICE_DEVIATION),\r\n      'INVALID_PRICE_DEVIATION'\r\n    );\r\n\r\n    return\r\n      int256(\r\n        (_cpmEthBalanceInWei +\r\n          _cpmTokenBalanceInDecimalUnits.mul(_externalPriceOfTokenBigUnitsInWei).div(\r\n            10**TOKEN_DECIMALS\r\n          ))\r\n          .mul(1 ether)\r\n          .div(_cpmTokenSupply)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @notice Return the address of the CPM token\r\n   * @return address\r\n   */\r\n  function getToken() external override view returns (address) {\r\n    return address(CPM_TOKEN);\r\n  }\r\n\r\n  /**\r\n   * @notice Return the list of tokens' addresses composing the CPM token\r\n   * - Using EthAddressLib.ethAddress() as mock address for ETH.\r\n   * - The reference token is first on the list\r\n   * @return addresses\r\n   */\r\n  function getSubTokens() external override view returns (address[] memory) {\r\n    return subTokens;\r\n  }\r\n\r\n  /**\r\n   * @notice Return the numeric type of the CPM token\r\n   * @return type\r\n   */\r\n  function getTokenType() external override view returns (uint256) {\r\n    return CPM_TOKEN_TYPE;\r\n  }\r\n\r\n  /**\r\n   * @notice Return the numeric platform id\r\n   * @return platform id\r\n   */\r\n  function getPlatformId() external override view returns (uint256) {\r\n    return PLATFORM_ID;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cpmToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_peggedToEth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_priceDeviation\",\"type\":\"uint256\"},{\"internalType\":\"contract ILatestAnswerGetter\",\"name\":\"_tokenPriceProvider\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"_fallbackOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cpmTokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"cpmToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"peggedToEth\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceDeviation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ILatestAnswerGetter\",\"name\":\"tokenPriceProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"fallbackOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cpmTokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformId\",\"type\":\"uint256\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FALLBACK_ORACLE\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PEGGED_TO_ETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_DEVIATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRICE_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILatestAnswerGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CpmPriceProvider","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000caa7e4656f6a2b59f5f99c745f91ab26d1210dce00000000000000000000000080fb784b7ed66730e8b1dbd9820afd29931aab0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000d6799da859ac8f0c42dad04abf917f58f908999b000000000000000000000000d6d88f2eba3d9a27b24bf77932fdeb547b93df5800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1cca8ffd4cfd33b82cabcfa7881565426fa3588be4885e3ef6ad735e1987e0d2"}]}