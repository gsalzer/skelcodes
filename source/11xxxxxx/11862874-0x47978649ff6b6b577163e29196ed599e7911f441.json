{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/xMigration.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\ninterface IXKNC is IERC20 {\r\n    function mintWithToken(uint256 kncAmountTwei) external;\r\n\r\n    function burn(\r\n        uint256 sourceTokenBal,\r\n        bool redeemForKnc,\r\n        uint256 minRate\r\n    ) external;\r\n}\r\n\r\ncontract xMigration {\r\n    IERC20 private knc;\r\n    IXKNC private sourceToken;\r\n    IXKNC private targetToken;\r\n\r\n    uint256 constant MAX_UINT = 2**256 - 1;\r\n\r\n    event MigrateToken(\r\n        address indexed userAccount,\r\n        uint256 tokenAmount,\r\n        uint256 kncAmount\r\n    );\r\n\r\n    constructor(\r\n        IXKNC _sourceToken,\r\n        IXKNC _targetToken,\r\n        IERC20 _knc\r\n    ) public {\r\n        sourceToken = _sourceToken;\r\n        targetToken = _targetToken;\r\n        knc = _knc;\r\n    }\r\n\r\n    function migrate() external {\r\n        uint256 sourceTokenBal = sourceToken.balanceOf(msg.sender);\r\n        require(\r\n            sourceTokenBal > 0,\r\n            \"xMigration: sourceToken balance cant be 0\"\r\n        );\r\n\r\n        // transfer source xKNC from user to here\r\n        sourceToken.transferFrom(msg.sender, address(this), sourceTokenBal);\r\n\r\n        // burn source xKNC for KNC\r\n        sourceToken.burn(sourceTokenBal, true, 0);\r\n\r\n        // mint target xKNC for KNC\r\n        uint256 kncBal = knc.balanceOf(address(this));\r\n        targetToken.mintWithToken(kncBal);\r\n\r\n        // transfer back the target xKNC to user\r\n        uint256 xkncBal = targetToken.balanceOf(address(this));\r\n        targetToken.transfer(msg.sender, xkncBal);\r\n\r\n        emit MigrateToken(msg.sender, sourceTokenBal, kncBal);\r\n    }\r\n\r\n    // run once before exposing to users\r\n    function approveTarget() external {\r\n        knc.approve(address(targetToken), MAX_UINT);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IXKNC\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IXKNC\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_knc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kncAmount\",\"type\":\"uint256\"}],\"name\":\"MigrateToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approveTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"xMigration","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b088b2c7ce300f3fe679d471c2ce49dfe312ce750000000000000000000000000bfec35a1a3550deed3f6fc76dde7fc412729a91000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3ccd0b8d3297f7bc1065e52e5037d9c596cdd80f3ac071ba0861a226ecad4bb2"}]}