{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.8 https://hardhat.org\r\n\r\n// File contracts/general/Ownable.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * \r\n * @dev We've added a second owner to share control of the timelocked owner contract.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _pendingOwner;\r\n    \r\n    // Second allows a DAO to share control.\r\n    address private _secondOwner;\r\n    address private _pendingSecond;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event SecondOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function initializeOwnable() internal {\r\n        require(_owner == address(0), \"already initialized\");\r\n        _owner = msg.sender;\r\n        _secondOwner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n        emit SecondOwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function secondOwner() public view returns (address) {\r\n        return _secondOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFirstOwner() {\r\n        require(msg.sender == _owner, \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlySecondOwner() {\r\n        require(msg.sender == _secondOwner, \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner || msg.sender == _secondOwner;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyFirstOwner {\r\n        _pendingOwner = newOwner;\r\n    }\r\n\r\n    function receiveOwnership() public {\r\n        require(msg.sender == _pendingOwner, \"only pending owner can call this function\");\r\n        _transferOwnership(_pendingOwner);\r\n        _pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferSecondOwnership(address newOwner) public onlySecondOwner {\r\n        _pendingSecond = newOwner;\r\n    }\r\n\r\n    function receiveSecondOwnership() public {\r\n        require(msg.sender == _pendingSecond, \"only pending owner can call this function\");\r\n        _transferSecondOwnership(_pendingSecond);\r\n        _pendingSecond = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferSecondOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit SecondOwnershipTransferred(_secondOwner, newOwner);\r\n        _secondOwner = newOwner;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/general/TimelockOwned.sol\r\n\r\n// SPDX-License-Identifier: (c) Armor.Fi DAO, 2021\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Simple timelock owner contract to be used until we implement a governance contract.\r\n**/\r\ncontract TimelockOwned is Ownable {\r\n    \r\n    // Incremental counter of proposal IDs.\r\n    uint256 id;\r\n    \r\n    // Amount of time that must pass before a proposal can be implemented. Change this to 2 days before public launch.\r\n    uint256 public timelock;\r\n    \r\n    struct Proposal {\r\n        uint128 id;\r\n        uint128 ending;\r\n        address target;\r\n        uint256 value;\r\n        bytes data;\r\n    }\r\n    \r\n    // Mapping of proposal ID => proposal struct.\r\n    mapping (uint256 => Proposal) proposals;\r\n\r\n    event ProposalSubmitted(uint256 id, address target, uint256 value, bytes data, uint256 timestamp, uint256 execTimestamp);\r\n    event ProposalExecuted(uint256 id, address target, uint256 value, bytes data, uint256 timestamp);\r\n\r\n    constructor()\r\n      public\r\n    {\r\n        Ownable.initializeOwnable();\r\n    }\r\n\r\n    /**\r\n     * @dev External execution.\r\n    **/\r\n    function implementProposal(uint256 _id)\r\n      external\r\n      onlyOwner\r\n    {\r\n        Proposal memory proposal = proposals[_id];\r\n        require(proposal.ending != 0 && proposal.ending <= block.timestamp);\r\n        executeProposal(proposal.target, proposal.value, proposal.data);\r\n        emit ProposalExecuted(_id, proposal.target, proposal.value, proposal.data, block.timestamp);\r\n        delete proposals[_id];\r\n    }\r\n    \r\n    function submitProposal(address _target, uint256 _value, bytes calldata _data)\r\n      external\r\n      onlyOwner\r\n    {\r\n        id++;\r\n        Proposal memory proposal = Proposal(uint128(id), uint128(block.timestamp + timelock), _target, _value, _data);\r\n        proposals[id] = proposal;\r\n        emit ProposalSubmitted(id, proposal.target, proposal.value, proposal.data, block.timestamp, uint256(proposal.ending));\r\n    }\r\n    \r\n    function deleteProposal(uint256 _id)\r\n      external\r\n      onlyOwner\r\n    {\r\n        delete proposals[_id];\r\n    }\r\n    \r\n    function changeTimelock(uint256 _time)\r\n      public\r\n    {\r\n        require(msg.sender == address(this), \"Only this contract may change timelock.\");\r\n        timelock = _time;\r\n    }\r\n    \r\n    function executeProposal(address _target, uint256 _value, bytes memory _data)\r\n      internal\r\n    {\r\n        (bool success, ) = _target.call{value: _value}(_data);\r\n        require(success, \"Failed to execute proposal\");\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"execTimestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SecondOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deleteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"implementProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveSecondOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSecondOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimelockOwned","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dff832d5701f96f7e307e2010e68e4da59ffe8a9bc681aa63e75e6609eb382ea"}]}