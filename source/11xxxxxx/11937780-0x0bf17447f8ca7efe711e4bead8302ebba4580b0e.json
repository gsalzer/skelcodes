{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: chainlink/v0.5/contracts/dev/AggregatorInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\r\n}\r\n\r\n// File: contracts/meta-oracles/proxies/ChainlinkOracleAdapterV2.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ChainlinkOracleAdapterV2\r\n * @author Set Protocol\r\n *\r\n * Coerces outputs from Chainlink oracles to uint256 and adapts value to 18 decimals.\r\n */\r\ncontract ChainlinkOracleAdapterV2 {\r\n    using SafeMath for uint256;\r\n\r\n    /* ============ State Variables ============ */\r\n    AggregatorInterface public oracle;\r\n    uint256 public priceMultiplier;\r\n\r\n    /* ============ Constructor ============ */\r\n    /*\r\n     * Set address of aggregator being adapted for use. Different oracles return prices with different decimals.\r\n     * In this iteration of ChainLinkOracleAdapter, we allow the deployer to specify the multiple decimal\r\n     * to pass into the contract\r\n     *\r\n     * DPI (18): https://etherscan.io/address/0xD2A593BF7594aCE1faD597adb697b5645d5edDB2\r\n     * DAI (8): https://etherscan.io/address/0xaed0c38402a5d19df6e4c03f4e2dced6e29c1ee9\r\n     *\r\n     * @param  _oracle                  The address of medianizer being adapted from bytes to uint256\r\n     * @param  _priceMultiplierDecimals Decimal places to convert\r\n     */\r\n    constructor(\r\n        AggregatorInterface _oracle,\r\n        uint256 _priceMultiplierDecimals\r\n    )\r\n        public\r\n    {\r\n        oracle = _oracle;\r\n        priceMultiplier = 10 ** _priceMultiplierDecimals;\r\n    }\r\n\r\n    /* ============ External ============ */\r\n\r\n    /*\r\n     * Reads value of oracle and coerces return to uint256 then applies price multiplier\r\n     *\r\n     * @returns         Chainlink oracle price in uint256\r\n     */\r\n    function read()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Read value of medianizer and coerce to uint256\r\n        uint256 oracleOutput = uint256(oracle.latestAnswer());\r\n\r\n        // Apply multiplier to create 18 decimal price (since Chainlink returns 8 decimals)\r\n        return oracleOutput.mul(priceMultiplier);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_priceMultiplierDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ChainlinkOracleAdapterV2","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d2a593bf7594ace1fad597adb697b5645d5eddb20000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"byzantium","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8c26f43b5564476ee90dddf7683bac98261c821883dcf7f34136dcc811d29b8c"}]}