{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Contracts {\r\n    // data structure that stores a contract\r\n    struct Contract {\r\n        uint contractId;\r\n        string data;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    // it maps the contract's id with the contract\r\n    mapping (uint => Contract) public contracts;\r\n\r\n    // event fired when an contract is registered\r\n    event newContractRegistered(uint id);\r\n\r\n    // Modifier: check if the caller of the smart contract is the owner\r\n    modifier checkSenderIsOwner {\r\n    \trequire(msg.sender == owner, \"You are not the owner.\");\r\n    \t_;\r\n    }\r\n\r\n    /**\r\n     * Constructor function\r\n     */\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Add a new contract. \r\n     * This function can only be called by the owner of the smart contract.\r\n     *\r\n     * @param _contractId \t\tContract Id\r\n     * @param _data\t\t        Contract Data\r\n     */\r\n    function addContract(uint _contractId, string memory _data) public checkSenderIsOwner\r\n    returns(uint)\r\n    {\r\n        Contract storage newContract = contracts[_contractId];\r\n        require(newContract.contractId == 0, \"Contract already created.\");\r\n\r\n        newContract.contractId = _contractId;\r\n        newContract.data = _data;\r\n\r\n        // emitting the event that a new contract has been registered\r\n        emit newContractRegistered(_contractId);\r\n\r\n        return _contractId;\r\n    }\r\n\r\n    /**\r\n     * Get the contract's information.\r\n     *\r\n     * @param _id \tThe ID of the contract stored on the blockchain.\r\n     */\r\n    function getContractById(uint _id) public view checkSenderIsOwner\r\n    returns(\r\n    \tuint,\r\n    \tstring memory\r\n    ) {\r\n    \tContract memory i = contracts[_id];\r\n\r\n    \treturn (\r\n    \t\ti.contractId,\r\n    \t\ti.data\r\n    \t);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"newContractRegistered\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"addContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContractById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Contracts","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://018196512763628c48c888b72f6839aec37790862f28a6d365c89544d15eb34d"}]}