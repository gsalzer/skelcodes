{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface AaveProtocolDataProvider {\r\n    function getUserReserveData(address asset, address user) external view returns (\r\n        uint256 currentATokenBalance,\r\n        uint256 currentStableDebt,\r\n        uint256 currentVariableDebt,\r\n        uint256 principalStableDebt,\r\n        uint256 scaledVariableDebt,\r\n        uint256 stableBorrowRate,\r\n        uint256 liquidityRate,\r\n        uint40 stableRateLastUpdated,\r\n        bool usageAsCollateralEnabled\r\n    );\r\n\r\n    function getReserveConfigurationData(address asset) external view returns (\r\n        uint256 decimals,\r\n        uint256 ltv,\r\n        uint256 liquidationThreshold,\r\n        uint256 liquidationBonus,\r\n        uint256 reserveFactor,\r\n        bool usageAsCollateralEnabled,\r\n        bool borrowingEnabled,\r\n        bool stableBorrowRateEnabled,\r\n        bool isActive,\r\n        bool isFrozen\r\n    );\r\n\r\n    function getReserveData(address asset) external view returns (\r\n        uint256 availableLiquidity,\r\n        uint256 totalStableDebt,\r\n        uint256 totalVariableDebt,\r\n        uint256 liquidityRate,\r\n        uint256 variableBorrowRate,\r\n        uint256 stableBorrowRate,\r\n        uint256 averageStableBorrowRate,\r\n        uint256 liquidityIndex,\r\n        uint256 variableBorrowIndex,\r\n        uint40 lastUpdateTimestamp\r\n    );\r\n}\r\n\r\ninterface AaveLendingPool {\r\n    function getUserAccountData(address user) external view returns (\r\n        uint256 totalCollateralETH,\r\n        uint256 totalDebtETH,\r\n        uint256 availableBorrowsETH,\r\n        uint256 currentLiquidationThreshold,\r\n        uint256 ltv,\r\n        uint256 healthFactor\r\n    );\r\n}\r\n\r\ninterface AaveAddressProvider {\r\n    function getLendingPool() external view returns (address);\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ninterface AavePriceOracle {\r\n    function getAssetPrice(address _asset) external view returns(uint256);\r\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\r\n    function getSourceOfAsset(address _asset) external view returns(uint256);\r\n    function getFallbackOracle() external view returns(uint256);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract AaveHelpers is DSMath {\r\n    /**\r\n     * @dev get Aave Provider Address\r\n    */\r\n    function getAaveAddressProvider() internal pure returns (address) {\r\n        return 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5; // Mainnet\r\n        // return 0x652B2937Efd0B5beA1c8d54293FC1289672AFC6b; // Kovan\r\n    }\r\n\r\n    /**\r\n     * @dev get Aave Protocol Data Provider\r\n    */\r\n    function getAaveProtocolDataProvider() internal pure returns (address) {\r\n        return 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d; // Mainnet\r\n        // return 0x744C1aaA95232EeF8A9994C4E0b3a89659D9AB79; // Kovan\r\n    }\r\n\r\n    struct AaveUserTokenData {\r\n        uint tokenPrice;\r\n        uint supplyBalance;\r\n        uint stableBorrowBalance;\r\n        uint variableBorrowBalance;\r\n        uint supplyRate;\r\n        uint stableBorrowRate;\r\n        uint variableBorrowRate;\r\n        AaveTokenData aaveTokenData;\r\n    }\r\n\r\n    struct AaveUserData {\r\n        uint totalCollateralETH;\r\n        uint totalBorrowsETH;\r\n        uint availableBorrowsETH;\r\n        uint currentLiquidationThreshold;\r\n        uint ltv;\r\n        uint healthFactor;\r\n    }\r\n\r\n    struct AaveTokenData {\r\n        uint ltv;\r\n        uint threshold;\r\n        uint reserveFactor;\r\n        bool usageAsCollEnabled;\r\n        bool borrowEnabled;\r\n        bool stableBorrowEnabled;\r\n        bool isActive;\r\n        bool isFrozen;\r\n    }\r\n\r\n    function collateralData(\r\n        AaveProtocolDataProvider aaveData,\r\n        address token\r\n    ) internal view returns (AaveTokenData memory aaveTokenData) {\r\n        (\r\n            ,\r\n            aaveTokenData.ltv,\r\n            aaveTokenData.threshold,\r\n            ,\r\n            aaveTokenData.reserveFactor,\r\n            aaveTokenData.usageAsCollEnabled,\r\n            aaveTokenData.borrowEnabled,\r\n            aaveTokenData.stableBorrowEnabled,\r\n            aaveTokenData.isActive,\r\n            aaveTokenData.isFrozen\r\n        ) = aaveData.getReserveConfigurationData(token);\r\n    }\r\n\r\n    function getTokenData(\r\n        AaveProtocolDataProvider aaveData,\r\n        address user,\r\n        address token,\r\n        uint price\r\n    ) internal view returns(AaveUserTokenData memory tokenData) {\r\n        (\r\n            tokenData.supplyBalance,\r\n            tokenData.stableBorrowBalance,\r\n            tokenData.variableBorrowBalance,\r\n            ,,,,,\r\n        ) = aaveData.getUserReserveData(token, user);\r\n\r\n        (\r\n            ,,,\r\n            tokenData.supplyRate,\r\n            tokenData.variableBorrowRate,\r\n            tokenData.stableBorrowRate,\r\n            ,,,\r\n        ) = aaveData.getReserveData(token);\r\n\r\n        AaveTokenData memory aaveTokenData = collateralData(aaveData, token);\r\n\r\n        tokenData.tokenPrice = price;\r\n        tokenData.aaveTokenData = aaveTokenData;\r\n    }\r\n\r\n    function getUserData(AaveLendingPool aave, address user)\r\n    internal view returns (AaveUserData memory userData) {\r\n        (\r\n            uint256 totalCollateralETH,\r\n            uint256 totalDebtETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        ) = aave.getUserAccountData(user);\r\n\r\n        userData = AaveUserData(\r\n            totalCollateralETH,\r\n            totalDebtETH,\r\n            availableBorrowsETH,\r\n            currentLiquidationThreshold,\r\n            ltv,\r\n            healthFactor\r\n        );\r\n    }\r\n}\r\n\r\ncontract Resolver is AaveHelpers {\r\n    function getPosition(address user, address[] memory tokens) public view returns(AaveUserTokenData[] memory, AaveUserData memory) {\r\n        AaveAddressProvider addrProvider = AaveAddressProvider(getAaveAddressProvider());\r\n\r\n        AaveUserTokenData[] memory tokensData = new AaveUserTokenData[](tokens.length);\r\n        uint[] memory tokenPrices = AavePriceOracle(addrProvider.getPriceOracle()).getAssetsPrices(tokens);\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            tokensData[i] = getTokenData(AaveProtocolDataProvider(getAaveProtocolDataProvider()), user, tokens[i], tokenPrices[i]);\r\n        }\r\n\r\n        return (tokensData, getUserData(AaveLendingPool(addrProvider.getLendingPool()), user));\r\n    }\r\n}\r\n\r\ncontract InstaAaveV2Resolver is Resolver {\r\n    string public constant name = \"Aave-v2-Resolver\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"internalType\":\"struct AaveHelpers.AaveTokenData\",\"name\":\"aaveTokenData\",\"type\":\"tuple\"}],\"internalType\":\"struct AaveHelpers.AaveUserTokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveHelpers.AaveUserData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaAaveV2Resolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e32c4c18eac45e920bc923f0947a146e9ec1e6fe6b16a2a1241b0e2ceaec47e6"}]}