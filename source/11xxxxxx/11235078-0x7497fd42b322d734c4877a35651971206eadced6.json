{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\ninterface IBalance {\r\n    struct swap_t {\r\n        uint256 reserve; //抵押token\r\n        uint256 supply; //QIAN\r\n    }\r\n\r\n    function withdraw(\r\n        address receiver,\r\n        address token,\r\n        uint256 reserve\r\n    ) external;\r\n\r\n    function deposit(\r\n        address payer,\r\n        address token,\r\n        uint256 reserve\r\n    ) external payable;\r\n\r\n    function burn(\r\n        address payer,\r\n        address token,\r\n        uint256 supply\r\n    ) external;\r\n\r\n    function mint(\r\n        address receiver,\r\n        address token,\r\n        uint256 supply\r\n    ) external;\r\n\r\n    function exchange(\r\n        address payer,\r\n        address owner,\r\n        address token,\r\n        uint256 supply,\r\n        uint256 reserve\r\n    ) external;\r\n\r\n    function reserve(address who, address token)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function supply(address who, address token) external view returns (uint256);\r\n\r\n    function reserve(address token) external view returns (uint256);\r\n\r\n    function supply(address token) external view returns (uint256);\r\n\r\n    function swaps(address who, address token)\r\n        external\r\n        view\r\n        returns (swap_t memory);\r\n\r\n    function gswaps(address token) external view returns (swap_t memory);\r\n\r\n    function gsupply() external view returns (uint256);\r\n}\r\n\r\ninterface IEnv {\r\n    function bade(address token) external view returns (uint256);\r\n    function aade(address token) external view returns (uint256);\r\n    function fade(address token) external view returns (uint256);\r\n    function gade() external view returns(uint256);\r\n    function line(address token) external view returns (uint256);\r\n    function step() external view returns (uint256);\r\n    function oracle() external view returns (address);\r\n    function tokens() external view returns (address[] memory);\r\n    function gtoken() external view returns (address);\r\n    function hasToken(address token) external view returns(bool);\r\n    function deprecatedTokens(address token) external view returns(bool);\r\n    function lockdown() external view returns(bool);\r\n}\r\n\r\ninterface IAsset {\r\n    function deposit(\r\n        address payer,\r\n        address token,\r\n        uint256 reserve\r\n    ) external payable returns (uint256);\r\n\r\n    function withdraw(\r\n        address payable receiver,\r\n        address token,\r\n        uint256 reserve\r\n    ) external returns (uint256);\r\n\r\n    function balances(address token) external view returns (uint256);\r\n\r\n    function decimals(address token) external view returns (uint256);\r\n}\r\n\r\ninterface IPrice {\r\n    function value(address token) external view returns (uint256, bool);\r\n}\r\n\r\ninterface IBurnable {\r\n    function burn(address who, uint256 supply) external;\r\n}\r\n\r\ninterface IMintable {\r\n    function mint(address who, uint256 supply) external;\r\n}\r\n\r\ninterface IBroker {\r\n    function publish(bytes32 topic, bytes calldata data) external;\r\n}\r\n\r\ninterface IOrderbase {\r\n    function holder(uint256 index) external view returns (address, address);\r\n    function index(address owner, address token) external view returns (uint256);\r\n    function owners(address token, uint256 begin, uint256 end) external view returns (address[] memory);\r\n    function owners(address token) external view returns (address[] memory);\r\n    function tokens(address owner) external view returns (address[] memory);\r\n    function size() external view returns (uint256);\r\n    function insert(address owner, address token) external returns (uint256);\r\n}\r\n\r\n/**\r\n * @title VersionedInitializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n *\r\n * @author Aave, inspired by the OpenZeppelin Initializable contract\r\n */\r\nabstract contract VersionedInitializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    uint256 private lastInitializedRevision;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        uint256 revision = getRevision();\r\n        require(\r\n            initializing ||\r\n                isConstructor() ||\r\n                revision > lastInitializedRevision,\r\n            \"Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            lastInitializedRevision = revision;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev returns the revision number of the contract.\r\n    /// Needs to be defined in the inherited class as a constant.\r\n    function getRevision() internal virtual pure returns (uint256);\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            cs := extcodesize(address())\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[16] private ______gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    // constructor() internal {\r\n    //     // Storing an initial non-zero value makes deployment a bit more\r\n    //     // expensive, but in exchange the refund on every call to nonReentrant\r\n    //     // will be lower in amount. Since refunds are capped to a percetange of\r\n    //     // the total transaction's gas, it is best to keep them low in cases\r\n    //     // like this one, to increase the likelihood of the full refund coming\r\n    //     // into effect.\r\n    //     _notEntered = true;\r\n    // }\r\n\r\n    function initializeReentrancyGuard() internal {\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract Main is ReentrancyGuard, VersionedInitializable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    event Deposit(\r\n        address indexed sender,\r\n        address indexed token,\r\n        uint256 reserve,\r\n        uint256 sysbalance\r\n    );\r\n    event Withdraw(\r\n        address indexed sender,\r\n        address indexed token,\r\n        uint256 reserve,\r\n        uint256 sysbalance\r\n    );\r\n    event Mint(\r\n        address indexed sender,\r\n        address indexed token,\r\n        uint256 supply,\r\n        uint256 coinsupply\r\n    );\r\n    event Burn(\r\n        address indexed sender,\r\n        address indexed token,\r\n        uint256 supply,\r\n        uint256 coinsupply\r\n    );\r\n    event Open(\r\n        address indexed sender,\r\n        address indexed token,\r\n        uint256 reserve,\r\n        uint256 supply,\r\n        uint256 sysbalance,\r\n        uint256 coinsupply\r\n    );\r\n    event Exchange(\r\n        address indexed sender,\r\n        uint256 supply,\r\n        address indexed token,\r\n        uint256 reserve,\r\n        uint256 sysbalance,\r\n        uint256 coinsupply,\r\n        address[] frozens,\r\n        uint256 price\r\n    );\r\n\r\n    address public env;\r\n    address public balance;\r\n    address public coin;\r\n    address public asset;\r\n    address public broker;\r\n    address public orderbase;\r\n\r\n    function initialize(\r\n        address _env,\r\n        address _balance,\r\n        address _asset,\r\n        address _coin,\r\n        address _broker,\r\n        address _orderbase\r\n    ) public initializer {\r\n        initializeReentrancyGuard();\r\n        env = _env;\r\n        balance = _balance;\r\n        asset = _asset;\r\n        coin = _coin;\r\n        broker = _broker;\r\n        orderbase = _orderbase;\r\n    }\r\n\r\n    function getRevision() internal override pure returns (uint256) {\r\n        return uint256(0x1);\r\n    }\r\n\r\n    function deposit(address token, uint256 reserve)\r\n        public\r\n        payable\r\n        nonReentrant\r\n    {\r\n        uint256 _reserve = _deposit(token, reserve);\r\n        IBroker(broker).publish(keccak256(\"deposit\"), abi.encode(msg.sender, token, _reserve));\r\n        IOrderbase(orderbase).insert(msg.sender, token);\r\n        emit Deposit(\r\n            msg.sender,\r\n            token,\r\n            _reserve,\r\n            IAsset(asset).balances(token)\r\n        );\r\n    }\r\n\r\n    function withdraw(address token, uint256 reserve) public nonReentrant {\r\n        _withdraw(token, reserve);\r\n        //注: 不需要放到 @_withdraw, 因为 exchange 会用到 @_withdraw, 且不要求 >= bade. \r\n        require(ade(msg.sender, token) >= IEnv(env).aade(token), \"Main.withdraw.EID00063\");\r\n        IBroker(broker).publish(keccak256(\"withdraw\"), abi.encode(msg.sender, token, reserve));\r\n        emit Withdraw(\r\n            msg.sender,\r\n            token,\r\n            reserve,\r\n            IAsset(asset).balances(token)\r\n        );\r\n    }\r\n\r\n    //增发\r\n    function mint(address token, uint256 supply) public nonReentrant {\r\n        _mint(token, supply);\r\n        IBroker(broker).publish(keccak256(\"mint\"), abi.encode(msg.sender, token, supply));\r\n        emit Mint(msg.sender, token, supply, IERC20(coin).totalSupply());\r\n    }\r\n\r\n    //销毁\r\n    function burn(address token, uint256 supply) public nonReentrant {\r\n        _burn(token, supply);\r\n        IBroker(broker).publish(keccak256(\"burn\"), abi.encode(msg.sender, token, supply));\r\n        emit Burn(msg.sender, token, supply, IERC20(coin).totalSupply());\r\n    }\r\n\r\n    //开仓\r\n    function open(\r\n        address token, //deposit token\r\n        uint256 reserve,\r\n        uint256 supply\r\n    ) public payable nonReentrant {\r\n        uint256 _reserve = _deposit(token, reserve);\r\n        _mint(token, supply);\r\n        IBroker(broker).publish(keccak256(\"open\"), abi.encode(msg.sender, token, _reserve, supply));\r\n        IOrderbase(orderbase).insert(msg.sender, token);\r\n        emit Open(\r\n            msg.sender,\r\n            token,\r\n            _reserve,\r\n            supply,\r\n            IAsset(asset).balances(token),\r\n            IERC20(coin).totalSupply()\r\n        );\r\n    }\r\n\r\n    //清算\r\n    function exchange(\r\n        uint256 supply, //QIAN\r\n        address token,\r\n        address[] memory frozens\r\n    ) public nonReentrant {\r\n        require(!IEnv(env).lockdown(), \"Main.exchange.EID00030\");\r\n        require(supply != 0, \"Main.exchange.EID00090\");\r\n        address[] memory _frozens = _refreshfrozens(token, frozens);\r\n        require(_frozens.length != 0, \"Main.exchange.EID00091\");\r\n\r\n        //fix: 缓存被冻结仓位的状态, 当兑换人自己的仓位也属于冻结仓位时, 避免由于其他仓位数据划转(到兑换人的仓位)而导致兑换人自己的仓位数据发生变化\r\n        IBalance.swap_t[] memory swaps = new IBalance.swap_t[](_frozens.length);\r\n        for (uint256 i = 0; i < _frozens.length; ++i) {\r\n            //fix: Stack too deep, try removing local variables.\r\n            (address _owner, address _token) = (_frozens[i], token);\r\n            swaps[i] = IBalance(balance).swaps(_owner, _token);\r\n        }\r\n\r\n        uint256 _supply = supply;\r\n        uint256 reserve = 0;\r\n        for (uint256 i = 0; i < _frozens.length; ++i) {\r\n            //fix: Stack too deep, try removing local variables.\r\n            (address _owner, address _token) = (_frozens[i], token);\r\n\r\n            uint256 rid = Math.min(swaps[i].supply, _supply);\r\n            _supply = _supply.sub(rid);\r\n\r\n            uint256 lot = rid.mul(swaps[i].reserve).div(swaps[i].supply);\r\n            lot = Math.min(lot, swaps[i].reserve);\r\n\r\n            IBalance(balance).exchange(msg.sender, _owner, _token, rid, lot);\r\n            IBroker(broker).publish(\r\n                keccak256(\"burn\"),\r\n                abi.encode(_owner, _token, rid)\r\n            );\r\n            reserve = reserve.add(lot);\r\n            if (_supply == 0) break;\r\n        }\r\n\r\n        uint256 __supply = supply.sub(_supply);\r\n        IBurnable(coin).burn(msg.sender, __supply);\r\n        _withdraw(token, reserve);\r\n        IBroker(broker).publish(\r\n            keccak256(\"exchange\"),\r\n            abi.encode(msg.sender, __supply, token, reserve, _frozens)\r\n        );\r\n        emit Exchange(\r\n            msg.sender,\r\n            __supply,\r\n            token,\r\n            reserve,\r\n            IAsset(asset).balances(token),\r\n            IERC20(coin).totalSupply(),\r\n            _frozens,\r\n            _price(token)\r\n        );\r\n    }\r\n\r\n    //充足率 (Adequacy ratio)\r\n\r\n    //@who @token 对应的资产充足率\r\n    function ade(address owner, address token) public view returns (uint256) {\r\n        IBalance.swap_t memory swap = IBalance(balance).swaps(owner, token);\r\n        if (swap.supply == 0) return uint256(-1);\r\n\r\n        //uint256 coinprice = 1e18; (每\"个\"QIAN的价格)\r\n        //(swap.reserve / 10**_dec(token)) * _price(token)\r\n        //uint256 reservevalue = swap.reserve.mul(_price(token)).div(10**_dec(token));  //1e18\r\n        //(swap.supply / 10**_dec(coin)) * coinprice;\r\n        //uint256 coinvalue = swap.supply.mul(coinprice).div(10**_dec(coin)) //1e18\r\n        //ade = (reservevalue/coinvalue) * 1e18 (充足率的表示单位)\r\n        //uint256 ade = swap.reserve.mul(_price(token)).div(10**_dec(token)).mul(1e18).div(swap.supply.mul(1e18).div(10**_dec(coin)))\r\n        //            = swap.reserve.mul(_price(token)).mul(1e18).div(10**_dec(token)).div(swap.supply.mul(1e18).div(10**_dec(coin)))\r\n        //            = swap.reserve.mul(_price(token)).mul(10**_dec(coin)).div(10**_dec(token)).div(swap.supply)\r\n\r\n        return\r\n            swap\r\n                .reserve\r\n                .mul(_price(token))\r\n                .mul(10**_dec(coin))\r\n                .div(10**_dec(token))\r\n                .div(swap.supply);\r\n    }\r\n\r\n    //@token 对应的资产充足率\r\n    function ade(address token) public view returns (uint256) {\r\n        IBalance.swap_t memory gswap = IBalance(balance).gswaps(token);\r\n        if (gswap.supply == 0) return uint256(-1);\r\n        return\r\n            gswap\r\n                .reserve\r\n                .mul(_price(token))\r\n                .mul(10**_dec(coin))\r\n                .div(10**_dec(token))\r\n                .div(gswap.supply);\r\n    }\r\n\r\n    //系统总资产充足率\r\n    function ade() public view returns (uint256) {\r\n        uint256 reserve_values = 0;\r\n        address[] memory tokens = IEnv(env).tokens();\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            reserve_values = reserve_values.add(\r\n                IBalance(balance).reserve(tokens[i]).mul(_price(tokens[i])).div(\r\n                    10**_dec(tokens[i])\r\n                )\r\n            );\r\n        }\r\n        uint256 gsupply_values = IBalance(balance).gsupply();\r\n        if (gsupply_values == 0) return uint256(-1);\r\n        return reserve_values.mul(10**_dec(coin)).div(gsupply_values);\r\n    }\r\n\r\n    /** innernal functions */\r\n\r\n    function _burn(address token, uint256 supply) internal {\r\n        //全局停机\r\n        require(!IEnv(env).lockdown(), \"Main.burn.EID00030\");\r\n        //被废弃的代币生成的QIAN仍然允许销毁.\r\n        require(IEnv(env).hasToken(token), \"Main.burn.EID00070\");\r\n        uint256 _supply = IBalance(balance).supply(msg.sender, token);\r\n        require(_supply >= supply, \"Main.burn.EID00080\");\r\n        IBurnable(coin).burn(msg.sender, supply);\r\n        IBalance(balance).burn(msg.sender, token, supply);\r\n    }\r\n\r\n    function _deposit(address token, uint256 reserve) internal returns(uint256) {\r\n        require(!IEnv(env).lockdown(), \"Main.deposit.EID00030\");\r\n        //仅当受支持的代币才允许增加准备金(被废弃的代币不允许)\r\n        require(IEnv(env).hasToken(token) && !IEnv(env).deprecatedTokens(token), \"Main.deposit.EID00070\");\r\n        uint256 _reserve = IAsset(asset).deposit.value(msg.value)(\r\n            msg.sender,\r\n            token,\r\n            reserve\r\n        );\r\n        IBalance(balance).deposit(msg.sender, token, _reserve);\r\n        return _reserve;\r\n    }\r\n\r\n    function _mint(address token, uint256 supply) internal {\r\n        require(!IEnv(env).lockdown(), \"Main.mint.EID00030\");\r\n        require(IEnv(env).hasToken(token) && !IEnv(env).deprecatedTokens(token), \"Main.mint.EID00071\");\r\n\r\n        uint256 _step = IEnv(env).step();\r\n        require(supply >= _step, \"Main.mint.EID00092\");\r\n\r\n        IMintable(coin).mint(msg.sender, supply);\r\n        IBalance(balance).mint(msg.sender, token, supply);\r\n\r\n        //后置充足率检测.\r\n        require(ade(msg.sender, token) >= IEnv(env).bade(token), \"Main.mint.EID00062\");\r\n\r\n        uint256 _supply = IBalance(balance).supply(token);\r\n        uint256 _line = IEnv(env).line(token);\r\n        require(_supply <= _line, \"Main.mint.EID00093\");\r\n    }\r\n\r\n    function _withdraw(address token, uint256 reserve) internal {\r\n        require(!IEnv(env).lockdown(), \"Main.withdraw.EID00030\");\r\n        require(IEnv(env).hasToken(token), \"Main.withdraw.EID00070\");\r\n        uint256 _reserve = IBalance(balance).reserve(msg.sender, token);\r\n        require(_reserve >= reserve, \"Main.withdraw.EID00081\");\r\n        IBalance(balance).withdraw(msg.sender, token, reserve);\r\n        IAsset(asset).withdraw(msg.sender, token, reserve);\r\n        //充足率检测在外部调用处进行.\r\n    }\r\n\r\n    function _price(address token) internal view returns (uint256) {\r\n        (uint256 value, bool valid) = IPrice(IEnv(env).oracle()).value(\r\n            token\r\n        );\r\n        require(valid, \"Main.price.EID00094\");\r\n        return value;\r\n    }\r\n\r\n    //仓位是否被冻结.\r\n    function _isfade(address owner, address token)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return ade(owner, token) < IEnv(env).fade(token);\r\n    }\r\n\r\n    //从@frozens过滤已经不再是冻结状态的仓位\r\n    function _refreshfrozens(address token, address[] memory frozens)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 n = 0;\r\n        for (uint256 i = 0; i < frozens.length; ++i) {\r\n            if (_isfade(frozens[i], token)) {\r\n                frozens[n++] = frozens[i];\r\n            }\r\n        }\r\n        address[] memory _frozens = new address[](n);\r\n        for (uint256 i = 0; i < n; ++i) {\r\n            _frozens[i] = frozens[i];\r\n        }\r\n        return _frozens;\r\n    }\r\n\r\n    function _dec(address token) public view returns (uint256) {\r\n        return IAsset(asset).decimals(token);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinsupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sysbalance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sysbalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinsupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"frozens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinsupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sysbalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinsupply\",\"type\":\"uint256\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sysbalance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_dec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"broker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"env\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"frozens\",\"type\":\"address[]\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_env\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_broker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_orderbase\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Main","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://340e439a431b3c62bb8b1755e0eb3905e3e6ad8abea006226375c6cbdb1d11c4"}]}