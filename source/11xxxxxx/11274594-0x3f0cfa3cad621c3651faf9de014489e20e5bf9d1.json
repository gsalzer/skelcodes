{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface ILendingPoolAddressesProvider {\r\n  event LendingPoolUpdated(address indexed newAddress);\r\n  event LendingPoolCoreUpdated(address indexed newAddress);\r\n  event LendingPoolParametersProviderUpdated(address indexed newAddress);\r\n  event LendingPoolManagerUpdated(address indexed newAddress);\r\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n  event LendingPoolLiquidationManagerUpdated(address indexed newAddress);\r\n  event LendingPoolDataProviderUpdated(address indexed newAddress);\r\n  event EthereumAddressUpdated(address indexed newAddress);\r\n  event PriceOracleUpdated(address indexed newAddress);\r\n  event LendingRateOracleUpdated(address indexed newAddress);\r\n  event FeeProviderUpdated(address indexed newAddress);\r\n  event TokenDistributorUpdated(address indexed newAddress);\r\n\r\n  event ProxyCreated(bytes32 id, address indexed newAddress);\r\n\r\n  function getLendingPool() external view returns (address);\r\n\r\n  function setLendingPoolImpl(address _pool) external;\r\n\r\n  function getLendingPoolCore() external view returns (address payable);\r\n\r\n  function setLendingPoolCoreImpl(address _lendingPoolCore) external;\r\n\r\n  function getLendingPoolConfigurator() external view returns (address);\r\n\r\n  function setLendingPoolConfiguratorImpl(address _configurator) external;\r\n\r\n  function getLendingPoolDataProvider() external view returns (address);\r\n\r\n  function setLendingPoolDataProviderImpl(address _provider) external;\r\n\r\n  function getLendingPoolParametersProvider() external view returns (address);\r\n\r\n  function setLendingPoolParametersProviderImpl(address _parametersProvider) external;\r\n\r\n  function getTokenDistributor() external view returns (address);\r\n\r\n  function setTokenDistributor(address _tokenDistributor) external;\r\n\r\n  function getFeeProvider() external view returns (address);\r\n\r\n  function setFeeProviderImpl(address _feeProvider) external;\r\n\r\n  function getLendingPoolLiquidationManager() external view returns (address);\r\n\r\n  function setLendingPoolLiquidationManager(address _manager) external;\r\n\r\n  function getLendingPoolManager() external view returns (address);\r\n\r\n  function setLendingPoolManager(address _lendingPoolManager) external;\r\n\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  function setPriceOracle(address _priceOracle) external;\r\n\r\n  function getLendingRateOracle() external view returns (address);\r\n\r\n  function setLendingRateOracle(address _lendingRateOracle) external;\r\n}\r\n\r\n\r\ninterface IProposalExecutor {\r\n    function execute() external;\r\n}\r\n\r\n/**\r\n * @title AIP3ProposalPayload\r\n * @notice Proposal payload to be executed by the Aave Governance contract via DELEGATECALL\r\n * - Updates the LendingPool contract as defined by the AIP-3 \r\n * @author Aave\r\n **/\r\ncontract AIP3ProposalPayload is IProposalExecutor {\r\n  event ProposalExecuted();\r\n\r\n  ILendingPoolAddressesProvider public constant ADDRESSES_PROVIDER = ILendingPoolAddressesProvider(\r\n    0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\r\n  );\r\n\r\n  address public constant POOL_IMPL =  0x017788DDEd30FDd859d295b90D4e41a19393F423;\r\n\r\n  /**\r\n   * @dev Payload execution function, called once a proposal passed in the Aave governance\r\n   */\r\n  function execute() external override {\r\n\r\n    ADDRESSES_PROVIDER.setLendingPoolImpl(POOL_IMPL);\r\n\r\n    emit ProposalExecuted();\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_IMPL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AIP3ProposalPayload","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d917562c9769c961158390ca03be530219e89c75f0ff43a99c9da26929c9e9d2"}]}