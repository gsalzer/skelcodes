{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NONE\n\npragma solidity 0.6.12;\n\n\n\n// Part: IPunk\n\ninterface IPunk {\n\tfunction transferPunk(address to, uint punkIndex) external;\n\tfunction balanceOf(address) external view returns(uint256);\n\tfunction punkIndexToAddress(uint) external view returns(address);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.2.0/Context\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.2.0/Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: PunkDrop.sol\n\ncontract PunkDrop is Ownable {\n\n\tIPunk PUNKS = IPunk(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);\n\n\tuint256 public  punksToDrop;\n\tmapping(uint256 => uint256) public  punkSet;\n\tuint256 public ticketsLeft;\n\tmapping(uint256 => address) public tickets;\n\n\tevent PunkDropped(address winner, uint256 id);\n\n\tfunction logSet(uint256[] calldata _ids) external onlyOwner {\n\t\tuint256 currentIndex = punksToDrop;\n\t\trequire(currentIndex + _ids.length <= 150, \"PunkDrop: Too many logged punks.\");\n\t\tfor (uint256 i = 0; i < _ids.length; i++)\n\t\t\tpunkSet[currentIndex + i] = _ids[i];\n\t\tpunksToDrop += _ids.length;\n\t}\n\n\tfunction logAddresses(address[] calldata _addresses) external onlyOwner {\n\t\tuint256 _tickets = ticketsLeft;\n\t\trequire(_tickets + _addresses.length <= 150, \"PunkDrop: Too many logged tickets\");\n\t\tfor (uint256 i = 0; i < _addresses.length; i++) {\n\t\t\ttickets[i + _tickets] = _addresses[i];\n\t\t}\n\t\tticketsLeft += _addresses.length;\n\t}\n\n\tfunction dropPunk(string calldata _seed) external onlyOwner {\n\t\trequire(punksToDrop > 0, \"PunkDrop: Party is over.\");\n\t\t// keccak the seed then find punk to send\n\t\tuint256 raw = uint256(keccak256(abi.encodePacked(_seed)));\n\t\tuint256 wonPunk = punkSet[raw % punksToDrop];\n\t\t//put last punk in mapping in the won punk's slot\n\t\tpunkSet[raw % punksToDrop] = punkSet[punksToDrop - 1];\n\t\tdelete punkSet[punksToDrop - 1];\n\t\t// get last map for cheaper gas to avoid sstore again\n\t\taddress winner = tickets[ticketsLeft - 1];\n\t\tdelete tickets[ticketsLeft - 1];\n\t\tticketsLeft--;\n\t\tpunksToDrop--;\n\t\tPUNKS.transferPunk(winner, wonPunk);\n\t\temit PunkDropped(winner, wonPunk);\n\t}\n\n\tfunction evacPunk(uint256 _id) external onlyOwner{\n\t\tPUNKS.transferPunk(msg.sender, _id);\n\t}\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PunkDropped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_seed\",\"type\":\"string\"}],\"name\":\"dropPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"evacPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"logAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"logSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punkSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punksToDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PunkDrop","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}