{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/mask_flipper.sol\npragma solidity >=0.6.7 <0.7.0;\n\n////// src/mask_flipper.sol\n/* pragma solidity ^0.6.7; */\n\ninterface NFTX  {\n    function mint(uint256 vaultId, uint256[] calldata nftIds, uint256 d2Amount) external;\n    function redeem(uint vaultId, uint256 amount) external;\n}\ninterface ERC721 {\n    function transferFrom(address from, address to, uint nftID) external;\n    function ownerOf(uint nftID) external returns (address);\n    function approve(address usr, uint amount) external;\n    function tokenOfOwnerByIndex(address owner, uint idx) external returns(uint);\n}\n\ninterface ERC20 {\n    function approve(address usr, uint amount)  external;\n    function transferFrom(address from, address to, uint amount) external;\n    function balanceOf(address usr) external returns(uint amount);\n}\n\ninterface SushiRouter {\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns(uint[] memory);\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns(uint[] memory);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MaskFlipper {\n    // constants\n    uint constant public ONE = 10**27;\n    uint constant public ONE_MASK_TOKEN = 1 ether;\n    // hashmasks vault id\n    uint constant public VAULT_ID = 20;\n\n    //math functions\n    function rmul(uint x, uint y) public pure returns (uint z) {\n        z = safeMul(x, y) / ONE;\n    }\n    function safeMul(uint x, uint y) public pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"safe-mul-failed\");\n    }\n\n    NFTX public nftx;\n    SushiRouter public sushiRouter;\n    ERC721 public hashmasks;\n    ERC20 public maskToken;\n    ERC20 public weth;\n\n    // percentage of WETH send back to the msg.sender denominated in RAY (10^27)\n    // default 100% (max value)\n    uint public flipMaskRate = ONE;\n    // percentage from the floor price required from the user for getRandomMask\n    // min value 100%\n    uint public getMaskRate = ONE;\n    // amountOutMin tolerance from floor price in sushi Swap\n    // default 100% (no tolerance)\n    uint public tolerance = ONE;\n    address public owner;\n\n    constructor(address nftx_, address sushiRouter_, address hashmasks_, address maskToken_, address weth_) public {\n        owner = msg.sender;\n        nftx = NFTX(nftx_);\n        sushiRouter = SushiRouter(sushiRouter_);\n        hashmasks = ERC721(hashmasks_);\n        maskToken = ERC20(maskToken_);\n        weth = ERC20(weth_);\n\n        maskToken.approve(address(sushiRouter), uint(-1));\n        weth.approve(address(sushiRouter), uint(-1));\n        maskToken.approve(address(nftx), uint(-1));\n    }\n\n    function file(bytes32 name, uint value) public {\n        require(msg.sender == owner, \"msg.sender not owner\");\n        if(name == \"flipMaskRate\") {\n            flipMaskRate = value;\n        } else if(name == \"tolerance\") {\n            tolerance = value;\n        } else if(name == \"getMaskRate\") {\n            require(value >= ONE);\n            getMaskRate = value;\n        } else {\n            revert(\"unknown-config\");\n        }\n    }\n\n    // returns the current floor price minus the fee in WETH\n    // amount of WETH received for one hashmask\n    function currentFloor() public view returns(uint) {\n        return rmul(_currentFloor(), flipMaskRate);\n    }\n\n    function _currentFloor() internal view returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = address(maskToken);\n        path[1] = address(weth);\n\n        return sushiRouter.getAmountsOut(ONE_MASK_TOKEN, path)[1];\n    }\n\n    // amount of WETH required for one hashmask\n    function currentGetMaskPrice() public returns(uint) {\n        return rmul(_currentMaskTokenPrice(), getMaskRate);\n    }\n\n    function _currentMaskTokenPrice() internal returns(uint) {\n        address[] memory path = new address[](2);\n        path[0] = address(weth);\n        path[1] = address(maskToken);\n\n        return sushiRouter.getAmountsIn(ONE_MASK_TOKEN, path)[0];\n    }\n\n    // flip a mask against the current floor price in NFTX and receive WETH back\n    function flipMask(uint nftID) public returns(uint payoutAmount){\n        require(hashmasks.ownerOf(nftID) == msg.sender, \"msg.sender is not nft owner\");\n        hashmasks.transferFrom(msg.sender, address(this), nftID);\n\n        // move NFT into NFTX pool\n        hashmasks.approve(address(nftx), nftID);\n        uint256[] memory list = new uint256[](1);\n        list[0] = nftID;\n        nftx.mint(VAULT_ID, list, 0);\n\n        require(maskToken.balanceOf(address(this)) == ONE_MASK_TOKEN, \"no-mask-token\");\n\n        address[] memory path = new address[](2);\n        path[0] = address(maskToken);\n        path[1] = address(weth);\n\n        uint wantPrice = _currentFloor();\n        // swap MASK token for WETH\n        uint price = sushiRouter.swapExactTokensForTokens(ONE_MASK_TOKEN, rmul(wantPrice, tolerance), path, address(this), block.timestamp+1)[1];\n\n        // transfer WETH to msg.sender\n        payoutAmount = rmul(price, flipMaskRate);\n        weth.transferFrom(address(this), msg.sender, payoutAmount);\n    }\n\n    // get a random mask with WETH\n    function getRandomMask() public returns(uint nftID) {\n        uint requiredAmount = rmul(_currentMaskTokenPrice(), getMaskRate);\n        weth.transferFrom(msg.sender, address(this), requiredAmount);\n\n        address[] memory path = new address[](2);\n        path[0] = address(weth);\n        path[1] = address(maskToken);\n\n        // swap WETH for mask token\n        sushiRouter.swapTokensForExactTokens(ONE_MASK_TOKEN, requiredAmount, path, address(this), block.timestamp+1);\n\n        // redeem one NFT with mask token\n        nftx.redeem(VAULT_ID, 1);\n\n        nftID = hashmasks.tokenOfOwnerByIndex(address(this), 0);\n\n        // send nft to msg.sender\n        hashmasks.transferFrom(address(this), msg.sender, nftID);\n    }\n\n    function redeem() public {\n        require(msg.sender == owner);\n        weth.transferFrom(address(this), owner, weth.balanceOf(address(this)));\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n        return 0x150b7a02;\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftx_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sushiRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hashmasks_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maskToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MASK_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGetMaskPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"name\":\"flipMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMaskRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaskRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashmasks\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maskToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftx\",\"outputs\":[{\"internalType\":\"contract NFTX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract SushiRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MaskFlipper","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000af93fcce0548d3124a5fc3045adaf1dde4e8bf7e000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000c2c747e0f7004f9e8817db2ca4997657a77469280000000000000000000000000fe629d1e84e171f8ff0c1ded2cc2221caa48a3f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}