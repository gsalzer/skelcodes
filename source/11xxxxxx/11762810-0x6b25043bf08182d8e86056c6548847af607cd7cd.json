{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/aaveV2/automatic/AaveSubscriptionsV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../auth/AdminAuth.sol\\\";\\n\\n/// @title Stores subscription information for Aave automatization\\ncontract AaveSubscriptionsV2 is AdminAuth {\\n\\n    string public constant NAME = \\\"AaveSubscriptionsV2\\\";\\n\\n    struct AaveHolder {\\n        address user;\\n        uint128 minRatio;\\n        uint128 maxRatio;\\n        uint128 optimalRatioBoost;\\n        uint128 optimalRatioRepay;\\n        bool boostEnabled;\\n    }\\n\\n    struct SubPosition {\\n        uint arrPos;\\n        bool subscribed;\\n    }\\n\\n    AaveHolder[] public subscribers;\\n    mapping (address => SubPosition) public subscribersPos;\\n\\n    uint public changeIndex;\\n\\n    event Subscribed(address indexed user);\\n    event Unsubscribed(address indexed user);\\n    event Updated(address indexed user);\\n    event ParamUpdates(address indexed user, uint128, uint128, uint128, uint128, bool);\\n\\n    /// @dev Called by the DSProxy contract which owns the Aave position\\n    /// @notice Adds the users Aave poistion in the list of subscriptions so it can be monitored\\n    /// @param _minRatio Minimum ratio below which repay is triggered\\n    /// @param _maxRatio Maximum ratio after which boost is triggered\\n    /// @param _optimalBoost Ratio amount which boost should target\\n    /// @param _optimalRepay Ratio amount which repay should target\\n    /// @param _boostEnabled Boolean determing if boost is enabled\\n    function subscribe(uint128 _minRatio, uint128 _maxRatio, uint128 _optimalBoost, uint128 _optimalRepay, bool _boostEnabled) external {\\n\\n        // if boost is not enabled, set max ratio to max uint\\n        uint128 localMaxRatio = _boostEnabled ? _maxRatio : uint128(-1);\\n        require(checkParams(_minRatio, localMaxRatio), \\\"Must be correct params\\\");\\n\\n        SubPosition storage subInfo = subscribersPos[msg.sender];\\n\\n        AaveHolder memory subscription = AaveHolder({\\n                minRatio: _minRatio,\\n                maxRatio: localMaxRatio,\\n                optimalRatioBoost: _optimalBoost,\\n                optimalRatioRepay: _optimalRepay,\\n                user: msg.sender,\\n                boostEnabled: _boostEnabled\\n            });\\n\\n        changeIndex++;\\n\\n        if (subInfo.subscribed) {\\n            subscribers[subInfo.arrPos] = subscription;\\n\\n            emit Updated(msg.sender);\\n            emit ParamUpdates(msg.sender, _minRatio, localMaxRatio, _optimalBoost, _optimalRepay, _boostEnabled);\\n        } else {\\n            subscribers.push(subscription);\\n\\n            subInfo.arrPos = subscribers.length - 1;\\n            subInfo.subscribed = true;\\n\\n            emit Subscribed(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Called by the users DSProxy\\n    /// @dev Owner who subscribed cancels his subscription\\n    function unsubscribe() external {\\n        _unsubscribe(msg.sender);\\n    }\\n\\n    /// @dev Checks limit if minRatio is bigger than max\\n    /// @param _minRatio Minimum ratio, bellow which repay can be triggered\\n    /// @param _maxRatio Maximum ratio, over which boost can be triggered\\n    /// @return Returns bool if the params are correct\\n    function checkParams(uint128 _minRatio, uint128 _maxRatio) internal pure returns (bool) {\\n\\n        if (_minRatio > _maxRatio) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Internal method to remove a subscriber from the list\\n    /// @param _user The actual address that owns the Aave position\\n    function _unsubscribe(address _user) internal {\\n        require(subscribers.length > 0, \\\"Must have subscribers in the list\\\");\\n\\n        SubPosition storage subInfo = subscribersPos[_user];\\n\\n        require(subInfo.subscribed, \\\"Must first be subscribed\\\");\\n\\n        address lastOwner = subscribers[subscribers.length - 1].user;\\n\\n        SubPosition storage subInfo2 = subscribersPos[lastOwner];\\n        subInfo2.arrPos = subInfo.arrPos;\\n\\n        subscribers[subInfo.arrPos] = subscribers[subscribers.length - 1];\\n        subscribers.pop(); // remove last element and reduce arr length\\n\\n        changeIndex++;\\n        subInfo.subscribed = false;\\n        subInfo.arrPos = 0;\\n\\n        emit Unsubscribed(msg.sender);\\n    }\\n\\n    /// @dev Checks if the user is subscribed\\n    /// @param _user The actual address that owns the Aave position\\n    /// @return If the user is subscribed\\n    function isSubscribed(address _user) public view returns (bool) {\\n        SubPosition storage subInfo = subscribersPos[_user];\\n\\n        return subInfo.subscribed;\\n    }\\n\\n    /// @dev Returns subscribtion information about a user\\n    /// @param _user The actual address that owns the Aave position\\n    /// @return Subscription information about the user if exists\\n    function getHolder(address _user) public view returns (AaveHolder memory) {\\n        SubPosition storage subInfo = subscribersPos[_user];\\n\\n        return subscribers[subInfo.arrPos];\\n    }\\n\\n    /// @notice Helper method to return all the subscribed CDPs\\n    /// @return List of all subscribers\\n    function getSubscribers() public view returns (AaveHolder[] memory) {\\n        return subscribers;\\n    }\\n\\n    /// @notice Helper method for the frontend, returns all the subscribed CDPs paginated\\n    /// @param _page What page of subscribers you want\\n    /// @param _perPage Number of entries per page\\n    /// @return List of all subscribers for that page\\n    function getSubscribersByPage(uint _page, uint _perPage) public view returns (AaveHolder[] memory) {\\n        AaveHolder[] memory holders = new AaveHolder[](_perPage);\\n\\n        uint start = _page * _perPage;\\n        uint end = start + _perPage;\\n\\n        end = (end > holders.length) ? holders.length : end;\\n\\n        uint count = 0;\\n        for (uint i = start; i < end; i++) {\\n            holders[count] = subscribers[i];\\n            count++;\\n        }\\n\\n        return holders;\\n    }\\n\\n    ////////////// ADMIN METHODS ///////////////////\\n\\n    /// @notice Admin function to unsubscribe a position\\n    /// @param _user The actual address that owns the Aave position\\n    function unsubscribeByAdmin(address _user) public onlyOwner {\\n        SubPosition storage subInfo = subscribersPos[_user];\\n\\n        if (subInfo.subscribed) {\\n            _unsubscribe(_user);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/auth/AdminAuth.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\ncontract AdminAuth {\\n\\n    using SafeERC20 for ERC20;\\n\\n    address public owner;\\n    address public admin;\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender);\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\\n    }\\n\\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\\n    /// @param _admin Address of multisig that becomes admin\\n    function setAdminByOwner(address _admin) public {\\n        require(msg.sender == owner);\\n        require(admin == address(0));\\n\\n        admin = _admin;\\n    }\\n\\n    /// @notice Admin is able to set new admin\\n    /// @param _admin Address of multisig that becomes new admin\\n    function setAdminByAdmin(address _admin) public {\\n        require(msg.sender == admin);\\n\\n        admin = _admin;\\n    }\\n\\n    /// @notice Admin is able to change owner\\n    /// @param _owner Address of new owner\\n    function setOwnerByAdmin(address _owner) public {\\n        require(msg.sender == admin);\\n\\n        owner = _owner;\\n    }\\n\\n    /// @notice Destroy the contract\\n    function kill() public onlyOwner {\\n        selfdestruct(payable(owner));\\n    }\\n\\n    /// @notice  withdraw stuck funds\\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            payable(owner).transfer(_amount);\\n        } else {\\n            ERC20(_token).safeTransfer(owner, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     */\\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ERC20 {\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    function decimals() external view returns (uint256 digits);\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"ParamUpdates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unsubscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct AaveSubscriptionsV2.AaveHolder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscribers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct AaveSubscriptionsV2.AaveHolder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"}],\"name\":\"getSubscribersByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct AaveSubscriptionsV2.AaveHolder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isSubscribed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_optimalBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_optimalRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"_boostEnabled\",\"type\":\"bool\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscribers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribersPos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"arrPos\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"subscribed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unsubscribeByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveSubscriptionsV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}