{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\r\n    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\r\n    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\r\n              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\r\n             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\r\n          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\r\n        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\r\n       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\r\n      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\r\n     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\r\n    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\r\n   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\r\n    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\r\n       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\r\n          ...'..     .';;;;;;;;;;;;;;,,,'.\r\n                       ...............\r\n*/\r\n\r\n// https://github.com/trusttoken/smart-contracts\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/common/Initializable.sol\r\n\r\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/common/UpgradeableOwnable.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {Context} from \"@openzeppelin/contracts/GSN/Context.sol\";\r\n\r\n// import {Initializable} from \"contracts/truefi/common/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ILoanToken.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILoanToken is IERC20 {\r\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\r\n\r\n    function borrower() external view returns (address);\r\n\r\n    function amount() external view returns (uint256);\r\n\r\n    function term() external view returns (uint256);\r\n\r\n    function apy() external view returns (uint256);\r\n\r\n    function start() external view returns (uint256);\r\n\r\n    function lender() external view returns (address);\r\n\r\n    function debt() external view returns (uint256);\r\n\r\n    function profit() external view returns (uint256);\r\n\r\n    function status() external view returns (Status);\r\n\r\n    function borrowerFee() external view returns (uint256);\r\n\r\n    function receivedAmount() external view returns (uint256);\r\n\r\n    function isLoanToken() external pure returns (bool);\r\n\r\n    function getParameters()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function fund() external;\r\n\r\n    function withdraw(address _beneficiary) external;\r\n\r\n    function close() external;\r\n\r\n    function liquidate() external;\r\n\r\n    function redeem(uint256 _amount) external;\r\n\r\n    function repay(address _sender, uint256 _amount) external;\r\n\r\n    function reclaim() external;\r\n\r\n    function allowTransfer(address account, bool _status) external;\r\n\r\n    function repaid() external view returns (uint256);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function value(uint256 _balance) external view returns (uint256);\r\n\r\n    function currencyToken() external view returns (IERC20);\r\n\r\n    function version() external pure returns (uint8);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ITrueFiPool.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * TruePool is an ERC20 which represents a share of a pool\r\n *\r\n * This contract can be used to wrap opportunities to be compatible\r\n * with TrueFi and allow users to directly opt-in through the TUSD contract\r\n *\r\n * Each TruePool is also a staking opportunity for TRU\r\n */\r\ninterface ITrueFiPool is IERC20 {\r\n    /// @dev pool token (TUSD)\r\n    function currencyToken() external view returns (IERC20);\r\n\r\n    /// @dev stake token (TRU)\r\n    function stakeToken() external view returns (IERC20);\r\n\r\n    /**\r\n     * @dev join pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Mint pool tokens based on value to sender\r\n     */\r\n    function join(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev exit pool\r\n     * 1. Transfer pool tokens from sender\r\n     * 2. Burn pool tokens\r\n     * 3. Transfer value of pool tokens in TUSD to sender\r\n     */\r\n    function exit(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev borrow from pool\r\n     * 1. Transfer TUSD to sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function borrow(uint256 amount, uint256 fee) external;\r\n\r\n    /**\r\n     * @dev join pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function repay(uint256 amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/IStakingPool.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IStakingPool is IERC20 {\r\n    function stakeSupply() external view returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function payFee(uint256 amount, uint256 endTime) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ITruPriceOracle.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ITruPriceOracle {\r\n    function usdToTru(uint256 amount) external view returns (uint256);\r\n\r\n    function truToUsd(uint256 amount) external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ILoanFactory.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ILoanFactory {\r\n    function createLoanToken(\r\n        uint256 _amount,\r\n        uint256 _term,\r\n        uint256 _apy\r\n    ) external;\r\n\r\n    function isLoanToken(address) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/truefi/Liquidator.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n// import {Ownable} from \"contracts/truefi/common/UpgradeableOwnable.sol\";\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// import {ILoanToken} from \"contracts/truefi/interface/ILoanToken.sol\";\r\n// import {ITrueFiPool} from \"contracts/truefi/interface/ITrueFiPool.sol\";\r\n// import {IStakingPool} from \"contracts/truefi/interface/IStakingPool.sol\";\r\n// import {ITruPriceOracle} from \"contracts/truefi/interface/ITruPriceOracle.sol\";\r\n// import {ILoanFactory} from \"contracts/truefi/interface/ILoanFactory.sol\";\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title Liquidator\r\n * @notice Liquidate LoanTokens with this Contract\r\n * @dev When a Loan becomes defaulted, Liquidator allows to\r\n * compensate pool participants, by transfering some of TRU to the pool\r\n */\r\ncontract Liquidator is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // ================ WARNING ==================\r\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\r\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\r\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\r\n    // ========= IN STORAGE CORRUPTION ===========\r\n\r\n    ITrueFiPool public pool;\r\n    IStakingPool public stkTru;\r\n    IERC20 public tru;\r\n    ITruPriceOracle public oracle;\r\n    ILoanFactory public factory;\r\n\r\n    // max share of tru to be taken from staking pool during liquidation\r\n    // 1000 -> 10%\r\n    uint256 public fetchMaxShare;\r\n\r\n    // ======= STORAGE DECLARATION END ============\r\n\r\n    /**\r\n     * @dev Emitted fetch max share is changed\r\n     * @param newShare New share set\r\n     */\r\n    event FetchMaxShareChanged(uint256 newShare);\r\n\r\n    /**\r\n     * @dev Emitted when oracle is changed\r\n     * @param newOracle New oracle address\r\n     */\r\n    event OracleChanged(ITruPriceOracle newOracle);\r\n\r\n    /**\r\n     * @dev Emitted when a loan gets liquidated\r\n     * @param loan Loan that has been liquidated\r\n     */\r\n    event Liquidated(ILoanToken loan);\r\n\r\n    /**\r\n     * @dev Initialize this contract\r\n     */\r\n    function initialize(\r\n        ITrueFiPool _pool,\r\n        IStakingPool _stkTru,\r\n        IERC20 _tru,\r\n        ITruPriceOracle _oracle,\r\n        ILoanFactory _factory\r\n    ) public initializer {\r\n        Ownable.initialize();\r\n\r\n        pool = _pool;\r\n        stkTru = _stkTru;\r\n        tru = _tru;\r\n        oracle = _oracle;\r\n        factory = _factory;\r\n        fetchMaxShare = 1000;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new max fetch share\r\n     * @param newShare New share to be set\r\n     */\r\n    function setFetchMaxShare(uint256 newShare) external onlyOwner {\r\n        require(newShare > 0, \"Liquidator: Share cannot be set to 0\");\r\n        require(newShare <= 10000, \"Liquidator: Share cannot be larger than 10000\");\r\n        fetchMaxShare = newShare;\r\n        emit FetchMaxShareChanged(newShare);\r\n    }\r\n\r\n    /**\r\n     * @dev Change oracle\r\n     * @param newOracle New oracle for liquidator\r\n     */\r\n    function setOracle(ITruPriceOracle newOracle) external onlyOwner {\r\n        // Check if new oracle implements method\r\n        require(newOracle.usdToTru(1 ether) > 0, \"Liquidator: Oracle lacks usdToTru method\");\r\n\r\n        oracle = newOracle;\r\n\r\n        emit OracleChanged(newOracle);\r\n    }\r\n\r\n    /**\r\n     * @dev Liquidates a defaulted Loan, withdraws a portion of tru from staking pool\r\n     * then transfers tru to TrueFiPool as compensation\r\n     * @param loan Loan to be liquidated\r\n     */\r\n    function liquidate(ILoanToken loan) external {\r\n        require(factory.isLoanToken(address(loan)), \"Liquidator: Unknown loan\");\r\n        uint256 defaultedValue = getAmountToWithdraw(loan.debt().sub(loan.repaid()));\r\n        stkTru.withdraw(defaultedValue);\r\n        require(loan.status() == ILoanToken.Status.Defaulted, \"Liquidator: Loan must be defaulted\");\r\n        loan.liquidate();\r\n        require(tru.transfer(address(pool), defaultedValue));\r\n        emit Liquidated(loan);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of tru to be withdrawn from staking pool (not more than preset share)\r\n     * @param deficit Amount of tusd lost on defaulted loan\r\n     * @return amount of TRU to be withdrawn on liquidation\r\n     */\r\n    function getAmountToWithdraw(uint256 deficit) internal view returns (uint256) {\r\n        uint256 stakingPoolSupply = stkTru.stakeSupply();\r\n        uint256 maxWithdrawValue = stakingPoolSupply.mul(fetchMaxShare).div(10000);\r\n        uint256 deficitInTru = oracle.usdToTru(deficit);\r\n        return maxWithdrawValue > deficitInTru ? deficitInTru : maxWithdrawValue;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"FetchMaxShareChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ILoanToken\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITruPriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ILoanFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchMaxShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueFiPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"contract IStakingPool\",\"name\":\"_stkTru\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tru\",\"type\":\"address\"},{\"internalType\":\"contract ITruPriceOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract ILoanFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoanToken\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ITruPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ITrueFiPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"setFetchMaxShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITruPriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkTru\",\"outputs\":[{\"internalType\":\"contract IStakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tru\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Liquidator","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d8d8d5bef80facb3fd36771ed533ddb272f045d52fe693ac6004cd5cf083aab"}]}