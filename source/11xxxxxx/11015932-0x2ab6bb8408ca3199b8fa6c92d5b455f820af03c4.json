{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-02-25\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256);\r\n\r\n    function balanceOf(address tokenOwner)\r\n        public\r\n        constant\r\n        returns (uint256 balance);\r\n\r\n    function allowance(address tokenOwner, address spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining);\r\n\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint256 tokens)\r\n        public\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(\r\n        address indexed tokenOwner,\r\n        address indexed spender,\r\n        uint256 tokens\r\n    );\r\n}\r\n\r\ncontract ERC827 {\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value,\r\n        bytes _data\r\n    ) public returns (bool);\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    ) public returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    ) public returns (bool);\r\n}\r\n\r\ncontract TEFoodsToken is Ownable, ERC20Interface {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"TE-FOOD/TustChain\";\r\n    string public constant symbol = \"TONE\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 constant _totalSupply = 1000000000 * 1 ether;\r\n    uint256 public transferrableTime = 9999999999;\r\n    uint256 _vestedSupply;\r\n    uint256 _circulatingSupply;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    struct vestedBalance {\r\n        address addr;\r\n        uint256 balance;\r\n    }\r\n    mapping(uint256 => vestedBalance[]) vestingMap;\r\n\r\n    function TEFoodsToken() public {\r\n        owner = msg.sender;\r\n        balances[0x00] = _totalSupply;\r\n    }\r\n\r\n    event VestedTokensReleased(address to, uint256 amount);\r\n\r\n    function allocateTokens(address addr, uint256 amount)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(addr != 0x00);\r\n        require(amount > 0);\r\n        balances[0x00] = balances[0x00].sub(amount);\r\n        balances[addr] = balances[addr].add(amount);\r\n        _circulatingSupply = _circulatingSupply.add(amount);\r\n        assert(\r\n            _vestedSupply.add(_circulatingSupply).add(balances[0x00]) ==\r\n                _totalSupply\r\n        );\r\n        Transfer(0x00, addr, amount);\r\n        return true;\r\n    }\r\n\r\n    function allocateVestedTokens(\r\n        address addr,\r\n        uint256 amount,\r\n        uint256 vestingPeriod\r\n    ) public onlyOwner returns (bool) {\r\n        require(addr != 0x00);\r\n        require(amount > 0);\r\n        require(vestingPeriod > 0);\r\n        balances[0x00] = balances[0x00].sub(amount);\r\n        vestingMap[vestingPeriod].push(vestedBalance(addr, amount));\r\n        _vestedSupply = _vestedSupply.add(amount);\r\n        assert(\r\n            _vestedSupply.add(_circulatingSupply).add(balances[0x00]) ==\r\n                _totalSupply\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function releaseVestedTokens(uint256 vestingPeriod) public {\r\n        require(now >= transferrableTime.add(vestingPeriod));\r\n        require(vestingMap[vestingPeriod].length > 0);\r\n        require(vestingMap[vestingPeriod][0].balance > 0);\r\n        var v = vestingMap[vestingPeriod];\r\n        for (uint8 i = 0; i < v.length; i++) {\r\n            balances[v[i].addr] = balances[v[i].addr].add(v[i].balance);\r\n            _circulatingSupply = _circulatingSupply.add(v[i].balance);\r\n            _vestedSupply = _vestedSupply.sub(v[i].balance);\r\n            VestedTokensReleased(v[i].addr, v[i].balance);\r\n            Transfer(0x00, v[i].addr, v[i].balance);\r\n            v[i].balance = 0;\r\n        }\r\n    }\r\n\r\n    function enableTransfers() public onlyOwner returns (bool) {\r\n        transferrableTime = now.add(0);\r\n        owner = 0x00;\r\n        return true;\r\n    }\r\n\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _circulatingSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner)\r\n        public\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function vestedBalanceOf(address tokenOwner, uint256 vestingPeriod)\r\n        public\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        var v = vestingMap[vestingPeriod];\r\n        for (uint8 i = 0; i < v.length; i++) {\r\n            if (v[i].addr == tokenOwner) return v[i].balance;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 tokens)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(now >= transferrableTime);\r\n        require(to != address(this));\r\n        require(balances[msg.sender] >= tokens);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 tokens)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(now >= transferrableTime);\r\n        require(spender != address(this));\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) public returns (bool success) {\r\n        require(now >= transferrableTime);\r\n        require(to != address(this));\r\n        require(allowed[from][msg.sender] >= tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TEFoods827Token is TEFoodsToken, ERC827 {\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value,\r\n        bytes _data\r\n    ) public returns (bool) {\r\n        super.approve(_spender, _value);\r\n        require(_spender.call(_data));\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    ) public returns (bool) {\r\n        super.transfer(_to, _value);\r\n        require(_to.call(_data));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    ) public returns (bool) {\r\n        super.transferFrom(_from, _to, _value);\r\n        require(_to.call(_data));\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"vestedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"releaseVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"allocateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferrableTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestedTokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TEFoods827Token","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://240d5b45e082ec1ce44ea85bb7bbce831c4a198381b97c0b63dd88095ec25b53"}]}