{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/E/Projects/Me/gemly-contracts/contracts/access/Governable.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./Governance.sol\\\";\\r\\n\\r\\ncontract Governable {\\r\\n  Governance public governance;\\r\\n\\r\\n  constructor(address _governance) public {\\r\\n    require(_governance != address(0), \\\"New governance shouldn't be empty\\\");\\r\\n    governance = Governance(_governance);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(governance.isOwner(msg.sender), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n  \\r\\n  modifier onlyGemlyMinter() {\\r\\n    require(governance.isGemlyMinter(msg.sender), \\\"Not gemly minter\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyGameMinter() {\\r\\n    require(governance.isGameMinter(msg.sender), \\\"Not game minter\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"New governance shouldn't be empty\\\");\\r\\n    governance = Governance(_governance);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Projects/Me/gemly-contracts/contracts/access/Governance.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract Governance {\\r\\n  address public owner;\\r\\n  address public ownerCandidate;\\r\\n\\r\\n  address public boosterEscrow;\\r\\n\\r\\n  mapping(address => bool) public games;\\r\\n  mapping(address => bool) public gemlyMinters;\\r\\n  mapping(address => bool) public gameMinters;\\r\\n\\r\\n  event OwnerCandidateSet(address indexed ownerCandidate);\\r\\n  event OwnerConfirmed(address indexed owner);\\r\\n  event BoosterEscrowSet(address indexed escrow);\\r\\n  event GemlyMinterGranted(address indexed minter);\\r\\n  event GemlyMinterRevoked(address indexed minter);\\r\\n  event GameMinterGranted(address indexed minter);\\r\\n  event GameMinterRevoked(address indexed minter);\\r\\n  event GameGranted(address indexed game);\\r\\n  event GameRevoked(address indexed game);\\r\\n\\r\\n  constructor() public {\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(isOwner(msg.sender), \\\"Not owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwnerCandidate() {\\r\\n    require(isOwnerCandidate(msg.sender), \\\"Not owner candidate\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setOwnerCandidate(address _ownerCandidate) external onlyOwner {\\r\\n    require(_ownerCandidate != address(0), \\\"New owner shouldn't be empty\\\");\\r\\n    ownerCandidate = _ownerCandidate;\\r\\n\\r\\n    emit OwnerCandidateSet(ownerCandidate);\\r\\n  }\\r\\n\\r\\n  function confirmOwner() external onlyOwnerCandidate {\\r\\n    owner = ownerCandidate;\\r\\n    ownerCandidate = address(0x0);\\r\\n\\r\\n    emit OwnerConfirmed(owner);\\r\\n  }\\r\\n\\r\\n  function setBoosterEscrow(address _escrow) external onlyOwner {\\r\\n    boosterEscrow = _escrow;\\r\\n\\r\\n    emit BoosterEscrowSet(boosterEscrow);\\r\\n  }\\r\\n\\r\\n  function grantGemlyMinter(address _minter) external onlyOwner {\\r\\n    gemlyMinters[_minter] = true;\\r\\n\\r\\n    emit GemlyMinterGranted(_minter);\\r\\n  }\\r\\n\\r\\n  function revokeGemlyMinter(address _minter) external onlyOwner {\\r\\n    gemlyMinters[_minter] = false;\\r\\n\\r\\n    emit GemlyMinterRevoked(_minter);\\r\\n  }\\r\\n\\r\\n  function grantGameMinter(address _minter) external onlyOwner {\\r\\n    gameMinters[_minter] = true;\\r\\n\\r\\n    emit GameMinterGranted(_minter);\\r\\n  }\\r\\n\\r\\n  function revokeGameMinter(address _minter) external onlyOwner {\\r\\n    gameMinters[_minter] = false;\\r\\n\\r\\n    emit GameMinterRevoked(_minter);\\r\\n  }\\r\\n\\r\\n  function grantGame(address _minter) external onlyOwner {\\r\\n    games[_minter] = true;\\r\\n\\r\\n    emit GameGranted(_minter);\\r\\n  }\\r\\n\\r\\n  function revokeGame(address _minter) external onlyOwner {\\r\\n    games[_minter] = false;\\r\\n\\r\\n    emit GameRevoked(_minter);\\r\\n  }\\r\\n\\r\\n  function isOwner(address _account) public view returns (bool) {\\r\\n    return _account == owner;\\r\\n  }\\r\\n\\r\\n  function isOwnerCandidate(address _account) public view returns (bool) {\\r\\n    return _account == ownerCandidate;\\r\\n  }\\r\\n\\r\\n  function isGemlyMinter(address _minter) public view returns (bool) {\\r\\n    return gemlyMinters[_minter];\\r\\n  }\\r\\n\\r\\n  function isGameMinter(address _minter) public view returns (bool) {\\r\\n    return gameMinters[_minter];\\r\\n  }\\r\\n\\r\\n  function isGame(address _game) public view returns (bool) {\\r\\n    return games[_game];\\r\\n  }\\r\\n\\r\\n  function isBoosterEscrow(address _address) public view returns (bool) {\\r\\n    return _address == boosterEscrow;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/E/Projects/Me/gemly-contracts/contracts/distribution/TokenDistribution.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"../access/Governable.sol\\\";\\r\\nimport \\\"../external/IUniswap.sol\\\";\\r\\n\\r\\ncontract TokenDistribution is Governable, Pausable {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using SafeMath for uint256;\\r\\n  using SafeMath for uint112;\\r\\n\\r\\n  IERC20  public immutable GEMLY;\\r\\n  IERC20  public immutable COLLATERAL;\\r\\n  address public immutable LP;\\r\\n\\r\\n  uint256 public price;\\r\\n  uint256 public progress;\\r\\n  uint256 public totalSupply;\\r\\n  \\r\\n  address private constant  UNIROUTER     = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n  address private constant  FACTORY       = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n  address private           WETHAddress   = IUniswap(UNIROUTER).WETH();\\r\\n  uint256 public constant   DECIMALS      = 10**18;\\r\\n\\r\\n  event Bought(address indexed account, uint256 amount);\\r\\n\\r\\n  constructor(address _governance, IERC20 _gemly, IERC20 _collateral) public\\r\\n    Governable(_governance)\\r\\n  {\\r\\n    GEMLY = _gemly;\\r\\n    COLLATERAL = _collateral;\\r\\n    LP = IUniswap(FACTORY).getPair(WETHAddress, address(_collateral));\\r\\n  }\\r\\n\\r\\n  // TODO: Make it work once only, have other method for price change...\\r\\n  function init(uint256 _price, uint256 _totalSupply) external onlyGovernance {\\r\\n    require(_price > 0);\\r\\n\\r\\n    price = _price;\\r\\n    totalSupply = _totalSupply;\\r\\n  }\\r\\n\\r\\n  function pause() external onlyGovernance {\\r\\n    super._pause();\\r\\n  }\\r\\n\\r\\n  function unpause() external onlyGovernance {\\r\\n    super._unpause();\\r\\n  }\\r\\n\\r\\n  function offerInCollateral(uint256 _amount) public view returns(uint256) {\\r\\n    uint256 amount = _amount.mul(DECIMALS).div(price);\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  function offerInEth(uint256 _amount) public view returns(uint256) {\\r\\n    uint256 amount = estimatedCollateralForETH(_amount);\\r\\n    return offerInCollateral(amount);\\r\\n  }\\r\\n\\r\\n  function canBuy(uint256 _amount) public view returns(bool) {\\r\\n    uint256 amount = offerInCollateral(_amount);\\r\\n    return !paused() && progress.add(amount) <= totalSupply;\\r\\n  }\\r\\n\\r\\n  function canBuyWithEth(uint256 _amount) public view returns(bool) {\\r\\n    uint256 amount = estimatedCollateralForETH(_amount);\\r\\n    return canBuy(amount);\\r\\n  }\\r\\n\\r\\n  function buy(uint256 _amount) public {\\r\\n    require(canBuy(_amount), \\\"Exceeded total supply limit or paused\\\");\\r\\n\\r\\n    COLLATERAL.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    uint256 amount = offerInCollateral(_amount);\\r\\n    GEMLY.safeTransfer(msg.sender, amount);\\r\\n    progress = progress.add(amount);\\r\\n\\r\\n    emit Bought(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function buyWithEth() public payable {\\r\\n    require(canBuyWithEth(msg.value), \\\"Exceeded total supply limit or paused\\\");\\r\\n\\r\\n    uint256 amount = offerInEth(msg.value);\\r\\n    GEMLY.safeTransfer(msg.sender, amount);\\r\\n    progress = progress.add(amount);\\r\\n\\r\\n    emit Bought(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function withdrawGemly() external onlyGovernance {\\r\\n    uint256 balance = GEMLY.balanceOf(address(this));\\r\\n    GEMLY.safeTransfer(msg.sender, balance);\\r\\n  }\\r\\n\\r\\n  function withdrawCollateral() external onlyGovernance {\\r\\n    uint256 balance = COLLATERAL.balanceOf(address(this));\\r\\n    COLLATERAL.safeTransfer(msg.sender, balance);\\r\\n  }\\r\\n\\r\\n  function withdrawEth() external onlyGovernance {\\r\\n    (bool success, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\r\\n    require(success);\\r\\n  }\\r\\n\\r\\n  function estimatedCollateralForETH(uint256 _amount) internal view returns (uint256) {\\r\\n    (uint112 reserve0, uint112 reserve1, ) = IUniswap(LP).getReserves();\\r\\n    if(IUniswap(LP).token0() == address(COLLATERAL)) {\\r\\n      return reserve0.mul(_amount).div(reserve1);\\r\\n    } else {\\r\\n      return reserve1.mul(_amount).div(reserve0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  receive() external payable {\\r\\n    buyWithEth();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Projects/Me/gemly-contracts/contracts/external/IUniswap.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IUniswap {\\r\\n  function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\\r\\n    external returns (uint256[] memory amounts);\\r\\n  function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\\r\\n    external payable returns (uint256[] memory amounts);\\r\\n  function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external returns (uint[] memory amounts);\\r\\n  function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)\\r\\n    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n  function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline)\\r\\n    external returns (uint amountA, uint amountB, uint liquidity);\\r\\n  function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline)\\r\\n    external returns (uint amountA, uint amountB);\\r\\n  function getPair(address tokenA, address tokenB)\\r\\n    external view returns (address pair);\\r\\n  function WETH() external pure returns (address);\\r\\n  function getAmountsOut(uint amountIn, address[] memory path)\\r\\n    external view returns (uint[] memory amounts);\\r\\n  function getAmountsIn(uint amountOut, address[] memory path)\\r\\n    external view returns (uint[] memory amounts);\\r\\n  function getReserves() \\r\\n    external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n  function token0() external view returns (address);\\r\\n  function token1() external view returns (address);\\r\\n}\"\r\n    },\r\n    \"/E/Projects/Me/gemly-contracts/contracts/staking/RefillableStakingPool.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"../tokens/GemlyToken.sol\\\";\\r\\nimport \\\"../tokens/GameToken.sol\\\";\\r\\nimport \\\"../access/Governable.sol\\\";\\r\\nimport \\\"./StakingPool.sol\\\";\\r\\n\\r\\nabstract contract RefillableStakingPool is StakingPool, ReentrancyGuard {\\r\\n  using Address for address;\\r\\n  using SafeERC20 for GemlyToken;\\r\\n  using SafeERC20 for GameToken;\\r\\n\\r\\n  GemlyToken public coreToken;\\r\\n  GameToken public rewardToken;\\r\\n\\r\\n  uint256 public duration = 7 days;\\r\\n  uint256 public periodFinish = 0;\\r\\n  uint256 public rewardAmount = 100 * 10 ** 18;\\r\\n  uint256 public totalRewardRate = 0;\\r\\n  uint256 public lastUpdateTime;\\r\\n  uint256 public rewardPerTokenStored;\\r\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n  mapping(address => uint256) public rewards;\\r\\n\\r\\n  event RewardAdded(uint256 reward);\\r\\n  event Staked(address indexed user, uint256 amount);\\r\\n  event Withdrawn(address indexed user, uint256 amount);\\r\\n  event RewardPaid(address indexed user, uint256 reward);\\r\\n\\r\\n  modifier updateReward(address _account) {\\r\\n    rewardPerTokenStored = rewardPerToken();\\r\\n    lastUpdateTime = lastTimeRewardApplicable();\\r\\n    if (_account != address(0)) {\\r\\n      rewards[_account] = earned(_account);\\r\\n      userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address _governance, address _coreToken, address _rewardToken) public\\r\\n    StakingPool(_governance) {\\r\\n      coreToken = GemlyToken(_coreToken);\\r\\n      rewardToken = GameToken(_rewardToken);\\r\\n  }\\r\\n\\r\\n  function setReward(uint256 _rewardAmount, uint256 _duration) public onlyGovernance {\\r\\n    rewardAmount = _rewardAmount;\\r\\n    duration = _duration;\\r\\n  }\\r\\n\\r\\n  function lastTimeRewardApplicable() public view returns (uint256) {\\r\\n    return Math.min(block.timestamp, periodFinish);\\r\\n  }\\r\\n\\r\\n  function rewardPerToken() public view returns (uint256) {\\r\\n    if (totalSupply == 0) {\\r\\n      return rewardPerTokenStored;\\r\\n    }\\r\\n    return\\r\\n      rewardPerTokenStored.add(\\r\\n        lastTimeRewardApplicable()\\r\\n          .sub(lastUpdateTime)\\r\\n          .mul(totalRewardRate)\\r\\n          .mul(1e18)\\r\\n          .div(totalSupply)\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function rewardPerDuration(address _account, uint256 _duration) public view returns (uint256) {\\r\\n    if (totalSupply == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    return balanceOf(_account)\\r\\n      .mul(totalRewardRate)\\r\\n      .mul(_duration)\\r\\n      .div(totalSupply);\\r\\n  }\\r\\n\\r\\n  function earned(address _account) public view returns (uint256) {\\r\\n    return balanceOf(_account)\\r\\n      .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\\r\\n      .div(1e18)\\r\\n      .add(rewards[_account]);\\r\\n  }\\r\\n\\r\\n  function stake(uint256 _amount) public override updateReward(msg.sender) nonReentrant {\\r\\n    require(_amount > 0, \\\"Cannot stake 0\\\");\\r\\n    super.stake(_amount);\\r\\n    emit Staked(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 _amount) public override updateReward(msg.sender) nonReentrant {\\r\\n    require(_amount > 0, \\\"Cannot withdraw 0\\\");\\r\\n    super.withdraw(_amount);\\r\\n\\r\\n    emit Withdrawn(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  function getReward() public updateReward(msg.sender) nonReentrant {\\r\\n    uint256 reward = earned(msg.sender);\\r\\n    if (reward > 0) {\\r\\n      rewards[msg.sender] = 0;\\r\\n      rewardToken.safeTransfer(msg.sender, reward);\\r\\n\\r\\n      emit RewardPaid(msg.sender, reward);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function exit() external {\\r\\n    withdraw(balanceOf(msg.sender));\\r\\n    getReward();\\r\\n  }\\r\\n\\r\\n  function refill() external {\\r\\n    require(periodFinish == 0 || block.timestamp >= periodFinish - (15 minutes), \\\"Distribution not yet over\\\");\\r\\n\\r\\n    rewardPerTokenStored = rewardPerToken();\\r\\n    rewardToken.mint(address(this), rewardAmount);\\r\\n    totalRewardRate = rewardAmount.div(duration);\\r\\n    lastUpdateTime = block.timestamp;\\r\\n    periodFinish = block.timestamp.add(duration);\\r\\n\\r\\n    emit RewardAdded(rewardAmount);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Projects/Me/gemly-contracts/contracts/staking/StakingPool.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../access/Governable.sol\\\";\\r\\n\\r\\nabstract contract StakingPool is Governable {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  IERC20 public lpToken;\\r\\n\\r\\n  uint256 public totalSupply;\\r\\n  mapping(address => uint256) public balances;\\r\\n\\r\\n  event Recovered(address token, uint256 amount);\\r\\n\\r\\n  constructor(address _governance) public \\r\\n    Governable(_governance) {\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) public view returns (uint256) {\\r\\n    return balances[account];\\r\\n  }\\r\\n\\r\\n  function stake(uint256 _amount) public virtual {\\r\\n    lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    addStakeBalance(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 _amount) public virtual {\\r\\n    removeStakeBalance(msg.sender, _amount);\\r\\n    lpToken.safeTransfer(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  function addStakeBalance(address _owner, uint256 _amount) internal {\\r\\n    totalSupply = totalSupply.add(_amount);\\r\\n    balances[_owner] = balances[_owner].add(_amount);\\r\\n  }\\r\\n\\r\\n  function removeStakeBalance(address _owner, uint256 _amount) internal {\\r\\n    totalSupply = totalSupply.sub(_amount);\\r\\n    balances[_owner] = balances[_owner].sub(_amount);\\r\\n  }\\r\\n\\r\\n  function recoverERC20(address _token, uint256 _amount) external onlyGovernance {\\r\\n    require(_token != address(lpToken), \\\"Cannot withdraw staking tokens\\\");\\r\\n    \\r\\n    IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    emit Recovered(_token, _amount);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/E/Projects/Me/gemly-contracts/contracts/staking/UniswapStakingPool.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../external/IUniswap.sol\\\";\\r\\nimport \\\"./RefillableStakingPool.sol\\\";\\r\\nimport \\\"../distribution/TokenDistribution.sol\\\";\\r\\n\\r\\n// import \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\r\\nlibrary Babylonian {\\r\\n  function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n    if (y > 3) {\\r\\n      z = y;\\r\\n      uint256 x = y / 2 + 1;\\r\\n      while (x < z) {\\r\\n        z = x;\\r\\n        x = (y / x + x) / 2;\\r\\n      }\\r\\n    } else if (y != 0) {\\r\\n      z = 1;\\r\\n    }\\r\\n    // else z = 0\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract UniswapStakingPool is RefillableStakingPool {\\r\\n  using Address for address;\\r\\n\\r\\n  TokenDistribution private immutable  gemlyOffering;\\r\\n\\r\\n  uint256 constant          MAX_UINT      = 2**256 - 1;\\r\\n  uint256 private constant  UNITIME       = 15 minutes;\\r\\n  uint256 private constant  DECIMALS      = 10**18;\\r\\n  address private constant  UNIROUTER     = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n  address private constant  FACTORY       = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n  address private           WETHAddress   = IUniswap(UNIROUTER).WETH();\\r\\n\\r\\n  constructor(address _governance, address _coreToken, address _rewardToken, address payable _offering) public\\r\\n    RefillableStakingPool(_governance, _coreToken, _rewardToken) {\\r\\n      gemlyOffering = TokenDistribution(_offering);\\r\\n  }\\r\\n\\r\\n  function init() external payable onlyGovernance {\\r\\n    require(address(lpToken) == address(0), \\\"LP already defined\\\");\\r\\n    require(address(this).balance > 0, \\\"Balance is zero\\\");\\r\\n    require(coreToken.allowance(msg.sender, address(this)) > 0, \\\"Token balance is zero\\\");\\r\\n\\r\\n    coreToken.approve(UNIROUTER, MAX_UINT);\\r\\n    rewardToken.approve(UNIROUTER, MAX_UINT);\\r\\n\\r\\n    uint256 allowed = coreToken.allowance(msg.sender, address(this));\\r\\n    coreToken.safeTransferFrom(msg.sender, address(this), allowed);\\r\\n\\r\\n    IUniswap(UNIROUTER).addLiquidityETH{value: address(this).balance}(address(coreToken), allowed, 0, 0, msg.sender, now + UNITIME);\\r\\n    lpToken = IERC20(IUniswap(FACTORY).getPair(address(coreToken), WETHAddress));\\r\\n\\r\\n    sendDust();\\r\\n  }\\r\\n\\r\\n  function stakeWithEth() external payable updateReward(msg.sender) nonReentrant {\\r\\n    require(address(this).balance > 0, \\\"Cannot stake 0\\\");\\r\\n\\r\\n    (bool inOffering, uint256 amountEth) = canSwapInOffering();\\r\\n    uint256 amount = inOffering ? swapInOffering(amountEth) : swapInUni();\\r\\n    \\r\\n    (,,uint256 lpAmount) = IUniswap(UNIROUTER).addLiquidityETH{value: address(this).balance}(address(coreToken), amount, 0, 0, address(this), now + UNITIME);\\r\\n    super.addStakeBalance(msg.sender, lpAmount);\\r\\n    sendDust();\\r\\n\\r\\n    emit Staked(msg.sender, lpAmount);\\r\\n  }\\r\\n\\r\\n  function uniReserve() internal view returns (uint256, uint256) {\\r\\n    (uint112 reserve0, uint112 reserve1, ) = IUniswap(address(lpToken)).getReserves();\\r\\n    if(IUniswap(address(lpToken)).token0() == address(coreToken)) {\\r\\n      return (reserve0, reserve1);\\r\\n    } else {\\r\\n      return (reserve1, reserve0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function canSwapInOffering() internal view returns (bool, uint256) {\\r\\n    (uint256 uniCore, uint256 uniEth) = uniReserve();\\r\\n    uint256 offeringEth = DECIMALS;\\r\\n    uint256 offeringCore = gemlyOffering.offerInEth(offeringEth);\\r\\n\\r\\n    uint256 uniPrice = (DECIMALS).mul(uniEth).div(uniCore);\\r\\n    uint256 offeringPrice = (DECIMALS).mul(offeringEth).div(offeringCore);\\r\\n\\r\\n    if(uniPrice < offeringPrice) {\\r\\n      return (false, 0);  \\r\\n    }\\r\\n\\r\\n    uint256 amountEth = offeringEth.mul(uniCore).mul(address(this).balance).div(offeringEth.mul(uniCore).add(offeringCore.mul(uniEth)));\\r\\n    if(gemlyOffering.canBuyWithEth(amountEth)) {\\r\\n      return (true, amountEth);  \\r\\n    }\\r\\n    return (false, 0);\\r\\n  }\\r\\n\\r\\n  function swapInOffering(uint256 amount) internal returns(uint256) {\\r\\n    uint256 result = gemlyOffering.offerInEth(amount);\\r\\n    gemlyOffering.buyWithEth{value: amount}();\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  function swapInUni() internal returns(uint256) {\\r\\n    (,uint256 reserveIn) = uniReserve();\\r\\n    uint256 swapInAmount = Babylonian.sqrt(reserveIn.mul(address(this).balance.mul(3988000) + reserveIn.mul(3988009))).sub(reserveIn.mul(1997)) / 1994;\\r\\n\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = WETHAddress;\\r\\n    path[1] = address(coreToken);\\r\\n\\r\\n    uint256[] memory result = IUniswap(UNIROUTER).swapExactETHForTokens{value: swapInAmount}(0, path, address(this), now + UNITIME);\\r\\n    return result[1];\\r\\n  }\\r\\n\\r\\n  function sendDust() internal {\\r\\n    if(coreToken.balanceOf(address(this)) > 0) {\\r\\n      coreToken.safeTransfer(msg.sender, coreToken.balanceOf(address(this)));\\r\\n    }\\r\\n    if(address(this).balance > 0) {\\r\\n      (bool success, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\r\\n      require(success, \\\"Dust transfer failed\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  receive() external payable { }\\r\\n}\"\r\n    },\r\n    \"/E/Projects/Me/gemly-contracts/contracts/tokens/GameToken.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\nimport \\\"../access/Governable.sol\\\";\\r\\n\\r\\ncontract GameToken is Governable, ERC20Burnable {\\r\\n  constructor(address _governance)\\r\\n    Governable(_governance)\\r\\n    ERC20(\\\"Gemly Game Token\\\", \\\"GMT\\\")\\r\\n  public {\\r\\n  }\\r\\n\\r\\n  function mint(address account, uint256 amount) onlyGameMinter public {\\r\\n    _mint(account, amount);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/E/Projects/Me/gemly-contracts/contracts/tokens/GemlyToken.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\\\";\\r\\nimport \\\"../access/Governable.sol\\\";\\r\\n\\r\\ncontract GemlyToken is Governable, ERC20Capped {\\r\\n  constructor(address _governance)\\r\\n    Governable(_governance)\\r\\n    ERC20(\\\"Gemly Token\\\", \\\"GML\\\")\\r\\n    ERC20Capped(10 * 10 ** 6 * 10 ** 18)\\r\\n  public {\\r\\n  }\\r\\n\\r\\n  function mint(address account, uint256 amount) onlyGemlyMinter public {\\r\\n    _mint(account, amount);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor (uint256 cap_) internal {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= _cap, \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_offering\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreToken\",\"outputs\":[{\"internalType\":\"contract GemlyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract Governance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"rewardPerDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract GameToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniswapStakingPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"0000000000000000000000005053693cbd117e3bc07fa3fb08c8b02c0aaed3e1000000000000000000000000c28260fa005ef4218cce445e8975e02321fa654d0000000000000000000000007699a6634559468555575d52fa2aa5a2f97df59e0000000000000000000000007b58932c4df970179ad3dc6c2001ebdb5ab875d0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}