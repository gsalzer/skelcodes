{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/modules/ConfigNames.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.5.16;\r\n\r\nlibrary ConfigNames {\r\n    //GOVERNANCE\r\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\r\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\r\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\r\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\r\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\r\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\r\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\r\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\r\n\r\n    // POOL\r\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\r\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\r\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\r\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\r\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\r\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\r\n    \r\n    //NOT GOVERNANCE\r\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\r\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\r\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\r\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\r\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\r\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\r\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\r\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\r\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\r\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\r\n\r\n    //POOL\r\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\r\n\r\n    //wallet\r\n    bytes32 public constant TEAM = bytes32('team'); \r\n    bytes32 public constant SPARE = bytes32('spare');\r\n    bytes32 public constant REWARD = bytes32('reward');\r\n}\r\n\r\n// Root file: contracts/AAAADeploy.sol\r\n\r\npragma solidity >=0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import 'contracts/modules/ConfigNames.sol';\r\n\r\ninterface IConfigable {\r\n    function setupConfig(address config) external;\r\n}\r\n\r\ninterface IConfig {\r\n    function developer() external view returns (address);\r\n    function platform() external view returns (address);\r\n    function factory() external view returns (address);\r\n    function mint() external view returns (address);\r\n    function token() external view returns (address);\r\n    function share() external view returns (address);\r\n    function governor() external view returns (address);\r\n    function initialize (address _platform, address _factory, address _mint, address _token, address _share, address _governor) external;\r\n    function initParameter() external;\r\n    function addMintToken(address _token) external;\r\n    function setWallets(bytes32[] calldata _names, address[] calldata _wallets) external;\r\n    function isMintToken(address _token) external view returns (bool);\r\n    function changeDeveloper(address _developer) external;\r\n    function setValue(bytes32 _key, uint _value) external;\r\n}\r\n\r\ninterface IAAAAMint {\r\n    function sync() external;\r\n}\r\n\r\ninterface IAAAAShare {\r\n    function setShareToken(address _shareToken) external;\r\n}\r\n\r\ninterface IAAAAToken {\r\n    function initialize() external;\r\n}\r\n\r\ninterface IAAAAFactory {\r\n    function countPools() external view returns(uint);\r\n    function countBallots() external view returns(uint);\r\n    function allBallots(uint index) external view returns(address);\r\n    function allPools(uint index) external view returns(address);\r\n    function isPool(address addr) external view returns(bool);\r\n    function getPool(address lend, address collateral) external view returns(address);\r\n    function createPool(address _lendToken, address _collateralToken) external returns (address pool);\r\n    function changeBallotByteHash(bytes32 _hash) external;\r\n}\r\n\r\ninterface IMasterChef {\r\n    function cake() external view returns(address);\r\n}\r\n\r\ninterface ILPStrategyFactory {\r\n    function createStrategy(address _collateralToken, address _poolAddress, uint _lpPoolpid) external returns (address _strategy);\r\n}\r\n\r\ninterface IAAAAPlatform {\r\n    function switchStrategy(address _lendToken, address _collateralToken, address _collateralStrategy) external;\r\n}\r\n\r\ncontract AAAADeploy {\r\n    address public owner;\r\n    address public config;\r\n    address public LPStrategyFactory;\r\n    bool public LPStrategyCanMint;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\r\n        _;\r\n    }\r\n \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setupConfig(address _config) onlyOwner external {\r\n        require(_config != address(0), \"ZERO ADDRESS\");\r\n        config = _config;\r\n    }\r\n\r\n    function changeDeveloper(address _developer) onlyOwner external {\r\n        IConfig(config).changeDeveloper(_developer);\r\n    }\r\n    \r\n    function setMasterchef(address _LPStrategyFactory, bool _LPStrategyCanMint) onlyOwner external {\r\n        LPStrategyFactory = _LPStrategyFactory;\r\n        LPStrategyCanMint = _LPStrategyCanMint;\r\n    }\r\n\r\n    function createPool(address _lendToken, address _collateralToken, uint _lpPoolpid) onlyOwner public {\r\n        if(LPStrategyCanMint) {\r\n            require(IConfig(config).isMintToken(_lendToken), 'REQUEST ADD MINT TOKEN FIRST');\r\n        }\r\n        address pool = IAAAAFactory(IConfig(config).factory()).createPool(_lendToken, _collateralToken);\r\n        address strategy = ILPStrategyFactory(LPStrategyFactory).createStrategy(_collateralToken, pool, _lpPoolpid);\r\n        IAAAAPlatform(IConfig(config).platform()).switchStrategy(_lendToken, _collateralToken, strategy);\r\n    }\r\n\r\n    function changeBallotByteHash(bytes32 _hash) onlyOwner external {\r\n        IAAAAFactory(IConfig(config).factory()).changeBallotByteHash(_hash);\r\n    }\r\n\r\n    function addMintToken(address _token) onlyOwner external {\r\n        IConfig(config).addMintToken(_token);\r\n    }\r\n\r\n    function changeMintPerBlock(uint _value) onlyOwner external {\r\n        IConfig(config).setValue(ConfigNames.MINT_AMOUNT_PER_BLOCK, _value);\r\n        IAAAAMint(IConfig(config).mint()).sync();\r\n    }\r\n\r\n    function setShareToken(address _shareToken) onlyOwner external {\r\n        IAAAAShare(IConfig(config).share()).setShareToken(_shareToken);\r\n    }\r\n\r\n  }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LPStrategyCanMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPStrategyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addMintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"changeBallotByteHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"changeDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeMintPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpPoolpid\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LPStrategyFactory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_LPStrategyCanMint\",\"type\":\"bool\"}],\"name\":\"setMasterchef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shareToken\",\"type\":\"address\"}],\"name\":\"setShareToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setupConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AAAADeploy","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f9300a2a7bbbcfc0c905b2fb2bc2a85c98ba61c61e9b7bb8fa6b8cecb3ad2540"}]}