{"status":"1","message":"OK","result":[{"SourceCode":"{\"UniCore_ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\nimport \\\"./UniCore_Libraries.sol\\\";\\nimport \\\"./UniCore_Interfaces.sol\\\";\\n\\ncontract ERC20 is Context, IERC20 { \\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n//Public Functions\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n    function setBalance(address account, uint256 amount) internal returns(uint256) {\\n         _balances[account] = amount;\\n         return amount;\\n    }\\n    \\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n\\n//Internal Functions\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }  //overriden in Defiat_Token\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"},\"UniCore_Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: WHO GIVES A FUCK ANYWAY??\\r\\n\\r\\npragma solidity ^0.6.6;\\r\\n\\r\\n//UNICORE\\r\\n    interface IUniCore {\\r\\n        function viewGovernanceLevel(address _address) external view returns(uint8);\\r\\n        function viewVault() external view returns(address);\\r\\n        function viewUNIv2() external view returns(address);\\r\\n        function viewwWrappedUNIv2()external view returns(address);\\r\\n        function burnFromUni(uint256 _amount) external;\\r\\n    }\\r\\n\\r\\n//Reactor is wrapping Tokens, generates wrappped UNIv2\\r\\n    interface IReactor {\\r\\n        function wrapUNIv2(uint256 amount) external;\\r\\n        function wTransfer(address recipient, uint256 amount) external;\\r\\n        function setPublicWrappingRatio(uint256 _ratioBase100) external;\\r\\n    }\\r\\n    \\r\\n//VAULT\\r\\n    interface IVault {\\r\\n        function updateRewards() external;\\r\\n    }\\r\\n\\r\\n\\r\\n//UNISWAP\\r\\n    interface IUniswapV2Factory {\\r\\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n    \\r\\n        function feeTo() external view returns (address);\\r\\n        function feeToSetter() external view returns (address);\\r\\n        function migrator() external view returns (address);\\r\\n    \\r\\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n        function allPairs(uint) external view returns (address pair);\\r\\n        function allPairsLength() external view returns (uint);\\r\\n    \\r\\n        function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    \\r\\n        function setFeeTo(address) external;\\r\\n        function setFeeToSetter(address) external;\\r\\n        function setMigrator(address) external;\\r\\n    }\\r\\n    interface IUniswapV2Router01 {\\r\\n        function factory() external pure returns (address);\\r\\n        function WETH() external pure returns (address);\\r\\n    \\r\\n        function addLiquidity(\\r\\n            address tokenA,\\r\\n            address tokenB,\\r\\n            uint amountADesired,\\r\\n            uint amountBDesired,\\r\\n            uint amountAMin,\\r\\n            uint amountBMin,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n        function addLiquidityETH(\\r\\n            address token,\\r\\n            uint amountTokenDesired,\\r\\n            uint amountTokenMin,\\r\\n            uint amountETHMin,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n        function removeLiquidity(\\r\\n            address tokenA,\\r\\n            address tokenB,\\r\\n            uint liquidity,\\r\\n            uint amountAMin,\\r\\n            uint amountBMin,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint amountA, uint amountB);\\r\\n        function removeLiquidityETH(\\r\\n            address token,\\r\\n            uint liquidity,\\r\\n            uint amountTokenMin,\\r\\n            uint amountETHMin,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint amountToken, uint amountETH);\\r\\n        function removeLiquidityWithPermit(\\r\\n            address tokenA,\\r\\n            address tokenB,\\r\\n            uint liquidity,\\r\\n            uint amountAMin,\\r\\n            uint amountBMin,\\r\\n            address to,\\r\\n            uint deadline,\\r\\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n        ) external returns (uint amountA, uint amountB);\\r\\n        function removeLiquidityETHWithPermit(\\r\\n            address token,\\r\\n            uint liquidity,\\r\\n            uint amountTokenMin,\\r\\n            uint amountETHMin,\\r\\n            address to,\\r\\n            uint deadline,\\r\\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n        ) external returns (uint amountToken, uint amountETH);\\r\\n        function swapExactTokensForTokens(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n        function swapTokensForExactTokens(\\r\\n            uint amountOut,\\r\\n            uint amountInMax,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n            external\\r\\n            payable\\r\\n            returns (uint[] memory amounts);\\r\\n        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n            external\\r\\n            returns (uint[] memory amounts);\\r\\n        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n            external\\r\\n            returns (uint[] memory amounts);\\r\\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n            external\\r\\n            payable\\r\\n            returns (uint[] memory amounts);\\r\\n    \\r\\n        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n        function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n        function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n        function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    }\\r\\n    interface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n        function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n            address token,\\r\\n            uint liquidity,\\r\\n            uint amountTokenMin,\\r\\n            uint amountETHMin,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint amountETH);\\r\\n        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n            address token,\\r\\n            uint liquidity,\\r\\n            uint amountTokenMin,\\r\\n            uint amountETHMin,\\r\\n            address to,\\r\\n            uint deadline,\\r\\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n        ) external returns (uint amountETH);\\r\\n    \\r\\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external;\\r\\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external payable;\\r\\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external;\\r\\n    }\\r\\n    interface IUniswapV2Pair {\\r\\n        event Approval(address indexed owner, address indexed spender, uint value);\\r\\n        event Transfer(address indexed from, address indexed to, uint value);\\r\\n    \\r\\n        function name() external pure returns (string memory);\\r\\n        function symbol() external pure returns (string memory);\\r\\n        function decimals() external pure returns (uint8);\\r\\n        function totalSupply() external view returns (uint);\\r\\n        function balanceOf(address owner) external view returns (uint);\\r\\n        function allowance(address owner, address spender) external view returns (uint);\\r\\n    \\r\\n        function approve(address spender, uint value) external returns (bool);\\r\\n        function transfer(address to, uint value) external returns (bool);\\r\\n        function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n    \\r\\n        function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n        function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n        function nonces(address owner) external view returns (uint);\\r\\n    \\r\\n        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    \\r\\n        event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n        event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n        event Swap(\\r\\n            address indexed sender,\\r\\n            uint amount0In,\\r\\n            uint amount1In,\\r\\n            uint amount0Out,\\r\\n            uint amount1Out,\\r\\n            address indexed to\\r\\n        );\\r\\n        event Sync(uint112 reserve0, uint112 reserve1);\\r\\n    \\r\\n        function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n        function factory() external view returns (address);\\r\\n        function token0() external view returns (address);\\r\\n        function token1() external view returns (address);\\r\\n        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n        function price0CumulativeLast() external view returns (uint);\\r\\n        function price1CumulativeLast() external view returns (uint);\\r\\n        function kLast() external view returns (uint);\\r\\n    \\r\\n        function mint(address to) external returns (uint liquidity);\\r\\n        function burn(address to) external returns (uint amount0, uint amount1);\\r\\n        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n        function skim(address to) external;\\r\\n        function sync() external;\\r\\n    \\r\\n        function initialize(address, address) external;\\r\\n    }\\r\\n    interface IWETH {\\r\\n        function deposit() external payable;\\r\\n        function transfer(address to, uint value) external returns (bool);\\r\\n        function withdraw(uint) external;\\r\\n    }\\r\\n    \\r\\n\"},\"UniCore_Libraries.sol\":{\"content\":\"// SPDX-License-Identifier: WHO GIVES A FUCK ANYWAY??\\r\\n\\r\\npragma solidity ^0.6.6;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    event Log(string log);\\r\\n\\r\\n}\\r\\n\"},\"UniCore_Token.sol\":{\"content\":\"// SPDX-License-Identifier: WHO GIVES A FUCK ANYWAY??\\n// but thanks a million Gwei to MIT and Zeppelin. You guys rock!!!\\n\\n// MAINNET VERSION.\\n\\npragma solidity \\u003e=0.6.0;\\n\\nimport \\\"./UniCore_ERC20.sol\\\";\\n\\ncontract UniCore_Token is ERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    event LiquidityAddition(address indexed dst, uint value);\\n    event LPTokenClaimed(address dst, uint value);\\n\\n    //ERC20\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    uint256 public constant initialSupply = 1000*1e18; // 1k\\n    \\n    //timeStamps\\n    uint256 public contractInitialized;\\n    uint256 public contractStart_Timestamp;\\n    uint256 public LGECompleted_Timestamp;\\n    uint256 public constant contributionPhase =  3 days;\\n    uint256 public constant stackingPhase = 1 hours;\\n    uint256 public constant emergencyPeriod = 4 days;\\n    \\n    //Tokenomics\\n    uint256 public totalLPTokensMinted;\\n    uint256 public totalETHContributed;\\n    uint256 public LPperETHUnit;\\n    mapping (address =\\u003e uint)  public ethContributed;\\n    uint256 public constant individualCap = 25*1e18;\\n    uint256 public constant totalCap = 500*1e18;\\n    \\n    \\n    //Ecosystem\\n    address public UniswapPair;\\n    address public wUNIv2;\\n    address public Vault;\\n    IUniswapV2Router02 public uniswapRouterV2;\\n    IUniswapV2Factory public uniswapFactory;\\n    \\n//=========================================================================================================================================\\n\\n    constructor() ERC20(\\\"Unicore\\\", \\\"UNICORE\\\") public {\\n        _mint(address(this), initialSupply);\\n        governanceLevels[msg.sender] = 2;\\n    }\\n    \\n    function initialSetup() public governanceLevel(2) {\\n        contractInitialized = block.timestamp;\\n        setBuySellFees(10, 10); //1% on buy, 1% on sell.\\n        \\n        POOL_CreateUniswapPair(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n        //0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D = UniswapV2Router02\\n        //0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f = UniswapV2Factory\\n    }\\n    \\n    //Pool UniSwap pair creation method (called by  initialSetup() )\\n    function POOL_CreateUniswapPair(address router, address factory) internal returns (address) {\\n        require(contractInitialized \\u003e 0, \\\"Requires intialization 1st\\\");\\n        \\n        uniswapRouterV2 = IUniswapV2Router02(router != address(0) ? router : 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        uniswapFactory = IUniswapV2Factory(factory != address(0) ? factory : 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f); \\n        require(UniswapPair == address(0), \\\"Token: pool already created\\\");\\n        \\n        UniswapPair = uniswapFactory.createPair(address(uniswapRouterV2.WETH()),address(this));\\n        \\n        return UniswapPair;\\n    }\\n    \\n    /* Once initialSetup has been invoked\\n    * Team will create the Vault and the LP wrapper token\\n    *  \\n    * Only AFTER these 2 addresses have been created the users\\n    * can start contributing in ETH\\n    */\\n    function secondarySetup(address _Vault, address _wUNIv2) public governanceLevel(2) {\\n        require(contractInitialized \\u003e 0 \\u0026\\u0026 contractStart_Timestamp == 0, \\\"Requires Initialization and Start\\\");\\n        setVault(_Vault); //also adds the Vault to noFeeList\\n        wUNIv2 = _wUNIv2;\\n        \\n        require(Vault != address(0) \\u0026\\u0026 wUNIv2 != address(0), \\\"Wrapper Token and Vault not Setup\\\");\\n        contractStart_Timestamp = block.timestamp;\\n    }\\n    \\n\\n//=========================================================================================================================================\\n    /* Liquidity generation logic\\n    * Steps - All tokens that will ever exist go to this contract\\n    *  \\n    * This contract accepts ETH as payable\\n    * ETH is mapped to people\\n    *    \\n    * When liquidity generation event is over \\n    * everyone can call the mint LP function.\\n    *    \\n    * which will put all the ETH and tokens inside the uniswap contract\\n    * without any involvement\\n    *    \\n    * This LP will go into this contract\\n    * And will be able to proportionally be withdrawn based on ETH put in\\n    *\\n    * emergency drain function allows the contract owner to drain all ETH and tokens from this contract\\n    * After the liquidity generation event happened. In case something goes wrong, to send ETH back\\n    */\\n\\n    string public liquidityGenerationParticipationAgreement = \\\"I agree that the developers and affiliated parties of the UniCore team are not responsible for my funds\\\";\\n\\n    \\n    /* @dev List of modifiers used to differentiate the project phases\\n     *      ETH_ContributionPhase lets users send ETH to the token contract\\n     *      LGP_possible triggers after the contributionPhase duration\\n     *      Trading_Possible: this modifiers prevent Unicore _transfer right\\n     *      after the LGE. It gives time for contributors to stake their \\n     *      tokens before fees are generated.\\n     */\\n    \\n    modifier ETH_ContributionPhase() {\\n        require(contractStart_Timestamp \\u003e 0, \\\"Requires contractTimestamp \\u003e 0\\\");\\n        require(block.timestamp \\u003c= contractStart_Timestamp.add(contributionPhase), \\\"Requires contributionPhase ongoing\\\");\\n        _;\\n    }\\n    \\n    /* if totalETHContributed is bigger than 99% of the cap\\n     * the LGE can happen (allows the LGE to happen sooner if needed)\\n     * otherwise (ETHcontributed \\u003c 99% totalCap), time contraint applies\\n     */\\n    modifier LGE_Possible() {\\n         \\n        if(totalETHContributed \\u003c totalCap.mul(99).div(100)){ \\n        require(contractStart_Timestamp \\u003e 0 , \\\"Requires contractTimestamp \\u003e 0\\\");\\n        require(block.timestamp \\u003e contractStart_Timestamp.add(contributionPhase), \\\"Requies contributionPhase ended\\\");\\n        }\\n       _; \\n    }\\n    \\n    modifier LGE_happened() {\\n        require(LGECompleted_Timestamp \\u003e 0, \\\"Requires LGE initialized\\\");\\n        require(block.timestamp \\u003e LGECompleted_Timestamp, \\\"Requires LGE ongoing\\\");\\n        _;\\n    }\\n    \\n    //UniSwap Cuck Machine: Blocks Uniswap Trades for a certain period, allowing users to claim and stake REACTOR\\n    modifier Trading_Possible() {\\n         require(LGECompleted_Timestamp \\u003e 0, \\\"Requires LGE initialized\\\");\\n         require(block.timestamp \\u003e LGECompleted_Timestamp.add(stackingPhase), \\\"Requires StackingPhase ended\\\");\\n        _;\\n    }\\n    \\n\\n//=========================================================================================================================================\\n  \\n    // Emergency drain in case of a bug\\n    function emergencyDrain24hAfterLiquidityGenerationEventIsDone() public governanceLevel(2) {\\n        require(contractStart_Timestamp \\u003e 0, \\\"Requires contractTimestamp \\u003e 0\\\");\\n        require(contractStart_Timestamp.add(emergencyPeriod) \\u003c block.timestamp, \\\"Liquidity generation grace period still ongoing\\\"); // About 24h after liquidity generation happens\\n        \\n        (bool success, ) = msg.sender.call{value:(address(this).balance)}(\\\"\\\");\\n        require(success, \\\"ETH Transfer failed... we are cucked\\\");\\n       \\n        ERC20._transfer(address(this), msg.sender, balanceOf(address(this)));\\n    }\\n\\n//During ETH_ContributionPhase: Users deposit funds\\n\\n    //funds sent to TOKEN contract.\\n    function USER_PledgeLiquidity(bool agreesToTermsOutlinedInLiquidityGenerationParticipationAgreement) public payable ETH_ContributionPhase {\\n        require(ethContributed[msg.sender].add(msg.value) \\u003c= individualCap, \\\"max 25ETH contribution per address\\\");\\n        require(totalETHContributed.add(msg.value) \\u003c= totalCap, \\\"500 ETH Hard cap\\\"); \\n        \\n        require(agreesToTermsOutlinedInLiquidityGenerationParticipationAgreement, \\\"No agreement provided\\\");\\n        \\n        ethContributed[msg.sender] = ethContributed[msg.sender].add(msg.value);\\n        totalETHContributed = totalETHContributed.add(msg.value); // for front end display during LGE\\n        emit LiquidityAddition(msg.sender, msg.value);\\n    }\\n    \\n    function USER_UNPledgeLiquidity() public ETH_ContributionPhase {\\n        uint256 _amount = ethContributed[msg.sender];\\n        ethContributed[msg.sender] = 0;\\n        msg.sender.transfer(_amount); //MUST CALL THE ETHERUM TRANSFER, not the TOKEN one!!!\\n        totalETHContributed = totalETHContributed.sub(_amount);\\n    }\\n\\n\\n// After ETH_ContributionPhase: Pool can create liquidity.\\n// Vault and wrapped UNIv2 contracts need to be setup in advance.\\n\\n    function POOL_CreateLiquidity() public LGE_Possible {\\n\\n        totalETHContributed = address(this).balance;\\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapPair);\\n        \\n        //Wrap eth\\n        address WETH = uniswapRouterV2.WETH();\\n        \\n        //Send to UniSwap\\n        IWETH(WETH).deposit{value : totalETHContributed}();\\n        require(address(this).balance == 0 , \\\"Transfer Failed\\\");\\n        IWETH(WETH).transfer(address(pair),totalETHContributed);\\n        \\n        emit Transfer(address(this), address(pair), balanceOf(address(this)));\\n        \\n        //UniCore balances transfer\\n        ERC20._transfer(address(this), address(pair), balanceOf(address(this)));\\n        pair.mint(address(this));       //mint LP tokens. lock method in UniSwapPairV2 PREVENTS FROM DOING IT TWICE\\n        \\n        totalLPTokensMinted = pair.balanceOf(address(this));\\n        \\n        require(totalLPTokensMinted != 0 , \\\"LP creation failed\\\");\\n        LPperETHUnit = totalLPTokensMinted.mul(1e18).div(totalETHContributed); // 1e18x for  change\\n        require(LPperETHUnit != 0 , \\\"LP creation failed\\\");\\n        \\n        LGECompleted_Timestamp = block.timestamp;\\n    }\\n    \\n \\n//After ETH_ContributionPhase: Pool can create liquidity.\\n    function USER_ClaimWrappedLiquidity() public LGE_happened {\\n        require(ethContributed[msg.sender] \\u003e 0 , \\\"Nothing to claim, move along\\\");\\n        \\n        uint256 amountLPToTransfer = ethContributed[msg.sender].mul(LPperETHUnit).div(1e18);\\n        IReactor(wUNIv2).wTransfer(msg.sender, amountLPToTransfer); // stored as 1e18x value for change\\n        ethContributed[msg.sender] = 0;\\n        \\n        emit LPTokenClaimed(msg.sender, amountLPToTransfer);\\n    }\\n\\n\\n//=========================================================================================================================================\\n    //overriden _transfer to take Fees\\n    function _transfer(address sender, address recipient, uint256 amount) internal override Trading_Possible {\\n        \\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n    \\n        //updates _balances\\n        setBalance(sender, balanceOf(sender).sub(amount, \\\"ERC20: transfer amount exceeds balance\\\"));\\n\\n        //calculate net amounts and fee\\n        (uint256 toAmount, uint256 toFee) = calculateAmountAndFee(sender, amount);\\n        \\n        //Send Reward to Vault 1st\\n        if(toFee \\u003e 0 \\u0026\\u0026 Vault != address(0)){\\n            setBalance(Vault, balanceOf(Vault).add(toFee));\\n            IVault(Vault).updateRewards(); //updating the vault with rewards sent.\\n            emit Transfer(sender, Vault, toFee);\\n        }\\n        \\n        //transfer to recipient\\n        setBalance(recipient, balanceOf(recipient).add(toAmount));\\n        emit Transfer(sender, recipient, toAmount);\\n\\n    }\\n    \\n//=========================================================================================================================================\\n//FEE_APPROVER (now included into the token code)\\n\\n    mapping (address =\\u003e bool) public noFeeList;\\n    \\n    function calculateAmountAndFee(address sender, uint256 amount) public view returns (uint256 netAmount, uint256 fee){\\n\\n        if(noFeeList[sender]) { fee = 0;} // Don\\u0027t have a fee when Vault is sending, or infinite loop\\n        else if(sender == UniswapPair){ fee = amount.mul(buyFee).div(1000);}\\n        else { fee = amount.mul(sellFee).div(1000);}\\n        \\n        netAmount = amount.sub(fee);\\n    }\\n    \\n//=========================================================================================================================================\\n//Governance\\n    /**\\n     * @dev multi tiered governance logic\\n     * \\n     * 0: plebs\\n     * 1: voting contracts (setup later in DAO)\\n     * 2: governors\\n     * \\n    */\\n    mapping(address =\\u003e uint8) public governanceLevels;\\n    \\n    modifier governanceLevel(uint8 _level){\\n        require(governanceLevels[msg.sender] \\u003e= _level, \\\"Grow some mustache kiddo...\\\");\\n        _;\\n    }\\n    function setGovernanceLevel(address _address, uint8 _level) public governanceLevel(_level) {\\n        governanceLevels[_address] = _level; //_level in Modifier ensures that lvl1 can only add lvl1 govs.\\n    }\\n    \\n    function viewGovernanceLevel(address _address) public view returns(uint8) {\\n        return governanceLevels[_address];\\n    }\\n\\n//== Governable Functions\\n    \\n    //External variables\\n        function setUniswapPair(address _UniswapPair) public governanceLevel(2) {\\n            UniswapPair = _UniswapPair;\\n            noFeeList[_UniswapPair] =  false; //making sure we take rewards\\n        }\\n        \\n        function setVault(address _Vault) public governanceLevel(2) {\\n            Vault = _Vault;\\n            noFeeList[_Vault] =  true;\\n        }\\n        \\n        \\n        /* @dev :allows to upgrade the wrapper\\n         * future devs will allow the wrapper to read live prices\\n         * of liquidity tokens and to mint an Universal wrapper\\n         * wrapping ANY UNIv2 LP token into their equivalent in \\n         * wrappedLP tokens, based on the wrapped asset price.\\n         */\\n        function setwUNIv2(address _wrapper) public governanceLevel(2) {\\n            wUNIv2 = _wrapper;\\n            noFeeList[_wrapper] =  true; //manages the wrapping of UniCores\\n        }\\n       \\n        //burns tokens from the contract (holding them)\\n        function burnToken(uint256 amount) public governanceLevel(1) {\\n            _burn(address(this), amount); //only Works if tokens are on the token contract. They need to be sent here 1st. (by the team Treasury)\\n        }\\n    \\n    //Fees\\n        uint256 public buyFee; uint256 public sellFee;\\n        function setBuySellFees(uint256 _buyFee, uint256 _sellFee) public governanceLevel(1) {\\n            buyFee = _buyFee;  //base 1000 -\\u003e 1 = 0.1%\\n            sellFee = _sellFee;\\n        }\\n        \\n        function setNoFeeList(address _address, bool _bool) public governanceLevel(1) {\\n          noFeeList[_address] =  _bool;\\n        }\\n    \\n    //wrapper contract\\n    function setPublicWrappingRatio(uint256 _ratioBase100) public governanceLevel(1) {\\n          IReactor(wUNIv2).setPublicWrappingRatio(_ratioBase100);\\n        }\\n//==Getters \\n\\n        function viewUNIv2() public view returns(address){\\n            return UniswapPair;\\n        }\\n        function viewwWrappedUNIv2() public view returns(address){\\n            return wUNIv2;\\n        }\\n        function viewVault() public view returns(address){\\n            return Vault;\\n        }\\n\\n//=experimental\\n        uint256 private uniBurnRatio;\\n        function setUniBurnRatio(uint256 _ratioBase100) public governanceLevel(1) {\\n        require(_ratioBase100 \\u003c= 100);  \\n        uniBurnRatio = _ratioBase100;\\n        }\\n        \\n        function viewUniBurnRatio() public view returns(uint256) {\\n            return uniBurnRatio;\\n        }\\n            \\n        function burnFromUni(uint256 _amount) external {\\n            require(msg.sender == Vault); //only Vault can trigger this function\\n            \\n            //   _amount / REACTOR total supply, 1e18 format.\\n            uint256 amountRatio = _amount.mul(1e18).div(IERC20(wUNIv2).totalSupply()); //amount in % of the REACTOR supply\\n            \\n            //apply amountRatio to the UniSwpaPair balance\\n            uint256 amount = amountRatio.mul(balanceOf(UniswapPair)).div(1e18).mul(uniBurnRatio).div(100); //% times UNIv2 balances or UniCore times uniBurnRatio\\n            \\n            \\n            if(amount \\u003e 0 \\u0026\\u0026 uniBurnRatio \\u003e 0){\\n                _burn(UniswapPair, amount);\\n                IUniswapV2Pair(UniswapPair).sync();\\n            }\\n        }\\n        \\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LPTokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LiquidityAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"log\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LGECompleted_Timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPperETHUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_CreateLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_ClaimWrappedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"agreesToTermsOutlinedInLiquidityGenerationParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"USER_PledgeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_UNPledgeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFromUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"netAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInitialized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStart_Timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyDrain24hAfterLiquidityGenerationEventIsDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governanceLevels\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGenerationParticipationAgreement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFeeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wUNIv2\",\"type\":\"address\"}],\"name\":\"secondarySetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setBuySellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"setGovernanceLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setNoFeeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioBase100\",\"type\":\"uint256\"}],\"name\":\"setPublicWrappingRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioBase100\",\"type\":\"uint256\"}],\"name\":\"setUniBurnRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UniswapPair\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"setwUNIv2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stackingPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewGovernanceLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewUNIv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewUniBurnRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewwWrappedUNIv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wUNIv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniCore_Token","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8ac02dd838519175c9a2dc5ce10597de1acdf14bd546b4c5b9d9c9c0edd9ff9f"}]}