{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/wz/c_r_y_p_t_o/l7l/contracts/games/LotteryDoubleEthHistory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity >=0.6.0;\\n\\nimport { GovernanceInterface } from \\\"../interfaces/GovernanceInterface.sol\\\";\\n\\ncontract LotteryDoubleEthHistory {\\n    GovernanceInterface public immutable TrustedGovernance;\\n\\n    event RoundStarted(\\n        uint32 indexed round,\\n        uint endsAfter\\n    );\\n\\n    event RoundEnded(\\n        uint32 indexed round,\\n        uint256 randomness,\\n        uint256 totalBooty,\\n        uint256 totalWinners\\n    );\\n\\n    event NewBet(\\n        uint32 indexed round,\\n        uint8 side,\\n        address indexed player,\\n        uint256 amount,\\n        address indexed referrer\\n    );\\n\\n    modifier onlyLotteries() {\\n        require(TrustedGovernance.lotteryContracts(msg.sender), \\\"Only lottery\\\");\\n        _;\\n    }\\n\\n    /** \\n     * @dev L7L DAO should be in charge of lottery smart-contract.\\n     *\\n     * @param _governance Orchestration contract.\\n     */\\n    constructor(address _governance) public {\\n        TrustedGovernance = GovernanceInterface(_governance);\\n    }\\n\\n    /**\\n     * @dev Save history of bets.\\n     *\\n     * @param round Round of game.\\n     * @param side Side of bet: Blue - 0, Green - 1.\\n     * @param player Address of player.\\n     * @param amount Amount of ETH in bet.\\n     * @param referrer Address of referrer.\\n     */\\n    function newBet(uint32 round, uint8 side, address player, uint256 amount, address referrer) external onlyLotteries {\\n        emit NewBet(round, side, player, amount, referrer);\\n    }\\n\\n    /**\\n     * @dev Save new round event.\\n     *\\n     * @param round Round of game.\\n     * @param endsAfter Unixtimestamp when round should end.\\n     */\\n    function roundStarted(uint32 round, uint endsAfter) external onlyLotteries {\\n        emit RoundStarted(round, endsAfter);\\n    }\\n\\n    /**\\n     * @dev Save new round event.\\n     *\\n     * @param round Round of game.\\n     * @param randomness Randomness result.\\n     * @param totalBooty Total ETH betted in a round.\\n     * @param totalWinners Total ETH betted by the winning side.\\n     */\\n    function roundEnded(uint32 round, uint256 randomness, uint256 totalBooty, uint256 totalWinners) external onlyLotteries {\\n        emit RoundEnded(round, randomness, totalBooty, totalWinners);\\n    }\\n}\"\r\n    },\r\n    \"/Users/wz/c_r_y_p_t_o/l7l/contracts/interfaces/GovernanceInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity >=0.6.0;\\n\\ninterface GovernanceInterface {\\n    function owner() external view returns (address);\\n    function manager() external view returns (address);\\n    function isManagement(address) external view returns (bool);\\n    function beneficiary() external view returns (address payable);\\n    function treasuryContract() external view returns (address);\\n    function lotteryContracts(address) external view returns (bool);\\n    function timeToClaimBooty() external view returns (uint);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBooty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWinners\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endsAfter\",\"type\":\"uint256\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TrustedGovernance\",\"outputs\":[{\"internalType\":\"contract GovernanceInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"newBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBooty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWinners\",\"type\":\"uint256\"}],\"name\":\"roundEnded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"endsAfter\",\"type\":\"uint256\"}],\"name\":\"roundStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LotteryDoubleEthHistory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e60fb30a5988495789281dafd8ab47f62af0fee3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}