{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n HyperSonic Contract!\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract HyperSonic is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  address feeWallet = 0x93EE253eA487F99C3998cBf58F2E1177F230CfCb;\r\n  address ownerWallet = 0x6Ba900dbfcFd566FBEf878D8405D74947CCa3338;\r\n  address uniswapWallet = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n \r\n  //For liquidity stuck fix\r\n  address public liquidityWallet = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n \r\n  address[] sonicWallets = [feeWallet, feeWallet, feeWallet, feeWallet, feeWallet];\r\n  uint256[] transactionWeights = [2, 2, 2, 2, 2];\r\n  string constant tokenName = \"HyperSonic\";\r\n  string constant tokenSymbol = \"HyperSonic\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 public _totalSupply = 10000000000000000000000;\r\n  uint256 public base50Percent = 50;\r\n  uint256 public base9Percent = 9;\r\n  uint256 public foundationRatio = 100;\r\n  bool public hyperSonic = false;\r\n  bool public liqBugFixed = false;\r\n  bool public presaleMode = true;\r\n \r\n  //Pre defined variables\r\n  uint256[] sonicPayments = [0, 0, 0, 0, 0];\r\n  uint256 tokensForFees = 0;\r\n  uint256 feesForSonic = 0;\r\n  uint256 weightForSonic = 0;\r\n  uint256 tokensForNewWallets = 0;\r\n  uint256 weightForNew = 0;\r\n  uint256 tokensToBurn = 0;\r\n  uint256 tokensToTransfer = 0;\r\n  uint256 totalLoss = 0;\r\n \r\n \r\n \r\n    \r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    _mint(msg.sender, _totalSupply);\r\n  }\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n \r\n  function getBurnPercent(uint256 value) public view returns (uint256)  {\r\n    uint256 roundValue = value.ceil(foundationRatio);\r\n    uint256 twentyFivePercent = roundValue.mul(foundationRatio).div(400); // 25 percent burn\r\n    return twentyFivePercent;\r\n  }\r\n\r\n  function amountToTake1(uint256 value) public view returns (uint256)  {\r\n    uint256 roundValue = value.ceil(base50Percent);\r\n    uint256 amountLost50 = roundValue.mul(base50Percent).div(100);\r\n    return amountLost50;\r\n  }\r\n  \r\n  function amountToTake2(uint256 value) public view returns (uint256)  {\r\n    uint256 roundValue = value.ceil(base9Percent);\r\n    uint256 amountLost9 =  roundValue.mul(base9Percent).div(100);\r\n    return amountLost9;\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    if (hyperSonic && liqBugFixed){\r\n        tokensToBurn = getBurnPercent(value);\r\n        \r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n            \r\n     \r\n        address previousSonic = sonicWallets[0];\r\n        uint256 sonicWeight = transactionWeights[0];\r\n        sonicWallets[0] = sonicWallets[1];\r\n        transactionWeights[0] = transactionWeights[1];\r\n        sonicWallets[1] = sonicWallets[2];\r\n        transactionWeights[1] = transactionWeights[2];\r\n        sonicWallets[2] = sonicWallets[3];\r\n        transactionWeights[2] = transactionWeights[3];\r\n        sonicWallets[3] = sonicWallets[4];\r\n        transactionWeights[3] = transactionWeights[4];\r\n        //Ensure the liquidity wallet or uniswap wallet don't receive any fees also fix fees on buys\r\n        if (msg.sender == uniswapWallet || msg.sender == liquidityWallet){\r\n            sonicWallets[4] = to;\r\n            transactionWeights[4] = 2;\r\n        }\r\n        else{\r\n            sonicWallets[4] = msg.sender;\r\n            transactionWeights[4] = 1;\r\n        }\r\n        totalLoss = amountToTake1(value);\r\n        tokensForFees =  totalLoss.div(50);\r\n        \r\n        feesForSonic = tokensForFees.mul(15);\r\n        weightForSonic = sonicWeight.add(transactionWeights[0]).add(transactionWeights[1]);\r\n        sonicPayments[0] = feesForSonic.div(weightForSonic).mul(sonicWeight);\r\n        sonicPayments[1] = feesForSonic.div(weightForSonic).mul(transactionWeights[0]);\r\n        sonicPayments[2] = feesForSonic.div(weightForSonic).mul(transactionWeights[1]);\r\n        sonicPayments[3] = feesForSonic.div(weightForSonic).mul(transactionWeights[2]);\r\n        sonicPayments[4] = feesForSonic.div(weightForSonic).mul(transactionWeights[3]);\r\n        \r\n        tokensToTransfer = value.sub(totalLoss);\r\n        \r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n        _balances[previousSonic] = _balances[previousSonic].add(sonicPayments[0]);\r\n        _balances[sonicWallets[0]] = _balances[sonicWallets[0]].add(sonicPayments[1]);\r\n        _balances[sonicWallets[1]] = _balances[sonicWallets[1]].add(sonicPayments[2]);\r\n        _balances[sonicWallets[2]] = _balances[sonicWallets[2]].add(sonicPayments[3]);\r\n        _balances[sonicWallets[3]] = _balances[sonicWallets[3]].add(sonicPayments[4]);\r\n        _totalSupply = _totalSupply.sub(tokensToBurn);\r\n    \r\n        emit Transfer(msg.sender, to, tokensToTransfer);\r\n        emit Transfer(msg.sender, previousSonic, sonicPayments[0]);\r\n        emit Transfer(msg.sender, sonicWallets[0], sonicPayments[1]);\r\n        emit Transfer(msg.sender, sonicWallets[1], sonicPayments[2]);\r\n        emit Transfer(msg.sender, sonicWallets[2], sonicPayments[3]);\r\n        emit Transfer(msg.sender, sonicWallets[3], sonicPayments[4]);\r\n        emit Transfer(msg.sender, address(0), tokensToBurn);\r\n    }\r\n    else if (presaleMode || msg.sender == ownerWallet){\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n    }\r\n    else{\r\n        revert(\"No Sonic!\");\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    if (hyperSonic && liqBugFixed){\r\n        \r\n        _balances[from] = _balances[from].sub(value);\r\n        \r\n        address previousSonic = sonicWallets[0];\r\n        uint256 sonicWeight = transactionWeights[0];\r\n        sonicWallets[0] = sonicWallets[1];\r\n        transactionWeights[0] = transactionWeights[1];\r\n        sonicWallets[1] = sonicWallets[2];\r\n        transactionWeights[1] = transactionWeights[2];\r\n        sonicWallets[2] = sonicWallets[3];\r\n        transactionWeights[2] = transactionWeights[3];\r\n        sonicWallets[3] = sonicWallets[4];\r\n        transactionWeights[3] = transactionWeights[4];\r\n        //Ensure the liquidity wallet or uniswap wallet don't receive any fees also fix fees on buys\r\n        if (from == uniswapWallet || from == liquidityWallet){\r\n            sonicWallets[4] = to;\r\n            transactionWeights[4] = 2;\r\n        }\r\n        else{\r\n            sonicWallets[4] = from;\r\n            transactionWeights[4] = 1;\r\n        }\r\n        totalLoss = amountToTake2(value);\r\n        tokensForFees =  totalLoss.div(9);\r\n        \r\n        feesForSonic = tokensForFees.mul(15);\r\n        weightForSonic = sonicWeight.add(transactionWeights[0]).add(transactionWeights[1]);\r\n        sonicPayments[0] = feesForSonic.div(weightForSonic).mul(sonicWeight);\r\n        sonicPayments[1] = feesForSonic.div(weightForSonic).mul(transactionWeights[0]);\r\n        sonicPayments[2] = feesForSonic.div(weightForSonic).mul(transactionWeights[1]);\r\n        sonicPayments[3] = feesForSonic.div(weightForSonic).mul(transactionWeights[2]);\r\n        sonicPayments[4] = feesForSonic.div(weightForSonic).mul(transactionWeights[3]);\r\n        \r\n        tokensToTransfer = value.sub(totalLoss);\r\n        \r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n        _balances[previousSonic] = _balances[previousSonic].add(sonicPayments[0]);\r\n        _balances[sonicWallets[0]] = _balances[sonicWallets[0]].add(sonicPayments[1]);\r\n        _balances[sonicWallets[1]] = _balances[sonicWallets[1]].add(sonicPayments[2]);\r\n        _balances[sonicWallets[2]] = _balances[sonicWallets[2]].add(sonicPayments[3]);\r\n        _balances[sonicWallets[3]] = _balances[sonicWallets[3]].add(sonicPayments[4]);\r\n        _balances[feeWallet] = _balances[feeWallet].add(tokensForFees);\r\n      \r\n       \r\n        emit Transfer(from, to, tokensToTransfer);\r\n        emit Transfer(from, previousSonic, sonicPayments[0]);\r\n        emit Transfer(from, sonicWallets[0], sonicPayments[1]);\r\n        emit Transfer(from, sonicWallets[1], sonicPayments[2]);\r\n        emit Transfer(from, sonicWallets[2], sonicPayments[3]);\r\n        emit Transfer(from, sonicWallets[3], sonicPayments[4]);\r\n        emit Transfer(from, feeWallet, tokensForFees);\r\n    }\r\n    else if (presaleMode || from == ownerWallet){\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    else{\r\n        revert(\"No Sonic!\");\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)  public {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n \r\n\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n \r\n  // Enable hyperSonic\r\n  function enablehyperSonic() public {\r\n    require (msg.sender == ownerWallet);\r\n    hyperSonic = true;\r\n  }\r\n \r\n  // End presale\r\n  function disablePresale() public {\r\n      require (msg.sender == ownerWallet);\r\n      presaleMode = false;\r\n  }\r\n \r\n  // fix for liquidity issues\r\n  function setLiquidityWallet(address liqWallet) public {\r\n    require (msg.sender == ownerWallet);\r\n    liquidityWallet =  liqWallet;\r\n    liqBugFixed = true;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amountToTake1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amountToTake2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base50Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base9Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablehyperSonic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getBurnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hyperSonic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liqBugFixed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HyperSonic","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9e09ccf26eda35f182aad24bebf016072787607ea731bdf8890bde8664559afe"}]}