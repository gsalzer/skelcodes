{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n// $$$$$$$$\\ $$$$$$$$\\ $$\\   $$\\ $$$$$$$$\\ $$$$$$$\\        $$$$$$$\\   $$$$$$\\  $$\\       $$\\       $$$$$$\\ $$\\   $$\\  $$$$$$\\  \r\n// $$  _____|\\__$$  __|$$ |  $$ |$$  _____|$$  __$$\\       $$  __$$\\ $$  __$$\\ $$ |      $$ |      \\_$$  _|$$$\\  $$ |$$  __$$\\ \r\n// $$ |         $$ |   $$ |  $$ |$$ |      $$ |  $$ |      $$ |  $$ |$$ /  $$ |$$ |      $$ |        $$ |  $$$$\\ $$ |$$ /  \\__|\r\n// $$$$$\\       $$ |   $$$$$$$$ |$$$$$\\    $$$$$$$  |      $$$$$$$  |$$ |  $$ |$$ |      $$ |        $$ |  $$ $$\\$$ |$$ |$$$$\\ \r\n// $$  __|      $$ |   $$  __$$ |$$  __|   $$  __$$<       $$  __$$< $$ |  $$ |$$ |      $$ |        $$ |  $$ \\$$$$ |$$ |\\_$$ |\r\n// $$ |         $$ |   $$ |  $$ |$$ |      $$ |  $$ |      $$ |  $$ |$$ |  $$ |$$ |      $$ |        $$ |  $$ |\\$$$ |$$ |  $$ |\r\n// $$$$$$$$\\    $$ |   $$ |  $$ |$$$$$$$$\\ $$ |  $$ |      $$ |  $$ | $$$$$$  |$$$$$$$$\\ $$$$$$$$\\ $$$$$$\\ $$ | \\$$ |\\$$$$$$  |\r\n// \\________|   \\__|   \\__|  \\__|\\________|\\__|  \\__|      \\__|  \\__| \\______/ \\________|\\________|\\______|\\__|  \\__| \\______/ \r\n                                                                                                                            \r\n                                                                                                                            \r\npragma solidity 0.6.9;\r\n// SPDX-License-Identifier: NONE\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC777Token standard as defined in the EIP.\r\n *\r\n * This contract uses the\r\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\r\n * token holders and recipients react to token movements by using setting implementers\r\n * for the associated interfaces in said registry. See {IERC1820Registry} and\r\n * {ERC1820Implementer}.\r\n */\r\ninterface IERC777 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the smallest part of the token that is not divisible. This\r\n     * means all token operations (creation, movement and destruction) must have\r\n     * amounts that are a multiple of this number.\r\n     *\r\n     * For most token contracts, this value will equal 1.\r\n     */\r\n    function granularity() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by an account (`owner`).\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * If send or receive hooks are registered for the caller and `recipient`,\r\n     * the corresponding functions will be called with `data` and empty\r\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\r\n     *\r\n     * Emits a {Sent} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - the caller must have at least `amount` tokens.\r\n     * - `recipient` cannot be the zero address.\r\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\r\n     * interface.\r\n     */\r\n    function send(address recipient, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\r\n     * total supply.\r\n     *\r\n     * If a send hook is registered for the caller, the corresponding function\r\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\r\n     *\r\n     * Emits a {Burned} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - the caller must have at least `amount` tokens.\r\n     */\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Returns true if an account is an operator of `tokenHolder`.\r\n     * Operators can send and burn tokens on behalf of their owners. All\r\n     * accounts are their own operator.\r\n     *\r\n     * See {operatorSend} and {operatorBurn}.\r\n     */\r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Make an account an operator of the caller.\r\n     *\r\n     * See {isOperatorFor}.\r\n     *\r\n     * Emits an {AuthorizedOperator} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `operator` cannot be calling address.\r\n     */\r\n    function authorizeOperator(address operator) external;\r\n\r\n    /**\r\n     * @dev Revoke an account's operator status for the caller.\r\n     *\r\n     * See {isOperatorFor} and {defaultOperators}.\r\n     *\r\n     * Emits a {RevokedOperator} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `operator` cannot be calling address.\r\n     */\r\n    function revokeOperator(address operator) external;\r\n\r\n    /**\r\n     * @dev Returns the list of default operators. These accounts are operators\r\n     * for all token holders, even if {authorizeOperator} was never called on\r\n     * them.\r\n     *\r\n     * This list is immutable, but individual holders may revoke these via\r\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\r\n     */\r\n    function defaultOperators() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\r\n     * be an operator of `sender`.\r\n     *\r\n     * If send or receive hooks are registered for `sender` and `recipient`,\r\n     * the corresponding functions will be called with `data` and\r\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\r\n     *\r\n     * Emits a {Sent} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `sender` must have at least `amount` tokens.\r\n     * - the caller must be an operator for `sender`.\r\n     * - `recipient` cannot be the zero address.\r\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\r\n     * interface.\r\n     */\r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\r\n     * The caller must be an operator of `account`.\r\n     *\r\n     * If a send hook is registered for `account`, the corresponding function\r\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\r\n     *\r\n     * Emits a {Burned} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     * - the caller must be an operator for `account`.\r\n     */\r\n    function operatorBurn(\r\n        address account,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\n/**\r\n * @dev Interface of the global ERC1820 Registry, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\r\n * implementers for interfaces in this registry, as well as query support.\r\n *\r\n * Implementers may be shared by multiple accounts, and can also implement more\r\n * than a single interface for each account. Contracts can implement interfaces\r\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\r\n * contract.\r\n *\r\n * {IERC165} interfaces can also be queried via the registry.\r\n *\r\n * For an in-depth explanation and source code analysis, see the EIP text.\r\n */\r\ninterface IERC1820Registry {\r\n    /**\r\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\r\n     * account is able to set interface implementers for it.\r\n     *\r\n     * By default, each account is its own manager. Passing a value of `0x0` in\r\n     * `newManager` will reset the manager to this initial state.\r\n     *\r\n     * Emits a {ManagerChanged} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for `account`.\r\n     */\r\n    function setManager(address account, address newManager) external;\r\n\r\n    /**\r\n     * @dev Returns the manager for `account`.\r\n     *\r\n     * See {setManager}.\r\n     */\r\n    function getManager(address account) external view returns (address);\r\n\r\n    /**\r\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\r\n     * `interfaceHash`.\r\n     *\r\n     * `account` being the zero address is an alias for the caller's address.\r\n     * The zero address can also be used in `implementer` to remove an old one.\r\n     *\r\n     * See {interfaceHash} to learn how these are created.\r\n     *\r\n     * Emits an {InterfaceImplementerSet} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for `account`.\r\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\r\n     * end in 28 zeroes).\r\n     * - `implementer` must implement {IERC1820Implementer} and return true when\r\n     * queried for support, unless `implementer` is the caller. See\r\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\r\n     */\r\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\r\n\r\n    /**\r\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\r\n     * implementer is registered, returns the zero address.\r\n     *\r\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\r\n     * zeroes), `account` will be queried for support of it.\r\n     *\r\n     * `account` being the zero address is an alias for the caller's address.\r\n     */\r\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\r\n     * corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\r\n     */\r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n\r\n    /**\r\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\r\n     *  @param account Address of the contract for which to update the cache.\r\n     *  @param interfaceId ERC165 interface for which to update the cache.\r\n     */\r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\r\n     *  If the result is not cached a direct lookup on the contract address is performed.\r\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\r\n     *  {updateERC165Cache} with the contract address.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if `account` implements `interfaceId`, false otherwise.\r\n     */\r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if `account` implements `interfaceId`, false otherwise.\r\n     */\r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\r\n *\r\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\r\n * contract implement this interface (contract holders can be their own\r\n * implementer) and registering it on the\r\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\r\n *\r\n * See {IERC1820Registry} and {ERC1820Implementer}.\r\n */\r\ninterface IERC777Recipient {\r\n    /**\r\n     * @dev Called by an {IERC777} token contract whenever tokens are being\r\n     * moved or created into a registered account (`to`). The type of operation\r\n     * is conveyed by `from` being the zero address or not.\r\n     *\r\n     * This call occurs _after_ the token contract's state is updated, so\r\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\r\n     *\r\n     * This function may revert to prevent the operation from being executed.\r\n     */\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract EtherRolling is Ownable {\r\n    using SafeMath for uint8;\r\n    using SafeMath for uint256;\r\n    struct User {\r\n        uint256 cycle;\r\n        address upline;\r\n        uint256 referrals;\r\n        uint256 payouts;\r\n        uint256 direct_bonus;\r\n        uint256 pool_bonus;\r\n        uint256 match_bonus;\r\n        uint256 deposit_amount;\r\n        uint256 deposit_payouts;\r\n        uint40 deposit_time;\r\n        uint256 total_deposits;\r\n        uint256 total_payouts;\r\n        uint256 total_structure;\r\n        bool isWithdrawActive;\r\n    }\r\n    struct matrixInfo{\r\n        address upperLevel;\r\n        uint256 currentPos;\r\n        address[3] matrixRef;\r\n        uint256 matrix_bonus;\r\n        uint8 level;\r\n        uint256 first_deposit_time;\r\n        address[] totalRefs;\r\n        uint256 total_volume;\r\n        bool isAlreadyInPool;\r\n        uint256 leader_bonus;\r\n        \r\n    }\r\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\r\n    IERC777 private _token;\r\n    event DoneDeposit(address operator, address from, address to, uint256 amount, bytes userData, bytes operatorData);\r\n    mapping(address => User) public users;\r\n    mapping(address => matrixInfo) public matrixUser;\r\n    mapping(address => address) public tempUpline;\r\n\r\n    uint256[] public cycles;\r\n    bool public isEthDepoPaused;\r\n    uint8 public DAILY = 6; //Daily percentage income\r\n    uint256 public minDeposit = 0.5 ether;\r\n    uint8[] public ref_bonuses = [10,10,10,10,10,7,7,7,7,7,3,3,3,3,3];  //referral bonuses        \r\n    uint8[] public matrixBonuses = [7,7,7,7,7,10,10,10,10,10,3,3,3,3,3]; //Matrix bonuses\r\n    uint256[] public pool_bonuses;\r\n    uint40 public last_draw = uint40(block.timestamp);\r\n    uint256 public pool_cycle;\r\n    uint256 public pool_balance;\r\n    uint256 public leader_pool;\r\n    uint256[] public level_bonuses;\r\n    uint8 public firstPool = 40;\r\n    uint8 public secondPool = 30;\r\n    uint8 public thirdPool = 20;\r\n    uint8 public fourthPool = 10;\r\n    address[] public teamLeaders;\r\n    address payable public admin1 = 0x231c02e6ADADc34c2eFBD74e013e416b31940d15;\r\n    address payable public admin2 = 0xbBe1B325957fD7A33BC02cDF91a29FdE88bA60E3;\r\n    mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;\r\n    mapping(uint8 => address) public pool_top;\r\n\r\n    uint256 public total_withdraw;\r\n    \r\n    event Upline(address indexed addr, address indexed upline);\r\n    event NewDeposit(address indexed addr, uint256 amount);\r\n    event DirectPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event PoolPayout(address indexed addr, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event EmergencyWithdraw(address indexed addr, uint256 amount);\r\n    event LimitReached(address indexed addr, uint256 amount);\r\n\r\n    constructor(address token) public {\r\n        \r\n        for(uint8 i=0;i<3;i++){\r\n             pool_bonuses.push(firstPool.div(3));\r\n        }\r\n        for(uint8 i=0;i<3;i++){\r\n             pool_bonuses.push(secondPool.div(3));\r\n        }\r\n        for(uint8 i=0;i<3;i++){\r\n             pool_bonuses.push(thirdPool.div(3));\r\n        }\r\n        for(uint8 i=0;i<3;i++){\r\n             pool_bonuses.push(fourthPool.div(3));\r\n        }\r\n        \r\n        level_bonuses.push(0.5 ether);\r\n        level_bonuses.push(1 ether);\r\n        level_bonuses.push(3 ether);\r\n        level_bonuses.push(5 ether);\r\n        level_bonuses.push(10 ether);\r\n        level_bonuses.push(20 ether);\r\n        level_bonuses.push(30 ether);\r\n        level_bonuses.push(50 ether);\r\n        level_bonuses.push(70 ether);\r\n        level_bonuses.push(100 ether);\r\n\r\n        cycles.push(100 ether);\r\n        cycles.push(300 ether);\r\n        cycles.push(900 ether);\r\n        cycles.push(2700 ether);\r\n        _token = IERC777(token);\r\n        _erc1820.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\r\n    }\r\n    function setUpline(address upline) public {\r\n        if(tempUpline[msg.sender] == address(0)){\r\n            require(upline != address(0) && upline != msg.sender,\"Invalid upline!\");\r\n            tempUpline[msg.sender] = upline;\r\n        }\r\n    }\r\n    function _setUpline(address _addr, address _upline) private {\r\n        if(users[_addr].upline == address(0) && _upline != _addr && (users[_upline].deposit_time > 0 || _upline == owner())) {\r\n            users[_addr].upline = _upline;\r\n            users[_upline].referrals++;\r\n            matrixUser[_upline].totalRefs.push(_addr);\r\n            emit Upline(_addr, _upline);\r\n            addToMatrix(_addr,_upline);\r\n            for(uint8 i = 0; i < 15; i++) {\r\n                if(_upline == address(0)) break;\r\n\r\n                users[_upline].total_structure++;\r\n\r\n                _upline = users[_upline].upline;\r\n            }\r\n        }\r\n    }\r\n    function addToMatrix(address addr, address upline) private {\r\n        address tempadd = upline;\r\n        uint256 temp;\r\n        while(true){\r\n            uint256 pos = matrixUser[tempadd].currentPos;\r\n            if(matrixUser[tempadd].matrixRef[pos] == address(0)){\r\n                matrixUser[tempadd].matrixRef[pos] = addr;\r\n                matrixUser[tempadd].currentPos = (pos + 1).mod(3);\r\n                break;\r\n            }else{\r\n                temp =  matrixUser[tempadd].currentPos;\r\n                matrixUser[tempadd].currentPos = (pos + 1).mod(3);\r\n                tempadd = matrixUser[tempadd].matrixRef[temp];\r\n            }\r\n        }\r\n        matrixUser[addr].upperLevel = tempadd;\r\n    }\r\n    \r\n    function tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) external {\r\n        require(msg.sender == address(_token), \"Invalid token\");\r\n        require(tempUpline[from] != address(0),\"No referral found\");\r\n        _deposit(from,amount,1);\r\n    }\r\n\r\n    function _deposit(address _addr, uint256 _amount, uint8 method) private {\r\n        require(tempUpline[_addr] != address(0) || _addr == owner(), \"No upline\");\r\n\r\n        if(users[_addr].deposit_time > 0) {\r\n            users[_addr].cycle++;\r\n            \r\n            require(users[_addr].payouts >= this.maxPayoutOf(users[_addr].deposit_amount), \"Deposit already exists\");\r\n            if(method == 0){\r\n                require(!isEthDepoPaused,\"Depositing Ether is paused\");\r\n            }\r\n            require(_amount >= users[_addr].deposit_amount && _amount <= cycles[users[_addr].cycle > 3 ? 3 : users[_addr].cycle], \"Bad amount\");\r\n        }\r\n        else {\r\n            _setUpline(_addr, tempUpline[_addr]);\r\n            if(method == 0){\r\n            require(_amount >= minDeposit && _amount <= cycles[0], \"Bad amount\");\r\n            require(!isEthDepoPaused,\"Depositing Ether is paused\");\r\n            matrixUser[_addr].first_deposit_time = block.timestamp;\r\n            }\r\n            else if(method == 1){\r\n                require(_amount >= minDeposit && _amount <= cycles[0], \"Bad amount\");\r\n            }else{\r\n                revert();\r\n            }\r\n        }\r\n        users[_addr].payouts = 0;\r\n        users[_addr].deposit_amount = _amount;\r\n        users[_addr].deposit_payouts = 0;\r\n        users[_addr].deposit_time = uint40(block.timestamp);\r\n        users[_addr].total_deposits += _amount;\r\n        users[_addr].isWithdrawActive = true;\r\n        for(uint8 i=0;i<10;i++){\r\n            if(users[_addr].total_deposits >= level_bonuses[i]){\r\n                matrixUser[_addr].level = i+6;\r\n            }\r\n        }\r\n        emit NewDeposit(_addr, _amount);\r\n\r\n        if(users[_addr].upline != address(0)) {\r\n            users[users[_addr].upline].direct_bonus += _amount / 10;\r\n\r\n            emit DirectPayout(users[_addr].upline, _addr, _amount / 10);\r\n        }\r\n\r\n        _poolDeposits(_addr, _amount);\r\n        _teamLeaderBonus(_addr,_amount);\r\n\r\n        if(last_draw + 7 days < block.timestamp) {\r\n            _drawPool();\r\n        }\r\n        if(method == 0){\r\n            admin1.transfer(_amount.mul(95).div(1000));\r\n            admin2.transfer(_amount.mul(5).div(1000));\r\n        }else if(method == 1){\r\n            _token.send(admin1,_amount.mul(95).div(1000),\"Admin 1 commision\");\r\n            _token.send(admin2,_amount.mul(5).div(1000),\"Admin 2 commision\");\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function _poolDeposits(address _addr, uint256 _amount) private {\r\n        pool_balance += _amount / 100;\r\n\r\n        address upline = users[_addr].upline;\r\n\r\n        if(upline == address(0)) return;\r\n        \r\n        pool_users_refs_deposits_sum[pool_cycle][upline] += _amount;\r\n\r\n        for(uint8 i = 0; i < 12; i++) {\r\n            if(pool_top[i] == upline) break;\r\n\r\n            if(pool_top[i] == address(0)) {\r\n                pool_top[i] = upline;\r\n                break;\r\n            }\r\n\r\n            if(pool_users_refs_deposits_sum[pool_cycle][upline] > pool_users_refs_deposits_sum[pool_cycle][pool_top[i]]) {\r\n                for(uint8 j = i + 1; j < 12; j++) {\r\n                    if(pool_top[j] == upline) {\r\n                        for(uint8 k = j; k <= 12; k++) {\r\n                            pool_top[k] = pool_top[k + 1];\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for(uint8 j = uint8(12 - 1); j > i; j--) {\r\n                    pool_top[j] = pool_top[j - 1];\r\n                }\r\n\r\n                pool_top[i] = upline;\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _teamLeaderBonus(address addr, uint256 amount) private {\r\n        leader_pool += amount / 50;\r\n        address upline = users[addr].upline;\r\n        if(upline == address(0)) return;\r\n        matrixUser[upline].total_volume += amount;\r\n        if(matrixUser[upline].isAlreadyInPool) return;\r\n        uint256 volume = users[upline].total_deposits;\r\n        uint256 len = matrixUser[upline].totalRefs.length;\r\n        uint8 count = 0;\r\n        for(uint40 i = 0; i < len; i++){\r\n            volume += matrixUser[matrixUser[upline].totalRefs[i]].total_volume;\r\n            if(matrixUser[matrixUser[upline].totalRefs[i]].total_volume >= 200 ether){\r\n                count++;\r\n            }\r\n        }\r\n        if(count >= 3){\r\n            if((volume >= 1000 ether && matrixUser[upline].first_deposit_time + 30 days <= now) || (volume >= 10000 ether)){\r\n                teamLeaders.push(upline);\r\n                matrixUser[upline].isAlreadyInPool = true;\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function _refPayout(address _addr, uint256 _amount) private {\r\n        address up = users[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < 15; i++) {\r\n            if(up == address(0)) break;\r\n            \r\n            if(users[up].referrals >= i + 1) {\r\n                uint256 bonus = _amount * ref_bonuses[i] / 100;\r\n                \r\n                users[up].match_bonus += bonus;\r\n\r\n                emit MatchPayout(up, _addr, bonus);\r\n            }\r\n\r\n            up = users[up].upline;\r\n        }\r\n    }\r\n\r\n    function _drawPool() private {\r\n        last_draw = uint40(block.timestamp);\r\n        pool_cycle++;\r\n\r\n        uint256 draw_amount = pool_balance;\r\n        uint256 len = teamLeaders.length;\r\n        for(uint8 i = 0; i < 12; i++) {\r\n            if(pool_top[i] == address(0)) break;\r\n\r\n            uint256 win = draw_amount * pool_bonuses[i] / 100;\r\n\r\n            users[pool_top[i]].pool_bonus += win;\r\n            pool_balance -= win;\r\n\r\n            emit PoolPayout(pool_top[i], win);\r\n        }\r\n        \r\n        for(uint8 i = 0; i < 12; i++) {\r\n            pool_top[i] = address(0);\r\n        }\r\n        \r\n        for(uint256 i = 0; i < len; i++){\r\n            matrixUser[teamLeaders[i]].leader_bonus += leader_pool/len;\r\n            leader_pool -= leader_pool/len;\r\n        }\r\n    }\r\n    \r\n    function calcMatrixBonus(address addr, uint256 value) private{\r\n        address uplevel = matrixUser[addr].upperLevel;\r\n        uint8 i = 0;\r\n        while(uplevel != address(0) && matrixUser[uplevel].level >= i && i<16){\r\n            matrixUser[uplevel].matrix_bonus += value.mul(matrixBonuses[i]).div(100);\r\n            uplevel = matrixUser[uplevel].upperLevel;\r\n            i++;\r\n        }\r\n    }\r\n    \r\n    receive() external payable{\r\n        require(tempUpline[msg.sender] != address(0),\"Setup upline first!\");\r\n        deposit(tempUpline[msg.sender]);\r\n    }\r\n    \r\n    function deposit(address upline) payable public {\r\n        setUpline(upline);\r\n        _deposit(msg.sender, msg.value, 0);\r\n    }\r\n\r\n    function withdraw(uint8 coin) external {\r\n        //coin = 1 --> token withdraw\r\n        //coin = 0 --> ether withdraw\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\r\n\r\n        // Deposit payout\r\n        if(to_payout > 0) {\r\n            if(users[msg.sender].payouts + to_payout > max_payout) {\r\n                to_payout = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].deposit_payouts += to_payout;\r\n            users[msg.sender].payouts += to_payout;\r\n\r\n            _refPayout(msg.sender, to_payout);\r\n        }\r\n        \r\n        // Direct payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].direct_bonus > 0) {\r\n            uint256 direct_bonus = users[msg.sender].direct_bonus;\r\n\r\n            if(users[msg.sender].payouts + direct_bonus > max_payout) {\r\n                direct_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].direct_bonus -= direct_bonus;\r\n            users[msg.sender].payouts += direct_bonus;\r\n            to_payout += direct_bonus;\r\n        }\r\n        \r\n        // Pool payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].pool_bonus > 0) {\r\n            uint256 pool_bonus = users[msg.sender].pool_bonus;\r\n\r\n            if(users[msg.sender].payouts + pool_bonus > max_payout) {\r\n                pool_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].pool_bonus -= pool_bonus;\r\n            users[msg.sender].payouts += pool_bonus;\r\n            to_payout += pool_bonus;\r\n        }\r\n\r\n        // Match payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].match_bonus > 0) {\r\n            uint256 match_bonus = users[msg.sender].match_bonus;\r\n\r\n            if(users[msg.sender].payouts + match_bonus > max_payout) {\r\n                match_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].match_bonus -= match_bonus;\r\n            users[msg.sender].payouts += match_bonus;\r\n            to_payout += match_bonus;\r\n        }\r\n        \r\n        // Matrix payout\r\n        if(users[msg.sender].payouts < max_payout && matrixUser[msg.sender].matrix_bonus > 0) {\r\n            if(users[msg.sender].isWithdrawActive){\r\n                uint256 matrix_bonus = matrixUser[msg.sender].matrix_bonus;\r\n                if(users[msg.sender].payouts + matrix_bonus > max_payout) {\r\n                    matrix_bonus = max_payout - users[msg.sender].payouts;\r\n                }\r\n                matrixUser[msg.sender].matrix_bonus -= matrix_bonus;\r\n                users[msg.sender].payouts += matrix_bonus;\r\n                to_payout += matrix_bonus;\r\n            } else{\r\n                matrixUser[msg.sender].matrix_bonus = 0;\r\n            }\r\n        }\r\n        \r\n        // Team leader payout\r\n        if(users[msg.sender].payouts < max_payout && matrixUser[msg.sender].leader_bonus > 0) {\r\n            uint256 leader_bonus = matrixUser[msg.sender].leader_bonus;\r\n\r\n            if(users[msg.sender].payouts + leader_bonus > max_payout) {\r\n                leader_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            matrixUser[msg.sender].leader_bonus -= leader_bonus;\r\n            users[msg.sender].payouts += leader_bonus;\r\n            to_payout += leader_bonus;\r\n        }\r\n        \r\n        require(to_payout > 0, \"Zero payout\");\r\n        \r\n        users[msg.sender].total_payouts += to_payout;\r\n        total_withdraw += to_payout;\r\n        uint256 matrixbonus = to_payout.mul(20).div(100);\r\n        calcMatrixBonus(msg.sender,matrixbonus);\r\n        to_payout -= to_payout.mul(20).div(100);\r\n        if(coin == 0){\r\n           payable(msg.sender).transfer(to_payout); \r\n        }\r\n        else if(coin == 1){\r\n            _token.send(msg.sender,to_payout,\"Token Withdrawed\");\r\n        }\r\n        emit Withdraw(msg.sender, to_payout);\r\n\r\n        if(users[msg.sender].payouts >= max_payout) {\r\n            users[msg.sender].isWithdrawActive = false;\r\n            emit LimitReached(msg.sender, users[msg.sender].payouts);\r\n        }\r\n    }\r\n    \r\n    function emergencyWithdraw() external {\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\r\n        if(to_payout > 0) {\r\n            if(users[msg.sender].payouts + to_payout > max_payout) {\r\n                to_payout = max_payout - users[msg.sender].payouts;\r\n            }\r\n            users[msg.sender].deposit_payouts += to_payout;\r\n            users[msg.sender].payouts += to_payout;\r\n            _refPayout(msg.sender, to_payout);\r\n        }\r\n        require(to_payout > 0, \"Zero payout\");\r\n        users[msg.sender].total_payouts += to_payout;\r\n        total_withdraw += to_payout;\r\n        to_payout -= to_payout.mul(20).div(100);// Matrix bonus deduction, but won't be added to matrix\r\n        payable(msg.sender).transfer(to_payout);\r\n        emit EmergencyWithdraw(msg.sender, to_payout);\r\n        if(users[msg.sender].payouts >= max_payout) {\r\n            users[msg.sender].isWithdrawActive = false;\r\n            emit LimitReached(msg.sender, users[msg.sender].payouts);\r\n        }\r\n        \r\n    }\r\n    function drawPool() external onlyOwner {\r\n        _drawPool();\r\n    }\r\n    function setDaily(uint8 perc) external onlyOwner {\r\n        DAILY = perc;\r\n    }\r\n    function setMinDeposit(uint256 amount) external onlyOwner{\r\n        minDeposit = amount;\r\n    }\r\n    function setEthDeposit(bool value) external onlyOwner{\r\n        isEthDepoPaused = value;\r\n    }\r\n    function maxPayoutOf(uint256 _amount) pure external returns(uint256) {\r\n        return _amount * 3;\r\n    }\r\n    function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {\r\n        max_payout = this.maxPayoutOf(users[_addr].deposit_amount);\r\n        if(users[_addr].isWithdrawActive){\r\n            \r\n            if(users[_addr].deposit_payouts < max_payout) {\r\n                payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days).mul(DAILY).div(1000)) - users[_addr].deposit_payouts;\r\n            \r\n                if(users[_addr].deposit_payouts + payout > max_payout) {\r\n                    payout = max_payout - users[_addr].deposit_payouts;\r\n                }\r\n            }\r\n        }else{\r\n            payout = 0;\r\n        }\r\n    }\r\n\r\n    function userInfo(address _addr) view external returns(address upline, uint40 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus, uint256 pool_bonus, uint256 match_bonus) {\r\n        return (users[_addr].upline, users[_addr].deposit_time, users[_addr].deposit_amount, users[_addr].payouts, users[_addr].direct_bonus, users[_addr].pool_bonus, users[_addr].match_bonus);\r\n    }\r\n\r\n    function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {\r\n        return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);\r\n    }\r\n    \r\n    function matrixBonusInfo(address addr) view external returns(address[3] memory direct_downline, uint256 matrix_bonus, uint256 current_level){\r\n        return(matrixUser[addr].matrixRef,matrixUser[addr].matrix_bonus,matrixUser[addr].level);\r\n    }\r\n    \r\n    function contractInfo() view external returns(uint256 _total_withdraw, uint40 _pool_last_draw, uint256 _pool_balance, uint256 _pool_lider) {\r\n        return (total_withdraw, last_draw, pool_balance, pool_users_refs_deposits_sum[pool_cycle][pool_top[0]]);\r\n    }\r\n\r\n    function poolTopInfo() view external returns(address[] memory addrs, uint256[] memory deps) {\r\n        for(uint8 i = 0; i < 12; i++) {\r\n            if(pool_top[i] == address(0)) break;\r\n\r\n            addrs[i] = pool_top[i];\r\n            deps[i] = pool_users_refs_deposits_sum[pool_cycle][pool_top[i]];\r\n        }\r\n    }\r\n    \r\n    function TeamLeaderInfo() view external returns(address[] memory addr){\r\n        return teamLeaders;\r\n    }\r\n}\r\n\r\n// Creator : Grim Reaper\r\n// Telegram : @grimreaper916","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"DoneDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAILY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamLeaderInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_pool_last_draw\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"_pool_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_lider\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPool\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fourthPool\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEthDepoPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_draw\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leader_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"matrixBonusInfo\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"direct_downline\",\"type\":\"address[3]\"},{\"internalType\":\"uint256\",\"name\":\"matrix_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrixBonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"matrixUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upperLevel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matrix_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"first_deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_volume\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAlreadyInPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leader_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"maxPayoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTopInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pool_top\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_users_refs_deposits_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondPool\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"perc\",\"type\":\"uint8\"}],\"name\":\"setDaily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEthDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"setUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamLeaders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tempUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdPool\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfoTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_structure\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_structure\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"coin\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EtherRolling","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000232dbd94f9a4b0be4765a8680117a34cc2710bd4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3c2f1c827d3cc8752d4a509888e21d06b79e5184197a3e24d32881f6b9767f41"}]}