{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DeriOneV1Main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./DeriOneV1HegicV888.sol\\\";\\nimport \\\"./DeriOneV1OpynV1.sol\\\";\\n\\n/// @author tai\\n/// @title A contract for getting the cheapest options price\\n/// @notice For now, this contract gets the cheapest ETH/WETH put options price from Opyn V1 and Hegic V888\\n/// @dev explicitly state the data location for all variables of struct, array or mapping types (including function parameters)\\n/// @dev adjust visibility of variables. they should be all private by default i guess\\n/// @dev optimize gas consumption\\ncontract DeriOneV1Main is DeriOneV1HegicV888, DeriOneV1OpynV1 {\\n    enum Protocol {HegicV888, OpynV1}\\n    struct TheCheapestETHPutOption {\\n        Protocol protocol;\\n        address oTokenAddress;\\n        address paymentTokenAddress;\\n        uint256 expiry;\\n        uint256 optionSizeInWEI;\\n        uint256 premiumInWEI;\\n        uint256 strikeInUSD;\\n    }\\n\\n    // the cheapest ETH put option across options protocols\\n    TheCheapestETHPutOption private _theCheapestETHPutOption;\\n\\n    event TheCheapestETHPutOptionGot(string protocolName);\\n\\n    constructor(\\n        address _hegicETHOptionV888Address,\\n        address _hegicETHPoolV888Address,\\n        address _opynExchangeV1Address,\\n        address _opynOptionsFactoryV1Address,\\n        address _uniswapFactoryV1Address\\n    )\\n        public\\n        DeriOneV1HegicV888(_hegicETHOptionV888Address, _hegicETHPoolV888Address)\\n        DeriOneV1OpynV1(\\n            _opynExchangeV1Address,\\n            _opynOptionsFactoryV1Address,\\n            _uniswapFactoryV1Address\\n        )\\n    {}\\n\\n    function theCheapestETHPutOption()\\n        public\\n        view\\n        returns (TheCheapestETHPutOption memory)\\n    {\\n        return _theCheapestETHPutOption;\\n    }\\n\\n    /// @dev we could make another function that gets some options instead of only one\\n    /// @dev we could take fixed values for expiry and strike.\\n    /// @dev make this function into a view function somehow in the next version\\n    /// @param _minExpiry minimum expiration date in seconds from now\\n    /// @param _minStrikeInUSD minimum strike price in USD with 8 decimals\\n    /// @param _maxStrikeInUSD maximum strike price in USD with 8 decimals\\n    /// @param _optionSizeInWEI option size in WEI\\n    function getTheCheapestETHPutOption(\\n        uint256 _minExpiry,\\n        // uint256 _maxExpiry,\\n        uint256 _minStrikeInUSD,\\n        uint256 _maxStrikeInUSD,\\n        uint256 _optionSizeInWEI\\n    ) public returns (TheCheapestETHPutOption memory) {\\n        // require expiry. check if it is agter the latest block time\\n        // expiry needs to be seconds from now in hegic and timestamp in opyn v1\\n        // but we don't use the expiry for the opyn for now. so it's seconds now\\n        getTheCheapestETHPutOptionInHegicV888(\\n            _minExpiry,\\n            _optionSizeInWEI,\\n            _minStrikeInUSD\\n        );\\n        require(\\n            hasEnoughETHLiquidityInHegicV888(_optionSizeInWEI) == true,\\n            \\\"your size is too big for liquidity in the Hegic V888\\\"\\n        );\\n        getTheCheapestETHPutOptionInOpynV1(\\n            // _minExpiry,\\n            // _maxExpiry,\\n            _minStrikeInUSD,\\n            _maxStrikeInUSD,\\n            _optionSizeInWEI\\n        );\\n        require(\\n            hasEnoughOTokenLiquidityInOpynV1(_optionSizeInWEI) == true,\\n            \\\"your size is too big for this oToken liquidity in the Opyn V1\\\"\\n        );\\n        if (\\n            theCheapestETHPutOptionInHegicV888.premiumInWEI <\\n            theCheapestWETHPutOptionInOpynV1.premiumInWEI ||\\n            matchedWETHPutOptionOTokenListV1.length == 0\\n        ) {\\n            _theCheapestETHPutOption = TheCheapestETHPutOption(\\n                Protocol.HegicV888,\\n                address(0), // NA\\n                address(0), // NA\\n                theCheapestETHPutOptionInHegicV888.expiry,\\n                _optionSizeInWEI,\\n                theCheapestETHPutOptionInHegicV888.premiumInWEI,\\n                theCheapestETHPutOptionInHegicV888.strikeInUSD\\n            );\\n            emit TheCheapestETHPutOptionGot(\\\"hegic v888\\\");\\n            return _theCheapestETHPutOption;\\n        } else if (\\n            theCheapestETHPutOptionInHegicV888.premiumInWEI >\\n            theCheapestWETHPutOptionInOpynV1.premiumInWEI &&\\n            matchedWETHPutOptionOTokenListV1.length > 0\\n        ) {\\n            _theCheapestETHPutOption = TheCheapestETHPutOption(\\n                Protocol.OpynV1,\\n                theCheapestWETHPutOptionInOpynV1.oTokenAddress,\\n                address(0), // ETH\\n                theCheapestWETHPutOptionInOpynV1.expiry,\\n                _optionSizeInWEI,\\n                theCheapestWETHPutOptionInOpynV1.premiumInWEI,\\n                theCheapestWETHPutOptionInOpynV1.strikeInUSD\\n            );\\n            emit TheCheapestETHPutOptionGot(\\\"opyn v1\\\");\\n            return _theCheapestETHPutOption;\\n        } else {\\n            emit TheCheapestETHPutOptionGot(\\\"no matches\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DeriOneV1HegicV888.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IHegicETHOptionV888.sol\\\";\\nimport \\\"./interfaces/IHegicETHPoolV888.sol\\\";\\n\\ncontract DeriOneV1HegicV888 is Ownable {\\n    using SafeMath for uint256;\\n\\n    // bool public hasEnoughETHLiquidity;\\n\\n    IHegicETHOptionV888 private HegicETHOptionV888Instance;\\n    IHegicETHPoolV888 private HegicETHPoolV888Instance;\\n\\n    IHegicETHOptionV888.OptionType optionType;\\n\\n    struct TheCheapestETHPutOptionInHegicV888 {\\n        uint256 expiry;\\n        uint256 premiumInWEI;\\n        uint256 strikeInUSD;\\n    }\\n\\n    // the cheapest ETH put option in the Hegic V888\\n    TheCheapestETHPutOptionInHegicV888 theCheapestETHPutOptionInHegicV888;\\n\\n    constructor(\\n        address _hegicETHOptionV888Address,\\n        address _hegicETHPoolV888Address\\n    ) public {\\n        instantiateHegicETHOptionV888(_hegicETHOptionV888Address);\\n        instantiateHegicETHPoolV888(_hegicETHPoolV888Address);\\n    }\\n\\n    /// @param _hegicETHOptionV888Address HegicETHOptionV888Address\\n    function instantiateHegicETHOptionV888(address _hegicETHOptionV888Address)\\n        public\\n        onlyOwner\\n    {\\n        HegicETHOptionV888Instance = IHegicETHOptionV888(\\n            _hegicETHOptionV888Address\\n        );\\n    }\\n\\n    /// @param _hegicETHPoolV888Address HegicETHPoolV888Address\\n    function instantiateHegicETHPoolV888(address _hegicETHPoolV888Address)\\n        public\\n        onlyOwner\\n    {\\n        HegicETHPoolV888Instance = IHegicETHPoolV888(_hegicETHPoolV888Address);\\n    }\\n\\n    /// @param _optionSizeInWEI the size of an option to buy in WEI\\n    function hasEnoughETHLiquidityInHegicV888(uint256 _optionSizeInWEI)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // `(Total ETH in contract) * 0.8 - the amount utilized for options`\\n        // we might or might not need the *0.8 part\\n        uint256 availableBalance =\\n            HegicETHPoolV888Instance.totalBalance().mul(8).div(10);\\n        uint256 amountUtilized =\\n            HegicETHPoolV888Instance.totalBalance().sub(\\n                HegicETHPoolV888Instance.availableBalance()\\n            );\\n\\n        require(\\n            availableBalance > amountUtilized,\\n            \\\"there is not enough available balance\\\"\\n        );\\n        uint256 maxOptionSize = availableBalance.sub(amountUtilized);\\n\\n        // what happens when the value of a uint256 is negative?\\n        // is this equation right?\\n        if (maxOptionSize > _optionSizeInWEI) {\\n            return true;\\n        } else if (maxOptionSize <= _optionSizeInWEI) {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice calculate the premium and get the cheapest ETH put option in Hegic v888\\n    /// @param _minExpiry minimum expiration date in seconds from now\\n    /// @param _optionSizeInWEI option size in WEI\\n    /// @param _minStrikeInUSD minimum strike price\\n    /// @dev does _minExpiry and _minStrikeInUSD always give the cheapest premium?\\n    function getTheCheapestETHPutOptionInHegicV888(\\n        uint256 _minExpiry,\\n        uint256 _optionSizeInWEI,\\n        uint256 _minStrikeInUSD\\n    ) internal {\\n        optionType = IHegicETHOptionV888.OptionType.Put;\\n        (uint256 minimumPremiumToPayInWEI, , , ) =\\n            HegicETHOptionV888Instance.fees(\\n                _minExpiry,\\n                _optionSizeInWEI,\\n                _minStrikeInUSD,\\n                uint8(optionType)\\n            );\\n\\n        theCheapestETHPutOptionInHegicV888 = TheCheapestETHPutOptionInHegicV888(\\n            _minExpiry,\\n            minimumPremiumToPayInWEI,\\n            _minStrikeInUSD\\n        );\\n    }\\n}\\n\\n// you need to use require for strike price and expiry and possibly in other places\\n// the hegic has some require\\n// https://github.com/hegic/contracts-v888/blob/ecdc7816c1deef8d2e3cf2629c68807ffdef2cc5/contracts/Options/HegicETHOptions.sol#L121\\n\"\r\n    },\r\n    \"contracts/DeriOneV1OpynV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IOpynExchangeV1.sol\\\";\\nimport \\\"./interfaces/IOpynOptionsFactoryV1.sol\\\";\\nimport \\\"./interfaces/IOpynOTokenV1.sol\\\";\\nimport \\\"./interfaces/IUniswapExchangeV1.sol\\\";\\nimport \\\"./interfaces/IUniswapFactoryV1.sol\\\";\\n\\ncontract DeriOneV1OpynV1 is Ownable {\\n    using SafeMath for uint256;\\n\\n    // uint256 public constant USDC_SCALE = 1e7;\\n    // uint256 public constant USD_SCALE = 1e8;\\n\\n    IOpynExchangeV1 private OpynExchangeV1Instance;\\n    IOpynOptionsFactoryV1 private OpynOptionsFactoryV1Instance;\\n    IOpynOTokenV1[] private oTokenV1InstanceList;\\n    IOpynOTokenV1[] private WETHPutOptionOTokenV1InstanceList;\\n    IOpynOTokenV1[] private matchedWETHPutOptionOTokenV1InstanceList;\\n    IUniswapExchangeV1 private UniswapExchangeV1Instance;\\n    IUniswapFactoryV1 private UniswapFactoryV1Instance;\\n\\n    address constant USDCTokenAddress =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address constant WETHTokenAddress =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    address[] private oTokenAddressList;\\n    address[] private unexpiredOTokenAddressList;\\n    address[] private matchedWETHPutOptionOTokenAddressList;\\n\\n    struct MatchedWETHPutOptionOTokenV1 {\\n        address oTokenAddress;\\n        uint256 expiry;\\n        uint256 premiumInWEI;\\n        uint256 strikeInUSD; // scaled by 10 ** 7 for the USDC denominator\\n        // strictly speaking, it's possible that 10 ** 7 can be too small or big depending on the value passed to the `_strikePrice` and `_strikeExp` of the factory contract at the point of a new oToken contract creation. they want to get decimals from the USDC token contract and programmatically pass it.\\n    }\\n\\n    struct TheCheapestWETHPutOptionInOpynV1 {\\n        address oTokenAddress;\\n        uint256 expiry;\\n        uint256 premiumInWEI;\\n        uint256 strikeInUSD; // scaled by 10 ** 7 for the USDC denominator\\n        // strictly speaking, it's possible that 10 ** 7 can be too small or big depending on the value passed to the `_strikePrice` and `_strikeExp` of the factory contract at the point of a new oToken contract creation.\\n    }\\n\\n    // a matched oToken list with a buyer's expiry and strike price conditions\\n    MatchedWETHPutOptionOTokenV1[] matchedWETHPutOptionOTokenListV1;\\n    // could be mapping(address => MatchedWETHPutOptionOTokenV1) matchedWETHPutOptionOTokenListV1;\\n\\n    // the cheaptest WETH put option in the Opyn V1\\n    TheCheapestWETHPutOptionInOpynV1 theCheapestWETHPutOptionInOpynV1;\\n\\n    // could be mapping(address => TheCheapestWETHPutOptionInOpynV1) theCheapestWETHPutOptionInOpynV1;\\n\\n    constructor(\\n        address _opynExchangeV1Address,\\n        address _opynOptionsFactoryV1Address,\\n        address _uniswapFactoryV1Address\\n    ) public {\\n        instantiateOpynExchangeV1(_opynExchangeV1Address);\\n        instantiateOpynOptionsFactoryV1(_opynOptionsFactoryV1Address);\\n        instantiateUniswapFactoryV1(_uniswapFactoryV1Address);\\n    }\\n\\n    /// @param _opynExchangeV1Address OpynExchangeV1Address\\n    function instantiateOpynExchangeV1(address _opynExchangeV1Address)\\n        public\\n        onlyOwner\\n    {\\n        OpynExchangeV1Instance = IOpynExchangeV1(_opynExchangeV1Address);\\n    }\\n\\n    /// @param _opynOptionsFactoryV1Address OpynOptionsFactoryV1Address\\n    function instantiateOpynOptionsFactoryV1(\\n        address _opynOptionsFactoryV1Address\\n    ) public onlyOwner {\\n        OpynOptionsFactoryV1Instance = IOpynOptionsFactoryV1(\\n            _opynOptionsFactoryV1Address\\n        );\\n    }\\n\\n    /// @param _uniswapFactoryV1Address UniswapFactoryV1Address\\n    function instantiateUniswapFactoryV1(address _uniswapFactoryV1Address)\\n        public\\n        onlyOwner\\n    {\\n        UniswapFactoryV1Instance = IUniswapFactoryV1(_uniswapFactoryV1Address);\\n    }\\n\\n    /// @param _opynOTokenV1AddressList OpynOTokenV1Address\\n    /// @dev this needs to be called not only in a constructor but in other places because new options contracts will be created later.\\n    function _instantiateOpynOTokenV1(address[] memory _opynOTokenV1AddressList)\\n        private\\n    {\\n        for (uint256 i = 0; i < _opynOTokenV1AddressList.length; i++) {\\n            oTokenV1InstanceList.push(\\n                IOpynOTokenV1(_opynOTokenV1AddressList[i])\\n            );\\n        }\\n    }\\n\\n    /// @param _uniswapExchangeV1Address UniswapExchangeV1Address\\n    function _instantiateUniswapExchangeV1(address _uniswapExchangeV1Address)\\n        private\\n    {\\n        UniswapExchangeV1Instance = IUniswapExchangeV1(\\n            _uniswapExchangeV1Address\\n        );\\n    }\\n\\n    /// @notice get the list of WETH put option oToken addresses\\n    /// @dev in the Opyn V1, there are only put options and thus no need to filter a type\\n    /// @dev we don't use ETH put options because the Opyn V1 has vulnerability there\\n    function _getWETHPutOptionsOTokenAddressList() private {\\n        uint256 theNumberOfOTokenAddresses =\\n            OpynOptionsFactoryV1Instance.getNumberOfOptionsContracts();\\n        for (uint256 i = 0; i < theNumberOfOTokenAddresses; i++) {\\n            oTokenAddressList.push(\\n                OpynOptionsFactoryV1Instance.optionsContracts(i)\\n            );\\n        }\\n        _instantiateOpynOTokenV1(oTokenAddressList);\\n        for (uint256 i = 0; i < oTokenV1InstanceList.length; i++) {\\n            if (\\n                oTokenV1InstanceList[i].underlying() == WETHTokenAddress &&\\n                oTokenV1InstanceList[i].strike() == USDCTokenAddress //the asset in which the insurance is calculated\\n                // oTokenV1InstanceList[i].expiry() > block.timestamp // I am commenting out expiry condition because there is nothing that matches this condition. this is because of a combination of the hacking and their upcoming v2\\n            ) {\\n                WETHPutOptionOTokenV1InstanceList.push(oTokenV1InstanceList[i]);\\n                unexpiredOTokenAddressList.push(oTokenAddressList[i]);\\n            }\\n        }\\n    }\\n\\n    /// @dev strike price is scaled by 10 ** 7 for the USDC denominator\\n    function _calculateStrike(IOpynOTokenV1 _oTokenV1Instance)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 strike;\\n        (uint256 value, int32 exponent) = _oTokenV1Instance.strikePrice();\\n        if (exponent >= 0) {\\n            strike = value.mul(uint256(10)**uint256(exponent)).mul(10**7);\\n        } else {\\n            strike = value.mul(\\n                uint256(1).mul(10**7).div(10**uint256(0 - exponent))\\n            );\\n        }\\n        return strike;\\n    }\\n\\n    /// @notice get WETH Put Options that meet expiry and strike conditions\\n    // / @param _minExpiry minimum expiration date\\n    // / @param _maxExpiry maximum expiration date\\n    /// @param _minStrikeInUSD minimum strike price\\n    /// @param _maxStrikeInUSD maximum strike price\\n    function _filterWETHPutOptionsOTokenAddresses(\\n        // uint256 _minExpiry,\\n        // uint256 _maxExpiry,\\n        uint256 _minStrikeInUSD,\\n        uint256 _maxStrikeInUSD\\n    ) private {\\n        for (uint256 i = 0; i < WETHPutOptionOTokenV1InstanceList.length; i++) {\\n            uint256 strike =\\n                _calculateStrike(WETHPutOptionOTokenV1InstanceList[i]);\\n            strike = strike.mul(10**8);\\n            if (\\n                _minStrikeInUSD < strike && strike < _maxStrikeInUSD\\n                // _minExpiry < WETHPutOptionOTokenV1InstanceList[i].expiry() &&\\n                // WETHPutOptionOTokenV1InstanceList[i].expiry() < _maxExpiry // I am commenting out expiry condition because there is nothing that matches this condition. this is because of a combination of the hacking and their upcoming v2\\n            ) {\\n                matchedWETHPutOptionOTokenV1InstanceList.push(\\n                    WETHPutOptionOTokenV1InstanceList[i]\\n                );\\n                matchedWETHPutOptionOTokenAddressList.push(\\n                    unexpiredOTokenAddressList[i]\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @param _matchedWETHPutOptionOTokenV1Instance matched WETHPutOption OTokenV1 Instance\\n    /// @param _matchedWETHPutOptionOTokenAddress matched WETHPutOption OToken Address\\n    /// @param _strike strike price\\n    /// @param _oTokensToBuy the amount of oToken to buy\\n    /// @dev I need to think of a possibility where there is more than one oToken that matches the condition\\n    function _getOpynV1Premium(\\n        IOpynOTokenV1 _matchedWETHPutOptionOTokenV1Instance,\\n        address _matchedWETHPutOptionOTokenAddress,\\n        uint256 _strike,\\n        uint256 _oTokensToBuy\\n    ) private view returns (uint256) {\\n        address oTokenAddress;\\n        uint256 strikePrice =\\n            _calculateStrike(_matchedWETHPutOptionOTokenV1Instance);\\n\\n        if (strikePrice == _strike) {\\n            oTokenAddress = _matchedWETHPutOptionOTokenAddress;\\n        }\\n\\n        uint256 premiumToPayInWEI;\\n        if (oTokenAddress != address(0)) {\\n            premiumToPayInWEI = OpynExchangeV1Instance.premiumToPay(\\n                oTokenAddress,\\n                address(0), // pay with ETH\\n                _oTokensToBuy\\n            );\\n        } else {\\n            premiumToPayInWEI = 2**256 - 1;\\n        }\\n        return premiumToPayInWEI;\\n    }\\n\\n    /// @param _optionSizeInWEI the size of an option to buy in WEI\\n    function _constructMatchedWETHPutOptionOTokenListV1(\\n        uint256 _optionSizeInWEI\\n    ) private {\\n        for (\\n            uint256 i = 0;\\n            i < matchedWETHPutOptionOTokenV1InstanceList.length;\\n            i++\\n        ) {\\n            uint256 strikePrice =\\n                _calculateStrike(matchedWETHPutOptionOTokenV1InstanceList[i]);\\n            address uniswapExchangeContractAddress =\\n                UniswapFactoryV1Instance.getExchange(\\n                    matchedWETHPutOptionOTokenAddressList[i]\\n                );\\n            if (uniswapExchangeContractAddress != address(0)) {\\n                _instantiateUniswapExchangeV1(uniswapExchangeContractAddress);\\n                uint256 oTokensToBuy =\\n                    UniswapExchangeV1Instance.getEthToTokenInputPrice(\\n                        _optionSizeInWEI\\n                    );\\n                matchedWETHPutOptionOTokenListV1.push(\\n                    MatchedWETHPutOptionOTokenV1(\\n                        matchedWETHPutOptionOTokenAddressList[i],\\n                        matchedWETHPutOptionOTokenV1InstanceList[i].expiry(),\\n                        _getOpynV1Premium(\\n                            matchedWETHPutOptionOTokenV1InstanceList[i],\\n                            matchedWETHPutOptionOTokenAddressList[i],\\n                            strikePrice,\\n                            oTokensToBuy\\n                        ),\\n                        strikePrice\\n                    )\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @param _optionSizeInWEI the size of an option to buy in WEI\\n    /// @dev write a function for power operations. it might overflow. the SafeMath library doesn't support this yet.\\n    /// @dev oTokenExchangeRate is scaled by 10**9 because it can be a floating number\\n    function hasEnoughOTokenLiquidityInOpynV1(uint256 _optionSizeInWEI)\\n        internal\\n        returns (bool)\\n    {\\n        address uniswapExchangeContractAddress =\\n            UniswapFactoryV1Instance.getExchange(\\n                theCheapestWETHPutOptionInOpynV1.oTokenAddress\\n            );\\n        // return true for now if there is no exchange in uniswap\\n        if (uniswapExchangeContractAddress == address(0)) {\\n            return true;\\n        }\\n        IOpynOTokenV1 theCheapestOTokenV1Instance =\\n            IOpynOTokenV1(theCheapestWETHPutOptionInOpynV1.oTokenAddress);\\n        uint256 oTokenLiquidity =\\n            theCheapestOTokenV1Instance.balanceOf(\\n                uniswapExchangeContractAddress\\n            );\\n\\n        // The amount of underlying that 1 oToken protects.\\n        uint256 oTokenExchangeRate;\\n        (uint256 value, int32 exponent) =\\n            theCheapestOTokenV1Instance.oTokenExchangeRate();\\n        if (exponent >= 0) {\\n            oTokenExchangeRate = value.mul(uint256(10)**uint256(exponent)).mul(\\n                10**9\\n            );\\n        } else {\\n            oTokenExchangeRate = value.mul(\\n                uint256(1).mul(10**9).div(10**uint256(0 - exponent))\\n            );\\n        }\\n        uint256 optionSizeInOToken = _optionSizeInWEI.div(oTokenExchangeRate);\\n\\n        oTokenLiquidity = oTokenLiquidity.mul(10**9);\\n\\n        if (optionSizeInOToken < oTokenLiquidity) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function getTheCheapestETHPutOptionInOpynV1(\\n        // uint256 _minExpiry,\\n        // uint256 _maxExpiry,\\n        uint256 _minStrikeInUSD,\\n        uint256 _maxStrikeInUSD,\\n        uint256 _optionSizeInWEI\\n    ) internal {\\n        _getWETHPutOptionsOTokenAddressList();\\n        _filterWETHPutOptionsOTokenAddresses(\\n            // _minExpiry,\\n            // _maxExpiry,\\n            _minStrikeInUSD,\\n            _maxStrikeInUSD\\n        );\\n        _constructMatchedWETHPutOptionOTokenListV1(_optionSizeInWEI);\\n        if (matchedWETHPutOptionOTokenListV1.length > 0) {\\n            uint256 minimumPremium =\\n                matchedWETHPutOptionOTokenListV1[0].premiumInWEI;\\n            for (\\n                uint256 i = 0;\\n                i < matchedWETHPutOptionOTokenListV1.length - 1;\\n                i++\\n            ) {\\n                if (\\n                    minimumPremium >\\n                    matchedWETHPutOptionOTokenListV1[i + 1].premiumInWEI\\n                ) {\\n                    minimumPremium = matchedWETHPutOptionOTokenListV1[i + 1]\\n                        .premiumInWEI;\\n                }\\n            }\\n\\n            for (\\n                uint256 i = 0;\\n                i < matchedWETHPutOptionOTokenListV1.length;\\n                i++\\n            ) {\\n                if (\\n                    minimumPremium ==\\n                    matchedWETHPutOptionOTokenListV1[i].premiumInWEI\\n                ) {\\n                    theCheapestWETHPutOptionInOpynV1 = TheCheapestWETHPutOptionInOpynV1(\\n                        matchedWETHPutOptionOTokenAddressList[i],\\n                        matchedWETHPutOptionOTokenListV1[i].expiry,\\n                        minimumPremium,\\n                        matchedWETHPutOptionOTokenListV1[i].strikeInUSD\\n                    );\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHegicETHOptionV888.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IHegicETHOptionV888 {\\n    enum OptionType {Invalid, Put, Call}\\n\\n    function create(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        OptionType optionType\\n    ) external payable returns (uint256 optionID);\\n\\n    function exercise(uint256 optionID) external;\\n\\n    function fees(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        uint8 optionType\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 settlementFee,\\n            uint256 strikeFee,\\n            uint256 periodFee\\n        );\\n\\n    function impliedVolRate() external view returns (uint256);\\n\\n    function migrate(uint256 count) external;\\n\\n    function optionCollateralizationRatio() external view returns (uint256);\\n\\n    function options(uint256)\\n        external\\n        view\\n        returns (\\n            uint8 state,\\n            address holder,\\n            uint256 strike,\\n            uint256 amount,\\n            uint256 lockedAmount,\\n            uint256 premium,\\n            uint256 expiration,\\n            uint8 optionType\\n        );\\n\\n    function owner() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function priceProvider() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function setImpliedVolRate(uint256 value) external;\\n\\n    function setOldHegicETHOptions(address oldAddr) external;\\n\\n    function setOptionCollaterizationRatio(uint256 value) external;\\n\\n    function setSettlementFeeRecipient(address recipient) external;\\n\\n    function settlementFeeRecipient() external view returns (address);\\n\\n    function stopMigrationProcess() external;\\n\\n    function transfer(uint256 optionID, address newHolder) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function transferPoolOwnership() external;\\n\\n    function unlock(uint256 optionID) external;\\n\\n    function unlockAll(uint256[] calldata optionIDs) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHegicETHPoolV888.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IHegicETHPoolV888 {\\n    function INITIAL_RATE() external view returns (uint256);\\n\\n    function _revertTransfersInLockUpPeriod(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool);\\n\\n    function lastProvideTimestamp(address) external view returns (uint256);\\n\\n    function lockedAmount() external view returns (uint256);\\n\\n    function lockedLiquidity(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 premium,\\n            bool locked\\n        );\\n\\n    function lockedPremium() external view returns (uint256);\\n\\n    function lockupPeriod() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function setLockupPeriod(uint256 value) external;\\n\\n    function revertTransfersInLockUpPeriod(bool value) external;\\n\\n    function provide(uint256 minMint) external returns (uint256 mint);\\n\\n    function withdraw(uint256 amount, uint256 maxBurn)\\n        external\\n        returns (uint256 burn);\\n\\n    function lock(uint256 id, uint256 amount) external;\\n\\n    function unlock(uint256 id) external;\\n\\n    function send(\\n        uint256 id,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function shareOf(address account) external view returns (uint256 share);\\n\\n    function availableBalance() external view returns (uint256 balance);\\n\\n    function totalBalance() external view returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOpynExchangeV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IOpynExchangeV1 {\\n    function premiumReceived(\\n        address oTokenAddress,\\n        address payoutTokenAddress,\\n        uint256 oTokensToSell\\n    ) external view returns (uint256);\\n\\n    function sellOTokens(\\n        address receiver,\\n        address oTokenAddress,\\n        address payoutTokenAddress,\\n        uint256 oTokensToSell\\n    ) external;\\n\\n    function buyOTokens(\\n        address receiver,\\n        address oTokenAddress,\\n        address paymentTokenAddress,\\n        uint256 oTokensToBuy\\n    ) external payable;\\n\\n    function premiumToPay(\\n        address oTokenAddress,\\n        address paymentTokenAddress,\\n        uint256 oTokensToBuy\\n    ) external view returns (uint256);\\n\\n    function UNISWAP_FACTORY() external view returns (address);\\n\\n    function uniswapBuyOToken(\\n        address paymentToken,\\n        address oToken,\\n        uint256 _amt,\\n        address _transferTo\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOpynOptionsFactoryV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IOpynOptionsFactoryV1 {\\n    function tokens(string calldata) external view returns (address);\\n\\n    function changeAsset(string calldata _asset, address _addr) external;\\n\\n    function optionsExchange() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function getNumberOfOptionsContracts() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function createOptionsContract(\\n        string calldata _collateralType,\\n        int32 _collateralExp,\\n        string calldata _underlyingType,\\n        int32 _underlyingExp,\\n        int32 _oTokenExchangeExp,\\n        uint256 _strikePrice,\\n        int32 _strikeExp,\\n        string calldata _strikeAsset,\\n        uint256 _expiry,\\n        uint256 _windowSize\\n    ) external returns (address);\\n\\n    function oracleAddress() external view returns (address);\\n\\n    function addAsset(string calldata _asset, address _addr) external;\\n\\n    function supportsAsset(string calldata _asset) external view returns (bool);\\n\\n    function deleteAsset(string calldata _asset) external;\\n\\n    function optionsContracts(uint256) external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOpynOTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IOpynOTokenV1 {\\n    function addERC20Collateral(address vaultOwner, uint256 amt)\\n        external\\n        returns (uint256);\\n\\n    function getVaultOwners() external view returns (address[] memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function hasVault(address owner) external view returns (bool);\\n\\n    function isExerciseWindow() external view returns (bool);\\n\\n    function getVault(address vaultOwner)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function issueOTokens(uint256 oTokensToIssue, address receiver) external;\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function addAndSellERC20CollateralOption(\\n        uint256 amtToCreate,\\n        uint256 amtCollateral,\\n        address receiver\\n    ) external;\\n\\n    function removeCollateral(uint256 amtToRemove) external;\\n\\n    function liquidationFactor()\\n        external\\n        view\\n        returns (uint256 value, int32 exponent);\\n\\n    function createAndSellETHCollateralOption(\\n        uint256 amtToCreate,\\n        address receiver\\n    ) external payable;\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool);\\n\\n    function optionsExchange() external view returns (address);\\n\\n    function createERC20CollateralOption(\\n        uint256 amtToCreate,\\n        uint256 amtCollateral,\\n        address receiver\\n    ) external;\\n\\n    function exercise(\\n        uint256 oTokensToExercise,\\n        address[] calldata vaultsToExerciseFrom\\n    ) external payable;\\n\\n    function addERC20CollateralOption(\\n        uint256 amtToCreate,\\n        uint256 amtCollateral,\\n        address receiver\\n    ) external;\\n\\n    function maxOTokensIssuable(uint256 collateralAmt)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function underlyingRequiredToExercise(uint256 oTokensToExercise)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function renounceOwnership() external;\\n\\n    function openVault() external returns (bool);\\n\\n    function COMPOUND_ORACLE() external view returns (address);\\n\\n    function liquidationIncentive()\\n        external\\n        view\\n        returns (uint256 value, int32 exponent);\\n\\n    function owner() external view returns (address);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function hasExpired() external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function addETHCollateral(address vaultOwner)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function transactionFee()\\n        external\\n        view\\n        returns (uint256 value, int32 exponent);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function strike() external view returns (address);\\n\\n    function underlyingExp() external view returns (int32);\\n\\n    function collateralExp() external view returns (int32);\\n\\n    function oTokenExchangeRate()\\n        external\\n        view\\n        returns (uint256 value, int32 exponent);\\n\\n    function redeemVaultBalance() external;\\n\\n    function setDetails(string calldata _name, string calldata _symbol) external;\\n\\n    function addETHCollateralOption(uint256 amtToCreate, address receiver)\\n        external\\n        payable;\\n\\n    function minCollateralizationRatio()\\n        external\\n        view\\n        returns (uint256 value, int32 exponent);\\n\\n    function liquidate(address vaultOwner, uint256 oTokensToLiquidate) external;\\n\\n    function strikePrice()\\n        external\\n        view\\n        returns (uint256 value, int32 exponent);\\n\\n    function createAndSellERC20CollateralOption(\\n        uint256 amtToCreate,\\n        uint256 amtCollateral,\\n        address receiver\\n    ) external;\\n\\n    function isUnsafe(address vaultOwner) external view returns (bool);\\n\\n    function addAndSellETHCollateralOption(\\n        uint256 amtToCreate,\\n        address receiver\\n    ) external payable;\\n\\n    function collateral() external view returns (address);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function maxOTokensLiquidatable(address vaultOwner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function transferFee(address _address) external;\\n\\n    function burnOTokens(uint256 amtToBurn) external;\\n\\n    function createETHCollateralOption(uint256 amtToCreate, address receiver)\\n        external\\n        payable;\\n\\n    function updateParameters(\\n        uint256 _liquidationIncentive,\\n        uint256 _liquidationFactor,\\n        uint256 _transactionFee,\\n        uint256 _minCollateralizationRatio\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function isETH(address _ierc20) external pure returns (bool);\\n\\n    function removeUnderlying() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapExchangeV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapExchangeV1 {\\n    // Address of ERC20 token sold on this exchange\\n    function tokenAddress() external view returns (address token);\\n\\n    // Address of Uniswap Factory\\n    function factoryAddress() external view returns (address factory);\\n\\n    // Provide Liquidity\\n    function addLiquidity(\\n        uint256 min_liquidity,\\n        uint256 max_tokens,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256 min_eth,\\n        uint256 min_tokens,\\n        uint256 deadline\\n    ) external returns (uint256, uint256);\\n\\n    // Get Prices\\n    function getEthToTokenInputPrice(uint256 eth_sold)\\n        external\\n        view\\n        returns (uint256 tokens_bought);\\n\\n    function getEthToTokenOutputPrice(uint256 tokens_bought)\\n        external\\n        view\\n        returns (uint256 eth_sold);\\n\\n    function getTokenToEthInputPrice(uint256 tokens_sold)\\n        external\\n        view\\n        returns (uint256 eth_bought);\\n\\n    function getTokenToEthOutputPrice(uint256 eth_bought)\\n        external\\n        view\\n        returns (uint256 tokens_sold);\\n\\n    // Trade ETH to ERC20\\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 tokens_bought);\\n\\n    function ethToTokenTransferInput(\\n        uint256 min_tokens,\\n        uint256 deadline,\\n        address recipient\\n    ) external payable returns (uint256 tokens_bought);\\n\\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 eth_sold);\\n\\n    function ethToTokenTransferOutput(\\n        uint256 tokens_bought,\\n        uint256 deadline,\\n        address recipient\\n    ) external payable returns (uint256 eth_sold);\\n\\n    // Trade ERC20 to ETH\\n    function tokenToEthSwapInput(\\n        uint256 tokens_sold,\\n        uint256 min_eth,\\n        uint256 deadline\\n    ) external returns (uint256 eth_bought);\\n\\n    function tokenToEthTransferInput(\\n        uint256 tokens_sold,\\n        uint256 min_eth,\\n        uint256 deadline,\\n        address recipient\\n    ) external returns (uint256 eth_bought);\\n\\n    function tokenToEthSwapOutput(\\n        uint256 eth_bought,\\n        uint256 max_tokens,\\n        uint256 deadline\\n    ) external returns (uint256 tokens_sold);\\n\\n    function tokenToEthTransferOutput(\\n        uint256 eth_bought,\\n        uint256 max_tokens,\\n        uint256 deadline,\\n        address recipient\\n    ) external returns (uint256 tokens_sold);\\n\\n    // Trade ERC20 to ERC20\\n    function tokenToTokenSwapInput(\\n        uint256 tokens_sold,\\n        uint256 min_tokens_bought,\\n        uint256 min_eth_bought,\\n        uint256 deadline,\\n        address token_addr\\n    ) external returns (uint256 tokens_bought);\\n\\n    function tokenToTokenTransferInput(\\n        uint256 tokens_sold,\\n        uint256 min_tokens_bought,\\n        uint256 min_eth_bought,\\n        uint256 deadline,\\n        address recipient,\\n        address token_addr\\n    ) external returns (uint256 tokens_bought);\\n\\n    function tokenToTokenSwapOutput(\\n        uint256 tokens_bought,\\n        uint256 max_tokens_sold,\\n        uint256 max_eth_sold,\\n        uint256 deadline,\\n        address token_addr\\n    ) external returns (uint256 tokens_sold);\\n\\n    function tokenToTokenTransferOutput(\\n        uint256 tokens_bought,\\n        uint256 max_tokens_sold,\\n        uint256 max_eth_sold,\\n        uint256 deadline,\\n        address recipient,\\n        address token_addr\\n    ) external returns (uint256 tokens_sold);\\n\\n    // Trade ERC20 to Custom Pool\\n    function tokenToExchangeSwapInput(\\n        uint256 tokens_sold,\\n        uint256 min_tokens_bought,\\n        uint256 min_eth_bought,\\n        uint256 deadline,\\n        address exchange_addr\\n    ) external returns (uint256 tokens_bought);\\n\\n    function tokenToExchangeTransferInput(\\n        uint256 tokens_sold,\\n        uint256 min_tokens_bought,\\n        uint256 min_eth_bought,\\n        uint256 deadline,\\n        address recipient,\\n        address exchange_addr\\n    ) external returns (uint256 tokens_bought);\\n\\n    function tokenToExchangeSwapOutput(\\n        uint256 tokens_bought,\\n        uint256 max_tokens_sold,\\n        uint256 max_eth_sold,\\n        uint256 deadline,\\n        address exchange_addr\\n    ) external returns (uint256 tokens_sold);\\n\\n    function tokenToExchangeTransferOutput(\\n        uint256 tokens_bought,\\n        uint256 max_tokens_sold,\\n        uint256 max_eth_sold,\\n        uint256 deadline,\\n        address recipient,\\n        address exchange_addr\\n    ) external returns (uint256 tokens_sold);\\n\\n    // ERC20 comaptibility for liquidity tokens\\n    function name() external returns (bytes32 out);\\n\\n    function symbol() external returns (bytes32 out);\\n\\n    function decimals() external returns (uint256 out);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    // Never use\\n    function setup(address token_addr) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapFactoryV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapFactoryV1 {\\n    function initializeFactory(address template) external;\\n\\n    function createExchange(address token) external returns (address out);\\n\\n    function getExchange(address token) external returns (address out);\\n\\n    function getToken(address exchange) external returns (address out);\\n\\n    function getTokenWithId(uint256 token_id) external returns (address out);\\n\\n    function exchangeTemplate() external returns (address out);\\n\\n    function tokenCount() external returns (uint256 out);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hegicETHOptionV888Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hegicETHPoolV888Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opynExchangeV1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opynOptionsFactoryV1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactoryV1Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"}],\"name\":\"TheCheapestETHPutOptionGot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStrikeInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStrikeInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_optionSizeInWEI\",\"type\":\"uint256\"}],\"name\":\"getTheCheapestETHPutOption\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DeriOneV1Main.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionSizeInWEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumInWEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikeInUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct DeriOneV1Main.TheCheapestETHPutOption\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hegicETHOptionV888Address\",\"type\":\"address\"}],\"name\":\"instantiateHegicETHOptionV888\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hegicETHPoolV888Address\",\"type\":\"address\"}],\"name\":\"instantiateHegicETHPoolV888\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opynExchangeV1Address\",\"type\":\"address\"}],\"name\":\"instantiateOpynExchangeV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opynOptionsFactoryV1Address\",\"type\":\"address\"}],\"name\":\"instantiateOpynOptionsFactoryV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapFactoryV1Address\",\"type\":\"address\"}],\"name\":\"instantiateUniswapFactoryV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theCheapestETHPutOption\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DeriOneV1Main.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionSizeInWEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumInWEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikeInUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct DeriOneV1Main.TheCheapestETHPutOption\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeriOneV1Main","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000efc0eeadc1132a12c9487d800112693bf49ecfa2000000000000000000000000878f15ffc8b894a1ba7647c7176e4c01f74e140b00000000000000000000000039246c4f3f6592c974ebc44f80ba6dc69b817c71000000000000000000000000cc5d905b9c2c8c9329eb4e25dc086369d6c7777c000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}