{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IMasterChef {\n    function totalAllocPoint() external view returns (uint256);\n    function poolLength() external view returns (uint256);\n    function poolInfo(uint256 nr) external view returns (address, uint256, uint256, uint256);\n    function pendingSushi(uint256 nr, address who) external view returns (uint256);\n}\n\ncontract BoringSushiPending\n{\n    struct PoolsInfo {\n        uint256 totalAllocPoint;\n        uint256 poolLength;\n    }\n\n    struct PoolInfo {\n        uint256 pid;\n        address lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n        uint256 pendingSushi;\n    }\n    \n    IMasterChef chef = IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd); // Mainnet\n    //IMasterChef chef = IMasterChef(0xFF281cEF43111A83f09C656734Fa03E6375d432A); // Ropsten\n    \n    function getPendingSushi(address who, uint256[] calldata pids) public view returns(PoolsInfo memory, PoolInfo[] memory) {\n        PoolsInfo memory info;\n        info.totalAllocPoint = chef.totalAllocPoint();\n        uint256 poolLength = chef.poolLength();\n        info.poolLength = poolLength;\n        \n        PoolInfo[] memory pools = new PoolInfo[](pids.length);\n\n        for (uint256 i = 0; i < pids.length; i++) {\n            pools[i].pid = pids[i];\n            (address lpToken, uint256 allocPoint,,) = chef.poolInfo(pids[i]);\n            pools[i].lpToken = lpToken;\n            pools[i].allocPoint = allocPoint;\n            pools[i].pendingSushi = chef.pendingSushi(pids[i],who);\n        }\n        return (info, pools);\n    }\n}\n\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"getPendingSushi\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLength\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringSushiPending.PoolsInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingSushi\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringSushiPending.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BoringSushiPending","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}