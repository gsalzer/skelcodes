{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/oracle/lido/WstEthOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../../lib/Decimal.sol\\\";\\nimport {SafeMath} from \\\"../../lib/SafeMath.sol\\\";\\n\\nimport {IERC20} from \\\"../../token/IERC20.sol\\\";\\nimport {IOracle} from \\\"../IOracle.sol\\\";\\nimport {IChainLinkAggregator} from \\\"../IChainLinkAggregator.sol\\\";\\nimport {IWstETH} from \\\"./IWstETH.sol\\\";\\nimport {ICurve} from \\\"../ICurve.sol\\\";\\n\\n\\ncontract WstEthOracle is IOracle {\\n    using SafeMath for uint256;\\n\\n    IChainLinkAggregator public chainLinkEthAggregator = IChainLinkAggregator(\\n        0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\n    );\\n\\n    address public stETHCrvPoolAddress = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022;\\n\\n    address public wstETHAddress = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n\\n    uint256 public chainlinkEthScalar;\\n\\n    constructor() public {\\n        chainlinkEthScalar = uint256(18 - chainLinkEthAggregator.decimals());\\n    }\\n\\n    function fetchCurrentPrice()\\n        external\\n        view\\n        returns (Decimal.D256 memory)\\n    {\\n        // get stETH per wstETH\\n        uint256 stEthPerWstEth = IWstETH(wstETHAddress).stEthPerToken();\\n\\n        // Get amount of USD per stETH to check against safety margin\\n        uint256 ethPerStEth = ICurve(stETHCrvPoolAddress).get_dy(1, 0, 10 ** 18);\\n        require(\\n            ethPerStEth >= 8 * 10 ** 17,\\n            \\\"The amount of ETH per stETH cannot be less than 0.8 ETH\\\"\\n        );\\n\\n        // If the amount of ETH per stETH is higher than 1 ETH, limit it to 1\\n        if (ethPerStEth > 10 ** 18) {\\n            ethPerStEth = 10 ** 18;\\n        }\\n\\n        // get amount of eth per one wstETH\\n        uint256 ethPerWstEth = ethPerStEth.mul(stEthPerWstEth).div(10 ** 18);\\n\\n        // get price in USD\\n        uint256 usdPerEth = uint256(chainLinkEthAggregator.latestAnswer()).mul(10 ** chainlinkEthScalar);\\n\\n        uint256 usdPerWstEth = usdPerEth.mul(ethPerWstEth).div(10 ** 18);\\n\\n        require(\\n            usdPerWstEth > 0,\\n            \\\"WstEthOracle: cannot report a price of 0\\\"\\n        );\\n\\n        return Decimal.D256({\\n            value: usdPerWstEth\\n        });\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Decimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\nimport {Math} from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one()\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function onePlus(\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.add(BASE) });\\n    }\\n\\n    function mul(\\n        uint256 target,\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function mul(\\n        D256 memory d1,\\n        D256 memory d2\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return Decimal.D256({ value: Math.getPartial(d1.value, d2.value, BASE) });\\n    }\\n\\n    function div(\\n        uint256 target,\\n        D256 memory d\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n\\n    function add(\\n        D256 memory d,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.add(amount) });\\n    }\\n\\n    function sub(\\n        D256 memory d,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({ value: d.value.sub(amount) });\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.16;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Math\\n *\\n * Library for non-standard Math functions\\n */\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function to128(\\n        uint256 number\\n    )\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 result = uint128(number);\\n        require(\\n            result == number,\\n            \\\"Math: Unsafe cast to uint128\\\"\\n        );\\n        return result;\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a > b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../lib/Decimal.sol\\\";\\n\\ninterface IOracle {\\n\\n    function fetchCurrentPrice()\\n        external\\n        view\\n        returns (Decimal.D256 memory);\\n\\n}\"\r\n    },\r\n    \"./contracts/oracle/IChainLinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\ninterface IChainLinkAggregator {\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function latestAnswer()\\n        external\\n        view\\n        returns (int256);\\n\\n    function latestTimestamp()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function latestRound()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAnswer(uint256 roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getTimestamp(uint256 roundId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    event AnswerUpdated(\\n        int256 indexed current,\\n        uint256 indexed roundId,\\n        uint256 timestamp\\n    );\\n\\n    event NewRound(\\n        uint256 indexed roundId,\\n        address indexed startedBy,\\n        uint256 startedAt\\n    );\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/lido/IWstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\nimport {IERC20} from \\\"../../token/IERC20.sol\\\";\\n\\ninterface IWstETH {\\n    /**\\n     * @return Returns amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken()\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurve {\\n\\n  function get_virtual_price()\\n    external\\n    view\\n    returns(uint256);\\n\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  )\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainLinkEthAggregator\",\"outputs\":[{\"internalType\":\"contract IChainLinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainlinkEthScalar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchCurrentPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stETHCrvPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wstETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WstEthOracle","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}