{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-14\r\n*/\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n\r\n\r\n||========      ===========  ||=========     ||          ||     ||=========      ==========    \r\n||                  ||       ||        ||    ||          ||     ||                   ||\r\n||=======           ||       ||      ||      ||          ||     ||========||         ||\r\n||                  ||       ||   ||         ||          ||               ||         ||\r\n||========          ||       ||       ||     || ======== ||     ||========||         ||\r\n\r\n\r\n                                        ()\r\n\r\n\r\n|| \\\\    || \\\\    ||=======||   || \\\\     ||   ||========    \\\\   ||\r\n||  \\\\  ||  \\\\    ||       ||   ||  \\\\    ||   ||              \\\\||\r\n||   \\\\||   \\\\    ||       ||   ||   \\\\   ||   ||=======        ||    \r\n||          \\\\    ||       ||   ||    \\\\  ||   ||               ||\r\n||          \\\\    ||=======||   ||     \\\\ ||   ||========       ||\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract eTrustmoney is Ownable {\r\n    event Multisended(uint256 value , address sender);\r\n    using SafeMath for uint256;\r\n    address MaintenaceFeeAddress;\r\n    uint256 lastUserId = 1;\r\n    \r\n    struct User {\r\n        uint txnNumber;\r\n        address userAddress;\r\n        address referralAddress;\r\n        uint userId;\r\n        address LevelContribution;\r\n        address LevelIncomeLevel1;\r\n        address LevelIncomeLevel2;\r\n        address LevelIncomeLevel3;\r\n        address LevelIncomeLevel4;\r\n        address AutoPoolBatch1;\r\n        address AutoPoolBatch2;\r\n        address AutoPoolBatch3;\r\n        address AutoPoolBatch4;\r\n        address AutoPoolBatch5;\r\n        \r\n        \r\n    }\r\n    \r\n        uint256 referralAamount;\r\n        uint256 LevelContributionAmount;\r\n        uint256 LevelIncomeLevel1Amount;\r\n        uint256 LevelIncomeLevel2Amount;\r\n        uint256 LevelIncomeLevel3Amount;\r\n        uint256 LevelIncomeLevel4Amount;\r\n        uint256 AutoPoolBatch1Amount;\r\n        uint256 AutoPoolBatch2Amount;\r\n        uint256 AutoPoolBatch3Amount;\r\n        uint256 AutoPoolBatch4Amount;\r\n        uint256 AutoPoolBatch5Amount;\r\n        uint256 MaintenaceFeeAmount;\r\n        \r\n    mapping(address => User) public users;\r\n    // mapping(uint256 => userBalances) public balances;\r\n\r\n    constructor () public {\r\n        MaintenaceFeeAddress = 0xE58bc8A11a5584007B33513b653b39C272DcaF0b;\r\n    }\r\n    \r\n    function registration(address referrar) public payable {\r\n        require(msg.value == 0.14 ether);\r\n        users[msg.sender].userAddress = msg.sender;\r\n        users[msg.sender].referralAddress = referrar;\r\n        users[msg.sender].txnNumber = lastUserId;\r\n      \r\n        MaintenaceFeeAddress.transfer(0.02 ether);\r\n        referrar.transfer(0.12 ether);\r\n        \r\n        lastUserId++;\r\n        \r\n    }\r\n    \r\n    function getLastUserId() public view returns(uint256) {\r\n        return lastUserId;\r\n    }\r\n    \r\n    function X12Transfers(uint8 status, address userAddress, uint userId,  address referralAddress, address LevelContribution, address LevelIncomeLevel1, address LevelIncomeLevel2, \r\n        address LevelIncomeLevel3, address LevelIncomeLevel4, address AutoPoolBatch1, address AutoPoolBatch2,address AutoPoolBatch3, \r\n        address AutoPoolBatch4, address AutoPoolBatch5) public payable  {\r\n            \r\n        require(status == 2 || status == 3 || status == 4, \"Invalid status\");\r\n        \r\n        if (status == 2) {\r\n        \r\n             referralAamount = 0.05 ether;\r\n             LevelContributionAmount = 0.05 ether;\r\n             LevelIncomeLevel1Amount = 0.0125 ether;\r\n             LevelIncomeLevel2Amount = 0.0125 ether;\r\n             LevelIncomeLevel3Amount = 0.0125 ether;\r\n             LevelIncomeLevel4Amount = 0.0125 ether;\r\n             AutoPoolBatch1Amount = 0.01 ether;\r\n             AutoPoolBatch2Amount = 0.01 ether;\r\n             AutoPoolBatch3Amount = 0.01 ether;\r\n             AutoPoolBatch4Amount = 0.01 ether;\r\n             AutoPoolBatch5Amount = 0.01 ether;\r\n             MaintenaceFeeAmount = 0.02 ether;\r\n        }\r\n        else if (status == 3 ) {\r\n             referralAamount = 0.1 ether;\r\n             LevelContributionAmount = 0.1 ether;\r\n             LevelIncomeLevel1Amount = 0.025 ether;\r\n             LevelIncomeLevel2Amount = 0.025 ether;\r\n             LevelIncomeLevel3Amount = 0.025 ether;\r\n             LevelIncomeLevel4Amount = 0.025 ether;\r\n             AutoPoolBatch1Amount = 0.02 ether;\r\n             AutoPoolBatch2Amount = 0.02 ether;\r\n             AutoPoolBatch3Amount = 0.02 ether;\r\n             AutoPoolBatch4Amount = 0.02 ether;\r\n             AutoPoolBatch5Amount = 0.02 ether;\r\n             MaintenaceFeeAmount = 0.02 ether;\r\n        } else if (status == 4 ){\r\n            referralAamount = 0.4 ether;\r\n             LevelContributionAmount = 0.4 ether;\r\n             LevelIncomeLevel1Amount = 0.1 ether;\r\n             LevelIncomeLevel2Amount = 0.1 ether;\r\n             LevelIncomeLevel3Amount = 0.1 ether;\r\n             LevelIncomeLevel4Amount = 0.1 ether;\r\n             AutoPoolBatch1Amount = 0.08 ether;\r\n             AutoPoolBatch2Amount = 0.08 ether;\r\n             AutoPoolBatch3Amount = 0.08 ether;\r\n             AutoPoolBatch4Amount = 0.08 ether;\r\n             AutoPoolBatch5Amount = 0.08 ether;\r\n             MaintenaceFeeAmount = 0.2 ether;\r\n        }\r\n            referralAddress.transfer(referralAamount);\r\n            LevelContribution.transfer(LevelContributionAmount);\r\n            LevelIncomeLevel1.transfer(LevelIncomeLevel1Amount);\r\n            LevelIncomeLevel2.transfer(LevelIncomeLevel2Amount);\r\n            LevelIncomeLevel3.transfer(LevelIncomeLevel3Amount);\r\n            LevelIncomeLevel4.transfer(LevelIncomeLevel4Amount);\r\n            AutoPoolBatch1.transfer(AutoPoolBatch1Amount);\r\n            AutoPoolBatch2.transfer(AutoPoolBatch2Amount);\r\n            AutoPoolBatch3.transfer(AutoPoolBatch3Amount);\r\n            AutoPoolBatch4.transfer(AutoPoolBatch4Amount);\r\n            AutoPoolBatch5.transfer(AutoPoolBatch5Amount);\r\n            MaintenaceFeeAddress.transfer(MaintenaceFeeAmount);\r\n            \r\n            users[userAddress].userAddress = userAddress;\r\n            users[userAddress].referralAddress = referralAddress;\r\n            users[userAddress].userId = userId;\r\n            users[userAddress].LevelContribution = LevelContribution;\r\n            users[userAddress].LevelIncomeLevel1 = LevelIncomeLevel1;\r\n            users[userAddress].LevelIncomeLevel2 = LevelIncomeLevel2;\r\n            users[userAddress].LevelIncomeLevel3 = LevelIncomeLevel3;\r\n            users[userAddress].LevelIncomeLevel4 = LevelIncomeLevel4;\r\n            \r\n            users[userAddress].AutoPoolBatch1 = AutoPoolBatch1;\r\n            users[userAddress].AutoPoolBatch2 = AutoPoolBatch2;\r\n            users[userAddress].AutoPoolBatch3 = AutoPoolBatch3;\r\n            users[userAddress].AutoPoolBatch4 = AutoPoolBatch4;\r\n            users[userAddress].AutoPoolBatch5 = AutoPoolBatch5;\r\n            \r\n            lastUserId++;\r\n\r\n\r\n    }\r\n    \r\n     function X7Transfers(uint8 status, address userAddress, uint userId,  address referralAddress, address LevelContribution, \r\n     address AutoPoolBatch1, address AutoPoolBatch2,address AutoPoolBatch3, \r\n        address AutoPoolBatch4, address AutoPoolBatch5) public payable  {\r\n            \r\n        require(status == 5 || status == 6 || status == 7, \"Invalid status\");\r\n        \r\n        if (status == 5) {\r\n             referralAamount = 1 ether;\r\n             LevelContributionAmount = 3 ether;\r\n             AutoPoolBatch1Amount = 0.4 ether;\r\n             AutoPoolBatch2Amount = 0.4 ether;\r\n             AutoPoolBatch3Amount = 0.4 ether;\r\n             AutoPoolBatch4Amount = 0.4 ether;\r\n             AutoPoolBatch5Amount = 0.4 ether;\r\n             MaintenaceFeeAmount = 0.2 ether;\r\n        }\r\n        else if (status == 6 ) {\r\n              referralAamount = 1 ether;\r\n             LevelContributionAmount = 5 ether;\r\n             AutoPoolBatch1Amount = 0.8 ether;\r\n             AutoPoolBatch2Amount = 0.8 ether;\r\n             AutoPoolBatch3Amount = 0.8 ether;\r\n             AutoPoolBatch4Amount = 0.8 ether;\r\n             AutoPoolBatch5Amount = 0.8 ether;\r\n             MaintenaceFeeAmount = 0.25 ether;\r\n        } else if (status == 7 ){\r\n            referralAamount = 2 ether;\r\n             LevelContributionAmount = 8 ether;\r\n             AutoPoolBatch1Amount = 2 ether;\r\n             AutoPoolBatch2Amount = 2 ether;\r\n             AutoPoolBatch3Amount = 2 ether;\r\n             AutoPoolBatch4Amount = 2 ether;\r\n             AutoPoolBatch5Amount = 2 ether;\r\n             MaintenaceFeeAmount = 0.5 ether;\r\n        }\r\n            referralAddress.transfer(referralAamount);\r\n            LevelContribution.transfer(LevelContributionAmount);\r\n            AutoPoolBatch1.transfer(AutoPoolBatch1Amount);\r\n            AutoPoolBatch2.transfer(AutoPoolBatch2Amount);\r\n            AutoPoolBatch3.transfer(AutoPoolBatch3Amount);\r\n            AutoPoolBatch4.transfer(AutoPoolBatch4Amount);\r\n            AutoPoolBatch5.transfer(AutoPoolBatch5Amount);\r\n            MaintenaceFeeAddress.transfer(MaintenaceFeeAmount);\r\n            \r\n            users[userAddress].userAddress = userAddress;\r\n            users[userAddress].referralAddress = referralAddress;\r\n            users[userAddress].userId = userId;\r\n            users[userAddress].LevelContribution = LevelContribution;\r\n            \r\n            users[userAddress].AutoPoolBatch1 = AutoPoolBatch1;\r\n            users[userAddress].AutoPoolBatch2 = AutoPoolBatch2;\r\n            users[userAddress].AutoPoolBatch3 = AutoPoolBatch3;\r\n            users[userAddress].AutoPoolBatch4 = AutoPoolBatch4;\r\n            users[userAddress].AutoPoolBatch5 = AutoPoolBatch5;\r\n            \r\n            lastUserId++;\r\n\r\n    }\r\n    \r\n    function fastTrack(address qr50Address, address affiliateIncome1, address affiliateIncome2,  address rebirthIncome1, \r\n     address rebirthIncome2, address rebirthIncome3,address rebirthIncome4, \r\n        address rebirthIncome5) public payable {\r\n            \r\n        require(msg.value == 0.14 ether, \"Invalid value\");\r\n         \r\n            qr50Address.transfer(0.07 ether);\r\n            affiliateIncome1.transfer(0.005 ether);\r\n            affiliateIncome2.transfer(0.005 ether);\r\n            rebirthIncome1.transfer(0.01 ether);\r\n            rebirthIncome2.transfer(0.01 ether);\r\n            rebirthIncome3.transfer(0.01 ether);\r\n            rebirthIncome4.transfer(0.01 ether);\r\n            rebirthIncome5.transfer(0.01 ether);\r\n            MaintenaceFeeAddress.transfer(0.01 ether);\r\n            \r\n            // lastUserId++;\r\n\r\n    }\r\n    \r\n    function goodDay(address referralAddress, address qr10Address, address level1) public payable {\r\n            \r\n        require(msg.value == 0.05 ether, \"Invalid value\");\r\n         \r\n            referralAddress.transfer(0.005 ether);\r\n            qr10Address.transfer(0.005 ether);\r\n\r\n            level1.transfer(0.035 ether);\r\n           \r\n            MaintenaceFeeAddress.transfer(0.005 ether);\r\n            \r\n            // lastUserId++;\r\n\r\n    }\r\n    \r\n    function greenTrack(address referralAddress1, address referralAddress2, address qr25Address, address level1) public payable {\r\n            \r\n        require(msg.value == 0.09 ether, \"Invalid value\");\r\n         \r\n            referralAddress1.transfer(0.005 ether);\r\n            referralAddress2.transfer(0.005 ether);\r\n\r\n            qr25Address.transfer(0.0225 ether);\r\n\r\n            level1.transfer(0.0525 ether);\r\n            MaintenaceFeeAddress.transfer(0.005 ether);\r\n            \r\n            // lastUserId++;\r\n\r\n    }\r\n    \r\n    function allTransfer() public onlyOwner {\r\n        MaintenaceFeeAddress.transfer(address(this).balance);\r\n    }\r\n    \r\n    function multisendEther(address[] _contributors, uint256[] _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i] );\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n        emit Multisended(msg.value, msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"referrar\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"qr50Address\",\"type\":\"address\"},{\"name\":\"affiliateIncome1\",\"type\":\"address\"},{\"name\":\"affiliateIncome2\",\"type\":\"address\"},{\"name\":\"rebirthIncome1\",\"type\":\"address\"},{\"name\":\"rebirthIncome2\",\"type\":\"address\"},{\"name\":\"rebirthIncome3\",\"type\":\"address\"},{\"name\":\"rebirthIncome4\",\"type\":\"address\"},{\"name\":\"rebirthIncome5\",\"type\":\"address\"}],\"name\":\"fastTrack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"referralAddress\",\"type\":\"address\"},{\"name\":\"LevelContribution\",\"type\":\"address\"},{\"name\":\"LevelIncomeLevel1\",\"type\":\"address\"},{\"name\":\"LevelIncomeLevel2\",\"type\":\"address\"},{\"name\":\"LevelIncomeLevel3\",\"type\":\"address\"},{\"name\":\"LevelIncomeLevel4\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch1\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch2\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch3\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch4\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch5\",\"type\":\"address\"}],\"name\":\"X12Transfers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"referralAddress\",\"type\":\"address\"},{\"name\":\"LevelContribution\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch1\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch2\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch3\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch4\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch5\",\"type\":\"address\"}],\"name\":\"X7Transfers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"txnNumber\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"referralAddress\",\"type\":\"address\"},{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"LevelContribution\",\"type\":\"address\"},{\"name\":\"LevelIncomeLevel1\",\"type\":\"address\"},{\"name\":\"LevelIncomeLevel2\",\"type\":\"address\"},{\"name\":\"LevelIncomeLevel3\",\"type\":\"address\"},{\"name\":\"LevelIncomeLevel4\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch1\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch2\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch3\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch4\",\"type\":\"address\"},{\"name\":\"AutoPoolBatch5\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referralAddress1\",\"type\":\"address\"},{\"name\":\"referralAddress2\",\"type\":\"address\"},{\"name\":\"qr25Address\",\"type\":\"address\"},{\"name\":\"level1\",\"type\":\"address\"}],\"name\":\"greenTrack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referralAddress\",\"type\":\"address\"},{\"name\":\"qr10Address\",\"type\":\"address\"},{\"name\":\"level1\",\"type\":\"address\"}],\"name\":\"goodDay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"eTrustmoney","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2082ebfb9406925772b1933513052afa4e024874bb304c5b56d32727adb64d2c"}]}