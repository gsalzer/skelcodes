{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.7.0;\r\n// File: contracts/iface/ModuleRegistry.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title ModuleRegistry\r\n/// @dev A registry for modules.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ninterface ModuleRegistry\r\n{\r\n\t/// @dev Registers and enables a new module.\r\n    function registerModule(address module) external;\r\n\r\n    /// @dev Disables a module\r\n    function disableModule(address module) external;\r\n\r\n    /// @dev Returns true if the module is registered and enabled.\r\n    function isModuleEnabled(address module) external view returns (bool);\r\n\r\n    /// @dev Returns the list of enabled modules.\r\n    function enabledModules() external view returns (address[] memory _modules);\r\n\r\n    /// @dev Returns the number of enbaled modules.\r\n    function numOfEnabledModules() external view returns (uint);\r\n\r\n    /// @dev Returns true if the module is ever registered.\r\n    function isModuleRegistered(address module) external view returns (bool);\r\n}\r\n\r\n// File: contracts/lib/AddressSet.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title AddressSet\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ncontract AddressSet\r\n{\r\n    struct Set\r\n    {\r\n        address[] addresses;\r\n        mapping (address => uint) positions;\r\n        uint count;\r\n    }\r\n    mapping (bytes32 => Set) private sets;\r\n\r\n    function addAddressToSet(\r\n        bytes32 key,\r\n        address addr,\r\n        bool    maintainList\r\n        ) internal\r\n    {\r\n        Set storage set = sets[key];\r\n        require(set.positions[addr] == 0, \"ALREADY_IN_SET\");\r\n\r\n        if (maintainList) {\r\n            require(set.addresses.length == set.count, \"PREVIOUSLY_NOT_MAINTAILED\");\r\n            set.addresses.push(addr);\r\n        } else {\r\n            require(set.addresses.length == 0, \"MUST_MAINTAIN\");\r\n        }\r\n\r\n        set.count += 1;\r\n        set.positions[addr] = set.count;\r\n    }\r\n\r\n    function removeAddressFromSet(\r\n        bytes32 key,\r\n        address addr\r\n        )\r\n        internal\r\n    {\r\n        Set storage set = sets[key];\r\n        uint pos = set.positions[addr];\r\n        require(pos != 0, \"NOT_IN_SET\");\r\n\r\n        delete set.positions[addr];\r\n        set.count -= 1;\r\n\r\n        if (set.addresses.length > 0) {\r\n            address lastAddr = set.addresses[set.count];\r\n            if (lastAddr != addr) {\r\n                set.addresses[pos - 1] = lastAddr;\r\n                set.positions[lastAddr] = pos;\r\n            }\r\n            set.addresses.pop();\r\n        }\r\n    }\r\n\r\n    function removeSet(bytes32 key)\r\n        internal\r\n    {\r\n        delete sets[key];\r\n    }\r\n\r\n    function isAddressInSet(\r\n        bytes32 key,\r\n        address addr\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return sets[key].positions[addr] != 0;\r\n    }\r\n\r\n    function numAddressesInSet(bytes32 key)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        Set storage set = sets[key];\r\n        return set.count;\r\n    }\r\n\r\n    function addressesInSet(bytes32 key)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        Set storage set = sets[key];\r\n        require(set.count == set.addresses.length, \"NOT_MAINTAINED\");\r\n        return sets[key].addresses;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title Ownable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      new owner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Claimable.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title Claimable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Extension for the Ownable contract, where the ownership needs\r\n///      to be claimed. This allows the new owner to accept the transfer.\r\ncontract Claimable is Ownable\r\n{\r\n    address public pendingOwner;\r\n\r\n    /// @dev Modifier throws if called by any account other than the pendingOwner.\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to set the pendingOwner address.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /// @dev Allows the pendingOwner address to finalize the transfer.\r\n    function claimOwnership()\r\n        public\r\n        onlyPendingOwner\r\n    {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/base/ModuleRegistryImpl.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n\r\n/// @title ModuleRegistryImpl\r\n/// @dev Basic implementation of a ModuleRegistry.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ncontract ModuleRegistryImpl is Claimable, AddressSet, ModuleRegistry\r\n{\r\n    bytes32 internal constant ENABLED_MODULE = keccak256(\"__ENABLED_MODULE__\");\r\n    bytes32 internal constant ALL_MODULE     = keccak256(\"__ALL_MODULE__\");\r\n\r\n    event ModuleRegistered      (address module);\r\n    event ModuleDeregistered    (address module);\r\n\r\n    constructor() Claimable() {}\r\n\r\n    function registerModule(address module)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        addAddressToSet(ENABLED_MODULE, module, true);\r\n\r\n        if (!isAddressInSet(ALL_MODULE, module)) {\r\n            addAddressToSet(ALL_MODULE, module, false);\r\n        }\r\n        emit ModuleRegistered(module);\r\n    }\r\n\r\n    function disableModule(address module)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        removeAddressFromSet(ENABLED_MODULE, module);\r\n        emit ModuleDeregistered(module);\r\n    }\r\n\r\n    function isModuleEnabled(address module)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return isAddressInSet(ENABLED_MODULE, module);\r\n    }\r\n\r\n    function isModuleRegistered(address module)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return isAddressInSet(ALL_MODULE, module);\r\n    }\r\n\r\n    function enabledModules()\r\n        external\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        return addressesInSet(ENABLED_MODULE);\r\n    }\r\n\r\n    function numOfEnabledModules()\r\n        external\r\n        view\r\n        override\r\n        returns (uint)\r\n    {\r\n        return numAddressesInSet(ENABLED_MODULE);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabledModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfEnabledModules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"registerModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ModuleRegistryImpl","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7fb94bb7e43a91b0e85cd04d3bcf54d7be82758149837de1b2138afa6c59687b"}]}