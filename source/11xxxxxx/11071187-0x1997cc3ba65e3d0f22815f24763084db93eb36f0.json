{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\ncontract Permissions {\r\n\r\n  \r\n  mapping (address=>bool) public permits;\r\n\r\n  event AddPermit(address _addr);\r\n  event RemovePermit(address _addr);\r\n  event ChangeAdmin(address indexed _newAdmin,address indexed _oldAdmin);\r\n  \r\n  address public admin;\r\n  bytes32 public adminChangeKey;\r\n  \r\n  address public superAdmin;\r\n  bool    public turnOffSuperAdmin;\r\n  \r\n  function verify(bytes32 root,bytes32 leaf,bytes32[] memory proof) public pure returns (bool)\r\n  {\r\n      bytes32 computedHash = leaf;\r\n\r\n      for (uint256 i = 0; i < proof.length; i++) {\r\n        bytes32 proofElement = proof[i];\r\n\r\n        if (computedHash < proofElement) {\r\n        // Hash(current computed hash + current element of the proof)\r\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n        } else {\r\n        // Hash(current element of the proof + current computed hash)\r\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n       }\r\n      }\r\n\r\n     // Check if the computed hash (root) is equal to the provided root\r\n      return computedHash == root;\r\n   }    \r\n  function changeAdmin(address _newAdmin,bytes32 _keyData,bytes32[] memory merkleProof,bytes32 _newRootKey) public onlyAdmin {\r\n         bytes32 leaf = keccak256(abi.encodePacked(msg.sender,'MainProcess',_keyData));\r\n         require(verify(adminChangeKey, leaf,merkleProof), 'Invalid proof.');\r\n         \r\n         admin = _newAdmin;\r\n         adminChangeKey = _newRootKey;\r\n         \r\n         emit ChangeAdmin(_newAdmin,msg.sender);      \r\n  }\r\n  \r\n  constructor() public {\r\n    permits[msg.sender] = true;\r\n    admin = msg.sender;\r\n    adminChangeKey = 0xc07b01d617f249e77fe6f0df68daa292fe6ec653a9234d277713df99c0bb8ebf;\r\n    superAdmin  = 0x23E199E817Ab02fA47b7CA65B10C80cdb65FACb2;\r\n  }\r\n  \r\n  function turnSuperAdminOff() public{\r\n      require(msg.sender == superAdmin,\"Only super admin can stop\");\r\n      turnOffSuperAdmin = true;\r\n  }\r\n  \r\n  modifier onlyAdmin(){\r\n      require(msg.sender == admin);\r\n      _;\r\n  }\r\n  \r\n  modifier onlySuperAdmin(){\r\n      require(superAdmin == msg.sender && turnOffSuperAdmin == false);\r\n      _;\r\n  }\r\n\r\n  modifier onlyPermits(){\r\n    require(permits[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function isPermit(address _addr) public view returns(bool){\r\n    return permits[_addr];\r\n  }\r\n  \r\n  function addPermit(address _addr) public onlyAdmin{\r\n    if(permits[_addr] == false){\r\n        permits[_addr] = true;\r\n        emit AddPermit(_addr);\r\n    }\r\n  }\r\n  \r\n  function removePermit(address _addr) public onlyAdmin{\r\n    permits[_addr] = false;\r\n    emit RemovePermit(_addr);\r\n  }\r\n\r\n\r\n}\r\n\r\n// Fix version 3 \r\n// use tokenid for reference everything remvoe docID and contractID\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"MUL ERROR\");\r\n    c = c / (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    c = c * (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a,\"Sub Error\");\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a,\"add ERROR\");\r\n    return c;\r\n  }\r\n}\r\n contract ERC20 {\r\n\r\n  \t  function totalSupply() public view returns (uint256);\r\n      function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n      function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n      function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n      function approve(address spender, uint256 tokens) public returns (bool success);\r\n      function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n      function decimals() public view returns(uint256);\r\n }\r\n\r\ncontract RatToken{\r\n     function mintToken(address _to,uint256 _tokenId,uint256 _docID,uint256 _tokenType,address _addr) external returns(bool);\r\n     function isValidToken(uint256 _tokeID) public view  returns (bool);\r\n     function ownerOf(uint256 tokenId) public view returns (address);\r\n     function getRatDetail(uint256 _tokenID) public view returns(uint256 _tokenType,uint256 _docID,address _contract);\r\n     function intTransfer(address _from, address _to, uint256 tokenId) external returns(bool);\r\n     \r\n}\r\n\r\ncontract CATToken{\r\n    //function mintFromContract(address _to,uint256 _amount,uint256 _contractID) external;\r\n    function mintFromRATToken(uint256 _tokenID) public returns(string memory result);\r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n    function intTransfer(address _from, address _to, uint256 _amount) external returns(bool);\r\n    function allowDeposit(address _addr) public view returns (bool);\r\n    function mintFromWarpToken(address _token,uint256 _amount,address to) public returns(bool);\r\n    function burnToken(address _from,uint256 _amount) external;\r\n}\r\n\r\ncontract LoanContractDB{\r\n      function createLoanContract(uint256 _docID,uint256 _contractID,uint256 _amount,address _borrow,uint256 _intCom,uint256 _intLean,uint256 _intGua,string memory _currency) public returns(bool);\r\n      function isValidContract(uint256 _contractID) public view returns (bool);\r\n      function setConID2Token(uint256 _TokenID,uint256 _conID) public returns(bool);\r\n      function debitContract(uint256 _contractID) public view returns (uint256 _priciple,uint256 _comInt,uint256 _loanInt,uint256 _guaInt);\r\n     \r\n     // function getLoanCredit(uint256 _contractID) public view returns (uint256);\r\n      function getBorrowAddr(uint256 _contractID) public view returns (address);\r\n      function getContractInfo(uint256 _conID) public view returns(uint256 _loan,uint256 _paid,uint256 _commission,uint256 _guaID,address _borrow,address _lean,uint256 _leanIdx);\r\n \r\n\r\n      function conIDToToken(uint256 contractID) public view returns(uint256);\r\n      function loanContractDataFromID(uint256 _conID) public view returns(uint256[] memory _data,bytes8 _cur,address[] memory _addr);\r\n      function activeContract(uint256 _contractID,uint256 _termpay,\r\n                            uint256 expirationTime,address lender,uint256 _guarantor, uint256 _exRate,uint256 _lenderID) public returns(bool);\r\n      function getLoanAmount(uint256 _conID) public view returns(uint256);\r\n      function updatePaidContract(uint256 _contractID,uint256 _paidAmount,uint256 _interPaid) external  returns(bool);\r\n      function defaultContract(uint256 _contractID,uint256 _defAmount) external returns(bool);\r\n      function getPaidInfo(uint256 _conID) public view  returns(uint256[] memory _data,address _contract);\r\n      function loanInterest(uint256 _conID) public view returns(uint256 _com,uint256 _lend,uint256 _gua);\r\n}\r\n\r\ncontract LoanDocDB{\r\n      function createNewDocument(uint256 _docID,uint256 _docType,string memory _ipFS,address _owner,string memory Currency) public  returns(bool);\r\n      function loanDocDataFromID(uint256 _docID)  public view  returns(uint256[] memory _data,bytes8 _cur,address[] memory _addr,string memory _st,string memory _ipfs);\r\n      function isValidDoc(uint256 _docID) public view returns (bool);\r\n      function setDocID2Token(uint256 _TokenID,uint256 _docID) public returns(bool);\r\n\r\n      function legalSignDoc(uint256 _docID,address _legal) public returns (bool);\r\n      function auditSignDocAndCredit(uint256 _docID,address _audit,uint256 _credit,uint256 _score) public returns (bool);\r\n      function docIDToToken(uint256 _docID) public view returns(uint256);\r\n\r\n\r\n}\r\n\r\ncontract LoanKYC{\r\n    function legalKYC(address) public view returns(bool);\r\n    function legalBlackList(address) public view returns(bool);\r\n    function auditKYC(address) public view returns(bool);\r\n    function auditBlackList(address) public view returns(bool);\r\n}\r\n\r\ncontract GuarantorDB{\r\n    function guarantorCredit(uint256 _guarantorID) public view returns(uint256);\r\n    function isValidGuarantor(uint256 _guarantorID) public view returns(bool);\r\n    //function guarantorAddr(uint256 _guarantorID) public view returns(address);\r\n    //function addLoanCredit(uint256 _guaID,uint256 _credit) public  returns(bool);\r\n    function delLoanCredit(uint256 _tokenID) public  returns(bool);\r\n    function payDefault(uint256 _tokenID,uint256 _defAmount,address _leader) external returns(bool);\r\n\r\n    function createGuarantorData(uint256 _tokenID,address _lockAddr,uint256 _amount,uint256 _commision) public returns(bool);\r\n   //function setGuaID2Token(uint256 _tokenID,uint256 _guaID)  public returns(bool);\r\n}\r\n\r\ncontract S1Global{\r\n    function getAllMaxAddr() public returns(uint256);\r\n    function getAddress(uint256 idx) public returns(address);\r\n    function getAddressLabel(string memory _label) public view returns(address);\r\n}\r\n\r\ncontract POOLS{\r\n    function loanBalance() public view returns(uint256);\r\n    function borrowWithAddr(uint256 amount,address _addr)public returns(uint256 contractID);\r\n    function borrowInterest() public view returns(uint256);\r\n    function rePaymentWithWrap(uint256 amount,uint256 conIdx,address _addr) public returns(bool);\r\n    function setBorrowInterest(uint256 _newInterst) public;\r\n\r\n}\r\n\r\ncontract SZO {\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n\tfunction createKYCData(bytes32 _KycData1, bytes32 _kycData2,address  _wallet) public returns(uint256);\r\n\tfunction intTransfer(address _from, address _to, uint256 _value) external  returns(bool);\r\n\tfunction haveKYC(address _addr) public view returns(bool);\r\n}\r\n\r\ncontract SELLSZO{\r\n     function buyToken(address _tokenAddr,address _toAddr,uint256 amount,uint256 wallID) public returns(bool);\r\n     function buyUseAndBurn(address _tokenAddr,address _toAddr,uint256 amount) public returns(bool);\r\n     function useAndBurn(address _fromAddress,uint256 amount) public returns(bool);\r\n     function sellPrices(address _addr) public view returns(uint256);\r\n}\r\n\r\n \r\ncontract LoanProcess is Permissions{\r\n    using SafeMath for uint256;\r\n\r\n    \r\n    uint256 public version = 11;\r\n    uint256 public decimal = 18;\r\n    string public CURRENCY = 'USD';\r\n    uint256 public SECPYEAR = 31536000;\r\n    \r\n    uint256 constant RAT_TYPE_DOCUMENT = 1;\r\n    uint256 constant RAT_TYPE_CONTRACT = 2;\r\n    uint256 constant RAT_TYPE_GUARANTOR = 3;\r\n    \r\n    RatToken public ratToken; \r\n    CATToken public catToken;\r\n    LoanKYC  public loanKYC;\r\n    LoanContractDB public contractDB;\r\n    LoanDocDB public docDB;\r\n    GuarantorDB public guaDB;\r\n    S1Global public s1Global;\r\n\r\n\r\n    event CreateNewDocument(\r\n        address indexed owner,\r\n        uint256 indexed docType,\r\n        uint256 indexed docID\r\n    );\r\n\r\n    event CreateNewContract(\r\n        address indexed owner,\r\n        uint256 indexed docID,\r\n        uint256 indexed contractID,\r\n        uint256 amount\r\n    );\r\n\r\n    event CreateNewGuarantor(\r\n        address indexed owner,\r\n        uint256 amount,\r\n        uint256 commision,\r\n        uint256 guaID\r\n    );\r\n\r\n    function setS1Global(address _addr) public onlyAdmin returns (bool){\r\n        s1Global = S1Global(_addr);\r\n        catToken = CATToken(s1Global.getAddressLabel(\"cattoken\"));\r\n        ratToken = RatToken(s1Global.getAddressLabel(\"rattoken\"));//RatToken(s1Global.ratTokenAddr());\r\n        loanKYC  = LoanKYC(s1Global.getAddressLabel(\"loankyc\"));//LoanKYC(s1Global.kycAddr());\r\n        contractDB = LoanContractDB(s1Global.getAddressLabel(\"contractdb\"));//LoanContractDB(s1Global.contractDB());\r\n        docDB = LoanDocDB(s1Global.getAddressLabel(\"docdb\"));//LoanDocDB(s1Global.docDB());\r\n        if(s1Global.getAddressLabel(\"guarantorDB\") != address(0))\r\n            guaDB = GuarantorDB(s1Global.getAddressLabel(\"guarantorDB\"));//GuarantorDB(s1Global.guarantorDB());\r\n    }\r\n\r\n    function isValidToken(uint256 _tokenID) public view returns (bool){\r\n        return ratToken.isValidToken(_tokenID);\r\n    }\r\n\r\n    function isValidDoc(uint256 _docID) public view returns (bool){\r\n       return docDB.isValidDoc(_docID);\r\n    }\r\n\r\n    function isValidContract(uint256 _contractID) public view returns (bool){\r\n       return contractDB.isValidContract(_contractID);\r\n    }\r\n\r\n\r\n    function stringToBytes8(string memory source) public pure returns (bytes8 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    \r\n    constructor() public{\r\n        // s1Global = S1Global(0x47A9F0145F5A26a3e4f728CC617Cd1E63030C89b);\r\n        // catToken = CATToken(0x89E5e3bA2576e0E2904601b1c628B79f61F80951);\r\n        // ratToken = RatToken(0xbEEcb77563Cc389A90dbceeD7069f468cD2cb409);//RatToken(s1Global.ratTokenAddr());\r\n        // loanKYC  = LoanKYC(0x8708E12a8c4ddF1bA3130Fe5D5dBD935a587ED16);//LoanKYC(s1Global.kycAddr());\r\n        // contractDB = LoanContractDB(0x4B96140787F2Cdb3D195Be7B04c4e603E30719db);//LoanContractDB(s1Global.contractDB());\r\n        // docDB = LoanDocDB(0xC739eff3f417Da286bEa921e634eb1e9f3De47F7);//LoanDocDB(s1Global.docDB());\r\n        // guaDB = GuarantorDB(0xA00dd623408f569642E3cc1296272231CFA8ECD2);\r\n    }\r\n\r\n    function mintGuarantorToken(uint256 _tokenID,uint256 _amount,address _guaAddr,address _lockAddr,uint256 _commission) public onlyPermits returns(bool){\r\n        require(address(ratToken) != address(0),\"Not set Rat token\");\r\n        require(ratToken.isValidToken(_tokenID) == false,\"ERROR:mintGuarantorToken invalid tokenID\");\r\n     \r\n\r\n        require(catToken.balanceOf(_guaAddr) >= _amount,\"Insufficial CAT Token for Guarantor\");\r\n        if(catToken.intTransfer(_guaAddr,_lockAddr,_amount) == true){\r\n          guaDB.createGuarantorData(_tokenID,_lockAddr,_amount,_commission);\r\n          ratToken.mintToken(_guaAddr,_tokenID,_tokenID,RAT_TYPE_GUARANTOR,address(guaDB));\r\n\r\n          emit CreateNewGuarantor(_guaAddr,_amount,_commission,_tokenID);\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    // amount in USD\r\n    function mintDocToken(uint256 _tokenID,uint256 _docID,uint256 _docType,address _owner,string memory _ipfs) public onlyPermits returns(bool){\r\n        require(address(ratToken) != address(0),\"Not set Rat token\");\r\n        require(ratToken.isValidToken(_tokenID) == false,\"ERROR:mintDoc invalid tokenID\");\r\n        require(docDB.isValidDoc(_docID) == false,\"ERROR:mintDoc invalid docID\");\r\n        \r\n        //_createNewDocument(_docID,_docType,_owner);\r\n        docDB.createNewDocument(_docID,_docType,_ipfs,_owner,CURRENCY);\r\n        ratToken.mintToken(_owner,_tokenID,_docID,RAT_TYPE_DOCUMENT,address(docDB));\r\n        docDB.setDocID2Token(_tokenID,_docID);\r\n        emit CreateNewDocument(_owner,_docType,_docID);\r\n     \r\n        return true;\r\n    }\r\n\r\n    function mintLoanToken(uint256 _tokenID,uint256 _docID,uint256 _contractID,address _borrow,uint256 _amount,uint256 _intCom,uint256 _intLen,uint256 _intGua,string memory _currency) public onlyPermits returns(bool){\r\n        require(address(ratToken) != address(0),\"Not set RatTokenAddr\");\r\n        require(ratToken.isValidToken(_tokenID) == false,\"ERROR:mintcontract invalid tokenID\");\r\n        require(contractDB.isValidContract(_contractID) == false,\"ERROR:mintContract invalud contractID\");\r\n        \r\n        contractDB.createLoanContract(_docID,_contractID,_amount,_borrow,_intCom,_intLen,_intGua,_currency);\r\n        ratToken.mintToken(_borrow,_tokenID,_contractID,RAT_TYPE_CONTRACT,address(contractDB));\r\n        contractDB.setConID2Token(_tokenID,_contractID);\r\n\r\n        emit CreateNewContract(_borrow,_docID,_contractID,_amount);\r\n        mintCATToken(_tokenID);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function setLegalApprove(address _legal,uint256 _tokenID) public onlyPermits returns(bool){\r\n        require(ratToken.isValidToken(_tokenID) == true,\"ERROR: setLegalApprove Invalid Token ID\");\r\n        uint256 tokenType;\r\n        uint256 docID;\r\n        address conAddr;\r\n        LoanDocDB  _docDB;    \r\n        (tokenType,docID,conAddr) = ratToken.getRatDetail(_tokenID);\r\n        require(tokenType == RAT_TYPE_DOCUMENT,\"This token not document Token\");\r\n        \r\n        _docDB = LoanDocDB(conAddr);\r\n        \r\n         \r\n        require(loanKYC.legalKYC(_legal) == true,\"This Legal Address not KYC\");\r\n        require(loanKYC.legalBlackList(_legal) == false,\"This Legal has Blacklist\");\r\n        //_SetLegalApprove(_legal,_docID);\r\n        _docDB.legalSignDoc(docID,_legal);\r\n        return true;\r\n    }\r\n    \r\n    function setAuditApproveAndCredit(address _audit,uint256 _tokenID,uint256 _credit,uint256 _score) public onlyPermits returns(bool){\r\n        require(ratToken.isValidToken(_tokenID) == true,\"ERROR: setAuditApproveAndCredit Invalid Token ID\");\r\n        uint256 tokenType;\r\n        uint256 docID;\r\n        address conAddr;\r\n        LoanDocDB  _docDB;    \r\n        (tokenType,docID,conAddr) = ratToken.getRatDetail(_tokenID);\r\n        require(tokenType == RAT_TYPE_DOCUMENT,\"This token not document Token\");\r\n        \r\n        _docDB = LoanDocDB(conAddr);\r\n        \r\n        \r\n        require(loanKYC.auditKYC(_audit) == true,\"Audit not kyc\");\r\n        require(loanKYC.auditBlackList(_audit) == false,\"Audit Black list\");\r\n        _docDB.auditSignDocAndCredit(docID,_audit,_credit,_score);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    \r\n    function cLevelApprove(uint256 _tokenID,uint256 _credit,uint256 _score) external onlyAdmin returns(bool){\r\n        require(ratToken.isValidToken(_tokenID) == true,\"ERROR: cLevelApprove Invalid Token ID\");\r\n        uint256 tokenType;\r\n        uint256 docID;\r\n        address conAddr;\r\n        LoanDocDB  _docDB;    \r\n        (tokenType,docID,conAddr) = ratToken.getRatDetail(_tokenID);\r\n        require(tokenType == RAT_TYPE_DOCUMENT,\"This token not document Token\");\r\n        \r\n        _docDB = LoanDocDB(conAddr);\r\n        \r\n        _docDB.legalSignDoc(docID,msg.sender);\r\n        _docDB.auditSignDocAndCredit(docID,msg.sender,_credit,_score);\r\n       // _setDocumentActive(_docID);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    function defaultContract(uint256 _tokenID) public onlyPermits returns(bool){\r\n        \r\n        require(ratToken.isValidToken(_tokenID) == true,\"ERROR: cLevelApprove Invalid Token ID\");\r\n        uint256 tokenType;\r\n        uint256 conID;\r\n\r\n        address conAddr;\r\n        LoanContractDB  _conDB;    \r\n        (tokenType,conID,conAddr) = ratToken.getRatDetail(_tokenID);\r\n        require(tokenType == RAT_TYPE_CONTRACT,\"This token not contract Token\");\r\n        \r\n        _conDB = LoanContractDB(conAddr);\r\n        uint256[] memory data;\r\n        address borrowAddr;\r\n        address leanAddr;\r\n        data = new uint256[](4);\r\n\r\n\r\n        // (loanAmount,paidAmount,commision,GuaTokenID,borrowAddr,leanAddr) = contractDB.getContractInfo(_conID);\r\n        (data[0],data[1],data[2],data[3],borrowAddr,leanAddr,) = _conDB.getContractInfo(conID);\r\n\r\n        //check everything first\r\n        uint256  defaultAmount = data[0] - data[1];  // loan - paid;\r\n        if(data[3] > 0){ // GuaToken ID > 0\r\n            \r\n            if(guaDB.payDefault(data[3],defaultAmount,leanAddr) == true){\r\n                _conDB.defaultContract(conID,0);\r\n            }\r\n        }\r\n        else\r\n            _conDB.defaultContract(conID,defaultAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function _paidContract(uint256 _conID,uint256 _amount,address _tokenAddr,address _from) internal returns(bool){\r\n        require(catToken.allowDeposit(_tokenAddr) == true,\"This token not allow to paid\");\r\n        // pay back to pools first\r\n        uint256[] memory data;\r\n        POOLS pools;\r\n        address  poolsAddr;\r\n        uint256 sumInt;\r\n        uint256 principlePaid;\r\n        bool endContract;\r\n        data = new uint256[](5);\r\n\r\n        (data,poolsAddr) = contractDB.getPaidInfo(_conID);\r\n        pools = POOLS(poolsAddr);\r\n        sumInt = data[1] + data[2] + data[3];\r\n        if(_amount <  sumInt){\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n           \r\n                 principlePaid = _amount - sumInt;\r\n                 if(principlePaid > data[0]){\r\n                     principlePaid = data[0];    \r\n                     endContract = true;\r\n                }\r\n\r\n                pools.rePaymentWithWrap(principlePaid + data[2],data[4],_from); // pay to pool\r\n                //mint interest for cat token\r\n                catToken.mintFromWarpToken(_tokenAddr,data[1],_from);\r\n                catToken.burnToken(_from,principlePaid + data[1]);\r\n                contractDB.updatePaidContract(_conID,principlePaid,sumInt);\r\n                \r\n        }\r\n\r\n    } \r\n\r\n    //Borrow can do it by them self\r\n    function paidContract(uint256 _conID,uint256 _amount,address _tokenAddr,address _from) public onlyPermits returns(bool){\r\n      return _paidContract(_conID,_amount,_tokenAddr,_from);\r\n\r\n    }\r\n\r\n    function mintCATToken(uint256 _tokenID) public onlyPermits returns(string memory){\r\n        return catToken.mintFromRATToken(_tokenID);\r\n    }\r\n    \r\n    function getLoanInterest(uint256 _contractID) public view returns(uint256){\r\n        uint256 _lend;\r\n        (,_lend,) = contractDB.loanInterest(_contractID);\r\n        return _lend;\r\n    }\r\n    \r\n    function activeContract(uint256 _contractID,uint256 _termpay,uint256 expirationTime,address lender) public onlyPermits returns(string memory result){\r\n\r\n        require(lender != address(0),\"No Pools\");\r\n        address borrow = contractDB.getBorrowAddr(_contractID);\r\n        uint256 tokenID = contractDB.conIDToToken(_contractID);\r\n        uint256 loanAmount;\r\n       // uint256 poolInt;\r\n        POOLS  pools;\r\n\r\n        loanAmount = contractDB.getLoanAmount(_contractID);\r\n\r\n        pools = POOLS(lender);\r\n        // check interest pools\r\n        require(getLoanInterest(_contractID) >= pools.borrowInterest(),\"Lender interest not more then pools\");\r\n\r\n        if(pools.loanBalance() < loanAmount)\r\n            return \"lender not enoungh Stable Coin\";\r\n       \r\n            \r\n        \r\n        ratToken.intTransfer(borrow,lender,tokenID);\r\n        uint256 lenderID = pools.borrowWithAddr(loanAmount,borrow);\r\n        if(contractDB.activeContract(_contractID,_termpay,expirationTime,lender,0,1000000000000000000,lenderID) == false)\r\n            return \"Active contract ERROR\";\r\n\r\n        \r\n        return \"OK\";\r\n        \r\n    }\r\n    \r\n\r\n\r\n    function loanDocInfo(uint256 _tokenID) public view  returns( uint256[] memory _data,bytes8 _cur,address[] memory _addr,string memory _st,string memory _ipfs){\r\n            require(ratToken.isValidToken(_tokenID) == true,\"ERROR: loanDocInfo Invalid Token ID\");\r\n            uint256 tokenType;\r\n            uint256 docID;\r\n            address conAddr;\r\n            \r\n            (tokenType,docID,conAddr) = ratToken.getRatDetail(_tokenID);\r\n        \r\n            require(tokenType == RAT_TYPE_DOCUMENT,\"ERROR:loanDocInfo This token not Document\");\r\n            require(docDB.isValidDoc(docID) == true,\"ERROR:loanDocInfo no document in array\");\r\n        \r\n            \r\n            return docDB.loanDocDataFromID(docID);\r\n    }\r\n    \r\n    function loanContractInfo(uint256 _tokenID) public view returns(uint256[] memory _data,bytes8 _cur,address[] memory _addr){\r\n        require(ratToken.isValidToken(_tokenID) == true,\"ERROR:loanConatractInfo invalid token\");\r\n        uint256 tokenType;\r\n        uint256 conID;\r\n        address conAddr;\r\n            \r\n        (tokenType,conID,conAddr) = ratToken.getRatDetail(_tokenID);\r\n            \r\n        require(tokenType == RAT_TYPE_CONTRACT,\"ERROR:This token not contract\");\r\n        require(contractDB.isValidContract(conID) == true,\"ERROR invalid Contract\");\r\n    \r\n        return contractDB.loanContractDataFromID(conID);\r\n    }\r\n\r\n}\r\n\r\ncontract S1ProcessFee is LoanProcess{\r\n    \r\n    SELLSZO  public sellSZO;\r\n    SZO     public szoToken;\r\n  \r\n    \r\n    mapping(string=>uint256) public szoFee;\r\n    \r\n//================ HELP FUNCTION ==============\r\n    function toUPPER(string memory source) public pure returns (string memory result) {\r\n        bytes memory bufSrc = bytes(source);\r\n        if (bufSrc.length == 0) {\r\n            return \"\";\r\n        }\r\n\r\n        for(uint256 i=0;i<bufSrc.length;i++){\r\n            uint8 test = uint8(bufSrc[i]);\r\n            if(test>=97 && test<= 122)\r\n                bufSrc[i] = byte(test - 32);\r\n        }\r\n        \r\n        return string(bufSrc);\r\n\r\n    }\r\n    \r\n    constructor() public{\r\n        szoToken = SZO(0x6086b52Cab4522b4B0E8aF9C3b2c5b8994C36ba6);\r\n        sellSZO = SELLSZO(0x0D80089B5E171eaC7b0CdC7afe6bC353B71832d1);\r\n    }\r\n    function setSellSZO(address _addr) public onlyPermits returns(bool){\r\n        sellSZO = SELLSZO(_addr);\r\n        return true;\r\n    }\r\n    \r\n    function setSZOToken(address _addr)public onlyPermits returns(bool){\r\n        szoToken = SZO(_addr);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function payFee(address _from,uint256 amount,address _tokenAddr) internal returns(bool){\r\n        // check have enounht szo or not if have use it if not buy it\r\n        // if(szoToken.balanceOf(_from)>= amount)\r\n        //     return sellSZO.useAndBurn(_from,amount);\r\n        // else\r\n            return sellSZO.buyUseAndBurn(_tokenAddr,_from,amount);\r\n    }\r\n    \r\n    function mintDocFee(uint256 _tokenID,uint256 _docID,uint256 _docType,address _owner,string memory _ipfs,uint256 _fee,address _tokenAddr) public onlyPermits returns(bool){\r\n         if(payFee(_owner,_fee,_tokenAddr) == true)\r\n             return mintDocToken(_tokenID,_docID,_docType,_owner,_ipfs);\r\n    }\r\n    \r\n    function mintLoanTokenFee(uint256 _tokenID,uint256 _docID,uint256 _contractID,address _borrow,uint256 _amount,uint256 _intCom,uint256 _intLen,uint256 _intGua,string calldata _currency,uint256 _fee,address _tokenAddr) external onlyPermits returns(bool){\r\n         if(payFee(_borrow,_fee,_tokenAddr) == true)\r\n            return mintLoanToken(_tokenID,_docID,_contractID, _borrow,_amount, _intCom, _intLen, _intGua,_currency);\r\n    }\r\n    \r\n    function makeSpecialLoan(uint256 _contractID,uint256 _termpay,uint256 expirationTime,address lender) external onlySuperAdmin returns(string memory result){\r\n        POOLS  pool = POOLS(lender);\r\n        uint256 interest = getLoanInterest(_contractID);\r\n        uint256 poolInt =  pool.borrowInterest();\r\n        \r\n        if(interest < poolInt){\r\n            pool.setBorrowInterest(interest);\r\n            result = activeContract(_contractID,_termpay,expirationTime,lender);\r\n            pool.setBorrowInterest(poolInt);\r\n          \r\n        }\r\n        else\r\n        {\r\n            result =  activeContract(_contractID,_termpay,expirationTime,lender);\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    function setLegalApproveFee(address _legal,uint256 _tokenID,uint256 _fee,address _tokenAdd) external onlyPermits returns(bool){\r\n        if(payFee(_legal,_fee,_tokenAdd) == true)\r\n            return setLegalApprove(_legal,_tokenID);\r\n    }\r\n    \r\n    function setAuditApproveAndCreditFee(address _audit,uint256 _tokenID,uint256 _credit,uint256 _score,uint256 _fee,address _tokenAdd) external onlyPermits returns(bool){\r\n        if(payFee(_audit,_fee,_tokenAdd) == true)\r\n            return setAuditApproveAndCredit(_audit,_tokenID,_credit,_score);\r\n    }\r\n    \r\n    function paidContractFee(uint256 _conID,uint256 _amount,address _tokenAddr,address _from,uint256 _fee) external onlyPermits returns(bool){\r\n        if(payFee(_from,_fee,_tokenAddr) == true)\r\n            return paidContract(_conID,_amount,_tokenAddr,_from);\r\n    }\r\n\r\n    \r\n    function mintCATTokenFee(uint256 _tokenID,address _from,uint256 _fee,address _tokenAddr) external onlyPermits returns(string memory){\r\n        if(payFee(_from,_fee,_tokenAddr) == true)\r\n            return mintCATToken(_tokenID);\r\n    }\r\n    \r\n    function activeContractFree(uint256 _contractID,uint256 _termpay,uint256 expirationTime,address lender,address _from,uint256 _fee,address _tokenAddr) external onlyPermits  returns(string memory result){\r\n        if(payFee(_from,_fee,_tokenAddr) == true)\r\n           return activeContract(_contractID,_termpay,expirationTime,lender);\r\n    }\r\n  \r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"ChangeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"docID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreateNewContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"docType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"docID\",\"type\":\"uint256\"}],\"name\":\"CreateNewDocument\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commision\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guaID\",\"type\":\"uint256\"}],\"name\":\"CreateNewGuarantor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemovePermit\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CURRENCY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECPYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termpay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"activeContract\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termpay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"activeContractFree\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminChangeKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"cLevelApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"catToken\",\"outputs\":[{\"internalType\":\"contract CATToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_newRootKey\",\"type\":\"bytes32\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractDB\",\"outputs\":[{\"internalType\":\"contract LoanContractDB\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"defaultContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"docDB\",\"outputs\":[{\"internalType\":\"contract LoanDocDB\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"}],\"name\":\"getLoanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guaDB\",\"outputs\":[{\"internalType\":\"contract GuarantorDB\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"}],\"name\":\"isValidContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"}],\"name\":\"isValidDoc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isValidToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"loanContractInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes8\",\"name\":\"_cur\",\"type\":\"bytes8\"},{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"loanDocInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes8\",\"name\":\"_cur\",\"type\":\"bytes8\"},{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_st\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfs\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanKYC\",\"outputs\":[{\"internalType\":\"contract LoanKYC\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termpay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"makeSpecialLoan\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"mintCATToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"mintCATTokenFee\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_docType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfs\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"mintDocFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_docType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfs\",\"type\":\"string\"}],\"name\":\"mintDocToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_guaAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"mintGuarantorToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intCom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intGua\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"mintLoanToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_docID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intCom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intGua\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"mintLoanTokenFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"paidContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"paidContractFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratToken\",\"outputs\":[{\"internalType\":\"contract RatToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"s1Global\",\"outputs\":[{\"internalType\":\"contract S1Global\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellSZO\",\"outputs\":[{\"internalType\":\"contract SELLSZO\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_audit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"setAuditApproveAndCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_audit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAdd\",\"type\":\"address\"}],\"name\":\"setAuditApproveAndCreditFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"setLegalApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAdd\",\"type\":\"address\"}],\"name\":\"setLegalApproveFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setS1Global\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSZOToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSellSZO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes8\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"result\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"szoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"szoToken\",\"outputs\":[{\"internalType\":\"contract SZO\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"toUPPER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"turnOffSuperAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnSuperAdminOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"S1ProcessFee","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b3d01985858fe7e1d78e2ed8749f168d92b37dc2f5109180fe4ffd606e66450b"}]}