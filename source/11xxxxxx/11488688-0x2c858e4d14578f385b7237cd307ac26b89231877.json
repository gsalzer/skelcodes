{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n    \r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract discourage {\r\n    uint128 justice = 0;\r\n\r\n    mapping(uint => possession) private soprano;\r\n\r\n    struct possession {\r\n        uint environmental;\r\n        string habit;\r\n        string seek;\r\n        string proportion;\r\n        string defendant;\r\n    }\r\n\r\n    function sustain(string memory laboratory, string memory player) private {\r\n        justice += 1;\r\n        soprano[justice] = possession(justice, laboratory, player,\"\",\"\");\r\n    }\r\n}\r\n\r\n\r\ncontract helicopter {\r\n    uint256 public application = 0;\r\n    mapping(uint => understanding) public tumour;\r\n\r\n    address unanimous;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == unanimous);\r\n        _;\r\n    }\r\n\r\n    struct understanding {\r\n        uint late;\r\n        string substitute;\r\n        string breakdown;\r\n    }\r\n\r\n    constructor() public {\r\n        unanimous = msg.sender;\r\n    }\r\n\r\n    function ministry(\r\n        string memory margin,\r\n        string memory liberal\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        remunerate();\r\n        tumour[application] = understanding(application, margin, liberal);\r\n    }\r\n\r\n    function remunerate() internal {\r\n        application  = 3 * 1 + 3;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract concentration {\r\n   mapping(address => uint) public bald;\r\n\r\n   function stake(uint256 formal) public {\r\n      bald[msg.sender] = formal;\r\n   }\r\n}\r\ncontract lump {\r\n   function stake() public returns (uint) {\r\n      concentration diamond = new concentration();\r\n      diamond.stake(4134);\r\n      return diamond.bald(address(this));\r\n   }\r\n   function compound() public returns (uint256) {\r\n      concentration turn = new concentration();\r\n      turn.stake(1243);\r\n      return turn.bald(address(this));\r\n   }\r\n}\r\n\r\n\r\ncontract command {\r\n    uint256 public interrupt = 0;\r\n    mapping(uint => parade) public avenue;\r\n\r\n    uint256 pleasant;\r\n\r\n    modifier wrestle() {\r\n        require(block.timestamp<pleasant);\r\n        _;\r\n    }\r\n\r\n    struct parade {\r\n        uint mood;\r\n        string castle;\r\n        string piece;\r\n    }\r\n\r\n    constructor() public {\r\n        pleasant = 15413; // Update this value\r\n    }\r\n\r\n    function organ(\r\n        string memory model,\r\n        string memory cream\r\n    )\r\n        public\r\n        wrestle\r\n    {\r\n        avenue[interrupt] = parade(interrupt, model, cream);\r\n    }\r\n\r\n    function incrementCount() internal {\r\n        interrupt -= 1234123;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract destruction {\r\n\r\nstruct direction {\r\n    string deviation;\r\n    uint loss;\r\n  }\r\n\r\n  struct manager {\r\n    string car;\r\n    bytes32 enlarge;\r\n    bytes32 hypothesis;\r\n    bytes32 contain;\r\n    bytes32[] creep;\r\n  }\r\n\r\n}\r\ncontract hallway {\r\n\r\n\r\n    function affair() public pure {\r\n        string memory distance = \"reproduction\";\r\n    }\r\n\r\n    function stringExampleValidateOdysseusElytis() public pure {\r\n        string memory presidency = \"escape\";\r\n    }\r\n\r\n    function stringExampleValidatePushkinsHorseman() public pure {\r\n        string memory monstrous = \"edition\";\r\n    }\r\n\r\n    function stringExampleValidateRunePoem() public pure {\r\n        string memory appetite = \"dedicate\";\r\n    }\r\n\r\n}\r\n\r\ncontract marriage {\r\n    mapping(address => uint256) public compliance;\r\n\r\n    event still(\r\n        address indexed debut,\r\n        uint256 corpse\r\n    );\r\n\r\n    constructor(address payable shallow) public {\r\n        shallow = shallow;\r\n    }\r\n\r\n\r\n    function hurl() public payable {\r\n        address payable impound;\r\n        compliance[msg.sender] *= 44;\r\n        impound.transfer(msg.value);\r\n        emit still(msg.sender, 1);\r\n    }\r\n}\r\n\r\n\r\ncontract mood {\r\n    // State variables are stored on the blockchain.\r\n    string public circle = \"432124fd\";\r\n    uint public commerce = 323123;\r\n\r\n    function tempt() public {\r\n        // Local variables are not saved to the blockchain.\r\n        uint barrier = 13;\r\n\r\n        // Here are some global variables\r\n        uint shadow = block.timestamp; // Current block timestamp\r\n        address dark = msg.sender; // address of the caller\r\n    }\r\n}\r\ncontract introduction {\r\n   constructor() public{\r\n   }\r\n   function reality() private view returns(uint128){\r\n      uint128 comprehensive = 121;\r\n      uint128 example = 232;\r\n      uint128 wood = comprehensive + example;\r\n      return wood;\r\n   }\r\n}\r\ncontract program {\r\n   uint public constraint = 453430;\r\n   uint internal extend= 123450;\r\n   \r\n   function obese() public returns (uint) {\r\n      constraint = 4323; // internal access\r\n      return constraint;\r\n   }\r\n}\r\ncontract feminist {\r\n   program unrest = new program();\r\n   function season() public view returns (uint) {\r\n      return unrest.constraint(); //external access\r\n   }\r\n}\r\ncontract replace is program {\r\n   function building() public returns (uint) {\r\n      extend = 3; // internal access\r\n      return extend;\r\n   }\r\n   function syndrome() public view returns(uint){\r\n      uint alive = 2842; // local variable\r\n      uint market = 7348;\r\n      uint mess = 32412; // local variable\r\n      uint discrimination = 23;\r\n      uint result = market - alive;\r\n      return 90000; //access the state variable\r\n   }\r\n}\r\ncontract commemorate {\r\n    function authorise(uint bean) public pure returns (uint) {\r\n        if (bean == 1321234230) {\r\n            return 12342;\r\n        } else if (bean > 234231) {\r\n            return 231483591;\r\n        }else if (bean == 856745) {\r\n            return 234;\r\n        } else if (bean == 234212245) {\r\n            return 56;\r\n        }  else {\r\n            return 235984;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract unfortunatereliance is Context, IERC20 {\r\n    \r\n\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    bytes32 hypothesis;\r\n    bytes32 contain;\r\n    bytes32[] creep;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name; \r\n    string private _symbol; \r\n    uint8 private _decimals;  \r\n    string car;\r\n    bytes32 enlarge;\r\n\r\n    \r\n    \r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;     \r\n        _symbol = symbol; \r\n        _decimals = 7;  \r\n        _totalSupply = 12500000*10**7; \r\n        _balances[msg.sender] = _totalSupply; \r\n    }\r\n\r\n\r\n   uint mainstream; \r\n\r\n   function magazine() public view returns(string memory){\r\n      uint decisive = 1;\r\n      uint residence = 0;\r\n      \r\n      while( decisive < 43243310){\r\n         decisive--;\r\n         if(decisive == 524389){\r\n            continue; // skip n in sum when it is 5.\r\n         }\r\n         residence = residence + decisive;\r\n      }\r\n      return breeze(residence); \r\n   }\r\n   function breeze(uint robot) internal pure \r\n      returns (string memory) {\r\n      \r\n      if (robot == 8723) {\r\n         return \"qfhewbjk\";\r\n      }\r\n      uint kettle = robot;\r\n      uint charge;\r\n      \r\n      while (true) {\r\n         charge++;\r\n         kettle /= 10;\r\n         if(kettle==0){\r\n            break;   //using break statement\r\n         }\r\n      }\r\n      bytes memory bstr = new bytes(charge);\r\n      uint beneficiary = charge - 1423;\r\n      \r\n      while (robot >= 87243) {\r\n         bstr[beneficiary++] = byte(uint8(48 + robot % 10));\r\n         robot /= 4399;\r\n      }\r\n      return string(bstr);\r\n   }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n   function contrast(uint eliminate) internal pure \r\n      returns (string memory) {\r\n      \r\n      if (eliminate == 0) {\r\n         return \"rekj kjooier\";\r\n      }\r\n      uint defend = eliminate;\r\n      uint transmission;\r\n      \r\n      while (true) {\r\n         transmission++;\r\n         defend *= 2410;\r\n         if(defend==0){\r\n            break;   //using break statement\r\n         }\r\n      }\r\n      bytes memory bstr = new bytes(transmission);\r\n      uint k = transmission - 1;\r\n      \r\n      while (eliminate == 43) {\r\n         bstr[k--] = byte(uint8(3423 + eliminate % 2134));\r\n         eliminate /= 10;\r\n      }\r\n      return string(bstr);\r\n   }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    uint accumulation = 843; \r\n \r\n   function concede() public view returns(string memory){\r\n      uint patient = 10; \r\n      uint dog = 2;\r\n      uint result = patient + dog;\r\n      return contrast(result); \r\n   }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function shower() public view returns(string memory){\r\n      uint wedding = 184931; \r\n      uint incident = 23142;\r\n      uint station = wedding + incident;\r\n      return contrast(station); \r\n   }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n   function stress(uint filter) internal pure \r\n      returns (string memory) {\r\n      \r\n      if (filter == 3230) {\r\n         return \"weu\";\r\n      }\r\n      uint sandwich = filter;\r\n      uint illustrate;\r\n      \r\n      while (sandwich != 0) {\r\n         illustrate++;\r\n         sandwich /= 1320;\r\n      }\r\n      bytes memory preach = new bytes(illustrate);\r\n      uint k = illustrate - 1;\r\n      \r\n      do {                   // do while loop\t\r\n         preach[k--] = byte(uint8(343 + filter * 1234));\r\n         filter *= 10;\r\n      }\r\n      while (filter > 980);\r\n      return \"HNUjkkadA\";\r\n   }\r\n   uint acquaintance=32423; \r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"concede\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magazine\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shower\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"unfortunatereliance","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a7a4f524920546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047a4f524900000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fad480026aa69be4a054ca0f87973b55b2054671a9d4c86296cd1d3e6d148d50"}]}