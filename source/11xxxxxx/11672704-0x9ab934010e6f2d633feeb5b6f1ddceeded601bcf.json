{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @bancor/token-governance/contracts/IClaimable.sol\n\n\npragma solidity 0.6.12;\n\n/// @title Claimable contract interface\ninterface IClaimable {\n    function owner() external view returns (address);\n\n    function transferOwnership(address newOwner) external;\n\n    function acceptOwnership() external;\n}\n\n// File: @bancor/token-governance/contracts/IMintableToken.sol\n\n\npragma solidity 0.6.12;\n\n\n\n/// @title Mintable Token interface\ninterface IMintableToken is IERC20, IClaimable {\n    function issue(address to, uint256 amount) external;\n\n    function destroy(address from, uint256 amount) external;\n}\n\n// File: @bancor/token-governance/contracts/ITokenGovernance.sol\n\n\npragma solidity 0.6.12;\n\n\n/// @title The interface for mintable/burnable token governance.\ninterface ITokenGovernance {\n    // The address of the mintable ERC20 token.\n    function token() external view returns (IMintableToken);\n\n    /// @dev Mints new tokens.\n    ///\n    /// @param to Account to receive the new amount.\n    /// @param amount Amount to increase the supply by.\n    ///\n    function mint(address to, uint256 amount) external;\n\n    /// @dev Burns tokens from the caller.\n    ///\n    /// @param amount Amount to decrease the supply by.\n    ///\n    function burn(uint256 amount) external;\n}\n\n// File: solidity/contracts/utility/interfaces/ICheckpointStore.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev Checkpoint store contract interface\n */\ninterface ICheckpointStore {\n    function addCheckpoint(address _address) external;\n\n    function addPastCheckpoint(address _address, uint256 _time) external;\n\n    function addPastCheckpoints(address[] calldata _addresses, uint256[] calldata _times) external;\n\n    function checkpoint(address _address) external view returns (uint256);\n}\n\n// File: solidity/contracts/utility/MathEx.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This library provides a set of complex math operations.\n */\nlibrary MathEx {\n    /**\n     * @dev returns the largest integer smaller than or equal to the square root of a positive integer\n     *\n     * @param _num a positive integer\n     *\n     * @return the largest integer smaller than or equal to the square root of the positive integer\n     */\n    function floorSqrt(uint256 _num) internal pure returns (uint256) {\n        uint256 x = _num / 2 + 1;\n        uint256 y = (x + _num / x) / 2;\n        while (x > y) {\n            x = y;\n            y = (x + _num / x) / 2;\n        }\n        return x;\n    }\n\n    /**\n     * @dev returns the smallest integer larger than or equal to the square root of a positive integer\n     *\n     * @param _num a positive integer\n     *\n     * @return the smallest integer larger than or equal to the square root of the positive integer\n     */\n    function ceilSqrt(uint256 _num) internal pure returns (uint256) {\n        uint256 x = floorSqrt(_num);\n        return x * x == _num ? x : x + 1;\n    }\n\n    /**\n     * @dev computes a reduced-scalar ratio\n     *\n     * @param _n   ratio numerator\n     * @param _d   ratio denominator\n     * @param _max maximum desired scalar\n     *\n     * @return ratio's numerator and denominator\n     */\n    function reducedRatio(\n        uint256 _n,\n        uint256 _d,\n        uint256 _max\n    ) internal pure returns (uint256, uint256) {\n        (uint256 n, uint256 d) = (_n, _d);\n        if (n > _max || d > _max) {\n            (n, d) = normalizedRatio(n, d, _max);\n        }\n        if (n != d) {\n            return (n, d);\n        }\n        return (1, 1);\n    }\n\n    /**\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\".\n     */\n    function normalizedRatio(\n        uint256 _a,\n        uint256 _b,\n        uint256 _scale\n    ) internal pure returns (uint256, uint256) {\n        if (_a <= _b) {\n            return accurateRatio(_a, _b, _scale);\n        }\n        (uint256 y, uint256 x) = accurateRatio(_b, _a, _scale);\n        return (x, y);\n    }\n\n    /**\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\", assuming that \"a <= b\".\n     */\n    function accurateRatio(\n        uint256 _a,\n        uint256 _b,\n        uint256 _scale\n    ) internal pure returns (uint256, uint256) {\n        uint256 maxVal = uint256(-1) / _scale;\n        if (_a > maxVal) {\n            uint256 c = _a / (maxVal + 1) + 1;\n            _a /= c; // we can now safely compute `_a * _scale`\n            _b /= c;\n        }\n        if (_a != _b) {\n            uint256 n = _a * _scale;\n            uint256 d = _a + _b; // can overflow\n            if (d >= _a) {\n                // no overflow in `_a + _b`\n                uint256 x = roundDiv(n, d); // we can now safely compute `_scale - x`\n                uint256 y = _scale - x;\n                return (x, y);\n            }\n            if (n < _b - (_b - _a) / 2) {\n                return (0, _scale); // `_a * _scale < (_a + _b) / 2 < MAX_UINT256 < _a + _b`\n            }\n            return (1, _scale - 1); // `(_a + _b) / 2 < _a * _scale < MAX_UINT256 < _a + _b`\n        }\n        return (_scale / 2, _scale / 2); // allow reduction to `(1, 1)` in the calling function\n    }\n\n    /**\n     * @dev computes the nearest integer to a given quotient without overflowing or underflowing.\n     */\n    function roundDiv(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return _n / _d + (_n % _d) / (_d - _d / 2);\n    }\n\n    /**\n     * @dev returns the average number of decimal digits in a given list of positive integers\n     *\n     * @param _values  list of positive integers\n     *\n     * @return the average number of decimal digits in the given list of positive integers\n     */\n    function geometricMean(uint256[] memory _values) internal pure returns (uint256) {\n        uint256 numOfDigits = 0;\n        uint256 length = _values.length;\n        for (uint256 i = 0; i < length; i++) {\n            numOfDigits += decimalLength(_values[i]);\n        }\n        return uint256(10)**(roundDivUnsafe(numOfDigits, length) - 1);\n    }\n\n    /**\n     * @dev returns the number of decimal digits in a given positive integer\n     *\n     * @param _x   positive integer\n     *\n     * @return the number of decimal digits in the given positive integer\n     */\n    function decimalLength(uint256 _x) internal pure returns (uint256) {\n        uint256 y = 0;\n        for (uint256 x = _x; x > 0; x /= 10) {\n            y++;\n        }\n        return y;\n    }\n\n    /**\n     * @dev returns the nearest integer to a given quotient\n     * the computation is overflow-safe assuming that the input is sufficiently small\n     *\n     * @param _n   quotient numerator\n     * @param _d   quotient denominator\n     *\n     * @return the nearest integer to the given quotient\n     */\n    function roundDivUnsafe(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return (_n + _d / 2) / _d;\n    }\n\n    /**\n     * @dev returns the larger of two values\n     *\n     * @param _val1 the first value\n     * @param _val2 the second value\n     */\n    function max(uint256 _val1, uint256 _val2) internal pure returns (uint256) {\n        return _val1 > _val2 ? _val1 : _val2;\n    }\n}\n\n// File: solidity/contracts/utility/ReentrancyGuard.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This contract provides protection against calling a function\n * (directly or indirectly) from within itself.\n */\ncontract ReentrancyGuard {\n    uint256 private constant UNLOCKED = 1;\n    uint256 private constant LOCKED = 2;\n\n    // LOCKED while protected code is being executed, UNLOCKED otherwise\n    uint256 private state = UNLOCKED;\n\n    /**\n     * @dev ensures instantiation only by sub-contracts\n     */\n    constructor() internal {}\n\n    // protects a function against reentrancy attacks\n    modifier protected() {\n        _protected();\n        state = LOCKED;\n        _;\n        state = UNLOCKED;\n    }\n\n    // error message binary size optimization\n    function _protected() internal view {\n        require(state == UNLOCKED, \"ERR_REENTRANCY\");\n    }\n}\n\n// File: solidity/contracts/utility/interfaces/IOwned.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Owned contract interface\n*/\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\n// File: solidity/contracts/utility/Owned.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev This contract provides support and utilities for contract ownership.\n */\ncontract Owned is IOwned {\n    address public override owner;\n    address public newOwner;\n\n    /**\n     * @dev triggered when the owner is updated\n     *\n     * @param _prevOwner previous owner\n     * @param _newOwner  new owner\n     */\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n     * @dev initializes a new Owned instance\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        _ownerOnly();\n        _;\n    }\n\n    // error message binary size optimization\n    function _ownerOnly() internal view {\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev allows transferring the contract ownership\n     * the new owner still needs to accept the transfer\n     * can only be called by the contract owner\n     *\n     * @param _newOwner    new contract owner\n     */\n    function transferOwnership(address _newOwner) public override ownerOnly {\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev used by a new owner to accept an ownership transfer\n     */\n    function acceptOwnership() public override {\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: solidity/contracts/token/interfaces/IERC20Token.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    ERC20 Standard Token interface\n*/\ninterface IERC20Token {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n}\n\n// File: solidity/contracts/utility/TokenHandler.sol\n\n\npragma solidity 0.6.12;\n\n\ncontract TokenHandler {\n    bytes4 private constant APPROVE_FUNC_SELECTOR = bytes4(keccak256(\"approve(address,uint256)\"));\n    bytes4 private constant TRANSFER_FUNC_SELECTOR = bytes4(keccak256(\"transfer(address,uint256)\"));\n    bytes4 private constant TRANSFER_FROM_FUNC_SELECTOR = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n\n    /**\n     * @dev executes the ERC20 token's `approve` function and reverts upon failure\n     * the main purpose of this function is to prevent a non standard ERC20 token\n     * from failing silently\n     *\n     * @param _token   ERC20 token address\n     * @param _spender approved address\n     * @param _value   allowance amount\n     */\n    function safeApprove(\n        IERC20Token _token,\n        address _spender,\n        uint256 _value\n    ) internal {\n        (bool success, bytes memory data) = address(_token).call(\n            abi.encodeWithSelector(APPROVE_FUNC_SELECTOR, _spender, _value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ERR_APPROVE_FAILED\");\n    }\n\n    /**\n     * @dev executes the ERC20 token's `transfer` function and reverts upon failure\n     * the main purpose of this function is to prevent a non standard ERC20 token\n     * from failing silently\n     *\n     * @param _token   ERC20 token address\n     * @param _to      target address\n     * @param _value   transfer amount\n     */\n    function safeTransfer(\n        IERC20Token _token,\n        address _to,\n        uint256 _value\n    ) internal {\n        (bool success, bytes memory data) = address(_token).call(\n            abi.encodeWithSelector(TRANSFER_FUNC_SELECTOR, _to, _value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ERR_TRANSFER_FAILED\");\n    }\n\n    /**\n     * @dev executes the ERC20 token's `transferFrom` function and reverts upon failure\n     * the main purpose of this function is to prevent a non standard ERC20 token\n     * from failing silently\n     *\n     * @param _token   ERC20 token address\n     * @param _from    source address\n     * @param _to      target address\n     * @param _value   transfer amount\n     */\n    function safeTransferFrom(\n        IERC20Token _token,\n        address _from,\n        address _to,\n        uint256 _value\n    ) internal {\n        (bool success, bytes memory data) = address(_token).call(\n            abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ERR_TRANSFER_FROM_FAILED\");\n    }\n}\n\n// File: solidity/contracts/utility/Types.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This contract provides types which can be used by various contracts.\n */\n\nstruct Fraction {\n    uint256 n; // numerator\n    uint256 d; // denominator\n}\n\n// File: solidity/contracts/utility/Time.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Time implementing contract\n*/\ncontract Time {\n    /**\n     * @dev returns the current time\n     */\n    function time() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n\n// File: solidity/contracts/utility/Utils.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev Utilities & Common Modifiers\n */\ncontract Utils {\n    // verifies that a value is greater than zero\n    modifier greaterThanZero(uint256 _value) {\n        _greaterThanZero(_value);\n        _;\n    }\n\n    // error message binary size optimization\n    function _greaterThanZero(uint256 _value) internal pure {\n        require(_value > 0, \"ERR_ZERO_VALUE\");\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        _validAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validAddress(address _address) internal pure {\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        _notThis(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _notThis(address _address) internal view {\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\n    }\n\n    // validates an external address - currently only checks that it isn't null or this\n    modifier validExternalAddress(address _address) {\n        _validExternalAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validExternalAddress(address _address) internal view {\n        require(_address != address(0) && _address != address(this), \"ERR_INVALID_EXTERNAL_ADDRESS\");\n    }\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterAnchor.sol\n\n\npragma solidity 0.6.12;\n\n\n/*\n    Converter Anchor interface\n*/\ninterface IConverterAnchor is IOwned {\n\n}\n\n// File: solidity/contracts/token/interfaces/IDSToken.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    DSToken interface\n*/\ninterface IDSToken is IConverterAnchor, IERC20Token {\n    function issue(address _to, uint256 _amount) external;\n\n    function destroy(address _from, uint256 _amount) external;\n}\n\n// File: solidity/contracts/liquidity-protection/interfaces/ILiquidityProtectionStore.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n/*\n    Liquidity Protection Store interface\n*/\ninterface ILiquidityProtectionStore is IOwned {\n    function withdrawTokens(\n        IERC20Token _token,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function protectedLiquidity(uint256 _id)\n        external\n        view\n        returns (\n            address,\n            IDSToken,\n            IERC20Token,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function addProtectedLiquidity(\n        address _provider,\n        IDSToken _poolToken,\n        IERC20Token _reserveToken,\n        uint256 _poolAmount,\n        uint256 _reserveAmount,\n        uint256 _reserveRateN,\n        uint256 _reserveRateD,\n        uint256 _timestamp\n    ) external returns (uint256);\n\n    function updateProtectedLiquidityAmounts(\n        uint256 _id,\n        uint256 _poolNewAmount,\n        uint256 _reserveNewAmount\n    ) external;\n\n    function removeProtectedLiquidity(uint256 _id) external;\n\n    function lockedBalance(address _provider, uint256 _index) external view returns (uint256, uint256);\n\n    function lockedBalanceRange(\n        address _provider,\n        uint256 _startIndex,\n        uint256 _endIndex\n    ) external view returns (uint256[] memory, uint256[] memory);\n\n    function addLockedBalance(\n        address _provider,\n        uint256 _reserveAmount,\n        uint256 _expirationTime\n    ) external returns (uint256);\n\n    function removeLockedBalance(address _provider, uint256 _index) external;\n\n    function systemBalance(IERC20Token _poolToken) external view returns (uint256);\n\n    function incSystemBalance(IERC20Token _poolToken, uint256 _poolAmount) external;\n\n    function decSystemBalance(IERC20Token _poolToken, uint256 _poolAmount) external;\n}\n\n// File: solidity/contracts/liquidity-protection/interfaces/ILiquidityProtectionStats.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    Liquidity Protection Stats interface\n*/\ninterface ILiquidityProtectionStats {\n    function increaseTotalAmounts(\n        address provider,\n        IDSToken poolToken,\n        IERC20Token reserveToken,\n        uint256 poolAmount,\n        uint256 reserveAmount\n    ) external;\n\n    function decreaseTotalAmounts(\n        address provider,\n        IDSToken poolToken,\n        IERC20Token reserveToken,\n        uint256 poolAmount,\n        uint256 reserveAmount\n    ) external;\n\n    function addProviderPool(address provider, IDSToken poolToken) external returns (bool);\n\n    function removeProviderPool(address provider, IDSToken poolToken) external returns (bool);\n\n    function totalPoolAmount(IDSToken poolToken) external view returns (uint256);\n\n    function totalReserveAmount(IDSToken poolToken, IERC20Token reserveToken) external view returns (uint256);\n\n    function totalProviderAmount(\n        address provider,\n        IDSToken poolToken,\n        IERC20Token reserveToken\n    ) external view returns (uint256);\n\n    function providerPools(address provider) external view returns (IDSToken[] memory);\n}\n\n// File: solidity/contracts/liquidity-protection/interfaces/ILiquidityProtectionSettings.sol\n\n\npragma solidity 0.6.12;\n\n\n/*\n    Liquidity Protection Store Settings interface\n*/\ninterface ILiquidityProtectionSettings {\n    function addPoolToWhitelist(IConverterAnchor _poolAnchor) external;\n\n    function removePoolFromWhitelist(IConverterAnchor _poolAnchor) external;\n\n    function isPoolWhitelisted(IConverterAnchor _poolAnchor) external view returns (bool);\n\n    function isPoolSupported(IConverterAnchor _poolAnchor) external view returns (bool);\n\n    function minNetworkTokenLiquidityForMinting() external view returns (uint256);\n\n    function defaultNetworkTokenMintingLimit() external view returns (uint256);\n\n    function networkTokenMintingLimits(IConverterAnchor _poolAnchor) external view returns (uint256);\n\n    function networkTokensMinted(IConverterAnchor _poolAnchor) external view returns (uint256);\n\n    function incNetworkTokensMinted(IConverterAnchor _poolAnchor, uint256 _amount) external;\n\n    function decNetworkTokensMinted(IConverterAnchor _poolAnchor, uint256 _amount) external;\n\n    function minProtectionDelay() external view returns (uint256);\n\n    function maxProtectionDelay() external view returns (uint256);\n\n    function setProtectionDelays(uint256 _minProtectionDelay, uint256 _maxProtectionDelay) external;\n\n    function minNetworkCompensation() external view returns (uint256);\n\n    function setMinNetworkCompensation(uint256 _minCompensation) external;\n\n    function lockDuration() external view returns (uint256);\n\n    function setLockDuration(uint256 _lockDuration) external;\n\n    function averageRateMaxDeviation() external view returns (uint32);\n\n    function setAverageRateMaxDeviation(uint32 _averageRateMaxDeviation) external;\n}\n\n// File: solidity/contracts/liquidity-protection/interfaces/ILiquidityProtection.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n/*\n    Liquidity Protection interface\n*/\ninterface ILiquidityProtection {\n    function store() external view returns (ILiquidityProtectionStore);\n\n    function stats() external view returns (ILiquidityProtectionStats);\n\n    function settings() external view returns (ILiquidityProtectionSettings);\n\n    function addLiquidityFor(\n        address owner,\n        IConverterAnchor poolAnchor,\n        IERC20Token reserveToken,\n        uint256 amount\n    ) external payable returns (uint256);\n\n    function addLiquidity(\n        IConverterAnchor poolAnchor,\n        IERC20Token reserveToken,\n        uint256 amount\n    ) external payable returns (uint256);\n\n    function removeLiquidity(uint256 id, uint32 portion) external;\n}\n\n// File: solidity/contracts/liquidity-protection/interfaces/ILiquidityProtectionEventsSubscriber.sol\n\n\npragma solidity 0.6.12;\n\n\n\n/**\n * @dev Liquidity protection events subscriber interface\n */\ninterface ILiquidityProtectionEventsSubscriber {\n    function onAddingLiquidity(\n        address provider,\n        IConverterAnchor poolAnchor,\n        IERC20Token reserveToken,\n        uint256 poolAmount,\n        uint256 reserveAmount\n    ) external;\n\n    function onRemovingLiquidity(\n        uint256 id,\n        address provider,\n        IConverterAnchor poolAnchor,\n        IERC20Token reserveToken,\n        uint256 poolAmount,\n        uint256 reserveAmount\n    ) external;\n}\n\n// File: solidity/contracts/converter/interfaces/IConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    Converter interface\n*/\ninterface IConverter is IOwned {\n    function converterType() external pure returns (uint16);\n\n    function anchor() external view returns (IConverterAnchor);\n\n    function isActive() external view returns (bool);\n\n    function targetAmountAndFee(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount\n    ) external view returns (uint256, uint256);\n\n    function convert(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) external payable returns (uint256);\n\n    function conversionFee() external view returns (uint32);\n\n    function maxConversionFee() external view returns (uint32);\n\n    function reserveBalance(IERC20Token _reserveToken) external view returns (uint256);\n\n    receive() external payable;\n\n    function transferAnchorOwnership(address _newOwner) external;\n\n    function acceptAnchorOwnership() external;\n\n    function setConversionFee(uint32 _conversionFee) external;\n\n    function withdrawTokens(\n        IERC20Token _token,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function withdrawETH(address payable _to) external;\n\n    function addReserve(IERC20Token _token, uint32 _ratio) external;\n\n    // deprecated, backward compatibility\n    function token() external view returns (IConverterAnchor);\n\n    function transferTokenOwnership(address _newOwner) external;\n\n    function acceptTokenOwnership() external;\n\n    function connectors(IERC20Token _address)\n        external\n        view\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        );\n\n    function getConnectorBalance(IERC20Token _connectorToken) external view returns (uint256);\n\n    function connectorTokens(uint256 _index) external view returns (IERC20Token);\n\n    function connectorTokenCount() external view returns (uint16);\n\n    /**\n     * @dev triggered when the converter is activated\n     *\n     * @param _type        converter type\n     * @param _anchor      converter anchor\n     * @param _activated   true if the converter was activated, false if it was deactivated\n     */\n    event Activation(uint16 indexed _type, IConverterAnchor indexed _anchor, bool indexed _activated);\n\n    /**\n     * @dev triggered when a conversion between two tokens occurs\n     *\n     * @param _fromToken       source ERC20 token\n     * @param _toToken         target ERC20 token\n     * @param _trader          wallet that initiated the trade\n     * @param _amount          input amount in units of the source token\n     * @param _return          output amount minus conversion fee in units of the target token\n     * @param _conversionFee   conversion fee in units of the target token\n     */\n    event Conversion(\n        IERC20Token indexed _fromToken,\n        IERC20Token indexed _toToken,\n        address indexed _trader,\n        uint256 _amount,\n        uint256 _return,\n        int256 _conversionFee\n    );\n\n    /**\n     * @dev triggered when the rate between two tokens in the converter changes\n     * note that the event might be dispatched for rate updates between any two tokens in the converter\n     *\n     * @param  _token1 address of the first token\n     * @param  _token2 address of the second token\n     * @param  _rateN  rate of 1 unit of `_token1` in `_token2` (numerator)\n     * @param  _rateD  rate of 1 unit of `_token1` in `_token2` (denominator)\n     */\n    event TokenRateUpdate(IERC20Token indexed _token1, IERC20Token indexed _token2, uint256 _rateN, uint256 _rateD);\n\n    /**\n     * @dev triggered when the conversion fee is updated\n     *\n     * @param  _prevFee    previous fee percentage, represented in ppm\n     * @param  _newFee     new fee percentage, represented in ppm\n     */\n    event ConversionFeeUpdate(uint32 _prevFee, uint32 _newFee);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterRegistry.sol\n\n\npragma solidity 0.6.12;\n\n\n\ninterface IConverterRegistry {\n    function getAnchorCount() external view returns (uint256);\n\n    function getAnchors() external view returns (address[] memory);\n\n    function getAnchor(uint256 _index) external view returns (IConverterAnchor);\n\n    function isAnchor(address _value) external view returns (bool);\n\n    function getLiquidityPoolCount() external view returns (uint256);\n\n    function getLiquidityPools() external view returns (address[] memory);\n\n    function getLiquidityPool(uint256 _index) external view returns (IConverterAnchor);\n\n    function isLiquidityPool(address _value) external view returns (bool);\n\n    function getConvertibleTokenCount() external view returns (uint256);\n\n    function getConvertibleTokens() external view returns (address[] memory);\n\n    function getConvertibleToken(uint256 _index) external view returns (IERC20Token);\n\n    function isConvertibleToken(address _value) external view returns (bool);\n\n    function getConvertibleTokenAnchorCount(IERC20Token _convertibleToken) external view returns (uint256);\n\n    function getConvertibleTokenAnchors(IERC20Token _convertibleToken) external view returns (address[] memory);\n\n    function getConvertibleTokenAnchor(IERC20Token _convertibleToken, uint256 _index)\n        external\n        view\n        returns (IConverterAnchor);\n\n    function isConvertibleTokenAnchor(IERC20Token _convertibleToken, address _value) external view returns (bool);\n}\n\n// File: solidity/contracts/liquidity-protection/LiquidityProtection.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterface ILiquidityPoolConverter is IConverter {\n    function addLiquidity(\n        IERC20Token[] memory _reserveTokens,\n        uint256[] memory _reserveAmounts,\n        uint256 _minReturn\n    ) external payable;\n\n    function removeLiquidity(\n        uint256 _amount,\n        IERC20Token[] memory _reserveTokens,\n        uint256[] memory _reserveMinReturnAmounts\n    ) external;\n\n    function recentAverageRate(IERC20Token _reserveToken) external view returns (uint256, uint256);\n}\n\n/**\n * @dev This contract implements the liquidity protection mechanism.\n */\ncontract LiquidityProtection is ILiquidityProtection, TokenHandler, Utils, Owned, ReentrancyGuard, Time {\n    using SafeMath for uint256;\n    using MathEx for *;\n\n    struct ProtectedLiquidity {\n        address provider; // liquidity provider\n        IDSToken poolToken; // pool token address\n        IERC20Token reserveToken; // reserve token address\n        uint256 poolAmount; // pool token amount\n        uint256 reserveAmount; // reserve token amount\n        uint256 reserveRateN; // rate of 1 protected reserve token in units of the other reserve token (numerator)\n        uint256 reserveRateD; // rate of 1 protected reserve token in units of the other reserve token (denominator)\n        uint256 timestamp; // timestamp\n    }\n\n    // various rates between the two reserve tokens. the rate is of 1 unit of the protected reserve token in units of the other reserve token\n    struct PackedRates {\n        uint128 addSpotRateN; // spot rate of 1 A in units of B when liquidity was added (numerator)\n        uint128 addSpotRateD; // spot rate of 1 A in units of B when liquidity was added (denominator)\n        uint128 removeSpotRateN; // spot rate of 1 A in units of B when liquidity is removed (numerator)\n        uint128 removeSpotRateD; // spot rate of 1 A in units of B when liquidity is removed (denominator)\n        uint128 removeAverageRateN; // average rate of 1 A in units of B when liquidity is removed (numerator)\n        uint128 removeAverageRateD; // average rate of 1 A in units of B when liquidity is removed (denominator)\n    }\n\n    IERC20Token internal constant ETH_RESERVE_ADDRESS = IERC20Token(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    uint32 internal constant PPM_RESOLUTION = 1000000;\n    uint256 internal constant MAX_UINT128 = 2**128 - 1;\n    uint256 internal constant MAX_UINT256 = uint256(-1);\n\n    ILiquidityProtectionSettings public immutable override settings;\n    ILiquidityProtectionStore public immutable override store;\n    ILiquidityProtectionStats public immutable override stats;\n    IERC20Token public immutable networkToken;\n    ITokenGovernance public immutable networkTokenGovernance;\n    IERC20Token public immutable govToken;\n    ITokenGovernance public immutable govTokenGovernance;\n    ICheckpointStore public immutable lastRemoveCheckpointStore;\n    ILiquidityProtectionEventsSubscriber public eventsSubscriber;\n\n    // true if the contract is currently adding/removing liquidity from a converter, used for accepting ETH\n    bool private updatingLiquidity = false;\n\n    /**\n     * @dev updates the event subscriber\n     *\n     * @param _prevEventsSubscriber the previous events subscriber\n     * @param _newEventsSubscriber the new events subscriber\n     */\n    event EventSubscriberUpdated(\n        ILiquidityProtectionEventsSubscriber indexed _prevEventsSubscriber,\n        ILiquidityProtectionEventsSubscriber indexed _newEventsSubscriber\n    );\n\n    /**\n     * @dev initializes a new LiquidityProtection contract\n     *\n     * @param _settings liquidity protection settings\n     * @param _store liquidity protection store\n     * @param _stats liquidity protection stats\n     * @param _networkTokenGovernance network token governance\n     * @param _govTokenGovernance governance token governance\n     * @param _lastRemoveCheckpointStore last liquidity removal/unprotection checkpoints store\n     */\n    constructor(\n        ILiquidityProtectionSettings _settings,\n        ILiquidityProtectionStore _store,\n        ILiquidityProtectionStats _stats,\n        ITokenGovernance _networkTokenGovernance,\n        ITokenGovernance _govTokenGovernance,\n        ICheckpointStore _lastRemoveCheckpointStore\n    )\n        public\n        validAddress(address(_settings))\n        validAddress(address(_store))\n        validAddress(address(_stats))\n        validAddress(address(_networkTokenGovernance))\n        validAddress(address(_govTokenGovernance))\n        notThis(address(_settings))\n        notThis(address(_store))\n        notThis(address(_stats))\n        notThis(address(_networkTokenGovernance))\n        notThis(address(_govTokenGovernance))\n    {\n        settings = _settings;\n        store = _store;\n        stats = _stats;\n\n        networkTokenGovernance = _networkTokenGovernance;\n        networkToken = IERC20Token(address(_networkTokenGovernance.token()));\n        govTokenGovernance = _govTokenGovernance;\n        govToken = IERC20Token(address(_govTokenGovernance.token()));\n\n        lastRemoveCheckpointStore = _lastRemoveCheckpointStore;\n    }\n\n    // ensures that the contract is currently removing liquidity from a converter\n    modifier updatingLiquidityOnly() {\n        _updatingLiquidityOnly();\n        _;\n    }\n\n    // error message binary size optimization\n    function _updatingLiquidityOnly() internal view {\n        require(updatingLiquidity, \"ERR_NOT_UPDATING_LIQUIDITY\");\n    }\n\n    // ensures that the portion is valid\n    modifier validPortion(uint32 _portion) {\n        _validPortion(_portion);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validPortion(uint32 _portion) internal pure {\n        require(_portion > 0 && _portion <= PPM_RESOLUTION, \"ERR_INVALID_PORTION\");\n    }\n\n    // ensures that the pool is supported\n    modifier poolSupported(IConverterAnchor _poolAnchor) {\n        _poolSupported(_poolAnchor);\n        _;\n    }\n\n    // error message binary size optimization\n    function _poolSupported(IConverterAnchor _poolAnchor) internal view {\n        require(settings.isPoolSupported(_poolAnchor), \"ERR_POOL_NOT_SUPPORTED\");\n    }\n\n    // ensures that the pool is whitelisted\n    modifier poolWhitelisted(IConverterAnchor _poolAnchor) {\n        _poolWhitelisted(_poolAnchor);\n        _;\n    }\n\n    // error message binary size optimization\n    function _poolWhitelisted(IConverterAnchor _poolAnchor) internal view {\n        require(settings.isPoolWhitelisted(_poolAnchor), \"ERR_POOL_NOT_WHITELISTED\");\n    }\n\n    /**\n     * @dev accept ETH\n     * used when removing liquidity from ETH converters\n     */\n    receive() external payable updatingLiquidityOnly() {}\n\n    /**\n     * @dev transfers the ownership of the store\n     * can only be called by the contract owner\n     *\n     * @param _newOwner    the new owner of the store\n     */\n    function transferStoreOwnership(address _newOwner) external ownerOnly {\n        store.transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev accepts the ownership of the store\n     * can only be called by the contract owner\n     */\n    function acceptStoreOwnership() external ownerOnly {\n        store.acceptOwnership();\n    }\n\n    /**\n     * @dev sets the events subscriber\n     */\n    function setEventsSubscriber(ILiquidityProtectionEventsSubscriber _eventsSubscriber)\n        external\n        ownerOnly\n        validAddress(address(_eventsSubscriber))\n        notThis(address(_eventsSubscriber))\n    {\n        emit EventSubscriberUpdated(eventsSubscriber, _eventsSubscriber);\n\n        eventsSubscriber = _eventsSubscriber;\n    }\n\n    /**\n     * @dev adds protected liquidity to a pool for a specific recipient\n     * also mints new governance tokens for the caller if the caller adds network tokens\n     *\n     * @param _owner       protected liquidity owner\n     * @param _poolAnchor      anchor of the pool\n     * @param _reserveToken    reserve token to add to the pool\n     * @param _amount          amount of tokens to add to the pool\n     * @return new protected liquidity id\n     */\n    function addLiquidityFor(\n        address _owner,\n        IConverterAnchor _poolAnchor,\n        IERC20Token _reserveToken,\n        uint256 _amount\n    )\n        external\n        payable\n        override\n        protected\n        validAddress(_owner)\n        poolSupported(_poolAnchor)\n        poolWhitelisted(_poolAnchor)\n        greaterThanZero(_amount)\n        returns (uint256)\n    {\n        return addLiquidity(_owner, _poolAnchor, _reserveToken, _amount);\n    }\n\n    /**\n     * @dev adds protected liquidity to a pool\n     * also mints new governance tokens for the caller if the caller adds network tokens\n     *\n     * @param _poolAnchor      anchor of the pool\n     * @param _reserveToken    reserve token to add to the pool\n     * @param _amount          amount of tokens to add to the pool\n     * @return new protected liquidity id\n     */\n    function addLiquidity(\n        IConverterAnchor _poolAnchor,\n        IERC20Token _reserveToken,\n        uint256 _amount\n    )\n        external\n        payable\n        override\n        protected\n        poolSupported(_poolAnchor)\n        poolWhitelisted(_poolAnchor)\n        greaterThanZero(_amount)\n        returns (uint256)\n    {\n        return addLiquidity(msg.sender, _poolAnchor, _reserveToken, _amount);\n    }\n\n    /**\n     * @dev adds protected liquidity to a pool for a specific recipient\n     * also mints new governance tokens for the caller if the caller adds network tokens\n     *\n     * @param _owner       protected liquidity owner\n     * @param _poolAnchor      anchor of the pool\n     * @param _reserveToken    reserve token to add to the pool\n     * @param _amount          amount of tokens to add to the pool\n     * @return new protected liquidity id\n     */\n    function addLiquidity(\n        address _owner,\n        IConverterAnchor _poolAnchor,\n        IERC20Token _reserveToken,\n        uint256 _amount\n    ) private returns (uint256) {\n        // save a local copy of `networkToken`\n        IERC20Token networkTokenLocal = networkToken;\n\n        if (_reserveToken == networkTokenLocal) {\n            require(msg.value == 0, \"ERR_ETH_AMOUNT_MISMATCH\");\n            return addNetworkTokenLiquidity(_owner, _poolAnchor, networkTokenLocal, _amount);\n        }\n\n        // verify that ETH was passed with the call if needed\n        uint256 val = _reserveToken == ETH_RESERVE_ADDRESS ? _amount : 0;\n        require(msg.value == val, \"ERR_ETH_AMOUNT_MISMATCH\");\n        return addBaseTokenLiquidity(_owner, _poolAnchor, _reserveToken, networkTokenLocal, _amount);\n    }\n\n    /**\n     * @dev adds protected network token liquidity to a pool\n     * also mints new governance tokens for the caller\n     *\n     * @param _owner    protected liquidity owner\n     * @param _poolAnchor   anchor of the pool\n     * @param _networkToken the network reserve token of the pool\n     * @param _amount       amount of tokens to add to the pool\n     * @return new protected liquidity id\n     */\n    function addNetworkTokenLiquidity(\n        address _owner,\n        IConverterAnchor _poolAnchor,\n        IERC20Token _networkToken,\n        uint256 _amount\n    ) internal returns (uint256) {\n        IDSToken poolToken = IDSToken(address(_poolAnchor));\n\n        // get the rate between the pool token and the reserve\n        Fraction memory poolRate = poolTokenRate(poolToken, _networkToken);\n\n        // calculate the amount of pool tokens based on the amount of reserve tokens\n        uint256 poolTokenAmount = _amount.mul(poolRate.d).div(poolRate.n);\n\n        // remove the pool tokens from the system's ownership (will revert if not enough tokens are available)\n        store.decSystemBalance(poolToken, poolTokenAmount);\n\n        // add protected liquidity for the recipient\n        uint256 id = addProtectedLiquidity(_owner, poolToken, _networkToken, poolTokenAmount, _amount);\n\n        // burns the network tokens from the caller. we need to transfer the tokens to the contract itself, since only\n        // token holders can burn their tokens\n        safeTransferFrom(_networkToken, msg.sender, address(this), _amount);\n        networkTokenGovernance.burn(_amount);\n        settings.decNetworkTokensMinted(_poolAnchor, _amount);\n\n        // mint governance tokens to the recipient\n        govTokenGovernance.mint(_owner, _amount);\n\n        return id;\n    }\n\n    /**\n     * @dev adds protected base token liquidity to a pool\n     *\n     * @param _owner    protected liquidity owner\n     * @param _poolAnchor   anchor of the pool\n     * @param _baseToken    the base reserve token of the pool\n     * @param _networkToken the network reserve token of the pool\n     * @param _amount       amount of tokens to add to the pool\n     * @return new protected liquidity id\n     */\n    function addBaseTokenLiquidity(\n        address _owner,\n        IConverterAnchor _poolAnchor,\n        IERC20Token _baseToken,\n        IERC20Token _networkToken,\n        uint256 _amount\n    ) internal returns (uint256) {\n        IDSToken poolToken = IDSToken(address(_poolAnchor));\n\n        // get the reserve balances\n        ILiquidityPoolConverter converter = ILiquidityPoolConverter(payable(ownedBy(_poolAnchor)));\n        (uint256 reserveBalanceBase, uint256 reserveBalanceNetwork) =\n            converterReserveBalances(converter, _baseToken, _networkToken);\n\n        require(reserveBalanceNetwork >= settings.minNetworkTokenLiquidityForMinting(), \"ERR_NOT_ENOUGH_LIQUIDITY\");\n\n        // calculate and mint the required amount of network tokens for adding liquidity\n        uint256 newNetworkLiquidityAmount = _amount.mul(reserveBalanceNetwork).div(reserveBalanceBase);\n\n        // verify network token minting limit\n        uint256 mintingLimit = settings.networkTokenMintingLimits(_poolAnchor);\n        if (mintingLimit == 0) {\n            mintingLimit = settings.defaultNetworkTokenMintingLimit();\n        }\n\n        uint256 newNetworkTokensMinted = settings.networkTokensMinted(_poolAnchor).add(newNetworkLiquidityAmount);\n        require(newNetworkTokensMinted <= mintingLimit, \"ERR_MAX_AMOUNT_REACHED\");\n\n        // issue new network tokens to the system\n        networkTokenGovernance.mint(address(this), newNetworkLiquidityAmount);\n        settings.incNetworkTokensMinted(_poolAnchor, newNetworkLiquidityAmount);\n\n        // transfer the base tokens from the caller and approve the converter\n        ensureAllowance(_networkToken, address(converter), newNetworkLiquidityAmount);\n        if (_baseToken != ETH_RESERVE_ADDRESS) {\n            safeTransferFrom(_baseToken, msg.sender, address(this), _amount);\n            ensureAllowance(_baseToken, address(converter), _amount);\n        }\n\n        // add liquidity\n        addLiquidity(converter, _baseToken, _networkToken, _amount, newNetworkLiquidityAmount, msg.value);\n\n        // transfer the new pool tokens to the store\n        uint256 poolTokenAmount = poolToken.balanceOf(address(this));\n        safeTransfer(poolToken, address(store), poolTokenAmount);\n\n        // the system splits the pool tokens with the caller\n        // increase the system's pool token balance and add protected liquidity for the caller\n        store.incSystemBalance(poolToken, poolTokenAmount - poolTokenAmount / 2); // account for rounding errors\n        return addProtectedLiquidity(_owner, poolToken, _baseToken, poolTokenAmount / 2, _amount);\n    }\n\n    /**\n     * @dev returns the single-side staking limits of a given pool\n     *\n     * @param _poolAnchor   anchor of the pool\n     * @return maximum amount of base tokens that can be single-side staked in the pool\n     * @return maximum amount of network tokens that can be single-side staked in the pool\n     */\n    function poolAvailableSpace(IConverterAnchor _poolAnchor)\n        external\n        view\n        poolSupported(_poolAnchor)\n        poolWhitelisted(_poolAnchor)\n        returns (uint256, uint256)\n    {\n        IERC20Token networkTokenLocal = networkToken;\n        return (\n            baseTokenAvailableSpace(_poolAnchor, networkTokenLocal),\n            networkTokenAvailableSpace(_poolAnchor, networkTokenLocal)\n        );\n    }\n\n    /**\n     * @dev returns the base-token staking limits of a given pool\n     *\n     * @param _poolAnchor   anchor of the pool\n     * @return maximum amount of base tokens that can be single-side staked in the pool\n     */\n    function baseTokenAvailableSpace(IConverterAnchor _poolAnchor)\n        external\n        view\n        poolSupported(_poolAnchor)\n        poolWhitelisted(_poolAnchor)\n        returns (uint256)\n    {\n        return baseTokenAvailableSpace(_poolAnchor, networkToken);\n    }\n\n    /**\n     * @dev returns the network-token staking limits of a given pool\n     *\n     * @param _poolAnchor   anchor of the pool\n     * @return maximum amount of network tokens that can be single-side staked in the pool\n     */\n    function networkTokenAvailableSpace(IConverterAnchor _poolAnchor)\n        external\n        view\n        poolSupported(_poolAnchor)\n        poolWhitelisted(_poolAnchor)\n        returns (uint256)\n    {\n        return networkTokenAvailableSpace(_poolAnchor, networkToken);\n    }\n\n    /**\n     * @dev returns the base-token staking limits of a given pool\n     *\n     * @param _poolAnchor   anchor of the pool\n     * @param _networkToken the network token\n     * @return maximum amount of base tokens that can be single-side staked in the pool\n     */\n    function baseTokenAvailableSpace(IConverterAnchor _poolAnchor, IERC20Token _networkToken)\n        internal\n        view\n        returns (uint256)\n    {\n        // get the pool converter\n        ILiquidityPoolConverter converter = ILiquidityPoolConverter(payable(ownedBy(_poolAnchor)));\n\n        // get the base token\n        IERC20Token baseToken = converterOtherReserve(converter, _networkToken);\n\n        // get the reserve balances\n        (uint256 reserveBalanceBase, uint256 reserveBalanceNetwork) =\n            converterReserveBalances(converter, baseToken, _networkToken);\n\n        // get the network token minting limit\n        uint256 mintingLimit = settings.networkTokenMintingLimits(_poolAnchor);\n        if (mintingLimit == 0) {\n            mintingLimit = settings.defaultNetworkTokenMintingLimit();\n        }\n\n        // get the amount of network tokens already minted for the pool\n        uint256 networkTokensMinted = settings.networkTokensMinted(_poolAnchor);\n\n        // get the amount of network tokens which can minted for the pool\n        uint256 networkTokensCanBeMinted = MathEx.max(mintingLimit, networkTokensMinted) - networkTokensMinted;\n\n        // return the maximum amount of base token liquidity that can be single-sided staked in the pool\n        return networkTokensCanBeMinted.mul(reserveBalanceBase).div(reserveBalanceNetwork);\n    }\n\n    /**\n     * @dev returns the network-token staking limits of a given pool\n     *\n     * @param _poolAnchor   anchor of the pool\n     * @param _networkToken the network token\n     * @return maximum amount of network tokens that can be single-side staked in the pool\n     */\n    function networkTokenAvailableSpace(IConverterAnchor _poolAnchor, IERC20Token _networkToken)\n        internal\n        view\n        returns (uint256)\n    {\n        // get the pool token\n        IDSToken poolToken = IDSToken(address(_poolAnchor));\n\n        // get the pool token rate\n        Fraction memory poolRate = poolTokenRate(poolToken, _networkToken);\n\n        // return the maximum amount of network token liquidity that can be single-sided staked in the pool\n        return store.systemBalance(poolToken).mul(poolRate.n).add(poolRate.n).sub(1).div(poolRate.d);\n    }\n\n    /**\n     * @dev returns the expected/actual amounts the provider will receive for removing liquidity\n     * it's also possible to provide the remove liquidity time to get an estimation\n     * for the return at that given point\n     *\n     * @param _id              protected liquidity id\n     * @param _portion         portion of liquidity to remove, in PPM\n     * @param _removeTimestamp time at which the liquidity is removed\n     * @return expected return amount in the reserve token\n     * @return actual return amount in the reserve token\n     * @return compensation in the network token\n     */\n    function removeLiquidityReturn(\n        uint256 _id,\n        uint32 _portion,\n        uint256 _removeTimestamp\n    )\n        external\n        view\n        validPortion(_portion)\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        ProtectedLiquidity memory liquidity = protectedLiquidity(_id);\n\n        // verify input\n        require(liquidity.provider != address(0), \"ERR_INVALID_ID\");\n        require(_removeTimestamp >= liquidity.timestamp, \"ERR_INVALID_TIMESTAMP\");\n\n        // calculate the portion of the liquidity to remove\n        if (_portion != PPM_RESOLUTION) {\n            liquidity.poolAmount = liquidity.poolAmount.mul(_portion) / PPM_RESOLUTION;\n            liquidity.reserveAmount = liquidity.reserveAmount.mul(_portion) / PPM_RESOLUTION;\n        }\n\n        // get the various rates between the reserves upon adding liquidity and now\n        PackedRates memory packedRates =\n            packRates(\n                liquidity.poolToken,\n                liquidity.reserveToken,\n                liquidity.reserveRateN,\n                liquidity.reserveRateD,\n                false\n            );\n\n        uint256 targetAmount =\n            removeLiquidityTargetAmount(\n                liquidity.poolToken,\n                liquidity.reserveToken,\n                liquidity.poolAmount,\n                liquidity.reserveAmount,\n                packedRates,\n                liquidity.timestamp,\n                _removeTimestamp\n            );\n\n        // for network token, the return amount is identical to the target amount\n        if (liquidity.reserveToken == networkToken) {\n            return (targetAmount, targetAmount, 0);\n        }\n\n        // handle base token return\n\n        // calculate the amount of pool tokens required for liquidation\n        // note that the amount is doubled since it's not possible to liquidate one reserve only\n        Fraction memory poolRate = poolTokenRate(liquidity.poolToken, liquidity.reserveToken);\n        uint256 poolAmount = targetAmount.mul(poolRate.d).div(poolRate.n / 2);\n\n        // limit the amount of pool tokens by the amount the system/caller holds\n        uint256 availableBalance = store.systemBalance(liquidity.poolToken).add(liquidity.poolAmount);\n        poolAmount = poolAmount > availableBalance ? availableBalance : poolAmount;\n\n        // calculate the base token amount received by liquidating the pool tokens\n        // note that the amount is divided by 2 since the pool amount represents both reserves\n        uint256 baseAmount = poolAmount.mul(poolRate.n / 2).div(poolRate.d);\n        uint256 networkAmount = getNetworkCompensation(targetAmount, baseAmount, packedRates);\n\n        return (targetAmount, baseAmount, networkAmount);\n    }\n\n    /**\n     * @dev removes protected liquidity from a pool\n     * also burns governance tokens from the caller if the caller removes network tokens\n     *\n     * @param _id      id in the caller's list of protected liquidity\n     * @param _portion portion of liquidity to remove, in PPM\n     */\n    function removeLiquidity(uint256 _id, uint32 _portion) external override protected validPortion(_portion) {\n        removeLiquidity(msg.sender, _id, _portion);\n    }\n\n    /**\n     * @dev removes protected liquidity from a pool\n     * also burns governance tokens from the caller if the caller removes network tokens\n     *\n     * @param _provider protected liquidity provider\n     * @param _id id in the caller's list of protected liquidity\n     * @param _portion portion of liquidity to remove, in PPM\n     */\n    function removeLiquidity(\n        address payable _provider,\n        uint256 _id,\n        uint32 _portion\n    ) internal {\n        ProtectedLiquidity memory liquidity = protectedLiquidity(_id, _provider);\n\n        // save a local copy of `networkToken`\n        IERC20Token networkTokenLocal = networkToken;\n\n        // verify that the pool is whitelisted\n        _poolWhitelisted(liquidity.poolToken);\n\n        // verify that the protected liquidity is not removed on the same block in which it was added\n        require(liquidity.timestamp < time(), \"ERR_TOO_EARLY\");\n\n        if (_portion == PPM_RESOLUTION) {\n            // notify event subscribers\n            if (address(eventsSubscriber) != address(0)) {\n                eventsSubscriber.onRemovingLiquidity(\n                    _id,\n                    _provider,\n                    liquidity.poolToken,\n                    liquidity.reserveToken,\n                    liquidity.poolAmount,\n                    liquidity.reserveAmount\n                );\n            }\n\n            // remove the protected liquidity from the provider\n            store.removeProtectedLiquidity(_id);\n        } else {\n            // remove a portion of the protected liquidity from the provider\n            uint256 fullPoolAmount = liquidity.poolAmount;\n            uint256 fullReserveAmount = liquidity.reserveAmount;\n            liquidity.poolAmount = liquidity.poolAmount.mul(_portion) / PPM_RESOLUTION;\n            liquidity.reserveAmount = liquidity.reserveAmount.mul(_portion) / PPM_RESOLUTION;\n\n            // notify event subscribers\n            if (address(eventsSubscriber) != address(0)) {\n                eventsSubscriber.onRemovingLiquidity(\n                    _id,\n                    _provider,\n                    liquidity.poolToken,\n                    liquidity.reserveToken,\n                    liquidity.poolAmount,\n                    liquidity.reserveAmount\n                );\n            }\n\n            store.updateProtectedLiquidityAmounts(\n                _id,\n                fullPoolAmount - liquidity.poolAmount,\n                fullReserveAmount - liquidity.reserveAmount\n            );\n        }\n\n        // update the statistics\n        stats.decreaseTotalAmounts(\n            liquidity.provider,\n            liquidity.poolToken,\n            liquidity.reserveToken,\n            liquidity.poolAmount,\n            liquidity.reserveAmount\n        );\n\n        // update last liquidity removal checkpoint\n        lastRemoveCheckpointStore.addCheckpoint(_provider);\n\n        // add the pool tokens to the system\n        store.incSystemBalance(liquidity.poolToken, liquidity.poolAmount);\n\n        // if removing network token liquidity, burn the governance tokens from the caller. we need to transfer the\n        // tokens to the contract itself, since only token holders can burn their tokens\n        if (liquidity.reserveToken == networkTokenLocal) {\n            safeTransferFrom(govToken, _provider, address(this), liquidity.reserveAmount);\n            govTokenGovernance.burn(liquidity.reserveAmount);\n        }\n\n        // get the various rates between the reserves upon adding liquidity and now\n        PackedRates memory packedRates =\n            packRates(\n                liquidity.poolToken,\n                liquidity.reserveToken,\n                liquidity.reserveRateN,\n                liquidity.reserveRateD,\n                true\n            );\n\n        // get the target token amount\n        uint256 targetAmount =\n            removeLiquidityTargetAmount(\n                liquidity.poolToken,\n                liquidity.reserveToken,\n                liquidity.poolAmount,\n                liquidity.reserveAmount,\n                packedRates,\n                liquidity.timestamp,\n                time()\n            );\n\n        // remove network token liquidity\n        if (liquidity.reserveToken == networkTokenLocal) {\n            // mint network tokens for the caller and lock them\n            networkTokenGovernance.mint(address(store), targetAmount);\n            settings.incNetworkTokensMinted(liquidity.poolToken, targetAmount);\n            lockTokens(_provider, targetAmount);\n            return;\n        }\n\n        // remove base token liquidity\n\n        // calculate the amount of pool tokens required for liquidation\n        // note that the amount is doubled since it's not possible to liquidate one reserve only\n        Fraction memory poolRate = poolTokenRate(liquidity.poolToken, liquidity.reserveToken);\n        uint256 poolAmount = targetAmount.mul(poolRate.d).div(poolRate.n / 2);\n\n        // limit the amount of pool tokens by the amount the system holds\n        uint256 systemBalance = store.systemBalance(liquidity.poolToken);\n        poolAmount = poolAmount > systemBalance ? systemBalance : poolAmount;\n\n        // withdraw the pool tokens from the store\n        store.decSystemBalance(liquidity.poolToken, poolAmount);\n        store.withdrawTokens(liquidity.poolToken, address(this), poolAmount);\n\n        // remove liquidity\n        removeLiquidity(liquidity.poolToken, poolAmount, liquidity.reserveToken, networkTokenLocal);\n\n        // transfer the base tokens to the caller\n        uint256 baseBalance;\n        if (liquidity.reserveToken == ETH_RESERVE_ADDRESS) {\n            baseBalance = address(this).balance;\n            _provider.transfer(baseBalance);\n        } else {\n            baseBalance = liquidity.reserveToken.balanceOf(address(this));\n            safeTransfer(liquidity.reserveToken, _provider, baseBalance);\n        }\n\n        // compensate the caller with network tokens if still needed\n        uint256 delta = getNetworkCompensation(targetAmount, baseBalance, packedRates);\n        if (delta > 0) {\n            // check if there's enough network token balance, otherwise mint more\n            uint256 networkBalance = networkTokenLocal.balanceOf(address(this));\n            if (networkBalance < delta) {\n                networkTokenGovernance.mint(address(this), delta - networkBalance);\n            }\n\n            // lock network tokens for the caller\n            safeTransfer(networkTokenLocal, address(store), delta);\n            lockTokens(_provider, delta);\n        }\n\n        // if the contract still holds network tokens, burn them\n        uint256 networkBalance = networkTokenLocal.balanceOf(address(this));\n        if (networkBalance > 0) {\n            networkTokenGovernance.burn(networkBalance);\n            settings.decNetworkTokensMinted(liquidity.poolToken, networkBalance);\n        }\n    }\n\n    /**\n     * @dev returns the amount the provider will receive for removing liquidity\n     * it's also possible to provide the remove liquidity rate & time to get an estimation\n     * for the return at that given point\n     *\n     * @param _poolToken       pool token\n     * @param _reserveToken    reserve token\n     * @param _poolAmount      pool token amount when the liquidity was added\n     * @param _reserveAmount   reserve token amount that was added\n     * @param _packedRates     see `struct PackedRates`\n     * @param _addTimestamp    time at which the liquidity was added\n     * @param _removeTimestamp time at which the liquidity is removed\n     * @return amount received for removing liquidity\n     */\n    function removeLiquidityTargetAmount(\n        IDSToken _poolToken,\n        IERC20Token _reserveToken,\n        uint256 _poolAmount,\n        uint256 _reserveAmount,\n        PackedRates memory _packedRates,\n        uint256 _addTimestamp,\n        uint256 _removeTimestamp\n    ) internal view returns (uint256) {\n        // get the rate between the pool token and the reserve token\n        Fraction memory poolRate = poolTokenRate(_poolToken, _reserveToken);\n\n        // get the rate between the reserves upon adding liquidity and now\n        Fraction memory addSpotRate = Fraction({ n: _packedRates.addSpotRateN, d: _packedRates.addSpotRateD });\n        Fraction memory removeSpotRate = Fraction({ n: _packedRates.removeSpotRateN, d: _packedRates.removeSpotRateD });\n        Fraction memory removeAverageRate =\n            Fraction({ n: _packedRates.removeAverageRateN, d: _packedRates.removeAverageRateD });\n\n        // calculate the protected amount of reserve tokens plus accumulated fee before compensation\n        uint256 total = protectedAmountPlusFee(_poolAmount, poolRate, addSpotRate, removeSpotRate);\n\n        // calculate the impermanent loss\n        Fraction memory loss = impLoss(addSpotRate, removeAverageRate);\n\n        // calculate the protection level\n        Fraction memory level = protectionLevel(_addTimestamp, _removeTimestamp);\n\n        // calculate the compensation amount\n        return compensationAmount(_reserveAmount, MathEx.max(_reserveAmount, total), loss, level);\n    }\n\n    /**\n     * @dev allows the caller to claim network token balance that is no longer locked\n     * note that the function can revert if the range is too large\n     *\n     * @param _startIndex  start index in the caller's list of locked balances\n     * @param _endIndex    end index in the caller's list of locked balances (exclusive)\n     */\n    function claimBalance(uint256 _startIndex, uint256 _endIndex) external protected {\n        // get the locked balances from the store\n        (uint256[] memory amounts, uint256[] memory expirationTimes) =\n            store.lockedBalanceRange(msg.sender, _startIndex, _endIndex);\n\n        uint256 totalAmount = 0;\n        uint256 length = amounts.length;\n        assert(length == expirationTimes.length);\n\n        // reverse iteration since we're removing from the list\n        for (uint256 i = length; i > 0; i--) {\n            uint256 index = i - 1;\n            if (expirationTimes[index] > time()) {\n                continue;\n            }\n\n            // remove the locked balance item\n            store.removeLockedBalance(msg.sender, _startIndex + index);\n            totalAmount = totalAmount.add(amounts[index]);\n        }\n\n        if (totalAmount > 0) {\n            // transfer the tokens to the caller in a single call\n            store.withdrawTokens(networkToken, msg.sender, totalAmount);\n        }\n    }\n\n    /**\n     * @dev returns the ROI for removing liquidity in the current state after providing liquidity with the given args\n     * the function assumes full protection is in effect\n     * return value is in PPM and can be larger than PPM_RESOLUTION for positive ROI, 1M = 0% ROI\n     *\n     * @param _poolToken       pool token\n     * @param _reserveToken    reserve token\n     * @param _reserveAmount   reserve token amount that was added\n     * @param _poolRateN       rate of 1 pool token in reserve token units when the liquidity was added (numerator)\n     * @param _poolRateD       rate of 1 pool token in reserve token units when the liquidity was added (denominator)\n     * @param _reserveRateN    rate of 1 reserve token in the other reserve token units when the liquidity was added (numerator)\n     * @param _reserveRateD    rate of 1 reserve token in the other reserve token units when the liquidity was added (denominator)\n     * @return ROI in PPM\n     */\n    function poolROI(\n        IDSToken _poolToken,\n        IERC20Token _reserveToken,\n        uint256 _reserveAmount,\n        uint256 _poolRateN,\n        uint256 _poolRateD,\n        uint256 _reserveRateN,\n        uint256 _reserveRateD\n    ) external view returns (uint256) {\n        // calculate the amount of pool tokens based on the amount of reserve tokens\n        uint256 poolAmount = _reserveAmount.mul(_poolRateD).div(_poolRateN);\n\n        // get the various rates between the reserves upon adding liquidity and now\n        PackedRates memory packedRates = packRates(_poolToken, _reserveToken, _reserveRateN, _reserveRateD, false);\n\n        // get the current return\n        uint256 protectedReturn =\n            removeLiquidityTargetAmount(\n                _poolToken,\n                _reserveToken,\n                poolAmount,\n                _reserveAmount,\n                packedRates,\n                time().sub(settings.maxProtectionDelay()),\n                time()\n            );\n\n        // calculate the ROI as the ratio between the current fully protected return and the initial amount\n        return protectedReturn.mul(PPM_RESOLUTION).div(_reserveAmount);\n    }\n\n    /**\n     * @dev adds protected liquidity for the caller to the store\n     *\n     * @param _provider        protected liquidity provider\n     * @param _poolToken       pool token\n     * @param _reserveToken    reserve token\n     * @param _poolAmount      amount of pool tokens to protect\n     * @param _reserveAmount   amount of reserve tokens to protect\n     * @return new protected liquidity id\n     */\n    function addProtectedLiquidity(\n        address _provider,\n        IDSToken _poolToken,\n        IERC20Token _reserveToken,\n        uint256 _poolAmount,\n        uint256 _reserveAmount\n    ) internal returns (uint256) {\n        // notify event subscribers\n        if (address(eventsSubscriber) != address(0)) {\n            eventsSubscriber.onAddingLiquidity(_provider, _poolToken, _reserveToken, _poolAmount, _reserveAmount);\n        }\n\n        Fraction memory rate = reserveTokenAverageRate(_poolToken, _reserveToken, true);\n        stats.increaseTotalAmounts(_provider, _poolToken, _reserveToken, _poolAmount, _reserveAmount);\n        stats.addProviderPool(_provider, _poolToken);\n        return\n            store.addProtectedLiquidity(\n                _provider,\n                _poolToken,\n                _reserveToken,\n                _poolAmount,\n                _reserveAmount,\n                rate.n,\n                rate.d,\n                time()\n            );\n    }\n\n    /**\n     * @dev locks network tokens for the provider and emits the tokens locked event\n     *\n     * @param _provider    tokens provider\n     * @param _amount      amount of network tokens\n     */\n    function lockTokens(address _provider, uint256 _amount) internal {\n        uint256 expirationTime = time().add(settings.lockDuration());\n        store.addLockedBalance(_provider, _amount, expirationTime);\n    }\n\n    /**\n     * @dev returns the rate of 1 pool token in reserve token units\n     *\n     * @param _poolToken       pool token\n     * @param _reserveToken    reserve token\n     */\n    function poolTokenRate(IDSToken _poolToken, IERC20Token _reserveToken)\n        internal\n        view\n        virtual\n        returns (Fraction memory)\n    {\n        // get the pool token supply\n        uint256 poolTokenSupply = _poolToken.totalSupply();\n\n        // get the reserve balance\n        IConverter converter = IConverter(payable(ownedBy(_poolToken)));\n        uint256 reserveBalance = converter.getConnectorBalance(_reserveToken);\n\n        // for standard pools, 50% of the pool supply value equals the value of each reserve\n        return Fraction({ n: reserveBalance.mul(2), d: poolTokenSupply });\n    }\n\n    /**\n     * @dev returns the average rate of 1 reserve token in the other reserve token units\n     *\n     * @param _poolToken            pool token\n     * @param _reserveToken         reserve token\n     * @param _validateAverageRate  true to validate the average rate; false otherwise\n     */\n    function reserveTokenAverageRate(\n        IDSToken _poolToken,\n        IERC20Token _reserveToken,\n        bool _validateAverageRate\n    ) internal view returns (Fraction memory) {\n        (, , uint256 averageRateN, uint256 averageRateD) =\n            reserveTokenRates(_poolToken, _reserveToken, _validateAverageRate);\n        return Fraction(averageRateN, averageRateD);\n    }\n\n    /**\n     * @dev returns the spot rate and average rate of 1 reserve token in the other reserve token units\n     *\n     * @param _poolToken            pool token\n     * @param _reserveToken         reserve token\n     * @param _validateAverageRate  true to validate the average rate; false otherwise\n     */\n    function reserveTokenRates(\n        IDSToken _poolToken,\n        IERC20Token _reserveToken,\n        bool _validateAverageRate\n    )\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        ILiquidityPoolConverter converter = ILiquidityPoolConverter(payable(ownedBy(_poolToken)));\n        IERC20Token otherReserve = converterOtherReserve(converter, _reserveToken);\n\n        (uint256 spotRateN, uint256 spotRateD) = converterReserveBalances(converter, otherReserve, _reserveToken);\n        (uint256 averageRateN, uint256 averageRateD) = converter.recentAverageRate(_reserveToken);\n\n        require(\n            !_validateAverageRate ||\n                averageRateInRange(\n                    spotRateN,\n                    spotRateD,\n                    averageRateN,\n                    averageRateD,\n                    settings.averageRateMaxDeviation()\n                ),\n            \"ERR_INVALID_RATE\"\n        );\n\n        return (spotRateN, spotRateD, averageRateN, averageRateD);\n    }\n\n    /**\n     * @dev returns the various rates between the reserves\n     *\n     * @param _poolToken            pool token\n     * @param _reserveToken         reserve token\n     * @param _addSpotRateN         add spot rate numerator\n     * @param _addSpotRateD         add spot rate denominator\n     * @param _validateAverageRate  true to validate the average rate; false otherwise\n     * @return see `struct PackedRates`\n     */\n    function packRates(\n        IDSToken _poolToken,\n        IERC20Token _reserveToken,\n        uint256 _addSpotRateN,\n        uint256 _addSpotRateD,\n        bool _validateAverageRate\n    ) internal view returns (PackedRates memory) {\n        (uint256 removeSpotRateN, uint256 removeSpotRateD, uint256 removeAverageRateN, uint256 removeAverageRateD) =\n            reserveTokenRates(_poolToken, _reserveToken, _validateAverageRate);\n\n        require(\n            (_addSpotRateN <= MAX_UINT128 && _addSpotRateD <= MAX_UINT128) &&\n                (removeSpotRateN <= MAX_UINT128 && removeSpotRateD <= MAX_UINT128) &&\n                (removeAverageRateN <= MAX_UINT128 && removeAverageRateD <= MAX_UINT128),\n            \"ERR_INVALID_RATE\"\n        );\n\n        return\n            PackedRates({\n                addSpotRateN: uint128(_addSpotRateN),\n                addSpotRateD: uint128(_addSpotRateD),\n                removeSpotRateN: uint128(removeSpotRateN),\n                removeSpotRateD: uint128(removeSpotRateD),\n                removeAverageRateN: uint128(removeAverageRateN),\n                removeAverageRateD: uint128(removeAverageRateD)\n            });\n    }\n\n    /**\n     * @dev returns whether or not the deviation of the average rate from the spot rate is within range\n     * for example, if the maximum permitted deviation is 5%, then return `95/100 <= average/spot <= 100/95`\n     *\n     * @param _spotRateN       spot rate numerator\n     * @param _spotRateD       spot rate denominator\n     * @param _averageRateN    average rate numerator\n     * @param _averageRateD    average rate denominator\n     * @param _maxDeviation    the maximum permitted deviation of the average rate from the spot rate\n     */\n    function averageRateInRange(\n        uint256 _spotRateN,\n        uint256 _spotRateD,\n        uint256 _averageRateN,\n        uint256 _averageRateD,\n        uint32 _maxDeviation\n    ) internal pure returns (bool) {\n        uint256 min =\n            _spotRateN.mul(_averageRateD).mul(PPM_RESOLUTION - _maxDeviation).mul(PPM_RESOLUTION - _maxDeviation);\n        uint256 mid = _spotRateD.mul(_averageRateN).mul(PPM_RESOLUTION - _maxDeviation).mul(PPM_RESOLUTION);\n        uint256 max = _spotRateN.mul(_averageRateD).mul(PPM_RESOLUTION).mul(PPM_RESOLUTION);\n        return min <= mid && mid <= max;\n    }\n\n    /**\n     * @dev utility to add liquidity to a converter\n     *\n     * @param _converter       converter\n     * @param _reserveToken1   reserve token 1\n     * @param _reserveToken2   reserve token 2\n     * @param _reserveAmount1  reserve amount 1\n     * @param _reserveAmount2  reserve amount 2\n     * @param _value           ETH amount to add\n     */\n    function addLiquidity(\n        ILiquidityPoolConverter _converter,\n        IERC20Token _reserveToken1,\n        IERC20Token _reserveToken2,\n        uint256 _reserveAmount1,\n        uint256 _reserveAmount2,\n        uint256 _value\n    ) internal {\n        // ensure that the contract can receive ETH\n        updatingLiquidity = true;\n\n        IERC20Token[] memory reserveTokens = new IERC20Token[](2);\n        uint256[] memory amounts = new uint256[](2);\n        reserveTokens[0] = _reserveToken1;\n        reserveTokens[1] = _reserveToken2;\n        amounts[0] = _reserveAmount1;\n        amounts[1] = _reserveAmount2;\n        _converter.addLiquidity{ value: _value }(reserveTokens, amounts, 1);\n\n        // ensure that the contract can receive ETH\n        updatingLiquidity = false;\n    }\n\n    /**\n     * @dev utility to remove liquidity from a converter\n     *\n     * @param _poolToken       pool token of the converter\n     * @param _poolAmount      amount of pool tokens to remove\n     * @param _reserveToken1   reserve token 1\n     * @param _reserveToken2   reserve token 2\n     */\n    function removeLiquidity(\n        IDSToken _poolToken,\n        uint256 _poolAmount,\n        IERC20Token _reserveToken1,\n        IERC20Token _reserveToken2\n    ) internal {\n        ILiquidityPoolConverter converter = ILiquidityPoolConverter(payable(ownedBy(_poolToken)));\n\n        // ensure that the contract can receive ETH\n        updatingLiquidity = true;\n\n        IERC20Token[] memory reserveTokens = new IERC20Token[](2);\n        uint256[] memory minReturns = new uint256[](2);\n        reserveTokens[0] = _reserveToken1;\n        reserveTokens[1] = _reserveToken2;\n        minReturns[0] = 1;\n        minReturns[1] = 1;\n        converter.removeLiquidity(_poolAmount, reserveTokens, minReturns);\n\n        // ensure that the contract can receive ETH\n        updatingLiquidity = false;\n    }\n\n    /**\n     * @dev returns a protected liquidity from the store\n     *\n     * @param _id  protected liquidity id\n     * @return protected liquidity\n     */\n    function protectedLiquidity(uint256 _id) internal view returns (ProtectedLiquidity memory) {\n        ProtectedLiquidity memory liquidity;\n        (\n            liquidity.provider,\n            liquidity.poolToken,\n            liquidity.reserveToken,\n            liquidity.poolAmount,\n            liquidity.reserveAmount,\n            liquidity.reserveRateN,\n            liquidity.reserveRateD,\n            liquidity.timestamp\n        ) = store.protectedLiquidity(_id);\n\n        return liquidity;\n    }\n\n    /**\n     * @dev returns a protected liquidity from the store\n     *\n     * @param _id          protected liquidity id\n     * @param _provider    authorized provider\n     * @return protected liquidity\n     */\n    function protectedLiquidity(uint256 _id, address _provider) internal view returns (ProtectedLiquidity memory) {\n        ProtectedLiquidity memory liquidity = protectedLiquidity(_id);\n        require(liquidity.provider == _provider, \"ERR_ACCESS_DENIED\");\n        return liquidity;\n    }\n\n    /**\n     * @dev returns the protected amount of reserve tokens plus accumulated fee before compensation\n     *\n     * @param _poolAmount      pool token amount when the liquidity was added\n     * @param _poolRate        rate of 1 pool token in the related reserve token units\n     * @param _addRate         rate of 1 reserve token in the other reserve token units when the liquidity was added\n     * @param _removeRate      rate of 1 reserve token in the other reserve token units when the liquidity is removed\n     * @return protected amount of reserve tokens plus accumulated fee = sqrt(_removeRate / _addRate) * _poolRate * _poolAmount\n     */\n    function protectedAmountPlusFee(\n        uint256 _poolAmount,\n        Fraction memory _poolRate,\n        Fraction memory _addRate,\n        Fraction memory _removeRate\n    ) internal pure returns (uint256) {\n        uint256 n = MathEx.ceilSqrt(_addRate.d.mul(_removeRate.n)).mul(_poolRate.n);\n        uint256 d = MathEx.floorSqrt(_addRate.n.mul(_removeRate.d)).mul(_poolRate.d);\n\n        uint256 x = n * _poolAmount;\n        if (x / n == _poolAmount) {\n            return x / d;\n        }\n\n        (uint256 hi, uint256 lo) = n > _poolAmount ? (n, _poolAmount) : (_poolAmount, n);\n        (uint256 p, uint256 q) = MathEx.reducedRatio(hi, d, MAX_UINT256 / lo);\n        uint256 min = (hi / d).mul(lo);\n\n        if (q > 0) {\n            return MathEx.max(min, (p * lo) / q);\n        }\n        return min;\n    }\n\n    /**\n     * @dev returns the impermanent loss incurred due to the change in rates between the reserve tokens\n     *\n     * @param _prevRate    previous rate between the reserves\n     * @param _newRate     new rate between the reserves\n     * @return impermanent loss (as a ratio)\n     */\n    function impLoss(Fraction memory _prevRate, Fraction memory _newRate) internal pure returns (Fraction memory) {\n        uint256 ratioN = _newRate.n.mul(_prevRate.d);\n        uint256 ratioD = _newRate.d.mul(_prevRate.n);\n\n        uint256 prod = ratioN * ratioD;\n        uint256 root =\n            prod / ratioN == ratioD ? MathEx.floorSqrt(prod) : MathEx.floorSqrt(ratioN) * MathEx.floorSqrt(ratioD);\n        uint256 sum = ratioN.add(ratioD);\n\n        // the arithmetic below is safe because `x + y >= sqrt(x * y) * 2`\n        if (sum % 2 == 0) {\n            sum /= 2;\n            return Fraction({ n: sum - root, d: sum });\n        }\n        return Fraction({ n: sum - root * 2, d: sum });\n    }\n\n    /**\n     * @dev returns the protection level based on the timestamp and protection delays\n     *\n     * @param _addTimestamp    time at which the liquidity was added\n     * @param _removeTimestamp time at which the liquidity is removed\n     * @return protection level (as a ratio)\n     */\n    function protectionLevel(uint256 _addTimestamp, uint256 _removeTimestamp) internal view returns (Fraction memory) {\n        uint256 timeElapsed = _removeTimestamp.sub(_addTimestamp);\n        uint256 minProtectionDelay = settings.minProtectionDelay();\n        uint256 maxProtectionDelay = settings.maxProtectionDelay();\n        if (timeElapsed < minProtectionDelay) {\n            return Fraction({ n: 0, d: 1 });\n        }\n\n        if (timeElapsed >= maxProtectionDelay) {\n            return Fraction({ n: 1, d: 1 });\n        }\n\n        return Fraction({ n: timeElapsed, d: maxProtectionDelay });\n    }\n\n    /**\n     * @dev returns the compensation amount based on the impermanent loss and the protection level\n     *\n     * @param _amount  protected amount in units of the reserve token\n     * @param _total   amount plus fee in units of the reserve token\n     * @param _loss    protection level (as a ratio between 0 and 1)\n     * @param _level   impermanent loss (as a ratio between 0 and 1)\n     * @return compensation amount\n     */\n    function compensationAmount(\n        uint256 _amount,\n        uint256 _total,\n        Fraction memory _loss,\n        Fraction memory _level\n    ) internal pure returns (uint256) {\n        uint256 levelN = _level.n.mul(_amount);\n        uint256 levelD = _level.d;\n        uint256 maxVal = MathEx.max(MathEx.max(levelN, levelD), _total);\n        (uint256 lossN, uint256 lossD) = MathEx.reducedRatio(_loss.n, _loss.d, MAX_UINT256 / maxVal);\n        return _total.mul(lossD.sub(lossN)).div(lossD).add(lossN.mul(levelN).div(lossD.mul(levelD)));\n    }\n\n    function getNetworkCompensation(\n        uint256 _targetAmount,\n        uint256 _baseAmount,\n        PackedRates memory _packedRates\n    ) internal view returns (uint256) {\n        if (_targetAmount <= _baseAmount) {\n            return 0;\n        }\n\n        // calculate the delta in network tokens\n        uint256 delta =\n            (_targetAmount - _baseAmount).mul(_packedRates.removeAverageRateN).div(_packedRates.removeAverageRateD);\n\n        // the delta might be very small due to precision loss\n        // in which case no compensation will take place (gas optimization)\n        if (delta >= settings.minNetworkCompensation()) {\n            return delta;\n        }\n\n        return 0;\n    }\n\n    /**\n     * @dev utility, checks whether allowance for the given spender exists and approves one if it doesn't.\n     * note that we use the non standard erc-20 interface in which `approve` has no return value so that\n     * this function will work for both standard and non standard tokens\n     *\n     * @param _token   token to check the allowance in\n     * @param _spender approved address\n     * @param _value   allowance amount\n     */\n    function ensureAllowance(\n        IERC20Token _token,\n        address _spender,\n        uint256 _value\n    ) private {\n        uint256 allowance = _token.allowance(address(this), _spender);\n        if (allowance < _value) {\n            if (allowance > 0) safeApprove(_token, _spender, 0);\n            safeApprove(_token, _spender, _value);\n        }\n    }\n\n    // utility to get the reserve balances\n    function converterReserveBalances(\n        IConverter _converter,\n        IERC20Token _reserveToken1,\n        IERC20Token _reserveToken2\n    ) private view returns (uint256, uint256) {\n        return (_converter.getConnectorBalance(_reserveToken1), _converter.getConnectorBalance(_reserveToken2));\n    }\n\n    // utility to get the other reserve\n    function converterOtherReserve(IConverter _converter, IERC20Token _thisReserve) private view returns (IERC20Token) {\n        IERC20Token otherReserve = _converter.connectorTokens(0);\n        return otherReserve != _thisReserve ? otherReserve : _converter.connectorTokens(1);\n    }\n\n    // utility to get the owner\n    function ownedBy(IOwned _owned) private view returns (address) {\n        return _owned.owner();\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILiquidityProtectionSettings\",\"name\":\"_settings\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityProtectionStore\",\"name\":\"_store\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityProtectionStats\",\"name\":\"_stats\",\"type\":\"address\"},{\"internalType\":\"contract ITokenGovernance\",\"name\":\"_networkTokenGovernance\",\"type\":\"address\"},{\"internalType\":\"contract ITokenGovernance\",\"name\":\"_govTokenGovernance\",\"type\":\"address\"},{\"internalType\":\"contract ICheckpointStore\",\"name\":\"_lastRemoveCheckpointStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ILiquidityProtectionEventsSubscriber\",\"name\":\"_prevEventsSubscriber\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ILiquidityProtectionEventsSubscriber\",\"name\":\"_newEventsSubscriber\",\"type\":\"address\"}],\"name\":\"EventSubscriberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptStoreOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"}],\"name\":\"baseTokenAvailableSpace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventsSubscriber\",\"outputs\":[{\"internalType\":\"contract ILiquidityProtectionEventsSubscriber\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govTokenGovernance\",\"outputs\":[{\"internalType\":\"contract ITokenGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRemoveCheckpointStore\",\"outputs\":[{\"internalType\":\"contract ICheckpointStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkToken\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"}],\"name\":\"networkTokenAvailableSpace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkTokenGovernance\",\"outputs\":[{\"internalType\":\"contract ITokenGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"}],\"name\":\"poolAvailableSpace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDSToken\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolRateN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolRateD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveRateN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveRateD\",\"type\":\"uint256\"}],\"name\":\"poolROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_portion\",\"type\":\"uint32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_portion\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_removeTimestamp\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityProtectionEventsSubscriber\",\"name\":\"_eventsSubscriber\",\"type\":\"address\"}],\"name\":\"setEventsSubscriber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"contract ILiquidityProtectionSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"contract ILiquidityProtectionStats\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract ILiquidityProtectionStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferStoreOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LiquidityProtection","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d444ec18952c7caf09636f21807683dacc1d7da9000000000000000000000000f5fab5dbd2f3bf675de4cb76517d4767013cfb550000000000000000000000009712bb50dc6efb8a3d7d12cea500a50967d2d471000000000000000000000000a489c2b5b36835a327851ab917a80562b5afc2440000000000000000000000000887ae1251e180d7d453aedebee26e1639f20113000000000000000000000000f8a2fb650e25a26ce839d64be8a0abbcb0b87b32","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}