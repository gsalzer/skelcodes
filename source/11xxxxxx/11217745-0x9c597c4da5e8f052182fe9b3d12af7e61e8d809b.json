{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/ERC20/IERC20NonStandard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * Version of ERC20 with no return values for `transfer` and `transferFrom\\n * https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface IERC20NonStandard {\\n    function transfer(address to, uint256 value) external;\\n\\n    function approve(address spender, uint256 value) external;\\n\\n    function transferFrom(address from, address to, uint256 value) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/ERC20/SafeToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20NonStandard.sol\\\";\\n\\ncontract SafeToken {\\n    function doApprove(address token, address spender, uint256 amount) internal {\\n        bool result;\\n\\n        IERC20NonStandard(token).approve(spender, amount);\\n\\n        assembly {\\n            switch returndatasize()\\n                case 0 {                      // This is a non-standard ERC-20\\n                    result := not(0)          // set result to true\\n                }\\n                case 32 {                     // This is a complaint ERC-20\\n                    returndatacopy(0, 0, 32)\\n                    result := mload(0)        // Set `result = returndata` of external call\\n                }\\n                default {                     // This is an excessively non-compliant ERC-20, revert.\\n                    revert(0, 0)\\n                }\\n        }\\n\\n        require(\\n            result,\\n            \\\"APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function doTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        bool result;\\n\\n        IERC20NonStandard(token).transferFrom(from, to, amount);\\n\\n        assembly {\\n            switch returndatasize()\\n                case 0 {                      // This is a non-standard ERC-20\\n                    result := not(0)          // set result to true\\n                }\\n                case 32 {                     // This is a complaint ERC-20\\n                    returndatacopy(0, 0, 32)\\n                    result := mload(0)        // Set `result = returndata` of external call\\n                }\\n                default {                     // This is an excessively non-compliant ERC-20, revert.\\n                    revert(0, 0)\\n                }\\n        }\\n\\n        require(\\n            result,\\n            \\\"TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n}\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Interface/ITokenlonExchange.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\ncontract ITokenlonExchange {\\n    function transactions(bytes32 executeTxHash) external returns (address);\\n}\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Ownable/IOwnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\ncontract IOwnable {\\n  function transferOwnership(address newOwner) public;\\n\\n  function setOperator(address newOwner) public;\\n}\\n\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Ownable/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n\\ncontract Ownable is\\n  IOwnable\\n{\\n  address public owner;\\n  address public operator;\\n\\n  constructor ()\\n    public\\n  {\\n    owner = msg.sender;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"ONLY_CONTRACT_OWNER\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyOperator() {\\n    require(\\n      msg.sender == operator,\\n      \\\"ONLY_CONTRACT_OPERATOR\\\"\\n    );\\n    _;\\n  }\\n\\n  function transferOwnership(address newOwner)\\n    public\\n    onlyOwner\\n  {\\n    if (newOwner != address(0)) {\\n      owner = newOwner;\\n    }\\n  }\\n\\n  function setOperator(address newOperator)\\n    public\\n    onlyOwner \\n  {\\n    operator = newOperator;\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Weth/IWeth.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\ncontract IWeth {\\n    function deposit() public payable;\\n    function withdraw(uint256 amount) public;\\n}\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Weth/LibWeth.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IWeth.sol\\\";\\n\\ncontract LibWeth \\n{\\n    function convertETHtoWeth(address wethAddr, uint256 amount) internal {\\n        IWeth weth = IWeth(wethAddr);\\n        weth.deposit.value(amount)();\\n    }\\n\\n    function convertWethtoETH(address wethAddr, uint256 amount) internal {\\n        IWeth weth = IWeth(wethAddr);\\n        weth.withdraw(amount);\\n    }\\n}\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Zerox/LibBytes.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2018 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.0;\\n\\n\\nlibrary LibBytes {\\n\\n    using LibBytes for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n    \\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(\\n        uint256 dest,\\n        uint256 source,\\n        uint256 length\\n    )\\n        internal\\n        pure\\n    {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} lt(source, sEnd) {} {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n                    \\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} slt(dest, dEnd) {} {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n                    \\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        require(\\n            from <= to,\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n        );\\n        require(\\n            to < b.length,\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n        );\\n        \\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(\\n            result.contentAddress(),\\n            b.contentAddress() + from,\\n            result.length\\n        );\\n        return result;\\n    }\\n    \\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\\n    function sliceDestructive(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        require(\\n            from <= to,\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n        );\\n        require(\\n            to < b.length,\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n        );\\n        \\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return The byte that was popped off.\\n    function popLastByte(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes1 result)\\n    {\\n        require(\\n            b.length > 0,\\n            \\\"GREATER_THAN_ZERO_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return The 20 byte address that was popped off.\\n    function popLast20Bytes(bytes memory b)\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        require(\\n            b.length >= 20,\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Store last 20 bytes.\\n        result = readAddress(b, b.length - 20);\\n\\n        assembly {\\n            // Subtract 20 from byte array length.\\n            let newLen := sub(mload(b), 20)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return True if arrays are the same. False otherwise.\\n    function equals(\\n        bytes memory lhs,\\n        bytes memory rhs\\n    )\\n        internal\\n        pure\\n        returns (bool equal)\\n    {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        require(\\n            b.length >= index + 20,  // 20 is length of address\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(\\n        bytes memory b,\\n        uint256 index,\\n        address input\\n    )\\n        internal\\n        pure\\n    {\\n        require(\\n            b.length >= index + 20,  // 20 is length of address\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n            \\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return bytes32 value from byte array.\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        require(\\n            b.length >= index + 32,\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(\\n        bytes memory b,\\n        uint256 index,\\n        bytes32 input\\n    )\\n        internal\\n        pure\\n    {\\n        require(\\n            b.length >= index + 32,\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(\\n        bytes memory b,\\n        uint256 index,\\n        uint256 input\\n    )\\n        internal\\n        pure\\n    {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return bytes4 value from byte array.\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        require(\\n            b.length >= index + 4,\\n            \\\"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    function readBytes2(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes2 result)\\n    {\\n        require(\\n            b.length >= index + 2,\\n            \\\"GREATER_OR_EQUAL_TO_2_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFF000000000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Reads nested bytes from a specific position.\\n    /// @dev NOTE: the returned value overlaps with the input value.\\n    ///            Both should be treated as immutable.\\n    /// @param b Byte array containing nested bytes.\\n    /// @param index Index of nested bytes.\\n    /// @return result Nested bytes.\\n    function readBytesWithLength(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Read length of nested bytes\\n        uint256 nestedBytesLength = readUint256(b, index);\\n        index += 32;\\n\\n        // Assert length of <b> is valid, given\\n        // length of nested bytes\\n        require(\\n            b.length >= index + nestedBytesLength,\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n        );\\n        \\n        // Return a pointer to the byte array as it exists inside `b`\\n        assembly {\\n            result := add(b, index)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Inserts bytes at a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes to insert.\\n    function writeBytesWithLength(\\n        bytes memory b,\\n        uint256 index,\\n        bytes memory input\\n    )\\n        internal\\n        pure\\n    {\\n        // Assert length of <b> is valid, given\\n        // length of input\\n        require(\\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Copy <input> into <b>\\n        memCopy(\\n            b.contentAddress() + index,\\n            input.rawAddress(), // includes length of <input>\\n            input.length + 32   // +32 bytes to store <input> length\\n        );\\n    }\\n\\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\\n    /// @param dest Byte array that will be overwritten with source bytes.\\n    /// @param source Byte array to copy onto dest bytes.\\n    function deepCopyBytes(\\n        bytes memory dest,\\n        bytes memory source\\n    )\\n        internal\\n        pure\\n    {\\n        uint256 sourceLen = source.length;\\n        // Dest length must be >= source length, or some bytes would not be copied.\\n        require(\\n            dest.length >= sourceLen,\\n            \\\"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\\\"\\n        );\\n        memCopy(\\n            dest.contentAddress(),\\n            source.contentAddress(),\\n            sourceLen\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Zerox/LibDecoder.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibOrder.sol\\\";\\nimport \\\"./LibBytes.sol\\\";\\n\\ncontract LibDecoder {\\n    using LibBytes for bytes;\\n\\n    function decodeFillOrder(bytes memory data) internal pure returns(LibOrder.Order memory order, uint256 takerFillAmount, bytes memory mmSignature) {\\n        require(\\n            data.length > 800,\\n            \\\"LENGTH_LESS_800\\\"\\n        );\\n\\n        // compare method_id\\n        // 0x64a3bc15 is fillOrKillOrder's method id.\\n        require(\\n            data.readBytes4(0) == 0x64a3bc15,\\n            \\\"WRONG_METHOD_ID\\\"\\n        );\\n        \\n        bytes memory dataSlice;\\n        assembly {\\n            dataSlice := add(data, 4)\\n        }\\n        //return (order, takerFillAmount, data);\\n        return abi.decode(dataSlice, (LibOrder.Order, uint256, bytes));\\n\\n    }\\n\\n    function decodeMmSignatureWithoutSign(bytes memory signature) internal pure returns(address user, uint16 feeFactor) {\\n        require(\\n            signature.length == 87 || signature.length == 88,\\n            \\\"LENGTH_87_REQUIRED\\\"\\n        );\\n\\n        user = signature.readAddress(65);\\n        feeFactor = uint16(signature.readBytes2(85));\\n        \\n        require(\\n            feeFactor < 10000,\\n            \\\"FEE_FACTOR_MORE_THEN_10000\\\"\\n        );\\n\\n        return (user, feeFactor);\\n    }\\n\\n    function decodeMmSignature(bytes memory signature) internal pure returns(uint8 v, bytes32 r, bytes32 s, address user, uint16 feeFactor) {\\n        (user, feeFactor) = decodeMmSignatureWithoutSign(signature);\\n\\n        v = uint8(signature[0]);\\n        r = signature.readBytes32(1);\\n        s = signature.readBytes32(33);\\n\\n        return (v, r, s, user, feeFactor);\\n    }\\n\\n    function decodeUserSignatureWithoutSign(bytes memory signature) internal pure returns(address receiver) {\\n        require(\\n            signature.length == 85 || signature.length == 86,\\n            \\\"LENGTH_85_REQUIRED\\\"\\n        );\\n        receiver = signature.readAddress(65);\\n\\n        return receiver;\\n    }\\n\\n    function decodeUserSignature(bytes memory signature) internal pure returns(uint8 v, bytes32 r, bytes32 s, address receiver) {\\n        receiver = decodeUserSignatureWithoutSign(signature);\\n\\n        v = uint8(signature[0]);\\n        r = signature.readBytes32(1);\\n        s = signature.readBytes32(33);\\n\\n        return (v, r, s, receiver);\\n    }\\n\\n    function decodeERC20Asset(bytes memory assetData) internal pure returns(address) {\\n        require(\\n            assetData.length == 36,\\n            \\\"LENGTH_65_REQUIRED\\\"\\n        );\\n\\n        return assetData.readAddress(16);\\n    }\\n}\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Zerox/LibEIP712.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2018 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.0;\\n\\n\\ncontract LibEIP712 {\\n\\n    // EIP191 header for EIP712 prefix\\n    string constant internal EIP191_HEADER = \\\"\\\\x19\\\\x01\\\";\\n\\n    // EIP712 Domain Name value\\n    string constant internal EIP712_DOMAIN_NAME = \\\"0x Protocol\\\";\\n\\n    // EIP712 Domain Version value\\n    string constant internal EIP712_DOMAIN_VERSION = \\\"2\\\";\\n\\n    // Hash of the EIP712 Domain Separator Schema\\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\\n        \\\"EIP712Domain(\\\",\\n        \\\"string name,\\\",\\n        \\\"string version,\\\",\\n        \\\"address verifyingContract\\\",\\n        \\\")\\\"\\n    ));\\n\\n    // Hash of the EIP712 Domain Separator data\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public EIP712_DOMAIN_HASH;\\n\\n    constructor ()\\n        public\\n    {\\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\\n            bytes12(0),\\n            address(this)\\n        ));\\n    }\\n\\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\\n    /// @param hashStruct The EIP712 hash struct.\\n    /// @return EIP712 hash applied to this EIP712 Domain.\\n    function hashEIP712Message(bytes32 hashStruct)\\n        internal\\n        view\\n        returns (bytes32 result)\\n    {\\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\\n\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP191_HEADER,\\n        //     EIP712_DOMAIN_HASH,\\n        //     hashStruct    \\n        // ));\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 66)\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contract-utils/Zerox/LibOrder.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2018 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./LibEIP712.sol\\\";\\n\\n\\ncontract LibOrder is\\n    LibEIP712\\n{\\n    // Hash for the EIP712 Order Schema\\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\\n        \\\"Order(\\\",\\n        \\\"address makerAddress,\\\",\\n        \\\"address takerAddress,\\\",\\n        \\\"address feeRecipientAddress,\\\",\\n        \\\"address senderAddress,\\\",\\n        \\\"uint256 makerAssetAmount,\\\",\\n        \\\"uint256 takerAssetAmount,\\\",\\n        \\\"uint256 makerFee,\\\",\\n        \\\"uint256 takerFee,\\\",\\n        \\\"uint256 expirationTimeSeconds,\\\",\\n        \\\"uint256 salt,\\\",\\n        \\\"bytes makerAssetData,\\\",\\n        \\\"bytes takerAssetData\\\",\\n        \\\")\\\"\\n    ));\\n\\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\\n    // An order's state is unaffected by external factors, like account balances.\\n    enum OrderStatus {\\n        INVALID,                     // Default value\\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\\n        FILLABLE,                    // Order is fillable\\n        EXPIRED,                     // Order has already expired\\n        FULLY_FILLED,                // Order is fully filled\\n        CANCELLED                    // Order has been cancelled\\n    }\\n\\n    // solhint-disable max-line-length\\n    struct Order {\\n        address makerAddress;           // Address that created the order.      \\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\\n    }\\n    // solhint-enable max-line-length\\n\\n    struct OrderInfo {\\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\\n    }\\n\\n    /// @dev Calculates Keccak-256 hash of the order.\\n    /// @param order The order structure.\\n    /// @return Keccak-256 EIP712 hash of the order.\\n    function getOrderHash(Order memory order)\\n        internal\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        orderHash = hashEIP712Message(hashOrder(order));\\n        return orderHash;\\n    }\\n\\n    /// @dev Calculates EIP712 hash of the order.\\n    /// @param order The order structure.\\n    /// @return EIP712 hash of the order.\\n    function hashOrder(Order memory order)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\\n\\n        // Assembly for more efficiently computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP712_ORDER_SCHEMA_HASH,\\n        //     bytes32(order.makerAddress),\\n        //     bytes32(order.takerAddress),\\n        //     bytes32(order.feeRecipientAddress),\\n        //     bytes32(order.senderAddress),\\n        //     order.makerAssetAmount,\\n        //     order.takerAssetAmount,\\n        //     order.makerFee,\\n        //     order.takerFee,\\n        //     order.expirationTimeSeconds,\\n        //     order.salt,\\n        //     keccak256(order.makerAssetData),\\n        //     keccak256(order.takerAssetData)\\n        // ));\\n\\n        assembly {\\n            // Calculate memory addresses that will be swapped out before hashing\\n            let pos1 := sub(order, 32)\\n            let pos2 := add(order, 320)\\n            let pos3 := add(order, 352)\\n\\n            // Backup\\n            let temp1 := mload(pos1)\\n            let temp2 := mload(pos2)\\n            let temp3 := mload(pos3)\\n            \\n            // Hash in place\\n            mstore(pos1, schemaHash)\\n            mstore(pos2, makerAssetDataHash)\\n            mstore(pos3, takerAssetDataHash)\\n            result := keccak256(pos1, 416)\\n            \\n            // Restore\\n            mstore(pos1, temp1)\\n            mstore(pos2, temp2)\\n            mstore(pos3, temp3)\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kaichen/workspace/Tokenlon/tokenlon-contracts/contract-mmproxy/contracts/MarketMakerProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../contract-utils/Ownable/Ownable.sol\\\";\\nimport \\\"../contract-utils/Weth/LibWeth.sol\\\";\\nimport \\\"../contract-utils/Interface/ITokenlonExchange.sol\\\";\\nimport \\\"../contract-utils/Zerox/LibDecoder.sol\\\";\\nimport \\\"../contract-utils/ERC20/SafeToken.sol\\\";\\n\\ncontract MarketMakerProxy is \\n    Ownable,\\n    LibWeth,\\n    LibDecoder,\\n    SafeToken\\n{\\n    string public version = \\\"0.0.5\\\";\\n\\n    uint256 constant MAX_UINT = 2**256 - 1;\\n    address internal SIGNER;\\n\\n    // auto withdraw weth to eth\\n    address internal WETH_ADDR;\\n    address public withdrawer;\\n    mapping (address => bool) public isWithdrawWhitelist;\\n\\n    modifier onlyWithdrawer() {\\n        require(\\n            msg.sender == withdrawer,\\n            \\\"ONLY_CONTRACT_WITHDRAWER\\\"\\n        );\\n        _;\\n    }\\n    \\n    constructor () public {\\n        owner = msg.sender;\\n        operator = msg.sender;\\n    }\\n\\n    function() external payable {}\\n\\n    // Manage\\n    function setSigner(address _signer) public onlyOperator {\\n        SIGNER = _signer;\\n    }\\n\\n    function setWeth(address _weth) public onlyOperator {\\n        WETH_ADDR = _weth;\\n    }\\n\\n    function setWithdrawer(address _withdrawer) public onlyOperator {\\n        withdrawer = _withdrawer;\\n    }\\n\\n    function setAllowance(address[] memory token_addrs, address spender) public onlyOperator {\\n        for (uint i = 0; i < token_addrs.length; i++) {\\n            address token = token_addrs[i];\\n            doApprove(token, spender, MAX_UINT);\\n            doApprove(token, address(this), MAX_UINT);\\n        }\\n    }\\n\\n    function closeAllowance(address[] memory token_addrs, address spender) public onlyOperator {\\n        for (uint i = 0; i < token_addrs.length; i++) {\\n            address token = token_addrs[i];\\n            doApprove(token, spender, 0);\\n            doApprove(token, address(this), 0);\\n        }\\n    }\\n\\n    function registerWithdrawWhitelist(address _addr, bool _add) public onlyOperator {\\n        isWithdrawWhitelist[_addr] = _add;\\n    }\\n\\n    function withdraw(address token, address payable to, uint256 amount) public onlyWithdrawer {\\n        require(\\n            isWithdrawWhitelist[to],\\n            \\\"NOT_WITHDRAW_WHITELIST\\\"\\n        );\\n        if(token == WETH_ADDR) {\\n            convertWethtoETH(token, amount);\\n            to.transfer(amount);\\n        } else {\\n            doTransferFrom(token, address(this), to , amount);\\n        }\\n    }\\n\\n    function withdrawETH(address payable to, uint256 amount) public onlyWithdrawer {\\n        require(\\n            isWithdrawWhitelist[to],\\n            \\\"NOT_WITHDRAW_WHITELIST\\\"\\n        );\\n        to.transfer(amount);\\n    }\\n\\n    function isValidSignature(bytes32 orderHash, bytes memory signature) public view returns (bytes32) {\\n        require(\\n            SIGNER == ecrecoverAddress(orderHash, signature),\\n            \\\"INVALID_SIGNATURE\\\"\\n        );\\n        return keccak256(\\\"isValidWalletSignature(bytes32,address,bytes)\\\");\\n    }\\n\\n    function ecrecoverAddress(bytes32 orderHash, bytes memory signature) internal pure returns (address) {\\n        (uint8 v, bytes32 r, bytes32 s, address user, uint16 feeFactor) = decodeMmSignature(signature);\\n        \\n        return ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n54\\\",\\n                    orderHash,\\n                    user,\\n                    feeFactor\\n                )),\\n            v, r, s\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawer\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"registerWithdrawWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_addrs\",\"type\":\"address[]\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"closeAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_addrs\",\"type\":\"address[]\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"setAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWithdrawWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MarketMakerProxy","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}