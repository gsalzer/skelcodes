{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.7.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function amountToTransfer(uint256 amount) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Staking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _stakes;\r\n    mapping (address => uint256) private _time;\r\n\r\n    IERC20 public contractAddress;\r\n    \r\n    uint256 public stakingPool;\r\n    uint256 private chargeFee = 500;\r\n    uint256 public initialAmount;\r\n    uint256 public totalFee;\r\n    uint256 public rewardPool;\r\n\r\n    constructor(IERC20 _contractAddress) {\r\n        contractAddress = _contractAddress;\r\n    }\r\n    \r\n    function amountToCharge(uint256 amount) internal virtual returns (uint256) {\r\n        uint256 _amount = amount.ceil(chargeFee).mul(chargeFee).div(10000);\r\n        return _amount;\r\n    }\r\n    \r\n    function approvedAmount(address owner) public view returns (uint256) {\r\n        return contractAddress.allowance(owner, address(this));\r\n    }\r\n    \r\n    function stakeOf(address account) public view returns (uint256) {\r\n        return _stakes[account];\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return contractAddress.balanceOf(account);\r\n    }\r\n    \r\n    function chargePercent() public view returns (uint256) {\r\n        uint256 _chargeFee = chargeFee.div(100);\r\n        return _chargeFee;\r\n    }\r\n\r\n    function addToContract(uint256 amount) public virtual onlyOwner {\r\n        uint256 amountForPool = contractAddress.amountToTransfer(amount);\r\n        \r\n        initialAmount = initialAmount.add(amountForPool);\r\n        rewardPool = rewardPool.add(amountForPool);\r\n        \r\n        contractAddress.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n    \r\n    function stakeTokens(uint256 amount) external {\r\n        require(initialAmount != 0, \"Wait for official announcement\");\r\n        require(contractAddress.balanceOf(msg.sender) >= amount, \"Your current balance is less than the amount for staking\");\r\n        require(contractAddress.allowance(msg.sender, address(this)) >= amount, \"Please approve tokens before staking\");\r\n\r\n        uint256 _amountToCharge = amountToCharge(contractAddress.amountToTransfer(amount));\r\n        uint256 _amountToTransfer = contractAddress.amountToTransfer(amount).sub(_amountToCharge);\r\n\r\n        _stakes[msg.sender] = _stakes[msg.sender].add(_amountToTransfer);\r\n        _time[msg.sender] = block.timestamp;\r\n        totalFee = totalFee.add(_amountToCharge);\r\n        stakingPool = stakingPool.add(_amountToCharge).add(_amountToTransfer);\r\n        rewardPool = rewardPool.add(totalFee);\r\n\r\n        contractAddress.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function calculateReward() internal virtual returns (uint256) {\r\n        uint256 amount = rewardPool.mul(_stakes[msg.sender]).div(stakingPool);\r\n        uint256 stakingTime = block.timestamp.sub(_time[msg.sender]);\r\n        uint256 reward = amount.mul(3).mul(stakingTime).div(10 ** 6);\r\n        if (reward > rewardPool) {\r\n            uint256 _reward = rewardPool.div(2);\r\n            \r\n            _stakes[msg.sender] = _stakes[msg.sender].sub(_reward);\r\n            rewardPool = rewardPool.sub(_reward);\r\n            \r\n            return _reward;\r\n        }    \r\n\r\n        return reward;\r\n    }\r\n\r\n    function checkReward(address account) public view returns (uint256) {\r\n        uint256 amount = rewardPool.mul(_stakes[account]).div(stakingPool);\r\n        uint256 stakingTime = block.timestamp.sub(_time[account]);\r\n        uint256 reward = amount.mul(3).mul(stakingTime).div(10 ** 6);\r\n\r\n        if (reward > rewardPool) {\r\n            uint256 _reward = rewardPool.div(2);\r\n            return _reward;\r\n        }  \r\n\r\n        return reward;\r\n    }\r\n    \r\n    function claimReward() external {\r\n        uint256 reward = calculateReward();\r\n        \r\n        _time[msg.sender] = block.timestamp;\r\n        \r\n        rewardPool = rewardPool.sub(reward);\r\n        \r\n        contractAddress.transfer(msg.sender, reward);\r\n    }\r\n    \r\n    function removeStake(uint256 amount) external {\r\n        _stakes[msg.sender] = _stakes[msg.sender].sub(amount);\r\n\r\n        stakingPool = stakingPool.sub(amount);\r\n        \r\n        contractAddress.transfer(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"approvedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chargePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000728f71663a4f02ed1a74e0accce36e855e33b704","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4841e105c5fbd5250653c649a9f6d82031153be9add2e121d2df412467e1e310"}]}