{"status":"1","message":"OK","result":[{"SourceCode":"# @version ^0.2.0\r\n\r\ninterface ERC20:\r\n    def approve(spender: address, amount: uint256): nonpayable\r\n    def transfer(recipient: address, amount: uint256): nonpayable\r\n    def transferFrom(sender: address, recipient: address, amount: uint256): nonpayable\r\n\r\ninterface UniswapV2Pair:\r\n    def token0() -> address: view\r\n    def token1() -> address: view\r\n    def getReserves() -> (uint256, uint256, uint256): view\r\n\r\ninterface UniswapV2Router02:\r\n    def addLiquidity(tokenA: address, tokenB: address, amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to: address, deadline: uint256) -> (uint256, uint256, uint256): nonpayable\r\n\r\ninterface WrappedEth:\r\n    def deposit(): payable\r\n\r\nUNISWAPV2ROUTER02: constant(address) = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n\r\nVETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\nWETH: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\nDEADLINE: constant(uint256) = MAX_UINT256 # change\r\n\r\npaused: public(bool)\r\nadmin: public(address)\r\nfeeAmount: public(uint256)\r\nfeeAddress: public(address)\r\n\r\nevent TestValue:\r\n    value: uint256\r\n    text: String[256]\r\n\r\nevent TestAddress:\r\n    addr: address\r\n    text: String[256]\r\n\r\nevent TestData:\r\n    data: bytes32\r\n    text: String[256]\r\n\r\n@external\r\ndef __init__():\r\n    self.paused = False\r\n    self.admin = msg.sender\r\n    self.feeAddress = 0xf29399fB3311082d9F8e62b988cBA44a5a98ebeD\r\n    self.feeAmount = 5 * 10 ** 15\r\n\r\n@internal\r\n@pure\r\ndef _getPairTokens(pair: address) -> (address, address):\r\n    token0: address = UniswapV2Pair(pair).token0()\r\n    token1: address = UniswapV2Pair(pair).token1()\r\n    return (token0, token1)\r\n\r\n@internal\r\n@pure\r\ndef uintSqrt(y: uint256) -> uint256:\r\n    z: uint256 = 0\r\n    x: uint256 = 0\r\n    if y > 3:\r\n        z = y\r\n        x = y / 2 + 1\r\n        for i in range(256):\r\n            if x >= z:\r\n                break\r\n            z = x\r\n            x = (y / x + x) / 2\r\n    elif y != 0:\r\n        z = 1\r\n    else:\r\n        z = 0\r\n    return z\r\n\r\n@internal\r\ndef _token2Token(fromToken: address, toToken: address, tokens2Trade: uint256, deadline: uint256) -> uint256:\r\n    if fromToken == toToken:\r\n        return tokens2Trade\r\n    ERC20(fromToken).approve(UNISWAPV2ROUTER02, 0)\r\n    ERC20(fromToken).approve(UNISWAPV2ROUTER02, tokens2Trade)\r\n    \r\n    addrBytes: Bytes[288] = concat(convert(tokens2Trade, bytes32), convert(0, bytes32), convert(160, bytes32), convert(self, bytes32), convert(deadline, bytes32), convert(2, bytes32), convert(fromToken, bytes32), convert(toToken, bytes32))\r\n    funcsig: Bytes[4] = method_id(\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\")\r\n    full_data: Bytes[292] = concat(funcsig, addrBytes)\r\n    \r\n    _response: Bytes[128] = raw_call(\r\n        UNISWAPV2ROUTER02,\r\n        full_data,\r\n        max_outsize=128\r\n    )\r\n    tokenBought: uint256 = convert(slice(_response, 96, 32), uint256)\r\n    assert tokenBought > 0, \"Error Swapping Token 2\"\r\n    return tokenBought\r\n\r\n@internal\r\n@view\r\ndef _calculateSwapInAmount(reserveIn: uint256, userIn: uint256) -> uint256:\r\n    return ((self.uintSqrt(reserveIn * (userIn * 3988000 + reserveIn * 3988009))) - reserveIn * 1997) / 1994\r\n\r\n@internal\r\ndef _swap(fromToken: address, pair: address, toUnipoolToken0: address, toUnipoolToken1: address, amount: uint256, deadline: uint256) -> (uint256, uint256):\r\n    res0: uint256 = 0\r\n    res1: uint256 = 0\r\n    blockTimestampLast: uint256 = 0\r\n    (res0, res1, blockTimestampLast) = UniswapV2Pair(pair).getReserves()\r\n    token1Bought: uint256 = 0\r\n    token0Bought: uint256 = 0\r\n    if (fromToken == toUnipoolToken0):\r\n        amountToSwap: uint256 = self._calculateSwapInAmount(res0, amount)\r\n        if amountToSwap == 0:\r\n            amountToSwap = amount / 2\r\n        token1Bought = self._token2Token(fromToken, toUnipoolToken1, amountToSwap, deadline)\r\n        token0Bought = amount - amountToSwap\r\n    else:\r\n        amountToSwap: uint256 = self._calculateSwapInAmount(res1, amount)\r\n        if amountToSwap == 0:\r\n            amountToSwap = amount / 2\r\n        token0Bought = self._token2Token(fromToken, toUnipoolToken0, amountToSwap, deadline)\r\n        token1Bought = amount - amountToSwap\r\n    return (token0Bought, token1Bought)\r\n\r\n@internal\r\ndef _uniDeposit(token0: address, token1: address, amount0: uint256, amount1: uint256, sender: address, deadline: uint256) -> uint256:\r\n    ERC20(token0).approve(UNISWAPV2ROUTER02, 0)\r\n    ERC20(token1).approve(UNISWAPV2ROUTER02, 0)\r\n    ERC20(token0).approve(UNISWAPV2ROUTER02, amount0)\r\n    ERC20(token1).approve(UNISWAPV2ROUTER02, amount1)\r\n    amountA: uint256 = 0\r\n    amountB: uint256 = 0\r\n    LP: uint256 = 0\r\n    (amountA, amountB, LP) = UniswapV2Router02(UNISWAPV2ROUTER02).addLiquidity(token0, token1, amount0, amount1, 1, 1, sender, deadline)\r\n    if amount0 - amountA > 0:\r\n        ERC20(token0).transfer(sender, amount0 - amountA)\r\n    if amount1 - amountB > 0:\r\n        ERC20(token1).transfer(sender, amount1 - amountB)\r\n    return LP\r\n\r\n@internal\r\ndef _performInvest(fromToken:address, pair:address, amount:uint256, sender: address, deadline: uint256) -> uint256:\r\n    toUniswapToken0: address = ZERO_ADDRESS\r\n    toUniswapToken1: address = ZERO_ADDRESS\r\n    (toUniswapToken0, toUniswapToken1) = self._getPairTokens(pair)\r\n    if fromToken != toUniswapToken0 and fromToken != toUniswapToken1:\r\n        raise \"Token Error\"\r\n    token0Bought: uint256 = 0\r\n    token1Bought: uint256 = 0\r\n    (token0Bought, token1Bought) = self._swap(fromToken, pair, toUniswapToken0, toUniswapToken1, amount, deadline)\r\n    return self._uniDeposit(toUniswapToken0, toUniswapToken1, token0Bought, token1Bought, sender, deadline)\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef investTokenForEthPair(token: address, pair: address, amount: uint256, minPoolTokens: uint256, deadline: uint256=MAX_UINT256) -> uint256:\r\n    assert not self.paused, \"Paused\"\r\n    fee: uint256 = self.feeAmount\r\n    msg_value: uint256 = msg.value\r\n    assert msg.value >= fee, \"Insufficient fee\"\r\n    send(self.feeAddress, fee)\r\n    msg_value -= fee\r\n    assert amount > 0, \"Invalid input amount\"\r\n    token0: address = ZERO_ADDRESS\r\n    token1: address = ZERO_ADDRESS\r\n    (token0, token1) = self._getPairTokens(pair)\r\n    if token0 != WETH and token1 != WETH:\r\n        raise \"Not ETH Pair\"\r\n    midToken: address = WETH\r\n    toInvest: uint256 = 0\r\n    LPBought: uint256 = 0\r\n    # invest ETH\r\n    if token == VETH:\r\n        assert msg_value >= amount, \"ETH not enough\"\r\n        # return remaining ETH\r\n        if msg_value > amount:\r\n            send(msg.sender, msg_value - amount)\r\n        toInvest = amount\r\n        WrappedEth(WETH).deposit(value=toInvest)\r\n    # invest Token\r\n    else:\r\n        ERC20(token).transferFrom(msg.sender, self, amount)\r\n        if msg_value > 0:\r\n            send(msg.sender, msg_value)\r\n        if token == WETH:\r\n            toInvest = amount\r\n        elif token != token0 and token != token1:\r\n            toInvest = self._token2Token(token, WETH, amount, deadline)\r\n        else:\r\n            midToken = token\r\n            toInvest = amount\r\n    LPBought = self._performInvest(midToken, pair, toInvest, msg.sender, deadline)\r\n    assert LPBought >= minPoolTokens, \"High Slippage\"\r\n    return LPBought\r\n\r\n# Admin functions\r\n@external\r\ndef pause(_paused: bool):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.paused = _paused\r\n\r\n@external\r\ndef newAdmin(_admin: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.admin = _admin\r\n\r\n@external\r\ndef newFeeAmount(_feeAmount: uint256):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.feeAmount = _feeAmount\r\n\r\n@external\r\ndef newFeeAddress(_feeAddress: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.feeAddress = _feeAddress\r\n\r\n@external\r\ndef seizeMany(token: address[8], amount: uint256[8], to: address[8]):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    for i in range(8):\r\n        if token[i] == VETH:\r\n            send(to[i], amount[i])\r\n        elif token[i] != ZERO_ADDRESS:\r\n            ERC20(token[i]).transfer(to[i], amount[i])\r\n\r\n@external\r\ndef seize(token: address, amount: uint256, to: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    if token == VETH:\r\n        send(to, amount)\r\n    elif token != ZERO_ADDRESS:\r\n        ERC20(token).transfer(to, amount)\r\n\r\n@external\r\n@payable\r\ndef __default__(): pass","ABI":"[{\"name\":\"TestValue\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false},{\"type\":\"string\",\"name\":\"text\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TestAddress\",\"inputs\":[{\"type\":\"address\",\"name\":\"addr\",\"indexed\":false},{\"type\":\"string\",\"name\":\"text\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TestData\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"data\",\"indexed\":false},{\"type\":\"string\",\"name\":\"text\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"investTokenForEthPair\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"address\",\"name\":\"pair\"},{\"type\":\"uint256\",\"name\":\"amount\"},{\"type\":\"uint256\",\"name\":\"minPoolTokens\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"name\":\"investTokenForEthPair\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"address\",\"name\":\"pair\"},{\"type\":\"uint256\",\"name\":\"amount\"},{\"type\":\"uint256\",\"name\":\"minPoolTokens\"},{\"type\":\"uint256\",\"name\":\"deadline\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"name\":\"pause\",\"outputs\":[],\"inputs\":[{\"type\":\"bool\",\"name\":\"_paused\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36577},{\"name\":\"newAdmin\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36607},{\"name\":\"newFeeAmount\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_feeAmount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36537},{\"name\":\"newFeeAddress\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_feeAddress\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36667},{\"name\":\"seizeMany\",\"outputs\":[],\"inputs\":[{\"type\":\"address[8]\",\"name\":\"token\"},{\"type\":\"uint256[8]\",\"name\":\"amount\"},{\"type\":\"address[8]\",\"name\":\"to\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":282577},{\"name\":\"seize\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"uint256\",\"name\":\"amount\"},{\"type\":\"address\",\"name\":\"to\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36677},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"paused\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1571},{\"name\":\"admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1601},{\"name\":\"feeAmount\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631},{\"name\":\"feeAddress\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1661}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}