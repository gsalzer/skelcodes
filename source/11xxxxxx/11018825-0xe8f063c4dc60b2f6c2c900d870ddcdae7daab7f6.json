{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\n\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n\n// https://docs.synthetix.io/contracts/Owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n        _;\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n// Inheritance\n// https://docs.synthetix.io/contracts/Pausable\ncontract Pausable is Owned {\n    uint public lastPauseTime;\n    bool public paused;\n\n    constructor() internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\n    }\n\n    /**\n     * @notice Change the paused state of the contract\n     * @dev Only the contract owner may call this.\n     */\n    function setPaused(bool _paused) external onlyOwner {\n        // Ensure we're actually changing the state before we do anything\n        if (_paused == paused) {\n            return;\n        }\n\n        // Set our paused state.\n        paused = _paused;\n\n        // If applicable, set the last pause time.\n        if (paused) {\n            lastPauseTime = now;\n        }\n\n        // Let everyone know that our pause state has changed.\n        emit PauseChanged(paused);\n    }\n\n    event PauseChanged(bool isPaused);\n\n    modifier notPaused {\n        require(!paused, \"This action cannot be performed while the contract is paused\");\n        _;\n    }\n}\n\n// Inheritance\ncontract StakingRewards is Owned, ReentrancyGuard, Pausable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== UTIL FUNCTIONS ========== */\n\n    function getTime() internal view returns (uint256) {\n        // current block timestamp as seconds since unix epoch\n        // Used to mock time changes in tests\n        return block.timestamp;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    // IERC20 public rewardsToken;\n    IERC20 public stakingToken;\n\n    uint256 private _totalSupply;\n\n    mapping(address => uint256) private _stakedBalance;\n    mapping(address => uint256) private _stakedTime;\n    mapping(address => uint256) private _unstakingBalance;\n    mapping(address => uint256) private _unstakingTime;\n    mapping(address => uint256) private _rewardBalance;\n\n    // Added for looping over addresses in event of APR change\n    mapping(address => uint256) private _addressToIndex;\n    address[] public allAddress;\n\n\n    uint256 private rewardDistributorBalance = 0;\n    uint256 internal rewardInterval = 86400 * 1; // 1 day\n    uint256 internal unstakingInterval = 86400 * 8; // 8 day\n\n    uint256 public rewardPerIntervalDivider = 411;\n\n    uint256 private _convertDecimalTokenBalance = 10**18;\n\n    uint256 public minStakeBalance = 1 * _convertDecimalTokenBalance;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _owner,\n        address _stakingToken\n    ) public Owned(_owner) {\n        stakingToken = IERC20(_stakingToken);\n    }\n\n    /* ========== VIEWS ========== */\n\n    // How much OM is in the contract total?\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // How much OM has address staked?\n    function balanceOf(address account) external view returns (uint256) {\n        return _stakedBalance[account];\n    }\n\n    // When did user stake?\n    function stakeTime(address account) external view returns (uint256) {\n        return _stakedTime[account];\n    }\n\n    // How much OM is unstaking in the address's current unstaking procedure?\n    function unstakingBalanceOf(address account) external view returns (uint256) {\n        return  _unstakingBalance[account];\n    }\n\n    // How much time is left in the address's current unstaking procedure?\n    function unstakingTimeOf(address account) external view returns (uint256) {\n        return _unstakingTime[account];\n    }\n\n    // How much have the address earned?\n    function rewardBalanceOf(address account) external view returns (uint256) {\n        return _rewardBalance[account];\n    }\n\n    // How much OM is available to distribute from reward disributor address? (Controlled by Mantra council)\n    function rewardDistributorBalanceOf() external view returns (uint256) {\n        return rewardDistributorBalance;\n    }\n\n    // When is the address's next reward going to become unstakable? \n    function nextRewardApplicableTime(address account) external view returns (uint256) {\n        require(_stakedTime[account] != 0, \"You dont have a stake in progress\");\n        require(_stakedTime[account] <= getTime(), \"Your stake takes 24 hours to become available to interact with\");\n        uint256 secondsRemaining = (getTime() - _stakedTime[account]).mod(rewardInterval);\n        return secondsRemaining;\n    }\n\n    // How much has account earned? Account's potential rewards ready to begin unstaking. \n    function earned(address account) public view returns (uint256) {\n        uint256 perIntervalReward = perIntervalRewardOf(account);\n        uint256 intervalsStaked = stakedIntervalsCountOf(account);\n        return perIntervalReward.mul(intervalsStaked);\n    }\n\n    function perIntervalRewardOf(address account) public view returns (uint256) {\n        return _stakedBalance[account].div(rewardPerIntervalDivider);\n    }\n\n    function stakedIntervalsCountOf(address account) public view returns (uint256) {\n        if (_stakedTime[account] == 0) return 0;\n        uint256 diffTime = getTime().sub(_stakedTime[account]);\n        return diffTime.div(rewardInterval);\n    }\n\n    // Address loop\n\n    function getAddresses(uint256 i) public view returns (address) {\n        return allAddress[i];\n    }\n\n    function getAddressesLength() public view returns (uint256) {\n        return allAddress.length;\n    }\n\n    \n\n    // \n\n    /* ========== END OF VIEWS ========== */\n\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    // ------ FUNCTION -------\n    // \n    //  STAKE ()\n    // \n    //      #require() amount is greater than ZERO\n    //      #require() address that is staking is not the contract address\n    // \n    //      Insert : token balance to user stakedBalances[address]\n    //      Insert : current block timestamp timestamp to stakeTime[address]\n    //      Add : token balance to total supply\n    //      Transfer : token balance from user to this contract\n    // \n    //  EXIT\n    //  \n\n    function stake(uint256 amount) external nonReentrant notPaused updateReward(msg.sender) {\n        \n        require(amount > 0, \"Cannot stake 0\");\n        uint256 newStakedBalance = _stakedBalance[msg.sender].add(amount);\n        require(newStakedBalance >= minStakeBalance, \"Staked balance is less than minimum stake balance\");\n        uint256 currentTimestamp = getTime();\n        _stakedBalance[msg.sender] = newStakedBalance;\n        _stakedTime[msg.sender] = currentTimestamp;\n        _totalSupply = _totalSupply.add(amount);\n\n\n        // \n            if (_addressToIndex[msg.sender] > 0) {\n               \n            } else {\n                allAddress.push(msg.sender);\n                uint256 index = allAddress.length;\n                _addressToIndex[msg.sender] = index;\n            }\n        // \n\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    // ------ FUNCTION -------\n    // \n    //   UNSTAKE () \n    // \n    //      initiate by running updateReward() to push the system forward\n    //  \n    //      #require() that the amount of tokens specified to unstake is above ZERO    \n    //      #require() that the user has a current stakedBalance[address] above ZERO\n    //      #require() that the amount of tokens specified to unstake is equal or less than thier current stakedBalance[] \n    //      #require() that the address staking is not the contract address\n    //   \n    //      MODIFY : subtract token balance from stakedBalance[address]\n    // \n    //      if (stakedBalance == 0)\n    //          Update : stake timestamp to ZERO stakeTime[address] // exit the system\n    //      Else ()\n    //          #require() that the updates stake balance is above minimum stake value\n    //          Update : stake timestamp to now stakeTime[address] // Om for that address still remains in the system\n\n    //      MODIFY : token balance to user  _unstakingBalance[address]\n    //      MODIFY : (time + unstakingInterval) timestamp to stakeTime[address]\n    //   \n    //   EXIT\n    //  \n\n    function unstake(uint256 amount) public updateReward(msg.sender) {\n        _unstake(msg.sender, amount);\n    }\n\n    // Allows user to unstake tokens without (or with partial) rewards in case of empty reward distribution pool\n    function exit() public {\n        uint256 reward = Math.min(earned(msg.sender), rewardDistributorBalance);\n        require(reward > 0 || _rewardBalance[msg.sender] > 0 || _stakedBalance[msg.sender] > 0, \"No tokens to exit\");\n        _addReward(msg.sender, reward);\n        _stakedTime[msg.sender] = 0;\n        if (_rewardBalance[msg.sender] > 0) withdrawReward();\n        if (_stakedBalance[msg.sender] > 0) _unstake(msg.sender, _stakedBalance[msg.sender]);\n    }\n\n    // ------ FUNCTION -------\n    // \n    //   WITHDRAW UNSTAKED BALANCE (uint256 amount) \n    // \n    //      updateReward()\n    //  \n    //      #require() that the amount of tokens specified to unstake is above ZERO    \n    //      #require() that the user has a current unstakingBalance[address] above amount specified to withdraw\n    //      #require() that the current block time is greater than their unstaking end date (their unstaking or vesting period has finished)\n    //   \n    //      MODIFY :  _unstakingBalance[address] to  _unstakingBalance[address] minus amount\n    //      MODIFY : _totalSupply to _totalSupply[address] minus amount\n    //      \n    //      TRANSFER : amount to address that called the function\n    // \n    //   \n    //   EXIT\n    //  \n    \n    function withdrawUnstakedBalance(uint256 amount) public nonReentrant updateReward(msg.sender) {\n\n        require(amount > 0, \"Account does not have an unstaking balance\");\n        require(_unstakingBalance[msg.sender] >= amount, \"Account does not have that much balance unstaked\");\n        require(_unstakingTime[msg.sender] <= getTime(), \"Unstaking period has not finished yet\");\n\n         _unstakingBalance[msg.sender] =  _unstakingBalance[msg.sender].sub(amount);\n        _totalSupply = _totalSupply.sub(amount);\n\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    // ------ FUNCTION -------\n    // \n    //   LOCK IN REWARD () \n    // \n    //      updateReward()\n    //   \n    //   EXIT\n    //  \n\n    function lockInReward() public updateReward(msg.sender) {}\n\n    function lockInRewardOnBehalf(address _address) private updateReward(_address) {}\n\n    // ------ FUNCTION -------\n    // \n    //   WITHDRAW REWARD ()\n    // \n    //      updateReward()\n    //  \n    //      #require() that the reward balance of the user is above ZERO\n    //   \n    //      TRANSFER : transfer reward balance to address that called the function\n    // \n    //      MODIFY : update rewardBalance to ZERO\n    //   \n    //   EXIT\n    //  \n\n    function withdrawReward() public updateReward(msg.sender) {\n        uint256 reward = _rewardBalance[msg.sender];\n        require(reward > 0, \"You have not earned any rewards yet\");\n        _rewardBalance[msg.sender] = 0;\n        _unstakingBalance[msg.sender] = _unstakingBalance[msg.sender].add(reward);\n        _unstakingTime[msg.sender] = getTime() + unstakingInterval;\n        emit RewardWithdrawn(msg.sender, reward);\n    }\n\n    // ------ FUNCTION -------\n    // \n    //   STAKE REWARD ()\n    // \n    //      updateReward()\n    //  \n    //      #require() that the reward balance of the user is above ZERO\n    //   \n    //      MODIFY : update stakedBalances[address] = (stakedBalances[address] + _rewardBalance[msg.sender])\n    // \n    //      MODIFY : update rewardBalance to ZERO\n    //   \n    //   EXIT\n    //  \n\n    function stakeReward() public updateReward(msg.sender) {\n        require(_rewardBalance[msg.sender] > 0, \"You have not earned any rewards yet\");\n        _stakedBalance[msg.sender] = _stakedBalance[msg.sender].add(_rewardBalance[msg.sender]);\n        _rewardBalance[msg.sender] = 0;\n    }\n\n    // ------ FUNCTION -------\n    // \n    //   ADD REWARD SUPPLY () \n    // \n    //      #require() that the amount of tokens being added is above ZERO\n    //      #require() that the user\n    //   \n    //      MODIFY : update rewardDistributorBalance = rewardDistributorBalance + amount\n    //      MODIFY : update _totalSupply = _totalSupply + amount\n    //   \n    //   EXIT\n    //  \n\n    function addRewardSupply(uint256 amount) external onlyOwner {\n        require(amount > 0, \"Cannot add 0 tokens\");\n        \n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        rewardDistributorBalance = rewardDistributorBalance.add(amount);\n        _totalSupply = _totalSupply.add(amount);\n    }\n\n    // ------ FUNCTION -------\n    // \n    //   REMOVE REWARD SUPPLY | ONLY OWNER\n    // \n    //      #require() that the amount of tokens being removed is above ZERO\n    //      #require() that the amount is equal to or below the rewardDistributorBalance\n    //      #require() that the amount is equal to or below the totalSupply of tokens in the contract\n    //  \n    //      TRANSFER: amount of tokens from contract\n    //  \n    //      MODIFY : update rewardDistributorBalance = rewardDistributorBalance - amount\n    //      MODIFY : update _totalSupply = _totalSupply - amount\n    //   \n    //   EXIT\n    //  \n\n    function removeRewardSupply(uint256 amount) external onlyOwner nonReentrant {\n        require(amount > 0, \"Cannot withdraw 0\");\n        require(amount <= rewardDistributorBalance, \"rewardDistributorBalance has less tokens than requested\");\n        require(amount <= _totalSupply, \"Amount is greater that total supply\");\n        stakingToken.safeTransfer(owner, amount);\n        rewardDistributorBalance = rewardDistributorBalance.sub(amount);\n        _totalSupply = _totalSupply.sub(amount);\n    }\n\n    // ------ FUNCTION -------\n    // \n    //   SET REWARDS INTERVAL () ONLY OWNER\n    // \n    //      #require() that reward interval sullpied as argument is greater than 1 and less than 365 inclusive\n    //   \n    //      MODIFY : rewardInterval to supplied _rewardInterval\n    // \n    //      EMIT : update reward interval\n    //   \n    //   EXIT\n    //  \n\n    function setRewardsInterval(uint256 _rewardInterval) external onlyOwner {\n        require(\n            _rewardInterval >= 1 && _rewardInterval <= 365,\n            \"Staking reward interval must be between 1 and 365 inclusive\"\n        );\n        rewardInterval = _rewardInterval * 1 days;\n        emit RewardsDurationUpdated(rewardInterval);\n    }\n\n    // ------ FUNCTION -------#\n    // \n    //   SET REWARDS DIVIDER () ONLY OWNER\n    // \n    //      #require() that reward divider sullpied as argument is greater than original divider\n    //   \n    //      MODIFY : rewardIntervalDivider to supplied _rewardInterval\n    //   \n    //   EXIT\n    //  \n\n    function updateChunkUsersRewards(uint256 startIndex, uint256 endIndex) external onlyOwner {\n\n        uint256 length = allAddress.length;\n        require(endIndex <= length, \"Cant end on index greater than length of addresses\");\n        require(endIndex > startIndex, \"Nothing to iterate over\");\n        \n\n        for (uint i = startIndex; i < endIndex; i++) {\n            lockInRewardOnBehalf(allAddress[i]);\n        }\n    }\n\n    function setRewardsDivider(uint256 _rewardPerIntervalDivider) external onlyOwner {\n        require(\n            _rewardPerIntervalDivider >= 411,\n            \"Reward can only be lowered, divider must be greater than 410\"\n        );\n        rewardPerIntervalDivider = _rewardPerIntervalDivider;\n    }\n\n    // Keep in mind, that this method receives value in wei.\n    // It means, that if owner wants to set min staking balance to 2 om\n    // he needs to pass 2000000000000000000 as argument (if ERC20's decimals is 18).\n    function setMinStakeBalance(uint256 _minStakeBalance) external onlyOwner {\n        minStakeBalance = _minStakeBalance;\n    }\n    \n  /* ========== MODIFIERS ========== */\n\n    // ------ FUNCTION -------\n    // \n    //   UPDATE REWARD (address) INTERNAL\n    // \n    //      IF (stakeTime[address] > 0)\n    //      \n    //          VAR reward = 0;\n    //          VAR diffTime : Take current block timestamp and subtract the users stakedTime entry (timestamp)\n    //          VAR perIntervalReward : current staked balance divided by APR variable divider. Calculate the reward they should earn per interval that have occured since inital stake or last call of updateReward()\n    //          VAR intervalsStaked : diffTime calculation divided by the rewardInterval (24 hours)\n    //          reward : reward earned per interval based on current stake multiplied by how many intervals you have not calimed a reward for.\n    //          \n    // \n    //          #require() that reward user is about to receive is not greater than the rewardDistributorBalance\n    // \n    //          IF (the reward is greater than ZERO)  \n    // \n    //              MODIFY : rewardDistributorBalance to rewardDistributorBalance minus the reward paid\n    //              MODIFY : _totalSupply to _totalSupply minus the reward paid\n    //              MODIFY : _stakedTime[address] to now(timestamp)\n    //              MODIFY : _rewardBalance[address] to _rewardBalance[address] plus reward\n    // \n    //              EMIT : rewardPaid to the address calling the function (reward)\n    // \n    //          ELSE\n    //              NOTHING : user has nothing to claim. ignore and EXIT.\n    //      ELSE\n    //          NOTHING : user has nothing to claim. ignore and EXIT.\n    //   \n    //      EXIT\n    // \n\n    function _addReward(address account, uint256 amount) private {\n        if (amount == 0) return;\n        // Update stake balance to unstaking balance\n        rewardDistributorBalance = rewardDistributorBalance.sub(amount);\n        _rewardBalance[account] = _rewardBalance[account].add(amount);\n        emit RewardPaid(account, amount);\n    }\n\n    function _unstake(address account, uint256 amount) private {\n        require(_stakedBalance[account] > 0, \"Account does not have a balance staked\");\n        require(amount > 0, \"Cannot unstake Zero OM\");\n        require(amount <= _stakedBalance[account], \"Attempted to withdraw more than balance staked\");\n        _stakedBalance[account] = _stakedBalance[account].sub(amount);\n        if (_stakedBalance[account] == 0) _stakedTime[account] = 0;\n        else {\n            require(\n                _stakedBalance[account] >= minStakeBalance,\n                \"Your remaining staked balance would be under the minimum stake. Either leave at least 10 OM in the staking pool or withdraw all your OM\"\n            );\n        }\n        _unstakingBalance[account] = _unstakingBalance[account].add(amount);\n        _unstakingTime[account] = getTime() + unstakingInterval;\n        emit Unstaked(account, amount);\n    }\n\n    modifier updateReward(address account) {\n        // If their _stakeTime is 0, this means they arent active in the system\n        if (_stakedTime[account] > 0) {\n            uint256 stakedIntervals = stakedIntervalsCountOf(account);\n            uint256 perIntervalReward = perIntervalRewardOf(account);\n            uint256 reward = stakedIntervals.mul(perIntervalReward);\n            require(reward <= rewardDistributorBalance, \"Rewards pool is extinguished\");\n            _addReward(account, reward);\n            _stakedTime[account] = _stakedTime[account].add(rewardInterval.mul(stakedIntervals));\n        }\n        _;\n    }\n\n    /* ========== END OF MODIFIERS ========== */\n\n\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardWithdrawn(address indexed user, uint256 reward);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardsDurationUpdated(uint256 newDuration);\n    event Recovered(address token, uint256 amount);\n\n    /* ========== END EVENTS ========== */\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewardSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockInReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nextRewardApplicableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"perIntervalRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeRewardSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistributorBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerIntervalDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeBalance\",\"type\":\"uint256\"}],\"name\":\"setMinStakeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerIntervalDivider\",\"type\":\"uint256\"}],\"name\":\"setRewardsDivider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardInterval\",\"type\":\"uint256\"}],\"name\":\"setRewardsInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedIntervalsCountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unstakingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unstakingTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"updateChunkUsersRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnstakedBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingRewards","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000012e79894e7d9edc6f1ea7db7bb9ac8f911be716b000000000000000000000000af9f549774ecedbd0966c52f250acc548d3f36e5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}