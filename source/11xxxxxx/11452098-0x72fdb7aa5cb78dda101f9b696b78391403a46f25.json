{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface ERC20 {\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n    function approve(address _spender, uint _value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n     function balanceOf(address _addr)  external view returns (uint);\r\n    function transfer(address _to, uint _value)  external returns (bool);\r\n}\r\n\r\ninterface ERC223 {\r\n    function transfer(address _to, uint _value, bytes memory _data) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n\r\n\r\n contract SonergyToken {\r\n    string internal _symbol;\r\n    string internal _name;\r\n    uint internal _decimals;\r\n    uint internal _totalSupply = 21000000000000000000000000;\r\n    mapping (address => uint) _balanceOf;\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n\r\n    constructor (string memory __symbol, string memory __name, uint __decimals, uint __totalSupply) {\r\n        _symbol = __symbol;\r\n        _name = __name;\r\n        _decimals = __decimals;\r\n        _totalSupply = __totalSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() virtual public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n   \r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n  \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n  \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Sonergy is SonergyToken(\"SNEGY\", \"Sonergy\", 18, 21000000000000000000000000), ERC20, ERC223 {\r\n    address private _owner;\r\n  \r\n \r\n    \r\n  \r\n    \r\n    using SafeMath for uint;\r\n    \r\n \r\n    \r\n    constructor() {\r\n        _balanceOf[msg.sender] = _totalSupply;\r\n        _owner = msg.sender;\r\n    }\r\n   \r\n    \r\n  \r\n  \r\n  \r\n  \r\n    \r\n  \r\n    function totalSupply() override public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _addr) override public view returns (uint) {\r\n        return _balanceOf[_addr];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) override public returns (bool) {\r\n        if (_value > 0 &&\r\n            _value <= _balanceOf[msg.sender] &&\r\n            !isContract(_to) ) {\r\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    \r\n\r\n    function transfer(address _to, uint _value, bytes memory _data) override public returns (bool) {\r\n        if (_value > 0 &&\r\n            _value <= _balanceOf[msg.sender] &&\r\n            isContract(_to)) {\r\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            \r\n            emit Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n   \r\n  \r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) override public returns (bool) {\r\n        if (_allowances[_from][msg.sender] > 0 &&\r\n            _value > 0 &&\r\n            _allowances[_from][msg.sender] >= _value &&\r\n            _balanceOf[_from] >= _value) {\r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n\r\n   \r\n    function approve(address _spender, uint _value) override public returns (bool) {\r\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _addressOwner, address _spender) override public view returns (uint) {\r\n        return _allowances[_addressOwner][_spender];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Sonergy","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4183729ae710f61b70d1fc11b37655b64389ae2da21a89f0e0e0e9d43c885fe1"}]}