{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n# @notice A manager contract for the StakingRewards contract from Arcx.\r\n# @author skozin, kadmil\r\n# @license MIT\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface StakingRewards:\r\n    def collabPeriodFinish() -> uint256: view\r\n    def notifyRewardAmount(reward: uint256, rewardToken: address): nonpayable\r\n    def setcollabRewardsDistributor(_rewardsDistributor: address): nonpayable\r\n    def recovercollab(amount: uint256): nonpayable\r\n\r\n\r\nowner: public(address)\r\nrewards_contract: public(address)\r\nldo_token: constant(address) = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.owner = msg.sender\r\n\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    assert msg.value > 0 # dev: unexpected call\r\n\r\n\r\n@view\r\n@internal\r\ndef _is_rewards_period_finished(rewards_contract: address) -> bool:\r\n    return block.timestamp >= StakingRewards(rewards_contract).collabPeriodFinish()\r\n\r\n\r\n@internal\r\ndef _recover_erc20(_token: address, _token_amount: uint256):\r\n    recipient: address = self.owner\r\n\r\n    ERC20(_token).transfer(recipient, _token_amount)\r\n\r\n    if self.balance != 0:\r\n        send(recipient, self.balance)\r\n\r\n\r\n@view\r\n@external\r\ndef collab_rewards_period_finish() -> uint256:\r\n    \"\"\"\r\n    @notice The timestamp of LDO reward period finish.\r\n    \"\"\"\r\n    return StakingRewards(self.rewards_contract).collabPeriodFinish()\r\n\r\n\r\n@view\r\n@external\r\ndef is_rewards_period_finished() -> bool:\r\n    \"\"\"\r\n    @notice Whether the current rewards period has finished.\r\n    \"\"\"\r\n    return self._is_rewards_period_finished(self.rewards_contract)\r\n\r\n\r\n@external\r\ndef transfer_ownership(_to: address):\r\n    \"\"\"\r\n    @notice Changes the contract owner. Can only be called by the current owner.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n    self.owner = _to\r\n\r\n\r\n@external\r\ndef set_rewards_contract(_rewards_contract: address):\r\n    \"\"\"\r\n    @notice Sets the StakingRewards contract. Can only be called by the owner.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n    self.rewards_contract = _rewards_contract\r\n\r\n\r\n@external\r\ndef start_next_rewards_period():\r\n    \"\"\"\r\n    @notice\r\n        Starts the next rewards period of duration `rewards_contract.rewardsDuration()`,\r\n        distributing `ldo_token.balanceOf(self)` tokens throughout the period. The current\r\n        rewards period must be finished by this time.\r\n    \"\"\"\r\n    rewards_contract: address = self.rewards_contract\r\n    amount: uint256 = ERC20(ldo_token).balanceOf(self)\r\n\r\n    assert rewards_contract != ZERO_ADDRESS and amount != 0, \"manager: rewards disabled\"\r\n    assert self._is_rewards_period_finished(rewards_contract), \"manager: rewards period not finished\"\r\n\r\n    ERC20(ldo_token).transfer(rewards_contract, amount)\r\n    StakingRewards(rewards_contract).notifyRewardAmount(amount, ldo_token)\r\n\r\n\r\n@external\r\ndef recover_ldo_from_campaign(_amount: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Recovers all extra LDO from rewards contract to the reward manager owner.\r\n    \"\"\"\r\n    StakingRewards(self.rewards_contract).recovercollab(_amount)\r\n    self._recover_erc20(ldo_token, _amount)\r\n\r\n\r\n@external\r\ndef change_manager(_new_manager: address):\r\n    \"\"\"\r\n    @notice Changes the LDO reward manager in the reward contract.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n\r\n    rewards_contract: address = self.rewards_contract\r\n    assert rewards_contract != ZERO_ADDRESS, \"manager: no rewards contract\"\r\n\r\n    StakingRewards(self.rewards_contract).setcollabRewardsDistributor(_new_manager)\r\n\r\n\r\n@external\r\ndef recover_erc20(_token: address, _token_amount: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Transfers the the given ERC20 token and the whole\r\n        ETH balance from self to the owner of self.\r\n    \"\"\"\r\n    self._recover_erc20(_token, _token_amount)","ABI":"[{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"collab_rewards_period_finish\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1535},{\"name\":\"is_rewards_period_finished\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2047},{\"name\":\"transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36457},{\"name\":\"set_rewards_contract\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_rewards_contract\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36487},{\"name\":\"start_next_rewards_period\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":5353},{\"name\":\"recover_ldo_from_campaign\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":40910},{\"name\":\"change_manager\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_new_manager\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":5738},{\"name\":\"recover_erc20\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_token\"},{\"type\":\"uint256\",\"name\":\"_token_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37829},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"rewards_contract\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}