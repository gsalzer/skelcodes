{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity =0.6.11 >=0.5.12;\r\n\r\n////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\r\n\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/dapphub/ds-pause\r\ninterface DSPauseAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setDelay(uint256) external;\r\n    function plans(bytes32) external view returns (bool);\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function drop(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/ChainlogAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function keys() external view returns (bytes32[] memory);\r\n    function version() external view returns (string memory);\r\n    function ipfs() external view returns (string memory);\r\n    function setVersion(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setAddress(bytes32,address) external;\r\n    function removeAddress(bytes32) external;\r\n    function count() external view returns (uint256);\r\n    function get(uint256) external view returns (bytes32,address);\r\n    function list() external view returns (bytes32[] memory);\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\n// Helper function for returning address or abstract of Chainlog\r\n//  Valid on Mainnet, Kovan, Rinkeby, Ropsten, and Goerli\r\ncontract ChainlogHelper {\r\n    address          public constant ADDRESS  = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    ChainlogAbstract public constant ABSTRACT = ChainlogAbstract(ADDRESS);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/ChainlogAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/VatAbstract.sol\"; */\r\n\r\ncontract SpellAction {\r\n    // Office hours enabled if true\r\n    bool constant public officeHours = false;\r\n\r\n    // MAINNET ADDRESSES\r\n    //\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    // decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n\r\n    modifier limited {\r\n        if (officeHours) {\r\n            uint day = (block.timestamp / 1 days + 3) % 7;\r\n            require(day < 5, \"Can only be cast on a weekday\");\r\n            uint hour = block.timestamp / 1 hours % 24;\r\n            require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function execute() external limited {\r\n        // Proving the Pause Proxy has access to the MCD core system at the execution time\r\n        address MCD_VAT = CHANGELOG.getAddress(\"MCD_VAT\");\r\n        require(VatAbstract(MCD_VAT).wards(address(this)) == 1, \"no-access\");\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    DSPauseAbstract immutable public pause;\r\n    address         immutable public action;\r\n    bytes32         immutable public tag;\r\n    uint256         immutable public expiration;\r\n    uint256         public eta;\r\n    bytes           public sig;\r\n    bool            public done;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/3e18ba4514db068a96ea277e006028831dbd5ed7/governance/votes/Executive%20vote%20-%20January%2025%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string constant public description =\r\n        \"2021-01-25 MakerDAO Executive Spell | Hash: 0x6d023ee5874db51d0cdb0491d5ae3095c89a578133c44769c836efcb06f02eb0\";\r\n\r\n    // MIP29: Peg Stability Module\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/mips/4fc8d21ce2122c637f3302c63d2892b572cb5c94/MIP29/mip29.md -q -O - 2>/dev/null)\"\r\n    string constant public MIP29 = \"0xfcca2f3e493a998bf7e5532cda126d106173d2ab41d6965baa08e66a2c6cd96a\";\r\n\r\n    // MIP30: Farmable cUSDC Adaptor (CropJoin)\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/mips/4fc8d21ce2122c637f3302c63d2892b572cb5c94/MIP30/mip30.md -q -O - 2>/dev/null)\"\r\n    string constant public MIP30 = \"0xbdd7787c5d43e146c9ffa021ed59f9dbc01867c16216ff4a3c4341a530c18172\";\r\n\r\n    // MIP13c3-SP7: Declaration of Intent - Governance Communications Domain\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/mips/4942ee3a65f4205303146388d5af48f69f5e6898/MIP13/MIP13c3-Subproposals/MIP13c3-SP7.md -q -O - 2>/dev/null)\"\r\n    string constant public MIP13c3SP7 = \"0x821e0bb3299445e27a12fa29ce5820e5cc0b633650f7d7064aeb0de6307a807e\";\r\n\r\n    // MIP7c3-SP5: Onboarding SÃ©bastien Derivaux to the Risk Domain\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/mips/4942ee3a65f4205303146388d5af48f69f5e6898/MIP7/MIP7c3-Subproposals/MIP7c3-SP5.md -q -O - 2>/dev/null)\"\r\n    string constant public MIP7c3SP5 = \"0x8dd22faf4a65225699ab45df003a363e39636954ca5f07b7300a03e68ae96d07\";\r\n\r\n    // MIP7c3-SP5: Onboarding Sam MacPherson to the Smart Contracts Domain\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/mips/4fc8d21ce2122c637f3302c63d2892b572cb5c94/MIP7/MIP7c3-Subproposals/MIP7c3-SP6.md -q -O - 2>/dev/null)\"\r\n    string constant public MIP7c3SP6 = \"0x20f8c70ec4f91fa36acb3708aaf018f9bcd42529802fefbe3633d5f80a3085d8\";\r\n\r\n    // MIP28c7-SP2: Onboarding @JuanJuan to the Operational Support Domain\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/mips/c0f090df4d1ca28daefbb030725e7f8c115ea516/MIP28/MIP28c7-Subproposals/MIP28c7-SP2.md -q -O - 2>/dev/null)\"\r\n    string constant public MIP28c7SP2 = \"0x37d7005b0bf865b171bec39a7e1648f7cea3171124d615fb59e77ac455586850\";\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    constructor() public {\r\n        pause = DSPauseAbstract(CHANGELOG.getAddress(\"MCD_PAUSE\"));\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;\r\n        address _action = action = address(new SpellAction());\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = block.timestamp + 4 days + 2 hours;\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        require(eta != 0, \"DSSSpell/spell-not-scheduled\");\r\n        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\r\n\r\n        if (SpellAction(action).officeHours()) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function schedule() external {\r\n        require(block.timestamp <= expiration, \"DSSSpell/spell-has-expired\");\r\n        require(eta == 0, \"DSSSpell/spell-already-scheduled\");\r\n        eta = block.timestamp + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() external {\r\n        require(!done, \"DSSSpell/spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MIP13c3SP7\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIP28c7SP2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIP29\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIP30\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIP7c3SP5\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIP7c3SP6\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c4c8ccaf5904e7ab8c7820584d0c286ba08a01e5c94449b90c871430479862a6"}]}