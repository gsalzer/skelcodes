{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract GasToken1 {\r\n    function free(uint256 value) public returns (bool success);\r\n    function freeUpTo(uint256 value) public returns (uint256 freed);\r\n    function freeFrom(address from, uint256 value) public returns (bool success);\r\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed);\r\n}\r\n\r\ncontract ERC918Interface {\r\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n}\r\ncontract BurnGas {\r\n\r\n    // This function consumes a lot of gas\r\n    function expensiveStuff(address mToken, uint256 nonce, bytes32 challenge_digest) private {\r\n        require(ERC918Interface(mToken).mint(nonce, challenge_digest), \"Could not mint token\");\r\n    }\r\n\r\n    /*\r\n     * Frees free' tokens from the Gastoken at address gas_token'.\r\n     * The freed tokens belong to this Example contract. The gas refund can pay\r\n     * for up to half of the gas cost of the total transaction in which this \r\n     * call occurs.\r\n     */\r\n    function burnGasAndFree(address gas_token, uint256 free, address mToken, uint256 nonce, bytes32 challenge_digest) public {\r\n        require(GasToken1(gas_token).free(free), \"Could not free\");\r\n        expensiveStuff(mToken, nonce, challenge_digest);\r\n    }\r\n\r\n    /*\r\n     * Frees free' tokens from the Gastoken at address gas_token'.\r\n     * The freed tokens belong to the sender. The sender must have previously \r\n     * allowed this Example contract to free up to free' tokens on its behalf\r\n     * (i.e., allowance(msg.sender, this)' should be at least `free').\r\n     * The gas refund can pay for up to half of the gas cost of the total \r\n     * transaction in which this call occurs.\r\n     */\r\n    function burnGasAndFreeFrom(address gas_token, uint256 free, address mToken, uint256 nonce, bytes32 challenge_digest) public {\r\n        require(GasToken1(gas_token).freeFrom(msg.sender, free), \"Could not free\");\r\n        expensiveStuff(mToken, nonce, challenge_digest);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"gas_token\",\"type\":\"address\"},{\"name\":\"free\",\"type\":\"uint256\"},{\"name\":\"mToken\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"burnGasAndFreeFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gas_token\",\"type\":\"address\"},{\"name\":\"free\",\"type\":\"uint256\"},{\"name\":\"mToken\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"burnGasAndFree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BurnGas","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://262849572823350c5c885839827b5525e12a7646885472e5ec8b403c2c23dc35"}]}