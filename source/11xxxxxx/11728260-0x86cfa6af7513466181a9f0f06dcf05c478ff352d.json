{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/oracle/pool-bonding/Pool.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../external/Require.sol\\\";\\nimport \\\"../../external/Decimal.sol\\\";\\nimport \\\"../../Constants.sol\\\";\\nimport \\\"./Permission.sol\\\";\\nimport \\\"./Setters.sol\\\";\\n\\ncontract PoolBonding is Setters, Permission {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.D256;\\n\\n    bytes32 private constant FILE = \\\"Pool\\\";\\n\\n    constructor(\\n        IDAO _dao,\\n        IERC20 _stakingToken,\\n        IERC20 _rewardsToken1,\\n        IERC20 _rewardsToken2\\n    ) public {\\n        _state.dao = _dao;\\n        _state.stakingToken = _stakingToken;\\n        _state.rewardsToken1 = _rewardsToken1;\\n        _state.rewardsToken2 = _rewardsToken2;\\n    }\\n\\n    event Deposit(address indexed account, uint256 value);\\n    event Withdraw(address indexed account, uint256 value);\\n    event Claim(address indexed account, address token, uint256 value);\\n    event Bond(address indexed account, uint256 start, uint256 value);\\n    event Unbond(address indexed account, uint256 start, uint256 value, uint256 newClaimable1, uint256 newClaimable2);\\n\\n    function deposit(uint256 value) external onlyFrozen(msg.sender) notPaused {\\n        stakingToken().transferFrom(msg.sender, address(this), value);\\n        incrementBalanceOfStaged(msg.sender, value);\\n\\n        emit Deposit(msg.sender, value);\\n    }\\n\\n    function withdraw(uint256 value) external onlyFrozen(msg.sender) validBalance {\\n        stakingToken().transfer(msg.sender, value);\\n        decrementBalanceOfStaged(msg.sender, value, \\\"Pool: insufficient staged balance\\\");\\n\\n        emit Withdraw(msg.sender, value);\\n    }\\n\\n    function bond(uint256 value) public validBalance {\\n        // QSD #B\\n        // Logic kicks in post bootstrapping epoch - 2\\n        // -2 to give 1 extra epoch time for ppl to bond\\n        if (epoch() > 2) {\\n            if (!bootstrappingAt(epoch().sub(2))) {\\n                Decimal.D256 memory price = oracleCapture();\\n                \\n                Require.that(price.lessThan(Decimal.one()), FILE, \\\"Cannot bond when price >1\\\");\\n            }\\n        }\\n\\n        _bond(value);\\n    }\\n\\n    function _bond(uint256 value) internal notPaused {\\n        unfreeze(msg.sender);\\n\\n        uint256 totalRewardedWithPhantom1 = totalRewarded1().add(totalPhantom1());\\n        uint256 newPhantom1 =\\n            totalBonded() == 0\\n                ? totalRewarded1() == 0 ? Constants.getInitialStakeMultiple().mul(value) : 0\\n                : totalRewardedWithPhantom1.mul(value).div(totalBonded());\\n\\n        uint256 totalRewardedWithPhantom2 = totalRewarded2().add(totalPhantom2());\\n        uint256 newPhantom2 =\\n            totalBonded() == 0\\n                ? totalRewarded2() == 0 ? Constants.getInitialStakeMultiple().mul(value) : 0\\n                : totalRewardedWithPhantom2.mul(value).div(totalBonded());\\n\\n        incrementBalanceOfBonded(msg.sender, value);\\n        incrementBalanceOfPhantom1(msg.sender, newPhantom1);\\n        incrementBalanceOfPhantom2(msg.sender, newPhantom2);\\n        decrementBalanceOfStaged(msg.sender, value, \\\"Pool: insufficient staged balance\\\");\\n\\n        emit Bond(msg.sender, epoch().add(1), value);\\n    }\\n\\n    // QSD #C.b\\n    function unbond(uint256 value) public validBalance {\\n        unfreeze(msg.sender);\\n\\n        uint256 balanceOfBonded = balanceOfBonded(msg.sender);\\n        Require.that(balanceOfBonded > 0, FILE, \\\"insufficient bonded balance\\\");\\n\\n        uint256 newClaimable1 = balanceOfRewarded1(msg.sender).mul(value).div(balanceOfBonded);\\n        uint256 newClaimable2 = balanceOfRewarded2(msg.sender).mul(value).div(balanceOfBonded);\\n\\n        uint256 lessPhantom1 = balanceOfPhantom1(msg.sender).mul(value).div(balanceOfBonded);\\n        uint256 lessPhantom2 = balanceOfPhantom2(msg.sender).mul(value).div(balanceOfBonded);\\n\\n        incrementBalanceOfStaged(msg.sender, value);\\n        incrementBalanceOfClaimable1(msg.sender, newClaimable1);\\n        incrementBalanceOfClaimable2(msg.sender, newClaimable2);\\n        decrementBalanceOfBonded(msg.sender, value, \\\"Pool: insufficient bonded balance\\\");\\n        decrementBalanceOfPhantom1(msg.sender, lessPhantom1, \\\"Pool: insufficient phantom1 balance\\\");\\n        decrementBalanceOfPhantom2(msg.sender, lessPhantom2, \\\"Pool: insufficient phantom2 balance\\\");\\n\\n        emit Unbond(msg.sender, epoch().add(1), value, newClaimable1, newClaimable2);\\n    }\\n\\n    // Function to allow users to move rewards to claimable\\n    // while twap is < 1\\n    function pokeRewards() external {\\n        uint256 balanceOfBonded = balanceOfBonded(msg.sender);\\n\\n        unbond(balanceOfBonded);\\n        _bond(balanceOfBonded);\\n    }\\n\\n    function claimAll() external {\\n        claim1(balanceOfClaimable1(msg.sender));\\n        claim2(balanceOfClaimable2(msg.sender));\\n    }\\n\\n    function claim1(uint256 value) public onlyFrozen(msg.sender) validBalance {\\n        rewardsToken1().transfer(msg.sender, value);\\n        decrementBalanceOfClaimable1(msg.sender, value, \\\"Pool: insufficient claimable balance\\\");\\n\\n        emit Claim(msg.sender, address(rewardsToken1()), value);\\n    }\\n\\n    function claim2(uint256 value) public onlyFrozen(msg.sender) validBalance {\\n        rewardsToken2().transfer(msg.sender, value);\\n        decrementBalanceOfClaimable2(msg.sender, value, \\\"Pool: insufficient claimable balance\\\");\\n\\n        emit Claim(msg.sender, address(rewardsToken2()), value);\\n    }\\n\\n    function emergencyWithdraw(address token, uint256 value) external onlyDao {\\n        IERC20(token).transfer(address(dao()), value);\\n    }\\n\\n    function emergencyPause() external onlyDao {\\n        pause();\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/external/Require.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2019 dYdX Trading Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.7;\\n\\n/**\\n * @title Require\\n * @author dYdX\\n *\\n * Stringifies parameters to pretty-print revert messages. Costs more gas than regular require()\\n */\\nlibrary Require {\\n\\n    // ============ Constants ============\\n\\n    uint256 constant ASCII_ZERO = 48; // '0'\\n    uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10\\n    uint256 constant ASCII_LOWER_EX = 120; // 'x'\\n    bytes2 constant COLON = 0x3a20; // ': '\\n    bytes2 constant COMMA = 0x2c20; // ', '\\n    bytes2 constant LPAREN = 0x203c; // ' <'\\n    byte constant RPAREN = 0x3e; // '>'\\n    uint256 constant FOUR_BIT_MASK = 0xf;\\n\\n    // ============ Library Functions ============\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        uint256 payloadA\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        uint256 payloadA,\\n        uint256 payloadB\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        COMMA,\\n                        stringify(payloadB),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        address payloadA\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        address payloadA,\\n        uint256 payloadB\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        COMMA,\\n                        stringify(payloadB),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        address payloadA,\\n        uint256 payloadB,\\n        uint256 payloadC\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        COMMA,\\n                        stringify(payloadB),\\n                        COMMA,\\n                        stringify(payloadC),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        bytes32 payloadA\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        bytes32 payloadA,\\n        uint256 payloadB,\\n        uint256 payloadC\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        COMMA,\\n                        stringify(payloadB),\\n                        COMMA,\\n                        stringify(payloadC),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    // ============ Private Functions ============\\n\\n    function stringifyTruncated(\\n        bytes32 input\\n    )\\n    private\\n    pure\\n    returns (bytes memory)\\n    {\\n        // put the input bytes into the result\\n        bytes memory result = abi.encodePacked(input);\\n\\n        // determine the length of the input by finding the location of the last non-zero byte\\n        for (uint256 i = 32; i > 0; ) {\\n            // reverse-for-loops with unsigned integer\\n            /* solium-disable-next-line security/no-modify-for-iter-var */\\n            i--;\\n\\n            // find the last non-zero byte in order to determine the length\\n            if (result[i] != 0) {\\n                uint256 length = i + 1;\\n\\n                /* solium-disable-next-line security/no-inline-assembly */\\n                assembly {\\n                    mstore(result, length) // r.length = length;\\n                }\\n\\n                return result;\\n            }\\n        }\\n\\n        // all bytes are zero\\n        return new bytes(0);\\n    }\\n\\n    function stringify(\\n        uint256 input\\n    )\\n    private\\n    pure\\n    returns (bytes memory)\\n    {\\n        if (input == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        // get the final string length\\n        uint256 j = input;\\n        uint256 length;\\n        while (j != 0) {\\n            length++;\\n            j /= 10;\\n        }\\n\\n        // allocate the string\\n        bytes memory bstr = new bytes(length);\\n\\n        // populate the string starting with the least-significant character\\n        j = input;\\n        for (uint256 i = length; i > 0; ) {\\n            // reverse-for-loops with unsigned integer\\n            /* solium-disable-next-line security/no-modify-for-iter-var */\\n            i--;\\n\\n            // take last decimal digit\\n            bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));\\n\\n            // remove the last decimal digit\\n            j /= 10;\\n        }\\n\\n        return bstr;\\n    }\\n\\n    function stringify(\\n        address input\\n    )\\n    private\\n    pure\\n    returns (bytes memory)\\n    {\\n        uint256 z = uint256(input);\\n\\n        // addresses are \\\"0x\\\" followed by 20 bytes of data which take up 2 characters each\\n        bytes memory result = new bytes(42);\\n\\n        // populate the result with \\\"0x\\\"\\n        result[0] = byte(uint8(ASCII_ZERO));\\n        result[1] = byte(uint8(ASCII_LOWER_EX));\\n\\n        // for each byte (starting from the lowest byte), populate the result with two characters\\n        for (uint256 i = 0; i < 20; i++) {\\n            // each byte takes two characters\\n            uint256 shift = i * 2;\\n\\n            // populate the least-significant character\\n            result[41 - shift] = char(z & FOUR_BIT_MASK);\\n            z = z >> 4;\\n\\n            // populate the most-significant character\\n            result[40 - shift] = char(z & FOUR_BIT_MASK);\\n            z = z >> 4;\\n        }\\n\\n        return result;\\n    }\\n\\n    function stringify(\\n        bytes32 input\\n    )\\n    private\\n    pure\\n    returns (bytes memory)\\n    {\\n        uint256 z = uint256(input);\\n\\n        // bytes32 are \\\"0x\\\" followed by 32 bytes of data which take up 2 characters each\\n        bytes memory result = new bytes(66);\\n\\n        // populate the result with \\\"0x\\\"\\n        result[0] = byte(uint8(ASCII_ZERO));\\n        result[1] = byte(uint8(ASCII_LOWER_EX));\\n\\n        // for each byte (starting from the lowest byte), populate the result with two characters\\n        for (uint256 i = 0; i < 32; i++) {\\n            // each byte takes two characters\\n            uint256 shift = i * 2;\\n\\n            // populate the least-significant character\\n            result[65 - shift] = char(z & FOUR_BIT_MASK);\\n            z = z >> 4;\\n\\n            // populate the most-significant character\\n            result[64 - shift] = char(z & FOUR_BIT_MASK);\\n            z = z >> 4;\\n        }\\n\\n        return result;\\n    }\\n\\n    function char(\\n        uint256 input\\n    )\\n    private\\n    pure\\n    returns (byte)\\n    {\\n        // return ASCII digit (0-9)\\n        if (input < 10) {\\n            return byte(uint8(input + ASCII_ZERO));\\n        }\\n\\n        // return ASCII letter (a-f)\\n        return byte(uint8(input + ASCII_RELATIVE_ZERO));\\n    }\\n}\"\r\n    },\r\n    \"./contracts/external/Decimal.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2019 dYdX Trading Inc.\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Decimal\\n * @author dYdX\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Static Functions ============\\n\\n    function zero()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: 0 });\\n    }\\n\\n    function one()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function from(\\n        uint256 a\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: a.mul(BASE) });\\n    }\\n\\n    function ratio(\\n        uint256 a,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(a, BASE, b) });\\n    }\\n\\n    // ============ Self Functions ============\\n\\n    function add(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.mul(b) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.div(b) });\\n    }\\n\\n    function pow(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        if (b == 0) {\\n            return from(1);\\n        }\\n\\n        D256 memory temp = D256({ value: self.value });\\n        for (uint256 i = 1; i < b; i++) {\\n            temp = mul(temp, self);\\n        }\\n\\n        return temp;\\n    }\\n\\n    function add(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value, reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\n    }\\n\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return self.value == b.value;\\n    }\\n\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 2;\\n    }\\n\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 0;\\n    }\\n\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) > 0;\\n    }\\n\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) < 2;\\n    }\\n\\n    function isZero(D256 memory self) internal pure returns (bool) {\\n        return self.value == 0;\\n    }\\n\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\n        return self.value.div(BASE);\\n    }\\n\\n    // ============ Core Methods ============\\n\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function compareTo(\\n        D256 memory a,\\n        D256 memory b\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        if (a.value == b.value) {\\n            return 1;\\n        }\\n        return a.value > b.value ? 2 : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/Constants.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./external/Decimal.sol\\\";\\n\\nlibrary Constants {\\n    /* Chain */\\n    uint256 private constant CHAIN_ID = 1; // Mainnet\\n\\n    /* Bootstrapping */\\n    // QSD #3\\n    uint256 private constant BOOTSTRAPPING_PERIOD = 72;\\n    uint256 private constant BOOTSTRAPPING_PRICE = 11e17; // 1.10 DAI\\n\\n    /* Oracle */\\n    address private constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n    uint256 private constant ORACLE_RESERVE_MINIMUM = 10000e18; // 10,000 DAI\\n\\n    /* Bonding */\\n    uint256 private constant INITIAL_STAKE_MULTIPLE = 1e6; // 100 ESD -> 100M ESDS\\n\\n    /* Epoch */\\n    struct EpochStrategy {\\n        uint256 offset;\\n        uint256 start;\\n        uint256 period;\\n    }\\n\\n    uint256 private constant PREVIOUS_EPOCH_OFFSET = 0;\\n    uint256 private constant PREVIOUS_EPOCH_START = 0;\\n    uint256 private constant PREVIOUS_EPOCH_PERIOD = 0;\\n\\n    // QSD #1\\n    uint256 private constant CURRENT_EPOCH_OFFSET = 0;\\n    uint256 private constant CURRENT_EPOCH_START =  1612008000;// 2020/01/30 12:00 UTC;\\n    uint256 private constant CURRENT_EPOCH_PERIOD = 14400; // 4 hours\\n\\n    /* Governance */\\n    // QSD #C.a\\n    uint256 private constant GOVERNANCE_MAX_SUPPLY = 999999999e18; // 999,999,999\\n    uint256 private constant GOVERNANCE_DISTRIBUTED_PER_BLOCK = 9e16; // 0.09\\n\\n    // QSD #C.g\\n    uint256 private constant GOVERNANCE_PERIOD = 9; // 9 epochs\\n    uint256 private constant GOVERNANCE_EXPIRATION = 2; // 2 + 1 epochs\\n    uint256 private constant GOVERNANCE_QUORUM = 33e16; // 33%\\n    uint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 9e15; // 0.5%\\n    uint256 private constant GOVERNANCE_SUPER_MAJORITY = 66e16; // 66%\\n    uint256 private constant GOVERNANCE_EMERGENCY_DELAY = 6; // 6 epochs\\n\\n    /* DAO */\\n    uint256 private constant ADVANCE_INCENTIVE = 1e20; // 100 ESD    \\n    uint256 private constant DAO_EXIT_LOCKUP_EPOCHS = 1; // 1 epochs fluid\\n\\n    /* Pool */\\n    // QSD #9\\n    uint256 private constant POOL_EXIT_LOCKUP_EPOCHS = 1; // 1 epochs fluid\\n\\n    /* Market */\\n    uint256 private constant DEBT_RATIO_CAP = 15e16; // 15%\\n\\n    /* Regulator (post-bootstrap) */\\n    // QSD #2\\n    uint256 private constant SUPPLY_CHANGE_LIMIT = 54e15; // 5.4% Expansion/Contraction limit\\n    uint256 private constant POOL_BONDING_RATIO = 67; // 67%\\n    uint256 private constant POOL_LP_RATIO = 23; // 23%\\n    uint256 private constant TREASURY_RATIO = 5; // 5%\\n    uint256 private constant GOV_STAKING_RATIO = 5; // 5%\\n\\n    /* External */\\n    address private constant TREASURY_ADDRESS = address(0x61c32f08B0cbe61feF4166f09363504b4b5F38d8);\\n\\n    /**\\n     * Getters\\n     */\\n\\n    function getDaiAddress() internal pure returns (address) {\\n        return DAI;\\n    }\\n\\n    function getOracleReserveMinimum() internal pure returns (uint256) {\\n        return ORACLE_RESERVE_MINIMUM;\\n    }\\n\\n    function getPreviousEpochStrategy() internal pure returns (EpochStrategy memory) {\\n        return EpochStrategy({\\n            offset: PREVIOUS_EPOCH_OFFSET,\\n            start: PREVIOUS_EPOCH_START,\\n            period: PREVIOUS_EPOCH_PERIOD\\n        });\\n    }\\n\\n    function getCurrentEpochStrategy() internal pure returns (EpochStrategy memory) {\\n        return EpochStrategy({\\n            offset: CURRENT_EPOCH_OFFSET,\\n            start: CURRENT_EPOCH_START,\\n            period: CURRENT_EPOCH_PERIOD\\n        });\\n    }\\n\\n    function getInitialStakeMultiple() internal pure returns (uint256) {\\n        return INITIAL_STAKE_MULTIPLE;\\n    }\\n\\n    function getBootstrappingPeriod() internal pure returns (uint256) {\\n        return BOOTSTRAPPING_PERIOD;\\n    }\\n\\n    function getBootstrappingPrice() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: BOOTSTRAPPING_PRICE});\\n    }\\n\\n    function getGovernancePeriod() internal pure returns (uint256) {\\n        return GOVERNANCE_PERIOD;\\n    }\\n\\n    function getGovernanceExpiration() internal pure returns (uint256) {\\n        return GOVERNANCE_EXPIRATION;\\n    }\\n\\n    function getGovernanceQuorum() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_QUORUM});\\n    }\\n\\n    function getGovernanceProposalThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PROPOSAL_THRESHOLD});\\n    }\\n\\n    function getGovernanceSuperMajority() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_SUPER_MAJORITY});\\n    }\\n\\n    function getGovernanceEmergencyDelay() internal pure returns (uint256) {\\n        return GOVERNANCE_EMERGENCY_DELAY;\\n    }\\n\\n    function getAdvanceIncentive() internal pure returns (uint256) {\\n        return ADVANCE_INCENTIVE;\\n    }\\n\\n    function getDAOExitLockupEpochs() internal pure returns (uint256) {\\n        return DAO_EXIT_LOCKUP_EPOCHS;\\n    }\\n\\n    function getPoolExitLockupEpochs() internal pure returns (uint256) {\\n        return POOL_EXIT_LOCKUP_EPOCHS;\\n    }\\n    \\n    function getDebtRatioCap() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: DEBT_RATIO_CAP});\\n    }\\n\\n    function getSupplyChangeLimit() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: SUPPLY_CHANGE_LIMIT});\\n    }\\n\\n    function getPoolLPRatio() internal pure returns (uint256) {\\n        return POOL_LP_RATIO;\\n    }\\n\\n    function getPoolBondingRatio() internal pure returns (uint256) {\\n        return POOL_BONDING_RATIO;\\n    }\\n\\n    function getGovStakingRatio() internal pure returns (uint256) {\\n        return GOV_STAKING_RATIO;\\n    }\\n\\n    function getTreasuryRatio() internal pure returns (uint256) {\\n        return TREASURY_RATIO;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        return CHAIN_ID;\\n    }\\n\\n    function getTreasuryAddress() internal pure returns (address) {\\n        return TREASURY_ADDRESS;\\n    }\\n\\n    function getGovernanceTokenMaxSupply() internal pure returns (uint256) {\\n        return GOVERNANCE_MAX_SUPPLY;\\n    }\\n\\n    function getGovernanceTokenPerBlock() internal pure returns (uint256) {\\n        return GOVERNANCE_DISTRIBUTED_PER_BLOCK;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/pool-bonding/Permission.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./State.sol\\\";\\nimport \\\"./Getters.sol\\\";\\nimport \\\"../../external/Require.sol\\\";\\n\\ncontract Permission is State, Getters {\\n    bytes32 private constant FILE = \\\"Permission\\\";\\n\\n    modifier onlyFrozen(address account) {\\n        Require.that(\\n            statusOf(account) == Account.Status.Frozen,\\n            FILE,\\n            \\\"Not frozen\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier onlyDao() {\\n        Require.that(\\n            msg.sender == address(dao()),\\n            FILE,\\n            \\\"Not dao\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        Require.that(\\n            !paused(),\\n            FILE,\\n            \\\"Paused\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier validBalance() {\\n        _;\\n\\n        Require.that(\\n            stakingToken().balanceOf(address(this)) >= totalStaged().add(totalBonded()),\\n            FILE,\\n            \\\"Inconsistent balances\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/pool-bonding/State.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../token/IDollar.sol\\\";\\nimport \\\"../IDAO.sol\\\";\\n\\ncontract Account {\\n    enum Status {\\n        Frozen,\\n        Fluid,\\n        Locked\\n    }\\n\\n    struct State {\\n        uint256 staged;\\n        uint256 claimable1;\\n        uint256 claimable2;\\n        uint256 bonded;\\n        uint256 phantom1;\\n        uint256 phantom2;\\n        uint256 fluidUntil;\\n    }\\n}\\n\\ncontract Storage {\\n    struct Balance {\\n        uint256 staged;\\n        uint256 claimable1;\\n        uint256 claimable2;\\n        uint256 bonded;\\n        uint256 phantom1;\\n        uint256 phantom2;\\n    }\\n\\n    struct State {\\n        IDAO dao;\\n\\n        IERC20 stakingToken;\\n        IERC20 rewardsToken1;\\n        IERC20 rewardsToken2;\\n\\n        Balance balance;\\n        bool paused;\\n\\n        mapping(address => Account.State) accounts;\\n    }\\n}\\n\\ncontract State {\\n    Storage.State _state;\\n}\\n\"\r\n    },\r\n    \"./contracts/token/IDollar.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract IDollar is IERC20 {\\n    function burn(uint256 amount) public;\\n    function burnFrom(address account, uint256 amount) public;\\n    function mint(address account, uint256 amount) public returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/IDAO.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"../external/Decimal.sol\\\";\\n\\ncontract IDAO {\\n    function epoch() external view returns (uint256);\\n    function oracle() external view returns (IOracle);\\n    function bootstrappingAt(uint256) external view returns (bool);\\n    function oracleCaptureP() public returns (Decimal.D256 memory);\\n}\"\r\n    },\r\n    \"./contracts/oracle/IOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../external/Decimal.sol\\\";\\n\\ncontract IOracle {\\n    function setup() public;\\n    function capture() public returns (Decimal.D256 memory, bool);\\n    function pair() external view returns (address);\\n}\"\r\n    },\r\n    \"./contracts/oracle/pool-bonding/Getters.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../IDAO.sol\\\";\\nimport \\\"../../external/Decimal.sol\\\";\\nimport \\\"./State.sol\\\";\\nimport \\\"../../Constants.sol\\\";\\n\\ncontract Getters is State {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Global\\n     */\\n\\n    function dai() public view returns (address) {\\n        return Constants.getDaiAddress();\\n    }\\n\\n    function dao() public view returns (IDAO) {\\n        return _state.dao;\\n    }\\n\\n    function totalBonded() public view returns (uint256) {\\n        return _state.balance.bonded;\\n    }\\n\\n    function totalStaged() public view returns (uint256) {\\n        return _state.balance.staged;\\n    }\\n\\n    function totalClaimable1() public view returns (uint256) {\\n        return _state.balance.claimable1;\\n    }\\n\\n    function totalClaimable2() public view returns (uint256) {\\n        return _state.balance.claimable2;\\n    }\\n\\n    function totalPhantom1() public view returns (uint256) {\\n        return _state.balance.phantom1;\\n    }\\n\\n    function totalPhantom2() public view returns (uint256) {\\n        return _state.balance.phantom2;\\n    }\\n\\n    function totalRewarded1() public view returns (uint256) {\\n        // If staking token and rewards token are the same\\n        if (stakingToken() == rewardsToken1()) {\\n            return\\n                rewardsToken1().balanceOf(address(this)).sub(totalClaimable1()).sub(totalBonded()).sub(totalStaged());\\n        }\\n\\n        return rewardsToken1().balanceOf(address(this)).sub(totalClaimable1());\\n    }\\n\\n    function totalRewarded2() public view returns (uint256) {\\n        // If staking token and rewards token are the same\\n        if (stakingToken() == rewardsToken2()) {\\n            return\\n                rewardsToken2().balanceOf(address(this)).sub(totalClaimable2()).sub(totalBonded()).sub(totalStaged());\\n        }\\n\\n        return rewardsToken2().balanceOf(address(this)).sub(totalClaimable2());\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _state.paused;\\n    }\\n\\n    /**\\n     * Account\\n     */\\n\\n    function balanceOfStaged(address account) public view returns (uint256) {\\n        return _state.accounts[account].staged;\\n    }\\n\\n    function balanceOfClaimable1(address account) public view returns (uint256) {\\n        return _state.accounts[account].claimable1;\\n    }\\n\\n    function balanceOfClaimable2(address account) public view returns (uint256) {\\n        return _state.accounts[account].claimable2;\\n    }\\n\\n    function balanceOfBonded(address account) public view returns (uint256) {\\n        return _state.accounts[account].bonded;\\n    }\\n\\n    function balanceOfPhantom1(address account) public view returns (uint256) {\\n        return _state.accounts[account].phantom1;\\n    }\\n\\n    function balanceOfPhantom2(address account) public view returns (uint256) {\\n        return _state.accounts[account].phantom2;\\n    }\\n\\n    function balanceOfRewarded1(address account) public view returns (uint256) {\\n        uint256 totalBonded = totalBonded();\\n        if (totalBonded == 0) {\\n            return 0;\\n        }\\n\\n        uint256 totalRewardedWithPhantom = totalRewarded1().add(totalPhantom1());\\n        uint256 balanceOfRewardedWithPhantom = totalRewardedWithPhantom.mul(balanceOfBonded(account)).div(totalBonded);\\n\\n        uint256 balanceOfPhantom = balanceOfPhantom1(account);\\n        if (balanceOfRewardedWithPhantom > balanceOfPhantom) {\\n            return balanceOfRewardedWithPhantom.sub(balanceOfPhantom);\\n        }\\n        return 0;\\n    }\\n\\n    function balanceOfRewarded2(address account) public view returns (uint256) {\\n        uint256 totalBonded = totalBonded();\\n        if (totalBonded == 0) {\\n            return 0;\\n        }\\n\\n        uint256 totalRewardedWithPhantom = totalRewarded2().add(totalPhantom2());\\n        uint256 balanceOfRewardedWithPhantom = totalRewardedWithPhantom.mul(balanceOfBonded(account)).div(totalBonded);\\n\\n        uint256 balanceOfPhantom = balanceOfPhantom2(account);\\n        if (balanceOfRewardedWithPhantom > balanceOfPhantom) {\\n            return balanceOfRewardedWithPhantom.sub(balanceOfPhantom);\\n        }\\n        return 0;\\n    }\\n\\n    function statusOf(address account) public view returns (Account.Status) {\\n        return epoch() >= _state.accounts[account].fluidUntil ? Account.Status.Frozen : Account.Status.Fluid;\\n    }\\n\\n    /**\\n     * Epoch\\n     */\\n\\n    function epoch() internal view returns (uint256) {\\n        return dao().epoch();\\n    }\\n\\n    function bootstrappingAt(uint256 epoch) internal returns (bool) {\\n        return dao().bootstrappingAt(epoch);\\n    }\\n\\n    function oracleCapture() internal returns (Decimal.D256 memory) {\\n        return dao().oracleCaptureP();\\n    }\\n\\n    /**\\n     * Staking Rewards\\n     */\\n\\n    function stakingToken() public view returns (IERC20) {\\n        return _state.stakingToken;\\n    }\\n\\n    function rewardsToken1() public view returns (IERC20) {\\n        return _state.rewardsToken1;\\n    }\\n\\n    function rewardsToken2() public view returns (IERC20) {\\n        return _state.rewardsToken2;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/pool-bonding/Setters.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./State.sol\\\";\\nimport \\\"./Getters.sol\\\";\\n\\ncontract Setters is State, Getters {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Global\\n     */\\n\\n    function pause() internal {\\n        _state.paused = true;\\n    }\\n\\n    /**\\n     * Account\\n     */\\n\\n    function incrementBalanceOfBonded(address account, uint256 amount) internal {\\n        _state.accounts[account].bonded = _state.accounts[account].bonded.add(amount);\\n        _state.balance.bonded = _state.balance.bonded.add(amount);\\n    }\\n\\n    function decrementBalanceOfBonded(\\n        address account,\\n        uint256 amount,\\n        string memory reason\\n    ) internal {\\n        _state.accounts[account].bonded = _state.accounts[account].bonded.sub(amount, reason);\\n        _state.balance.bonded = _state.balance.bonded.sub(amount, reason);\\n    }\\n\\n    function incrementBalanceOfStaged(address account, uint256 amount) internal {\\n        _state.accounts[account].staged = _state.accounts[account].staged.add(amount);\\n        _state.balance.staged = _state.balance.staged.add(amount);\\n    }\\n\\n    function decrementBalanceOfStaged(\\n        address account,\\n        uint256 amount,\\n        string memory reason\\n    ) internal {\\n        _state.accounts[account].staged = _state.accounts[account].staged.sub(amount, reason);\\n        _state.balance.staged = _state.balance.staged.sub(amount, reason);\\n    }\\n\\n    function incrementBalanceOfClaimable1(address account, uint256 amount) internal {\\n        _state.accounts[account].claimable1 = _state.accounts[account].claimable1.add(amount);\\n        _state.balance.claimable1 = _state.balance.claimable1.add(amount);\\n    }\\n\\n    function incrementBalanceOfClaimable2(address account, uint256 amount) internal {\\n        _state.accounts[account].claimable2 = _state.accounts[account].claimable2.add(amount);\\n        _state.balance.claimable2 = _state.balance.claimable2.add(amount);\\n    }\\n\\n    function decrementBalanceOfClaimable1(\\n        address account,\\n        uint256 amount,\\n        string memory reason\\n    ) internal {\\n        _state.accounts[account].claimable1 = _state.accounts[account].claimable1.sub(amount, reason);\\n        _state.balance.claimable1 = _state.balance.claimable1.sub(amount, reason);\\n    }\\n\\n    function decrementBalanceOfClaimable2(\\n        address account,\\n        uint256 amount,\\n        string memory reason\\n    ) internal {\\n        _state.accounts[account].claimable2 = _state.accounts[account].claimable2.sub(amount, reason);\\n        _state.balance.claimable2 = _state.balance.claimable2.sub(amount, reason);\\n    }\\n\\n    function incrementBalanceOfPhantom1(address account, uint256 amount) internal {\\n        _state.accounts[account].phantom1 = _state.accounts[account].phantom1.add(amount);\\n        _state.balance.phantom1 = _state.balance.phantom1.add(amount);\\n    }\\n\\n    function incrementBalanceOfPhantom2(address account, uint256 amount) internal {\\n        _state.accounts[account].phantom2 = _state.accounts[account].phantom2.add(amount);\\n        _state.balance.phantom2 = _state.balance.phantom2.add(amount);\\n    }\\n\\n    function decrementBalanceOfPhantom1(\\n        address account,\\n        uint256 amount,\\n        string memory reason\\n    ) internal {\\n        _state.accounts[account].phantom1 = _state.accounts[account].phantom1.sub(amount, reason);\\n        _state.balance.phantom1 = _state.balance.phantom1.sub(amount, reason);\\n    }\\n\\n    function decrementBalanceOfPhantom2(\\n        address account,\\n        uint256 amount,\\n        string memory reason\\n    ) internal {\\n        _state.accounts[account].phantom2 = _state.accounts[account].phantom2.sub(amount, reason);\\n        _state.balance.phantom2 = _state.balance.phantom2.sub(amount, reason);\\n    }\\n\\n    function unfreeze(address account) internal {\\n        _state.accounts[account].fluidUntil = epoch().add(Constants.getPoolExitLockupEpochs());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClaimable1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClaimable2\",\"type\":\"uint256\"}],\"name\":\"Unbond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfClaimable1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfClaimable2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfPhantom1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfPhantom2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfRewarded1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfRewarded2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfStaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claim1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claim2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pokeRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"statusOf\",\"outputs\":[{\"internalType\":\"enum Account.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimable1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimable2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPhantom1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPhantom2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewarded1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewarded2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolBonding","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cbde11f6781ad278b32c89e585f78835f4807788000000000000000000000000fb2ad1564b78edaf5747163a76bec57e6ccbc549000000000000000000000000fb2ad1564b78edaf5747163a76bec57e6ccbc54900000000000000000000000026694da424193628ddda7e2a43eb44d0275f1164","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}