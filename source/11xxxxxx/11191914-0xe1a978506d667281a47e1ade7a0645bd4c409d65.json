{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"AmericanVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Developed by Pironmind\\r\\n// https://t.me/pironmind\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IVotes.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IRandom.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title AmericanVotes\\r\\n * @dev Implements voting process along with vote delegation\\r\\n */\\r\\ncontract AmericanVotes is IVotes, Ownable, ReentrancyGuard {\\r\\n    using Address for *;\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    event EthereumDeposited(address voter, uint256 amount);\\r\\n    event LuckyBonusClaimed(address lacky, uint256 amount);\\r\\n    event TeamRewardClaimed(address teammate, uint256 amount);\\r\\n    event EthereumWithdrawn(address resipient, uint256 amount);\\r\\n    event DemocratsWon(bool x);\\r\\n\\r\\n    enum Consignmen { NONE, REPUBLICANS, DEMOCRATS }\\r\\n    enum State { NONE, CHANGE }\\r\\n\\r\\n    struct Voter {\\r\\n        uint weight; // balance\\r\\n        uint balance;\\r\\n        bool voted;  // if true, that person already voted\\r\\n        Consignmen voteType;\\r\\n        State state;\\r\\n        bool credited;\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        uint voteCount; // number of accumulated votes\\r\\n        uint voteWeight;\\r\\n        uint weightRepublicans;\\r\\n        uint weightDemocrats;\\r\\n        uint forRepublicans;\\r\\n        uint forDemocrats;\\r\\n        uint startDate;\\r\\n        uint endDate;\\r\\n        Consignmen winner;\\r\\n    }\\r\\n\\r\\n    Proposal public proposal;\\r\\n\\r\\n    mapping(address =\\u003e Voter) public voters;\\r\\n\\r\\n    address[] public votersList;\\r\\n\\r\\n    uint256 private _minimumDeposit;\\r\\n\\r\\n    uint256 public serviceFee;\\r\\n\\r\\n    uint256 public luckyFee;\\r\\n\\r\\n    mapping (address =\\u003e uint) public balances;\\r\\n\\r\\n    address public teamWallet;\\r\\n    IRandom public randomOracle;\\r\\n    address public luckyAddress = address(0);\\r\\n\\r\\n    /*\\r\\n     * @dev Create a new ballot to choose one of \\u0027proposalNames\\u0027.\\r\\n     * @param proposalNames names of proposals\\r\\n     */\\r\\n    constructor(address _teamWallet, address _randomOracle, uint startDate, uint endDate) {\\r\\n        teamWallet = _teamWallet;\\r\\n        randomOracle = IRandom(_randomOracle);\\r\\n        proposal.startDate = startDate;\\r\\n        proposal.endDate = endDate;\\r\\n        serviceFee = 20; // %\\r\\n        luckyFee = 5; // %\\r\\n        _minimumDeposit = 1e17;\\r\\n    }\\r\\n\\r\\n    // @dev How much lucky guy get in random\\r\\n    function luckyBonus() public view returns (uint256) {\\r\\n        return balances[address(0)];\\r\\n    }\\r\\n\\r\\n    // @dev How much team get if anything will be okey\\r\\n    function teamReward() public view returns (uint256) {\\r\\n        return balances[teamWallet];\\r\\n    }\\r\\n\\r\\n    function isVoted(address _who) public override view returns (bool) {\\r\\n        return voters[_who].voted;\\r\\n    }\\r\\n\\r\\n\\r\\n    function totalVotes() public override view returns (uint) {\\r\\n        return proposal.voteCount;\\r\\n    }\\r\\n\\r\\n    function totalWeight() public override view returns (uint) {\\r\\n        return proposal.voteWeight;\\r\\n    }\\r\\n\\r\\n    function minimumDeposit() public view returns (uint) {\\r\\n        return _minimumDeposit;\\r\\n    }\\r\\n\\r\\n    // @dev _amount (wei)\\r\\n    function setMinimumDeposit(uint256 _amount) external onlyOwner {\\r\\n        require(_amount \\u003e 0, \\\"Must be more then 0\\\");\\r\\n\\r\\n        _minimumDeposit = _amount;\\r\\n    }\\r\\n\\r\\n    function _deposit() internal /*override*/ /*payable*/ /*nonReentrant*/ {\\r\\n        require(!Address.isContract(msg.sender), \\\"Contract deposit not accepted\\\");\\r\\n        require(msg.value \\u003e= minimumDeposit(), \\\"Not enough balance for deposit\\\");\\r\\n\\r\\n        uint _serviceShare = msg.value.mul(serviceFee).div(100);\\r\\n        uint _luckyShare = msg.value.mul(luckyFee).div(100);\\r\\n        balances[address(teamWallet)] = balances[address(teamWallet)]\\r\\n            .add(_serviceShare.sub(_luckyShare));\\r\\n        balances[address(luckyAddress)] = balances[address(luckyAddress)]\\r\\n            .add(_luckyShare);\\r\\n\\r\\n        voters[msg.sender].balance = voters[msg.sender].balance.add(msg.value.sub(_serviceShare));\\r\\n\\r\\n        emit EthereumDeposited(msg.sender, msg.value.sub(_serviceShare));\\r\\n        emit EthereumDeposited(teamWallet, _serviceShare.sub(_luckyShare));\\r\\n        emit EthereumDeposited(luckyAddress, _luckyShare);\\r\\n    }\\r\\n\\r\\n    function withdraw() public override onlyAfter afterWinnerSet {\\r\\n\\r\\n        // team wallet withdraw\\r\\n        if (msg.sender == address(teamWallet)) {\\r\\n            uint amount = balances[address(teamWallet)];\\r\\n            balances[address(teamWallet)] = balances[address(teamWallet)].sub(amount);\\r\\n            balances[address(teamWallet)] = 0;\\r\\n            payable(msg.sender).transfer(amount);\\r\\n            emit TeamRewardClaimed(address(teamWallet), amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // lucky wallet withdraw\\r\\n        if (msg.sender == address(luckyAddress) \\u0026\\u0026 balances[address(luckyAddress)] \\u003e 0) {\\r\\n            uint amount = balances[address(luckyAddress)];\\r\\n            balances[address(luckyAddress)] = balances[address(luckyAddress)].sub(amount);\\r\\n            balances[address(luckyAddress)] = 0;\\r\\n            payable(msg.sender).transfer(amount);\\r\\n            emit LuckyBonusClaimed(address(luckyAddress), amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // count withdraw\\r\\n        require(!voters[msg.sender].credited, \\\"Balance counted\\\");\\r\\n        require(voters[msg.sender].voteType == proposal.winner, \\\"Only if winner\\\");\\r\\n\\r\\n        voters[msg.sender].credited = true;\\r\\n\\r\\n        uint weight = voters[msg.sender].weight;\\r\\n        uint share = _countShare(proposal.weightDemocrats, proposal.weightRepublicans, weight);\\r\\n\\r\\n        voters[msg.sender].weight = voters[msg.sender].weight.sub(weight, \\\"WSUB1\\\");\\r\\n        voters[msg.sender].balance = voters[msg.sender].balance.add(weight).add(share);\\r\\n\\r\\n        uint _amount = voters[msg.sender].balance;\\r\\n        voters[msg.sender].balance = voters[msg.sender].balance.sub(_amount, \\\"WSUB2\\\");\\r\\n\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        emit EthereumWithdrawn(address(msg.sender), _amount);\\r\\n    }\\r\\n\\r\\n    function voteForRepublicans() public override payable nonReentrant {\\r\\n        _deposit();\\r\\n        _vote(Consignmen.REPUBLICANS, msg.sender);\\r\\n    }\\r\\n\\r\\n    function voteForDemocrats() public override payable nonReentrant {\\r\\n        _deposit();\\r\\n        _vote(Consignmen.DEMOCRATS, msg.sender);\\r\\n    }\\r\\n\\r\\n    // after 1 month contract can be destroyed\\r\\n    function destroyIt() public override onlyOwner {\\r\\n        require(block.timestamp \\u003e proposal.endDate.add(31 * 1 days));\\r\\n        selfdestruct(msg.sender);\\r\\n    }\\r\\n\\r\\n    function democratsWon() public override onlyOwner onlyAfter winnerNotSet {\\r\\n        _setWinner(Consignmen.DEMOCRATS);\\r\\n        _selectLucky();\\r\\n        emit DemocratsWon(true);\\r\\n    }\\r\\n\\r\\n    function republicansWon() public override onlyOwner onlyAfter winnerNotSet {\\r\\n        _setWinner(Consignmen.REPUBLICANS);\\r\\n        _selectLucky();\\r\\n        emit DemocratsWon(false);\\r\\n    }\\r\\n\\r\\n    function _setWinner(Consignmen _winner) internal {\\r\\n        proposal.winner = _winner;\\r\\n    }\\r\\n\\r\\n    function _selectLucky() internal {\\r\\n        require(randomOracle.getNumber(0, uint(votersList.length).sub(1, \\\"SL1\\\")) \\u003e= 0, \\\"Oracle connected\\\");\\r\\n        uint luckyNum = randomOracle.getNumber(0, uint(votersList.length).sub(1, \\\"SL1\\\"));\\r\\n        luckyAddress = votersList[luckyNum];\\r\\n        uint luckyBank = balances[address(0)];\\r\\n        balances[address(0)] = balances[address(0)].sub(luckyBank);\\r\\n        balances[votersList[luckyNum]] = balances[votersList[luckyNum]].add(luckyBank);\\r\\n    }\\r\\n\\r\\n    function _vote(Consignmen _type, address voter)\\r\\n        internal\\r\\n        onlyDuring\\r\\n    {\\r\\n        Voter storage sender = voters[msg.sender];\\r\\n\\r\\n        if (sender.voteType != Consignmen.NONE) {\\r\\n            require(sender.voteType == _type, \\\"Only for one candidate\\\");\\r\\n        }\\r\\n\\r\\n        uint256 amount = sender.balance;\\r\\n        sender.balance = sender.balance.sub(amount);\\r\\n        sender.weight = sender.weight.add(amount);\\r\\n        sender.voteType = _type;\\r\\n\\r\\n        if (_type == Consignmen.DEMOCRATS) {\\r\\n            proposal.weightDemocrats = proposal.weightDemocrats.add(amount);\\r\\n        } else {\\r\\n            proposal.weightRepublicans = proposal.weightRepublicans.add(amount);\\r\\n        }\\r\\n\\r\\n        if (!sender.voted) {\\r\\n            proposal.voteCount++;\\r\\n            if (_type == Consignmen.DEMOCRATS) {\\r\\n                proposal.forDemocrats++;\\r\\n            } else {\\r\\n                proposal.forRepublicans++;\\r\\n            }\\r\\n            votersList.push(voter);\\r\\n        }\\r\\n\\r\\n        sender.voted = true;\\r\\n\\r\\n        proposal.voteWeight = proposal.voteWeight.add(amount);\\r\\n    }\\r\\n\\r\\n    function _countShare(uint256 share1, uint256 share2, uint256 userShare) public view returns(uint) {\\r\\n        if (proposal.winner == Consignmen.DEMOCRATS) {\\r\\n            return userShare.mul(share1).div(share2);\\r\\n        }\\r\\n        return userShare.mul(share2).div(share1);\\r\\n    }\\r\\n\\r\\n    modifier onlyDuring() {\\r\\n        require(\\r\\n            block.timestamp \\u003e= proposal.startDate \\u0026\\u0026\\r\\n            block.timestamp \\u003c= proposal.endDate,\\r\\n            \\\"Voting not has not started or just ended yet\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAfter() {\\r\\n        require(block.timestamp \\u003e proposal.endDate, \\\"Voting in progress\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier winnerNotSet() {\\r\\n        require(proposal.winner == Consignmen.NONE, \\\"Only if no winner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier afterWinnerSet() {\\r\\n        require(proposal.winner != Consignmen.NONE, \\\"Only after winner was set\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IRandom.sol\":{\"content\":\"pragma solidity ^0.7.4;\\n\\n/*\\n* @title IRandom contract interface.\\n*/\\ninterface IRandom {\\n    // @notice get random number between min max values\\n    function getNumber(uint min, uint max) external pure returns (uint256);\\n}\\n\"},\"IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\r\\n\\r\\n/*\\r\\n * @title IVotes\\r\\n */\\r\\ninterface IVotes {\\r\\n    function isVoted(address _who) external view returns (bool);\\r\\n\\r\\n    function totalVotes() external view returns (uint);\\r\\n\\r\\n    function totalWeight() external view returns (uint);\\r\\n\\r\\n//    function deposit() external payable;\\r\\n    function withdraw() external;\\r\\n\\r\\n    function voteForRepublicans() external payable;\\r\\n\\r\\n    function voteForDemocrats() external payable;\\r\\n\\r\\n    // after 1 month contract can be destroyed\\r\\n    function destroyIt() external;\\r\\n\\r\\n    function democratsWon() external;\\r\\n\\r\\n    function republicansWon() external;\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\n\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function allowed(address who) public view returns (bool) {\\n        return owner() == who;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n */\\ncontract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"x\",\"type\":\"bool\"}],\"name\":\"DemocratsWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthereumDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthereumWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lacky\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LuckyBonusClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teammate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TeamRewardClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userShare\",\"type\":\"uint256\"}],\"name\":\"_countShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"democratsWon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightRepublicans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightDemocrats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forRepublicans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forDemocrats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"enum AmericanVotes.Consignmen\",\"name\":\"winner\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomOracle\",\"outputs\":[{\"internalType\":\"contract IRandom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"republicansWon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteForDemocrats\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteForRepublicans\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"enum AmericanVotes.Consignmen\",\"name\":\"voteType\",\"type\":\"uint8\"},{\"internalType\":\"enum AmericanVotes.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"credited\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AmericanVotes","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000076b7cc020a2b4dcda9cd21cb48478501f69374f700000000000000000000000040d3ba5ff22cab2827ec730344b2f942d593e8160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005fa556e0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://368684b955396faa7bc97c8a86ac8ca3c37a8c67955c1dd77a956a70c7aa9ad8"}]}