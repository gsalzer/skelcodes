{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract ITACData {\r\n     function balanceOf(address account) public virtual view returns (uint256);\r\n     function transfer(address recipient, uint256 amount) public virtual returns (bool);\r\n}\r\n\r\nabstract contract ICoopData {\r\n    function getUser(address _address) public virtual view returns(address userAddress, string memory displayName, uint16 locationCode,\r\n    uint16 dojangCode, bool isMale, uint16 weight, string memory notes, uint8 numTickets, uint64[] memory matches, string memory imageURL, uint16 role);\r\n    function getMatch(uint64 _id) public virtual view returns(uint64 id, address winner, uint8 winnerPoints,\r\n    address loser, uint8 loserPoints, uint64 time, string memory notes, address referee);\r\n    function getUserMatchNumber(address _address) public virtual view returns (uint256);\r\n}\r\n\r\nabstract contract ITACLockup {\r\n     function getTACLocked(address user) public virtual view returns (uint256 lockedAmount);\r\n}\r\n\r\n //Control who can access various functions.\r\ncontract AccessControl {\r\n   address payable public creatorAddress;\r\n   \r\n   modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress, \"You are not the creator of the contract.\");\r\n        _;\r\n    }\r\n\r\n   // Constructor\r\n    constructor() public {\r\n        creatorAddress = 0x813dd04A76A716634968822f4D30Dfe359641194;\r\n    }\r\n}\r\n\r\n\r\ncontract TACVoting is AccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    /////////////////////////////////////////////////DATA STRUCTURES AND GLOBAL VARIABLES ///////////////////////////////////////////////////////////////////////\r\n    uint256 public numElections = 0;\r\n\r\n    //How long to open an election for\r\n    uint64 public electionDuration = 604800;\r\n\r\n    //The oldest any match can be to still compete. maxMatchAge of 0 means all matches are valid.\r\n    uint64 public maxMatchAge = 0;\r\n    \r\n    uint256 public defaultVotes = 100000000000000000000;\r\n\r\n    //Main data structure to hold info about a vote\r\n    struct Vote {\r\n        address voter; //since the address is unique this also serves as their id\r\n        uint64 choice;\r\n    }\r\n\r\n    //Data structure that holds inforamtion about one of the options for the election.\r\n    struct Option {\r\n        uint64 matchId;\r\n        string videoURL;\r\n        string description;\r\n        address bluePlayer;\r\n    }\r\n\r\n    //Data structure storing the information about each election.\r\n    struct Election {\r\n        uint64 id;\r\n        bool isLive;\r\n        uint64 startTime;\r\n        mapping (address => uint16) voteId; //which choice each address selected.\r\n        uint64 winningMatch;\r\n    }\r\n\r\n    mapping(uint64 => Option[]) optionsPerElection;\r\n    mapping(uint64 => Vote[]) votesPerElection;\r\n\r\n    //Payout percentages of the contract balance for each winning video. The number is divided 100, so each athlete received 20% of the pot.\r\n    uint8 payoutDivisor = 5;\r\n   \r\n    address public TACContract = 0xABa8ace37f301E7a3A3FaD44682C8Ec8DC2BD18A;\r\n    address public TACLockupContract = 0xbE6492206f460136921308c80D390c3D1D3f1716;\r\n    address public coopDataContract = 0x4E81fc0Eeef51c516773Eb6b6Ec05c452B0c8F5f;\r\n    \r\n    //Main mapping storing an Election record for each election id.\r\n    Election[] Elections;\r\n\r\n    //Once you've won, the same match cannot be entered again.\r\n    mapping(uint64 => bool) public allWinners;\r\n\r\n    //Total number of votes each match has received. Reset after counting votes\r\n    mapping (uint64 => uint256) public voteTotals;\r\n\r\n    //Shows which match is currently in which election.\r\n    mapping(uint64 => uint64) public MatchElections;\r\n\r\n  /////////////////////////////////////////////////CONTRACT ADMIN FUNCTIONS ///////////////////////////////////////////////////////////////////////\r\n    function setParameters(uint8 _payoutDivisor, uint64 _electionDuration, uint64 _maxMatchAge, uint256 _defaultVotes) public onlyCREATOR {\r\n        payoutDivisor = _payoutDivisor;\r\n        electionDuration = _electionDuration;\r\n        maxMatchAge = _maxMatchAge;\r\n        defaultVotes = _defaultVotes;\r\n    }\r\n\r\n    function setAddresss(address _TACContract, address _TACLockupContract, address _coopDataContract) public onlyCREATOR {\r\n        TACContract = _TACContract;\r\n        TACLockupContract = _TACLockupContract;\r\n        coopDataContract = _coopDataContract;\r\n    }\r\n\r\n    //returns how many elections there have been so far.\r\n    function getNumElections() public view returns (uint256) {\r\n        return numElections;\r\n    }\r\n\r\n    //Returns the contract's TAC balance.\r\n    function getTACBalance() public view returns (uint256 balance) {\r\n        ITACData TAC = ITACData(TACContract);\r\n        balance = TAC.balanceOf(address(this));\r\n    }\r\n\r\n \r\n     /////////////////////////////////////////////////ELECTION FUNCTIONS ///////////////////////////////////////////////////////////////////////\r\n     \r\n    function init() public {\r\n        //Make sure there currently isn't an open election.\r\n        require(numElections == 0, \"The contract has already been initialized\");\r\n        Election memory election;\r\n        election.id = uint64(numElections);\r\n        election.startTime = uint64(now);\r\n        election.winningMatch = 0;\r\n        election.isLive = true;\r\n        Elections.push(election);\r\n        numElections ++;\r\n    }     \r\n     \r\n    function openElection() public {\r\n        //Make sure there currently isn't an open election.\r\n        require(Elections[numElections-1].isLive == false, \"The current election must finish before you can open another one\");\r\n        //Open the new election\r\n        Election memory election;\r\n        election.id = uint64(numElections);\r\n        election.startTime = uint64(now);\r\n        election.winningMatch = 0;\r\n        election.isLive = true;\r\n        Elections.push(election);\r\n        numElections ++;\r\n    }\r\n\r\n    //Function called to add a match to an election. \r\n    function joinElection(uint64 electionId, uint64 matchId, string memory videoURL, string memory description, address bluePlayer) public {\r\n        //Anyone can join - UI limits to match players.\r\n        //Make sure this match is valid\r\n        require(isMatchValid(matchId) == true, \"Sorry, but you can't submit this match to an election.\");\r\n        //Make sure the election is the proper one to join\r\n        checkElection(electionId);\r\n        //Add the option to the election\r\n        require(MatchElections[matchId] != electionId || electionId == 0, \"Sorry, but this match is already in this election\");\r\n        Option memory option;\r\n        option.matchId = matchId;\r\n        option.videoURL = videoURL;\r\n        option.description = description;\r\n        option.bluePlayer = bluePlayer;\r\n        optionsPerElection[electionId].push(option);\r\n        MatchElections[matchId] = electionId;\r\n    }\r\n\r\n\r\n    //Function to return election information. \r\n    function getElection(uint64 electionId) public view returns (uint64 id, bool isLive, uint64 startTime, Option[] memory options, Vote[] memory votes, uint64 winningMatch) {\r\n        id=Elections[electionId].id;\r\n        isLive = Elections[electionId].isLive;\r\n        startTime = Elections[electionId].startTime;\r\n        options = optionsPerElection[electionId];\r\n        votes = votesPerElection[electionId];\r\n        winningMatch = Elections[electionId].winningMatch;\r\n    }\r\n    \r\n    //Returns information about each choice a voter could make. \r\n    function getElectionOptions(uint64 electionId, uint16 optionNumber) public view returns (uint64 option, string memory videoURL, string memory description) {\r\n        option = optionsPerElection[electionId][optionNumber].matchId; \r\n        videoURL = optionsPerElection[electionId][optionNumber].videoURL; \r\n        description = optionsPerElection[electionId][optionNumber].description;\r\n    }\r\n\r\n    //Function that makes sure that the specified match can be entered.\r\n    function isMatchValid(uint64 matchId) public view returns (bool) {\r\n        if (allWinners[matchId] == true) {return false;}  //Cannot enter another election if your match has already won.\r\n        if (maxMatchAge == 0) {return true;} //All match ages are allowed.\r\n        \r\n         //Find out when the match was sparred\r\n        ICoopData CoopData = ICoopData(coopDataContract);\r\n        uint64 time;\r\n        (,,,,,time,,) = CoopData.getMatch(matchId);\r\n\r\n        if (time > SafeMath.sub(now, maxMatchAge)) { \r\n            return true;\r\n        }  //The match is recent enough.\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Function to make sure election parameters are correct.\r\n    function checkElection(uint64 electionId) public view returns (bool) {\r\n         require(Elections[electionId].isLive == true, \"This election is not open\");\r\n         require(electionId >= 0, \"Please submit a valid electionId\");\r\n         require(electionId < numElections, \"We haven't had that many elections yet\");\r\n         return true;\r\n    }\r\n    \r\n    //Function to close an election, add up votes, and pay winners. \r\n    function closeElection(uint64 electionId) public {\r\n         //first make sure the election is open and valid.\r\n        checkElection(electionId);\r\n\r\n        //Next, make sure that the election has been open long enough\r\n        require((Elections[electionId].startTime + electionDuration <= uint64(now)), \"Hold on - the election still needs more time to resolve\");\r\n\r\n        ICoopData CoopData = ICoopData(coopDataContract);\r\n        ITACLockup TACLockup = ITACLockup(TACLockupContract);\r\n        Elections[electionId].isLive = false;\r\n        \r\n        //map the total score for each match Id\r\n        for (uint i = 0;i < votesPerElection[electionId].length; i++) {\r\n            voteTotals[votesPerElection[electionId][i].choice] = voteTotals[votesPerElection[electionId][i].choice] +   SafeMath.mul(CoopData.getUserMatchNumber(votesPerElection[electionId][i].voter) + defaultVotes, TACLockup.getTACLocked(votesPerElection[electionId][i].voter ));\r\n        }\r\n        \r\n        //Assume the first option is the winner, and then change if another match has more votes\r\n        uint64 winner = optionsPerElection[electionId][0].matchId;\r\n        uint256 mostVotes = 0;\r\n        for (uint j = 0; j < optionsPerElection[electionId].length; j++) {\r\n            if (voteTotals[optionsPerElection[electionId][j].matchId] > mostVotes) {\r\n                winner = optionsPerElection[electionId][j].matchId;\r\n                mostVotes = voteTotals[winner];\r\n            }\r\n            //Reset voteTotals back to 0 for next election\r\n            voteTotals[optionsPerElection[electionId][j].matchId] = 0;\r\n        }\r\n        \r\n        allWinners[winner] = true; //mark that the match has won and can't be entered into another election. \r\n        Elections[electionId].winningMatch = winner;\r\n        //Winner is the id of the winning match\r\n        payWinners(winner);   \r\n    }\r\n    \r\n    \r\n    function payWinners(uint64 winner) internal {\r\n           ICoopData CoopData = ICoopData(coopDataContract);\r\n           ITACData TAC = ITACData(TACContract);\r\n           address athlete1;\r\n           address athlete2;\r\n           (,athlete1,,athlete2,,,,) = CoopData.getMatch(winner);\r\n           uint256 winningAmount = TAC.balanceOf(address(this)) / payoutDivisor;\r\n           \r\n           TAC.transfer(athlete1, winningAmount);\r\n           TAC.transfer(athlete2, winningAmount);\r\n    }\r\n \r\n    //DEV only function to close an election, in the case that there are so many options that chooseing a winner doesn't fit in a block. \r\n    function devCloseElection(uint64 electionId, uint64 winner, address athlete1, address athlete2, uint256 winningAmount) public onlyCREATOR {\r\n        Elections[electionId].isLive = false;  \r\n        Elections[electionId].winningMatch = winner;\r\n        allWinners[winner] = true;    \r\n        ITACData TAC = ITACData(TACContract);\r\n        TAC.transfer(athlete1, winningAmount);\r\n        TAC.transfer(athlete2, winningAmount);   \r\n    }\r\n\r\n\r\n  /////////////////////////////////////////////////VOTING FUNCTIONS ///////////////////////////////////////////////////////////////////////\r\n\r\n    function vote(uint64 electionId, uint64 matchId) public {\r\n       checkElection(electionId);\r\n       uint16 voteId;\r\n       Vote memory proposedVote;\r\n       proposedVote.voter = msg.sender;\r\n       proposedVote.choice = matchId;\r\n\r\n       //next check if the voter has already voted. If not, add the vote. If so, change it.\r\n\r\n       if (Elections[electionId].voteId[msg.sender] != 0) {\r\n           voteId = Elections[electionId].voteId[msg.sender];\r\n           votesPerElection[electionId][voteId] = proposedVote;\r\n       }\r\n        else {\r\n            votesPerElection[electionId].push(proposedVote);\r\n            Elections[electionId].voteId[msg.sender] = uint16(votesPerElection[electionId].length-1);\r\n        }\r\n    }\r\n    \r\n    //Function to return the matchId that the voter has chosen, or 0 if they have not yet voted.\r\n    function getVote(uint64 electionId, address voter) public view returns (uint64 choice) {\r\n         checkElection(electionId);\r\n         return votesPerElection[electionId][Elections[electionId].voteId[voter]].choice;\r\n    }\r\n  \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"MatchElections\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TACContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TACLockupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allWinners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"electionId\",\"type\":\"uint64\"}],\"name\":\"checkElection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"electionId\",\"type\":\"uint64\"}],\"name\":\"closeElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coopDataContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"electionId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"winner\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"athlete1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"athlete2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningAmount\",\"type\":\"uint256\"}],\"name\":\"devCloseElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"electionDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"electionId\",\"type\":\"uint64\"}],\"name\":\"getElection\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isLive\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"matchId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"videoURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bluePlayer\",\"type\":\"address\"}],\"internalType\":\"struct TACVoting.Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"choice\",\"type\":\"uint64\"}],\"internalType\":\"struct TACVoting.Vote[]\",\"name\":\"votes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"winningMatch\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"electionId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"optionNumber\",\"type\":\"uint16\"}],\"name\":\"getElectionOptions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"option\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"videoURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumElections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTACBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"electionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"choice\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"matchId\",\"type\":\"uint64\"}],\"name\":\"isMatchValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"electionId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matchId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"videoURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bluePlayer\",\"type\":\"address\"}],\"name\":\"joinElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMatchAge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numElections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TACContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TACLockupContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coopDataContract\",\"type\":\"address\"}],\"name\":\"setAddresss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_payoutDivisor\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_electionDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maxMatchAge\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_defaultVotes\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"electionId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matchId\",\"type\":\"uint64\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"voteTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TACVoting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://04f78ff7b3c3a5b0db215e37bbf5e3e83205ab2a27b42f016e8b03e30adaa145"}]}