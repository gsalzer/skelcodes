{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.1;\r\n\r\n// File: contracts/governance/GovernanceInterface.sol\r\n\r\ninterface GovernanceInterface {\r\n    function proposeUpdateCoreParameters(\r\n        uint32 preVoteLength,\r\n        uint32 totalVoteLength,\r\n        uint32 expirationLength,\r\n        uint16 minVoteE4,\r\n        uint16 minVoteCoreE4,\r\n        uint16 minCommitE4\r\n    ) external;\r\n\r\n    function proposeUpdateWhitelist(address tokenAddress, address oracleAddress) external;\r\n\r\n    function proposeDelistWhitelist(address tokenAddress) external;\r\n\r\n    function proposeUpdateIncentiveFund(\r\n        address[] memory incentiveAddresses,\r\n        uint256[] memory incentiveAllocation\r\n    ) external;\r\n\r\n    function vote(\r\n        bytes32 proposeId,\r\n        bool approval,\r\n        uint128 amount\r\n    ) external;\r\n\r\n    function lockinProposal(bytes32 proposeId) external;\r\n\r\n    function applyGovernanceForUpdateCore(bytes32 proposeId) external;\r\n\r\n    function applyGovernanceForUpdateWhitelist(bytes32 proposeId) external;\r\n\r\n    function applyGovernanceForDelistWhitelist(bytes32 proposeId) external;\r\n\r\n    function applyGovernanceForUpdateIncentive(bytes32 proposeId) external;\r\n\r\n    function withdraw(bytes32 proposeId) external;\r\n\r\n    function getTaxTokenAddress() external view returns (address);\r\n\r\n    function getCoreParameters()\r\n        external\r\n        view\r\n        returns (\r\n            uint32 preVoteLength,\r\n            uint32 totalVoteLength,\r\n            uint32 expirationLength,\r\n            uint16 minimumVoteE4,\r\n            uint16 minimumVoteCoreE4,\r\n            uint16 minimumCommitE4\r\n        );\r\n\r\n    function getUserStatus(bytes32 proposeId, address userAddress)\r\n        external\r\n        view\r\n        returns (uint128 approvalAmount, uint128 denialAmount);\r\n\r\n    function getStatus(bytes32 proposeId)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 currentApprovalVoteSum,\r\n            uint128 currentDenialVoteSum,\r\n            uint128 appliedMinimumVote,\r\n            uint32 preVoteDeadline,\r\n            uint32 mainVoteDeadline,\r\n            uint32 expiration,\r\n            bool lockin,\r\n            bool applied\r\n        );\r\n\r\n    function getProposals(uint256 offset, uint256 limit)\r\n        external\r\n        view\r\n        returns (bytes32[] memory allProposals);\r\n\r\n    function getInfoUpdateCoreParameters(bytes32)\r\n        external\r\n        view\r\n        returns (\r\n            uint64 preVoteLength,\r\n            uint64 totalVoteLength,\r\n            uint64 expirationLength,\r\n            uint16 minVoteE4,\r\n            uint16 minVoteCoreE4,\r\n            uint16 minCommitE4\r\n        );\r\n\r\n    function getInfoUpdateWhitelist(bytes32 proposeId)\r\n        external\r\n        view\r\n        returns (address tokenAddress, address oracleAddress);\r\n\r\n    function getInfoDelistWhitelist(bytes32 proposeId) external view returns (address tokenAddress);\r\n\r\n    function getInfoUpdateIncentive(bytes32 proposeId)\r\n        external\r\n        view\r\n        returns (address[] memory incentiveAddresses, uint256[] memory incentiveAllocation);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/token/TaxTokenInterface.sol\r\n\r\n\r\ninterface TaxTokenInterface is IERC20 {\r\n    function mintToken(\r\n        address,\r\n        uint256,\r\n        address\r\n    ) external;\r\n\r\n    function registerWhitelist(address, address) external;\r\n\r\n    function unregisterWhitelist(address) external;\r\n\r\n    function updateLendingAddress(address) external;\r\n\r\n    function updateIncentiveAddresses(address[] memory, uint256[] memory) external;\r\n\r\n    function updateGovernanceAddress(address) external;\r\n\r\n    function mintDeveloperFund() external;\r\n\r\n    function mintIncentiveFund() external;\r\n\r\n    function getGovernanceAddress() external view returns (address);\r\n\r\n    function getDeveloperAddress() external view returns (address);\r\n\r\n    function getLendingAddress() external view returns (address);\r\n\r\n    function getFunds() external view returns (uint256 developerFund, uint256 incentiveFund);\r\n\r\n    function getConfigs()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 maxTotalSupply,\r\n            uint256 halvingStartLendValue,\r\n            uint256 halvingDecayRateE8,\r\n            uint256 developerFundRateE8,\r\n            uint256 incentiveFundRateE8\r\n        );\r\n\r\n    function getIncentiveFundAddresses()\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory incentiveFundAddresses,\r\n            uint256[] memory incentiveFundAllocationE8\r\n        );\r\n\r\n    function getMintUnit() external view returns (uint256);\r\n\r\n    function getOracleAddress(address) external view returns (address);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/staking/StakingVote.sol\r\n\r\n\r\ncontract StakingVote {\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    address internal _governanceAddress;\r\n    mapping(address => uint256) internal _voteNum;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event LogUpdateGovernanceAddress(address newAddress);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(address governanceAddress) {\r\n        _governanceAddress = governanceAddress;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier isGovernance(address account) {\r\n        require(account == _governanceAddress, \"sender must be governance address\");\r\n        _;\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @notice `_governanceAddress` can be updated by the current governance address.\r\n     * @dev Executed only once when initially set the governance address\r\n     * as the governance contract does not have the function to call this function.\r\n     */\r\n    function updateGovernanceAddress(address newGovernanceAddress)\r\n        external\r\n        isGovernance(msg.sender)\r\n    {\r\n        _governanceAddress = newGovernanceAddress;\r\n\r\n        emit LogUpdateGovernanceAddress(newGovernanceAddress);\r\n    }\r\n\r\n    function voteDeposit(address account, uint256 amount) external isGovernance(msg.sender) {\r\n        _updVoteSub(account, amount);\r\n    }\r\n\r\n    function voteWithdraw(address account, uint256 amount) external isGovernance(msg.sender) {\r\n        _updVoteAdd(account, amount);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function _updVoteAdd(address account, uint256 amount) internal {\r\n        require(_voteNum[account] + amount >= amount, \"overflow the amount of votes\");\r\n        _voteNum[account] += amount;\r\n    }\r\n\r\n    function _updVoteSub(address account, uint256 amount) internal {\r\n        require(_voteNum[account] >= amount, \"underflow the amount of votes\");\r\n        _voteNum[account] -= amount;\r\n    }\r\n\r\n    /* ========== CALL FUNCTIONS ========== */\r\n\r\n    function getGovernanceAddress() external view returns (address) {\r\n        return _governanceAddress;\r\n    }\r\n\r\n    function getVoteNum(address account) external view returns (uint256) {\r\n        return _voteNum[account];\r\n    }\r\n}\r\n\r\n// File: contracts/lending/LendingInterface.sol\r\n\r\ninterface LendingInterface {\r\n    function depositEth() external payable;\r\n\r\n    function depositErc20(address tokenAddress, uint256 amount) external;\r\n\r\n    function borrow(address tokenAddress, uint256 amount) external;\r\n\r\n    function withdraw(address tokenAddress, uint256 amount) external;\r\n\r\n    function repayEth() external payable;\r\n\r\n    function repayErc20(address tokenAddress, uint256 amount) external;\r\n\r\n    function forceLiquidate(address token, address account) external;\r\n\r\n    function getStakingAddress() external view returns (address);\r\n\r\n    function getTaxTokenAddress() external view returns (address);\r\n\r\n    function getInterest() external view returns (uint256);\r\n\r\n    function getTvl(address tokenAddress) external view returns (uint256);\r\n\r\n    function getTotalLending(address tokenAddress) external view returns (uint256);\r\n\r\n    function getTotalBorrowing(address tokenAddress) external view returns (uint256);\r\n\r\n    function getTokenInfo(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256 totalLendAmount, uint256 totalBorrowAmount);\r\n\r\n    function getLenderAccount(address tokenAddress, address userAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getBorrowerAccount(address tokenAddress, address userAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getRemainingCredit(address tokenAddress, address userAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getAccountInfo(address tokenAddress, address userAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 lendAccount,\r\n            uint256 borrowAccount,\r\n            uint256 remainingCredit\r\n        );\r\n}\r\n\r\n// File: contracts/oracle/OracleInterface.sol\r\n\r\n/**\r\n * @dev Oracle referenced by OracleProxy must implement this interface.\r\n */\r\ninterface OracleInterface {\r\n    function latestAnswer() external view returns (int256);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/governance/Governance.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Governance is GovernanceInterface {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint128;\r\n    using SafeCast for uint256;\r\n\r\n    /* ========== CONSTANT VARIABLES ========== */\r\n\r\n    uint32 internal constant MAX_TIME_LENGTH = 4 weeks;\r\n    uint32 internal constant MIN_TIME_LENGTH = 24 hours;\r\n    uint16 internal constant MAX_MIN_VOTE = 0.2 * 10**4;\r\n    uint16 internal constant MIN_MIN_VOTE = 0.0001 * 10**4;\r\n    uint16 internal constant MAX_MIN_COMMIT = 0.01 * 10**4;\r\n    uint16 internal constant MIN_MIN_COMMIT = 0.0001 * 10**4;\r\n    TaxTokenInterface internal _taxTokenContract;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    uint32 internal _preVoteLength;\r\n    uint32 internal _totalVoteLength;\r\n    uint32 internal _expirationLength;\r\n    uint16 internal _minimumVoteE4;\r\n    uint16 internal _minimumVoteCoreE4;\r\n    uint16 internal _minimumCommitE4;\r\n\r\n    /**\r\n     * @dev List of proposal IDs (index starts from 1).\r\n     */\r\n    bytes32[] _proposalList;\r\n\r\n    struct CoreParameters {\r\n        uint32 preVoteLength;\r\n        uint32 totalVoteLength;\r\n        uint32 expirationLength;\r\n        uint16 minVoteE4;\r\n        uint16 minVoteCoreE4;\r\n        uint16 minCommitE4;\r\n    }\r\n    mapping(bytes32 => CoreParameters) internal _proposeUpdateCore;\r\n\r\n    struct ProposeStatus {\r\n        uint128 appliedMinimumVote;\r\n        uint128 currentApprovalVoteSum;\r\n        uint128 currentDenialVoteSum;\r\n        uint32 preVoteDeadline;\r\n        uint32 mainVoteDeadline;\r\n        uint32 expiration;\r\n        bool lockin;\r\n        bool applied;\r\n    }\r\n    mapping(bytes32 => ProposeStatus) internal _proposeStatus;\r\n\r\n    struct ProposeStatusWithProposeId {\r\n        bytes32 proposeId;\r\n        uint128 appliedMinimumVote;\r\n        uint128 currentApprovalVoteSum;\r\n        uint128 currentDenialVoteSum;\r\n        uint32 preVoteDeadline;\r\n        uint32 mainVoteDeadline;\r\n        uint32 expiration;\r\n        bool lockin;\r\n        bool applied;\r\n    }\r\n\r\n    struct WhitelistParameters {\r\n        address tokenAddress;\r\n        address oracleAddress;\r\n    }\r\n    mapping(bytes32 => WhitelistParameters) internal _proposeList;\r\n\r\n    struct DelistParameters {\r\n        address tokenAddress;\r\n    }\r\n    mapping(bytes32 => DelistParameters) internal _proposeDelist;\r\n\r\n    struct IncentiveParameters {\r\n        address[] incentiveAddresses;\r\n        uint256[] incentiveAllocation;\r\n    }\r\n    mapping(bytes32 => IncentiveParameters) internal _proposeUpdateIncentive;\r\n\r\n    struct VoteAmount {\r\n        uint128 approval;\r\n        uint128 denial;\r\n    }\r\n    mapping(bytes32 => VoteAmount) internal _amountOfVotes;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event LogUpdateCoreParameters(\r\n        uint64 preVoteLength,\r\n        uint64 totalVoteLength,\r\n        uint64 expirationLength,\r\n        uint16 minVoteE4,\r\n        uint16 minVoteCoreE4,\r\n        uint16 minCommitE4\r\n    );\r\n\r\n    event LogProposeUpdateCoreParameters(\r\n        bytes32 indexed proposeId,\r\n        uint64 preVoteLength,\r\n        uint64 totalVoteLength,\r\n        uint64 expirationLength,\r\n        uint16 minVoteE4,\r\n        uint16 minVoteCoreE4,\r\n        uint16 minCommitE4,\r\n        uint32 preVoteDeadline,\r\n        uint32 mainVoteDeadline,\r\n        uint32 expiration\r\n    );\r\n    event LogProposeUpdateWhiteList(\r\n        bytes32 indexed proposeId,\r\n        address tokenAddress,\r\n        address oracleAddress,\r\n        uint32 preVoteDeadline,\r\n        uint32 mainVoteDeadline,\r\n        uint32 expiration\r\n    );\r\n    event LogProposeDelistWhiteList(\r\n        bytes32 indexed proposeId,\r\n        address tokenAddress,\r\n        uint32 preVoteDeadline,\r\n        uint32 mainVoteDeadline,\r\n        uint32 expiration\r\n    );\r\n    event LogProposeUpdateIncentive(\r\n        bytes32 indexed proposeId,\r\n        address[] incentiveAddresses,\r\n        uint256[] incentiveAllocation,\r\n        uint32 preVoteDeadline,\r\n        uint32 mainVoteDeadline,\r\n        uint32 expiration\r\n    );\r\n\r\n    event LogDeposit(\r\n        bytes32 indexed proposeId,\r\n        address indexed userAddress,\r\n        bool approval,\r\n        uint128 amount\r\n    );\r\n\r\n    event LogWithdraw(bytes32 indexed proposeId, address indexed userAddress, uint128 amount);\r\n\r\n    event LogApprovedProposal(bytes32 indexed proposeId);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address taxTokenAddress,\r\n        uint32 preVoteLength,\r\n        uint32 totalVoteLength,\r\n        uint32 expirationLength,\r\n        uint16 minVoteE4,\r\n        uint16 minVoteCoreE4,\r\n        uint16 minCommitE4\r\n    ) {\r\n        _taxTokenContract = TaxTokenInterface(taxTokenAddress);\r\n\r\n        _assertValidCoreParameters(\r\n            CoreParameters({\r\n                preVoteLength: preVoteLength,\r\n                totalVoteLength: totalVoteLength,\r\n                expirationLength: expirationLength,\r\n                minVoteE4: minVoteE4,\r\n                minVoteCoreE4: minVoteCoreE4,\r\n                minCommitE4: minCommitE4\r\n            })\r\n        );\r\n\r\n        _preVoteLength = preVoteLength; // 1 weeks; // When sufficient amount of vote has not been collected until this deadline, the voting event is canceled.\r\n        _totalVoteLength = totalVoteLength; // 2 weeks; // Only when sufficient amount of vote has been collected, the main voting period starts and the voting result is to be applied.\r\n        _expirationLength = expirationLength; // 1 days; // Expiration of the proposal to be applied if the proposal is confirmed.\r\n        _minimumVoteE4 = minVoteE4; // 0.05 * 10**4 is 5%\r\n        _minimumVoteCoreE4 = minVoteCoreE4; // 0.1 * 10**4 is 10%\r\n        _minimumCommitE4 = minCommitE4; // 0.0001 * 10**4 is 0.01%\r\n\r\n        _proposalList.push(bytes32(0)); // The index of _proposalList starts from 1.\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @notice Propose delisting the tokenAddress from the whitelist.\r\n     * The proposer needs to commit minimum deposit amount.\r\n     */\r\n    function proposeUpdateCoreParameters(\r\n        uint32 preVoteLength,\r\n        uint32 totalVoteLength,\r\n        uint32 expirationLength,\r\n        uint16 minVoteE4,\r\n        uint16 minVoteCoreE4,\r\n        uint16 minCommitE4\r\n    ) external override {\r\n        bytes32 proposeId = _generateUpdateCoreProposeId(\r\n            CoreParameters({\r\n                preVoteLength: preVoteLength,\r\n                totalVoteLength: totalVoteLength,\r\n                expirationLength: expirationLength,\r\n                minVoteE4: minVoteE4,\r\n                minVoteCoreE4: minVoteCoreE4,\r\n                minCommitE4: minCommitE4\r\n            })\r\n        );\r\n        uint32 blockTime = block.timestamp.toUint32();\r\n        uint32 preVoteDeadline = blockTime + _preVoteLength;\r\n        uint32 mainVoteDeadline = blockTime + _totalVoteLength;\r\n        uint128 appliedMinimumVote = (_taxTokenContract.totalSupply().mul(_minimumVoteCoreE4) /\r\n            10**4)\r\n            .toUint128();\r\n        uint128 appliedMinCommit = (_taxTokenContract.totalSupply().mul(_minimumCommitE4) / 10**4)\r\n            .toUint128();\r\n        uint32 expiration = _expirationLength;\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline == 0 ||\r\n                (_proposeStatus[proposeId].lockin == false &&\r\n                    _proposeStatus[proposeId].preVoteDeadline +\r\n                        _proposeStatus[proposeId].expiration <\r\n                    block.timestamp) ||\r\n                (_proposeStatus[proposeId].lockin == true &&\r\n                    _proposeStatus[proposeId].mainVoteDeadline +\r\n                        _proposeStatus[proposeId].expiration <\r\n                    block.timestamp),\r\n            \"the proposal should not conflict with the ongoing proposal\"\r\n        );\r\n\r\n        _assertValidCoreParameters(\r\n            CoreParameters({\r\n                preVoteLength: preVoteLength == 0 ? _preVoteLength : preVoteLength,\r\n                totalVoteLength: totalVoteLength == 0 ? _totalVoteLength : totalVoteLength,\r\n                expirationLength: expirationLength == 0 ? _expirationLength : expirationLength,\r\n                minVoteE4: minVoteE4 == 0 ? _minimumVoteE4 : minVoteE4,\r\n                minVoteCoreE4: minVoteCoreE4 == 0 ? _minimumVoteCoreE4 : minVoteCoreE4,\r\n                minCommitE4: minCommitE4 == 0 ? _minimumCommitE4 : minCommitE4\r\n            })\r\n        );\r\n\r\n        _proposalList.push(proposeId);\r\n        _proposeStatus[proposeId] = ProposeStatus({\r\n            preVoteDeadline: preVoteDeadline,\r\n            mainVoteDeadline: mainVoteDeadline,\r\n            expiration: expiration,\r\n            appliedMinimumVote: appliedMinimumVote,\r\n            currentApprovalVoteSum: appliedMinCommit,\r\n            currentDenialVoteSum: 0,\r\n            lockin: false,\r\n            applied: false\r\n        });\r\n        _proposeUpdateCore[proposeId] = CoreParameters({\r\n            preVoteLength: preVoteLength,\r\n            totalVoteLength: totalVoteLength,\r\n            expirationLength: expirationLength,\r\n            minVoteE4: minVoteE4,\r\n            minVoteCoreE4: minVoteCoreE4,\r\n            minCommitE4: minCommitE4\r\n        });\r\n        bytes32 account = keccak256(abi.encode(proposeId, msg.sender));\r\n        _amountOfVotes[account].approval = _amountOfVotes[account]\r\n            .approval\r\n            .add(appliedMinCommit)\r\n            .toUint128();\r\n        _lockStakingToken(msg.sender, appliedMinCommit);\r\n\r\n        emit LogProposeUpdateCoreParameters(\r\n            proposeId,\r\n            preVoteLength,\r\n            totalVoteLength,\r\n            expirationLength,\r\n            minVoteE4,\r\n            minVoteCoreE4,\r\n            minCommitE4,\r\n            preVoteDeadline,\r\n            mainVoteDeadline,\r\n            expiration\r\n        );\r\n        emit LogDeposit(proposeId, msg.sender, true, appliedMinCommit);\r\n    }\r\n\r\n    /**\r\n     * @notice Propose updating the whitelist.\r\n     * The proposer needs to commit minimum deposit amount.\r\n     */\r\n    function proposeUpdateWhitelist(address tokenAddress, address oracleAddress) external override {\r\n        // Ensure the code of oracleAddress has OracleInterface interface.\r\n        {\r\n            OracleInterface oracleContract = OracleInterface(oracleAddress);\r\n            oracleContract.decimals();\r\n            oracleContract.latestAnswer();\r\n        }\r\n\r\n        bytes32 proposeId = _generateRegisterWhitelistProposeId(\r\n            WhitelistParameters({tokenAddress: tokenAddress, oracleAddress: oracleAddress})\r\n        );\r\n        uint32 blockTime = block.timestamp.toUint32();\r\n        uint32 preVoteDeadline = blockTime + _preVoteLength;\r\n        uint32 mainVoteDeadline = blockTime + _totalVoteLength;\r\n        uint128 appliedMinimumVote = (_taxTokenContract.totalSupply().mul(_minimumVoteE4) / 10**4)\r\n            .toUint128();\r\n        uint128 appliedMinCommit = (_taxTokenContract.totalSupply().mul(_minimumCommitE4) / 10**4)\r\n            .toUint128();\r\n        uint32 expiration = _expirationLength;\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline == 0 ||\r\n                (_proposeStatus[proposeId].lockin == false &&\r\n                    _proposeStatus[proposeId].preVoteDeadline +\r\n                        _proposeStatus[proposeId].expiration <\r\n                    block.timestamp) ||\r\n                (_proposeStatus[proposeId].lockin == true &&\r\n                    _proposeStatus[proposeId].mainVoteDeadline +\r\n                        _proposeStatus[proposeId].expiration <\r\n                    block.timestamp),\r\n            \"the proposal should not conflict with the ongoing proposal\"\r\n        );\r\n\r\n        _proposalList.push(proposeId);\r\n        _proposeStatus[proposeId] = ProposeStatus({\r\n            preVoteDeadline: preVoteDeadline,\r\n            mainVoteDeadline: mainVoteDeadline,\r\n            expiration: expiration,\r\n            appliedMinimumVote: appliedMinimumVote,\r\n            currentApprovalVoteSum: appliedMinCommit,\r\n            currentDenialVoteSum: 0,\r\n            lockin: false,\r\n            applied: false\r\n        });\r\n        _proposeList[proposeId] = WhitelistParameters({\r\n            tokenAddress: tokenAddress,\r\n            oracleAddress: oracleAddress\r\n        });\r\n        bytes32 account = keccak256(abi.encode(proposeId, msg.sender));\r\n        _amountOfVotes[account].approval = _amountOfVotes[account]\r\n            .approval\r\n            .add(appliedMinCommit)\r\n            .toUint128();\r\n        _lockStakingToken(msg.sender, appliedMinCommit);\r\n\r\n        emit LogProposeUpdateWhiteList(\r\n            proposeId,\r\n            tokenAddress,\r\n            oracleAddress,\r\n            preVoteDeadline,\r\n            mainVoteDeadline,\r\n            expiration\r\n        );\r\n        emit LogDeposit(proposeId, msg.sender, true, appliedMinCommit);\r\n    }\r\n\r\n    /**\r\n     * @notice Propose delisting the tokenAddress from the whitelist.\r\n     * The proposer needs to commit minimum deposit amount.\r\n     */\r\n    function proposeDelistWhitelist(address tokenAddress) external override {\r\n        bytes32 proposeId = _generateUnregisterWhitelistProposeId(\r\n            DelistParameters({tokenAddress: tokenAddress})\r\n        );\r\n        uint32 blockTime = block.timestamp.toUint32();\r\n        uint32 preVoteDeadline = blockTime + _preVoteLength;\r\n        uint32 mainVoteDeadline = blockTime + _totalVoteLength;\r\n        uint128 appliedMinimumVote = (_taxTokenContract.totalSupply().mul(_minimumVoteE4) / 10**4)\r\n            .toUint128();\r\n        uint128 appliedMinCommit = (_taxTokenContract.totalSupply().mul(_minimumCommitE4) / 10**4)\r\n            .toUint128();\r\n        uint32 expiration = _expirationLength;\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline == 0 ||\r\n                (_proposeStatus[proposeId].lockin == false &&\r\n                    _proposeStatus[proposeId].preVoteDeadline +\r\n                        _proposeStatus[proposeId].expiration <\r\n                    block.timestamp) ||\r\n                (_proposeStatus[proposeId].lockin == true &&\r\n                    _proposeStatus[proposeId].mainVoteDeadline +\r\n                        _proposeStatus[proposeId].expiration <\r\n                    block.timestamp),\r\n            \"the proposal should not conflict with the ongoing proposal\"\r\n        );\r\n\r\n        require(\r\n            _taxTokenContract.getOracleAddress(tokenAddress) != address(0),\r\n            \"the tokenAddress is not whitelisted\"\r\n        );\r\n\r\n        _proposalList.push(proposeId);\r\n        _proposeStatus[proposeId] = ProposeStatus({\r\n            preVoteDeadline: preVoteDeadline,\r\n            mainVoteDeadline: mainVoteDeadline,\r\n            expiration: expiration,\r\n            appliedMinimumVote: appliedMinimumVote,\r\n            currentApprovalVoteSum: appliedMinCommit,\r\n            currentDenialVoteSum: 0,\r\n            lockin: false,\r\n            applied: false\r\n        });\r\n        _proposeDelist[proposeId] = DelistParameters({tokenAddress: tokenAddress});\r\n        bytes32 account = keccak256(abi.encode(proposeId, msg.sender));\r\n        _amountOfVotes[account].approval = _amountOfVotes[account]\r\n            .approval\r\n            .add(appliedMinCommit)\r\n            .toUint128();\r\n        _lockStakingToken(msg.sender, appliedMinCommit);\r\n\r\n        emit LogProposeDelistWhiteList(\r\n            proposeId,\r\n            tokenAddress,\r\n            preVoteDeadline,\r\n            mainVoteDeadline,\r\n            expiration\r\n        );\r\n        emit LogDeposit(proposeId, msg.sender, true, appliedMinCommit);\r\n    }\r\n\r\n    /**\r\n     * @notice Propose updating the incentive addresses and their allocation.\r\n     * The proposer needs to commit minimum deposit amount.\r\n     */\r\n    function proposeUpdateIncentiveFund(\r\n        address[] memory incentiveAddresses,\r\n        uint256[] memory incentiveAllocation\r\n    ) external override {\r\n        bytes32 proposeId = _generateUpdateIncentiveProposeId(\r\n            IncentiveParameters({\r\n                incentiveAddresses: incentiveAddresses,\r\n                incentiveAllocation: incentiveAllocation\r\n            })\r\n        );\r\n        uint32 blockTime = block.timestamp.toUint32();\r\n        uint32 preVoteDeadline = blockTime + _preVoteLength;\r\n        uint32 mainVoteDeadline = blockTime + _totalVoteLength;\r\n        uint128 appliedMinimumVote = (_taxTokenContract.totalSupply().mul(_minimumVoteE4) / 10**4)\r\n            .toUint128();\r\n        uint128 appliedMinCommit = (_taxTokenContract.totalSupply().mul(_minimumCommitE4) / 10**4)\r\n            .toUint128();\r\n        uint32 expiration = _expirationLength;\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline == 0 ||\r\n                (_proposeStatus[proposeId].lockin == false &&\r\n                    _proposeStatus[proposeId].preVoteDeadline +\r\n                        _proposeStatus[proposeId].expiration <\r\n                    block.timestamp) ||\r\n                (_proposeStatus[proposeId].lockin == true &&\r\n                    _proposeStatus[proposeId].mainVoteDeadline +\r\n                        _proposeStatus[proposeId].expiration <\r\n                    block.timestamp),\r\n            \"the proposal should not conflict with the ongoing proposal\"\r\n        );\r\n\r\n        require(\r\n            incentiveAddresses.length == incentiveAllocation.length,\r\n            \"the length of the addresses and the allocation should be the same\"\r\n        );\r\n        uint256 sumcheck = 0;\r\n        for (uint256 i = 0; i < incentiveAllocation.length; i++) {\r\n            sumcheck = sumcheck.add(incentiveAllocation[i]);\r\n        }\r\n        require(sumcheck == 10**8, \"the sum of the allocation should be 10**8\");\r\n\r\n        _proposalList.push(proposeId);\r\n        _proposeStatus[proposeId] = ProposeStatus({\r\n            preVoteDeadline: preVoteDeadline,\r\n            mainVoteDeadline: mainVoteDeadline,\r\n            expiration: expiration,\r\n            appliedMinimumVote: appliedMinimumVote,\r\n            currentApprovalVoteSum: appliedMinCommit,\r\n            currentDenialVoteSum: 0,\r\n            lockin: false,\r\n            applied: false\r\n        });\r\n        _proposeUpdateIncentive[proposeId] = IncentiveParameters({\r\n            incentiveAddresses: incentiveAddresses,\r\n            incentiveAllocation: incentiveAllocation\r\n        });\r\n        bytes32 account = keccak256(abi.encode(proposeId, msg.sender));\r\n        _amountOfVotes[account].approval = _amountOfVotes[account]\r\n            .approval\r\n            .add(appliedMinCommit)\r\n            .toUint128();\r\n        _lockStakingToken(msg.sender, appliedMinCommit);\r\n\r\n        emit LogProposeUpdateIncentive(\r\n            proposeId,\r\n            incentiveAddresses,\r\n            incentiveAllocation,\r\n            preVoteDeadline,\r\n            mainVoteDeadline,\r\n            expiration\r\n        );\r\n        emit LogDeposit(proposeId, msg.sender, true, appliedMinCommit);\r\n    }\r\n\r\n    /**\r\n     * @notice Approve or deny the proposal by commit.\r\n     * The voter should hold the amount in the staking contract.\r\n     */\r\n    function vote(\r\n        bytes32 proposeId,\r\n        bool approval,\r\n        uint128 amount\r\n    ) external override {\r\n        bytes32 account = keccak256(abi.encode(proposeId, msg.sender));\r\n        require(\r\n            (_proposeStatus[proposeId].lockin &&\r\n                _proposeStatus[proposeId].mainVoteDeadline >= block.timestamp) ||\r\n                _proposeStatus[proposeId].preVoteDeadline >= block.timestamp,\r\n            \"voting period has expired\"\r\n        );\r\n        if (approval) {\r\n            _proposeStatus[proposeId].currentApprovalVoteSum = _proposeStatus[proposeId]\r\n                .currentApprovalVoteSum\r\n                .add(amount)\r\n                .toUint128();\r\n            _amountOfVotes[account].approval = _amountOfVotes[account]\r\n                .approval\r\n                .add(amount)\r\n                .toUint128();\r\n        } else {\r\n            _proposeStatus[proposeId].currentDenialVoteSum = _proposeStatus[proposeId]\r\n                .currentDenialVoteSum\r\n                .add(amount)\r\n                .toUint128();\r\n            _amountOfVotes[account].denial = _amountOfVotes[account].denial.add(amount).toUint128();\r\n        }\r\n        _lockStakingToken(msg.sender, amount);\r\n\r\n        emit LogDeposit(proposeId, msg.sender, approval, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Check and mark flag if the proposal collects minimum vote amount within the pre vote period\r\n     * and the proposal will be accepted if the approval vote is larger than denial vote\r\n     * after the end of the main vote period.\r\n     */\r\n    function lockinProposal(bytes32 proposeId) external override {\r\n        require(\r\n            _proposeStatus[proposeId].currentApprovalVoteSum +\r\n                _proposeStatus[proposeId].currentDenialVoteSum >=\r\n                _proposeStatus[proposeId].appliedMinimumVote,\r\n            \"insufficient amount for lockin\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].preVoteDeadline >= block.timestamp,\r\n            \"lockin period has expired\"\r\n        );\r\n        _proposeStatus[proposeId].lockin = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Apply the updating core parameters proposal if admitted.\r\n     */\r\n    function applyGovernanceForUpdateCore(bytes32 proposeId) external override {\r\n        require(_proposeStatus[proposeId].lockin = true, \"the proposal is not locked in\");\r\n        require(\r\n            _proposeStatus[proposeId].applied == false,\r\n            \"the proposal has been already applied\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline <= block.timestamp,\r\n            \"the proposal is still under voting period\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline + _proposeStatus[proposeId].expiration >\r\n                block.timestamp,\r\n            \"the applicable period of the proposal has expired\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].currentApprovalVoteSum >\r\n                _proposeStatus[proposeId].currentDenialVoteSum,\r\n            \"the proposal is denied by majority of vote\"\r\n        );\r\n        _proposeStatus[proposeId].applied = true;\r\n\r\n        require(\r\n            proposeId == _generateUpdateCoreProposeId(_proposeUpdateCore[proposeId]),\r\n            \"the propose ID is invalid\"\r\n        );\r\n\r\n        _preVoteLength = _proposeUpdateCore[proposeId].preVoteLength == 0\r\n            ? _preVoteLength\r\n            : _proposeUpdateCore[proposeId].preVoteLength;\r\n        _totalVoteLength = _proposeUpdateCore[proposeId].totalVoteLength == 0\r\n            ? _totalVoteLength\r\n            : _proposeUpdateCore[proposeId].totalVoteLength;\r\n        _expirationLength = _proposeUpdateCore[proposeId].expirationLength == 0\r\n            ? _expirationLength\r\n            : _proposeUpdateCore[proposeId].expirationLength;\r\n        _minimumVoteE4 = _proposeUpdateCore[proposeId].minVoteE4 == 0\r\n            ? _minimumVoteE4\r\n            : _proposeUpdateCore[proposeId].minVoteE4;\r\n        _minimumVoteCoreE4 = _proposeUpdateCore[proposeId].minVoteCoreE4 == 0\r\n            ? _minimumVoteCoreE4\r\n            : _proposeUpdateCore[proposeId].minVoteCoreE4;\r\n        _minimumCommitE4 = _proposeUpdateCore[proposeId].minCommitE4 == 0\r\n            ? _minimumCommitE4\r\n            : _proposeUpdateCore[proposeId].minCommitE4;\r\n\r\n        emit LogApprovedProposal(proposeId);\r\n        emit LogUpdateCoreParameters(\r\n            _preVoteLength,\r\n            _totalVoteLength,\r\n            _expirationLength,\r\n            _minimumVoteE4,\r\n            _minimumVoteCoreE4,\r\n            _minimumCommitE4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Apply the listing proposal if admitted.\r\n     */\r\n    function applyGovernanceForUpdateWhitelist(bytes32 proposeId) external override {\r\n        require(_proposeStatus[proposeId].lockin = true, \"the proposal is not locked in\");\r\n        require(\r\n            _proposeStatus[proposeId].applied == false,\r\n            \"the proposal has been already applied\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline <= block.timestamp,\r\n            \"the proposal is still under voting period\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline + _proposeStatus[proposeId].expiration >\r\n                block.timestamp,\r\n            \"the applicable period of the proposal has expired\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].currentApprovalVoteSum >\r\n                _proposeStatus[proposeId].currentDenialVoteSum,\r\n            \"the proposal is denied by majority of vote\"\r\n        );\r\n        _proposeStatus[proposeId].applied = true;\r\n\r\n        address tokenAddress = _proposeList[proposeId].tokenAddress;\r\n        address oracleAddress = _proposeList[proposeId].oracleAddress;\r\n\r\n        require(\r\n            proposeId ==\r\n                _generateRegisterWhitelistProposeId(\r\n                    WhitelistParameters({tokenAddress: tokenAddress, oracleAddress: oracleAddress})\r\n                ),\r\n            \"the propose ID is invalid\"\r\n        );\r\n        _taxTokenContract.registerWhitelist(tokenAddress, oracleAddress);\r\n\r\n        emit LogApprovedProposal(proposeId);\r\n    }\r\n\r\n    /**\r\n     * @notice Apply the delisting proposal if admitted.\r\n     */\r\n    function applyGovernanceForDelistWhitelist(bytes32 proposeId) external override {\r\n        require(_proposeStatus[proposeId].lockin = true, \"the proposal is not locked in\");\r\n        require(\r\n            _proposeStatus[proposeId].applied == false,\r\n            \"the proposal has been already applied\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline <= block.timestamp,\r\n            \"the proposal is still under voting period\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline + _proposeStatus[proposeId].expiration >\r\n                block.timestamp,\r\n            \"the applicable period of the proposal has expired\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].currentApprovalVoteSum >\r\n                _proposeStatus[proposeId].currentDenialVoteSum,\r\n            \"the proposal is denied by majority of vote\"\r\n        );\r\n        _proposeStatus[proposeId].applied = true;\r\n\r\n        address tokenAddress = _proposeDelist[proposeId].tokenAddress;\r\n\r\n        require(\r\n            proposeId ==\r\n                _generateUnregisterWhitelistProposeId(\r\n                    DelistParameters({tokenAddress: tokenAddress})\r\n                ),\r\n            \"the propose ID is invalid\"\r\n        );\r\n        _taxTokenContract.unregisterWhitelist(tokenAddress);\r\n\r\n        emit LogApprovedProposal(proposeId);\r\n    }\r\n\r\n    /**\r\n     * @notice Apply the updating incentive proposal if admitted.\r\n     */\r\n    function applyGovernanceForUpdateIncentive(bytes32 proposeId) external override {\r\n        require(_proposeStatus[proposeId].lockin = true, \"the proposal is not locked in\");\r\n        require(\r\n            _proposeStatus[proposeId].applied == false,\r\n            \"the proposal has been already applied\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline <= block.timestamp,\r\n            \"the proposal is still under voting period\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].mainVoteDeadline + _proposeStatus[proposeId].expiration >\r\n                block.timestamp,\r\n            \"the applicable period of the proposal has expired\"\r\n        );\r\n        require(\r\n            _proposeStatus[proposeId].currentApprovalVoteSum >\r\n                _proposeStatus[proposeId].currentDenialVoteSum,\r\n            \"the proposal is denied by majority of vote\"\r\n        );\r\n        _proposeStatus[proposeId].applied = true;\r\n\r\n        address[] memory incentiveAddresses = _proposeUpdateIncentive[proposeId].incentiveAddresses;\r\n        uint256[] memory incentiveAllocation = _proposeUpdateIncentive[proposeId]\r\n            .incentiveAllocation;\r\n\r\n        require(\r\n            proposeId ==\r\n                _generateUpdateIncentiveProposeId(\r\n                    IncentiveParameters({\r\n                        incentiveAddresses: incentiveAddresses,\r\n                        incentiveAllocation: incentiveAllocation\r\n                    })\r\n                ),\r\n            \"the propose ID is invalid\"\r\n        );\r\n        _taxTokenContract.updateIncentiveAddresses(incentiveAddresses, incentiveAllocation);\r\n\r\n        emit LogApprovedProposal(proposeId);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw deposit after the end of the proposal.\r\n     */\r\n    function withdraw(bytes32 proposeId) external override {\r\n        bytes32 account = keccak256(abi.encode(proposeId, msg.sender));\r\n        VoteAmount memory amountOfVotes = _amountOfVotes[account];\r\n        require(\r\n            amountOfVotes.approval != 0 || amountOfVotes.denial != 0,\r\n            \"no deposit on the proposeId\"\r\n        );\r\n        require(\r\n            (_proposeStatus[proposeId].lockin == false &&\r\n                _proposeStatus[proposeId].preVoteDeadline < block.timestamp) ||\r\n                (_proposeStatus[proposeId].applied == true &&\r\n                    _proposeStatus[proposeId].mainVoteDeadline <= block.timestamp) ||\r\n                (_proposeStatus[proposeId].mainVoteDeadline +\r\n                    _proposeStatus[proposeId].expiration <=\r\n                    block.timestamp),\r\n            \"cannot withdraw while the voting is in progress\"\r\n        );\r\n        uint128 withdrawAmount = amountOfVotes.approval + amountOfVotes.denial; // <= _taxTokenContract.totalSupply()\r\n        delete _amountOfVotes[account];\r\n        _unlockStakingToken(msg.sender, withdrawAmount);\r\n\r\n        emit LogWithdraw(proposeId, msg.sender, withdrawAmount);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function _lockStakingToken(address voter, uint128 amount) internal {\r\n        address lendingAddress = _taxTokenContract.getLendingAddress();\r\n        address stakingAddress = LendingInterface(lendingAddress).getStakingAddress();\r\n        StakingVote(stakingAddress).voteDeposit(voter, amount);\r\n    }\r\n\r\n    function _unlockStakingToken(address voter, uint128 amount) internal {\r\n        address lendingAddress = _taxTokenContract.getLendingAddress();\r\n        address stakingAddress = LendingInterface(lendingAddress).getStakingAddress();\r\n        StakingVote(stakingAddress).voteWithdraw(voter, amount);\r\n    }\r\n\r\n    function _assertValidCoreParameters(CoreParameters memory params) internal pure returns (bool) {\r\n        require(\r\n            params.preVoteLength + MIN_TIME_LENGTH <= params.totalVoteLength,\r\n            \"total voting period should be longer than or equal to pre-voting period\"\r\n        );\r\n\r\n        uint256 mainVoteLength = params.totalVoteLength - params.preVoteLength;\r\n        require(\r\n            params.preVoteLength <= MAX_TIME_LENGTH && params.preVoteLength >= MIN_TIME_LENGTH,\r\n            \"preVoteLength should be in between the acceptable range\"\r\n        );\r\n\r\n        require(\r\n            mainVoteLength <= MAX_TIME_LENGTH,\r\n            \"totalVoteLength should be in between the acceptable range\"\r\n        );\r\n        require(\r\n            params.expirationLength <= MAX_TIME_LENGTH &&\r\n                params.expirationLength >= MIN_TIME_LENGTH,\r\n            \"expirationLength should be in between the acceptable range\"\r\n        );\r\n\r\n        require(\r\n            params.minCommitE4 <= params.minVoteE4 && params.minCommitE4 <= params.minVoteCoreE4,\r\n            \"quorum to apply proposal is more than or equal to minimum commitment\"\r\n        );\r\n        require(\r\n            params.minCommitE4 <= MAX_MIN_COMMIT && params.minCommitE4 >= MIN_MIN_COMMIT,\r\n            \"minCommit should be in between the acceptable range\"\r\n        );\r\n        require(\r\n            params.minVoteE4 <= MAX_MIN_VOTE && params.minVoteE4 >= MIN_MIN_VOTE,\r\n            \"minVote should be in between the acceptable range\"\r\n        );\r\n        require(\r\n            params.minVoteCoreE4 <= MAX_MIN_VOTE && params.minVoteCoreE4 >= MIN_MIN_VOTE,\r\n            \"minVoteCore should be in between the acceptable range\"\r\n        );\r\n    }\r\n\r\n    function _generateUpdateCoreProposeId(CoreParameters memory proposal)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    \"Update Core\",\r\n                    proposal.preVoteLength,\r\n                    proposal.totalVoteLength,\r\n                    proposal.expirationLength,\r\n                    proposal.minVoteE4,\r\n                    proposal.minVoteCoreE4,\r\n                    proposal.minCommitE4\r\n                )\r\n            );\r\n    }\r\n\r\n    function _generateRegisterWhitelistProposeId(WhitelistParameters memory proposal)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encode(\"Register Whitelist\", proposal.tokenAddress, proposal.oracleAddress)\r\n            );\r\n    }\r\n\r\n    function _generateUnregisterWhitelistProposeId(DelistParameters memory proposal)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encode(\"Unregister Whitelist\", proposal.tokenAddress));\r\n    }\r\n\r\n    function _generateUpdateIncentiveProposeId(IncentiveParameters memory proposal)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    \"Update Incentive\",\r\n                    proposal.incentiveAddresses,\r\n                    proposal.incentiveAllocation\r\n                )\r\n            );\r\n    }\r\n\r\n    /* ========== CALL FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @return tax token address.\r\n     */\r\n    function getTaxTokenAddress() external view override returns (address) {\r\n        return address(_taxTokenContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current core parameters.\r\n     */\r\n    function getCoreParameters()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint32 preVoteLength,\r\n            uint32 totalVoteLength,\r\n            uint32 expirationLength,\r\n            uint16 minimumVoteE4,\r\n            uint16 minimumVoteCoreE4,\r\n            uint16 minimumCommitE4\r\n        )\r\n    {\r\n        preVoteLength = _preVoteLength;\r\n        totalVoteLength = _totalVoteLength;\r\n        expirationLength = _expirationLength;\r\n        minimumVoteE4 = _minimumVoteE4;\r\n        minimumVoteCoreE4 = _minimumVoteCoreE4;\r\n        minimumCommitE4 = _minimumCommitE4;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the deposit amount of the user for the proposal.\r\n     */\r\n    function getUserStatus(bytes32 proposeId, address userAddress)\r\n        external\r\n        view\r\n        override\r\n        returns (uint128 approvalAmount, uint128 denialAmount)\r\n    {\r\n        bytes32 account = keccak256(abi.encode(proposeId, userAddress));\r\n        VoteAmount memory amountOfVotes = _amountOfVotes[account];\r\n        approvalAmount = amountOfVotes.approval;\r\n        denialAmount = amountOfVotes.denial;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current status of the proposal.\r\n     */\r\n    function getStatus(bytes32 proposeId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint128 currentApprovalVoteSum,\r\n            uint128 currentDenialVoteSum,\r\n            uint128 appliedMinimumVote,\r\n            uint32 preVoteDeadline,\r\n            uint32 mainVoteDeadline,\r\n            uint32 expiration,\r\n            bool lockin,\r\n            bool applied\r\n        )\r\n    {\r\n        preVoteDeadline = _proposeStatus[proposeId].preVoteDeadline;\r\n        mainVoteDeadline = _proposeStatus[proposeId].mainVoteDeadline;\r\n        expiration = _proposeStatus[proposeId].expiration;\r\n        appliedMinimumVote = _proposeStatus[proposeId].appliedMinimumVote;\r\n        currentApprovalVoteSum = _proposeStatus[proposeId].currentApprovalVoteSum;\r\n        currentDenialVoteSum = _proposeStatus[proposeId].currentDenialVoteSum;\r\n        lockin = _proposeStatus[proposeId].lockin;\r\n        applied = _proposeStatus[proposeId].applied;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the status of multiple proposals.\r\n     * @param offset is a proposal index. If 0 is given, this function searches from the latest proposal.\r\n     * @param limit is the number of proposals you query. If 0 is given, this function returns all proposals.\r\n     * @return allProposals which is the list of the from `[..., proposeId_k, votingResult_k, otherProposalStatus_k, ...]`\r\n     *  (k = offset, ..., offset - limit + 1), where votingResult_k is the binary of the form.\r\n     * `currentApprovalVoteSum_k << 128 | currentDenialVoteSum_k` and otherProposalStatus_k is the binary of the form.\r\n     * `appliedMinimumVote_k << 128 | preVoteDeadline_k << 96 | mainVoteDeadline_k << 64 | expiration_k << 32\r\n     *                              | lockin_k << 24 | applied_k << 16`.\r\n     */\r\n    function getProposals(uint256 offset, uint256 limit)\r\n        external\r\n        view\r\n        override\r\n        returns (bytes32[] memory allProposals)\r\n    {\r\n        if (offset == 0 || offset >= _proposalList.length) {\r\n            offset = _proposalList.length - 1;\r\n        }\r\n\r\n        if (limit == 0 || limit > offset) {\r\n            limit = offset;\r\n        }\r\n\r\n        allProposals = new bytes32[](3 * limit);\r\n        for (uint256 i = 0; i < limit; i++) {\r\n            bytes32 proposeId = _proposalList[offset - i];\r\n            ProposeStatus memory proposeStatus = _proposeStatus[proposeId];\r\n            allProposals[3 * i] = proposeId;\r\n            allProposals[3 * i + 1] = abi.decode(\r\n                abi.encodePacked(\r\n                    proposeStatus.currentApprovalVoteSum,\r\n                    proposeStatus.currentDenialVoteSum\r\n                ),\r\n                (bytes32)\r\n            );\r\n            allProposals[3 * i + 2] = abi.decode(\r\n                abi.encodePacked(\r\n                    proposeStatus.appliedMinimumVote,\r\n                    proposeStatus.preVoteDeadline,\r\n                    proposeStatus.mainVoteDeadline,\r\n                    proposeStatus.expiration,\r\n                    proposeStatus.lockin,\r\n                    proposeStatus.applied,\r\n                    bytes2(0) // padding\r\n                ),\r\n                (bytes32)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get the info of the updating core parameters proposal.\r\n     */\r\n    function getInfoUpdateCoreParameters(bytes32 proposeId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint64 preVoteLength,\r\n            uint64 totalVoteLength,\r\n            uint64 expirationLength,\r\n            uint16 minVoteE4,\r\n            uint16 minVoteCoreE4,\r\n            uint16 minCommitE4\r\n        )\r\n    {\r\n        preVoteLength = _proposeUpdateCore[proposeId].preVoteLength;\r\n        totalVoteLength = _proposeUpdateCore[proposeId].totalVoteLength;\r\n        expirationLength = _proposeUpdateCore[proposeId].expirationLength;\r\n        minVoteE4 = _proposeUpdateCore[proposeId].minVoteE4;\r\n        minVoteCoreE4 = _proposeUpdateCore[proposeId].minVoteCoreE4;\r\n        minCommitE4 = _proposeUpdateCore[proposeId].minCommitE4;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the info of the listing proposal.\r\n     */\r\n    function getInfoUpdateWhitelist(bytes32 proposeId)\r\n        external\r\n        view\r\n        override\r\n        returns (address tokenAddress, address oracleAddress)\r\n    {\r\n        tokenAddress = _proposeList[proposeId].tokenAddress;\r\n        oracleAddress = _proposeList[proposeId].oracleAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the info of the delisting proposal.\r\n     */\r\n    function getInfoDelistWhitelist(bytes32 proposeId)\r\n        external\r\n        view\r\n        override\r\n        returns (address tokenAddress)\r\n    {\r\n        tokenAddress = _proposeDelist[proposeId].tokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the info of the updating incentive proposal.\r\n     */\r\n    function getInfoUpdateIncentive(bytes32 proposeId)\r\n        external\r\n        view\r\n        override\r\n        returns (address[] memory incentiveAddresses, uint256[] memory incentiveAllocation)\r\n    {\r\n        incentiveAddresses = _proposeUpdateIncentive[proposeId].incentiveAddresses;\r\n        incentiveAllocation = _proposeUpdateIncentive[proposeId].incentiveAllocation;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"preVoteLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalVoteLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expirationLength\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"minVoteE4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minVoteCoreE4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minCommitE4\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"LogApprovedProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approval\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"preVoteDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"mainVoteDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"}],\"name\":\"LogProposeDelistWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"preVoteLength\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalVoteLength\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationLength\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minVoteE4\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minVoteCoreE4\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minCommitE4\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"preVoteDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"mainVoteDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"}],\"name\":\"LogProposeUpdateCoreParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"incentiveAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"incentiveAllocation\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"preVoteDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"mainVoteDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"}],\"name\":\"LogProposeUpdateIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"preVoteDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"mainVoteDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"}],\"name\":\"LogProposeUpdateWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"preVoteLength\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalVoteLength\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationLength\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minVoteE4\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minVoteCoreE4\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minCommitE4\",\"type\":\"uint16\"}],\"name\":\"LogUpdateCoreParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"applyGovernanceForDelistWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"applyGovernanceForUpdateCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"applyGovernanceForUpdateIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"applyGovernanceForUpdateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoreParameters\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"preVoteLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalVoteLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expirationLength\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"minimumVoteE4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minimumVoteCoreE4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minimumCommitE4\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"getInfoDelistWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"getInfoUpdateCoreParameters\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"preVoteLength\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalVoteLength\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationLength\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minVoteE4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minVoteCoreE4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minCommitE4\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"getInfoUpdateIncentive\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"incentiveAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"incentiveAllocation\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"getInfoUpdateWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getProposals\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"allProposals\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"currentApprovalVoteSum\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentDenialVoteSum\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"appliedMinimumVote\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"preVoteDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mainVoteDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"lockin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"applied\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStatus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"approvalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denialAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"lockinProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"proposeDelistWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"preVoteLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalVoteLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expirationLength\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"minVoteE4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minVoteCoreE4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minCommitE4\",\"type\":\"uint16\"}],\"name\":\"proposeUpdateCoreParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"incentiveAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"incentiveAllocation\",\"type\":\"uint256[]\"}],\"name\":\"proposeUpdateIncentiveFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"proposeUpdateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"approval\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposeId\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Governance","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"000000000000000000000000b6a439237b6705df8f6cd8e285a41c1e9a8a6a950000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000127500000000000000000000000000000000000000000000000000000000000003f48000000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb92ba70f660a2aaf42eeaa0a4ddd173c75de872d33c9476ad7b61465179f610"}]}