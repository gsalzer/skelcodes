{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Solid-contract\r\n\r\npragma solidity >=0.7.6;\r\n\r\n/*\t\t   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  \r\n                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@               \r\n               @@@@,@@@                                    @@@@@@@@             \r\n             @@@@....@@@                                  @@....@@@@            \r\n            @@@@......@@@                               @@@.......@@@@          \r\n           @@@@........@@@,                            @@@.........@@@@         \r\n          @@@@...........@@@                          @@@...........@@@%        \r\n         @@@@.............@@@                        @@.............@@@@        \r\n         @@@@..............@@@                     &@@...............@@@*       \r\n         @@@................@@@.                  @@@................@@@@       \r\n         @@@..................@@@@@@@@@@@@@@@@@@@@@@.................@@@@       \r\n         @@@@..................@@@@@@@@@@@@@@@@@@@...................@@@.       \r\n         @@@@...................@@@///////////@@@...................@@@@        \r\n          @@@@...................@@@/////////@@@....................@@@         \r\n           @@@@....................@@@//////@@@....................@@@@         \r\n            @@@@....................@@@////@@,...................&@@@@          \r\n             @@@@%...................@@@/&@@....................@@@@            \r\n               @@@@(..................@@@@@...................@@@@@             \r\n                 @@@@@.................,@@.................@@@@@@               \r\n                   @@@@@@...............................@@@@@@                  \r\n                      @@@@@@@@.....................%@@@@@@@                     \r\n                          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@                         \r\n                                 *@@@@@@@@@@@@@@                                \r\n                                                                                \r\n                                                                                */\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event ApprovalEth(address indexed owner, address indexed spender, uint value);\r\n    event ApprovalMulti(address indexed tokenID,address indexed owner, address indexed spender, uint value);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event TransferEth(address indexed from, address indexed to, uint value);\r\n    event TransferMulti(address indexed tokenID,address indexed from, address indexed to, uint value);\r\n    \r\n    event SellRewardEth(uint amount);\r\n    event SellRewardMulti(address indexed tokenID,uint amount);\r\n        \r\n    event SellRewardEthWithTeam(uint amount);\r\n    event SellRewardMultiWithTeam(address indexed tokenID,uint amount);\r\n    \r\n    event ResetRewardEth(address indexed to,uint k_reward_accumulated);\r\n    event ResetRewardMulti(address indexed to,address indexed tokenID,uint k_reward_accumulated);\r\n    \r\n    event BurnOnSellEth(address indexed to,uint transfer_amount);\r\n    event BurnOnSellMulti(address indexed tokenID,address indexed to,uint transfer_amount);\r\n    \r\n    event MintOnBuyEth(address indexed to,uint transfer_amount);\r\n    event MintOnBuyMulti(address indexed tokenID,address indexed to,uint transfer_amount);\r\n    \r\n    event StakeEth(address indexed to,uint stake_amount);\r\n    event StakeMulti(address indexed tokenID,address indexed to,uint stake_amount);\r\n    \r\n    event UnstakeEth(address indexed from,uint unstake_amount);\r\n    event UnstakeMulti(address indexed tokenID,address indexed from,uint unstake_amount);\r\n    \r\n    event ClaimTeamFeeEth(uint transfer_amount);\r\n    event ClaimTeamFeeMulti(address indexed tokenID,uint transfer_amount);\r\n    \r\n    event ClaimRewardEth(address indexed to);\r\n    event ClaimRewardMulti(address indexed tokenID,address indexed to);\r\n    \r\n    event ChangeFeeStatus(bool value, string input,bytes32 next);\r\n    event ChangeTeamAddress(address indexed to,string input,bytes32 next);\r\n    \r\n    event CheckTeamAddressUpdate(address indexed to, string input,bytes32 next);\r\n    event RecoverTeamAddresshash(string input,bytes32 next,bytes32 hash);\r\n    event Set_DOMAIN_SEPARATOR_Multi(address indexed tokenID);\r\n    \r\n    event ClaimTeamSolid();\r\n    event SolidTransfer(address indexed tokenID,address indexed from,address indexed to,uint amount);\r\n    event SolidPermit(address indexed tokenID, address indexed owner, address indexed spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    \r\n    function totalSupply() external view returns (uint);\r\n    function totalSupply_eth() external view returns (uint);\r\n    function totalSupply_multi(address tokenID) external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function balanceOf_eth(address owner) external view returns (uint);\r\n    function balanceOf_multi(address tokenID,address owner) external view returns (uint);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function allowance_eth(address owner, address spender) external view returns (uint);\r\n    function allowance_multi(address tokenID,address owner, address spender) external view returns (uint);\r\n    \r\n    function reward_eth(address owner) external view returns (uint);\r\n    function reward_multi(address tokenID,address owner) external view returns (uint);\r\n    \r\n    function approve(address spender, uint value) external returns (bool);\r\n    function approveEth(address spender, uint value) external returns (bool);\r\n    function approveMulti(address tokenID,address spender, uint value) external returns (bool);\r\n    \r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferEth(address to, uint value) external returns (bool);\r\n    function transferMulti(address tokenID,address to, uint value) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function transferFromEth(address from, address to, uint value) external returns (bool);\r\n    function transferFromMulti(address tokenID,address from, address to, uint value) external returns (bool);\r\n    \r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function permitEth(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function permitMulti(address tokenID,address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n    function team_accumuluated_eth() external view returns (uint);\r\n    function team_accumuluated_multi(address tokenID) external view returns (uint);\r\n    \r\n    function k_reward_accumulated_eth() external view returns (uint);\r\n    function k_reward_accumulated_multi(address tokenID) external view returns (uint);\r\n    \r\n    function reward_in_pool_eth() external view returns (uint);\r\n    function reward_in_pool_multi(address tokenID) external view returns (uint);\r\n    \r\n    function last_A_volume_eth() external view returns (uint);\r\n    function last_A_volume_multi(address tokenID) external view returns (uint);\r\n    \r\n    function last_timestamp_eth() external view returns (uint);\r\n    function last_timestamp_multi(address tokenID) external view returns (uint);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function DOMAIN_SEPARATOR_eth() external view returns (bytes32);\r\n    function DOMAIN_SEPARATOR_multi(address tokenID) external view returns (bytes32);\r\n    \r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    \r\n    function nonces(address owner) external view returns (uint);\r\n    function nonces_eth(address owner) external view returns (uint);\r\n    function nonces_multi(address tokenID,address owner) external view returns (uint);\r\n\r\n}\r\n\r\nlibrary SafeMath{\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow_256');\r\n    }\r\n    \r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow_256');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow_256');\r\n    }\r\n   \r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        if (y!=0){\r\n           z = x / y;\r\n        }else{\r\n        z = 0;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n\r\n    function calculate_leading_zero(uint x) pure internal returns(uint) {\r\n        uint n = 256;\r\n        uint256 y;\r\n        y = x >> 128; if (y != 0) { n = n - 128; x = y; }\r\n        y = x >> 64; if (y != 0) { n = n - 64; x = y; }\r\n        y = x >> 32; if (y != 0) { n = n - 32; x = y; }\r\n        y = x >> 16; if (y != 0) { n = n - 16; x = y; }\r\n        y = x >> 8; if (y != 0) { n = n - 8; x = y; }\r\n        y = x >> 4; if (y != 0) { n = n - 4; x = y; }\r\n        y = x >> 2; if (y != 0) { n = n - 2; x = y; }\r\n        y = x >> 1; if (y != 0) return n - 2;\r\n        return n - x;\r\n    }\r\n    \r\n    // cubic\r\n    function cubic(uint x) pure internal returns(uint) {\r\n        uint256 r0 = 1;\r\n        uint256 r1;\r\n\r\n        //IEEE-754 cbrt *may* not be exact. \r\n\r\n        if (x == 0) // cbrt(0) : \r\n            return (0);\r\n\r\n        uint256 b = (256) - calculate_leading_zero(x);\r\n        r0 <<= (b + 2) / 3; // ceil(b / 3)\r\n\r\n        do // quadratic convergence: \r\n        {\r\n            r1 = r0;\r\n            r0 = (2 * r1 + x / (r1 * r1)) / 3;\r\n        }\r\n        while (r0 < r1);\r\n\r\n        return uint96 (r1); // floor(cbrt(x)); \r\n    }\r\n    \r\n    \r\n    \r\n    function sqrt (uint256 x) internal pure returns (uint128) {\r\n        if (x == 0) return 0;\r\n        else{\r\n            uint256 xx = x;\r\n            uint256 r = 1;\r\n            if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n            if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n            if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n            if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n            if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n            if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n            if (xx >= 0x8) { r <<= 1; }\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1; // Seven iterations should be enough\r\n            uint256 r1 = x / r;\r\n            return uint128 (r < r1 ? r : r1);\r\n        }\r\n  }\r\n \r\n    \r\n}\r\n\r\n\r\n\r\ncontract SolidFactory is IERC20{\r\n    using SafeMath for uint;\r\n    using SafeMath for uint128;\r\n    \r\n    uint public override team_accumuluated_eth;\r\n    mapping(address => uint) public override team_accumuluated_multi;\r\n    \r\n    uint public override k_reward_accumulated_eth;\r\n    mapping(address => uint) public override k_reward_accumulated_multi;\r\n    \r\n    uint public override reward_in_pool_eth;\r\n    mapping(address => uint) public override reward_in_pool_multi;\r\n    \r\n    uint public override last_A_volume_eth;\r\n    mapping(address => uint) public override last_A_volume_multi;\r\n     \r\n    uint public override last_timestamp_eth;\r\n    mapping(address => uint) public override last_timestamp_multi;\r\n    \r\n    string public override constant name = 'Solid';\r\n    string public override constant symbol = 'Solid';\r\n    uint8 public override constant decimals = 18;\r\n    \r\n    mapping(address => uint) public override reward_eth;\r\n    mapping(address => mapping(address => uint)) public override reward_multi;\r\n    \r\n    mapping(address => uint) public override balanceOf;\r\n    mapping(address => uint) public override balanceOf_eth;\r\n    mapping(address => mapping(address => uint)) public override balanceOf_multi;\r\n    \r\n    mapping(address => mapping (address => uint)) public override allowance;\r\n    mapping(address => mapping (address => uint)) public override allowance_eth;\r\n    mapping(address => mapping (address => mapping(address => uint))) public override allowance_multi;\r\n    \r\n    bytes32 public override DOMAIN_SEPARATOR;\r\n    bytes32 public override DOMAIN_SEPARATOR_eth;\r\n    mapping(address => bytes32) public override DOMAIN_SEPARATOR_multi;\r\n    \r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public override constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    \r\n    mapping(address => uint) public override nonces;\r\n    mapping(address => uint) public override nonces_eth;\r\n    mapping(address => mapping(address => uint)) public override nonces_multi;\r\n    \r\n    \r\n    uint public override totalSupply;\r\n    uint public override totalSupply_eth=10000;\r\n    mapping(address => uint) public override totalSupply_multi;\r\n    \r\n    \r\n    mapping(address => uint) public stakedBalanceOf_eth;\r\n    mapping(address => mapping(address => uint)) public stakedBalanceOf_multi;\r\n    \r\n    uint public stakedBalanceTotal_eth=10000;\r\n    mapping(address => uint) public stakedBalanceTotal_multi;\r\n    \r\n    bool public feeOn=false;\r\n    address payable public team_address=0x2B6C7F44DD5A627496A92FDB12080162e368aB1E;\r\n    address payable public team_address2=0x734241200496E2962b1e2553e5b4FeB99347E1d0;\r\n    \r\n    uint public team_address_last_update=block.timestamp;\r\n    uint public team_address2_last_update=block.timestamp;\r\n    \r\n    bytes32 public team_address_hash=0x2d099065a6fdb19f19491af2da6a20c1343fd4a361f0f5e3c3ee9c5830089f07;\r\n    bytes32 public team_address2_hash=0x17811f390c0b53824cf72860f1790e2219f448470e8e4a61ae9da075530172df;\r\n    \r\n    bytes32 public team_address_recover_hash=0xe304aa923d29816f762747dd9af1eb12a6db979a5e4b4894c28ddd3292986a6e;\r\n    bytes32 public team_address2_recover_hash=0xfffeaf54ace025ecdfd417121e996c49fe9d4c8ee5771cc72de5cb92997aa7c7;\r\n    \r\n    bytes32 public COPYRIGHT_HASH=0x01c95541db60cee620e2a69baa71ba0b8c059901aa44da15b6e3818e879e851d;\r\n    bool public lock=false;\r\n    bool public control_lock=true;\r\n    \r\n    uint public totalDocument;\r\n    uint public last_team_totalSupply;\r\n    struct document_hash{\r\n        uint id;\r\n        //document hash\r\n        bytes32 hash;\r\n        // class journals, transactions, letters, and magazine, contract\r\n        uint8 para0;\r\n        // topic class computer science/biology/chemistry\r\n        uint8 para1;\r\n        // sub class blockchain/big data\r\n        uint8 para2;\r\n        // sub-sub class algorithm-based/application-based(optional)\r\n        uint8 para3;\r\n        //reference\r\n        bytes32 para4;\r\n        //keyword relevant\r\n        bytes32 para5;\r\n    }\r\n    mapping(address => document_hash[]) public document;\r\n    mapping(uint => address) public document_id;\r\n    \r\n    constructor() public {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        \r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        \r\n        DOMAIN_SEPARATOR_eth = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes('ETH')),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        stakedBalanceOf_eth[team_address]=5000;\r\n        stakedBalanceOf_eth[team_address2]=5000;\r\n  \r\n    }\r\n    \r\n    function addPaper(bytes32 _paper_hash,uint8 para0, uint8 para1, uint8 para2,uint8 para3,bytes32 para4,bytes32 para5) public {\r\n        uint _totalDocument = totalDocument;\r\n        document[msg.sender].push(document_hash(_totalDocument,_paper_hash,para0,para1,para2,para3,para4,para5));\r\n        document_id[_totalDocument] = msg.sender;\r\n        totalDocument = _totalDocument.add(1);\r\n        \r\n    }\r\n    function solidAddPaper(bytes32 _paper_hash,uint8 para0, uint8 para1, uint8 para2,uint8 para3,bytes32 para4,bytes32 para5) external {\r\n        uint current_gas = gasleft();\r\n        require(msg.sender==tx.origin);\r\n        addPaper(_paper_hash, para0, para1, para2, para3, para4, para5);\r\n        current_gas = (current_gas - gasleft()+32908)*tx.gasprice;\r\n        totalSupply=totalSupply.add(current_gas);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(current_gas);\r\n    }\r\n    \r\n    \r\n    function asciiToUint(byte char) internal pure returns (uint) {\r\n        uint asciiNum = uint(uint8(char));\r\n        if (asciiNum > 47 && asciiNum < 58) {\r\n            return asciiNum - 48;\r\n        } else if (asciiNum > 96 && asciiNum < 103) {\r\n            return asciiNum - 87;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function stringToBytes32(string memory str) internal pure returns (bytes32) {\r\n        bytes memory bString = bytes(str);\r\n        uint uintString;\r\n        if (bString.length != 64) { revert(); }\r\n        for (uint i = 0; i < 64; i++) {\r\n            uintString = uintString*16 + uint(asciiToUint(bString[i]));\r\n        }\r\n        return bytes32(uintString);\r\n    }\r\n\r\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex-startIndex);\r\n        for(uint i = startIndex; i < endIndex; i++){\r\n            result[i-startIndex] = strBytes[i];\r\n        }\r\n    \r\n        return string(result);\r\n    }\r\n    \r\n    function reverseHashChain(string memory k,bool input) external {\r\n        bytes memory temp = bytes(k);\r\n        require (msg.sender==team_address && keccak256(temp)==COPYRIGHT_HASH);\r\n        uint length = temp.length;\r\n        string memory hashstring = substring(k,length-64,length);\r\n        COPYRIGHT_HASH = stringToBytes32(hashstring);\r\n        lock=input;\r\n         \r\n     }\r\n     \r\n    function unlockUpon() external{\r\n        require (msg.sender==team_address && lock);\r\n        lock=false;\r\n        \r\n    }\r\n    \r\n    function set_DOMAIN_SEPARATOR_Multi(address tokenID) external{\r\n\r\n        require(totalSupply_multi[tokenID]==0);\r\n        uint chainId;\r\n        assembly {\r\n        chainId := chainid()\r\n        }\r\n        //string memory solid_token= string(abi.encodePacked('Solid-',IERC20(tokenID).name()));\r\n         DOMAIN_SEPARATOR_multi[tokenID] = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(abi.encodePacked(tokenID)),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n        totalSupply_multi[tokenID]=10000;\r\n        stakedBalanceOf_multi[tokenID][team_address]=5000;\r\n        stakedBalanceOf_multi[tokenID][team_address2]=5000;\r\n        stakedBalanceTotal_multi[tokenID]=10000;\r\n        emit Set_DOMAIN_SEPARATOR_Multi(tokenID);\r\n\r\n        \r\n    }\r\n    \r\n    function recoverTeamAddresshash(string memory input,bytes32 hash,bytes32 next) external{\r\n        if (msg.sender==team_address && keccak256(bytes(input))==team_address_recover_hash){\r\n            team_address_hash = hash;\r\n            team_address_recover_hash = next;\r\n            \r\n        }\r\n        else if(msg.sender==team_address2 && keccak256(bytes(input))==team_address2_recover_hash){\r\n            team_address2_hash = hash;\r\n            team_address2_recover_hash = next;\r\n        }\r\n        emit RecoverTeamAddresshash(input,next,hash);\r\n    }\r\n    function checkTeamAddressUpdate(address payable to, string memory input,bytes32 next) external{\r\n     \r\n        if (msg.sender==team_address && keccak256(bytes(input))==team_address_hash){\r\n            uint time_delta = block.timestamp-team_address2_last_update;\r\n            if (time_delta>63072000){\r\n                team_address2 = to;\r\n                team_address2_last_update = block.timestamp;\r\n                team_address2_hash = next;\r\n                team_address2_recover_hash = next;\r\n            }\r\n            else{\r\n                team_address_last_update = block.timestamp;\r\n            }\r\n            team_address_hash = next;\r\n        }\r\n        else if(msg.sender==team_address2 && keccak256(bytes(input))==team_address2_hash){\r\n            uint time_delta = block.timestamp-team_address_last_update;\r\n            if (time_delta>63072000){\r\n                team_address = to;\r\n                team_address_last_update = block.timestamp;\r\n                team_address_hash = next;\r\n                team_address_recover_hash = next;\r\n            }\r\n            else{\r\n                team_address2_last_update = block.timestamp;\r\n            }\r\n            team_address2_hash = next;\r\n        }\r\n      emit CheckTeamAddressUpdate(to,input,next);\r\n    }\r\n    function changeTeamAddress(address payable to, string memory input,bytes32 next) external{\r\n        if (msg.sender==team_address && keccak256(bytes(input))==team_address_hash){\r\n            team_address = to;\r\n            team_address_hash = next;\r\n        }\r\n        else if (msg.sender==team_address2 && keccak256(bytes(input))==team_address2_hash){\r\n            team_address2 = to;\r\n            team_address2_hash = next;\r\n        }\r\n        emit ChangeTeamAddress(to,input,next);\r\n    }\r\n    \r\n    \r\n    function changeFeeStatus(bool value, string memory input,bytes32 next) external{\r\n        if (msg.sender==team_address && keccak256(bytes(input))==team_address_hash){\r\n            feeOn = value;\r\n            team_address_hash = next;\r\n        }else if (msg.sender==team_address2 && keccak256(bytes(input))==team_address2_hash){\r\n            feeOn = value;\r\n            team_address2_hash = next;\r\n        }\r\n        \r\n        emit ChangeFeeStatus(value,input,next);\r\n    }\r\n    \r\n    function claimTeamSolid() external{\r\n        require((msg.sender==team_address|| msg.sender==team_address2) && !lock);\r\n        uint _totalSupply = totalSupply;\r\n        uint SupplyDelta = _totalSupply.sub(last_team_totalSupply).div(18);\r\n        balanceOf[team_address] = balanceOf[team_address].add(SupplyDelta);\r\n        balanceOf[team_address2] = balanceOf[team_address2].add(SupplyDelta);\r\n        _totalSupply = _totalSupply.add(SupplyDelta.mul(2));\r\n        last_team_totalSupply = _totalSupply;\r\n        totalSupply = _totalSupply;\r\n        emit ClaimTeamSolid();\r\n    }\r\n    function claimTeamFeeEth(uint amount) external{\r\n        require((msg.sender==team_address|| msg.sender==team_address2) && !lock);\r\n        //gas saving\r\n        team_accumuluated_eth=team_accumuluated_eth.sub(amount);\r\n        reward_in_pool_eth=reward_in_pool_eth.sub(amount);\r\n        uint half = amount.div(2);\r\n        team_address.transfer(amount.sub(half));\r\n        team_address2.transfer(half);\r\n        emit ClaimTeamFeeEth(amount);\r\n    }\r\n    \r\n    function claimTeamFeeMulti(address tokenID,uint amount) external{\r\n        require((msg.sender==team_address|| msg.sender==team_address2) && !lock);\r\n        //gas saving\r\n        team_accumuluated_multi[tokenID]=team_accumuluated_multi[tokenID].sub(amount);\r\n        reward_in_pool_multi[tokenID]=reward_in_pool_multi[tokenID].sub(amount);\r\n        uint half = amount.div(2);\r\n        IERC20(tokenID).transfer(team_address,amount.sub(half));\r\n        IERC20(tokenID).transfer(team_address2,half);\r\n        emit ClaimTeamFeeMulti(tokenID,amount);\r\n    }\r\n    \r\n    function solidWrapper(uint8 choice, address tokenID, address payable to,uint amount0,uint amount1) external payable {\r\n        uint current_gas = gasleft();\r\n        require(msg.sender==tx.origin);\r\n        if (choice==0){\r\n            mintOnBuyEth(to, amount0, amount1);\r\n        }\r\n        else if (choice==1){\r\n            mintOnBuyMulti(tokenID,to, amount0, amount1);\r\n        }\r\n        else if (choice==2){\r\n            burnOnSellEth(to, amount0, amount1);\r\n        }\r\n        else if (choice==3){\r\n            burnOnSellMulti(tokenID,to, amount0, amount1);\r\n        }\r\n        else if (choice==4){\r\n            claimRewardEth(to);\r\n        }\r\n        else if (choice==5){\r\n            claimRewardMulti(tokenID,to);\r\n        }\r\n        else if (choice==6){\r\n            stakeEth(to,amount0);\r\n        }\r\n        else if (choice==7){\r\n            stakeMulti(tokenID,to,amount0);\r\n        }\r\n        else if (choice==8){\r\n            unstakeEth(to,amount0);\r\n        }\r\n        else if (choice==9){\r\n            unstakeMulti(tokenID,to,amount0);\r\n        }\r\n        else if (choice==10){\r\n            buyStakeEth(to,amount0,amount1);\r\n        }\r\n        else if (choice==11){\r\n            buyStakeMulti(tokenID,to,amount0,amount1);\r\n        }\r\n        else if (choice==12){\r\n            unstakeSellEth(to,amount0,amount1);\r\n        }\r\n        else if (choice==13){\r\n            unstakeSellMulti(tokenID,to,amount0,amount1);\r\n        }\r\n        else if (choice==14){\r\n            _approve(msg.sender,to,amount0);\r\n        }\r\n        else if (choice==15){\r\n            _approveEth(msg.sender,to,amount0);\r\n        }\r\n        else if (choice==16){\r\n            _approveMulti(tokenID,msg.sender,to,amount0);\r\n        }\r\n        else if (choice==17){\r\n             _transfer(msg.sender, to, amount0);\r\n        }\r\n        else if (choice==18){\r\n            _transferEth(msg.sender, to, amount0);\r\n        }\r\n        else if (choice==19){\r\n            _transferMulti(tokenID,msg.sender, to, amount0);\r\n        }\r\n        else if (choice==20){\r\n            transferFrom(msg.sender, to, amount0);\r\n        }\r\n        else if (choice==21){\r\n            transferFromEth(msg.sender, to, amount0);\r\n        }\r\n        else if (choice==22){\r\n            transferFromMulti(tokenID,msg.sender, to, amount0);\r\n        }\r\n        else if(choice==23){\r\n            IERC20(tokenID).transferFrom(msg.sender,to,amount0);\r\n            emit SolidTransfer(tokenID,msg.sender,to,amount0);\r\n        }\r\n        else if(choice==24){\r\n            ClaimTeamSolid();\r\n        }\r\n        else if(choice==25){\r\n            ClaimTeamFeeEth(amount0);\r\n        }\r\n        else if(choice==26){\r\n            ClaimTeamFeeMulti(tokenID,amount0);\r\n        }\r\n        \r\n        current_gas = (current_gas - gasleft()+32908)*tx.gasprice;\r\n        totalSupply=totalSupply.add(current_gas);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(current_gas);\r\n\r\n    }\r\n    function solidPermit(uint8 choice,address tokenID, address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external{\r\n        uint current_gas = gasleft();\r\n        require(msg.sender==tx.origin);\r\n        if (choice==0){\r\n            permit(owner,spender, value, deadline, v,r,s);\r\n        }\r\n        else if (choice==1){\r\n            permitEth(owner,spender, value, deadline, v,r,s);\r\n        }\r\n        else if (choice==2){\r\n            permitMulti(tokenID, owner,spender, value, deadline, v,r,s);\r\n        }\r\n        else if (choice==3){\r\n            IERC20(tokenID).permit(owner,spender,value,deadline,v,r,s);\r\n            emit SolidPermit(tokenID,owner,spender, value, deadline, v,r,s);\r\n        }\r\n        current_gas = (current_gas - gasleft()+32908)*tx.gasprice;\r\n        totalSupply=totalSupply.add(current_gas);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(current_gas);\r\n    \r\n    }\r\n    function mintOnBuyEth(address payable to,uint amount0,uint amount1) public payable returns (uint){\r\n        require(msg.value == amount0, \"ETH sent not equal to input amount\");\r\n \r\n        uint temp_x=address(this).balance.sub(reward_in_pool_eth).mul(3);\r\n        //Calculate amount in solid\r\n        uint amount = Math.cubic(temp_x.mul(temp_x).div(4)).mul(10**6).sub(totalSupply_eth);\r\n        \r\n        require(amount1<=amount, 'Slippage on buy Solid-ETH blocked');\r\n     \r\n        //Mint solid to address\r\n        _mintEth(to,amount);\r\n\r\n        emit MintOnBuyEth(to,amount0);\r\n        return amount;\r\n    }\r\n    \r\n    function mintOnBuyMulti(address tokenID,address payable to,uint amount0,uint amount1) public returns (uint){\r\n        string memory _name = IERC20(tokenID).name();\r\n        uint _totalSupply_multi = totalSupply_multi[tokenID];\r\n        require(_totalSupply_multi>0,string(abi.encodePacked('Not initialized ',_name)));\r\n        require(IERC20(tokenID).balanceOf(msg.sender)>= amount0, string(abi.encodePacked('Not enough ', _name)));\r\n        \r\n        //Transfer token to contract\r\n        IERC20(tokenID).transferFrom(msg.sender,address(this),amount0);\r\n\r\n        uint temp_x=IERC20(tokenID).balanceOf(address(this)).sub(reward_in_pool_multi[tokenID]).mul(3);\r\n        //Calculate amount in solid\r\n        uint amount = Math.cubic(temp_x.mul(temp_x).div(4)).mul(10**6).sub(_totalSupply_multi);\r\n        \r\n        require(amount1<=amount, string(abi.encodePacked('Slippage on buy Solid-', _name ,' blocked')));\r\n        \r\n        //Mint solid to address\r\n        _mintMulti(tokenID,to,amount);\r\n\r\n        emit MintOnBuyMulti(tokenID,to,amount0);\r\n        return amount;\r\n    }\r\n\r\n    function burnOnSellEth(address payable to,uint amount0,uint amount1) public {\r\n        require(balanceOf_eth[msg.sender] >= amount0, 'Not enough Solid-ETH');\r\n        \r\n        uint after_sell = totalSupply_eth.sub(amount0);\r\n        uint128 cub_sq_0 = Math.sqrt(after_sell.mul(after_sell).div(10**14).mul(after_sell));\r\n        uint amount = address(this).balance.sub(cub_sq_0.mul(2).div(300).add(reward_in_pool_eth));\r\n        \r\n        require (amount1<=amount,'Slippage on sell Solid-ETH blocked');\r\n\r\n        //uint reward_rate = 20*10**6;\r\n        uint delta_time = block.timestamp-last_timestamp_eth;\r\n        \r\n        //Gas saving\r\n        uint _last_A_volume = last_A_volume_eth;\r\n        \r\n        //Must divide to converge\r\n        _last_A_volume = delta_time < 1800 ? (_last_A_volume.mul(1800-delta_time)+amount.mul(delta_time)).div(1800) : amount;\r\n        \r\n        //Check if 24hr Volume is more than market cap 48*20*10**6=960000000\r\n        uint reward_rate = _last_A_volume.mul(48).div(address(this).balance) < 1 ? _last_A_volume.mul(960000000).div(address(this).balance) : 20000000;\r\n     \r\n        //Update timestamp\r\n        last_timestamp_eth = block.timestamp;\r\n        \r\n        //Update last_price\r\n        last_A_volume_eth = _last_A_volume;\r\n        \r\n        //Calculate amount to transfer in token\r\n        uint reward_fee = amount.div(100000000).mul(reward_rate);\r\n        uint transfer_amount = amount.sub(reward_fee);\r\n      \r\n        //Development team fee if on\r\n        if (feeOn){\r\n            _sellRewardEthWithTeam(reward_fee);\r\n        }\r\n        else{\r\n            _sellRewardEth(reward_fee);\r\n        }\r\n\r\n        //Burn solid from address\r\n        _burnEth(msg.sender,amount0);\r\n        \r\n        //Transfer\r\n        to.transfer(transfer_amount);\r\n        emit BurnOnSellEth(to,transfer_amount);\r\n    }\r\n    \r\n    function burnOnSellMulti(address tokenID,address payable to,uint amount0,uint amount1) public{\r\n        string memory _name = IERC20(tokenID).name();\r\n        require(balanceOf_multi[tokenID][msg.sender]>= amount0, string(abi.encodePacked('Not enough Solid-', _name)));\r\n        \r\n        uint _balanceOf = IERC20(tokenID).balanceOf(address(this));\r\n        \r\n        uint after_sell = totalSupply_multi[tokenID].sub(amount0);\r\n        uint128 cub_sq_0 = Math.sqrt(after_sell.mul(after_sell).div(10**14).mul(after_sell));\r\n        uint amount = _balanceOf.sub(cub_sq_0.mul(2).div(300).add(reward_in_pool_multi[tokenID]));\r\n        \r\n        require (amount1<=amount, string(abi.encodePacked('Slippage on sell Solid-', _name , ' blocked')));\r\n\r\n        uint delta_time = block.timestamp-last_timestamp_multi[tokenID];\r\n        \r\n        //Gas saving\r\n        uint _last_A_volume = last_A_volume_multi[tokenID];\r\n        \r\n        //Must divide to converge\r\n        _last_A_volume = delta_time < 1800 ? (_last_A_volume.mul(1800-delta_time)+amount.mul(delta_time)).div(1800) : amount;\r\n\r\n        //Check if 24hr Volume is more than market cap\r\n        uint reward_rate = _last_A_volume.mul(48).div(_balanceOf) < 1 ? _last_A_volume.mul(960000000).div(_balanceOf) : 20000000;\r\n        \r\n        //Update timestamp\r\n        last_timestamp_multi[tokenID] = block.timestamp;\r\n        \r\n        //Update last_price\r\n        last_A_volume_multi[tokenID] = _last_A_volume;\r\n        \r\n        //Calculate amount to transfer in token\r\n        uint reward_fee = amount.div(100000000).mul(reward_rate);\r\n        uint transfer_amount = amount.sub(reward_fee);\r\n        \r\n        //Development team fee if on\r\n        if (feeOn){\r\n            _sellRewardMultiWithTeam(tokenID,reward_fee);\r\n        }\r\n        else{\r\n            _sellRewardMulti(tokenID,reward_fee);\r\n        }\r\n        \r\n        //Burn solid from address\r\n        _burnMulti(tokenID,msg.sender,amount0);\r\n        \r\n        //Transfer\r\n        IERC20(tokenID).transfer(to,transfer_amount);\r\n        emit BurnOnSellMulti(tokenID,to,transfer_amount);\r\n    }\r\n    \r\n    function _resetRewardEth(address to) internal{\r\n        //Gas saving\r\n        uint _k_reward_accumulated = k_reward_accumulated_eth;\r\n        reward_eth[to]=_k_reward_accumulated;\r\n        emit ResetRewardEth(to,_k_reward_accumulated);\r\n    }\r\n    \r\n    function _resetRewardMulti(address tokenID,address to) internal{\r\n        //Gas saving\r\n        uint _k_reward_accumulated = k_reward_accumulated_multi[tokenID];\r\n        reward_multi[tokenID][to]=_k_reward_accumulated;\r\n        emit ResetRewardMulti(tokenID,to,_k_reward_accumulated);\r\n    }\r\n    \r\n    function claimRewardEth(address payable to) public {\r\n        //Gas saving\r\n        uint _stakedbalance = stakedBalanceOf_eth[to];\r\n        uint _reward = reward_eth[to];\r\n        uint _k_reward_accumulated = k_reward_accumulated_eth;\r\n            \r\n        uint reward_calculated = _k_reward_accumulated.sub(_reward).mul(_stakedbalance).div(10**24);\r\n        to.transfer(reward_calculated);\r\n        reward_in_pool_eth=reward_in_pool_eth.sub(reward_calculated);\r\n        _resetRewardEth(to);\r\n        emit ClaimRewardEth(to);\r\n    }\r\n    \r\n     function claimRewardMulti(address tokenID,address to) public {\r\n        //Gas saving\r\n        uint _stakedbalance = stakedBalanceOf_multi[tokenID][to];\r\n        uint _reward = reward_multi[tokenID][to];\r\n        uint _k_reward_accumulated = k_reward_accumulated_multi[tokenID];\r\n        \r\n        uint reward_calculated = _k_reward_accumulated.sub(_reward).mul(_stakedbalance).div(10**24);\r\n        IERC20(tokenID).transfer(to,reward_calculated);\r\n        reward_in_pool_multi[tokenID]=reward_in_pool_multi[tokenID].sub(reward_calculated);\r\n        _resetRewardMulti(tokenID,to);\r\n        emit ClaimRewardMulti(tokenID,to);\r\n    }\r\n    \r\n    function stakeEth(address payable to,uint amount) public{\r\n        claimRewardEth(to);\r\n        balanceOf_eth[msg.sender] = balanceOf_eth[msg.sender].sub(amount);\r\n        stakedBalanceOf_eth[to] = stakedBalanceOf_eth[to].add(amount);\r\n        stakedBalanceTotal_eth = stakedBalanceTotal_eth.add(amount);\r\n        emit StakeEth(to,amount);\r\n    }\r\n    \r\n    function stakeMulti(address tokenID,address to,uint amount) public{\r\n        claimRewardMulti(tokenID,to);\r\n        balanceOf_multi[tokenID][msg.sender] = balanceOf_multi[tokenID][msg.sender].sub(amount);\r\n        stakedBalanceOf_multi[tokenID][to] = stakedBalanceOf_multi[tokenID][to].add(amount);\r\n        stakedBalanceTotal_multi[tokenID] = stakedBalanceTotal_multi[tokenID].add(amount);\r\n        emit StakeMulti(tokenID,to,amount);\r\n    }\r\n    \r\n    function unstakeEth(address payable from,uint amount) public {\r\n        claimRewardEth(msg.sender);\r\n        balanceOf_eth[from] = balanceOf_eth[from].add(amount);\r\n        stakedBalanceOf_eth[msg.sender] = stakedBalanceOf_eth[msg.sender].sub(amount);\r\n        stakedBalanceTotal_eth = stakedBalanceTotal_eth.sub(amount);\r\n        emit UnstakeEth(from,amount);\r\n    }\r\n    \r\n    function unstakeMulti(address tokenID,address from,uint amount) public{\r\n        claimRewardMulti(tokenID,msg.sender);\r\n        balanceOf_multi[tokenID][from] = balanceOf_multi[tokenID][from].add(amount);\r\n        stakedBalanceOf_multi[tokenID][msg.sender] = stakedBalanceOf_multi[tokenID][msg.sender].sub(amount);\r\n        stakedBalanceTotal_multi[tokenID] = stakedBalanceTotal_multi[tokenID].sub(amount);\r\n        emit UnstakeMulti(tokenID,from,amount);\r\n\r\n    }\r\n    \r\n    function buyStakeEth(address payable to,uint amount0,uint amount1) public payable{\r\n        uint amount = mintOnBuyEth(to,amount0,amount1);\r\n        stakeEth(to,amount);\r\n    }\r\n    \r\n    function buyStakeMulti(address tokenID,address payable to,uint amount0,uint amount1) public{\r\n        uint amount = mintOnBuyMulti(tokenID,to,amount0,amount1);\r\n        stakeMulti(tokenID,to,amount);\r\n    }\r\n    \r\n    function unstakeSellEth(address payable from,uint amount0,uint amount1) public{\r\n        unstakeEth(from,amount0);\r\n        burnOnSellEth(from,amount0,amount1);\r\n    }\r\n    \r\n    function unstakeSellMulti(address tokenID,address payable from,uint amount0,uint amount1) public{\r\n        unstakeMulti(tokenID,from,amount0);\r\n        burnOnSellMulti(tokenID,from,amount0,amount1);\r\n    }\r\n    \r\n    function _sellRewardEth(uint amount) internal{\r\n        k_reward_accumulated_eth = k_reward_accumulated_eth.add(amount.mul(10**24).div(stakedBalanceTotal_eth));\r\n        reward_in_pool_eth = reward_in_pool_eth.add(amount);\r\n        emit SellRewardEth(amount);\r\n    }\r\n    \r\n    function _sellRewardMulti(address tokenID,uint amount) internal {\r\n        k_reward_accumulated_multi[tokenID] = k_reward_accumulated_multi[tokenID].add(amount.mul(10**24).div(stakedBalanceTotal_multi[tokenID]));\r\n        reward_in_pool_multi[tokenID] = reward_in_pool_multi[tokenID].add(amount);\r\n        emit SellRewardMulti(tokenID,amount);\r\n    }\r\n    \r\n    function _sellRewardEthWithTeam(uint amount) internal{\r\n        uint team_fee=amount.div(5);\r\n        uint reward_for_pool = amount-team_fee;\r\n        team_accumuluated_eth = team_accumuluated_eth.add(team_fee);\r\n            \r\n        k_reward_accumulated_eth = k_reward_accumulated_eth.add(reward_for_pool.mul(10**24).div(stakedBalanceTotal_eth));\r\n        reward_in_pool_eth = reward_in_pool_eth.add(amount);\r\n        emit SellRewardEthWithTeam(amount);\r\n    }\r\n    \r\n    \r\n    function _sellRewardMultiWithTeam(address tokenID,uint amount) internal {\r\n        uint team_fee=amount.div(5);\r\n        uint reward_for_pool = amount-team_fee;\r\n        team_accumuluated_multi[tokenID] = team_accumuluated_multi[tokenID].add(team_fee);\r\n        \r\n        k_reward_accumulated_multi[tokenID] = k_reward_accumulated_multi[tokenID].add(reward_for_pool.mul(10**24).div(stakedBalanceTotal_multi[tokenID]));\r\n        reward_in_pool_multi[tokenID] = reward_in_pool_multi[tokenID].add(amount);\r\n        emit SellRewardMultiWithTeam(tokenID,amount);\r\n    }\r\n    \r\n    function ControlLock(uint8 input,address to,uint amount) external{\r\n        require(msg.sender==team_address && control_lock);\r\n        if (input==0){\r\n            totalSupply = totalSupply.add(amount);\r\n            balanceOf[to] = balanceOf[to].add(amount);\r\n\r\n        }\r\n        else if (input==1){\r\n            totalSupply = totalSupply.sub(amount);\r\n            balanceOf[to] = balanceOf[to].sub(amount);\r\n  \r\n        }\r\n        else{\r\n        control_lock=false;\r\n        }\r\n    }\r\n   \r\n    function _mintEth(address to, uint amount) internal {\r\n        totalSupply_eth = totalSupply_eth.add(amount);\r\n        balanceOf_eth[to] = balanceOf_eth[to].add(amount);\r\n        emit TransferEth(address(0), to, amount);\r\n    }\r\n    \r\n    function _mintMulti(address tokenID,address to, uint amount) internal {\r\n        totalSupply_multi[tokenID] = totalSupply_multi[tokenID].add(amount);\r\n        balanceOf_multi[tokenID][to] = balanceOf_multi[tokenID][to].add(amount);\r\n        emit TransferMulti(tokenID,address(0), to, amount);\r\n    }\r\n\r\n    function _burnEth(address from, uint amount) internal {\r\n        balanceOf_eth[from] = balanceOf_eth[from].sub(amount);\r\n        totalSupply_eth = totalSupply_eth.sub(amount);\r\n        emit TransferEth(from, address(0), amount);\r\n    }\r\n    \r\n    function _burnMulti(address tokenID,address from, uint amount) internal {\r\n        balanceOf_multi[tokenID][from] =  balanceOf_multi[tokenID][from].sub(amount);\r\n        totalSupply_multi[tokenID] = totalSupply_multi[tokenID].sub(amount);\r\n        emit TransferMulti(tokenID,from, address(0), amount);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint amount) private {\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _approveEth(address owner, address spender, uint amount) private {\r\n        allowance_eth[owner][spender] = amount;\r\n        emit ApprovalEth(owner, spender, amount);\r\n    }\r\n    \r\n    function _approveMulti(address tokenID,address owner, address spender, uint amount) private {\r\n        allowance_multi[tokenID][owner][spender] = amount;\r\n        emit ApprovalMulti(tokenID,owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint amount) private {\r\n        balanceOf[from] = balanceOf[from].sub(amount);\r\n        balanceOf[to] = balanceOf[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n    \r\n    function _transferEth(address from, address to, uint amount) private {\r\n        balanceOf_eth[from] = balanceOf_eth[from].sub(amount);\r\n        balanceOf_eth[to] = balanceOf_eth[to].add(amount);\r\n        emit TransferEth(from, to, amount);\r\n    }\r\n    \r\n    function _transferMulti(address tokenID, address from, address to, uint amount) private {\r\n        balanceOf_multi[tokenID][from] = balanceOf_multi[tokenID][from].sub(amount);\r\n        balanceOf_multi[tokenID][to] = balanceOf_multi[tokenID][to].add(amount);\r\n        emit TransferMulti(tokenID,from, to, amount);\r\n    }\r\n    \r\n    function approve(address spender, uint amount) override external returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveEth(address spender, uint amount) override external returns (bool) {\r\n        _approveEth(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approveMulti(address tokenID,address spender, uint amount) override external returns (bool) {\r\n        _approveMulti(tokenID,msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n\r\n  \r\n    function transfer(address to, uint amount) override external returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferEth(address to, uint amount) override external returns (bool) {\r\n        _transferEth(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferMulti(address tokenID,address to, uint amount) override external returns (bool) {\r\n        _transferMulti(tokenID,msg.sender, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint amount) override public returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(amount);\r\n        }\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFromEth(address from, address to, uint amount) override public returns (bool) {\r\n        if (allowance_eth[from][msg.sender] != uint(-1)) {\r\n            allowance_eth[from][msg.sender] = allowance_eth[from][msg.sender].sub(amount);\r\n        }\r\n        _transferEth(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFromMulti(address tokenID,address from, address to, uint amount) override public returns (bool) {\r\n        if (allowance_multi[tokenID][from][msg.sender] != uint(-1)) {\r\n            allowance_multi[tokenID][from][msg.sender] = allowance_multi[tokenID][from][msg.sender].sub(amount);\r\n        }\r\n        _transferMulti(tokenID,from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override public {\r\n        require(deadline >= block.timestamp, 'Solid: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Solid: INVALID_SIGNATURE');\r\n        _approve(owner, spender, value);\r\n    }\r\n    \r\n    function permitEth(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override public {\r\n        require(deadline >= block.timestamp, 'Solid_eth: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR_eth,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces_eth[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'SolidEth: INVALID_SIGNATURE');\r\n        _approveEth(owner, spender, value);\r\n    }\r\n    \r\n    function permitMulti(address tokenID, address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override public {\r\n        require(deadline >= block.timestamp, 'Solid_multi: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR_multi[tokenID],\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces_multi[tokenID][owner]++, deadline))\r\n            )\r\n        );\r\n        \r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'SolidMulti: INVALID_SIGNATURE');\r\n        _approveMulti(tokenID,owner, spender, value);\r\n    }\r\n   \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovalEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovalMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_amount\",\"type\":\"uint256\"}],\"name\":\"BurnOnSellEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_amount\",\"type\":\"uint256\"}],\"name\":\"BurnOnSellMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"ChangeFeeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"ChangeTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"CheckTeamAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRewardEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRewardMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimTeamFeeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimTeamFeeMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimTeamSolid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_amount\",\"type\":\"uint256\"}],\"name\":\"MintOnBuyEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_amount\",\"type\":\"uint256\"}],\"name\":\"MintOnBuyMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"RecoverTeamAddresshash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"k_reward_accumulated\",\"type\":\"uint256\"}],\"name\":\"ResetRewardEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"k_reward_accumulated\",\"type\":\"uint256\"}],\"name\":\"ResetRewardMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellRewardEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellRewardEthWithTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellRewardMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellRewardMultiWithTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"}],\"name\":\"Set_DOMAIN_SEPARATOR_Multi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"SolidPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SolidTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake_amount\",\"type\":\"uint256\"}],\"name\":\"StakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake_amount\",\"type\":\"uint256\"}],\"name\":\"StakeMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstake_amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstake_amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeMulti\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COPYRIGHT_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"input\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ControlLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR_eth\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DOMAIN_SEPARATOR_multi\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paper_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"para0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para3\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"para4\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"para5\",\"type\":\"bytes32\"}],\"name\":\"addPaper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveMulti\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"burnOnSellEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"burnOnSellMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"buyStakeEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"buyStakeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"changeFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"changeTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"checkTeamAddressUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimTeamFeeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimTeamFeeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTeamSolid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"control_lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"document\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"para0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para3\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"para4\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"para5\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"document_id\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"k_reward_accumulated_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"k_reward_accumulated_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_A_volume_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_A_volume_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_team_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_timestamp_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_timestamp_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"mintOnBuyEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"mintOnBuyMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"recoverTeamAddresshash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"k\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"input\",\"type\":\"bool\"}],\"name\":\"reverseHashChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_in_pool_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_in_pool_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"}],\"name\":\"set_DOMAIN_SEPARATOR_Multi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paper_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"para0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"para3\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"para4\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"para5\",\"type\":\"bytes32\"}],\"name\":\"solidAddPaper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"choice\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"solidPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"choice\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"solidWrapper\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalanceTotal_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalanceTotal_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_accumuluated_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"team_accumuluated_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address2_hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address2_last_update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address2_recover_hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address_hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address_last_update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_address_recover_hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDocument\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupply_multi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromMulti\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferMulti\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockUpon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"unstakeSellEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"unstakeSellMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SolidFactory","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://22c45d2100468185c52d913b030bc14065816ed3f09685d1415f18fbc3f1a778"}]}