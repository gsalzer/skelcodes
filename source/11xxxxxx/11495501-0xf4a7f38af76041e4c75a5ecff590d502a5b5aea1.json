{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\r\n    function minttest(address from, address to, uint256 value) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n}\r\n\r\ncontract unigame {\r\n\r\n    using SafeMath for uint256;\r\n    struct User {\r\n        uint256 lpAmount;\r\n        uint256 bonus;\r\n        uint256 historyWithdraw;\r\n        bool used;\r\n    }\r\n\r\n    uint256 totalLpAmount;\r\n\r\n    uint256 totalTokenAmount;\r\n    uint256 newTokenAmount;\r\n\r\n    mapping(address => User) userMap;\r\n    address[]userArr;\r\n\r\n    address owner;\r\n\r\n    //TODO \r\n    address tokenAddr = 0x5A947A3e5B62Cb571C056eC28293b32126E4d743;\r\n\r\n    address pairAddr = address(0);\r\n    address gameAddr = address(0);\r\n\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        bytes4 id = bytes4(keccak256(\"transfer(address,uint256)\"));\r\n        bool success = token.call(id, to, value);\r\n        require(success, 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        bool success = token.call(id, from, to, value);\r\n        require(success, 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    //\r\n    function transferTokenV(uint256 _v) public {\r\n        require(msg.sender == gameAddr, \"aaa\");\r\n        totalTokenAmount = totalTokenAmount.add(_v);\r\n        newTokenAmount = newTokenAmount.add(_v);\r\n    }\r\n\r\n\r\n    function _distributeToken() internal {\r\n        uint256 len = userArr.length;\r\n        uint256 bonusBaseAmount = newTokenAmount.mul(70).div(100);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            //(userLp/totalLp)*newToken\r\n            User storage user = userMap[userArr[i]];\r\n            uint256 bonus = bonusBaseAmount.mul(user.lpAmount).div(totalLpAmount);\r\n            user.bonus = user.bonus.add(bonus);\r\n        }\r\n\r\n        if (len != 0) {\r\n            newTokenAmount = newTokenAmount.mul(30).div(100);\r\n        }\r\n    }\r\n\r\n    function _getUnassignedBonus(address _addr) internal view returns (uint256){\r\n        User memory user = userMap[_addr];\r\n        if (newTokenAmount == 0 || totalTokenAmount == 0 || user.lpAmount == 0) {\r\n            return 0;\r\n        }\r\n        uint256 bonus = newTokenAmount.mul(70).mul(user.lpAmount).div(totalLpAmount).div(100);\r\n        return bonus;\r\n    }\r\n\r\n\r\n    function investLp(uint256 _value) public {\r\n        require(pairAddr != address(0), \"n,s\");\r\n        require(_value > 0, \"zero\");\r\n\r\n        _distributeToken();\r\n\r\n        User storage user = userMap[msg.sender];\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddr);\r\n        require(pair.balanceOf(msg.sender) >= _value, \"not enough\");\r\n\r\n        safeTransferFrom(pairAddr, msg.sender, address(this), _value);\r\n\r\n        user.lpAmount = user.lpAmount.add(_value);\r\n        totalLpAmount = totalLpAmount.add(_value);\r\n        if (!user.used) {\r\n            userArr.push(msg.sender);\r\n            user.used = true;\r\n            userMap[msg.sender] = user;\r\n        }\r\n    }\r\n\r\n    function withdrawBonus() public {\r\n        require(userMap[msg.sender].used, \"illegal\");\r\n        require(userMap[msg.sender].bonus > 0 || newTokenAmount > 0, \"not enough\");\r\n\r\n        _distributeToken();\r\n\r\n        User storage user = userMap[msg.sender];\r\n        safeTransfer(tokenAddr, msg.sender, user.bonus);\r\n        user.historyWithdraw = user.historyWithdraw.add(user.bonus);\r\n        user.bonus = 0;\r\n    }\r\n\r\n    function setPairAddr(address _addr) public onlyOwner {\r\n        pairAddr = _addr;\r\n    }\r\n\r\n    function setGameAddr_aa(address _addr) public onlyOwner {\r\n        gameAddr = _addr;\r\n    }\r\n\r\n\r\n    function showInfo(address _addr) public view returns (bool, uint256, uint256, uint256, uint256, uint256){\r\n        User memory user = userMap[_addr];\r\n        uint256 unassigned = _getUnassignedBonus(_addr);\r\n        return (user.used, user.lpAmount, user.bonus.add(unassigned), user.historyWithdraw, totalTokenAmount, totalLpAmount);\r\n    }\r\n\r\n    function showOthers() public view returns (uint256, uint256, uint256){\r\n        return (userArr.length, newTokenAmount * 7 / 10, newTokenAmount * 3 / 10);\r\n    }\r\n\r\n    function showAddrs() public view returns (address, address){\r\n        return (pairAddr, gameAddr);\r\n    }\r\n\r\n    function showBonus(address _addr) public view returns (uint256, uint256, uint256){\r\n        User memory user = userMap[_addr];\r\n        return (user.lpAmount, user.bonus, user.historyWithdraw);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"showInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showOthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"transferTokenV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPairAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGameAddr_aa\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"showBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"investLp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"unigame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7d9d6041896b12bf9b8690d122cfae41208eaf5ab75e6e939750033d458c6d02"}]}