{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\n// pragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n\r\n\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\";\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/BannedContractList.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\r\n\r\n/*\r\n    Approve and Ban Contracts to interact with pools.\r\n    (All contracts are approved by default, unless banned)\r\n*/\r\ncontract BannedContractList is Initializable, OwnableUpgradeSafe {\r\n    mapping(address => bool) banned;\r\n\r\n    function initialize() public initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    function isApproved(address toCheck) external view returns (bool) {\r\n        return !banned[toCheck];\r\n    }\r\n\r\n    function isBanned(address toCheck) external view returns (bool) {\r\n        return banned[toCheck];\r\n    }\r\n\r\n    function approveContract(address toApprove) external onlyOwner {\r\n        banned[toApprove] = false;\r\n    }\r\n\r\n    function banContract(address toBan) external onlyOwner {\r\n        banned[toBan] = true;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/Defensible.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"contracts/BannedContractList.sol\";\r\n\r\n/*\r\n    Prevent smart contracts from calling functions unless approved by the specified whitelist.\r\n*/\r\ncontract Defensible {\r\n // Only smart contracts will be affected by this modifier\r\n  modifier defend(BannedContractList bannedContractList) {\r\n    require(\r\n      (msg.sender == tx.origin) || bannedContractList.isApproved(msg.sender),\r\n      \"This smart contract has not been approved\"\r\n    );\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IMiniMe.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\ninterface IMiniMe {\r\n    /* ========== STANDARD ERC20 ========== */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /* ========== MINIME EXTENSIONS ========== */\r\n\r\n    function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256);\r\n    function totalSupplyAt(uint256 blockNumber) external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/ISporeToken.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\ninterface ISporeToken {\r\n    /* ========== STANDARD ERC20 ========== */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /* ========== EXTENSIONS ========== */\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function addInitialLiquidityTransferRights(address account) external;\r\n\r\n    function enableTransfers() external;\r\n\r\n    function addMinter(address account) external;\r\n\r\n    function removeMinter(address account) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IRateVoteable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\ninterface IRateVoteable {\r\n    function changeRate(uint256 percentage) external;\r\n}\r\n\r\n\r\n// Root file: contracts/RateVote.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\";\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n// import \"contracts/Defensible.sol\";\r\n// import \"contracts/interfaces/IMiniMe.sol\";\r\n// import \"contracts/interfaces/ISporeToken.sol\";\r\n// import \"contracts/interfaces/IRateVoteable.sol\";\r\n// import \"contracts/BannedContractList.sol\";\r\n\r\n/*\r\n    Can be paused by the owner\r\n    The mushroomFactory must be set by the owner before mushrooms can be harvested (optionally), and can be modified to use new mushroom spawning logic\r\n*/\r\ncontract RateVote is ReentrancyGuardUpgradeSafe, Defensible {\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n    uint256 public constant MAX_PERCENTAGE = 100;\r\n    uint256 public votingEnabledTime;\r\n\r\n    mapping(address => uint256) lastVoted;\r\n\r\n    struct VoteEpoch {\r\n        uint256 startTime;\r\n        uint256 activeEpoch;\r\n        uint256 increaseVoteWeight;\r\n        uint256 decreaseVoteWeight;\r\n    }\r\n\r\n    VoteEpoch public voteEpoch;\r\n    uint256 public voteDuration;\r\n\r\n    IMiniMe public enokiToken;\r\n    IRateVoteable public pool;\r\n    BannedContractList public bannedContractList;\r\n\r\n    // In percentage: mul(X).div(100)\r\n    uint256 public decreaseRateMultiplier;\r\n    uint256 public increaseRateMultiplier;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    function initialize(\r\n        address _pool,\r\n        address _enokiToken,\r\n        uint256 _voteDuration,\r\n        uint256 _votingEnabledTime,\r\n        address _bannedContractList\r\n    ) public virtual initializer {\r\n        __ReentrancyGuard_init();\r\n\r\n        pool = IRateVoteable(_pool);\r\n\r\n        decreaseRateMultiplier = 50;\r\n        increaseRateMultiplier = 150;\r\n\r\n        votingEnabledTime = _votingEnabledTime;\r\n\r\n        voteDuration = _voteDuration;\r\n\r\n        enokiToken = IMiniMe(_enokiToken);\r\n\r\n        voteEpoch = VoteEpoch({\r\n            startTime: votingEnabledTime, \r\n            activeEpoch: 0, \r\n            increaseVoteWeight: 0, \r\n            decreaseVoteWeight: 0\r\n        });\r\n\r\n        bannedContractList = BannedContractList(_bannedContractList);\r\n    }\r\n\r\n    /*\r\n        Votes with a given nonce invalidate other votes with the same nonce\r\n        This ensures only one rate vote can pass for a given time period\r\n    */\r\n\r\n    function getVoteEpoch() external view returns (VoteEpoch memory) {\r\n        return voteEpoch;\r\n    }\r\n\r\n    /* === Actions === */\r\n\r\n    /// @notice Any user can vote once in a given voting epoch, with their balance at the start of the epoch\r\n    function vote(uint256 voteId) external nonReentrant defend(bannedContractList) {\r\n        require(now > votingEnabledTime, \"Too early\");\r\n        require(now <= voteEpoch.startTime.add(voteDuration), \"Vote has ended\");\r\n        require(lastVoted[msg.sender] < voteEpoch.activeEpoch, \"Already voted\");\r\n\r\n        uint256 userWeight = enokiToken.balanceOfAt(msg.sender, voteEpoch.startTime);\r\n\r\n        if (voteId == 0) {\r\n            // Decrease rate\r\n            voteEpoch.decreaseVoteWeight = voteEpoch.decreaseVoteWeight.add(userWeight);\r\n        } else if (voteId == 1) {\r\n            // Increase rate\r\n            voteEpoch.increaseVoteWeight = voteEpoch.increaseVoteWeight.add(userWeight);\r\n        } else {\r\n            revert(\"Invalid voteId\");\r\n        }\r\n\r\n        lastVoted[msg.sender] = voteEpoch.activeEpoch;\r\n\r\n        emit Vote(msg.sender, voteEpoch.activeEpoch, userWeight, voteId);\r\n    }\r\n\r\n    /// @notice Once a vote has exceeded the duration, it can be resolved, implementing the decision and starting the next vote    \r\n    function resolveVote() external nonReentrant defend(bannedContractList) {\r\n        require(now >= voteEpoch.startTime.add(voteDuration), \"Vote still active\");\r\n        uint256 decision = 0;\r\n\r\n        if (voteEpoch.decreaseVoteWeight > voteEpoch.increaseVoteWeight) {\r\n            // Decrease wins\r\n            pool.changeRate(decreaseRateMultiplier);\r\n        } else if (voteEpoch.increaseVoteWeight > voteEpoch.decreaseVoteWeight) {\r\n            // Increase wins\r\n            pool.changeRate(increaseRateMultiplier);\r\n            decision = 1;\r\n        } else {\r\n            //else Tie, no rate change\r\n            decision = 2;\r\n        }\r\n\r\n        emit VoteResolved(voteEpoch.activeEpoch, decision);\r\n\r\n        voteEpoch.activeEpoch = voteEpoch.activeEpoch.add(1);\r\n        voteEpoch.decreaseVoteWeight = 0;\r\n        voteEpoch.increaseVoteWeight = 0;\r\n        voteEpoch.startTime = now;\r\n\r\n        emit VoteStarted(voteEpoch.activeEpoch, voteEpoch.startTime, voteEpoch.startTime.add(voteDuration));\r\n    }\r\n\r\n    /* ===Events=== */\r\n\r\n    event Vote(address indexed user, uint256 indexed epoch, uint256 weight, uint256 indexed vote);\r\n    event VoteResolved(uint256 indexed epoch, uint256 indexed decision);\r\n    event VoteStarted(uint256 indexed epoch, uint256 startTime, uint256 endTime);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"decision\",\"type\":\"uint256\"}],\"name\":\"VoteResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"VoteStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bannedContractList\",\"outputs\":[{\"internalType\":\"contract BannedContractList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseRateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enokiToken\",\"outputs\":[{\"internalType\":\"contract IMiniMe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increaseVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseVoteWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct RateVote.VoteEpoch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseRateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_enokiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_voteDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingEnabledTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bannedContractList\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IRateVoteable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolveVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increaseVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseVoteWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEnabledTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RateVote","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://576b983f8fc6863625c83537db93b2d5de8e022c231aa880960ae136c1a24104"}]}