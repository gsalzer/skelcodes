{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tools/KingTokenBatchSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20Transfer {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\ncontract KingTokenBatchSender {\\n    address private constant _kingToken = address(0x5a731151d6510Eb475cc7a0072200cFfC9a3bFe5);\\n\\n    address private _owner;\\n    bool private _isEntered;\\n\\n    event Transfer(address indexed to, uint256 amount);\\n    event NewOwner(address indexed newOwner);\\n\\n    constructor() public {\\n        _owner = msg.sender;\\n        emit NewOwner(msg.sender);\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"no ethers accepted\\\");\\n    }\\n\\n    function batchTransfer(address[] calldata receivers, uint[] calldata amounts)\\n    external onlyOwner returns (bool)\\n    {\\n        require(receivers.length == amounts.length, \\\"invalid input arrays\\\");\\n\\n        for (uint i = 0; i < receivers.length; i++) {\\n            address to = receivers[i];\\n            uint amount = amounts[i];\\n            require(to != address(0), \\\"receiver is zero address\\\");\\n            require(amount != 0, \\\"amount is zero\\\");\\n\\n            require(_transferKingToken(to, amount), \\\"failed to transfer\\\");\\n            emit Transfer(to, amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Sends occasional airdrop tokens to the owner\\n    function collect(IERC20Transfer token, uint amount) external {\\n        require(_isEntered == false, \\\"already entered\\\");\\n        _isEntered = true;\\n        token.transfer(_owner, amount);\\n        _isEntered = false;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"new owner is zero address\\\");\\n        emit NewOwner(newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    function kingToken() public pure returns (address) {\\n        return _kingToken;\\n    }\\n\\n    // Moved to a separate function for unit-tests facilitation\\n    function _transferKingToken(address to, uint amount) internal virtual returns (bool) {\\n        return IERC20Transfer(_kingToken).transfer(to, amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Transfer\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KingTokenBatchSender","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}