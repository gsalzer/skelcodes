{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IStakingRewards {\r\n    // Views\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function getRewardForDuration() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Mutative\r\n    function stake(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function getReward() external;\r\n\r\n    function exit() external;\r\n}\r\n\r\ninterface ICurve {\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n    function coins(uint256) external view returns (address coin);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n        \r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has two parts:\r\n        //  1. The call itself is made, and success asserted\r\n        //  2. The return value is decoded, which in turn checks the size of the returned data.\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract HotPotFundERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = 'Hotpot V1';\r\n    string public constant symbol = 'HPT-V1';\r\n    uint8 public constant decimals = 18;\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        require(to != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        require(from != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract HotPotFund is ReentrancyGuard, HotPotFundERC20 {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant UNISWAP_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant UNI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;\r\n\r\n    uint constant DIVISOR = 100;\r\n    uint constant FEE = 20;\r\n\r\n    address public token;\r\n    address public controller;\r\n    uint public totalInvestment;\r\n    mapping (address => uint) public investmentOf;\r\n\r\n    // UNI mining rewards\r\n    uint public totalDebts;\r\n    mapping(address => uint256) public debtOf;\r\n    // UNI mining pool pair->mining pool\r\n    mapping(address => address) public uniPool;\r\n\r\n    address[] public pairs;\r\n\r\n    //Curve swap pools\r\n    mapping (address => address) public curvePool;\r\n    mapping (address => int128) CURVE_N_COINS;\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == controller, 'Only called by Controller.');\r\n        _;\r\n    }\r\n\r\n    event Deposit(address indexed owner, uint amount, uint share);\r\n    event Withdraw(address indexed owner, uint amount, uint share);\r\n\r\n    constructor (address _token, address _controller) public {\r\n        //approve for add liquidity and swap. 2**256-1 never used up.\r\n        IERC20(_token).safeApprove(UNISWAP_V2_ROUTER, 2**256-1);\r\n\r\n        token = _token;\r\n        controller = _controller;\r\n    }\r\n\r\n    function deposit(uint amount) public nonReentrant returns(uint share) {\r\n        require(amount > 0, 'Are you kidding me?');\r\n        uint _total_assets = totalAssets();\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        if(totalSupply == 0){\r\n            share = amount;\r\n        }\r\n        else{\r\n            share = amount.mul(totalSupply).div(_total_assets);\r\n            // user uni debt\r\n            uint debt = share.mul(totalDebts.add(totalUNIRewards())).div(totalSupply);\r\n            if(debt > 0){\r\n                debtOf[msg.sender] = debtOf[msg.sender].add(debt);\r\n                totalDebts = totalDebts.add(debt);\r\n            }\r\n        }\r\n\r\n        investmentOf[msg.sender] = investmentOf[msg.sender].add(amount);\r\n        totalInvestment = totalInvestment.add(amount);\r\n        _mint(msg.sender, share);\r\n        emit Deposit(msg.sender, amount, share);\r\n    }\r\n\r\n\r\n    function invest(uint amount, uint[] calldata proportions) external onlyController {\r\n        uint len = pairs.length;\r\n        require(len>0, 'Pairs is empty.');\r\n        address token0 = token;\r\n        require(amount <= IERC20(token0).balanceOf(address(this)), \"Not enough balance.\");\r\n        require(proportions.length == pairs.length, 'Proportions index out of range.');\r\n\r\n        uint _whole;\r\n        for(uint i=0; i<len; i++){\r\n            if(proportions[i] == 0) continue;\r\n            _whole = _whole.add(proportions[i]);\r\n\r\n            uint amount0 = (amount.mul(proportions[i]).div(DIVISOR)) >> 1;\r\n            if(amount0 == 0) continue;\r\n\r\n            address token1 = pairs[i];\r\n            uint amount1 = _swap(token0, token1, amount0);\r\n\r\n            (,uint amountB,) = IUniswapV2Router(UNISWAP_V2_ROUTER).addLiquidity(\r\n                token0, token1,\r\n                amount0, amount1,\r\n                0, 0,\r\n                address(this), block.timestamp\r\n            );\r\n\r\n            if(amount1 > amountB) _swap(token1, token0, amount1.sub(amountB));\r\n        }\r\n        require(_whole == DIVISOR, 'Error proportion.');\r\n    }\r\n\r\n    function setUNIPool(address pair, address _uniPool) external onlyController {\r\n        require(pair!= address(0) && _uniPool!= address(0), \"Invalid address.\");\r\n\r\n        if(uniPool[pair] != address(0)){\r\n            _withdrawStaking(IUniswapV2Pair(pair), totalSupply);\r\n        }\r\n        IERC20(pair).approve(_uniPool, 2**256-1);\r\n        uniPool[pair] = _uniPool;\r\n    }\r\n\r\n    function mineUNI(address pair) public onlyController {\r\n        address stakingRewardAddr = uniPool[pair];\r\n        if(stakingRewardAddr != address(0)){\r\n            uint liquidity = IUniswapV2Pair(pair).balanceOf(address(this));\r\n            if(liquidity > 0){\r\n                IStakingRewards(stakingRewardAddr).stake(liquidity);\r\n            }\r\n        }\r\n    }\r\n\r\n    function mineUNIAll() external onlyController {\r\n        for(uint i = 0; i < pairs.length; i++){\r\n            IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(UNISWAP_FACTORY).getPair(token, pairs[i]));\r\n            address stakingRewardAddr = uniPool[address(pair)];\r\n            if(stakingRewardAddr != address(0)){\r\n                uint liquidity = pair.balanceOf(address(this));\r\n                if(liquidity > 0){\r\n                    IStakingRewards(stakingRewardAddr).stake(liquidity);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function totalUNIRewards() public view returns(uint amount){\r\n        amount = IERC20(UNI).balanceOf(address(this));\r\n        for(uint i = 0; i < pairs.length; i++){\r\n            IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(UNISWAP_FACTORY).getPair(token, pairs[i]));\r\n            address stakingRewardAddr = uniPool[address(pair)];\r\n            if(stakingRewardAddr != address(0)){\r\n                amount = amount.add(IStakingRewards(stakingRewardAddr).earned(address(this)));\r\n            }\r\n        }\r\n    }\r\n\r\n    function UNIRewardsOf(address account) public view returns(uint reward){\r\n        if(balanceOf[account] > 0){\r\n            uint uniAmount = totalUNIRewards();\r\n            uint totalAmount = totalDebts.add(uniAmount).mul(balanceOf[account]).div(totalSupply);\r\n            reward = totalAmount.sub(debtOf[account]);\r\n        }\r\n    }\r\n\r\n    function stakingLPOf(address pair) public view returns(uint liquidity){\r\n        if(uniPool[pair] != address(0)){\r\n            liquidity = IStakingRewards(uniPool[pair]).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _withdrawStaking(IUniswapV2Pair pair, uint share) internal returns(uint liquidity){\r\n        address stakingRewardAddr = uniPool[address(pair)];\r\n        if(stakingRewardAddr != address(0)){\r\n            liquidity = IStakingRewards(stakingRewardAddr).balanceOf(address(this)).mul(share).div(totalSupply);\r\n            if(liquidity > 0){\r\n                IStakingRewards(stakingRewardAddr).withdraw(liquidity);\r\n                IStakingRewards(stakingRewardAddr).getReward();\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdraw(uint share) public nonReentrant returns(uint amount) {\r\n        require(share > 0 && share <= balanceOf[msg.sender], 'Not enough balance.');\r\n\r\n        uint _investment;\r\n        (amount, _investment) = _withdraw(msg.sender, share);\r\n        investmentOf[msg.sender] = investmentOf[msg.sender].sub(_investment);\r\n        totalInvestment = totalInvestment.sub(_investment);\r\n        _burn(msg.sender, share);\r\n        IERC20(token).safeTransfer(msg.sender, amount);\r\n        emit Withdraw(msg.sender, amount, share);\r\n    }\r\n\r\n    function _withdraw(\r\n        address user,\r\n        uint share\r\n    ) internal returns (uint amount, uint investment) {\r\n        address token0 = token;\r\n        amount = IERC20(token0).balanceOf(address(this)).mul(share).div(totalSupply);\r\n        for(uint i = 0; i < pairs.length; i++) {\r\n            address token1 = pairs[i];\r\n            IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(UNISWAP_FACTORY).getPair(token0, token1));\r\n            uint liquidity = pair.balanceOf(address(this)).mul(share).div(totalSupply);\r\n            liquidity  = liquidity.add(_withdrawStaking(pair, share));\r\n            if(liquidity == 0) continue;\r\n\r\n            (uint amount0, uint amount1) = IUniswapV2Router(UNISWAP_V2_ROUTER).removeLiquidity(\r\n                token0, token1,\r\n                liquidity,\r\n                0, 0,\r\n                address(this), block.timestamp\r\n            );\r\n            amount = amount.add(amount0).add(_swap(token1, token0, amount1));\r\n        }\r\n\r\n        //withdraw UNI reward\r\n        uint uniAmount = IERC20(UNI).balanceOf(address(this));\r\n        uint totalAmount = totalDebts.add(uniAmount).mul(share).div(totalSupply);\r\n        if(totalAmount > 0){\r\n            uint debt = debtOf[user].mul(share).div(balanceOf[user]);\r\n            debtOf[user] = debtOf[user].sub(debt);\r\n            totalDebts = totalDebts.sub(debt);\r\n            uint reward = totalAmount.sub(debt);\r\n            if(reward > uniAmount) reward = uniAmount;\r\n            if(reward > 0) IERC20(UNI).transfer(user, reward);\r\n        }\r\n\r\n        investment = investmentOf[user].mul(share).div(balanceOf[user]);\r\n        if(amount > investment){\r\n            uint _fee = (amount.sub(investment)).mul(FEE).div(DIVISOR);\r\n            amount = amount.sub(_fee);\r\n            IERC20(token0).safeTransfer(controller, _fee);\r\n        }\r\n        else {\r\n            investment = amount;\r\n        }\r\n    }\r\n\r\n    function assets(uint index) public view returns(uint _assets) {\r\n        require(index < pairs.length, 'Pair index out of range.');\r\n        address token0 = token;\r\n        address token1 = pairs[index];\r\n        IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(UNISWAP_FACTORY).getPair(token0, token1));\r\n        (uint reserve0, uint reserve1, ) = pair.getReserves();\r\n\r\n        uint liquidity = pair.balanceOf(address(this)).add(stakingLPOf(address(pair)));\r\n        if( pair.token0() == token0 )\r\n            _assets = (reserve0 << 1).mul(liquidity).div(pair.totalSupply());\r\n        else // pair.token1() == token0\r\n            _assets = (reserve1 << 1).mul(liquidity).div(pair.totalSupply());\r\n    }\r\n\r\n    function totalAssets() public view returns(uint _assets) {\r\n        address token0 = token;\r\n        for(uint i=0; i<pairs.length; i++){\r\n            address token1 = pairs[i];\r\n            IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(UNISWAP_FACTORY).getPair(token0, token1));\r\n            (uint reserve0, uint reserve1, ) = pair.getReserves();\r\n            uint liquidity = pair.balanceOf(address(this)).add(stakingLPOf(address(pair)));\r\n            if( pair.token0() == token0 )\r\n                _assets = _assets.add((reserve0 << 1).mul(liquidity).div(pair.totalSupply()));\r\n            else // pair.token1() == token0\r\n                _assets = _assets.add((reserve1 << 1).mul(liquidity).div(pair.totalSupply()));\r\n        }\r\n        _assets = _assets.add(IERC20(token0).balanceOf(address(this)));\r\n    }\r\n\r\n    function pairsLength() public view returns(uint) {\r\n        return pairs.length;\r\n    }\r\n\r\n    function setCurvePool(address _token, address _curvePool, int128 N_COINS) external onlyController {\r\n        curvePool[_token] = _curvePool;\r\n        if(_curvePool != address(0)) {\r\n            if(IERC20(token).allowance(address(this), _curvePool) == 0){\r\n                IERC20(token).safeApprove(_curvePool, 2**256-1);\r\n            }\r\n            if(IERC20(_token).allowance(address(this), _curvePool) == 0){\r\n                IERC20(_token).safeApprove(_curvePool, 2**256-1);\r\n            }\r\n            CURVE_N_COINS[_curvePool] = N_COINS;\r\n        }\r\n    }\r\n\r\n    function addPair(address _token) external onlyController {\r\n        address pair = IUniswapV2Factory(UNISWAP_FACTORY).getPair(token, _token);\r\n        require(pair != address(0), 'Pair not exist.');\r\n\r\n        //approve for add liquidity and swap.\r\n        IERC20(_token).safeApprove(UNISWAP_V2_ROUTER, 2**256-1);\r\n        //approve for remove liquidity\r\n        IUniswapV2Pair(pair).approve(UNISWAP_V2_ROUTER, 2**256-1);\r\n\r\n        for(uint i = 0; i < pairs.length; i++) {\r\n            require(pairs[i] != _token, 'Pair existed.');\r\n        }\r\n        pairs.push(_token);\r\n    }\r\n\r\n    function reBalance(\r\n        uint add_index,\r\n        uint remove_index,\r\n        uint liquidity\r\n    ) external onlyController {\r\n        require(remove_index < pairs.length, 'Pair index out of range.');\r\n\r\n        address token0 = token;\r\n        address token1 = pairs[remove_index];\r\n        IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(UNISWAP_FACTORY).getPair(token0, token1));\r\n\r\n        uint stakingLP = stakingLPOf(address(pair));\r\n        if(stakingLP > 0) IStakingRewards(uniPool[address(pair)]).exit();\r\n\r\n        require(liquidity <= pair.balanceOf(address(this)) && liquidity > 0, 'Not enough liquidity.');\r\n\r\n        (uint amount0, uint amount1) = IUniswapV2Router(UNISWAP_V2_ROUTER).removeLiquidity(\r\n            token0, token1,\r\n            liquidity,\r\n            0, 0,\r\n            address(this), block.timestamp\r\n        );\r\n        amount0 = amount0.add(_swap(token1, token0, amount1));\r\n\r\n        //Only remove liquidity\r\n        if(add_index >= pairs.length || add_index == remove_index) return;\r\n\r\n        token1 = pairs[add_index];\r\n        amount0 = amount0 >> 1;\r\n        amount1 = _swap(token0, token1, amount0);\r\n\r\n        (,uint amountB,) = IUniswapV2Router(UNISWAP_V2_ROUTER).addLiquidity(\r\n            token0, token1,\r\n            amount0, amount1,\r\n            0, 0,\r\n            address(this), block.timestamp\r\n        );\r\n\r\n        if(amount1 > amountB) _swap(token1, token0, amount1.sub(amountB));\r\n    }\r\n\r\n    function removePair(uint index) external onlyController {\r\n        require(index < pairs.length, 'Pair index out of range.');\r\n\r\n        address token0 = token;\r\n        address token1 = pairs[index];\r\n        IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(UNISWAP_FACTORY).getPair(token0, token1));\r\n        _withdrawStaking(pair, totalSupply);\r\n        uint liquidity = pair.balanceOf(address(this));\r\n\r\n        if(liquidity > 0){\r\n            (uint amount0, uint amount1) = IUniswapV2Router(UNISWAP_V2_ROUTER).removeLiquidity(\r\n                token0, token1,\r\n                liquidity,\r\n                0, 0,\r\n                address(this), block.timestamp\r\n            );\r\n            amount0 = amount0.add(_swap(token1, token0, amount1));\r\n        }\r\n        IERC20(token1).safeApprove(UNISWAP_V2_ROUTER, 0);\r\n\r\n        for (uint i = index; i < pairs.length-1; i++){\r\n            pairs[i] = pairs[i+1];\r\n        }\r\n        pairs.pop();\r\n    }\r\n\r\n    function _swap(address tokenIn, address tokenOut, uint amount)  private returns(uint) {\r\n        address pool = tokenIn == token ? curvePool[tokenOut] : curvePool[tokenIn];\r\n        if(pool != address(0)){\r\n            int128 N_COINS = CURVE_N_COINS[pool];\r\n            int128 idxIn = N_COINS;\r\n            int128 idxOut = N_COINS;\r\n            for(int128 i=0; i<N_COINS; i++){\r\n                address coin = ICurve(pool).coins(uint(i));\r\n                if(coin == tokenIn) {idxIn = i; continue;}\r\n                if(coin == tokenOut) idxOut = i;\r\n            }\r\n            if(idxIn != N_COINS && idxOut != N_COINS){\r\n                uint amountBefore = IERC20(tokenOut).balanceOf(address(this));\r\n                ICurve(pool).exchange(idxIn, idxOut, amount, 0);\r\n                return (IERC20(tokenOut).balanceOf(address(this))).sub(amountBefore);\r\n            }\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n        uint[] memory amounts = IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(\r\n            amount, 0, path, address(this), block.timestamp);\r\n        return amounts[1];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UNIRewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"proportions\",\"type\":\"uint256[]\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investmentOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"mineUNI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mineUNIAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"add_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remove_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"reBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curvePool\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"N_COINS\",\"type\":\"int128\"}],\"name\":\"setCurvePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniPool\",\"type\":\"address\"}],\"name\":\"setUNIPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"stakingLPOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUNIRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HotPotFund","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000da2d6e2abb42deaa267e16504a164d5d8046454f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1a08d8e3abfaa2696a22890f7a9fc8c1722c9d5f369ab8b5e44a3c6edf37c9e3"}]}