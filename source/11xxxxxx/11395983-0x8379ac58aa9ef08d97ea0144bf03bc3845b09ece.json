{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\n// ----------------------------------------------------------------------------\r\n// TRUSTED TEAM SMART ERC20 TOKEN/Bank\r\n// Website       : https://eth.tts.best/bank\r\n// Symbol        : TES\r\n// Name          : Trust Ethereum Smart\r\n// Max supply    : 21000000\r\n// Decimals      : 18\r\n//\r\n// Enjoy.\r\n//\r\n// (c) by TRUSTED TEAM SMART 2020. MIT License.\r\n// Developers Signature(MD5 Hash) : d6b0169c679a33d9fb19562f135ce6ee\r\n// ----------------------------------------------------------------------------\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\nContract function to receive approval and execute function in one call\r\n*/\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) external;\r\n}\r\n\r\n\r\ncontract ERC20 is IERC20{\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private CAPLIMIT;\r\n    uint256 private startTime;\r\n    uint256 private INFLATIONPERCENT = 3;\r\n    uint256 private MONTHLY_INFLATION = 90;\r\n    address internal _mainWallet;\r\n    uint256 private lastTime;\r\n    uint256 private _cap;\r\n    uint256 private _capAddition;\r\n    bool private isFirstInflation;\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // initSupply = 10TES\r\n    // ------------------------------------------------------------------------\r\n    constructor() internal {\r\n        _symbol = \"TES\";\r\n        _name = \"Trust Ethereum Smart\";\r\n        _decimals = 18;\r\n        _totalSupply = 10 * 10**18;\r\n        CAPLIMIT = 21 * 10**24;\r\n        _cap = 21 * 10**23;\r\n        _capAddition = _cap;\r\n        _balances[msg.sender] = _totalSupply;\r\n        startTime = block.timestamp;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory){\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender, \r\n            _allowances[msg.sender][spender].sub(subtractedValue,\r\n            \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n        ApproveAndCallFallBack spender = ApproveAndCallFallBack(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _product(uint256 amount) internal {\r\n        if (block.timestamp - startTime > 6387 days) {\r\n            if (block.timestamp - lastTime > 365 days || !isFirstInflation) {\r\n                if (!isFirstInflation) {\r\n                    if (CAPLIMIT > _totalSupply)\r\n                        amount = CAPLIMIT.sub(_totalSupply);\r\n                    _cap = CAPLIMIT;\r\n                    isFirstInflation = true;\r\n                }\r\n                _cap = _cap.mul(100 + INFLATIONPERCENT).div(100);\r\n                lastTime = block.timestamp;\r\n            }\r\n        } else {\r\n            if (block.timestamp - lastTime > 30 days) {\r\n                _capAddition = _capAddition.mul(MONTHLY_INFLATION).div(100);\r\n                _cap = _cap.add(_capAddition);\r\n                lastTime = block.timestamp;\r\n            }  \r\n        }\r\n        \r\n        amount = amount.add(amount.div(100));\r\n\r\n        if (_totalSupply.add(amount) > _cap)\r\n            amount = _cap.sub(_totalSupply);\r\n        if (amount == 0)\r\n            return;\r\n            \r\n        _balances[_mainWallet] = _balances[_mainWallet].add(amount.div(101));\r\n        _balances[address(this)] = _balances[address(this)].add(amount.mul(100).div(101));\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit Transfer(address(0), address(this), amount.div(101));\r\n        emit Transfer(address(0), _mainWallet, amount.mul(100).div(101));\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(msg.sender != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\n\r\ncontract TESToken is ERC20{\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    uint256 private buyAmountLimit = 500 * 1e18;\r\n    uint256 private pulseAmount = 500 * 1e18;\r\n    uint256 private pulseCoef = 10002; // / 10000\r\n    uint256 private CoefLimit = 200000000;\r\n    \r\n    uint256 public currentCoef = 500000; // /10000000\r\n    uint256 public pulseCounter;\r\n    uint256 public currentPulse;\r\n\r\n\r\n    event Sell(address indexed seller, uint256 TESAmount, uint256 ETHAmount, uint256 price);\r\n    event Buy(address indexed buyer, uint256 TESAmount, uint256 ETHAmount, uint256 price);\r\n\r\n    constructor(address mainWallet) public {\r\n        _mainWallet = mainWallet;\r\n    }\r\n\r\n    function receiveMoney() public payable{\r\n    }\r\n    \r\n    //pays ETH gets TES\r\n    function buyToken() public payable returns(uint256 TESAmount, uint256 ETHAmount, uint256 payBackETH) {\r\n        uint256 price = getSellPrice(msg.value).mul(10000000 + currentCoef).div(10000000);\r\n        TESAmount = msg.value.mul(1e12).div(price);\r\n        ETHAmount = msg.value;\r\n        payBackETH = 0;\r\n        if (TESAmount > buyAmountLimit) {\r\n            uint256 payBackTES = TESAmount - buyAmountLimit;\r\n            payBackETH = price.mul(payBackTES).div(1e12);\r\n            TESAmount = buyAmountLimit;\r\n        }\r\n       \r\n        if (_balances[address(this)] < TESAmount) {\r\n            _product(pulseAmount);\r\n        }\r\n\r\n        if (_balances[address(this)] < TESAmount) {\r\n            uint256 payBackTES = TESAmount - _balances[address(this)];\r\n            payBackETH = payBackETH.add(price.mul(payBackTES).div(1e12));\r\n            TESAmount = _balances[address(this)];\r\n        }\r\n\r\n        currentPulse = currentPulse.add(TESAmount);\r\n        if (currentPulse > pulseAmount) {\r\n            currentPulse = currentPulse.sub(pulseAmount);\r\n            pulseCounter++;\r\n            if (currentCoef < CoefLimit) {\r\n                currentCoef = currentCoef.mul(pulseCoef).div(10000);\r\n                if (currentCoef > CoefLimit)\r\n                    currentCoef = CoefLimit;\r\n            }\r\n        }\r\n\r\n        if (payBackETH > 0) {\r\n            msg.sender.transfer(payBackETH);\r\n            ETHAmount = ETHAmount.sub(payBackETH);\r\n        }\r\n\r\n        if (TESAmount > 0) {\r\n            _transfer(address(this), msg.sender, TESAmount);   \r\n            emit Buy(msg.sender, TESAmount, ETHAmount, price);\r\n        }\r\n    }\r\n    \r\n    //pays TES gets eth\r\n    function sellToken(uint256 amount) public {\r\n        uint256 price = getSellPrice();\r\n        _transfer(msg.sender, address(this), amount);\r\n        uint256 ETHAmount = amount.mul(price).div(1e12);\r\n        msg.sender.transfer(ETHAmount);\r\n\r\n        emit Sell(msg.sender, amount, ETHAmount, price);\r\n    }\r\n\r\n\r\n    // decimals : 12\r\n    function getSellPrice() public view returns(uint256 price) {\r\n        return getSellPrice(0);\r\n    }\r\n    \r\n    // decimals : 12\r\n    function getSellPrice(uint256 value) private view returns(uint256 price) {\r\n        uint256 balance = address(this).balance.sub(value).mul(1e12);\r\n        return balance.div(_totalSupply - _balances[address(this)]);\r\n    }\r\n\r\n    \r\n    function getBuyPrice() public view returns (uint256 price) {\r\n        return getSellPrice().mul(10000000 + currentCoef).div(10000000);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mainWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TESAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TESAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TESAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payBackETH\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPulse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pulseCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveMoney\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TESToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000044edbf187fec5ef3c65756ee7f29571625c395fe","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://69b49ebf54d694fa33d85bb992c46a0fe92628eeb703827957b048833d83948e"}]}