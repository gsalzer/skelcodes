{"status":"1","message":"OK","result":[{"SourceCode":"{\"AufStaking.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./AufToken.sol\\\";\\n\\n\\ncontract AufStaking {\\n    string public name = \\\"Auf Staking\\\";\\n    address public owner;\\n    AufToken public aufToken;\\n\\n    address[] public stakers;\\n    mapping(address =\\u003e uint) public stakingBalance;\\n    mapping(address =\\u003e bool) public hasStaked;\\n    mapping(address =\\u003e bool) public isStaking;\\n\\n    constructor(AufToken _aufToken) public {\\n        aufToken = _aufToken;\\n        \\n        owner = msg.sender;\\n    }\\n\\n    function stakeTokens(uint _amount) public {\\n        // Require amount greater than 0\\n        require(_amount \\u003e 0, \\\"amount cannot be 0\\\");\\n\\n        // Trasnfer Auf tokens to this contract for staking\\n        aufToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        // Update staking balance\\n        stakingBalance[msg.sender] = stakingBalance[msg.sender] + _amount;\\n\\n        // Add user to stakers array *only* if they haven\\u0027t staked already\\n        if(!hasStaked[msg.sender]) {\\n            stakers.push(msg.sender);\\n        }\\n\\n        // Update staking status\\n        isStaking[msg.sender] = true;\\n        hasStaked[msg.sender] = true;\\n    }\\n\\n    // Unstaking Tokens (Withdraw)\\n    function unstakeTokens() public {\\n        // Fetch staking balance\\n        uint balance = stakingBalance[msg.sender];\\n\\n        // Require amount greater than 0\\n        require(balance \\u003e 0, \\\"staking balance cannot be 0\\\");\\n\\n        // Transfer Auf tokens to this contract for staking\\n        aufToken.transfer(msg.sender, balance);\\n\\n        // Reset staking balance\\n        stakingBalance[msg.sender] = 0;\\n\\n        // Update staking status\\n        isStaking[msg.sender] = false;\\n    }\\n\\n    // Issuing Tokens\\n    function issueTokens() public {\\n        // Only owner can call this function\\n        require(msg.sender == owner, \\\"caller must be the owner\\\");\\n\\n        // Issue tokens to all stakers\\n        for (uint i=0; i\\u003cstakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint balance = stakingBalance[recipient];\\n            if(balance \\u003e 0) {\\n                aufToken.transfer(recipient, balance * 30 / 100);\\n            }\\n        }\\n    }\\n}\\n\"},\"AufToken.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract AufToken {\\n    string  public name = \\\"AmongUs.Finance\\\";\\n    string  public symbol = \\\"AUF\\\";\\n    uint256 public totalSupply = 10000000000000000000000; // 10000 tokens\\n    uint8   public decimals = 18;\\n\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    constructor() public {\\n        balanceOf[msg.sender] = totalSupply;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] \\u003e= _value);\\n        balanceOf[msg.sender] -= _value;\\n        balanceOf[_to] += _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\n        allowance[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n        require(_value \\u003c= balanceOf[_from]);\\n        require(_value \\u003c= allowance[_from][msg.sender]);\\n        balanceOf[_from] -= _value;\\n        balanceOf[_to] += _value;\\n        allowance[_from][msg.sender] -= _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AufToken\",\"name\":\"_aufToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"aufToken\",\"outputs\":[{\"internalType\":\"contract AufToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AufStaking","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000090017be7948eb595a331461e07744e4a66b6f28b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7d46c3e5bed5e32375af0ba4f65b8eb4e3a3a963e32a5f422359ac0343d8d0fa"}]}