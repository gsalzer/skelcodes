{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Volumes/Data/Work/Blockchain/eth/DEX_MEX/prediction/contracts/IMasterMex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nabstract contract IMasterMex is Ownable, ReentrancyGuard {\\n    enum GroupType { Up, Down }\\n\\n    struct UserInfo {\\n        uint256 amount;                 // Deposit amount of user\\n        uint256 profitDebt;             // Profit Debt amount of user\\n        uint256 lossDebt;               // Loss Debt amount of user\\n        GroupType voteGroup;            // Group where the user bets\\n    }\\n\\n    struct GroupInfo {\\n        uint256 deposit;                // Deposited ETH amount into the group\\n        uint256 holding;                // Currently holding ETH amount\\n        uint256 shareProfitPerETH;\\n        uint256 shareLossPerETH;\\n    }\\n\\n    struct PoolInfo {\\n        address tokenPair;\\n        uint256 prevReserved;\\n        uint256 maxChangeRatio;\\n        uint256 minFund;\\n    }\\n\\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 public decimals = 12;\\n    address payable STAKING_VAULT;\\n    address payable TREASURY_VAULT;\\n    address payable BUYBACK_VAULT;\\n    uint256 public STAKING_FEE;\\n    uint256 public TREASURY_FEE;\\n    uint256 public BUYBACK_FEE;\\n\\n    PoolInfo[] public poolInfo;\\n    mapping(address => UserInfo) public pendingUserInfo;\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    mapping(uint256 => mapping(GroupType => GroupInfo)) public groupInfo;\\n}\"\r\n    },\r\n    \"/Volumes/Data/Work/Blockchain/eth/DEX_MEX/prediction/contracts/MasterMex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n *  DexMex Prediction Pool\\n * \\n\\n           ,-.\\n       ,--' ~.).\\n     ,'         `.\\n    ; (((__   __)))\\n    ;  ( (#) ( (#)\\n    |   \\\\_/___\\\\_/|\\n   ,\\\"  ,-'    `__\\\".\\n  (   ( ._   ____`.)--._        _\\n   `._ `-.`-' \\\\(`-'  _  `-. _,-' `-/`.\\n    ,')   `.`._))  ,' `.   `.  ,','  ;\\n  .'  .     `--'  /     ).   `.      ;\\n ;     `-  1ucky /     '  )         ;\\n \\\\                       ')       ,'\\n  \\\\                     ,'       ;\\n   \\\\               `~~~'       ,'\\n    `.                      _,'\\n      `.                ,--'\\n        `-._________,--'\\n  *\\n*/\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./IMasterMex.sol\\\";\\n\\ncontract MasterMex is IMasterMex {\\n    using SafeMath for uint256;\\n\\n    event Deposit(address indexed sender, uint256 poolId, uint256 amount);\\n    event Withdraw(address indexed sender, uint256 poolId, uint256 amount);\\n    event FundAdded(address indexed user, uint256 amount);\\n    event FundRemoved(address indexed user, uint256 amount);\\n    event Profit(address indexed receiver, uint256 amount);\\n    event Loss(address indexed receiver, uint256 amount);\\n\\n    constructor(\\n        address payable stakingVault,\\n        address payable treasuryVault,\\n        address payable buybackVault,\\n        uint256 stakeFee,\\n        uint256 treasuryFee,\\n        uint256 buybackFee\\n    ) {\\n        STAKING_VAULT = stakingVault;\\n        TREASURY_VAULT = treasuryVault;\\n        BUYBACK_VAULT = buybackVault;\\n\\n        TREASURY_FEE = treasuryFee;\\n        STAKING_FEE = stakeFee;\\n        BUYBACK_FEE = buybackFee;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function setPool(address uniPair, uint256 maxChangeRatio, uint256 minFund) external onlyOwner {\\n        poolInfo.push(PoolInfo({\\n            tokenPair: uniPair,\\n            prevReserved: 0,\\n            maxChangeRatio: maxChangeRatio,\\n            minFund: minFund\\n        }));\\n\\n        uint256 length = poolInfo.length;\\n\\n        groupInfo[length - 1][GroupType.Up] = GroupInfo({\\n            deposit: 0,\\n            holding: 0,\\n            shareProfitPerETH: 0,\\n            shareLossPerETH: 0\\n        });\\n        groupInfo[length - 1][GroupType.Down] = GroupInfo({\\n            deposit: 0,\\n            holding: 0,\\n            shareProfitPerETH: 0,\\n            shareLossPerETH: 0\\n        });\\n    }\\n\\n    function setFeeDistribution(\\n        address payable stakingVault,\\n        address payable treasuryVault,\\n        address payable buybackVault,\\n        uint256 stakeFee,\\n        uint256 treasuryFee,\\n        uint256 buybackFee\\n    ) external onlyOwner {\\n        STAKING_VAULT = stakingVault;\\n        TREASURY_VAULT = treasuryVault;\\n        BUYBACK_VAULT = buybackVault;\\n\\n        TREASURY_FEE = treasuryFee;\\n        STAKING_FEE = stakeFee;\\n        BUYBACK_FEE = buybackFee;\\n    }\\n\\n    receive() external payable {\\n        _registerPendingUser(msg.value);\\n    }\\n\\n    function _registerPendingUser(uint256 amount) internal {\\n        require(msg.sender != address(0));\\n        UserInfo storage user = pendingUserInfo[msg.sender];\\n\\n        user.amount = user.amount.add(amount);\\n        user.voteGroup = GroupType.Up;\\n        emit FundAdded(msg.sender, amount);\\n    }\\n\\n    function setPendingUserGroup(GroupType voteGroup) external {\\n        UserInfo storage user = pendingUserInfo[msg.sender];\\n        require(user.amount > 0, \\\"No pending amount\\\");\\n\\n        user.voteGroup = voteGroup;\\n    }\\n\\n    function withdrawPendingAmount(uint256 amount) external nonReentrant {\\n        require(msg.sender != address(0));\\n        UserInfo storage user = pendingUserInfo[msg.sender];\\n        require(user.amount >= amount, \\\"Insufficient pending amount\\\");\\n        \\n        user.amount = user.amount.sub(amount);\\n        _safeEthTransfer(msg.sender, amount);\\n        emit FundRemoved(msg.sender, amount);\\n    }\\n\\n    function depositIntoPool(uint256 poolId, uint256 amount) external  {\\n        require(poolId < poolInfo.length, \\\"No pool\\\");\\n        UserInfo storage pendingUser = pendingUserInfo[msg.sender];\\n        require(pendingUser.amount >= amount, \\\"Insufficient pending amount\\\");\\n\\n        UserInfo storage user = userInfo[poolId][msg.sender];\\n        if (user.amount > 0 && user.voteGroup != pendingUser.voteGroup) {\\n            return;\\n        }\\n        user.voteGroup = pendingUser.voteGroup;\\n        pendingUser.amount = pendingUser.amount.sub(amount);\\n        GroupInfo storage group = groupInfo[poolId][user.voteGroup];\\n\\n        updatePool(poolId);\\n\\n        if (user.amount > 0) {\\n            _claim(poolId);\\n        }\\n\\n        user.amount = user.amount.add(amount);\\n        group.deposit = group.deposit.add(amount);\\n        group.holding = group.holding.add(amount);\\n        user.profitDebt = user.amount.mul(group.shareProfitPerETH).div(10**decimals);\\n        user.lossDebt = user.amount.mul(group.shareLossPerETH).div(10**decimals);\\n        emit Deposit(msg.sender, poolId, amount);\\n    }\\n\\n    function withdrawFromPool(uint256 poolId, uint256 amount) external nonReentrant {\\n        require(poolId < poolInfo.length, \\\"No pool\\\");\\n        UserInfo storage user = userInfo[poolId][msg.sender];\\n        GroupInfo storage group = groupInfo[poolId][user.voteGroup];\\n        require(user.amount >= amount, \\\"Withdraw over than deposit\\\");\\n\\n        updatePool(poolId);\\n        _claim(poolId);\\n\\n        if (amount > 0) {\\n            if (user.amount < amount) {\\n                amount = user.amount;\\n            }\\n            user.amount = user.amount.sub(amount);\\n            group.deposit = group.deposit.sub(amount);\\n            group.holding = group.holding.sub(amount);\\n            _safeEthTransfer(msg.sender, amount);\\n        }\\n        user.profitDebt = user.amount.mul(group.shareProfitPerETH).div(10**decimals);\\n        user.lossDebt = user.amount.mul(group.shareLossPerETH).div(10**decimals);\\n        emit Withdraw(msg.sender, poolId, amount);\\n    }\\n\\n    function claim(uint256 poolId) external nonReentrant {\\n        require(poolId < poolInfo.length, \\\"No pool\\\");\\n        updatePool(poolId);\\n        _claim(poolId);\\n    }\\n\\n    function updatePool(uint256 poolId) public {\\n        require(poolId < poolInfo.length, \\\"No pool\\\");\\n\\n        PoolInfo storage pool = poolInfo[poolId];\\n        GroupInfo storage upGroup = groupInfo[poolId][GroupType.Up];\\n        GroupInfo storage downGroup = groupInfo[poolId][GroupType.Down];\\n        uint256 reserved = _getPrice(pool.tokenPair);\\n\\n        if (upGroup.holding >= pool.minFund && downGroup.holding >= pool.minFund) {\\n            uint256 rewardAmt = 0;\\n            uint256 lossAmt = 0;\\n            uint256 fee = 0;\\n            uint256 changedRatio = 0;\\n            uint256 changedReserved = 0;\\n            if (reserved > pool.prevReserved) {\\n                changedReserved = reserved.sub(pool.prevReserved);\\n                changedRatio = changedReserved.mul(10**decimals).div(pool.prevReserved);\\n\\n                if (changedRatio > pool.maxChangeRatio) {\\n                    changedRatio = pool.maxChangeRatio;\\n                }\\n                lossAmt = changedRatio.mul(downGroup.holding);\\n                fee = _distributeFee(lossAmt);\\n                rewardAmt = lossAmt.sub(fee);\\n                \\n                _updateGroup(poolId, GroupType.Up, rewardAmt, false);\\n                _updateGroup(poolId, GroupType.Down, lossAmt, true);\\n            } else {\\n                changedReserved = pool.prevReserved.sub(reserved);\\n                changedRatio = changedReserved.mul(10**decimals).div(pool.prevReserved);\\n\\n                if (changedRatio > pool.maxChangeRatio) {\\n                    changedRatio = pool.maxChangeRatio;\\n                }\\n\\n                lossAmt = changedRatio.mul(upGroup.holding);\\n                fee = _distributeFee(lossAmt);\\n                rewardAmt = lossAmt.sub(fee);\\n\\n                _updateGroup(poolId, GroupType.Down, rewardAmt, false);\\n                _updateGroup(poolId, GroupType.Up, lossAmt, true);\\n            }\\n        }\\n        pool.prevReserved = reserved;\\n    }\\n\\n    function _getPrice(address tokenPair) internal view returns(uint256) {\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(tokenPair).getReserves();\\n        address token0 = IUniswapV2Pair(tokenPair).token0();\\n\\n        uint256 ratio = 0;\\n        if (token0 == WETH) {\\n            ratio = reserve0.mul(10**decimals).div(reserve1);\\n        } else {\\n            ratio = reserve1.mul(10**decimals).div(reserve0);\\n        }\\n\\n        return ratio;\\n    }\\n\\n    function _safeEthTransfer(address to, uint256 amount) internal {\\n        uint256 remain = address(this).balance;\\n        if (remain < amount) {\\n            amount = remain;\\n        }\\n        payable(to).transfer(amount);\\n    }\\n\\n    function _updateGroup(uint256 poolId, GroupType groupType, uint256 amount, bool loss) internal {\\n        GroupInfo storage group = groupInfo[poolId][groupType];\\n        uint256 volumeSharePerETH = amount.div(group.deposit);\\n        amount = amount.div(10**decimals);\\n        if (loss) {\\n            group.holding = group.holding.sub(amount);\\n            group.shareLossPerETH = group.shareLossPerETH.add(volumeSharePerETH);\\n        } else {\\n            group.holding = group.holding.add(amount);\\n            group.shareProfitPerETH = group.shareProfitPerETH.add(volumeSharePerETH);\\n        }\\n    }\\n\\n    function _claim(uint256 poolId) internal {\\n        UserInfo storage user = userInfo[poolId][msg.sender];\\n        GroupInfo storage group = groupInfo[poolId][user.voteGroup];\\n        \\n        uint256 pendingProfit = 0;\\n        uint256 pendingLoss = 0;\\n        if (user.amount > 0) {\\n            pendingProfit = user.amount.mul(group.shareProfitPerETH).div(10**decimals).sub(user.profitDebt);\\n\\n            pendingLoss = user.amount.mul(group.shareLossPerETH).div(10**decimals).sub(user.lossDebt);\\n        }\\n\\n        user.amount = user.amount.add(pendingProfit);\\n        user.amount = user.amount.sub(pendingLoss);\\n\\n        if (pendingProfit > pendingLoss) {\\n            uint256 volume = pendingProfit.sub(pendingLoss);\\n            group.holding = group.holding.sub(volume);\\n            _safeEthTransfer(msg.sender, volume);\\n            emit Profit(msg.sender, volume);\\n        } else if (pendingProfit < pendingLoss) {\\n            uint256 volume = pendingLoss.sub(pendingProfit);\\n            group.deposit = group.deposit.sub(volume);\\n            emit Loss(msg.sender, volume);\\n        }\\n    }\\n\\n    function _distributeFee(uint256 amount) internal returns(uint256) {\\n        uint256 totalFee = STAKING_FEE.add(TREASURY_FEE).add(BUYBACK_FEE);\\n        uint256 feeAmt = amount.mul(totalFee).div(10**decimals);\\n\\n        uint256 partialFeeAmt = feeAmt.mul(STAKING_FEE).div(totalFee).div(10**decimals);\\n        _safeEthTransfer(STAKING_VAULT, partialFeeAmt);\\n\\n        partialFeeAmt = feeAmt.mul(TREASURY_FEE).div(totalFee).div(10**decimals);\\n        _safeEthTransfer(TREASURY_VAULT, partialFeeAmt);\\n        \\n        partialFeeAmt = feeAmt.mul(BUYBACK_FEE).div(totalFee).div(10**decimals);\\n        _safeEthTransfer(BUYBACK_VAULT, partialFeeAmt);\\n\\n        return feeAmt;\\n    }\\n}\"\r\n    },\r\n    \"/Volumes/Data/Work/Blockchain/eth/DEX_MEX/prediction/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"stakingVault\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryVault\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buybackVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUYBACK_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositIntoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IMasterMex.GroupType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"groupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareProfitPerETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareLossPerETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossDebt\",\"type\":\"uint256\"},{\"internalType\":\"enum IMasterMex.GroupType\",\"name\":\"voteGroup\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevReserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxChangeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFund\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"stakingVault\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryVault\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buybackVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"}],\"name\":\"setFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IMasterMex.GroupType\",\"name\":\"voteGroup\",\"type\":\"uint8\"}],\"name\":\"setPendingUserGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxChangeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFund\",\"type\":\"uint256\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossDebt\",\"type\":\"uint256\"},{\"internalType\":\"enum IMasterMex.GroupType\",\"name\":\"voteGroup\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPendingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MasterMex","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002d615c4e1ef8b6cf2a9c9d1157ad9b616f4345ea000000000000000000000000a3e0e45a8e880d8e284471ba4088157eb395ceb4000000000000000000000000f111cdc44e1e5adc095447ee3bff9e75d2f6069800000000000000000000000000000000000000000000000000000000ee6b280000000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000077359400","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}