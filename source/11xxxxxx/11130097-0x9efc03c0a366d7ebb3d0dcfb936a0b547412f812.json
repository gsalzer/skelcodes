{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\ncontract ETHER {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant public INVEST_MIN_AMOUNT = 1 ether; \r\n\tuint256 constant public BASE_PERCENT = 10; \r\n\tuint256[] public REFERRAL_PERCENTS = [50, 20, 10, 10, 10, 10, 5, 5, 5, 5, 2, 2, 2, 2, 2]; \r\n\tuint256 constant public MARKETING_FEE = 60; \r\n\tuint256 constant public PROJECT_FEE = 30; \r\n\tuint256 constant public DAY_FEE = 10; \r\n\tuint256 constant public PERCENTS_DIVIDER = 1000; \r\n\tuint256 constant public CONTRACT_BALANCE_STEP = 100 ether; \r\n\tuint256 constant public TIME_STEP = 24 hours; \r\n\tuint256 constant public ADD_DEPOSITS_TIME_STEP = 2 hours; \r\n\tuint256 constant public START_BOUNS = 2000 ether; \r\n\t\r\n\r\n\tuint256 public totalUsers; \r\n\tuint256 public totalInvested; \r\n\tuint256 public totalWithdrawn; \r\n\tuint256 public totalDeposits; \r\n\tuint256 public totalTodayInvested; \r\n\tuint256 public bonusStart; \r\n\tuint256 public depBonusEnd; \r\n\tuint256 public totalDayMaxInvested; \r\n\taddress public maxInvestedUser; \r\n\taddress[10] public bonusUsers; \r\n\taddress payable public marketingAddress; \r\n\taddress payable public projectAddress; \r\n    bool public bonusOpen = false; \r\n\tbool public randBonus = false; \r\n\r\n\tstruct Deposit {\r\n\t\tuint256 amount; \r\n\t\tuint256 withdrawn; \r\n\t\tuint256 start; \r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint; \r\n\t\taddress referrer; \r\n\t\tuint256 bonus; \r\n\t}\r\n\r\n\tmapping (address => User) internal users;\r\n\r\n\tevent Newbie(address user); \r\n\tevent NewDeposit(address indexed user, uint256 amount); \r\n\tevent MaxInvested(address indexed user, uint256 amount); \r\n\tevent BonusEnd(address indexed user, uint256 amount, uint256 totalAmount); \r\n\tevent Withdrawn(address indexed user, uint256 amount); \r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount); // 返利记录\r\n\tevent FeePayed(address indexed user, uint256 totalAmount); \r\n\r\n\tconstructor(address payable marketingAddr, address payable projectAddr) public {\r\n\t\trequire(!isContract(marketingAddr) && !isContract(projectAddr)); //\r\n\t\tmarketingAddress = marketingAddr;\r\n\t\tprojectAddress = projectAddr;\r\n\t}\r\n\t\r\n\tfunction invest(address referrer) public payable {\r\n\t\trequire(msg.value >= INVEST_MIN_AMOUNT); \r\n\r\n\t\tcheckBonusEnd();\r\n\r\n\t\tmarketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER)); \r\n\t\tprojectAddress.transfer(msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER)); \r\n\r\n\t\temit FeePayed(msg.sender, msg.value.mul(MARKETING_FEE.add(PROJECT_FEE)).div(PERCENTS_DIVIDER)); \r\n\r\n\t\tuint256 contractBalance = address(this).balance; \r\n\r\n\t\tif(contractBalance>=START_BOUNS && !randBonus){\r\n\t\t\tbonusStart = block.timestamp; \r\n\t\t\tdepBonusEnd =  TIME_STEP; \r\n\t\t\trandBonus = !randBonus; \r\n\t\t\tbonusOpen = !bonusOpen; \r\n\t\t}\r\n\r\n\t\tUser storage user = users[msg.sender]; \r\n\r\n\t\tif (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n\t\t\tuser.referrer = referrer; \r\n\t\t}\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\r\n\t\t\taddress upline = user.referrer; \r\n\r\n\t\t\tfor (uint256 i = 0; i < 15; i++) {\r\n\t\t\t\tif (upline != address(0)) { \r\n\t\t\t\t\tuint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER); \r\n\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount); \r\n\t\t\t\t\temit RefBonus(upline, msg.sender, i, amount); \r\n\t\t\t\t\tupline = users[upline].referrer; \r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp; \r\n\t\t\ttotalUsers = totalUsers.add(1);\r\n\t\t\temit Newbie(msg.sender); \r\n\t\t}\r\n\r\n\t\tif(bonusOpen&&randBonus){\r\n\t\t    for(uint256 i = 0; i < 9; i++){\r\n    \t\t    bonusUsers[i] = bonusUsers[i+1];\r\n    \t\t}\r\n    \t\tbonusUsers[9]=msg.sender;\r\n    \t\t\r\n    \t\tbonusStart = bonusStart.add(ADD_DEPOSITS_TIME_STEP);\r\n    \t\tif (block.timestamp - bonusStart >= TIME_STEP){\r\n    \t\t    bonusStart = block.timestamp;\r\n    \t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(block.timestamp - bonusStart >= TIME_STEP){\r\n\t\t\tuint256 bonus = totalTodayInvested.mul(DAY_FEE).div(PERCENTS_DIVIDER);\r\n\t\t\tusers[maxInvestedUser].bonus = users[maxInvestedUser].bonus.add(bonus);\r\n\t\t\temit MaxInvested(maxInvestedUser,bonus);\r\n\r\n\t\t\ttotalTodayInvested = 0;\r\n\t\t\ttotalDayMaxInvested = 0;\r\n\t\t\tmaxInvestedUser = address(0);\r\n\t\t\tbonusStart += TIME_STEP;\r\n\t\t}else{\r\n\t\t\ttotalTodayInvested = totalTodayInvested.add(msg.value);\r\n\t\t\tif(msg.value > totalDayMaxInvested){\r\n\t\t\t\ttotalDayMaxInvested = msg.value;\r\n\t\t\t\tmaxInvestedUser = msg.sender;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuser.deposits.push(Deposit(msg.value, 0, block.timestamp));\r\n\r\n\t\ttotalInvested = totalInvested.add(msg.value); \r\n\t\ttotalDeposits = totalDeposits.add(1); \r\n\r\n\t\temit NewDeposit(msg.sender, msg.value); \r\n\r\n\t}\r\n\t\r\n\tfunction withdraw() public {\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 userPercentRate = getUserPercentRate(msg.sender); \r\n\r\n\t\tuint256 totalAmount; \r\n\t\tuint256 dividends;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tif (user.deposits[i].withdrawn < user.deposits[i].amount.mul(2)) {\r\n\t\t\t\tif (user.deposits[i].start > user.checkpoint) {\r\n                    \r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(2)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(2)).sub(user.deposits[i].withdrawn);\r\n\t\t\t\t}\r\n\t\t\t\tuser.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends);\r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 referralBonus = getUserReferralBonus(msg.sender); \r\n\t\tif (referralBonus > 0) {\r\n\t\t\ttotalAmount = totalAmount.add(referralBonus);\r\n\t\t\tuser.bonus = 0;\r\n\t\t}\r\n\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\tif (contractBalance < totalAmount) {\r\n\t\t\ttotalAmount = contractBalance;\r\n\t\t}\r\n\r\n\t\tuser.checkpoint = block.timestamp;\r\n\r\n\t\tmsg.sender.transfer(totalAmount);\r\n\r\n\t\ttotalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t\tcheckBonusEnd();\r\n\t}\r\n\r\n\tfunction checkBonusEnd() public {\r\n\t\tif(block.timestamp-bonusStart >= depBonusEnd && bonusOpen && randBonus){\r\n\t\t\tuint256 balance = address(this).balance;\r\n\t\t\tfor(uint256 i = 0; i < 10; i++){\r\n\t\t\t\taddress toUser = bonusUsers[i];\r\n\t\t\t\tbonusUsers[i] = address(0);\r\n\t\t\t\tusers[toUser].bonus = users[toUser].bonus.add(balance.div(10));\r\n\t\t\t\temit BonusEnd(toUser, balance.div(10), balance);\r\n\t\t\t}\r\n\t\t\tbonusOpen = !bonusOpen;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction getContractBalanceRate() public view returns (uint256) {\r\n\t\tuint256 contractBalance = address(this).balance; \r\n\t\tuint256 contractBalancePercent = contractBalance.div(CONTRACT_BALANCE_STEP); \r\n\t\tif (contractBalancePercent > 100) {\r\n\t\t\tcontractBalancePercent = 100;\r\n\t\t}\r\n\t\treturn BASE_PERCENT.add(contractBalancePercent); \r\n\t}\r\n\r\n\tfunction getUserPercentRate(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 contractBalanceRate = getContractBalanceRate(); \r\n\t\t\r\n\t\tif (isActive(userAddress)) {\r\n\t\t\tuint256 timeMultiplier = (now.sub(user.checkpoint)).div(TIME_STEP); \r\n\t\t\treturn contractBalanceRate.add(timeMultiplier);\r\n\t\t} else {\r\n\t\t\treturn contractBalanceRate;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 userPercentRate = getUserPercentRate(userAddress); \r\n\r\n\t\tuint256 totalDividends; \r\n\t\tuint256 dividends; \r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\t\t\tif (user.deposits[i].withdrawn < user.deposits[i].amount.mul(2)) {\r\n\r\n\t\t\t\tif (user.deposits[i].start > user.checkpoint) {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(2)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(2)).sub(user.deposits[i].withdrawn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttotalDividends = totalDividends.add(dividends);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn totalDividends;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].bonus;\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n\t}\r\n\r\n\tfunction isActive(address userAddress) public view returns (bool) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tif (user.deposits.length > 0) {\r\n\t\t\tif (user.deposits[user.deposits.length-1].withdrawn < user.deposits[user.deposits.length-1].amount.mul(2)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\treturn (user.deposits[index].amount, user.deposits[index].withdrawn, user.deposits[index].start);\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tamount = amount.add(user.deposits[i].amount);\r\n\t\t}\r\n\r\n\t\treturn amount;\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tamount = amount.add(user.deposits[i].withdrawn);\r\n\t\t}\r\n\r\n\t\treturn amount;\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADD_DEPOSITS_TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAY_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkBonusEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInvestedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDayMaxInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_BOUNS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_BALANCE_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depBonusEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTodayInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalanceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"marketingAddr\",\"type\":\"address\"},{\"name\":\"projectAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BonusEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]","ContractName":"ETHER","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ee76d4227b986571ba41204214884195026c5246000000000000000000000000cba437423e2fd523e63c7c501106acf37b5d205b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://104576048124e1a5c0b961b3bea5504e001d0c8228015b11b24cc5d6af1fb75b"}]}