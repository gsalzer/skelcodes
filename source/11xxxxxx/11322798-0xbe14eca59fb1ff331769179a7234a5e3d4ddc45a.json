{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.12;\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract LORVestingVault {\n\tusing SafeMath for uint256;\n\tusing SafeMath for uint16;\n\tusing SafeERC20 for IERC20;\n\n\tuint256 internal constant SECONDS_PER_DAY = 86400;\n\n\tstruct Grant {\n\t\tuint256 startTime;\n\t\tuint256 amount;\n\t\tuint16 vestingDuration;\n\t\tuint16 vestingCliff;\n\t\tuint16 daysClaimed;\n\t\tuint256 totalClaimed;\n\t\taddress recipient;\n\t}\n\n\tIERC20 public token;\n\tuint256 private _totalSupply;\n\tuint256 private _totalGranted;\n\tuint256 private _totalClaimed;\n\n\taddress public denMultiSig;\n\tuint256 public totalVestingCount;\n\n\tmapping(uint256 => Grant) public tokenGrants;\n\tmapping(address => uint256[]) private activeGrants;\n\n\tevent TokensAdded(uint256 amount);\n\tevent GrantAdded(address indexed recipient, uint256 vestingId);\n\tevent GrantTokensClaimed(address indexed recipient, uint256 amountClaimed);\n\tevent GrantRemoved(address recipient, uint256 amountVested, uint256 amountNotVested);\n\tevent ChangedMultisig(address multisig);\n\n\tconstructor(IERC20 _token) public {\n\t\trequire(address(_token) != address(0));\n\t\tdenMultiSig = msg.sender;\n\t\ttoken = _token;\n\t}\n\n\tmodifier onlyDenMultiSig {\n\t\trequire(msg.sender == denMultiSig, \"not owner\");\n\t\t_;\n\t}\n\n\tmodifier onlyGrantRecipient(uint256 _grantId) {\n\t\tGrant storage tokenGrant = tokenGrants[_grantId];\n\t\trequire(msg.sender == tokenGrant.recipient, \"not grant recipient\");\n\t\t_;\n\t}\n\n\tmodifier onlyValidAddress(address _recipient) {\n\t\trequire(\n\t\t\t_recipient != address(0) && _recipient != address(this) && _recipient != address(token),\n\t\t\t\"not valid recipient\"\n\t\t);\n\t\t_;\n\t}\n\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\tfunction totalGranted() public view returns (uint256) {\n\t\treturn _totalGranted;\n\t}\n\n\tfunction totalClaimed() public view returns (uint256) {\n\t\treturn _totalClaimed;\n\t}\n\n\tfunction deposit(uint256 amount) public onlyDenMultiSig {\n\t\t_totalSupply = _totalSupply.add(amount);\n\t\ttoken.safeTransferFrom(msg.sender, address(this), amount);\n\t\temit TokensAdded(amount);\n\t}\n\n\tfunction addTokenGrant(\n\t\taddress _recipient,\n\t\tuint256 _startTime,\n\t\tuint256 _amount,\n\t\tuint16 _vestingDurationInDays,\n\t\tuint16 _vestingCliffInDays\n\t) external onlyDenMultiSig {\n\t\trequire(_totalGranted.add(_amount) <= _totalSupply, \"add more tokens\");\n\t\trequire(_vestingCliffInDays >= 30, \"less than 30 days\");\n\t\trequire(_vestingCliffInDays <= 365, \"more than 1 year\");\n\t\trequire(_vestingDurationInDays <= 10 * 365, \"more than 10 years\");\n\t\trequire(_vestingDurationInDays >= _vestingCliffInDays, \"Duration < Cliff\");\n\n\t\tuint256 amountVestedPerDay = _amount.div(_vestingDurationInDays);\n\t\trequire(amountVestedPerDay > 0, \"vested per day must be more than 0\");\n\n\t\tGrant memory grant = Grant({\n\t\t\tstartTime: _startTime == 0 ? currentTime() : _startTime,\n\t\t\tamount: _amount,\n\t\t\tvestingDuration: _vestingDurationInDays,\n\t\t\tvestingCliff: _vestingCliffInDays,\n\t\t\tdaysClaimed: 0,\n\t\t\ttotalClaimed: 0,\n\t\t\trecipient: _recipient\n\t\t});\n\n\t\t// add the amount to total granted tokens\n\t\t_totalGranted = _totalGranted.add(_amount);\n\n\t\ttokenGrants[totalVestingCount] = grant;\n\t\tactiveGrants[_recipient].push(totalVestingCount);\n\t\temit GrantAdded(_recipient, totalVestingCount);\n\t\ttotalVestingCount++;\n\t}\n\n\tfunction getActiveGrants(address _recipient) public view returns (uint256[] memory) {\n\t\treturn activeGrants[_recipient];\n\t}\n\n\t/// @notice Calculate the vested and unclaimed months and tokens available for `_grantId` to claim\n\t/// Due to rounding errors once grant duration is reached, returns the entire grant amount remaining\n\t/// Returns (0, 0) if cliff has not been reached\n\tfunction calculateGrantClaim(uint256 _grantId) public view returns (uint16, uint256) {\n\t\tGrant storage tokenGrant = tokenGrants[_grantId];\n\n\t\t// For grants created with a future start date, that hasn't been reached, return 0, 0\n\t\tif (currentTime() < tokenGrant.startTime) {\n\t\t\treturn (0, 0);\n\t\t}\n\n\t\t// Check cliff was reached\n\t\tuint256 elapsedTime = currentTime().sub(tokenGrant.startTime);\n\t\tuint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\n\n\t\tif (elapsedDays < tokenGrant.vestingCliff) {\n\t\t\treturn (uint16(elapsedDays), 0);\n\t\t}\n\n\t\t// If over vesting duration, all tokens vested\n\t\tif (elapsedDays >= tokenGrant.vestingDuration) {\n\t\t\tuint256 remainingGrant = tokenGrant.amount.sub(tokenGrant.totalClaimed);\n\t\t\treturn (tokenGrant.vestingDuration, remainingGrant);\n\t\t} else {\n\t\t\tuint16 daysVested = uint16(elapsedDays.sub(tokenGrant.daysClaimed));\n\t\t\tuint256 amountVestedPerDay = tokenGrant.amount.div(uint256(tokenGrant.vestingDuration));\n\t\t\tuint256 amountVested = uint256(daysVested.mul(amountVestedPerDay));\n\t\t\treturn (daysVested, amountVested);\n\t\t}\n\t}\n\n\t/// @notice Allows a grant recipient to claim their vested tokens. Errors if no tokens have vested\n\t/// It is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\n\tfunction claimVestedTokens(uint256 _grantId) external onlyGrantRecipient(_grantId) {\n\t\tuint16 daysVested;\n\t\tuint256 amountVested;\n\t\t(daysVested, amountVested) = calculateGrantClaim(_grantId);\n\t\trequire(amountVested > 0, \"vested amount is 0\");\n\t\trequire(_totalSupply.sub(amountVested) >= 0, \"not enough tokens\");\n\n\t\tGrant storage tokenGrant = tokenGrants[_grantId];\n\t\ttokenGrant.daysClaimed = uint16(tokenGrant.daysClaimed.add(daysVested));\n\t\ttokenGrant.totalClaimed = uint256(tokenGrant.totalClaimed.add(amountVested));\n\n\t\t// add the amount to total claimed tokens\n\t\t_totalClaimed = _totalClaimed.add(amountVested);\n\n\t\t// remove the amount from the total supply\n\t\t_totalSupply = _totalSupply.sub(amountVested);\n\n\t\ttoken.safeTransfer(tokenGrant.recipient, amountVested);\n\t\temit GrantTokensClaimed(tokenGrant.recipient, amountVested);\n\t}\n\n\t/// @notice Terminate token grant transferring all vested tokens to the `_grantId`\n\t/// and returning all non-vested tokens to the Den MultiSig\n\t/// Secured to the Den MultiSig only\n\t/// @param _grantId grantId of the token grant recipient\n\tfunction removeTokenGrant(uint256 _grantId) external onlyDenMultiSig {\n\t\tGrant storage tokenGrant = tokenGrants[_grantId];\n\t\taddress recipient = tokenGrant.recipient;\n\t\tuint16 daysVested;\n\t\tuint256 amountVested;\n\t\t(daysVested, amountVested) = calculateGrantClaim(_grantId);\n\n\t\trequire(_totalSupply.sub(amountVested) >= 0, \"not enough tokens\");\n\t\tuint256 amountNotVested = (tokenGrant.amount.sub(tokenGrant.totalClaimed)).sub(amountVested);\n\n\t\ttokenGrant.startTime = 0;\n\t\ttokenGrant.amount = 0;\n\t\ttokenGrant.vestingDuration = 0;\n\t\ttokenGrant.vestingCliff = 0;\n\t\ttokenGrant.daysClaimed = 0;\n\t\ttokenGrant.totalClaimed = 0;\n\t\ttokenGrant.recipient = address(0);\n\n\t\t// add the vested amount to total claimed tokens\n\t\t_totalClaimed = _totalClaimed.add(amountVested);\n\n\t\t// remove the vested amount from the total supply\n\t\t_totalSupply = _totalSupply.sub(amountVested);\n\n\t\t// remove the non-vested amount from the total granted\n\t\t_totalGranted = _totalGranted.sub(amountNotVested);\n\n\t\ttoken.safeTransfer(recipient, amountVested);\n\t\temit GrantRemoved(recipient, amountVested, amountNotVested);\n\t}\n\n\tfunction currentTime() private view returns (uint256) {\n\t\treturn block.timestamp;\n\t}\n\n\tfunction tokensVestedPerDay(uint256 _grantId) public view returns (uint256) {\n\t\tGrant storage tokenGrant = tokenGrants[_grantId];\n\t\treturn tokenGrant.amount.div(uint256(tokenGrant.vestingDuration));\n\t}\n\n\tfunction changeMultiSig(address _denMultiSig) external onlyDenMultiSig onlyValidAddress(_denMultiSig) {\n\t\tdenMultiSig = _denMultiSig;\n\t\temit ChangedMultisig(_denMultiSig);\n\t}\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"ChangedMultisig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"GrantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountVested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNotVested\",\"type\":\"uint256\"}],\"name\":\"GrantRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"GrantTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensAdded\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_vestingCliffInDays\",\"type\":\"uint16\"}],\"name\":\"addTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"calculateGrantClaim\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_denMultiSig\",\"type\":\"address\"}],\"name\":\"changeMultiSig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"claimVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"denMultiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getActiveGrants\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"removeTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenGrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vestingCliff\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"daysClaimed\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokensVestedPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGranted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVestingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LORVestingVault","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"000000000000000000000000c3f18a746b7ca4b22976a7aacd289e83ca2faf41","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}