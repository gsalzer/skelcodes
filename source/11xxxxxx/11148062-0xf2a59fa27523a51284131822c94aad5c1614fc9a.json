{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'DYF Token' Smart Contract\r\n//\r\n// OwnerAddress :\r\n// Symbol       : \r\n// Name         : \r\n// Total Supply :\r\n// Decimals     : 18\r\n// Copyrights of 'DYFToken' With 'DYF' Symbol October 25, 2020.\r\n// The MIT Licence.\r\n// \r\n// Prepared and Compiled by: HASSAN ISA\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\nfunction add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\nrequire(c >= a);\r\n    }\r\nfunction sub(uint a, uint b) internal pure returns (uint c) {\r\nrequire(b <= a);\r\n        c = a - b;\r\n    }\r\nfunction mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\nrequire(a == 0 || c / a == b);\r\n    }\r\nfunction div(uint a, uint b) internal pure returns (uint c) {\r\nrequire(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Ownership contract\r\n// _newOwner is address of new owner\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\r\naddress public owner;\r\n\r\nevent OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\nconstructor() public {\r\nowner = 0x0D6B9AD91B86194c3BaE4cC3DB7ab466EC164048;\r\n    }\r\n\r\nmodifier onlyOwner {\r\nrequire(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // transfer Ownership to other address\r\nfunction transferOwnership(address _newOwner) public onlyOwner {\r\nrequire(_newOwner != address(0x0));\r\nemit OwnershipTransferred(owner,_newOwner);\r\nowner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\nfunction totalSupply() public constant returns (uint);\r\nfunction balanceOf(address tokenOwner) public constant returns (uint balance);\r\nfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\nfunction transfer(address to, uint tokens) public returns (bool success);\r\nfunction approve(address spender, uint tokens) public returns (bool success);\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint tokens);\r\nevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract DYFToken is ERC20Interface, Owned {\r\n\r\nusing SafeMath for uint;\r\n\r\nstring public symbol;\r\nstring public  name;\r\nuint8 public decimals;\r\nuint public _totalSupply;\r\nuint public RATE;\r\nuint public DENOMINATOR;\r\nbool public isStopped = false;\r\n\r\nmapping(address =>uint) balances;\r\nmapping(address => mapping(address =>uint)) allowed;\r\n\r\nevent Mint(address indexed to, uint256 amount);\r\nevent ChangeRate(uint256 amount);\r\n\r\nmodifier onlyWhenRunning {\r\nrequire(!isStopped);\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\nconstructor() public {\r\nsymbol = \"DYF\";\r\nname = \"DeFi Yearn Fiinance\";\r\ndecimals = 18;\r\n        _totalSupply = 30000 * 10**uint(decimals);\r\nbalances[owner] = _totalSupply;\r\n        RATE = 20000; // 1 ETH = 20 DYF\r\n        DENOMINATOR = 1000;\r\nemit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // requires enough gas for execution\r\n    // ----------------------------------------------------------------------------\r\nfunction() public payable {\r\nbuyTokens();\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Function to handle eth and token transfers\r\n    // tokens are transferred to user\r\n    // ETH are transferred to current owner\r\n    // ----------------------------------------------------------------------------\r\nfunction buyTokens() onlyWhenRunning public payable {\r\nrequire(msg.value> 0);\r\n\r\nuint tokens = msg.value.mul(RATE).div(DENOMINATOR);\r\nrequire(balances[owner] >= tokens);\r\n\r\nbalances[msg.sender] = balances[msg.sender].add(tokens);\r\nbalances[owner] = balances[owner].sub(tokens);\r\n\r\nemit Transfer(owner, msg.sender, tokens);\r\n\r\nowner.transfer(msg.value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\nfunction totalSupply() public view returns (uint) {\r\nreturn _totalSupply;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\nfunction balanceOf(address tokenOwner) public view returns (uint balance) {\r\nreturn balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\nfunction transfer(address to, uint tokens) public returns (bool success) {\r\nrequire(to != address(0));\r\nrequire(tokens > 0);\r\nrequire(balances[msg.sender] >= tokens);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(tokens);\r\nbalances[to] = balances[to].add(tokens);\r\nemit Transfer(msg.sender, to, tokens);\r\nreturn true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // ------------------------------------------------------------------------\r\nfunction approve(address spender, uint tokens) public returns (bool success) {\r\nrequire(spender != address(0));\r\nrequire(tokens > 0);\r\n\r\nallowed[msg.sender][spender] = tokens;\r\nemit Approval(msg.sender, spender, tokens);\r\nreturn true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // ------------------------------------------------------------------------\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\nrequire(from != address(0));\r\nrequire(to != address(0));\r\nrequire(tokens > 0);\r\nrequire(balances[from] >= tokens);\r\nrequire(allowed[from][msg.sender] >= tokens);\r\n\r\nbalances[from] = balances[from].sub(tokens);\r\nallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\nbalances[to] = balances[to].add(tokens);\r\nemit Transfer(from, to, tokens);\r\nreturn true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\nfunction allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\nreturn allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Increase the amount of tokens that an owner allowed to a spender.\r\n    //\r\n    // approve should be called when allowed[_spender] == 0. To increment\r\n    // allowed value is better to use this function to avoid 2 calls (and wait until\r\n    // the first transaction is mined)\r\n    // _spender The address which will spend the funds.\r\n    // _addedValueThe amount of tokens to increase the allowance by.\r\n    // ------------------------------------------------------------------------\r\nfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\nrequire(_spender != address(0));\r\n\r\nallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Decrease the amount of tokens that an owner allowed to a spender.\r\n    //\r\n    // approve should be called when allowed[_spender] == 0. To decrement\r\n    // allowed value is better to use this function to avoid 2 calls (and wait until\r\n    // the first transaction is mined)\r\n    // _spender The address which will spend the funds.\r\n    // _subtractedValueThe amount of tokens to decrease the allowance by.\r\n    // ------------------------------------------------------------------------\r\nfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\nrequire(_spender != address(0));\r\n\r\nuint oldValue = allowed[msg.sender][_spender];\r\nif (_subtractedValue > oldValue) {\r\nallowed[msg.sender][_spender] = 0;\r\n        } else {\r\nallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Change the ETH to IO rate\r\n    // ------------------------------------------------------------------------\r\nfunction changeRate(uint256 _rate) public onlyOwner {\r\nrequire(_rate > 0);\r\n\r\n        RATE =_rate;\r\nemit ChangeRate(_rate);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // _to The address that will receive the minted tokens.\r\n    // _amount The amount of tokens to mint.\r\n    // A boolean that indicates if the operation was successful.\r\n    // ------------------------------------------------------------------------\r\nfunction mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\nrequire(_to != address(0));\r\nrequire(_amount > 0);\r\n\r\nuint newamount = _amount * 10**uint(decimals);\r\n        _totalSupply = _totalSupply.add(newamount);\r\nbalances[_to] = balances[_to].add(newamount);\r\n\r\nemit Mint(_to, newamount);\r\nemit Transfer(address(0), _to, newamount);\r\nreturn true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // function to stop the ICO\r\n    // ------------------------------------------------------------------------\r\nfunction stopPRESALE() onlyOwner public {\r\nisStopped = true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // function to resume PRESALE\r\n    // ------------------------------------------------------------------------\r\nfunction resumePRESALE() onlyOwner public {\r\nisStopped = false;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumePRESALE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPRESALE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DYFToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bbcdb77cd729f70762d81b59ff544be6c1895dd7c28aa45faebf7057e88c51f0"}]}