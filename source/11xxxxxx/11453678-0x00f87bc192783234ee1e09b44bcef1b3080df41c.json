{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 12-14-2020\r\n*/\r\n/*\r\n\r\n    Copyright 2020 Charge Factory.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IChargeFactory {\r\n    function getCharge(address baseToken, address quoteToken) external view returns (address);\r\n}\r\n\r\n// lib/ReentrancyGuard.sol\r\n/**\r\n * @title ReentrancyGuard\r\n * @author Charge Breeder\r\n *\r\n * @notice Protect functions from Reentrancy Attack\r\n */\r\ncontract ReentrancyGuard {\r\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\r\n    // zero-state of _ENTERED_ is false\r\n    bool private _ENTERED_;\r\n\r\n    modifier preventReentrant() {\r\n        require(!_ENTERED_, \"REENTRANT\");\r\n        _ENTERED_ = true;\r\n        _;\r\n        _ENTERED_ = false;\r\n    }\r\n}\r\n\r\n// lib/SafeERC20.sol\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// lib/SafeMath.sol\r\n/**\r\n * @title SafeMath\r\n * @author Charge Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// intf/ICharge.sol\r\ninterface ICharge {\r\n    function init(\r\n        address owner,\r\n        address supervisor,\r\n        address maintainer,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address oracle,\r\n        uint256 lpFeeRate,\r\n        uint256 mtFeeRate,\r\n        uint256 k,\r\n        uint256 gasPriceLimit\r\n    ) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function claimOwnership() external;\r\n\r\n    function sellBaseToken(\r\n        uint256 amount,\r\n        uint256 minReceiveQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function buyBaseToken(\r\n        uint256 amount,\r\n        uint256 maxPayQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\r\n\r\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\r\n\r\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\r\n\r\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawBase(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllBase() external returns (uint256);\r\n\r\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawQuote(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllQuote() external returns (uint256);\r\n\r\n    function _BASE_CAPITAL_TOKEN_() external view returns (address);\r\n\r\n    function _QUOTE_CAPITAL_TOKEN_() external view returns (address);\r\n\r\n    function _BASE_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external returns (address);\r\n}\r\n\r\n// intf/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// intf/IWETH.sol\r\ninterface IWETH {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 wad\r\n    ) external returns (bool);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n// ChargeEthProxy.sol\r\n/**\r\n * @title Charge Eth Proxy\r\n * @author Charge Breeder\r\n *\r\n * @notice Handle ETH-WETH converting for users.\r\n */\r\ncontract ChargeEthProxy is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    address public _Charge_Factory_;\r\n    address payable public _WETH_;\r\n\r\n    // ============ Events ============\r\n\r\n    event ProxySellEthToToken(\r\n        address indexed seller,\r\n        address indexed quoteToken,\r\n        uint256 payEth,\r\n        uint256 receiveToken\r\n    );\r\n\r\n    event ProxyBuyEthWithToken(\r\n        address indexed buyer,\r\n        address indexed quoteToken,\r\n        uint256 receiveEth,\r\n        uint256 payToken\r\n    );\r\n\r\n    event ProxySellTokenToEth(\r\n        address indexed seller,\r\n        address indexed baseToken,\r\n        uint256 payToken,\r\n        uint256 receiveEth\r\n    );\r\n\r\n    event ProxyBuyTokenWithEth(\r\n        address indexed buyer,\r\n        address indexed baseToken,\r\n        uint256 receiveToken,\r\n        uint256 payEth\r\n    );\r\n\r\n    event ProxyDepositEthAsBase(address indexed lp, address indexed Charge, uint256 ethAmount);\r\n\r\n    event ProxyWithdrawEthAsBase(address indexed lp, address indexed Charge, uint256 ethAmount);\r\n\r\n    event ProxyDepositEthAsQuote(address indexed lp, address indexed Charge, uint256 ethAmount);\r\n\r\n    event ProxyWithdrawEthAsQuote(address indexed lp, address indexed Charge, uint256 ethAmount);\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor(address ChargeFactory, address payable weth) public {\r\n        _Charge_Factory_ = ChargeFactory;\r\n        _WETH_ = weth;\r\n    }\r\n\r\n    fallback() external payable {\r\n        require(msg.sender == _WETH_, \"WE_SAVED_YOUR_ETH_:)\");\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == _WETH_, \"WE_SAVED_YOUR_ETH_:)\");\r\n    }\r\n\r\n    function sellEthToToken(\r\n        address quoteTokenAddress,\r\n        uint256 ethAmount,\r\n        uint256 minReceiveTokenAmount\r\n    ) external payable preventReentrant returns (uint256 receiveTokenAmount) {\r\n        require(msg.value == ethAmount, \"ETH_AMOUNT_NOT_MATCH\");\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(_WETH_, quoteTokenAddress);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        IWETH(_WETH_).deposit{value: ethAmount}();\r\n        IWETH(_WETH_).approve(Charge, ethAmount);\r\n        receiveTokenAmount = ICharge(Charge).sellBaseToken(ethAmount, minReceiveTokenAmount, \"\");\r\n        _transferOut(quoteTokenAddress, msg.sender, receiveTokenAmount);\r\n        emit ProxySellEthToToken(msg.sender, quoteTokenAddress, ethAmount, receiveTokenAmount);\r\n        return receiveTokenAmount;\r\n    }\r\n\r\n    function buyEthWithToken(\r\n        address quoteTokenAddress,\r\n        uint256 ethAmount,\r\n        uint256 maxPayTokenAmount\r\n    ) external preventReentrant returns (uint256 payTokenAmount) {\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(_WETH_, quoteTokenAddress);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        payTokenAmount = ICharge(Charge).queryBuyBaseToken(ethAmount);\r\n        _transferIn(quoteTokenAddress, msg.sender, payTokenAmount);\r\n        IERC20(quoteTokenAddress).safeApprove(Charge, payTokenAmount);\r\n        ICharge(Charge).buyBaseToken(ethAmount, maxPayTokenAmount, \"\");\r\n        IWETH(_WETH_).withdraw(ethAmount);\r\n        msg.sender.transfer(ethAmount);\r\n        emit ProxyBuyEthWithToken(msg.sender, quoteTokenAddress, ethAmount, payTokenAmount);\r\n        return payTokenAmount;\r\n    }\r\n\r\n    function sellTokenToEth(\r\n        address baseTokenAddress,\r\n        uint256 tokenAmount,\r\n        uint256 minReceiveEthAmount\r\n    ) external preventReentrant returns (uint256 receiveEthAmount) {\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(baseTokenAddress, _WETH_);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        IERC20(baseTokenAddress).safeApprove(Charge, tokenAmount);\r\n        _transferIn(baseTokenAddress, msg.sender, tokenAmount);\r\n        receiveEthAmount = ICharge(Charge).sellBaseToken(tokenAmount, minReceiveEthAmount, \"\");\r\n        IWETH(_WETH_).withdraw(receiveEthAmount);\r\n        msg.sender.transfer(receiveEthAmount);\r\n        emit ProxySellTokenToEth(msg.sender, baseTokenAddress, tokenAmount, receiveEthAmount);\r\n        return receiveEthAmount;\r\n    }\r\n\r\n    function buyTokenWithEth(\r\n        address baseTokenAddress,\r\n        uint256 tokenAmount,\r\n        uint256 maxPayEthAmount\r\n    ) external payable preventReentrant returns (uint256 payEthAmount) {\r\n        require(msg.value == maxPayEthAmount, \"ETH_AMOUNT_NOT_MATCH\");\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(baseTokenAddress, _WETH_);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        payEthAmount = ICharge(Charge).queryBuyBaseToken(tokenAmount);\r\n        IWETH(_WETH_).deposit{value: payEthAmount}();\r\n        IWETH(_WETH_).approve(Charge, payEthAmount);\r\n        ICharge(Charge).buyBaseToken(tokenAmount, maxPayEthAmount, \"\");\r\n        _transferOut(baseTokenAddress, msg.sender, tokenAmount);\r\n        uint256 refund = maxPayEthAmount.sub(payEthAmount);\r\n        if (refund > 0) {\r\n            msg.sender.transfer(refund);\r\n        }\r\n        emit ProxyBuyTokenWithEth(msg.sender, baseTokenAddress, tokenAmount, payEthAmount);\r\n        return payEthAmount;\r\n    }\r\n\r\n    function depositEthAsBase(uint256 ethAmount, address quoteTokenAddress)\r\n        external\r\n        payable\r\n        preventReentrant\r\n    {\r\n        require(msg.value == ethAmount, \"ETH_AMOUNT_NOT_MATCH\");\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(_WETH_, quoteTokenAddress);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        IWETH(_WETH_).deposit{value: ethAmount}();\r\n        IWETH(_WETH_).approve(Charge, ethAmount);\r\n        ICharge(Charge).depositBaseTo(msg.sender, ethAmount);\r\n        emit ProxyDepositEthAsBase(msg.sender, Charge, ethAmount);\r\n    }\r\n\r\n    function withdrawEthAsBase(uint256 ethAmount, address quoteTokenAddress)\r\n        external\r\n        preventReentrant\r\n        returns (uint256 withdrawAmount)\r\n    {\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(_WETH_, quoteTokenAddress);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        address ethLpToken = ICharge(Charge)._BASE_CAPITAL_TOKEN_();\r\n\r\n        // transfer all pool shares to proxy\r\n        uint256 lpBalance = IERC20(ethLpToken).balanceOf(msg.sender);\r\n        IERC20(ethLpToken).transferFrom(msg.sender, address(this), lpBalance);\r\n        ICharge(Charge).withdrawBase(ethAmount);\r\n\r\n        // transfer remain shares back to msg.sender\r\n        lpBalance = IERC20(ethLpToken).balanceOf(address(this));\r\n        IERC20(ethLpToken).transfer(msg.sender, lpBalance);\r\n\r\n        // because of withdraw penalty, withdrawAmount may not equal to ethAmount\r\n        // query weth amount first and than transfer ETH to msg.sender\r\n        uint256 wethAmount = IERC20(_WETH_).balanceOf(address(this));\r\n        IWETH(_WETH_).withdraw(wethAmount);\r\n        msg.sender.transfer(wethAmount);\r\n        emit ProxyWithdrawEthAsBase(msg.sender, Charge, wethAmount);\r\n        return wethAmount;\r\n    }\r\n\r\n    function withdrawAllEthAsBase(address quoteTokenAddress)\r\n        external\r\n        preventReentrant\r\n        returns (uint256 withdrawAmount)\r\n    {\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(_WETH_, quoteTokenAddress);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        address ethLpToken = ICharge(Charge)._BASE_CAPITAL_TOKEN_();\r\n\r\n        // transfer all pool shares to proxy\r\n        uint256 lpBalance = IERC20(ethLpToken).balanceOf(msg.sender);\r\n        IERC20(ethLpToken).transferFrom(msg.sender, address(this), lpBalance);\r\n        ICharge(Charge).withdrawAllBase();\r\n\r\n        // because of withdraw penalty, withdrawAmount may not equal to ethAmount\r\n        // query weth amount first and than transfer ETH to msg.sender\r\n        uint256 wethAmount = IERC20(_WETH_).balanceOf(address(this));\r\n        IWETH(_WETH_).withdraw(wethAmount);\r\n        msg.sender.transfer(wethAmount);\r\n        emit ProxyWithdrawEthAsBase(msg.sender, Charge, wethAmount);\r\n        return wethAmount;\r\n    }\r\n\r\n    function depositEthAsQuote(uint256 ethAmount, address baseTokenAddress)\r\n        external\r\n        payable\r\n        preventReentrant\r\n    {\r\n        require(msg.value == ethAmount, \"ETH_AMOUNT_NOT_MATCH\");\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(baseTokenAddress, _WETH_);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        IWETH(_WETH_).deposit{value: ethAmount}();\r\n        IWETH(_WETH_).approve(Charge, ethAmount);\r\n        ICharge(Charge).depositQuoteTo(msg.sender, ethAmount);\r\n        emit ProxyDepositEthAsQuote(msg.sender, Charge, ethAmount);\r\n    }\r\n\r\n    function withdrawEthAsQuote(uint256 ethAmount, address baseTokenAddress)\r\n        external\r\n        preventReentrant\r\n        returns (uint256 withdrawAmount)\r\n    {\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(baseTokenAddress, _WETH_);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        address ethLpToken = ICharge(Charge)._QUOTE_CAPITAL_TOKEN_();\r\n\r\n        // transfer all pool shares to proxy\r\n        uint256 lpBalance = IERC20(ethLpToken).balanceOf(msg.sender);\r\n        IERC20(ethLpToken).transferFrom(msg.sender, address(this), lpBalance);\r\n        ICharge(Charge).withdrawQuote(ethAmount);\r\n\r\n        // transfer remain shares back to msg.sender\r\n        lpBalance = IERC20(ethLpToken).balanceOf(address(this));\r\n        IERC20(ethLpToken).transfer(msg.sender, lpBalance);\r\n\r\n        // because of withdraw penalty, withdrawAmount may not equal to ethAmount\r\n        // query weth amount first and than transfer ETH to msg.sender\r\n        uint256 wethAmount = IERC20(_WETH_).balanceOf(address(this));\r\n        IWETH(_WETH_).withdraw(wethAmount);\r\n        msg.sender.transfer(wethAmount);\r\n        emit ProxyWithdrawEthAsQuote(msg.sender, Charge, wethAmount);\r\n        return wethAmount;\r\n    }\r\n\r\n    function withdrawAllEthAsQuote(address baseTokenAddress)\r\n        external\r\n        preventReentrant\r\n        returns (uint256 withdrawAmount)\r\n    {\r\n        address Charge = IChargeFactory(_Charge_Factory_).getCharge(baseTokenAddress, _WETH_);\r\n        require(Charge != address(0), \"Charge_NOT_EXIST\");\r\n        address ethLpToken = ICharge(Charge)._QUOTE_CAPITAL_TOKEN_();\r\n\r\n        // transfer all pool shares to proxy\r\n        uint256 lpBalance = IERC20(ethLpToken).balanceOf(msg.sender);\r\n        IERC20(ethLpToken).transferFrom(msg.sender, address(this), lpBalance);\r\n        ICharge(Charge).withdrawAllQuote();\r\n\r\n        // because of withdraw penalty, withdrawAmount may not equal to ethAmount\r\n        // query weth amount first and than transfer ETH to msg.sender\r\n        uint256 wethAmount = IERC20(_WETH_).balanceOf(address(this));\r\n        IWETH(_WETH_).withdraw(wethAmount);\r\n        msg.sender.transfer(wethAmount);\r\n        emit ProxyWithdrawEthAsQuote(msg.sender, Charge, wethAmount);\r\n        return wethAmount;\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n    function _transferIn(\r\n        address tokenAddress,\r\n        address from,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20(tokenAddress).safeTransferFrom(from, address(this), amount);\r\n    }\r\n\r\n    function _transferOut(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20(tokenAddress).safeTransfer(to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ChargeFactory\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payToken\",\"type\":\"uint256\"}],\"name\":\"ProxyBuyEthWithToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payEth\",\"type\":\"uint256\"}],\"name\":\"ProxyBuyTokenWithEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Charge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ProxyDepositEthAsBase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Charge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ProxyDepositEthAsQuote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveToken\",\"type\":\"uint256\"}],\"name\":\"ProxySellEthToToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveEth\",\"type\":\"uint256\"}],\"name\":\"ProxySellTokenToEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Charge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ProxyWithdrawEthAsBase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Charge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ProxyWithdrawEthAsQuote\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_Charge_Factory_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH_\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayTokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyEthWithToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayEthAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payEthAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"}],\"name\":\"depositEthAsBase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"}],\"name\":\"depositEthAsQuote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveTokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellEthToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveEthAmount\",\"type\":\"uint256\"}],\"name\":\"sellTokenToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveEthAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawAllEthAsBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawAllEthAsQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawEthAsBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawEthAsQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ChargeEthProxy","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d269fbc1002e7b87fdfb13c33d454ffe927b7af9000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e0c4aeabc2f1c66c185da93c9f10643739c3f55dd64ee37edb38cfc51b3040e4"}]}