{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IVat.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev Interface to interact with the vat contract from MakerDAO\r\n/// Taken from https://github.com/makerdao/developerguides/blob/master/devtools/working-with-dsproxy/working-with-dsproxy.md\r\ninterface IVat {\r\n    // function can(address, address) external view returns (uint);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function live() external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function gem(bytes32, address) external view returns (uint);\r\n    // function dai(address) external view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) external;\r\n    function fork(bytes32, address, address, int, int) external;\r\n    function move(address, address, uint) external;\r\n    function flux(bytes32, address, address, uint) external;\r\n}\r\n\r\n// File: contracts/interfaces/IDaiJoin.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev Interface to interact with the `Join.sol` contract from MakerDAO using Dai\r\ninterface IDaiJoin {\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function cage() external;\r\n    function join(address usr, uint WAD) external;\r\n    function exit(address usr, uint WAD) external;\r\n}\r\n\r\n// File: contracts/interfaces/IGemJoin.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev Interface to interact with the `Join.sol` contract from MakerDAO using ERC20\r\ninterface IGemJoin {\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function cage() external;\r\n    function join(address usr, uint WAD) external;\r\n    function exit(address usr, uint WAD) external;\r\n}\r\n\r\n// File: contracts/interfaces/IPot.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev interface for the pot contract from MakerDao\r\n/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\r\ninterface IPot {\r\n    function chi() external view returns (uint256);\r\n    function pie(address) external view returns (uint256); // Not a function, but a public variable.\r\n    function rho() external returns (uint256);\r\n    function drip() external returns (uint256);\r\n    function join(uint256) external;\r\n    function exit(uint256) external;\r\n}\r\n\r\n// File: contracts/interfaces/IChai.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev interface for the chai contract\r\n/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\r\ninterface IChai {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n    function move(address src, address dst, uint wad) external returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n    function approve(address usr, uint wad) external returns (bool);\r\n    function dai(address usr) external returns (uint wad);\r\n    function join(address dst, uint wad) external;\r\n    function exit(address src, uint wad) external;\r\n    function draw(address src, uint wad) external;\r\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\r\n    function nonces(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IWeth.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function approve(address, uint) external returns (bool) ;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ITreasury.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ITreasury {\r\n    function debt() external view returns(uint256);\r\n    function savings() external view returns(uint256);\r\n    function pushDai(address user, uint256 dai) external;\r\n    function pullDai(address user, uint256 dai) external;\r\n    function pushChai(address user, uint256 chai) external;\r\n    function pullChai(address user, uint256 chai) external;\r\n    function pushWeth(address to, uint256 weth) external;\r\n    function pullWeth(address to, uint256 weth) external;\r\n    function shutdown() external;\r\n    function live() external view returns(bool);\r\n\r\n    function vat() external view returns (IVat);\r\n    function weth() external view returns (IWeth);\r\n    function dai() external view returns (IERC20);\r\n    function daiJoin() external view returns (IDaiJoin);\r\n    function wethJoin() external view returns (IGemJoin);\r\n    function pot() external view returns (IPot);\r\n    function chai() external view returns (IChai);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/DecimalMath.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n/// @dev Implements simple fixed point math mul and div operations for 27 decimals.\r\ncontract DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public UNIT = 1e27;\r\n\r\n    /// @dev Multiplies x and y, assuming they are both fixed point with 27 digits.\r\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x.mul(y).div(UNIT);\r\n    }\r\n\r\n    /// @dev Divides x between y, assuming they are both fixed point with 27 digits.\r\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /// @dev Multiplies x and y, rounding up to the closest representable number.\r\n    /// Assumes x and y are both fixed point with `decimals` digits.\r\n    function muldrup(uint256 x, uint256 y) internal pure returns (uint256)\r\n    {\r\n        uint256 z = x.mul(y);\r\n        return z.mod(UNIT) == 0 ? z.div(UNIT) : z.div(UNIT).add(1);\r\n    }\r\n\r\n    /// @dev Divides x between y, rounding up to the closest representable number.\r\n    /// Assumes x and y are both fixed point with `decimals` digits.\r\n    function divdrup(uint256 x, uint256 y) internal pure returns (uint256)\r\n    {\r\n        uint256 z = x.mul(UNIT);\r\n        return z.mod(y) == 0 ? z.div(y) : z.div(y).add(1);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/Orchestrated.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n/**\r\n * @dev Orchestrated allows to define static access control between multiple contracts.\r\n * This contract would be used as a parent contract of any contract that needs to restrict access to some methods,\r\n * which would be marked with the `onlyOrchestrated` modifier.\r\n * During deployment, the contract deployer (`owner`) can register any contracts that have privileged access by calling `orchestrate`.\r\n * Once deployment is completed, `owner` should call `transferOwnership(address(0))` to avoid any more contracts ever gaining privileged access.\r\n */\r\n\r\ncontract Orchestrated is Ownable {\r\n    event GrantedAccess(address access, bytes4 signature);\r\n\r\n    mapping(address => mapping (bytes4 => bool)) public orchestration;\r\n\r\n    constructor () public Ownable() {}\r\n\r\n    /// @dev Restrict usage to authorized users\r\n    /// @param err The error to display if the validation fails \r\n    modifier onlyOrchestrated(string memory err) {\r\n        require(orchestration[msg.sender][msg.sig], err);\r\n        _;\r\n    }\r\n\r\n    /// @dev Add orchestration\r\n    /// @param user Address of user or contract having access to this contract.\r\n    /// @param signature bytes4 signature of the function we are giving orchestrated access to.\r\n    /// It seems to me a bad idea to give access to humans, and would use this only for predictable smart contracts.\r\n    function orchestrate(address user, bytes4 signature) public onlyOwner {\r\n        orchestration[user][signature] = true;\r\n        emit GrantedAccess(user, signature);\r\n    }\r\n\r\n    /// @dev Adds orchestration for the provided function signatures\r\n    function batchOrchestrate(address user, bytes4[] memory signatures) public onlyOwner {\r\n        for (uint256 i = 0; i < signatures.length; i++) {\r\n            orchestrate(user, signatures[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Treasury.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Treasury manages asset transfers between all contracts in the Yield Protocol and other external contracts such as Chai and MakerDAO.\r\n * Treasury doesn't have any transactional functions available for regular users.\r\n * All transactional methods are to be available only for orchestrated contracts.\r\n * Treasury will ensure that all Weth is always stored as collateral in MAkerDAO.\r\n * Treasury will use all Dai to pay off system debt in MakerDAO first, and if there is no system debt the surplus Dai will be wrapped as Chai.\r\n * Treasury will use any Chai it holds when requested to provide Dai. If there isn't enough Chai, it will borrow Dai from MakerDAO.\r\n */\r\ncontract Treasury is ITreasury, Orchestrated(), DecimalMath {\r\n    bytes32 constant WETH = \"ETH-A\";\r\n\r\n    IVat public override vat;\r\n    IWeth public override weth;\r\n    IERC20 public override dai;\r\n    IDaiJoin public override daiJoin;\r\n    IGemJoin public override wethJoin;\r\n    IPot public override pot;\r\n    IChai public override chai;\r\n    address public unwind;\r\n\r\n    bool public override live = true;\r\n\r\n    /// @dev As part of the constructor:\r\n    /// Treasury allows the `chai` and `wethJoin` contracts to take as many tokens as wanted.\r\n    /// Treasury approves the `daiJoin` and `wethJoin` contracts to move assets in MakerDAO.\r\n    constructor (\r\n        address vat_,\r\n        address weth_,\r\n        address dai_,\r\n        address wethJoin_,\r\n        address daiJoin_,\r\n        address pot_,\r\n        address chai_\r\n    ) public {\r\n        // These could be hardcoded for mainnet deployment.\r\n        dai = IERC20(dai_);\r\n        chai = IChai(chai_);\r\n        pot = IPot(pot_);\r\n        weth = IWeth(weth_);\r\n        daiJoin = IDaiJoin(daiJoin_);\r\n        wethJoin = IGemJoin(wethJoin_);\r\n        vat = IVat(vat_);\r\n        vat.hope(wethJoin_);\r\n        vat.hope(daiJoin_);\r\n\r\n        dai.approve(address(chai), uint256(-1));      // Chai will never cheat on us\r\n        dai.approve(address(daiJoin), uint256(-1));   // DaiJoin will never cheat on us\r\n        weth.approve(address(wethJoin), uint256(-1)); // WethJoin will never cheat on us\r\n    }\r\n\r\n    /// @dev Only while the Treasury is not unwinding due to a MakerDAO shutdown.\r\n    modifier onlyLive() {\r\n        require(live == true, \"Treasury: Not available during unwind\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Safe casting from uint256 to int256\r\n    function toInt(uint256 x) internal pure returns(int256) {\r\n        require(\r\n            x <= uint256(type(int256).max),\r\n            \"Treasury: Cast overflow\"\r\n        );\r\n        return int256(x);\r\n    }\r\n\r\n    /// @dev Disables pulling and pushing. Can only be called if MakerDAO shuts down.\r\n    function shutdown() public override {\r\n        require(\r\n            vat.live() == 0,\r\n            \"Treasury: MakerDAO is live\"\r\n        );\r\n        live = false;\r\n    }\r\n\r\n    /// @dev Returns the Treasury debt towards MakerDAO, in Dai.\r\n    /// We have borrowed (rate * art)\r\n    /// Borrowing limit (rate * art) <= (ink * spot)\r\n    function debt() public view override returns(uint256) {\r\n        (, uint256 rate,,,) = vat.ilks(WETH);            // Retrieve the MakerDAO stability fee for Weth\r\n        (, uint256 art) = vat.urns(WETH, address(this)); // Retrieve the Treasury debt in MakerDAO\r\n        return muld(art, rate);\r\n    }\r\n\r\n    /// @dev Returns the amount of chai in this contract, converted to Dai.\r\n    function savings() public view override returns(uint256){\r\n        return muld(chai.balanceOf(address(this)), pot.chi());\r\n    }\r\n\r\n    /// @dev Takes dai from user and pays as much system debt as possible, saving the rest as chai.\r\n    /// User needs to have approved Treasury to take the Dai.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param from Wallet to take Dai from.\r\n    /// @param daiAmount Dai quantity to take.\r\n    function pushDai(address from, uint256 daiAmount)\r\n        public override\r\n        onlyOrchestrated(\"Treasury: Not Authorized\")\r\n        onlyLive\r\n    {\r\n        require(dai.transferFrom(from, address(this), daiAmount));  // Take dai from user to Treasury\r\n\r\n        // Due to the DSR being mostly lower than the SF, it is better for us to\r\n        // immediately pay back as much as possible from the current debt to\r\n        // minimize our future stability fee liabilities. If we didn't do this,\r\n        // the treasury would simultaneously owe DAI (and need to pay the SF) and\r\n        // hold Chai, which is inefficient.\r\n        uint256 toRepay = Math.min(debt(), daiAmount);\r\n        if (toRepay > 0) {\r\n            daiJoin.join(address(this), toRepay);\r\n            // Remove debt from vault using frob\r\n            (, uint256 rate,,,) = vat.ilks(WETH); // Retrieve the MakerDAO stability fee\r\n            vat.frob(\r\n                WETH,\r\n                address(this),\r\n                address(this),\r\n                address(this),\r\n                0,                           // Weth collateral to add\r\n                -toInt(divd(toRepay, rate))  // Dai debt to remove\r\n            );\r\n        }\r\n\r\n        uint256 toSave = daiAmount - toRepay;         // toRepay can't be greater than dai\r\n        if (toSave > 0) {\r\n            chai.join(address(this), toSave);    // Give dai to Chai, take chai back\r\n        }\r\n    }\r\n\r\n    /// @dev Takes Chai from user and pays as much system debt as possible, saving the rest as chai.\r\n    /// User needs to have approved Treasury to take the Chai.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param from Wallet to take Chai from.\r\n    /// @param chaiAmount Chai quantity to take.\r\n    function pushChai(address from, uint256 chaiAmount)\r\n        public override\r\n        onlyOrchestrated(\"Treasury: Not Authorized\")\r\n        onlyLive\r\n    {\r\n        require(chai.transferFrom(from, address(this), chaiAmount));\r\n        uint256 daiAmount = chai.dai(address(this));\r\n\r\n        uint256 toRepay = Math.min(debt(), daiAmount);\r\n        if (toRepay > 0) {\r\n            chai.draw(address(this), toRepay);     // Grab dai from Chai, converted from chai\r\n            daiJoin.join(address(this), toRepay);\r\n            // Remove debt from vault using frob\r\n            (, uint256 rate,,,) = vat.ilks(WETH); // Retrieve the MakerDAO stability fee\r\n            vat.frob(\r\n                WETH,\r\n                address(this),\r\n                address(this),\r\n                address(this),\r\n                0,                           // Weth collateral to add\r\n                -toInt(divd(toRepay, rate))  // Dai debt to remove\r\n            );\r\n        }\r\n        // Anything that is left from repaying, is chai savings\r\n    }\r\n\r\n    /// @dev Takes Weth collateral from user into the Treasury Maker vault\r\n    /// User needs to have approved Treasury to take the Weth.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param from Wallet to take Weth from.\r\n    /// @param wethAmount Weth quantity to take.\r\n    function pushWeth(address from, uint256 wethAmount)\r\n        public override\r\n        onlyOrchestrated(\"Treasury: Not Authorized\")\r\n        onlyLive\r\n    {\r\n        require(weth.transferFrom(from, address(this), wethAmount));\r\n\r\n        wethJoin.join(address(this), wethAmount); // GemJoin reverts if anything goes wrong.\r\n        // All added collateral should be locked into the vault using frob\r\n        vat.frob(\r\n            WETH,\r\n            address(this),\r\n            address(this),\r\n            address(this),\r\n            toInt(wethAmount), // Collateral to add - WAD\r\n            0 // Normalized Dai to receive - WAD\r\n        );\r\n    }\r\n\r\n    /// @dev Returns dai using chai savings as much as possible, and borrowing the rest.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param to Wallet to send Dai to.\r\n    /// @param daiAmount Dai quantity to send.\r\n    function pullDai(address to, uint256 daiAmount)\r\n        public override\r\n        onlyOrchestrated(\"Treasury: Not Authorized\")\r\n        onlyLive\r\n    {\r\n        uint256 toRelease = Math.min(savings(), daiAmount);\r\n        if (toRelease > 0) {\r\n            chai.draw(address(this), toRelease);     // Grab dai from Chai, converted from chai\r\n        }\r\n\r\n        uint256 toBorrow = daiAmount - toRelease;    // toRelease can't be greater than dai\r\n        if (toBorrow > 0) {\r\n            (, uint256 rate,,,) = vat.ilks(WETH); // Retrieve the MakerDAO stability fee\r\n            // Increase the dai debt by the dai to receive divided by the stability fee\r\n            // `frob` deals with \"normalized debt\", instead of DAI.\r\n            // \"normalized debt\" is used to account for the fact that debt grows\r\n            // by the stability fee. The stability fee is accumulated by the \"rate\"\r\n            // variable, so if you store Dai balances in \"normalized dai\" you can\r\n            // deal with the stability fee accumulation with just a multiplication.\r\n            // This means that the `frob` call needs to be divided by the `rate`\r\n            // while the `GemJoin.exit` call can be done with the raw `toBorrow`\r\n            // number.\r\n            vat.frob(\r\n                WETH,\r\n                address(this),\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                toInt(divdrup(toBorrow, rate))      // We need to round up, otherwise we won't exit toBorrow\r\n            );\r\n            daiJoin.exit(address(this), toBorrow); // `daiJoin` reverts on failures\r\n        }\r\n\r\n        require(dai.transfer(to, daiAmount));                            // Give dai to user\r\n    }\r\n\r\n    /// @dev Returns chai using chai savings as much as possible, and borrowing the rest.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param to Wallet to send Chai to.\r\n    /// @param chaiAmount Chai quantity to send.\r\n    function pullChai(address to, uint256 chaiAmount)\r\n        public override\r\n        onlyOrchestrated(\"Treasury: Not Authorized\")\r\n        onlyLive\r\n    {\r\n        uint256 chi = pot.chi();\r\n        uint256 daiAmount = muldrup(chaiAmount, chi);   // dai = price * chai, we round up, otherwise we won't borrow enough dai\r\n        uint256 toRelease = Math.min(savings(), daiAmount);\r\n        // As much chai as the Treasury has, can be used, we borrow dai and convert it to chai for the rest\r\n\r\n        uint256 toBorrow = daiAmount - toRelease;    // toRelease can't be greater than daiAmount\r\n        if (toBorrow > 0) {\r\n            (, uint256 rate,,,) = vat.ilks(WETH); // Retrieve the MakerDAO stability fee\r\n            // Increase the dai debt by the dai to receive divided by the stability fee\r\n            vat.frob(\r\n                WETH,\r\n                address(this),\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                toInt(divdrup(toBorrow, rate))       // We need to round up, otherwise we won't exit toBorrow\r\n            ); // `vat.frob` reverts on failure\r\n            daiJoin.exit(address(this), toBorrow);  // `daiJoin` reverts on failures\r\n            chai.join(address(this), toBorrow);     // Grab chai from Chai, converted from dai\r\n        }\r\n\r\n        require(chai.transfer(to, chaiAmount));                            // Give dai to user\r\n    }\r\n\r\n    /// @dev Moves Weth collateral from Treasury controlled Maker Eth vault to `to` address.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param to Wallet to send Weth to.\r\n    /// @param wethAmount Weth quantity to send.\r\n    function pullWeth(address to, uint256 wethAmount)\r\n        public override\r\n        onlyOrchestrated(\"Treasury: Not Authorized\")\r\n        onlyLive\r\n    {\r\n        // Remove collateral from vault using frob\r\n        vat.frob(\r\n            WETH,\r\n            address(this),\r\n            address(this),\r\n            address(this),\r\n            -toInt(wethAmount), // Weth collateral to remove - WAD\r\n            0              // Dai debt to add - WAD\r\n        );\r\n        wethJoin.exit(to, wethAmount); // `GemJoin` reverts on failures\r\n    }\r\n\r\n    /// @dev Registers the one contract that will take assets from the Treasury if MakerDAO shuts down.\r\n    /// This function can only be called by the contract owner, which should only be possible during deployment.\r\n    /// This function allows Unwind to take all the Chai savings and operate with the Treasury MakerDAO vault.\r\n    /// @param unwind_ The address of the Unwild.sol contract.\r\n    function registerUnwind(address unwind_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            unwind == address(0),\r\n            \"Treasury: Unwind already set\"\r\n        );\r\n        unwind = unwind_;\r\n        chai.approve(address(unwind), uint256(-1)); // Unwind will never cheat on us\r\n        vat.hope(address(unwind));                  // Unwind will never cheat on us\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dai_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pot_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chai_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"access\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"GrantedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"signatures\",\"type\":\"bytes4[]\"}],\"name\":\"batchOrchestrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chai\",\"outputs\":[{\"internalType\":\"contract IChai\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract IDaiJoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"orchestrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"orchestration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"contract IPot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chaiAmount\",\"type\":\"uint256\"}],\"name\":\"pullChai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"pullDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"pullWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chaiAmount\",\"type\":\"uint256\"}],\"name\":\"pushChai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"pushDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"pushWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unwind_\",\"type\":\"address\"}],\"name\":\"registerUnwind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwind\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract IVat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWeth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethJoin\",\"outputs\":[{\"internalType\":\"contract IGemJoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Treasury","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000197e90f9fad81970ba7976f33cbd77088e5d7cf700000000000000000000000006af07097c9eeb7fd685c692751d5c66db49c215","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6b6929865efc70e3d551f9fbc18e690ae41114e8b0eadbe9f92aeab277edfb16"}]}