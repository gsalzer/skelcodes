{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/src/common/lifecycle/Killable.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * A module that allows contracts to self-destruct.\r\n */\r\ncontract Killable {\r\n\taddress payable public _owner;\r\n\r\n\t/**\r\n\t * Initialized with the deployer as the owner.\r\n\t */\r\n\tconstructor() internal {\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * Self-destruct the contract.\r\n\t * This function can only be executed by the owner.\r\n\t */\r\n\tfunction kill() public {\r\n\t\trequire(msg.sender == _owner, \"only owner method\");\r\n\t\tselfdestruct(_owner);\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/src/common/interface/IGroup.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IGroup {\r\n\tfunction isGroup(address _addr) public view returns (bool);\r\n\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction getGroupKey(address _addr) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_group\", _addr));\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/validate/AddressValidator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * A module that provides common validations patterns.\r\n */\r\ncontract AddressValidator {\r\n\tstring constant errorMessage = \"this is illegal address\";\r\n\r\n\t/**\r\n\t * Validates passed address is not a zero address.\r\n\t */\r\n\tfunction validateIllegalAddress(address _addr) external pure {\r\n\t\trequire(_addr != address(0), errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates passed address is included in an address set.\r\n\t */\r\n\tfunction validateGroup(address _addr, address _groupAddr) external view {\r\n\t\trequire(IGroup(_groupAddr).isGroup(_addr), errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates passed address is included in two address sets.\r\n\t */\r\n\tfunction validateGroups(\r\n\t\taddress _addr,\r\n\t\taddress _groupAddr1,\r\n\t\taddress _groupAddr2\r\n\t) external view {\r\n\t\tif (IGroup(_groupAddr1).isGroup(_addr)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(IGroup(_groupAddr2).isGroup(_addr), errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates that the address of the first argument is equal to the address of the second argument.\r\n\t */\r\n\tfunction validateAddress(address _addr, address _target) external pure {\r\n\t\trequire(_addr == _target, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates passed address equals to the two addresses.\r\n\t */\r\n\tfunction validateAddresses(\r\n\t\taddress _addr,\r\n\t\taddress _target1,\r\n\t\taddress _target2\r\n\t) external pure {\r\n\t\tif (_addr == _target1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(_addr == _target2, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates passed address equals to the three addresses.\r\n\t */\r\n\tfunction validate3Addresses(\r\n\t\taddress _addr,\r\n\t\taddress _target1,\r\n\t\taddress _target2,\r\n\t\taddress _target3\r\n\t) external pure {\r\n\t\tif (_addr == _target1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (_addr == _target2) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(_addr == _target3, errorMessage);\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/validate/UsingValidator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n// prettier-ignore\r\n\r\n\r\n/**\r\n * Module for contrast handling AddressValidator.\r\n */\r\ncontract UsingValidator {\r\n\tAddressValidator private _validator;\r\n\r\n\t/**\r\n\t * Create a new AddressValidator contract when initialize.\r\n\t */\r\n\tconstructor() public {\r\n\t\t_validator = new AddressValidator();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set AddressValidator address.\r\n\t */\r\n\tfunction addressValidator() internal view returns (AddressValidator) {\r\n\t\treturn _validator;\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/config/AddressConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * A registry contract to hold the latest contract addresses.\r\n * Dev Protocol will be upgradeable by this contract.\r\n */\r\ncontract AddressConfig is Ownable, UsingValidator, Killable {\r\n\taddress public token = 0x98626E2C9231f03504273d55f397409deFD4a093;\r\n\taddress public allocator;\r\n\taddress public allocatorStorage;\r\n\taddress public withdraw;\r\n\taddress public withdrawStorage;\r\n\taddress public marketFactory;\r\n\taddress public marketGroup;\r\n\taddress public propertyFactory;\r\n\taddress public propertyGroup;\r\n\taddress public metricsGroup;\r\n\taddress public metricsFactory;\r\n\taddress public policy;\r\n\taddress public policyFactory;\r\n\taddress public policySet;\r\n\taddress public policyGroup;\r\n\taddress public lockup;\r\n\taddress public lockupStorage;\r\n\taddress public voteTimes;\r\n\taddress public voteTimesStorage;\r\n\taddress public voteCounter;\r\n\taddress public voteCounterStorage;\r\n\r\n\t/**\r\n\t * Set the latest Allocator contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setAllocator(address _addr) external onlyOwner {\r\n\t\tallocator = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest AllocatorStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the AllocatorStorage contract is not used.\r\n\t */\r\n\tfunction setAllocatorStorage(address _addr) external onlyOwner {\r\n\t\tallocatorStorage = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest Withdraw contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setWithdraw(address _addr) external onlyOwner {\r\n\t\twithdraw = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest WithdrawStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setWithdrawStorage(address _addr) external onlyOwner {\r\n\t\twithdrawStorage = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest MarketFactory contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setMarketFactory(address _addr) external onlyOwner {\r\n\t\tmarketFactory = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest MarketGroup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setMarketGroup(address _addr) external onlyOwner {\r\n\t\tmarketGroup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PropertyFactory contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPropertyFactory(address _addr) external onlyOwner {\r\n\t\tpropertyFactory = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PropertyGroup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPropertyGroup(address _addr) external onlyOwner {\r\n\t\tpropertyGroup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest MetricsFactory contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setMetricsFactory(address _addr) external onlyOwner {\r\n\t\tmetricsFactory = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest MetricsGroup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setMetricsGroup(address _addr) external onlyOwner {\r\n\t\tmetricsGroup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PolicyFactory contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPolicyFactory(address _addr) external onlyOwner {\r\n\t\tpolicyFactory = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PolicyGroup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPolicyGroup(address _addr) external onlyOwner {\r\n\t\tpolicyGroup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PolicySet contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPolicySet(address _addr) external onlyOwner {\r\n\t\tpolicySet = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest Policy contract address.\r\n\t * Only the latest PolicyFactory contract can execute this function.\r\n\t */\r\n\tfunction setPolicy(address _addr) external {\r\n\t\taddressValidator().validateAddress(msg.sender, policyFactory);\r\n\t\tpolicy = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest Dev contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setToken(address _addr) external onlyOwner {\r\n\t\ttoken = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest Lockup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setLockup(address _addr) external onlyOwner {\r\n\t\tlockup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest LockupStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the LockupStorage contract is not used as a stand-alone because it is inherited from the Lockup contract.\r\n\t */\r\n\tfunction setLockupStorage(address _addr) external onlyOwner {\r\n\t\tlockupStorage = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest VoteTimes contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the VoteTimes contract is not used.\r\n\t */\r\n\tfunction setVoteTimes(address _addr) external onlyOwner {\r\n\t\tvoteTimes = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest VoteTimesStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the VoteTimesStorage contract is not used.\r\n\t */\r\n\tfunction setVoteTimesStorage(address _addr) external onlyOwner {\r\n\t\tvoteTimesStorage = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest VoteCounter contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setVoteCounter(address _addr) external onlyOwner {\r\n\t\tvoteCounter = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest VoteCounterStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the VoteCounterStorage contract is not used as a stand-alone because it is inherited from the VoteCounter contract.\r\n\t */\r\n\tfunction setVoteCounterStorage(address _addr) external onlyOwner {\r\n\t\tvoteCounterStorage = _addr;\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/config/UsingConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * Module for using AddressConfig contracts.\r\n */\r\ncontract UsingConfig {\r\n\tAddressConfig private _config;\r\n\r\n\t/**\r\n\t * Initialize the argument as AddressConfig address.\r\n\t */\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = AddressConfig(_addressConfig);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig instance.\r\n\t */\r\n\tfunction config() internal view returns (AddressConfig) {\r\n\t\treturn _config;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig address.\r\n\t */\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn address(_config);\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/storage/EternalStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * Module for persisting states.\r\n * Stores a map for `uint256`, `string`, `address`, `bytes32`, `bool`, and `int256` type with `bytes32` type as a key.\r\n */\r\ncontract EternalStorage {\r\n\taddress private currentOwner = msg.sender;\r\n\r\n\tmapping(bytes32 => uint256) private uIntStorage;\r\n\tmapping(bytes32 => string) private stringStorage;\r\n\tmapping(bytes32 => address) private addressStorage;\r\n\tmapping(bytes32 => bytes32) private bytesStorage;\r\n\tmapping(bytes32 => bool) private boolStorage;\r\n\tmapping(bytes32 => int256) private intStorage;\r\n\r\n\t/**\r\n\t * Modifiers to validate that only the owner can execute.\r\n\t */\r\n\tmodifier onlyCurrentOwner() {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer the owner.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction changeOwner(address _newOwner) external {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\tcurrentOwner = _newOwner;\r\n\t}\r\n\r\n\t// *** Getter Methods ***\r\n\r\n\t/**\r\n\t * Returns the value of the `uint256` type that mapped to the given key.\r\n\t */\r\n\tfunction getUint(bytes32 _key) external view returns (uint256) {\r\n\t\treturn uIntStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `string` type that mapped to the given key.\r\n\t */\r\n\tfunction getString(bytes32 _key) external view returns (string memory) {\r\n\t\treturn stringStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `address` type that mapped to the given key.\r\n\t */\r\n\tfunction getAddress(bytes32 _key) external view returns (address) {\r\n\t\treturn addressStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `bytes32` type that mapped to the given key.\r\n\t */\r\n\tfunction getBytes(bytes32 _key) external view returns (bytes32) {\r\n\t\treturn bytesStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `bool` type that mapped to the given key.\r\n\t */\r\n\tfunction getBool(bytes32 _key) external view returns (bool) {\r\n\t\treturn boolStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `int256` type that mapped to the given key.\r\n\t */\r\n\tfunction getInt(bytes32 _key) external view returns (int256) {\r\n\t\treturn intStorage[_key];\r\n\t}\r\n\r\n\t// *** Setter Methods ***\r\n\r\n\t/**\r\n\t * Maps a value of `uint256` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {\r\n\t\tuIntStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `string` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setString(bytes32 _key, string calldata _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\tstringStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `address` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setAddress(bytes32 _key, address _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\taddressStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `bytes32` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {\r\n\t\tbytesStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `bool` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setBool(bytes32 _key, bool _value) external onlyCurrentOwner {\r\n\t\tboolStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `int256` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {\r\n\t\tintStorage[_key] = _value;\r\n\t}\r\n\r\n\t// *** Delete Methods ***\r\n\r\n\t/**\r\n\t * Deletes the value of the `uint256` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteUint(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete uIntStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `string` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteString(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete stringStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `address` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteAddress(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete addressStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `bytes32` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteBytes(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete bytesStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `bool` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteBool(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete boolStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `int256` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteInt(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete intStorage[_key];\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/storage/UsingStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n/**\r\n * Module for contrast handling EternalStorage.\r\n */\r\ncontract UsingStorage is Ownable {\r\n\taddress private _storage;\r\n\r\n\t/**\r\n\t * Modifier to verify that EternalStorage is set.\r\n\t */\r\n\tmodifier hasStorage() {\r\n\t\trequire(_storage != address(0), \"storage is not set\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set EternalStorage instance.\r\n\t */\r\n\tfunction eternalStorage()\r\n\t\tinternal\r\n\t\tview\r\n\t\thasStorage\r\n\t\treturns (EternalStorage)\r\n\t{\r\n\t\treturn EternalStorage(_storage);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set EternalStorage address.\r\n\t */\r\n\tfunction getStorageAddress() external view hasStorage returns (address) {\r\n\t\treturn _storage;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new EternalStorage contract.\r\n\t * This function call will fail if the EternalStorage contract is already set.\r\n\t * Also, only the owner can execute it.\r\n\t */\r\n\tfunction createStorage() external onlyOwner {\r\n\t\trequire(_storage == address(0), \"storage is set\");\r\n\t\tEternalStorage tmp = new EternalStorage();\r\n\t\t_storage = address(tmp);\r\n\t}\r\n\r\n\t/**\r\n\t * Assigns the EternalStorage contract that has already been created.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setStorage(address _storageAddress) external onlyOwner {\r\n\t\t_storage = _storageAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * Delegates the owner of the current EternalStorage contract.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction changeOwner(address newOwner) external onlyOwner {\r\n\t\tEternalStorage(_storage).changeOwner(newOwner);\r\n\t}\r\n}\r\n\r\n// File: contracts/src/vote/VoteCounterStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract VoteCounterStorage is UsingStorage {\r\n\t// Already Vote Market\r\n\tfunction setStorageAlreadyVoteMarket(\r\n\t\taddress _user,\r\n\t\taddress _market,\r\n\t\taddress _property\r\n\t) internal {\r\n\t\tbytes32 key = getStorageAlreadyVoteMarketKey(_user, _market, _property);\r\n\t\teternalStorage().setBool(key, true);\r\n\t}\r\n\r\n\tfunction getStorageAlreadyVoteMarket(\r\n\t\taddress _user,\r\n\t\taddress _market,\r\n\t\taddress _property\r\n\t) public view returns (bool) {\r\n\t\tbytes32 key = getStorageAlreadyVoteMarketKey(_user, _market, _property);\r\n\t\treturn eternalStorage().getBool(key);\r\n\t}\r\n\r\n\tfunction getStorageAlreadyVoteMarketKey(\r\n\t\taddress _user,\r\n\t\taddress _market,\r\n\t\taddress _property\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\"_alreadyVoteMarket\",\r\n\t\t\t\t\t_user,\r\n\t\t\t\t\t_market,\r\n\t\t\t\t\t_property\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t// Already Use Property\r\n\tfunction setStorageAlreadyUseProperty(\r\n\t\taddress _user,\r\n\t\taddress _property,\r\n\t\tuint256 _votingGroupIndex,\r\n\t\tbool _flg\r\n\t) internal {\r\n\t\tbytes32 key = getStorageAlreadyUsePropertyKey(\r\n\t\t\t_user,\r\n\t\t\t_property,\r\n\t\t\t_votingGroupIndex\r\n\t\t);\r\n\t\teternalStorage().setBool(key, _flg);\r\n\t}\r\n\r\n\tfunction getStorageAlreadyUseProperty(\r\n\t\taddress _user,\r\n\t\taddress _property,\r\n\t\tuint256 _votingGroupIndex\r\n\t) public view returns (bool) {\r\n\t\tbytes32 key = getStorageAlreadyUsePropertyKey(\r\n\t\t\t_user,\r\n\t\t\t_property,\r\n\t\t\t_votingGroupIndex\r\n\t\t);\r\n\t\treturn eternalStorage().getBool(key);\r\n\t}\r\n\r\n\tfunction getStorageAlreadyUsePropertyKey(\r\n\t\taddress _user,\r\n\t\taddress _property,\r\n\t\tuint256 _votingGroupIndex\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\"_alreadyUseProperty\",\r\n\t\t\t\t\t_user,\r\n\t\t\t\t\t_property,\r\n\t\t\t\t\t_votingGroupIndex\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t// Already Vote Policy\r\n\tfunction setStorageAlreadyVotePolicy(\r\n\t\taddress _user,\r\n\t\taddress _property,\r\n\t\tuint256 _votingGroupIndex,\r\n\t\tbool _flg\r\n\t) internal {\r\n\t\tbytes32 key = getStorageAlreadyVotePolicyKey(\r\n\t\t\t_user,\r\n\t\t\t_property,\r\n\t\t\t_votingGroupIndex\r\n\t\t);\r\n\t\teternalStorage().setBool(key, _flg);\r\n\t}\r\n\r\n\tfunction getStorageAlreadyVotePolicy(\r\n\t\taddress _user,\r\n\t\taddress _property,\r\n\t\tuint256 _votingGroupIndex\r\n\t) public view returns (bool) {\r\n\t\tbytes32 key = getStorageAlreadyVotePolicyKey(\r\n\t\t\t_user,\r\n\t\t\t_property,\r\n\t\t\t_votingGroupIndex\r\n\t\t);\r\n\t\treturn eternalStorage().getBool(key);\r\n\t}\r\n\r\n\tfunction getStorageAlreadyVotePolicyKey(\r\n\t\taddress _user,\r\n\t\taddress _property,\r\n\t\tuint256 _votingGroupIndex\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\"_alreadyVotePolicy\",\r\n\t\t\t\t\t_user,\r\n\t\t\t\t\t_property,\r\n\t\t\t\t\t_votingGroupIndex\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t// Policy Vote Count\r\n\tfunction setStoragePolicyVoteCount(\r\n\t\taddress _user,\r\n\t\taddress _policy,\r\n\t\tbool _agree,\r\n\t\tuint256 _count\r\n\t) internal {\r\n\t\tbytes32 key = getStoragePolicyVoteCountKey(_user, _policy, _agree);\r\n\t\teternalStorage().setUint(key, _count);\r\n\t}\r\n\r\n\tfunction getStoragePolicyVoteCount(\r\n\t\taddress _user,\r\n\t\taddress _policy,\r\n\t\tbool _agree\r\n\t) public view returns (uint256) {\r\n\t\tbytes32 key = getStoragePolicyVoteCountKey(_user, _policy, _agree);\r\n\t\treturn eternalStorage().getUint(key);\r\n\t}\r\n\r\n\tfunction getStoragePolicyVoteCountKey(\r\n\t\taddress _user,\r\n\t\taddress _policy,\r\n\t\tbool _agree\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_policyVoteCount\", _user, _policy, _agree)\r\n\t\t\t);\r\n\t}\r\n\r\n\t// Agree Count\r\n\tfunction setStorageAgreeCount(address _sender, uint256 count) internal {\r\n\t\teternalStorage().setUint(getStorageAgreeVoteCountKey(_sender), count);\r\n\t}\r\n\r\n\tfunction getStorageAgreeCount(address _sender)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn eternalStorage().getUint(getStorageAgreeVoteCountKey(_sender));\r\n\t}\r\n\r\n\tfunction getStorageAgreeVoteCountKey(address _sender)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(_sender, \"_agreeVoteCount\"));\r\n\t}\r\n\r\n\t// Opposite Count\r\n\tfunction setStorageOppositeCount(address _sender, uint256 count) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageOppositeVoteCountKey(_sender),\r\n\t\t\tcount\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageOppositeCount(address _sender)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(getStorageOppositeVoteCountKey(_sender));\r\n\t}\r\n\r\n\tfunction getStorageOppositeVoteCountKey(address _sender)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(_sender, \"_oppositeVoteCount\"));\r\n\t}\r\n}\r\n\r\n// File: contracts/src/policy/IPolicy.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IPolicy {\r\n\tfunction rewards(uint256 _lockups, uint256 _assets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction holdersShare(uint256 _amount, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction assetValue(uint256 _value, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction marketApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction policyApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction marketVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction policyVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction abstentionPenalty(uint256 _count) external view returns (uint256);\r\n\r\n\tfunction lockUpBlocks() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/src/lockup/ILockup.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract ILockup {\r\n\tfunction lockup(\r\n\t\taddress _from,\r\n\t\taddress _property,\r\n\t\tuint256 _value\r\n\t\t// solium-disable-next-line indentation\r\n\t) external;\r\n\r\n\tfunction update() public;\r\n\r\n\tfunction cancel(address _property) external;\r\n\r\n\tfunction withdraw(address _property) external;\r\n\r\n\tfunction calculateCumulativeRewardPrices()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 _reward,\r\n\t\t\tuint256 _holders,\r\n\t\t\tuint256 _interest\r\n\t\t);\r\n\r\n\tfunction calculateCumulativeHoldersRewardAmount(address _property)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction getPropertyValue(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction getAllValue() external view returns (uint256);\r\n\r\n\tfunction getValue(address _property, address _sender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction calculateWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\t// solium-disable-next-line indentation\r\n\t\t\tuint256\r\n\t\t);\r\n\r\n\tfunction withdrawInterest(address _property) external;\r\n}\r\n\r\n// File: contracts/src/market/IMarket.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IMarket {\r\n\tfunction authenticate(\r\n\t\taddress _prop,\r\n\t\tstring calldata _args1,\r\n\t\tstring calldata _args2,\r\n\t\tstring calldata _args3,\r\n\t\tstring calldata _args4,\r\n\t\tstring calldata _args5\r\n\t)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\t// solium-disable-next-line indentation\r\n\t\t\tbool\r\n\t\t);\r\n\r\n\tfunction authenticateFromPropertyFactory(\r\n\t\taddress _prop,\r\n\t\taddress _author,\r\n\t\tstring calldata _args1,\r\n\t\tstring calldata _args2,\r\n\t\tstring calldata _args3,\r\n\t\tstring calldata _args4,\r\n\t\tstring calldata _args5\r\n\t)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\t// solium-disable-next-line indentation\r\n\t\t\tbool\r\n\t\t);\r\n\r\n\tfunction authenticatedCallback(address _property, bytes32 _idHash)\r\n\t\texternal\r\n\t\treturns (address);\r\n\r\n\tfunction deauthenticate(address _metrics) external;\r\n\r\n\tfunction schema() external view returns (string memory);\r\n\r\n\tfunction behavior() external view returns (address);\r\n\r\n\tfunction enabled() external view returns (bool);\r\n\r\n\tfunction votingEndBlockNumber() external view returns (uint256);\r\n\r\n\tfunction toEnable() external;\r\n}\r\n\r\n// File: contracts/src/vote/IVoteCounter.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IVoteCounter {\r\n\tfunction voteMarket(\r\n\t\taddress _market,\r\n\t\taddress _property,\r\n\t\tbool _agree\r\n\t\t// solium-disable-next-line indentation\r\n\t) external;\r\n\r\n\tfunction isAlreadyVoteMarket(address _target, address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction votePolicy(\r\n\t\taddress _policy,\r\n\t\taddress _property,\r\n\t\tbool _agree\r\n\t\t// solium-disable-next-line indentation\r\n\t) external;\r\n\r\n\tfunction cancelVotePolicy(address _policy, address _property) external;\r\n}\r\n\r\n// File: contracts/src/policy/IPolicyGroup.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract IPolicyGroup is IGroup {\r\n\tfunction getVotingGroupIndex() external view returns (uint256);\r\n\r\n\tfunction incrementVotingGroupIndex() external;\r\n\r\n\tfunction voting(address _policy) external view returns (bool);\r\n\r\n\tfunction addGroupWithoutSetVotingEnd(address _addr) public;\r\n}\r\n\r\n// File: contracts/src/policy/IPolicyFactory.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IPolicyFactory {\r\n\tfunction create(address _newPolicyAddress) external;\r\n\r\n\tfunction convergePolicy(address _currentPolicyAddress) external;\r\n}\r\n\r\n// File: contracts/src/vote/VoteCounter.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A contract that manages the activation votes for new markets and new policies.\r\n * Voting rights of voters are determined by the staking amount to a Property.\r\n * That is, at the voting, expecting to pass a Property address for specification the voting right.\r\n * Market voting is an election that selects out all that voters think is good.\r\n * Policy voting is an election to select one that seems to be the best with Quadratic Voting.\r\n * Quadratic Voting is realized by exercising multiple voting rights in Policy voting.\r\n */\r\ncontract VoteCounter is\r\n\tIVoteCounter,\r\n\tUsingConfig,\r\n\tUsingValidator,\r\n\tVoteCounterStorage\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/**\r\n\t * Initialize the passed address as AddressConfig address.\r\n\t */\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t/**\r\n\t * Votes for or against new Market\r\n\t */\r\n\tfunction voteMarket(\r\n\t\taddress _market,\r\n\t\taddress _property,\r\n\t\tbool _agree\r\n\t) external {\r\n\t\t/**\r\n\t\t * Validates the passed Market address is included the Market address set\r\n\t\t */\r\n\t\taddressValidator().validateGroup(_market, config().marketGroup());\r\n\r\n\t\t/**\r\n\t\t * Validates the passed Market is still not enabled\r\n\t\t */\r\n\t\tIMarket market = IMarket(_market);\r\n\t\trequire(market.enabled() == false, \"market is already enabled\");\r\n\r\n\t\t/**\r\n\t\t * Validates the voting deadline has not passed.\r\n\t\t */\r\n\t\trequire(\r\n\t\t\tblock.number <= market.votingEndBlockNumber(),\r\n\t\t\t\"voting deadline is over\"\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Gets the staking amount for the passed Property as a voting right.\r\n\t\t * If the voting right is 0, it cannot vote.\r\n\t\t */\r\n\t\tuint256 count = ILockup(config().lockup()).getValue(\r\n\t\t\t_property,\r\n\t\t\tmsg.sender\r\n\t\t);\r\n\t\trequire(count != 0, \"vote count is 0\");\r\n\r\n\t\t/**\r\n\t\t * Validates it does not become a double vote.\r\n\t\t */\r\n\t\tbool alreadyVote = getStorageAlreadyVoteMarket(\r\n\t\t\tmsg.sender,\r\n\t\t\t_market,\r\n\t\t\t_property\r\n\t\t);\r\n\t\trequire(alreadyVote == false, \"already vote\");\r\n\r\n\t\t/**\r\n\t\t * Votes\r\n\t\t */\r\n\t\tvote(_market, count, _agree);\r\n\r\n\t\t/**\r\n\t\t * Records voting status to avoid double voting.\r\n\t\t */\r\n\t\tsetStorageAlreadyVoteMarket(msg.sender, _market, _property);\r\n\r\n\t\t/**\r\n\t\t * Gets the votes for and against and gets whether or not the threshold\r\n\t\t * for enabling the Market is exceeded.\r\n\t\t */\r\n\t\tbool result = IPolicy(config().policy()).marketApproval(\r\n\t\t\tgetStorageAgreeCount(_market),\r\n\t\t\tgetStorageOppositeCount(_market)\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * If the result is false, the process ends.\r\n\t\t */\r\n\t\tif (result == false) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * If the result is true, to enable the passed Market.\r\n\t\t */\r\n\t\tmarket.toEnable();\r\n\t}\r\n\r\n\tfunction isAlreadyVoteMarket(address _target, address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn getStorageAlreadyVoteMarket(msg.sender, _target, _property);\r\n\t}\r\n\r\n\t/**\r\n\t * Votes for or against new Policy\r\n\t */\r\n\tfunction votePolicy(\r\n\t\taddress _policy,\r\n\t\taddress _property,\r\n\t\tbool _agree\r\n\t) external {\r\n\t\t/**\r\n\t\t * Validates the passed Policy address is included the Policy address set\r\n\t\t */\r\n\t\taddressValidator().validateGroup(_policy, config().policyGroup());\r\n\r\n\t\t/**\r\n\t\t * Validates the passed Policy is not the current Policy.\r\n\t\t */\r\n\t\trequire(config().policy() != _policy, \"this policy is current\");\r\n\r\n\t\t/**\r\n\t\t * Validates the voting deadline has not passed.\r\n\t\t */\r\n\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\r\n\t\trequire(policyGroup.voting(_policy), \"voting deadline is over\");\r\n\r\n\t\t/**\r\n\t\t * Validates it does not become a double vote.\r\n\t\t * In a Policy vote, the Property used to vote for one of the Policies with the same voting period cannot be reused.\r\n\t\t */\r\n\t\tuint256 votingGroupIndex = policyGroup.getVotingGroupIndex();\r\n\t\tbool alreadyVote = getStorageAlreadyUseProperty(\r\n\t\t\tmsg.sender,\r\n\t\t\t_property,\r\n\t\t\tvotingGroupIndex\r\n\t\t);\r\n\t\trequire(alreadyVote == false, \"already use property\");\r\n\r\n\t\t/**\r\n\t\t * Validates it does not become a double vote.\r\n\t\t */\r\n\t\talreadyVote = getStorageAlreadyVotePolicy(\r\n\t\t\tmsg.sender,\r\n\t\t\t_policy,\r\n\t\t\tvotingGroupIndex\r\n\t\t);\r\n\t\trequire(alreadyVote == false, \"already vote policy\");\r\n\r\n\t\t/**\r\n\t\t * Gets the staking amount for the passed Property as a voting right.\r\n\t\t * If the voting right is 0, it cannot vote.\r\n\t\t */\r\n\t\tuint256 count = ILockup(config().lockup()).getValue(\r\n\t\t\t_property,\r\n\t\t\tmsg.sender\r\n\t\t);\r\n\t\trequire(count != 0, \"vote count is 0\");\r\n\r\n\t\t/**\r\n\t\t * Votes\r\n\t\t */\r\n\t\tvote(_policy, count, _agree);\r\n\r\n\t\t/**\r\n\t\t * Records voting status to avoid double voting.\r\n\t\t */\r\n\t\tsetStorageAlreadyUseProperty(\r\n\t\t\tmsg.sender,\r\n\t\t\t_property,\r\n\t\t\tvotingGroupIndex,\r\n\t\t\ttrue\r\n\t\t);\r\n\t\tsetStorageAlreadyVotePolicy(\r\n\t\t\tmsg.sender,\r\n\t\t\t_policy,\r\n\t\t\tvotingGroupIndex,\r\n\t\t\ttrue\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Records the used number of voting rights.\r\n\t\t * The Policy vote is an election to select one, so voters can cancel an existing vote if voters think a later Policy is better.\r\n\t\t */\r\n\t\tsetStoragePolicyVoteCount(msg.sender, _policy, _agree, count);\r\n\r\n\t\t/**\r\n\t\t * Gets the votes for and against and gets whether or not the threshold\r\n\t\t * for enabling the Policy is exceeded.\r\n\t\t */\r\n\t\tbool result = IPolicy(config().policy()).policyApproval(\r\n\t\t\tgetStorageAgreeCount(_policy),\r\n\t\t\tgetStorageOppositeCount(_policy)\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * If the result is false, the process ends.\r\n\t\t */\r\n\t\tif (result == false) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * If the result is true, to enable the passed Policy.\r\n\t\t */\r\n\t\tIPolicyFactory policyFactory = IPolicyFactory(config().policyFactory());\r\n\t\tpolicyFactory.convergePolicy(_policy);\r\n\t}\r\n\r\n\t/**\r\n\t * Cancel voting for Policy\r\n\t */\r\n\tfunction cancelVotePolicy(address _policy, address _property) external {\r\n\t\t/**\r\n\t\t * Validates the passed Policy has already been voted using the passed Property.\r\n\t\t */\r\n\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\r\n\t\tuint256 votingGroupIndex = policyGroup.getVotingGroupIndex();\r\n\t\tbool alreadyVote = getStorageAlreadyUseProperty(\r\n\t\t\tmsg.sender,\r\n\t\t\t_property,\r\n\t\t\tvotingGroupIndex\r\n\t\t);\r\n\t\trequire(alreadyVote, \"not use property\");\r\n\r\n\t\t/**\r\n\t\t * Validates the passed Policy has already been voted.\r\n\t\t */\r\n\t\talreadyVote = getStorageAlreadyVotePolicy(\r\n\t\t\tmsg.sender,\r\n\t\t\t_policy,\r\n\t\t\tvotingGroupIndex\r\n\t\t);\r\n\t\trequire(alreadyVote, \"not vote policy\");\r\n\r\n\t\t/**\r\n\t\t * Gets the number of for or against votes the sender has voted.\r\n\t\t */\r\n\t\tbool agree = true;\r\n\t\tuint256 count = getStoragePolicyVoteCount(msg.sender, _policy, agree);\r\n\t\tif (count == 0) {\r\n\t\t\tagree = false;\r\n\t\t\tcount = getStoragePolicyVoteCount(msg.sender, _policy, agree);\r\n\r\n\t\t\t/**\r\n\t\t\t * Validates the voting rights are not 0.\r\n\t\t\t */\r\n\t\t\trequire(count != 0, \"not vote policy\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Subtracts the exercised voting rights to cancel the vote.\r\n\t\t */\r\n\t\tcancelVote(_policy, count, agree);\r\n\r\n\t\t/**\r\n\t\t * Sets the exercised voting rights to 0.\r\n\t\t */\r\n\t\tsetStoragePolicyVoteCount(msg.sender, _policy, agree, 0);\r\n\r\n\t\t/**\r\n\t\t * Deletes a Property as voting rights and the exercise record.\r\n\t\t */\r\n\t\tsetStorageAlreadyUseProperty(\r\n\t\t\tmsg.sender,\r\n\t\t\t_property,\r\n\t\t\tvotingGroupIndex,\r\n\t\t\tfalse\r\n\t\t);\r\n\t\tsetStorageAlreadyVotePolicy(\r\n\t\t\tmsg.sender,\r\n\t\t\t_policy,\r\n\t\t\tvotingGroupIndex,\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Exercises voting rights.\r\n\t */\r\n\tfunction vote(\r\n\t\taddress _target,\r\n\t\tuint256 count,\r\n\t\tbool _agree\r\n\t) private {\r\n\t\tif (_agree) {\r\n\t\t\t/**\r\n\t\t\t * For:\r\n\t\t\t */\r\n\t\t\taddAgreeCount(_target, count);\r\n\t\t} else {\r\n\t\t\t/**\r\n\t\t\t * Against:\r\n\t\t\t */\r\n\t\t\taddOppositeCount(_target, count);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the exercised voting rights to cancel the vote.\r\n\t */\r\n\tfunction cancelVote(\r\n\t\taddress _target,\r\n\t\tuint256 count,\r\n\t\tbool _agree\r\n\t) private {\r\n\t\tif (_agree) {\r\n\t\t\t/**\r\n\t\t\t * Cancel the yes:\r\n\t\t\t */\r\n\t\t\tsubAgreeCount(_target, count);\r\n\t\t} else {\r\n\t\t\t/**\r\n\t\t\t * Cancel the against:\r\n\t\t\t */\r\n\t\t\tsubOppositeCount(_target, count);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds voting rights exercised as for.\r\n\t */\r\n\tfunction addAgreeCount(address _target, uint256 _voteCount) private {\r\n\t\tuint256 agreeCount = getStorageAgreeCount(_target);\r\n\t\tagreeCount = agreeCount.add(_voteCount);\r\n\t\tsetStorageAgreeCount(_target, agreeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds voting rights exercised as against.\r\n\t */\r\n\tfunction addOppositeCount(address _target, uint256 _voteCount) private {\r\n\t\tuint256 oppositeCount = getStorageOppositeCount(_target);\r\n\t\toppositeCount = oppositeCount.add(_voteCount);\r\n\t\tsetStorageOppositeCount(_target, oppositeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts voting rights exercised as for.\r\n\t */\r\n\tfunction subAgreeCount(address _target, uint256 _voteCount) private {\r\n\t\tuint256 agreeCount = getStorageAgreeCount(_target);\r\n\t\tagreeCount = agreeCount.sub(_voteCount);\r\n\t\tsetStorageAgreeCount(_target, agreeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts voting rights exercised as against.\r\n\t */\r\n\tfunction subOppositeCount(address _target, uint256 _voteCount) private {\r\n\t\tuint256 oppositeCount = getStorageOppositeCount(_target);\r\n\t\toppositeCount = oppositeCount.sub(_voteCount);\r\n\t\tsetStorageOppositeCount(_target, oppositeCount);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"cancelVotePolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getStorageAgreeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_votingGroupIndex\",\"type\":\"uint256\"}],\"name\":\"getStorageAlreadyUseProperty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"getStorageAlreadyVoteMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_votingGroupIndex\",\"type\":\"uint256\"}],\"name\":\"getStorageAlreadyVotePolicy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getStorageOppositeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_agree\",\"type\":\"bool\"}],\"name\":\"getStoragePolicyVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"isAlreadyVoteMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_agree\",\"type\":\"bool\"}],\"name\":\"voteMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_agree\",\"type\":\"bool\"}],\"name\":\"votePolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VoteCounter","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3f56f68666d8539eb2b32e34ee2367d8fa1c02fcfd94cf25d12f11de94b1dfc4"}]}