{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.3.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/basiscash/IPool.sol\r\n\r\ninterface IPool {\r\n\r\n  function stake(uint256 amount) external;\r\n\r\n  function withdraw(uint256 amount) external;\r\n\r\n  function exit() external;\r\n\r\n  function getReward() external;\r\n\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBasisApeFactory.sol\r\n\r\ninterface IBasisApeFactory {\r\n\r\n  function pool() external returns (address);\r\n\r\n  function asset() external returns (address);\r\n\r\n  function bac() external returns (address);\r\n\r\n}\r\n\r\n\r\n// File contracts/BasisApe.sol\r\n\r\n// v0.1.0\r\ncontract BasisApe is Ownable {\r\n  address public factory;\r\n  address public beneficiary;\r\n\r\n  event Deposit(uint256 amount);\r\n  event Withdraw(address recipient, uint256 amount);\r\n  event EmergencyExit(address recipient);\r\n  event EmergencyWithdraw(address recipient, uint256 amount);\r\n\r\n  constructor(address _beneficiary) Ownable() public {\r\n    factory = msg.sender;\r\n    beneficiary = _beneficiary;\r\n  }\r\n\r\n  function deposit(uint256 amount) external onlyOwner {\r\n    address pool = IBasisApeFactory(factory).pool();\r\n    address asset = IBasisApeFactory(factory).asset();\r\n    IERC20(asset).approve(pool, amount);\r\n    IPool(pool).stake(amount);\r\n    emit Deposit(amount);\r\n  }\r\n\r\n  function withdraw(address recipient, uint256 amount) external onlyOwner {\r\n    address pool = IBasisApeFactory(factory).pool();\r\n    address asset = IBasisApeFactory(factory).asset();\r\n    address bac = IBasisApeFactory(factory).bac();\r\n    IPool(pool).withdraw(amount);\r\n    IPool(pool).getReward();\r\n    IERC20(asset).transfer(msg.sender, amount);\r\n    IERC20(bac).transfer(recipient, IERC20(bac).balanceOf(address(this)));\r\n    emit Withdraw(recipient, amount);\r\n  }\r\n\r\n  /*\r\n   * WARNING: DO NOT CALL UNLESS YOU KNOW WHAT YOU'RE DOING\r\n   * Calling this function will break BasisApeFactory functionality. Only use if absolutely necessary.\r\n   */\r\n  function emergencyExit(address recipient) external {\r\n    require(msg.sender == beneficiary, \"BasisApe: Must be called by beneficiary\");\r\n    address pool = IBasisApeFactory(factory).pool();\r\n    address asset = IBasisApeFactory(factory).asset();\r\n    address bac = IBasisApeFactory(factory).bac();\r\n    IPool(pool).exit();\r\n    IERC20(asset).transfer(recipient, IERC20(asset).balanceOf(address(this)));\r\n    IERC20(bac).transfer(recipient, IERC20(bac).balanceOf(address(this)));\r\n    emit EmergencyExit(recipient);\r\n  }\r\n\r\n  /*\r\n   * WARNING: DO NOT CALL UNLESS YOU KNOW WHAT YOU'RE DOING\r\n   * Calling this function will break BasisApeFactory functionality. Only use if absolutely necessary.\r\n   * Rewards are not withdrawn and will be locked.\r\n   */\r\n  function emergencyWithdraw(address recipient, uint256 amount) external {\r\n    require(msg.sender == beneficiary, \"BasisApe: Must be called by beneficiary\");\r\n    address pool = IBasisApeFactory(factory).pool();\r\n    address asset = IBasisApeFactory(factory).asset();\r\n    IPool(pool).withdraw(amount);\r\n    IERC20(asset).transfer(recipient, amount);\r\n    emit EmergencyWithdraw(recipient, amount);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/BasisApeFactory.sol\r\n\r\n// WARNING: THIS IS BETA SOFTWARE. USE AT YOUR OWN RISK\r\n\r\n\r\n// v0.1.0\r\n/*\r\n * \\       / \\       / \\       /\r\n *  \\     /   \\     /   \\     /\r\n *   \\___/     \\___/     \\___/\r\n */\r\ncontract BasisApeFactory {\r\n  using SafeMath for uint256;\r\n\r\n  address public pool;\r\n  address public asset;\r\n  address public bac;\r\n  address public developer;\r\n  uint256 public batchSize;\r\n  mapping(address => address[]) public cups;\r\n  mapping(address => uint256) public balances;\r\n\r\n  uint256 constant FEE = 50; // .5% (10000 denominated)\r\n\r\n  event Deposit(address account, uint256 amount);\r\n  event Withdraw(address account, uint256 amount);\r\n  event UpdateDeveloper(address newDeveloper);\r\n  event DeveloperFeePaid(address developer, uint256 amount);\r\n\r\n  constructor(address _pool, address _asset, address _bac, address _developer, uint256 _batchSize) public {\r\n    pool = _pool;\r\n    asset = _asset;\r\n    bac = _bac;\r\n    developer = _developer;\r\n    batchSize = _batchSize;\r\n  }\r\n\r\n  function deposit(uint256 amount) external {\r\n    uint256 remainder = balances[msg.sender] % batchSize;\r\n    uint256 currentCup = balances[msg.sender].div(batchSize);\r\n    uint256 remainingAmount = amount;\r\n\r\n    // Fill first cup\r\n    if (remainder > 0) {\r\n      address cup = cups[msg.sender][currentCup];\r\n      if (remainder.add(amount) <= batchSize) {\r\n        IERC20(asset).transferFrom(msg.sender, cup, amount); // Transferring directly to cup saves some gas\r\n        BasisApe(cup).deposit(amount);\r\n        remainder = remainder.add(amount) % batchSize; // Mod because when remainder is batchSize, we want it to be 0\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        return;\r\n      } else {\r\n        uint256 amountToFillCup = batchSize.sub(remainder);\r\n        IERC20(asset).transferFrom(msg.sender, cup, amountToFillCup); // Transferring directly to cup saves some gas\r\n        BasisApe(cup).deposit(amountToFillCup);\r\n        remainingAmount = remainingAmount.sub(amountToFillCup);\r\n        currentCup = currentCup.add(1);\r\n      }\r\n    }\r\n\r\n    // Fully fill cups\r\n    while (remainingAmount >= batchSize) {\r\n      address cup;\r\n      if (cups[msg.sender].length <= currentCup) {\r\n        cup = address(new BasisApe(msg.sender));\r\n        cups[msg.sender].push(cup);\r\n      } else {\r\n        cup = cups[msg.sender][currentCup];\r\n      }\r\n      IERC20(asset).transferFrom(msg.sender, cup, batchSize);\r\n      BasisApe(cup).deposit(batchSize);\r\n      remainingAmount = remainingAmount.sub(batchSize);\r\n      currentCup = currentCup.add(1);\r\n    }\r\n\r\n    // Fill last cup\r\n    if (remainingAmount > 0) {\r\n      address cup;\r\n      if (cups[msg.sender].length <= currentCup) {\r\n        cup = address(new BasisApe(msg.sender));\r\n        cups[msg.sender].push(cup);\r\n      } else {\r\n        cup = cups[msg.sender][currentCup];\r\n      }\r\n      IERC20(asset).transferFrom(msg.sender, cup, remainingAmount);\r\n      BasisApe(cup).deposit(remainingAmount);\r\n    }\r\n\r\n    balances[msg.sender] = balances[msg.sender].add(amount);\r\n    emit Deposit(msg.sender, amount);\r\n  }\r\n\r\n  function withdraw(address recipient, uint256 amount) external {\r\n    require(amount <= balances[msg.sender], \"BasisApeFactory: Must have sufficient balance\");\r\n\r\n    uint256 remainder = balances[msg.sender] % batchSize;\r\n    uint256 currentCup = balances[msg.sender].div(batchSize);\r\n    uint256 remainingAmount = amount;\r\n\r\n    // Empty last cup\r\n    if (remainder > 0) {\r\n      address cup = cups[msg.sender][currentCup];\r\n      if (amount <= remainder) {\r\n        BasisApe(cup).withdraw(recipient, amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount, \"BasisApeFactory: Must have sufficient balance\");\r\n        uint256 fee = amount.mul(FEE).div(10000);\r\n        IERC20(asset).transfer(developer, fee);\r\n        IERC20(asset).transfer(recipient, amount.sub(fee));\r\n        emit DeveloperFeePaid(developer, fee);\r\n        emit Withdraw(msg.sender, amount);\r\n        return;\r\n      } else {\r\n        BasisApe(cup).withdraw(recipient, remainder);\r\n        remainingAmount = remainingAmount.sub(remainder);\r\n      }\r\n    }\r\n\r\n    // Fully empty cups\r\n    while (remainingAmount >= batchSize) {\r\n      currentCup = currentCup.sub(1);\r\n      address cup = cups[msg.sender][currentCup];\r\n      BasisApe(cup).withdraw(recipient, batchSize);\r\n      remainingAmount = remainingAmount.sub(batchSize);\r\n    }\r\n\r\n    // Empty first cup\r\n    if (remainingAmount > 0) {\r\n      currentCup = currentCup.sub(1);\r\n      address cup = cups[msg.sender][currentCup];\r\n      BasisApe(cup).withdraw(recipient, remainingAmount);\r\n    }\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(amount, \"BasisApeFactory: Must have sufficient balance\");\r\n    uint256 fee = amount.mul(FEE).div(10000);\r\n    IERC20(asset).transfer(developer, fee);\r\n    IERC20(asset).transfer(recipient, amount.sub(fee));\r\n    emit DeveloperFeePaid(developer, fee);\r\n    emit Withdraw(msg.sender, amount);\r\n  }\r\n\r\n  function setDeveloper(address _developer) external {\r\n    require(msg.sender == developer, \"BasisApeFactory: Must be called by developer\");\r\n    developer = _developer;\r\n    emit UpdateDeveloper(_developer);\r\n  }\r\n\r\n  function numCups(address account) external view returns (uint256) {\r\n    return cups[account].length;\r\n  }\r\n\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return balances[account];\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bac\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchSize\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeveloperFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"UpdateDeveloper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bac\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cups\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"setDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BasisApeFactory","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000051882184b7f9beed6db9c617846140da1d429fd4000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000003449fc1cd036255ba1eb19d65ff4ba2b8903a69a0000000000000000000000004f93ebdd8fd5444654b64820577c7d210b14de8300000000000000000000000000000000000000000000000000000004a817c800","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://932da44a8114e64dfb39b530995eec88637e39aa891db7817e8d165e9d5b2aa6"}]}