{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CapitalComponentToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/PriceOracle.sol\\\";\\nimport \\\"./SplitVault.sol\\\";\\nimport \\\"./VaultControlled.sol\\\";\\nimport \\\"./lib/DSMath.sol\\\";\\n\\ncontract CapitalComponentToken is ERC20, VaultControlled {\\n  using SafeMath for uint256;\\n\\n  address public fullToken;\\n  PriceOracle private priceOracle;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address _fullToken,\\n    address priceOracleAddress,\\n    address splitVaultAddress\\n  ) public ERC20(name, symbol) VaultControlled(splitVaultAddress) {\\n    priceOracle = PriceOracle(priceOracleAddress);\\n    splitVault = SplitVault(splitVaultAddress);\\n    fullToken = _fullToken;\\n  }\\n\\n  /// @dev Mint new capital component tokens, but compute the amount from an amount of full tokens.\\n  /// @param account address of account to mint tokens to\\n  /// @param amountOfFull amount of full tokens to use for the calculation\\n  function mintFromFull(address account, uint256 amountOfFull) public onlyVaultOrOwner {\\n    uint256 price = priceOracle.getPrice(fullToken);\\n    uint256 componentTokenAmount = DSMath.wmul(amountOfFull, price);\\n    _mint(account, componentTokenAmount);\\n  }\\n\\n  /// @dev Mint new tokens if the contract owner\\n  /// @param account address of account to mint tokens to\\n  /// @param amount amount of tokens to mint\\n  function mint(address account, uint256 amount) public onlyOwner {\\n    _mint(account, amount);\\n  }\\n\\n  /// @dev Burn tokens if the contract owner\\n  /// @param account address of account to burn tokens from\\n  /// @param amount amount of tokens to burn\\n  function burn(address account, uint256 amount) public onlyVaultOrOwner {\\n    _burn(account, amount);\\n    uint256 payoutAmount = calculatePayoutAmount(amount);\\n    // Call the payout function on the SplitVault contract\\n    splitVault.payout(payoutAmount, fullToken, account);\\n  }\\n\\n  /// @dev Simplest public method for calculating the amount of fullToken due for a given amount of capital token\\n  /// @param capitalTokenAmount Amount of capital token to calculate the payout from\\n  /// @return The payout amount denoted in fullToken\\n  function calculatePayoutAmount(uint256 capitalTokenAmount) public view returns (uint256) {\\n    uint256 currPrice = priceOracle.getPrice(fullToken);\\n    return calculatePayoutAmount(capitalTokenAmount, currPrice);\\n  }\\n\\n  /// @dev Pure function for calculating the amount of fullToken due for a given amount of capital token\\n  /// @param capitalTokenAmount Amount of capital token to calculate the payout from\\n  /// @param currPrice The current price of the fullToken with respect to the underlying\\n  /// @return The payout amount denoted in fullToken\\n  function calculatePayoutAmount(uint256 capitalTokenAmount, uint256 currPrice) public pure returns (uint256) {\\n    uint256 payoutAmount = DSMath.wdiv(capitalTokenAmount, currPrice);\\n    return payoutAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/PriceOracle.sol\": {\r\n      \"content\": \"// //SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\ninterface PriceOracle {\\n  /// @dev Get the price of token in another token (eg. cBAT / BAT) with 18 decimal places\\n  function getPrice(address token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/SplitVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./CapitalComponentToken.sol\\\";\\nimport \\\"./YieldComponentToken.sol\\\";\\n\\ncontract SplitVault is Ownable {\\n  /*\\n   *  Storage\\n   */\\n  struct ComponentSet {\\n    address yieldToken;\\n    address capitalToken;\\n  }\\n  mapping(address => ComponentSet) public tokensToComponents;\\n\\n  constructor() public {}\\n\\n  /// @dev Retrieve the componentSet for a given token\\n  /// @param tokenAddress for which to fetch the associated componentSet\\n  function getComponentSet(address tokenAddress) public view returns (ComponentSet memory) {\\n    return tokensToComponents[tokenAddress];\\n  }\\n\\n  /// @dev Allows Split protocol governance to add support for new tokens\\n  /// @param tokenAddress the address of token to support\\n  /// @param yieldTokenAddress the corresponding yieldERC20Comp token address\\n  /// @param capitalTokenAddress the corresponding capitalERC20Comp token address\\n  function add(\\n    address tokenAddress,\\n    address yieldTokenAddress,\\n    address capitalTokenAddress\\n  ) public onlyOwner {\\n    tokensToComponents[tokenAddress] = ComponentSet({\\n      yieldToken: yieldTokenAddress,\\n      capitalToken: capitalTokenAddress\\n    });\\n  }\\n\\n  /// @dev Allows Split protocol governance to remove support for new tokens\\n  /// @param tokenAddress the address of token to remove support for\\n  function remove(address tokenAddress) public onlyOwner {\\n    delete tokensToComponents[tokenAddress];\\n  }\\n\\n  /// @dev Allows a holder of a whitelisted Compound token to split it into it's corresponding Yield and Capital tokens\\n  /// @param amount of tokens to split\\n  /// @param tokenAddress the address of token to split\\n  function split(uint256 amount, address tokenAddress) public {\\n    ComponentSet memory componentSet = tokensToComponents[tokenAddress];\\n    if (componentSet.yieldToken == address(0) || componentSet.capitalToken == address(0)) {\\n      revert(\\\"Attempted to split unsupported token\\\");\\n    }\\n    // Don't mint tokens if the transferFrom was not successful\\n    require(\\n      IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount),\\n      \\\"Failed to transfer tokens to SplitVault.\\\"\\n    );\\n    CapitalComponentToken(componentSet.capitalToken).mintFromFull(msg.sender, amount);\\n    YieldComponentToken(componentSet.yieldToken).mintFromFull(msg.sender, amount);\\n    emit Split(tokenAddress, amount);\\n  }\\n\\n  /// @dev Allows a holder of both Yield and Capital tokens to combine them into the underlying full tokens\\n  /// @param amount of tokens to recombine\\n  /// @param tokenAddress is the address of token to recombine\\n  function combine(uint256 amount, address tokenAddress) public {\\n    ComponentSet memory componentSet = tokensToComponents[tokenAddress];\\n    if (componentSet.yieldToken == address(0) || componentSet.capitalToken == address(0)) {\\n      revert(\\\"Attempted to recombine unsupported token\\\");\\n    }\\n    CapitalComponentToken(componentSet.capitalToken).burn(msg.sender, amount);\\n    YieldComponentToken(componentSet.yieldToken).burn(msg.sender, amount);\\n    // Payout is calculated and executed by the individual token contracts\\n    emit Combine(tokenAddress, amount);\\n  }\\n\\n  /// @dev Allows component token implementation to send tokens in the vaul\\n  /// @param amount of tokens to payout\\n  /// @param tokenAddress the tokens to send\\n  /// @param recipient address of payout recipient\\n  function payout(\\n    uint256 amount,\\n    address tokenAddress,\\n    address recipient\\n  ) public {\\n    ComponentSet memory componentSet = tokensToComponents[tokenAddress];\\n    if (componentSet.yieldToken == address(0) || componentSet.capitalToken == address(0)) {\\n      revert(\\\"Attempted to request a payout for an unsupported token\\\");\\n    }\\n    if (msg.sender != componentSet.yieldToken && msg.sender != componentSet.capitalToken) {\\n      revert(\\\"Payout can only be called by the corresponding yield or capital token\\\");\\n    }\\n    // Revert if the transfer was not successful\\n    require(IERC20(tokenAddress).transfer(recipient, amount), \\\"Failed to transfer tokens from SplitVault.\\\");\\n  }\\n\\n  /// @dev Emitted when component tokens are combined into a full token\\n  event Combine(address indexed tokenAddress, uint256 amount);\\n\\n  /// @dev Emitted when full tokens are split into component tokens\\n  event Split(address indexed tokenAddress, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/YieldComponentToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/PriceOracle.sol\\\";\\nimport \\\"./SplitVault.sol\\\";\\nimport \\\"./VaultControlled.sol\\\";\\nimport \\\"./lib/ERC20Base.sol\\\";\\nimport \\\"./lib/DSMath.sol\\\";\\n\\ncontract YieldComponentToken is ERC20Base, VaultControlled {\\n  using SafeMath for uint256;\\n\\n  /*\\n   *  Storage\\n   */\\n  address public fullToken;\\n  PriceOracle private priceOracle;\\n\\n  /// @dev The yield component token balances\\n  mapping(address => uint256) public balances;\\n  /// @dev The price from the last yield payout for an address\\n  mapping(address => uint256) public lastPrices;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address _fullToken,\\n    address priceOracleAddress,\\n    address splitVaultAddress\\n  ) public ERC20Base(name, symbol) VaultControlled(splitVaultAddress) {\\n    priceOracle = PriceOracle(priceOracleAddress);\\n    fullToken = _fullToken;\\n  }\\n\\n  /// @dev Mint new yield component tokens, computing the amount from an amount of full tokens\\n  /// @param account address of account to mint tokens to\\n  /// @param amountOfFull amount of full tokens to use for the calculation\\n  function mintFromFull(address account, uint256 amountOfFull) public onlyVaultOrOwner {\\n    uint256 currPrice = priceOracle.getPrice(fullToken);\\n    uint256 yieldTokenAmount = DSMath.wmul(amountOfFull, currPrice);\\n    _mint(account, yieldTokenAmount);\\n  }\\n\\n  /// @dev Mint new tokens if the contract owner\\n  /// @param account address of account to mint tokens to\\n  /// @param amount amount of tokens to mint\\n  function mint(address account, uint256 amount) public onlyOwner {\\n    _mint(account, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) private {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n    // First payout any accrued yield\\n    _payoutYield(account);\\n\\n    // Update account information with updated balance\\n    balances[account] = balances[account].add(amount);\\n\\n    // Update the total supply\\n    _totalSupply = _totalSupply.add(amount);\\n\\n    // A mint is effectively a transfer\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /// @dev Returns the amount of tokens owned by `account`.\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return balances[account];\\n  }\\n\\n  /// @dev Burn tokens if the contract owner\\n  /// @param account address of account to burn tokens from\\n  /// @param amount amount of tokens to burn\\n  function burn(address account, uint256 amount) public onlyVaultOrOwner {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    // First payout any accrued yield\\n    _payoutYield(account);\\n\\n    // Then update balances.\\n    balances[account] = balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\n    // Update the total supply\\n    _totalSupply = _totalSupply.sub(amount);\\n\\n    // A burn is effectively a transfer\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /// @dev Withdraw any yield accrued to msg.sender since the last withdrawal\\n  function withdrawYield() public {\\n    _payoutYield(_msgSender());\\n  }\\n\\n  /*\\n   * Override the default ERC20 imtplementations of transfer & transferFrom\\n   */\\n\\n  /// @dev Moves `amount` tokens from the caller's account to `recipient`.\\n  /// @param recipient The receiver of the transfer\\n  /// @param amount The amount to transfer\\n  /// @return Returns a boolean value indicating whether the operation succeeded.\\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /// @dev Moves `amount` tokens from `sender` to `recipient` using the\\n  /// allowance mechanism. `amount` is then deducted from the caller's\\n  /// allowance.\\n  /// @param sender The sender of the funds being transferred\\n  /// @param recipient The receiver of the transfer\\n  /// @param amount The amount to transfer\\n  /// @return Returns a boolean value indicating whether the operation succeeded.\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) private {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _payoutYield(sender);\\n    _payoutYield(recipient);\\n\\n    balances[sender] = balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    balances[recipient] = balances[recipient].add(amount);\\n\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /// @dev Internal yield payout function that computes the yield and transfers it to the owner\\n  /// @param owner Owner and recipient of the accrued yield\\n  function _payoutYield(address owner) private {\\n    uint256 lastPrice = lastPrices[owner];\\n    uint256 currPrice = priceOracle.getPrice(fullToken);\\n    // Make sure the last price is always updated when paying out yield.\\n    lastPrices[owner] = currPrice;\\n    uint256 payoutAmount = calculatePayoutAmount(owner, currPrice, lastPrice);\\n    if (payoutAmount == 0) {\\n      return;\\n    }\\n    // Call the payout function on the SplitVault contract, just for the yield\\n    splitVault.payout(payoutAmount, fullToken, owner);\\n  }\\n\\n  /// @dev Simplest public method for calculating the outstanding yield for a yield token holder\\n  /// @param owner Owner and future recipient of the accrued yield\\n  /// @return The payout amount denoted in fullToken\\n  function calculatePayoutAmount(address owner) public view returns (uint256) {\\n    uint256 lastPrice = lastPrices[owner];\\n    uint256 currPrice = priceOracle.getPrice(fullToken);\\n    return calculatePayoutAmount(owner, currPrice, lastPrice);\\n  }\\n\\n  /// @dev Public method for calculating the outstanding yield for a yield token holder and a new fullToken price\\n  /// @param owner Owner and future recipient of the accrued yield\\n  /// @param currPrice The price of fullToken to use for the calculation. Must be more than internally stored lastPrice\\n  /// @return The payout amount denoted in fullToken\\n  function calculatePayoutAmount(\\n    address owner,\\n    uint256 currPrice,\\n    uint256 lastPrice\\n  ) public view returns (uint256) {\\n    uint256 balance = balances[owner];\\n    if (balance == 0 || lastPrice == 0) {\\n      return 0;\\n    }\\n    uint256 payoutAmount = calculatePayoutAmount(balance, currPrice, lastPrice);\\n    return payoutAmount;\\n  }\\n\\n  /// @dev Pure function for calculating the outstanding yield for a yield token holder and a new fullToken price\\n  /// @param balance The balance of yield component tokens for this address.\\n  /// @param currPrice The current price of fullToken to use for the calculation. Must be more than `lastPrice`.\\n  /// @param lastPrice The last price of fullToken to use for the calculation. Must be less than `currPrice`.\\n  /// @return The payout amount denoted in fullToken\\n  function calculatePayoutAmount(\\n    uint256 balance,\\n    uint256 currPrice,\\n    uint256 lastPrice\\n  ) public pure returns (uint256) {\\n    // Compare to old price\\n    uint256 priceDiff = currPrice.sub(lastPrice, \\\"Price has decreased\\\");\\n    if (priceDiff == 0) {\\n      return 0;\\n    }\\n    uint256 increasePercentage = DSMath.wdiv(priceDiff, lastPrice);\\n    uint256 payoutAmount = DSMath.wdiv(DSMath.wmul(increasePercentage, balance), currPrice);\\n    return payoutAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultControlled.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\nimport \\\"./SplitVault.sol\\\";\\n\\ncontract VaultControlled is Context {\\n  address private _owner;\\n  SplitVault internal splitVault;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  constructor(address splitVaultAddress) internal {\\n    splitVault = SplitVault(splitVaultAddress);\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /// @dev Throws if called by any account other than the SplitVault or Owner.\\n  modifier onlyVaultOrOwner() {\\n    require(address(splitVault) == _msgSender() || _owner == _msgSender(), \\\"Caller is not the SplitVault or Owner\\\");\\n    _;\\n  }\\n\\n  /// @dev Returns the address of the current owner.\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /// @dev Throws if called by any account other than the owner.\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /// @dev Leaves the contract without owner. It will not be possible to call\\n  /// `onlyOwner` functions anymore. Can only be called by the current owner.\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n  /// Can only be called by the current owner.\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ERC20Base.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @dev ERC20 implementation without balances and related function implementations\\nabstract contract ERC20Base is IERC20, Context {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view virtual override returns (uint256);\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool);\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool);\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/DSMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n  }\\n\\n  function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n    return x <= y ? x : y;\\n  }\\n\\n  function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  uint256 constant WAD = 10**18;\\n  uint256 constant RAY = 10**27;\\n\\n  //rounds to zero if x*y < WAD / 2\\n  function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  //rounds to zero if x*y < WAD / 2\\n  function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  //rounds to zero if x*y < WAD / 2\\n  function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n  }\\n\\n  //rounds to zero if x*y < RAY / 2\\n  function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //    x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //    floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/CTokenPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/PriceOracle.sol\\\";\\nimport \\\"./interfaces/CTokenInterface.sol\\\";\\n\\ncontract CTokenPriceOracle is PriceOracle {\\n  using SafeMath for uint256;\\n\\n  constructor() public {}\\n\\n  /// @dev Get the exchange rate of one cToken to one underlying token in wads\\n  function getPrice(address cTokenAddress) external view override returns (uint256) {\\n    CTokenInterface cToken = CTokenInterface(cTokenAddress);\\n    return cToken.exchangeRateStored();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CTokenInterface.sol\": {\r\n      \"content\": \"// //SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Interface of Compound cToken\\n */\\ninterface CTokenInterface {\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function decimals() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/CTokenMock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CTokenMock is ERC20, Ownable {\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) public ERC20(name, symbol) {\\n    _setupDecimals(decimals);\\n  }\\n\\n  /// @dev Mint new tokens if the contract owner\\n  /// @param account address of account to mint tokens to\\n  /// @param amount amount of tokens to mint\\n  function mint(address account, uint256 amount) public onlyOwner {\\n    _mint(account, amount);\\n  }\\n\\n  /// @dev Burn tokens if the contract owner\\n  /// @param account address of account to burn tokens from\\n  /// @param amount amount of tokens to burn\\n  function burn(address account, uint256 amount) public onlyOwner {\\n    _burn(account, amount);\\n  }\\n\\n  /// @dev Burn all tokens of the account\\n  /// @param account address of account to burn tokens from\\n  function burnAll(address account) public onlyOwner {\\n    _burn(account, balanceOf(account));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/PriceOracleMock.sol\": {\r\n      \"content\": \"// //SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/PriceOracle.sol\\\";\\n\\ncontract PriceOracleMock is PriceOracle {\\n  constructor() public {}\\n\\n  uint256 private price = 10**18;\\n\\n  function getPrice(address token) external view override returns (uint256) {\\n    // make compiler happy.\\n    token;\\n    return price;\\n  }\\n\\n  function setPrice(uint256 _price) public {\\n    price = _price;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/SplitVaultMock.sol\": {\r\n      \"content\": \"// //SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\ncontract SplitVaultMock {\\n  constructor() public {}\\n\\n  struct PayoutCall {\\n    uint256 amount;\\n    address tokenAddress;\\n    address recipient;\\n  }\\n\\n  PayoutCall[] public payoutCalls;\\n\\n  function payout(\\n    uint256 amount,\\n    address tokenAddress,\\n    address recipient\\n  ) public {\\n    payoutCalls.push(PayoutCall({ amount: amount, tokenAddress: tokenAddress, recipient: recipient }));\\n  }\\n\\n  function getPayoutCalls() public view returns (PayoutCall[] memory) {\\n    return payoutCalls;\\n  }\\n\\n  function reset() public {\\n    delete payoutCalls;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Combine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Split\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"capitalTokenAddress\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"combine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getComponentSet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"capitalToken\",\"type\":\"address\"}],\"internalType\":\"struct SplitVault.ComponentSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensToComponents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"capitalToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SplitVault","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}