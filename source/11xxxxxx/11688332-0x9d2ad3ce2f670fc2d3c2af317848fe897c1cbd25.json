{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external view returns (string memory tokenName);\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\r\n    address _requester, uint256 _nonce)\r\n    internal pure returns (uint256)\r\n  {\r\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  function makeRequestId(\r\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  using SafeMath for uint256;\r\n  \r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n    internal virtual;\r\n\r\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\r\n    internal returns (bytes32 requestId)\r\n  {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\r\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\r\n    nonces[_keyHash] = nonces[_keyHash].add(1);\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface immutable internal LINK;\r\n  address immutable private vrfCoordinator;\r\n\r\n\r\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\r\n\r\n  constructor(address _vrfCoordinator, address _link) public {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\ncontract RandomNumberConsumer is VRFConsumerBase {\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    \r\n    uint256 private currentTarget = 0;\r\n    uint256 private winner1 = 0;\r\n    uint256 private winner2 = 0;\r\n    uint256 private winner3 = 0;\r\n    \r\n    /**\r\n     * Constructor inherits VRFConsumerBase\r\n     * \r\n     * Network: Kovan\r\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\r\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\r\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\r\n     */\r\n    constructor() \r\n        VRFConsumerBase(\r\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, // VRF Coordinator\r\n            0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token\r\n        ) public\r\n    {\r\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\r\n        fee = 2 * 10 ** 18; // 2 LINK\r\n    }\r\n    \r\n    /** \r\n     * Requests randomness from a user-provided seed\r\n     */\r\n    function getRandomNumber(uint256 userProvidedSeed) public returns (bytes32 requestId) {\r\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\r\n        currentTarget = userProvidedSeed;\r\n        return requestRandomness(keyHash, fee, userProvidedSeed);\r\n    }\r\n\r\n    /**\r\n     * Callback function used by VRF Coordinator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        requestId = 0;\r\n        \r\n        if(currentTarget == 1)\r\n            winner1 = randomness;\r\n        else if(currentTarget == 2)\r\n            winner2 = randomness;\r\n        else if(currentTarget == 3)\r\n            winner3 = randomness;\r\n    }\r\n    \r\n    function getWinners() external view returns (uint256, uint256, uint256) {\r\n        return (winner1, winner2, winner3);\r\n    }\r\n    \r\n    function getCurrentTarget() external view returns (uint256) {\r\n        return currentTarget;\r\n    }\r\n \r\n    function initialize() external {\r\n        currentTarget = 0;\r\n        winner1 = 0;\r\n        winner2 = 0;\r\n        winner3 = 0;\r\n    }\r\n}\r\n\r\ncontract DateTime {\r\n        /*\r\n         *  Date and Time utilities for ethereum contracts\r\n         *\r\n         */\r\n        struct _DateTime {\r\n                uint16 year;\r\n                uint8 month;\r\n                uint8 day;\r\n        }\r\n\r\n        uint constant DAY_IN_SECONDS = 86400;\r\n        uint constant YEAR_IN_SECONDS = 31536000;\r\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n        uint constant HOUR_IN_SECONDS = 3600;\r\n        uint constant MINUTE_IN_SECONDS = 60;\r\n\r\n        uint16 constant ORIGIN_YEAR = 1970;\r\n\r\n        function isLeapYear(uint16 year) public pure returns (bool) {\r\n                if (year % 4 != 0) {\r\n                        return false;\r\n                }\r\n                if (year % 100 != 0) {\r\n                        return true;\r\n                }\r\n                if (year % 400 != 0) {\r\n                        return false;\r\n                }\r\n                return true;\r\n        }\r\n\r\n        function leapYearsBefore(uint year) public pure returns (uint) {\r\n                year -= 1;\r\n                return year / 4 - year / 100 + year / 400;\r\n        }\r\n\r\n        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\r\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n                        return 31;\r\n                }\r\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n                        return 30;\r\n                }\r\n                else if (isLeapYear(year)) {\r\n                        return 29;\r\n                }\r\n                else {\r\n                        return 28;\r\n                }\r\n        }\r\n\r\n        function parseTimestamp(uint timestamp) public pure returns (_DateTime memory dt) {\r\n                uint secondsAccountedFor = 0;\r\n                uint buf;\r\n                uint8 i;\r\n\r\n                // Year\r\n                dt.year = getYear(timestamp);\r\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\r\n\r\n                // Month\r\n                uint secondsInMonth;\r\n                for (i = 1; i <= 12; i++) {\r\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\r\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n                                dt.month = i;\r\n                                break;\r\n                        }\r\n                        secondsAccountedFor += secondsInMonth;\r\n                }\r\n\r\n                // Day\r\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\r\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\r\n                                dt.day = i;\r\n                                break;\r\n                        }\r\n                        secondsAccountedFor += DAY_IN_SECONDS;\r\n                }\r\n        }\r\n\r\n        function getYear(uint timestamp) public pure returns (uint16) {\r\n                uint secondsAccountedFor = 0;\r\n                uint16 year;\r\n                uint numLeapYears;\r\n\r\n                // Year\r\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n                while (secondsAccountedFor > timestamp) {\r\n                        if (isLeapYear(uint16(year - 1))) {\r\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n                        }\r\n                        else {\r\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\r\n                        }\r\n                        year -= 1;\r\n                }\r\n                return year;\r\n        }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external payable returns (uint[] memory amounts);\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract ContractGuard {\r\n    using Address for address;\r\n\r\n    modifier noContract(address account) {\r\n        require(Address.isContract(account) == false, \"Contracts are not allowed to interact with the Offertory\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Offertory is Ownable, ReentrancyGuard, ContractGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    RandomNumberConsumer public rnGenerator = new RandomNumberConsumer();\r\n    DateTime dTime = new DateTime();\r\n    \r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address private immutable prophetContract;\r\n    address[] private uniswapPairPath;\r\n    \r\n    address private dealerWallet;\r\n    uint256 private minDealerDepositAmount = 100e9;\r\n    uint256 private dealerDepositAmount;\r\n    \r\n    bool private gameInProgress;\r\n\r\n    uint256 private lotteryStartTime;\r\n    uint256 private lotteryEndTime;\r\n    \r\n    uint256 private ticketPrice = 100e9;\r\n    uint256 private minPlayerCount = 10;\r\n    uint256 private maxBuyableTicketCountInDay = 2;\r\n    \r\n    uint256 private winnerPrizePct1 = 60;\r\n    uint256 private winnerPrizePct2 = 25;\r\n    uint256 private winnerPrizePct3 = 15;\r\n    \r\n    uint256 private refundPct = 90;\r\n    uint256 private announceFee = 10e9;\r\n    uint256 private totalAmountToRefund;\r\n    \r\n    address private winner1Address;\r\n    address private winner2Address;\r\n    address private winner3Address;\r\n    \r\n    uint256 private prizeAmountAtAnnounce;\r\n    \r\n    uint256 private winnerMode = 1;\r\n    \r\n    mapping (address => uint256) private playerBalance;      // map for players balance\r\n    address[] private players;\r\n    TICKET_INFO[] private tickets;\r\n    \r\n    bool newGameStart;\r\n    \r\n    struct TICKET_INFO {\r\n        address player;\r\n        DateTime._DateTime date;\r\n    }\r\n\r\n    // Events\r\n    event DealerWalletUpdated(address indexed dealerWallet);\r\n    event MinDealerDepositAmountUpdated(uint256 minDealerDepositAmount);\r\n    event LotteryStartTimeUpdated(uint256 lotteryStartTime);\r\n    event LotteryEndTimeUpdated(uint256 lotteryEndTime);\r\n    event WinnerPrizeUpdated(uint256 winnerPrizePct1, uint256 winnerPrizePct2, uint256 winnerPrizePct3);\r\n    event TicketPriceUpdated(uint256 ticketPrice);\r\n    event MinPlayerCountUpdated(uint256 minPlayerCount);\r\n    event RefundPctUpdated(uint256 refundPct);\r\n    event BoughtTicket(address indexed player, uint256 amount);\r\n    event Claimed(address indexed player, uint256 amount);\r\n    event PlayerGaveup(address indexed player, uint256 amount);\r\n    event DealerDeposited(address indexed dealerWallet, uint256 amount);\r\n    event AnnounceFeeUpdated(uint256 announceFee);\r\n    event AnnouncedWinners(address indexed winner1, address indexed winner2, address indexed winner3);\r\n    event MaxBuyableTicketCountInDayUpdated(uint256 maxBuyableTicketCountInDay);\r\n    event WinnerModeUpdated(uint256 winnerMode);\r\n    \r\n    constructor (\r\n                IUniswapV2Router02 _uniswapV2Router,\r\n                address _prophetContract,\r\n                address _dealerWallet,\r\n                uint256 _ticketPrice,\r\n                uint256 _minPlayerCount,\r\n                uint256 _winnerPrizePct1,\r\n                uint256 _winnerPrizePct2,\r\n                uint256 _winnerPrizePct3,\r\n                uint256 _refundPct,\r\n                uint256 _announceFee) public {\r\n                     \r\n        uniswapV2Router = _uniswapV2Router;\r\n        prophetContract = _prophetContract;\r\n        \r\n        uniswapPairPath = new address[](2);\r\n        uniswapPairPath[0] = _uniswapV2Router.WETH();\r\n        uniswapPairPath[1] = _prophetContract;\r\n        \r\n\tsetDealerWallet(_dealerWallet);\r\n        setTicketPrice(_ticketPrice);\r\n        setMinPlayerCount(_minPlayerCount);\r\n        setWinnerPrizePct(_winnerPrizePct1, _winnerPrizePct2, _winnerPrizePct3);\r\n        setRefundPct(_refundPct);\r\n        setAnnounceFee(_announceFee);\r\n    }\r\n    \r\n    function setDealerWallet(address _dealerWallet) public onlyOwner() nonReentrant noContract(msg.sender) {\r\n        require(_dealerWallet != address(0), 'Prophet Lottery: dealerWallet is zero.');\r\n        dealerWallet = _dealerWallet;\r\n        emit DealerWalletUpdated(_dealerWallet);\r\n    }\r\n\r\n    function setMinDealerDepositAmount(uint256 _minDealerDepositAmount) public onlyOwner() nonReentrant noContract(msg.sender) {\r\n        require(_minDealerDepositAmount >= 100e9, 'Prophet Lottery: minDealerDepositAmount is less than 100e9.');\r\n        minDealerDepositAmount = _minDealerDepositAmount;\r\n        emit MinDealerDepositAmountUpdated(_minDealerDepositAmount);\r\n    }\r\n    \r\n    function setLotteryStartTime(uint256 _lotteryStartTime) public onlyOwner() nonReentrant noContract(msg.sender) {\r\n        require(_lotteryStartTime >= now, 'Prophet Lottery: lotteryStartTime is ahead of now.');\r\n        require(players.length == 0 || (!gameInProgress && now > lotteryEndTime + 3 days), 'Prophet Lottery: we can not start new game now.');\r\n        lotteryStartTime = _lotteryStartTime;\r\n        newGameStart = true;\r\n        gameInProgress = false;\r\n        emit LotteryStartTimeUpdated(_lotteryStartTime);\r\n    }\r\n    \r\n    function setWinnerMode(uint256 _winnerMode) public onlyOwner() nonReentrant noContract(msg.sender) {\r\n        require(_winnerMode == 1 || _winnerMode == 3, 'Prophet Lottery: winnerMode should be 1 or 3.');\r\n        winnerMode = _winnerMode;\r\n        emit WinnerModeUpdated(_winnerMode);\r\n    }\r\n    \r\n    function setLotteryEndTime(uint256 _lotteryEndTime) public onlyOwner() nonReentrant noContract(msg.sender) {\r\n        require(newGameStart , 'Prophet Lottery: game is not started yet.');\r\n        require(_lotteryEndTime >= lotteryStartTime + 2 days && _lotteryEndTime <= lotteryStartTime + 30 days, 'Prophet Lottery: lotteryEndTime should be in 2 ~ 30 days since start.');\r\n        require(_lotteryEndTime >= now, 'Prophet Lottery: lotteryEndTime is ahead of now.');\r\n        lotteryEndTime = _lotteryEndTime;\r\n        winner1Address = address(0);\r\n        winner2Address = address(0);\r\n        winner3Address = address(0);\r\n        prizeAmountAtAnnounce = 0;\r\n        dealerDepositAmount = 0;\r\n        totalAmountToRefund = 0;\r\n        rnGenerator.initialize();\r\n        \r\n        for(uint i=players.length; i>0; i--) {\r\n            playerBalance[players[i-1]] = 0;\r\n            players.pop();\r\n        }\r\n        \r\n        for(uint i=tickets.length; i>0; i--) {\r\n            tickets.pop();\r\n        }\r\n        \r\n        gameInProgress = true;\r\n        emit LotteryEndTimeUpdated(_lotteryEndTime);\r\n    }\r\n    \r\n    function setWinnerPrizePct(uint256 _winnerPrizePct1, uint256 _winnerPrizePct2, uint256 _winnerPrizePct3) public onlyOwner() nonReentrant {\r\n        require(_winnerPrizePct1.add(_winnerPrizePct2).add(_winnerPrizePct3) == 100, 'Prophet Lottery: sum of winner prize percentages is not 100.');\r\n        require(_winnerPrizePct1 >= _winnerPrizePct2 && _winnerPrizePct2 >= _winnerPrizePct3, 'Prophet Lottery: winner prize percentages should be set properly by order.');\r\n        winnerPrizePct1 = _winnerPrizePct1;\r\n        winnerPrizePct2 = _winnerPrizePct2;\r\n        winnerPrizePct3 = _winnerPrizePct3;\r\n        emit WinnerPrizeUpdated(_winnerPrizePct1, _winnerPrizePct2, _winnerPrizePct3);\r\n    }\r\n    \r\n    function setMinPlayerCount(uint256 _minPlayerCount) public onlyOwner() nonReentrant {\r\n        require(_minPlayerCount >= 10, 'Prophet Lottery: minPlayerCount is less than 10.');\r\n        minPlayerCount = _minPlayerCount;\r\n        emit MinPlayerCountUpdated(_minPlayerCount);\r\n    }\r\n    \r\n    function setAnnounceFee(uint256 _announceFee) public onlyOwner() nonReentrant {\r\n        require(_announceFee >= 10e9 && _announceFee <= 100e9, 'Prophet Lottery: announceFee should be in 10e9 ~ 100e9.');\r\n        announceFee = _announceFee;\r\n        emit AnnounceFeeUpdated(_announceFee);\r\n    }\r\n    \r\n    function setMaxBuyableTicketCountInDay(uint256 _maxBuyableTicketCountInDay) public onlyOwner() nonReentrant {\r\n        require(_maxBuyableTicketCountInDay >= 1 && _maxBuyableTicketCountInDay <= 10, 'Prophet Lottery: maxBuyableTicketCountInDay should be in 1 ~ 10.');\r\n        maxBuyableTicketCountInDay = _maxBuyableTicketCountInDay;\r\n        emit MaxBuyableTicketCountInDayUpdated(_maxBuyableTicketCountInDay);\r\n    }\r\n    \r\n    function setTicketPrice(uint256 _ticketPrice) private {\r\n        require(_ticketPrice >= 100e9, 'Prophet Lottery: ticketPrice is less than 100e9.');\r\n        ticketPrice = _ticketPrice;\r\n        emit TicketPriceUpdated(_ticketPrice);\r\n    }\r\n    \r\n    function setRefundPct(uint256 _refundPct) private {\r\n        require(players.length == 0, 'Prophet Lottery: game is in progress now.');\r\n        require(_refundPct >= 33 && _refundPct <= 97, 'Prophet Lottery: refundPct should be in 33 ~ 97.');\r\n        refundPct = _refundPct;\r\n        emit RefundPctUpdated(_refundPct);\r\n    }\r\n\r\n    function getTicketCountInSameDate(address player, DateTime._DateTime memory dt) private view returns (uint256) {\r\n        uint256 ticketCountInSameDate = 0;\r\n        \r\n        for(uint i=0; i<tickets.length; i++) {\r\n            if(tickets[i].player == player && \r\n                tickets[i].date.year == dt.year &&\r\n                tickets[i].date.month == dt.month &&\r\n                tickets[i].date.day == dt.day) {\r\n                ticketCountInSameDate++;\r\n            }\r\n        }\r\n        \r\n        return ticketCountInSameDate;\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function buyTicket() external payable nonReentrant noContract(msg.sender) {\r\n        require(\r\n            gameInProgress,\r\n            \"Prophet Lottery: game is not started yet.\"\r\n        );\r\n        \r\n        uint256 currentTarget = rnGenerator.getCurrentTarget();\r\n        require(\r\n            currentTarget == 0,\r\n            \"Prophet Lottery: it is too late to buy ticket now.\"\r\n        );\r\n        \r\n        DateTime._DateTime memory dt = dTime.parseTimestamp(now);\r\n        require(\r\n            getTicketCountInSameDate(_msgSender(), dt) < maxBuyableTicketCountInDay,\r\n            \"Prophet Lottery: you already bought max tickets today.\"\r\n        );\r\n        \r\n        TICKET_INFO memory ticket;\r\n        ticket.player = _msgSender();\r\n        ticket.date = dt;\r\n        tickets.push(ticket);\r\n\r\n        uniswapV2Router\r\n            .swapETHForExactTokens{value: msg.value}(\r\n                ticketPrice,\r\n                uniswapPairPath,\r\n                address(this),\r\n                block.timestamp + 15\r\n            );\r\n\r\n        (bool success,) = _msgSender().call{ value: address(this).balance }(\"\");\r\n        require(success, \"refund failed\");\r\n        \r\n        if(playerBalance[_msgSender()] == 0)\r\n            players.push(_msgSender());\r\n\r\n        playerBalance[_msgSender()] = playerBalance[_msgSender()].add(ticketPrice.mul(refundPct).div(100));\r\n        \r\n        totalAmountToRefund = totalAmountToRefund.add(ticketPrice.mul(refundPct).div(100));\r\n        \r\n        BoughtTicket(_msgSender(), ticketPrice);\r\n    }\r\n    \r\n    function claim() external nonReentrant noContract(msg.sender) {\r\n        require(\r\n            !gameInProgress,\r\n            \"Prophet Lottery: game is in progress now.\"\r\n        );\r\n        \r\n        require(\r\n            playerBalance[_msgSender()] > 0,\r\n            \"Prophet Lottery: your balance is 0.\"\r\n        );\r\n        \r\n        uint256 returnAmount = playerBalance[_msgSender()];\r\n        removePlayerFromList();\r\n        \r\n        require(\r\n            IERC20(prophetContract).transfer(\r\n                _msgSender(),\r\n                returnAmount\r\n            ),\r\n            \"Prophet Lottery: exit failed.\"\r\n        );\r\n        \r\n        Claimed(_msgSender(), playerBalance[_msgSender()]);\r\n    }\r\n    \r\n    function removePlayerFromList() private {\r\n        playerBalance[_msgSender()] = 0;\r\n        \r\n        for(uint i=0; i<players.length; i++) {\r\n            if(players[i] == _msgSender()) {\r\n                players[i] = players[players.length-1];\r\n                players.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function dealerDeposit(uint256 amount) external nonReentrant noContract(msg.sender) {\r\n        require(\r\n            _msgSender() == dealerWallet,\r\n            \"Prophet Lottery: only dealer wallet can deposit.\"\r\n        );\r\n        \r\n        require(\r\n            dealerDepositAmount.add(amount) >= minDealerDepositAmount,\r\n            \"Prophet Lottery: dealerDepositAmount is less than minDealerDepositAmount.\"\r\n        );\r\n        \r\n        require(\r\n            IERC20(prophetContract).transferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                amount\r\n            ),\r\n            \"Prophet Lottery: dealer deposit failed.\"\r\n        );\r\n\r\n        dealerDepositAmount = dealerDepositAmount.add(amount);\r\n        \r\n        DealerDeposited(_msgSender(), amount);\r\n    }\r\n\r\n    function pickWinner1() external nonReentrant noContract(msg.sender) {\r\n        require(\r\n            gameInProgress &&\r\n            now >= lotteryEndTime,\r\n            \"Prophet Lottery: it is not a time to pick winner.\"\r\n        );\r\n        \r\n        require(\r\n            dealerDepositAmount >= minDealerDepositAmount,\r\n            \"Prophet Lottery: dealerDepositAmount is less than minDealerDepositAmount.\"\r\n        );\r\n        \r\n        require(\r\n            players.length >= minPlayerCount,\r\n            \"Prophet Lottery: player count is less than minPlayerCount.\"\r\n        );\r\n        \r\n        uint256 currentTarget = rnGenerator.getCurrentTarget();\r\n        require(currentTarget == 0, \"Prophet Lottery: we can't pick winner1 now.\");\r\n        rnGenerator.getRandomNumber(1);\r\n    }\r\n    \r\n    function pickWinner2() external nonReentrant noContract(msg.sender) {\r\n        uint256 currentTarget = rnGenerator.getCurrentTarget();\r\n        (uint256 winner1,,) = rnGenerator.getWinners();\r\n        require(currentTarget == 1 && winner1 != 0, \"Prophet Lottery: we can't pick winner2 now.\");\r\n        rnGenerator.getRandomNumber(2);\r\n    }\r\n    \r\n    function pickWinner3() external nonReentrant noContract(msg.sender) {\r\n        uint256 currentTarget = rnGenerator.getCurrentTarget();\r\n        (,uint256 winner2,) = rnGenerator.getWinners();\r\n        require(currentTarget == 2 && winner2 != 0, \"Prophet Lottery: we can't pick winner3 now.\");\r\n        rnGenerator.getRandomNumber(3);\r\n    }\r\n    \r\n    function announceWinners() external nonReentrant noContract(msg.sender) {\r\n        uint256 ticketCount = tickets.length;\r\n        uint256 playerCount = players.length;\r\n\r\n        require(\r\n            gameInProgress &&\r\n            now >= lotteryEndTime,\r\n            \"Prophet Lottery: it is not a time to announce winner.\"\r\n        );\r\n        \r\n        require(\r\n            dealerDepositAmount >= minDealerDepositAmount,\r\n            \"Prophet Lottery: dealerDepositAmount is less than minDealerDepositAmount.\"\r\n        );\r\n        \r\n        if(playerCount >= minPlayerCount) {\r\n            (uint256 winner1, uint256 winner2, uint256 winner3) = rnGenerator.getWinners();\r\n            if(winnerMode == 1)\r\n                require(\r\n                    winner1 != 0,\r\n                    \"Prophet Lottery: Not picked all wineres yet.\"\r\n                );\r\n            else\r\n                require(\r\n                    winner1 != 0 &&\r\n                    winner2 != 0 &&\r\n                    winner3 != 0,\r\n                    \"Prophet Lottery: Not picked all wineres yet.\"\r\n                );\r\n        \r\n            prizeAmountAtAnnounce = IERC20(prophetContract).balanceOf(address(this)).sub(totalAmountToRefund).sub(announceFee);\r\n            uint256 winnerPrize1 = prizeAmountAtAnnounce.mul(winnerPrizePct1).div(100);\r\n            uint256 winnerPrize2 = prizeAmountAtAnnounce.mul(winnerPrizePct2).div(100);\r\n            uint256 winnerPrize3 = prizeAmountAtAnnounce.sub(winnerPrize1).sub(winnerPrize2);\r\n            \r\n            \r\n            TICKET_INFO[] memory ticketList = tickets;\r\n            \r\n            winner1 = winner1.mod(playerCount);\r\n            winner1Address = ticketList[winner1].player;\r\n            playerBalance[winner1Address] = playerBalance[winner1Address].add(winnerPrize1);\r\n            \r\n            \r\n            ticketList[winner1] = ticketList[ticketCount - 1];\r\n            ticketCount--;\r\n            \r\n            winner2 = winner2.mod(playerCount);\r\n            winner2Address = ticketList[winner2].player;\r\n            playerBalance[winner2Address] = playerBalance[winner2Address].add(winnerPrize2);\r\n            \r\n            \r\n            ticketList[winner2] = ticketList[ticketCount - 1];\r\n            ticketCount--;\r\n            \r\n            winner3 = winner3.mod(playerCount);\r\n            winner3Address = ticketList[winner3].player;\r\n            playerBalance[winner3Address] = playerBalance[winner3Address].add(winnerPrize3);\r\n            \r\n            require(\r\n                IERC20(prophetContract).transfer(\r\n                    _msgSender(),\r\n                    announceFee\r\n                ),\r\n                \"Prophet Lottery: announceFee transfer failed.\"\r\n            );\r\n            \r\n            newGameStart = false;\r\n            gameInProgress = false;\r\n            \r\n            AnnouncedWinners(winner1Address, winner2Address, winner3Address);\r\n        } else {\r\n            if(dealerDepositAmount > 0) {\r\n                IERC20(prophetContract).transfer(\r\n                    dealerWallet,\r\n                    dealerDepositAmount.mul(refundPct)\r\n                );\r\n            }\r\n            \r\n            if(IERC20(prophetContract).balanceOf(address(this)).sub(totalAmountToRefund) >= announceFee) {\r\n                IERC20(prophetContract).transfer(\r\n                    _msgSender(),\r\n                    announceFee\r\n                );\r\n            }\r\n            \r\n            dealerDepositAmount = 0;\r\n            \r\n            newGameStart = false;\r\n            gameInProgress = false;\r\n        }\r\n    }\r\n    \r\n    function getBalance(address player) external view returns (uint256) {\r\n        return playerBalance[player];\r\n    }\r\n    \r\n    function getPlayerCount() external view returns (uint256) {\r\n        return players.length;\r\n    }\r\n    \r\n    function getPlayers() external view returns (address [] memory) {\r\n        return players;\r\n    }\r\n\r\n    function getEstimatedETHforTicket() external view returns (uint[] memory) {\r\n        return uniswapV2Router.getAmountsIn(ticketPrice, uniswapPairPath);\r\n    }\r\n    \r\n    function getTicketCountOfToday(address player) external view returns (uint256) {\r\n        DateTime._DateTime memory dt = dTime.parseTimestamp(now);\r\n        return getTicketCountInSameDate(player, dt);\r\n    }\r\n    \r\n    function getTicketCountOfPlayer(address player) external view returns (uint256) {\r\n        uint256 ticketCountOfPlayer = 0;\r\n        \r\n        for(uint i=0; i<tickets.length; i++) {\r\n            if(tickets[i].player == player) {\r\n                ticketCountOfPlayer++;\r\n            }\r\n        }\r\n        \r\n        return ticketCountOfPlayer;\r\n    }\r\n    \r\n    function getTicketCount() external view returns (uint256) {\r\n        return tickets.length;\r\n    }\r\n    \r\n    function getWinner1() external view returns (address) {\r\n        return winner1Address;\r\n    }\r\n    \r\n    function getWinner2() external view returns (address) {\r\n        return winner2Address;\r\n    }\r\n    \r\n    function getWinner3() external view returns (address) {\r\n        return winner3Address;\r\n    }\r\n    \r\n    function getWinners() external view returns (uint256, uint256, uint256) {\r\n        return rnGenerator.getWinners();\r\n    }\r\n    \r\n    function getCurrentTarget() external view returns (uint256) {\r\n        return rnGenerator.getCurrentTarget();\r\n    }\r\n    \r\n    function getDealerDepositAmount() external view returns (uint256) {\r\n        return dealerDepositAmount;\r\n    }\r\n    \r\n    function getLotteryStartTime() external view returns (uint256) {\r\n        return lotteryStartTime;\r\n    }\r\n    \r\n    function getLotteryEndTime() external view returns (uint256) {\r\n        return lotteryEndTime;\r\n    }\r\n    \r\n    function getTicketPrice() external view returns (uint256) {\r\n        return ticketPrice;\r\n    }\r\n    \r\n    function getMinPlayerCount() external view returns (uint256) {\r\n        return minPlayerCount;\r\n    }\r\n    \r\n    function getWinnerPrizePct1() external view returns (uint256) {\r\n        return winnerPrizePct1;\r\n    }\r\n    \r\n    function getWinnerPrizePct2() external view returns (uint256) {\r\n        return winnerPrizePct2;\r\n    }\r\n    \r\n    function getWinnerPrizePct3() external view returns (uint256) {\r\n        return winnerPrizePct3;\r\n    }\r\n    \r\n    function getRefundPct() external view returns (uint256) {\r\n        return refundPct;\r\n    }\r\n    \r\n    function getAnnounceFee() external view returns (uint256) {\r\n        return announceFee;\r\n    }\r\n    \r\n    function getGameInProgress() external view returns (bool) {\r\n        return gameInProgress;\r\n    }\r\n    \r\n    function getDealerWallet() external view returns (address) {\r\n        return dealerWallet;\r\n    }\r\n    \r\n    function getMinDealerDepositAmount() external view returns (uint256) {\r\n        return minDealerDepositAmount;\r\n    }\r\n    \r\n    function getWinnerMode() external view returns(uint256) {\r\n        return winnerMode;\r\n    }\r\n    \r\n    function getTotalPrizeAmount() external view returns (uint256) {\r\n        if(IERC20(prophetContract).balanceOf(address(this)).sub(totalAmountToRefund) >= announceFee)\r\n            return IERC20(prophetContract).balanceOf(address(this)).sub(totalAmountToRefund).sub(announceFee);\r\n        return 0;\r\n    }\r\n    \r\n    function getTotalPrizeAmountAtAnnounce() external view returns (uint256) {\r\n        return prizeAmountAtAnnounce;\r\n    }\r\n    \r\n    function getMaxBuyableTicketCountInDay() external view returns (uint256) {\r\n        return maxBuyableTicketCountInDay;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prophetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dealerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPlayerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerPrizePct1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerPrizePct2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerPrizePct3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_announceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"announceFee\",\"type\":\"uint256\"}],\"name\":\"AnnounceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner2\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner3\",\"type\":\"address\"}],\"name\":\"AnnouncedWinners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoughtTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealerWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DealerDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealerWallet\",\"type\":\"address\"}],\"name\":\"DealerWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryEndTime\",\"type\":\"uint256\"}],\"name\":\"LotteryEndTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryStartTime\",\"type\":\"uint256\"}],\"name\":\"LotteryStartTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBuyableTicketCountInDay\",\"type\":\"uint256\"}],\"name\":\"MaxBuyableTicketCountInDayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDealerDepositAmount\",\"type\":\"uint256\"}],\"name\":\"MinDealerDepositAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPlayerCount\",\"type\":\"uint256\"}],\"name\":\"MinPlayerCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlayerGaveup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundPct\",\"type\":\"uint256\"}],\"name\":\"RefundPctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"TicketPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerMode\",\"type\":\"uint256\"}],\"name\":\"WinnerModeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerPrizePct1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerPrizePct2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerPrizePct3\",\"type\":\"uint256\"}],\"name\":\"WinnerPrizeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"announceWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dealerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAnnounceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDealerDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDealerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEstimatedETHforTicket\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBuyableTicketCountInDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDealerDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinPlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRefundPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getTicketCountOfPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getTicketCountOfToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPrizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPrizeAmountAtAnnounce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerPrizePct1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerPrizePct2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerPrizePct3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rnGenerator\",\"outputs\":[{\"internalType\":\"contract RandomNumberConsumer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_announceFee\",\"type\":\"uint256\"}],\"name\":\"setAnnounceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealerWallet\",\"type\":\"address\"}],\"name\":\"setDealerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryEndTime\",\"type\":\"uint256\"}],\"name\":\"setLotteryEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryStartTime\",\"type\":\"uint256\"}],\"name\":\"setLotteryStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyableTicketCountInDay\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyableTicketCountInDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDealerDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinDealerDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPlayerCount\",\"type\":\"uint256\"}],\"name\":\"setMinPlayerCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerMode\",\"type\":\"uint256\"}],\"name\":\"setWinnerMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerPrizePct1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerPrizePct2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerPrizePct3\",\"type\":\"uint256\"}],\"name\":\"setWinnerPrizePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Offertory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000008d5db0c1f0681071cb38a382ae6704588d9da587000000000000000000000000448b9e94cfbe7fbabcefef50f46cda5cc21cc302000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000ba43b7400","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cf4fbf9163d892d5f767e3bdc21f2a4fd87d8163ccaa61259c2640a46e8e72a1"}]}