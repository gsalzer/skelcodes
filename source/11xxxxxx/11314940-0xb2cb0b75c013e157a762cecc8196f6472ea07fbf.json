{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n  STK3R - Not A KEEP3R Fork\r\n   _____ _______ _  ______  _____  \r\n  / ____|__   __| |/ /___ \\|  __ \\ \r\n | (___    | |  | ' /  __) | |__) |\r\n  \\___ \\   | |  |  <  |__ <|  _  / \r\n  ____) |  | |  | . \\ ___) | | \\ \\ \r\n |_____/   |_|  |_|\\_\\____/|_|  \\_\\\r\n \r\n*/\r\n                                   \r\n                                   \r\npragma solidity ^0.5.13;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface Callable {\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n}\r\n\r\ncontract STK3R {\r\n    \r\n    using SafeMath for uint256;\r\n\tuint256 constant private FLOAT_SCALAR = 2**64;\r\n\tuint256 constant private INITIAL_SUPPLY = 1000000e18;\r\n\tuint256 constant private XFER_FEE = 2; // 2% per tx\r\n\tuint256 constant private POOL_FEE = 1; // 1% to pool\r\n\tuint256 constant private DEV_FEE = 1;  // 1% to dev\r\n\tuint256 constant private SHARE_DIVIDENDS = 25;  // 25% every collect\r\n\tuint256 constant private MIN_STAKE_AMOUNT = 1e20; // 100 Tokens Needed\r\n\r\n\tstring constant public name = \"STK3R\";\r\n\tstring constant public symbol = \"STK3R\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tstruct User {\r\n\t\t\r\n\t\tuint256 balance;\r\n\t\tuint256 staked;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tuint collectTime;\r\n\t\tuint unstakeTime;\r\n\t\tint256 scaledPayout;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 totalStaked;\r\n\t\tuint256 totalStake;\r\n\t\tmapping(address => User) users;\r\n\t\tuint256 scaledPayoutPerToken;\r\n\t\taddress admin;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\t\r\n\tevent Stake(address indexed owner, uint256 tokens);\r\n\tevent Unstake(address indexed owner, uint256 tokens);\r\n\tevent Collect(address indexed owner, uint256 tokens);\r\n\tevent Tax(uint256 tokens);\r\n\r\n\r\n\tconstructor() public {\r\n\t\tinfo.admin = msg.sender;\r\n\t\tinfo.totalSupply = INITIAL_SUPPLY;\r\n\t\tinfo.users[msg.sender].balance = INITIAL_SUPPLY;\r\n\t\temit Transfer(address(0x0), msg.sender, INITIAL_SUPPLY);\r\n\t\t\r\n\t}\r\n\r\n\tfunction stake(uint256 _tokens) external {\r\n\t\t_stake(_tokens);\r\n\t}\r\n\r\n\tfunction unstake(uint256 _tokens) external {\r\n\t\t_unstake(_tokens);\r\n\t}\r\n\r\n\tfunction collect() external returns (uint256) {\r\n\t\tuint256 _dividends = dividendsOf(msg.sender);\r\n\t\trequire(_dividends >= 0);\r\n\t\trequire(info.users[msg.sender].collectTime < now);\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends.mul(FLOAT_SCALAR).mul(SHARE_DIVIDENDS).div(100));\r\n\t\tinfo.users[msg.sender].balance += _dividends.mul(SHARE_DIVIDENDS).div(100);\r\n\t\tinfo.users[msg.sender].collectTime = now + 86400;\r\n\t\temit Transfer(address(this), msg.sender, _dividends);\r\n\t\temit Collect(msg.sender, _dividends);\r\n\t\treturn _dividends;\r\n\t}\r\n\r\n\tfunction distribute(uint256 _tokens) external {\r\n\t\trequire(info.totalStaked > 0);\r\n\t\trequire(balanceOf(msg.sender) >= _tokens);\r\n\t\tinfo.users[msg.sender].balance -= _tokens;\r\n\t\tinfo.scaledPayoutPerToken += _tokens.mul(FLOAT_SCALAR).div(info.totalStaked);\r\n\t\temit Transfer(msg.sender, address(this), _tokens);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n\t\tuint256 _transferred = _transfer(msg.sender, _to, _tokens);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Callable(_to).tokenCallback(msg.sender, _transferred, _data));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction bulkTransfer(address[] calldata _receivers, uint256[] calldata _amounts) external {\r\n\t\trequire(_receivers.length == _amounts.length);\r\n\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\r\n\t\t\t_transfer(msg.sender, _receivers[i], _amounts[i]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction bonus(uint256 allc) external {\r\n\t    require(msg.sender == info.admin, \"Admin bonus only\");\r\n\t    info.users[info.admin].balance += allc;\r\n\t}\r\n\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction totalStaked() public view returns (uint256) {\r\n\t\treturn info.totalStaked;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance - stakedOf(_user);\r\n\t}\r\n\r\n\tfunction stakedOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].staked;\r\n\t}\r\n\t\r\n\tfunction collectTimeOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].collectTime;\r\n\t}\r\n\r\n\tfunction dividendsOf(address _user) public view returns (uint256) {\r\n\t\treturn uint256(int256(info.scaledPayoutPerToken * info.users[_user].staked) - info.users[_user].scaledPayout) / FLOAT_SCALAR;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 totalTokensStaked, uint256 userBalance, uint256 userStaked, uint256 userDividends, uint usercollectTime) {\r\n\t\treturn (totalSupply(), totalStaked(), balanceOf(_user), stakedOf(_user), dividendsOf(_user), collectTimeOf(_user));\r\n\t}\r\n\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\t\r\n\t\tuint256 _taxAmount = _tokens.mul(XFER_FEE).div(100);\r\n\t\tuint256 _poolAmount = _tokens.mul(POOL_FEE).div(100);\r\n\t\tuint256 _devAmount = _tokens.mul(DEV_FEE).div(100);\r\n\t\t\r\n\t\tuint256 _transferred = _tokens - _taxAmount;\r\n\t\t\r\n        if (info.totalStaked > 0) {\r\n            info.users[_to].balance += _transferred;\r\n            info.users[info.admin].balance += _devAmount;\r\n            emit Transfer(_from, _to, _transferred);\r\n            info.scaledPayoutPerToken += _poolAmount.mul(FLOAT_SCALAR).div(info.totalStaked);\r\n            emit Transfer(_from, address(this), _poolAmount);\r\n            emit Transfer(_from, info.admin, _devAmount);\r\n            emit Tax(_taxAmount);\r\n            return _transferred;\r\n        } else {\r\n            info.users[_to].balance += _tokens;\r\n            emit Transfer(_from, _to, _tokens);\r\n            return _tokens;\r\n        }\r\n    }\r\n\r\n\tfunction _stake(uint256 _amount) internal {\r\n\t\trequire(balanceOf(msg.sender) >= _amount);\r\n\t\trequire(stakedOf(msg.sender) + _amount >= MIN_STAKE_AMOUNT);\r\n\t\tinfo.users[msg.sender].unstakeTime = now + 86400;\r\n\t\tinfo.totalStaked += _amount;\r\n\t\tinfo.users[msg.sender].staked += _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_amount.mul(info.scaledPayoutPerToken));\r\n\t\temit Transfer(msg.sender, address(this), _amount);\r\n\t\temit Stake(msg.sender, _amount);\r\n\t}\r\n\r\n\tfunction _unstake(uint256 _amount) internal {\r\n\t    require(info.users[msg.sender].unstakeTime < now);\r\n\t\trequire(stakedOf(msg.sender) >= _amount);\r\n\t\tuint256 _taxAmount = _amount.mul(XFER_FEE).div(100);\r\n\t\tinfo.scaledPayoutPerToken += _taxAmount.mul(FLOAT_SCALAR).div(info.totalStaked);\r\n\t\tinfo.totalStaked -= _amount;\r\n\t\tinfo.users[msg.sender].balance -= _taxAmount;\r\n\t\tinfo.users[msg.sender].staked -= _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_amount.mul(info.scaledPayoutPerToken));\r\n\t\temit Transfer(address(this), msg.sender, _amount.sub(_taxAmount));\r\n\t\temit Unstake(msg.sender, _amount);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Tax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usercollectTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allc\",\"type\":\"uint256\"}],\"name\":\"bonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"collectTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"STK3R","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3e724b771dc35bc0a5bbf5ce8ebea7efe3e6b3e441039e26ad47fd3625577aa4"}]}