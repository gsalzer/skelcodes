{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\ninterface IVaultMaster {\r\n    function bank(address) view external returns (address);\r\n    function isVault(address) view external returns (bool);\r\n    function isController(address) view external returns (bool);\r\n    function isStrategy(address) view external returns (bool);\r\n\r\n    function slippage(address) view external returns (uint);\r\n    function convertSlippage(address _input, address _output) view external returns (uint);\r\n\r\n    function valueToken() view external returns (address);\r\n    function govVault() view external returns (address);\r\n    function insuranceFund() view external returns (address);\r\n    function performanceReward() view external returns (address);\r\n\r\n    function govVaultProfitShareFee() view external returns (uint);\r\n    function gasFee() view external returns (uint);\r\n    function insuranceFee() view external returns (uint);\r\n\r\n    function withdrawalProtectionFee() view external returns (uint);\r\n}\r\n\r\ninterface ICompositeVault {\r\n    function cap() external view returns (uint);\r\n    function getConverter() external view returns (address);\r\n    function getVaultMaster() external view returns (address);\r\n    function balance() external view returns (uint);\r\n    function tvl() external view returns (uint); // total dollar value\r\n    function token() external view returns (address);\r\n    function available() external view returns (uint);\r\n    function accept(address _input) external view returns (bool);\r\n\r\n    function earn() external;\r\n    function harvest(address reserve, uint amount) external;\r\n    function addNewCompound(uint, uint) external;\r\n\r\n    function withdraw_fee(uint _shares) external view returns (uint);\r\n    function calc_token_amount_deposit(address _input, uint _amount) external view returns (uint);\r\n    function calc_add_liquidity(uint _amount0, uint _amount1) external view returns (uint);\r\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\r\n    function calc_remove_liquidity(uint _shares) external view returns (uint _amount0, uint _amount1);\r\n\r\n    function getPricePerFullShare() external view returns (uint);\r\n    function get_virtual_price() external view returns (uint); // average dollar value of vault share token\r\n\r\n    function deposit(address _input, uint _amount, uint _min_mint_amount) external returns (uint);\r\n    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function addLiquidity(uint _amount0, uint _amount1, uint _min_mint_amount) external returns (uint);\r\n    function addLiquidityFor(address _account, address _to, uint _amount0, uint _amount1, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function withdraw(uint _shares, address _output, uint _min_output_amount) external returns (uint);\r\n    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) external returns (uint _output_amount);\r\n\r\n    function harvestStrategy(address _strategy) external;\r\n    function harvestAllStrategies() external;\r\n}\r\n\r\ninterface ILpPairConverter {\r\n    function lpPair() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n\r\n    function accept(address _input) external view returns (bool);\r\n    function get_virtual_price() external view returns (uint);\r\n\r\n    function convert_rate(address _input, address _output, uint _inputAmount) external view returns (uint _outputAmount);\r\n    function calc_add_liquidity(uint _amount0, uint _amount1) external view returns (uint);\r\n    function calc_remove_liquidity(uint _shares) external view returns (uint _amount0, uint _amount1);\r\n\r\n    function convert(address _input, address _output, address _to) external returns (uint _outputAmount);\r\n    function add_liquidity(address _to) external returns (uint _outputAmount);\r\n    function remove_liquidity(address _to) external returns (uint _amount0, uint _amount1);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint value) external returns (uint freed);\r\n}\r\n\r\ncontract CompositeVaultBank is ContextUpgradeSafe {\r\n    using Address for address;\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI(uint8 _flag) {\r\n        if ((_flag & 0x1) == 0) {\r\n            _;\r\n        } else {\r\n            uint gasStart = gasleft();\r\n            _;\r\n            uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    address public governance;\r\n    address public strategist; // who can call harvestXXX() and update reward rate\r\n\r\n    IVaultMaster public vaultMaster;\r\n\r\n    struct UserInfo {\r\n        uint amount;\r\n        uint rewardDebt;\r\n        uint accumulatedEarned; // will accumulate every time user harvest\r\n        uint lastStakeTime;\r\n        uint unclaimedReward;\r\n    }\r\n\r\n    struct RewardPoolInfo {\r\n        IERC20 rewardToken;     // Address of rewardPool token contract.\r\n        uint lastRewardBlock;   // Last block number that rewardPool distribution occurs.\r\n        uint endRewardBlock;    // Block number which rewardPool distribution ends.\r\n        uint rewardPerBlock;    // Reward token amount to distribute per block.\r\n        uint rewardLockedTime;  // Time to lock reward (in seconds).\r\n        uint accRewardPerShare; // Accumulated rewardPool per share, times 1e18.\r\n        uint totalPaidRewards;  // for stat only\r\n    }\r\n\r\n    mapping(address => RewardPoolInfo) public rewardPoolInfo; // vault address => reward info\r\n    mapping(address => mapping(address => UserInfo)) public userInfo; // vault address => account => userInfo\r\n\r\n    bool public acceptContractDepositor = false;\r\n    mapping(address => bool) public whitelistedContract;\r\n\r\n    event Deposit(address indexed vault, address indexed user, uint amount);\r\n    event Withdraw(address indexed vault, address indexed user, uint amount);\r\n    event RewardPaid(address indexed vault, address indexed user, uint reward);\r\n\r\n    function initialize(IVaultMaster _vaultMaster) public initializer {\r\n        vaultMaster = _vaultMaster;\r\n        governance = msg.sender;\r\n        strategist = msg.sender;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by a not-whitelisted contract while we do not accept contract depositor.\r\n     */\r\n    modifier checkContract() {\r\n        if (!acceptContractDepositor && !whitelistedContract[msg.sender]) {\r\n            require(!address(msg.sender).isContract() && msg.sender == tx.origin, \"contract not support\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setAcceptContractDepositor(bool _acceptContractDepositor) external onlyGovernance {\r\n        acceptContractDepositor = _acceptContractDepositor;\r\n    }\r\n\r\n    function whitelistContract(address _contract) external onlyGovernance {\r\n        whitelistedContract[_contract] = true;\r\n    }\r\n\r\n    function unwhitelistContract(address _contract) external onlyGovernance {\r\n        whitelistedContract[_contract] = false;\r\n    }\r\n\r\n    function setGovernance(address _governance) external onlyGovernance {\r\n        governance = _governance;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external onlyGovernance {\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setVaultMaster(IVaultMaster _vaultMaster) external onlyGovernance {\r\n        vaultMaster = _vaultMaster;\r\n    }\r\n\r\n    function addPool(address _vault, IERC20 _rewardToken, uint _startBlock, uint _endRewardBlock, uint _rewardPerBlock, uint _rewardLockedTime) external onlyGovernance {\r\n        _startBlock = (block.number > _startBlock) ? block.number : _startBlock;\r\n        require(_startBlock <= _endRewardBlock, \"sVB>eVB\");\r\n        rewardPoolInfo[_vault].rewardToken = _rewardToken;\r\n        rewardPoolInfo[_vault].lastRewardBlock = _startBlock;\r\n        rewardPoolInfo[_vault].endRewardBlock = _endRewardBlock;\r\n        rewardPoolInfo[_vault].rewardPerBlock = _rewardPerBlock;\r\n        rewardPoolInfo[_vault].rewardLockedTime = _rewardLockedTime;\r\n        rewardPoolInfo[_vault].accRewardPerShare = 0;\r\n        rewardPoolInfo[_vault].totalPaidRewards = 0;\r\n    }\r\n\r\n    function updatePool(address _vault, uint _endRewardBlock, uint _rewardPerBlock, uint _rewardLockedTime) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\r\n        updateReward(_vault);\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n        require(block.number <= rewardPool.endRewardBlock, \"late\");\r\n        rewardPool.endRewardBlock = _endRewardBlock;\r\n        rewardPool.rewardPerBlock = _rewardPerBlock;\r\n        rewardPool.rewardLockedTime = _rewardLockedTime;\r\n    }\r\n\r\n    function updatePoolReward(address[] calldata _vaults, uint[] calldata _rewardPerBlocks) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\r\n        uint leng = _vaults.length;\r\n        uint currTotalRwd = 0;\r\n        uint updatedTotalRwd = 0;\r\n        for (uint i = 0; i < leng; i++) {\r\n            address _vault = _vaults[i];\r\n            RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n            if (block.number < rewardPool.endRewardBlock) {\r\n                updateReward(_vault);\r\n                currTotalRwd = currTotalRwd.add(rewardPool.rewardPerBlock);\r\n                updatedTotalRwd = updatedTotalRwd.add(_rewardPerBlocks[i]);\r\n                rewardPool.rewardPerBlock = _rewardPerBlocks[i];\r\n            }\r\n        }\r\n        require(currTotalRwd <= updatedTotalRwd.mul(4), \"over increased\");\r\n        require(currTotalRwd.mul(4) >= updatedTotalRwd, \"over decreased\");\r\n    }\r\n\r\n    function updateReward(address _vault) public {\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n        uint _endRewardBlockApplicable = block.number > rewardPool.endRewardBlock ? rewardPool.endRewardBlock : block.number;\r\n        if (_endRewardBlockApplicable > rewardPool.lastRewardBlock) {\r\n            uint lpSupply = IERC20(address(_vault)).balanceOf(address(this));\r\n            if (lpSupply > 0) {\r\n                uint _numBlocks = _endRewardBlockApplicable.sub(rewardPool.lastRewardBlock);\r\n                uint _incRewardPerShare = _numBlocks.mul(rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\r\n                rewardPool.accRewardPerShare = rewardPool.accRewardPerShare.add(_incRewardPerShare);\r\n            }\r\n            rewardPool.lastRewardBlock = _endRewardBlockApplicable;\r\n        }\r\n    }\r\n\r\n    function cap(ICompositeVault _vault) external view returns (uint) {\r\n        return _vault.cap();\r\n    }\r\n\r\n    function approveForSpender(IERC20 _token, address _spender, uint _amount) external onlyGovernance {\r\n        require(!vaultMaster.isVault(address(_token)), \"vaultToken\");\r\n        _token.safeApprove(_spender, _amount);\r\n    }\r\n\r\n    function calculateMultiMinReceive(ICompositeVault[] calldata _vaults, address _input, uint[] calldata _amounts) external view returns (uint[] memory minReceives) {\r\n        require(_vaults.length == _amounts.length, \"Invalid input length data\");\r\n        uint leng = _vaults.length;\r\n        minReceives = new uint[](leng);\r\n        for (uint i = 0; i < leng; i++) {\r\n            ICompositeVault vault = _vaults[i];\r\n            minReceives[i] = ILpPairConverter(vault.getConverter()).convert_rate(_input, vault.token(), _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function depositMultiVault(ICompositeVault[] calldata _vaults, address _input, uint[] calldata _amounts, uint[] calldata _min_mint_amounts, bool _isStake, uint8 _flag) public discountCHI(_flag) {\r\n        uint leng = _vaults.length;\r\n        for (uint i = 0; i < leng; i++) {\r\n            deposit(_vaults[i], _input, _amounts[i], _min_mint_amounts[i], _isStake, uint8(0));\r\n        }\r\n    }\r\n\r\n    function deposit(ICompositeVault _vault, address _input, uint _amount, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) checkContract {\r\n        require(_vault.accept(_input), \"vault does not accept this asset\");\r\n        require(_amount > 0, \"!_amount\");\r\n\r\n        IERC20(_input).safeTransferFrom(msg.sender, address(this), _amount);\r\n        IERC20(_input).safeIncreaseAllowance(address(_vault), _amount);\r\n        uint _mint_amount = _vault.deposit(_input, _amount, _min_mint_amount);\r\n\r\n        if (!_isStake) {\r\n            IERC20(address(_vault)).safeTransfer(msg.sender, _mint_amount);\r\n        } else {\r\n            _stakeVaultShares(address(_vault), _mint_amount);\r\n        }\r\n    }\r\n\r\n    function transferVault(ICompositeVault _srcVault, ICompositeVault _destVault, uint _srcShares, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) checkContract {\r\n        address _srcVaultToken = _srcVault.token();\r\n        require(_destVault.accept(_srcVaultToken), \"_destVault does not accept _srcVault asset\");\r\n        require(_srcShares > 0, \"!_srcShares\");\r\n\r\n        uint _depositAmt;\r\n        {\r\n            uint _wdAmt = _withdraw(address(_srcVault), _srcShares);\r\n            uint _before = IERC20(_srcVaultToken).balanceOf(address(this));\r\n            _srcVault.withdraw(_wdAmt, _srcVaultToken, 1);\r\n            uint _after = IERC20(_srcVaultToken).balanceOf(address(this));\r\n            _depositAmt = _after.sub(_before);\r\n        }\r\n\r\n        IERC20(_srcVaultToken).safeIncreaseAllowance(address(_destVault), _depositAmt);\r\n        uint _mint_amount = _destVault.deposit(_srcVaultToken, _depositAmt, _min_mint_amount);\r\n\r\n        if (!_isStake) {\r\n            IERC20(address(_destVault)).safeTransfer(msg.sender, _mint_amount);\r\n        } else {\r\n            _stakeVaultShares(address(_destVault), _mint_amount);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(ICompositeVault _vault, uint _amount0, uint _amount1, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) checkContract {\r\n        require(_amount0 > 0 || _amount1 > 0, \"!(_amount0 && _amount1)\");\r\n\r\n        ILpPairConverter _cnvrt = ILpPairConverter(_vault.getConverter());\r\n        address _token0 = _cnvrt.token0();\r\n        address _token1 = _cnvrt.token1();\r\n\r\n        IERC20(_token0).safeTransferFrom(msg.sender, address(this), _amount0);\r\n        IERC20(_token1).safeTransferFrom(msg.sender, address(this), _amount1);\r\n        IERC20(_token0).safeIncreaseAllowance(address(_vault), _amount0);\r\n        IERC20(_token1).safeIncreaseAllowance(address(_vault), _amount1);\r\n        uint _mint_amount = _vault.addLiquidity(_amount0, _amount1, _min_mint_amount);\r\n\r\n        if (!_isStake) {\r\n            IERC20(address(_vault)).safeTransfer(msg.sender, _mint_amount);\r\n        } else {\r\n            _stakeVaultShares(address(_vault), _mint_amount);\r\n        }\r\n    }\r\n\r\n    function stakeVaultShares(address _vault, uint _shares, uint8 _flag) public discountCHI(_flag) {\r\n        uint _before = IERC20(address(_vault)).balanceOf(address(this));\r\n        IERC20(address(_vault)).safeTransferFrom(msg.sender, address(this), _shares);\r\n        uint _after = IERC20(address(_vault)).balanceOf(address(this));\r\n        _shares = _after.sub(_before); // Additional check for deflationary tokens\r\n        _stakeVaultShares(_vault, _shares);\r\n    }\r\n\r\n    function _stakeVaultShares(address _vault, uint _shares) internal {\r\n        UserInfo storage user = userInfo[_vault][msg.sender];\r\n        user.lastStakeTime = block.timestamp;\r\n        updateReward(_vault);\r\n        if (user.amount > 0) {\r\n            getReward(_vault, msg.sender, uint8(0));\r\n        }\r\n        user.amount = user.amount.add(_shares);\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n        user.rewardDebt = user.amount.mul(rewardPool.accRewardPerShare).div(1e18);\r\n        emit Deposit(_vault, msg.sender, _shares);\r\n    }\r\n\r\n    function unfrozenStakeTime(address _vault, address _account) public view returns (uint) {\r\n        UserInfo storage user = userInfo[_vault][_account];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n        return user.lastStakeTime + rewardPool.rewardLockedTime;\r\n    }\r\n\r\n    function unstake(address _vault, uint _amount, uint8 _flag) public discountCHI(_flag) {\r\n        UserInfo storage user = userInfo[_vault][msg.sender];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n        updateReward(_vault);\r\n        if (user.amount > 0) {\r\n            getReward(_vault, msg.sender, uint8(0));\r\n            if (user.lastStakeTime + rewardPool.rewardLockedTime > block.timestamp) {\r\n                user.unclaimedReward = 0;\r\n            } else if (user.unclaimedReward > 0) {\r\n                safeTokenTransfer(rewardPool.rewardToken, msg.sender, user.unclaimedReward);\r\n                user.unclaimedReward = 0;\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            IERC20(address(_vault)).safeTransfer(msg.sender, _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(rewardPool.accRewardPerShare).div(1e18);\r\n        emit Withdraw(_vault, msg.sender, _amount);\r\n    }\r\n\r\n    function claimReward(address _vault, uint8 _flag) public discountCHI(_flag) {\r\n        UserInfo storage user = userInfo[_vault][msg.sender];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n        require(user.lastStakeTime + rewardPool.rewardLockedTime <= block.timestamp, \"locked rewards\");\r\n        getReward(_vault, msg.sender, uint8(0));\r\n        uint _pendingReward = user.unclaimedReward;\r\n        if (_pendingReward > 0) {\r\n            safeTokenTransfer(rewardPool.rewardToken, msg.sender, _pendingReward);\r\n            user.unclaimedReward = 0;\r\n        }\r\n    }\r\n\r\n    // using PUSH pattern\r\n    function getReward(address _vault, address _account, uint8 _flag) public discountCHI(_flag) {\r\n        updateReward(_vault);\r\n        UserInfo storage user = userInfo[_vault][_account];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n        uint _pendingReward = user.amount.mul(rewardPool.accRewardPerShare).div(1e18).sub(user.rewardDebt);\r\n        if (_pendingReward > 0) {\r\n            user.accumulatedEarned = user.accumulatedEarned.add(_pendingReward);\r\n            rewardPool.totalPaidRewards = rewardPool.totalPaidRewards.add(_pendingReward);\r\n            // safeTokenTransfer(rewardPool.rewardToken, _account, _pendingReward);\r\n            user.unclaimedReward = user.unclaimedReward.add(_pendingReward);\r\n            emit RewardPaid(_vault, _account, _pendingReward);\r\n            user.rewardDebt = user.amount.mul(rewardPool.accRewardPerShare).div(1e18);\r\n        }\r\n    }\r\n\r\n    function pendingReward(address _vault, address _account) public view returns (uint _pending) {\r\n        UserInfo storage user = userInfo[_vault][_account];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\r\n        uint _accRewardPerShare = rewardPool.accRewardPerShare;\r\n        uint lpSupply = IERC20(_vault).balanceOf(address(this));\r\n        uint _endRewardBlockApplicable = block.number > rewardPool.endRewardBlock ? rewardPool.endRewardBlock : block.number;\r\n        if (_endRewardBlockApplicable > rewardPool.lastRewardBlock && lpSupply != 0) {\r\n            uint _numBlocks = _endRewardBlockApplicable.sub(rewardPool.lastRewardBlock);\r\n            uint _incRewardPerShare = _numBlocks.mul(rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\r\n            _accRewardPerShare = _accRewardPerShare.add(_incRewardPerShare);\r\n        }\r\n        _pending = user.amount.mul(_accRewardPerShare).div(1e18).sub(user.rewardDebt);\r\n        _pending = _pending.add(user.unclaimedReward);\r\n    }\r\n\r\n    function shares_owner(address _vault, address _account) public view returns (uint) {\r\n        return IERC20(_vault).balanceOf(_account).add(userInfo[_vault][_account].amount);\r\n    }\r\n\r\n    // No rebalance implementation for lower fees and faster swaps\r\n    function withdraw(address _vault, uint _shares, address _output, uint _min_output_amount, uint8 _flag) public discountCHI(_flag) {\r\n        uint _wdAmt = _withdraw(_vault, _shares);\r\n        ICompositeVault(_vault).withdrawFor(msg.sender, _wdAmt, _output, _min_output_amount);\r\n    }\r\n\r\n    function _withdraw(address _vault, uint _shares) internal returns (uint){\r\n        uint _userBal = IERC20(address(_vault)).balanceOf(msg.sender);\r\n        if (_shares > _userBal) {\r\n            uint _need = _shares.sub(_userBal);\r\n            require(_need <= userInfo[_vault][msg.sender].amount, \"_userBal+staked < _shares\");\r\n            unstake(_vault, _need, uint8(0));\r\n        }\r\n        uint _before = IERC20(address(_vault)).balanceOf(address(this));\r\n        IERC20(address(_vault)).safeTransferFrom(msg.sender, address(this), _shares);\r\n        uint _after = IERC20(address(_vault)).balanceOf(address(this));\r\n        return _after.sub(_before);\r\n    }\r\n\r\n    function exit(address _vault, address _output, uint _min_output_amount, uint8 _flag) external discountCHI(_flag) {\r\n        unstake(_vault, userInfo[_vault][msg.sender].amount, uint8(0));\r\n        withdraw(_vault, IERC20(address(_vault)).balanceOf(msg.sender), _output, _min_output_amount, uint8(0));\r\n    }\r\n\r\n    function withdraw_fee(ICompositeVault _vault, uint _shares) external view returns (uint) {\r\n        return _vault.withdraw_fee(_shares);\r\n    }\r\n\r\n    function calc_token_amount_deposit(ICompositeVault _vault, address _input, uint _amount) external view returns (uint) {\r\n        return _vault.calc_token_amount_deposit(_input, _amount);\r\n    }\r\n\r\n    function calc_add_liquidity(ICompositeVault _vault, uint _amount0, uint _amount1) external view returns (uint) {\r\n        return _vault.calc_add_liquidity(_amount0, _amount1);\r\n    }\r\n\r\n    function calc_token_amount_withdraw(ICompositeVault _vault, uint _shares, address _output) external view returns (uint) {\r\n        return _vault.calc_token_amount_withdraw(_shares, _output);\r\n    }\r\n\r\n    function calc_remove_liquidity(ICompositeVault _vault, uint _shares) external view returns (uint _amount0, uint _amount1) {\r\n        return _vault.calc_remove_liquidity(_shares);\r\n    }\r\n\r\n    function calc_transfer_vault_shares(ICompositeVault _srcVault, ICompositeVault _destVault, uint _srcShares) external view returns (uint) {\r\n        address _srcVaultToken = _srcVault.token();\r\n        uint _amount = _srcVault.calc_token_amount_withdraw(_srcShares, _srcVaultToken);\r\n        return _destVault.calc_token_amount_deposit(_srcVaultToken, _amount);\r\n    }\r\n\r\n    function harvestStrategy(ICompositeVault _vault, address _strategy, uint8 _flag) external discountCHI(_flag) {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\r\n        _vault.harvestStrategy(_strategy);\r\n    }\r\n\r\n    function harvestAllStrategies(ICompositeVault _vault, uint8 _flag) external discountCHI(_flag) {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\r\n        _vault.harvestAllStrategies();\r\n    }\r\n\r\n    // Safe token transfer function, just in case if rounding error causes vinfo to not have enough token.\r\n    function safeTokenTransfer(IERC20 _token, address _to, uint _amount) internal {\r\n        uint bal = _token.balanceOf(address(this));\r\n        if (_amount > bal) {\r\n            _token.safeTransfer(_to, bal);\r\n        } else {\r\n            _token.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\r\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\r\n     */\r\n    function governanceRecoverUnsupported(IERC20 _token, uint amount, address to) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(!vaultMaster.isVault(address(_token)), \"vaultToken\");\r\n        _token.safeTransfer(to, amount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptContractDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStake\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockedTime\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"name\":\"calc_add_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calc_remove_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calc_token_amount_deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"calc_token_amount_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_srcVault\",\"type\":\"address\"},{\"internalType\":\"contract ICompositeVault\",\"name\":\"_destVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcShares\",\"type\":\"uint256\"}],\"name\":\"calc_transfer_vault_shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"calculateMultiMinReceive\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minReceives\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStake\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_min_mint_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_isStake\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"depositMultiVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min_output_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"harvestAllStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"harvestStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultMaster\",\"name\":\"_vaultMaster\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPoolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_acceptContractDepositor\",\"type\":\"bool\"}],\"name\":\"setAcceptContractDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultMaster\",\"name\":\"_vaultMaster\",\"type\":\"address\"}],\"name\":\"setVaultMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"shares_owner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"stakeVaultShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_srcVault\",\"type\":\"address\"},{\"internalType\":\"contract ICompositeVault\",\"name\":\"_destVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStake\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"transferVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unfrozenStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"unwhitelistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockedTime\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"updatePoolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultMaster\",\"outputs\":[{\"internalType\":\"contract IVaultMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"whitelistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min_output_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompositeVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CompositeVaultBank","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4a39e4d573cc1af4e570da1d1799f1e868427828d79ffa2a8354db3b7540fbcd"}]}