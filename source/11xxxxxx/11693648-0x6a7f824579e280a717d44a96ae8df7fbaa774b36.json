{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\n\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IValueLiquidFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function isPair(address) external view returns (bool);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external returns (address pair);\r\n\r\n    function getWeightsAndSwapFee(address pair)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 tokenWeight0,\r\n            uint32 tokenWeight1,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setProtocolFee(uint256) external;\r\n}\r\n\r\n/*\r\n    Bancor Formula interface\r\n*/\r\ninterface IValueLiquidFormula {\r\n    function getReserveAndWeights(address pair, address tokenA)\r\n        external\r\n        view\r\n        returns (\r\n            address tokenB,\r\n            uint256 reserveA,\r\n            uint256 reserveB,\r\n            uint32 tokenWeightA,\r\n            uint32 tokenWeightB,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function getFactoryReserveAndWeights(\r\n        address factory,\r\n        address pair,\r\n        address tokenA\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address tokenB,\r\n            uint256 reserveA,\r\n            uint256 reserveB,\r\n            uint32 tokenWeightA,\r\n            uint32 tokenWeightB,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut,\r\n        uint32 tokenWeightIn,\r\n        uint32 tokenWeightOut,\r\n        uint32 swapFee\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    function getPairAmountIn(\r\n        address pair,\r\n        address tokenIn,\r\n        uint256 amountOut\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut,\r\n        uint32 tokenWeightIn,\r\n        uint32 tokenWeightOut,\r\n        uint32 swapFee\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getPairAmountOut(\r\n        address pair,\r\n        address tokenIn,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getAmountsIn(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getFactoryAmountsIn(\r\n        address factory,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getFactoryAmountsOut(\r\n        address factory,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function ensureConstantValue(\r\n        uint256 reserve0,\r\n        uint256 reserve1,\r\n        uint256 balance0Adjusted,\r\n        uint256 balance1Adjusted,\r\n        uint32 tokenWeight0\r\n    ) external view returns (bool);\r\n\r\n    function getReserves(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\r\n\r\n    function mintLiquidityFee(\r\n        uint256 totalLiquidity,\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 tokenWeight0,\r\n        uint32 tokenWeight1,\r\n        uint112 collectedFee0,\r\n        uint112 collectedFee1\r\n    ) external view returns (uint256 amount);\r\n}\r\n\r\ninterface IValueLiquidPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\r\n\r\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\r\n\r\n    function getSwapFee() external view returns (uint32);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(\r\n        address,\r\n        address,\r\n        uint32,\r\n        uint32\r\n    ) external;\r\n}\r\n\r\ninterface IStakePool {\r\n    event Deposit(address indexed account, uint256 amount);\r\n    event AddRewardPool(uint256 indexed poolId);\r\n    event UpdateRewardPool(uint256 indexed poolId, uint256 endRewardBlock, uint256 rewardPerBlock);\r\n    event PayRewardPool(\r\n        uint256 indexed poolId,\r\n        address indexed rewardToken,\r\n        address indexed account,\r\n        uint256 pendingReward,\r\n        uint256 rebaseAmount,\r\n        uint256 paidReward\r\n    );\r\n    event UpdateRewardRebaser(uint256 indexed poolId, address rewardRebaser);\r\n    event UpdateRewardMultiplier(uint256 indexed poolId, address rewardMultiplier);\r\n    event Withdraw(address indexed account, uint256 amount);\r\n\r\n    function version() external returns (uint256);\r\n\r\n    function pair() external returns (address);\r\n\r\n    function initialize(\r\n        address _pair,\r\n        uint256 _unstakingFrozenTime,\r\n        address _rewardFund,\r\n        address _timelock\r\n    ) external;\r\n\r\n    function stake(uint256) external;\r\n\r\n    function stakeFor(address _account) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function getReward(uint8 _pid, address _account) external;\r\n\r\n    function getAllRewards(address _account) external;\r\n\r\n    function pendingReward(uint8 _pid, address _account) external view returns (uint256);\r\n\r\n    function getEndRewardBlock(uint8 _pid) external view returns (address, uint256);\r\n\r\n    function getRewardPerBlock(uint8 pid) external view returns (uint256);\r\n\r\n    function rewardPoolInfoLength() external view returns (uint256);\r\n\r\n    function unfrozenStakeTime(address _account) external view returns (uint256);\r\n\r\n    function emergencyWithdraw() external;\r\n\r\n    function updateReward() external;\r\n\r\n    function updateReward(uint8 _pid) external;\r\n\r\n    function updateRewardPool(\r\n        uint8 _pid,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock\r\n    ) external;\r\n\r\n    function getRewardMultiplier(\r\n        uint8 _pid,\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _rewardPerBlock\r\n    ) external view returns (uint256);\r\n\r\n    function getRewardRebase(\r\n        uint8 _pid,\r\n        address _rewardToken,\r\n        uint256 _pendingReward\r\n    ) external view returns (uint256);\r\n\r\n    function updateRewardRebaser(uint8 _pid, address _rewardRebaser) external;\r\n\r\n    function updateRewardMultiplier(uint8 _pid, address _rewardMultiplier) external;\r\n\r\n    function getUserInfo(uint8 _pid, address _account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 rewardDebt,\r\n            uint256 accumulatedEarned,\r\n            uint256 lockReward,\r\n            uint256 lockRewardReleased\r\n        );\r\n\r\n    function addRewardPool(\r\n        address _rewardToken,\r\n        address _rewardRebaser,\r\n        address _rewardMultiplier,\r\n        uint256 _startBlock,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _lockRewardPercent,\r\n        uint256 _startVestingBlock,\r\n        uint256 _endVestingBlock\r\n    ) external;\r\n\r\n    function removeLiquidity(\r\n        address provider,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address provider,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address provider,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IValueLiquidProvider {\r\n    function factory() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function removeLiquidity(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function stake(\r\n        address stakePool,\r\n        uint256 amount,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function stakeWithPermit(\r\n        address stakePool,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0, \"ds-math-division-by-zero\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IStakePoolController {\r\n    event MasterCreated(address indexed farm, address indexed pair, uint256 version, address timelock, address stakePoolRewardFund, uint256 totalStakePool);\r\n    event SetWhitelistStakingFor(address indexed contractAddress, bool value);\r\n    event SetWhitelistStakePool(address indexed contractAddress, int8 value);\r\n    event SetStakePoolCreator(address indexed contractAddress, uint256 verion);\r\n    event SetWhitelistRewardRebaser(address indexed contractAddress, bool value);\r\n    event SetWhitelistRewardMultiplier(address indexed contractAddress, bool value);\r\n    event SetStakePoolVerifier(address indexed contractAddress, bool value);\r\n    event ChangeGovernance(address indexed governance);\r\n    event SetFeeCollector(address indexed feeCollector);\r\n    event SetFeeToken(address indexed token);\r\n    event SetFeeAmount(uint256 indexed amount);\r\n\r\n    struct PoolRewardInfo {\r\n        address rewardToken;\r\n        address rewardRebaser;\r\n        address rewardMultiplier;\r\n        uint256 startBlock;\r\n        uint256 endRewardBlock;\r\n        uint256 rewardPerBlock;\r\n        uint256 lockRewardPercent;\r\n        uint256 startVestingBlock;\r\n        uint256 endVestingBlock;\r\n        uint256 unstakingFrozenTime;\r\n        uint256 rewardFundAmount;\r\n    }\r\n\r\n    function allStakePools(uint256) external view returns (address stakePool);\r\n\r\n    function isStakePool(address contractAddress) external view returns (bool);\r\n\r\n    function isStakePoolVerifier(address contractAddress) external view returns (bool);\r\n\r\n    function isWhitelistStakingFor(address contractAddress) external view returns (bool);\r\n\r\n    function isWhitelistStakePool(address contractAddress) external view returns (int8);\r\n\r\n    function setStakePoolVerifier(address contractAddress, bool state) external;\r\n\r\n    function setWhitelistStakingFor(address contractAddress, bool state) external;\r\n\r\n    function setWhitelistStakePool(address contractAddress, int8 state) external;\r\n\r\n    function addStakePoolCreator(address contractAddress) external;\r\n\r\n    function isWhitelistRewardRebaser(address contractAddress) external view returns (bool);\r\n\r\n    function setWhitelistRewardRebaser(address contractAddress, bool state) external;\r\n\r\n    function isWhitelistRewardMultiplier(address contractAddress) external view returns (bool);\r\n\r\n    function setWhitelistRewardMultiplier(address contractAddress, bool state) external;\r\n\r\n    function allStakePoolsLength() external view returns (uint256);\r\n\r\n    function create(\r\n        uint256 version,\r\n        address pair,\r\n        uint256 delayTimeLock,\r\n        PoolRewardInfo calldata poolRewardInfo,\r\n        uint8 flag\r\n    ) external returns (address);\r\n\r\n    function createPair(\r\n        uint256 version,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee,\r\n        uint256 delayTimeLock,\r\n        PoolRewardInfo calldata poolRewardInfo,\r\n        uint8 flag\r\n    ) external returns (address);\r\n\r\n    function setGovernance(address) external;\r\n\r\n    function setFeeCollector(address _address) external;\r\n\r\n    function setFeeToken(address _token) external;\r\n\r\n    function setFeeAmount(uint256 _token) external;\r\n}\r\n\r\ncontract ValueLiquidProvider is IValueLiquidProvider {\r\n    using SafeMath for uint256;\r\n    address public immutable override factory;\r\n    address public immutable override controller;\r\n    address public immutable override formula;\r\n    address public immutable override WETH;\r\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    modifier ensure(uint256 deadline) {\r\n        require(deadline >= block.timestamp, \"Router: EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _factory,\r\n        address _controller,\r\n        address _WETH\r\n    ) {\r\n        factory = _factory;\r\n        controller = _controller;\r\n        formula = IValueLiquidFactory(_factory).formula();\r\n        WETH = _WETH;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WETH);\r\n        // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    function stake(\r\n        address stakePool,\r\n        uint256 amount,\r\n        uint256 deadline\r\n    ) external virtual override ensure(deadline) {\r\n        require(IStakePoolController(controller).isStakePool(stakePool), \"Router: Invalid stakePool\");\r\n        address pair = IStakePool(stakePool).pair();\r\n        IValueLiquidPair(pair).transferFrom(msg.sender, stakePool, amount);\r\n        IStakePool(stakePool).stakeFor(msg.sender);\r\n    }\r\n\r\n    function stakeWithPermit(\r\n        address stakePool,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override ensure(deadline) {\r\n        require(IStakePoolController(controller).isStakePool(stakePool), \"Router: Invalid stakePool\");\r\n        address pair = IStakePool(stakePool).pair();\r\n        IValueLiquidPair(pair).permit(msg.sender, address(this), approveMax ? uint256(-1) : amount, deadline, v, r, s);\r\n        IValueLiquidPair(pair).transferFrom(msg.sender, stakePool, amount);\r\n        IStakePool(stakePool).stakeFor(msg.sender);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY ****\r\n    function _removeLiquidity(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to\r\n    ) internal returns (uint256 amountA, uint256 amountB) {\r\n        require(IValueLiquidFactory(factory).isPair(pair), \"Router: Invalid pair\");\r\n        IValueLiquidPair(pair).transferFrom(msg.sender, pair, liquidity);\r\n        // send liquidity to pair\r\n        (uint256 amount0, uint256 amount1) = IValueLiquidPair(pair).burn(to);\r\n        (address token0, ) = IValueLiquidFormula(formula).sortTokens(tokenA, tokenB);\r\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\r\n        require(amountA >= amountAMin, \"Router: INSUFFICIENT_A_AMOUNT\");\r\n        require(amountB >= amountBMin, \"Router: INSUFFICIENT_B_AMOUNT\");\r\n    }\r\n\r\n    function removeLiquidity(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\r\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\r\n    }\r\n\r\n    function removeLiquidityETH(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\r\n        (amountToken, amountETH) = _removeLiquidity(pair, token, WETH, liquidity, amountTokenMin, amountETHMin, address(this));\r\n        TransferHelper.safeTransfer(token, to, amountToken);\r\n        transferAll(ETH_ADDRESS, to, amountETH);\r\n    }\r\n\r\n    function removeLiquidityWithPermit(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\r\n        {\r\n            uint256 value = approveMax ? uint256(-1) : liquidity;\r\n            IValueLiquidPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n        }\r\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\r\n    }\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override returns (uint256 amountToken, uint256 amountETH) {\r\n        uint256 value = approveMax ? uint256(-1) : liquidity;\r\n        IValueLiquidPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n        (amountToken, amountETH) = removeLiquidityETH(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) public virtual override ensure(deadline) returns (uint256 amountETH) {\r\n        (, amountETH) = removeLiquidity(pair, token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);\r\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\r\n        transferAll(ETH_ADDRESS, to, amountETH);\r\n    }\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override returns (uint256 amountETH) {\r\n        uint256 value = approveMax ? uint256(-1) : liquidity;\r\n        IValueLiquidPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\r\n    }\r\n\r\n    function transferAll(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            IWETH(WETH).withdraw(amount);\r\n            TransferHelper.safeTransferETH(to, amount);\r\n        } else {\r\n            TransferHelper.safeTransfer(token, to, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isETH(address token) internal pure returns (bool) {\r\n        return (token == ETH_ADDRESS);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ValueLiquidProvider","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000005021470fc598373fba4fe3384745940eab3e653d000000000000000000000000f0159d041db29029ccf285a1043dcaac7088030b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bfb1fc5395a2c1100f26d308a3a83e7e11293886d74b334b0906c1951a14e758"}]}