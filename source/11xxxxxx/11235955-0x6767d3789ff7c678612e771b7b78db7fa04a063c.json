{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20Decimals {\r\n    function decimals() external view returns(uint256);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n\r\ncontract BlueWhale is ERC20, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    uint256 constant private BASE = 1e8;\r\n\r\n    uint256 constant private DAY1 = 1 days;\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 pending; \r\n        uint256 rewardDebt; \r\n        \r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; \r\n        uint256 allocPoint;\r\n        uint256 totalamount; \r\n        uint256 lastRewardBlock; \r\n        uint256 accBLWPerShare; \r\n    }\r\n\r\n    struct AccountNodeInfo {\r\n        uint256 initAmount;\r\n        uint256 lockedAmount; \r\n        uint256 lastUnlockTs; \r\n        uint256 rewardPending;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    struct NodeInfo {\r\n        uint256 allocPoint;\r\n        uint256 totalamount; \r\n        uint256 lastRewardBlock; \r\n        uint256 accBLWPerShare; \r\n    }\r\n\r\n    struct Fund {\r\n        uint256 initFund;\r\n        uint256 Locked;\r\n        uint256 lastReleaseTs;\r\n    }\r\n\r\n    bool public init;\r\n    PoolInfo[] public poolInfo;\r\n    NodeInfo public nodeinfo;\r\n    uint256 poolstart = 1606060800;\r\n    uint256 public totalAllocPoint = 0;\r\n    uint256 public teamRewardPerDay;\r\n    uint256 public lastTeamReleaseTs;\r\n    mapping(address => uint256) public Locked; \r\n    uint256 public nodeRequireAmount; \r\n    uint256 public nodeStartReleaseTs; \r\n    uint256 public nodeReleaseDays;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; \r\n    mapping(address => AccountNodeInfo) public accountNodeInfo; \r\n    mapping(address => bool) public accountNodestatus;\r\n    uint256 public startBlock; \r\n    uint256 public BLWPerBlock; \r\n    mapping(address => Fund) public funds; \r\n    address public fundToken; \r\n    address public TeamHolder;\r\n    uint256 private fundStartTs;\r\n    uint256 private fundFinishTs;\r\n    uint256 private fundStartReleaseTs; \r\n    uint256 private maxFund;\r\n    uint256 private maxFundPerAccount;\r\n    uint256 public currentLockedFund; \r\n    uint256 private fundReleaseDays; \r\n    uint256 private fundPrice;\r\n    // uint256  private ts1023 = 1602518400;\r\n    // uint256  private ts1025 = 1603382400  ;\r\n    event LockFund(address user, uint256 amount);\r\n    event UnlockFund(address user, uint256 amount);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event NodeSet(uint256 oldallocPoint, uint256 newallocPoint);\r\n    event Set(uint256 pid, uint256 allocPoint, bool withUpdate);\r\n    event Lock(address user, uint256 amount);\r\n    event unLock(address user, uint256 amount);\r\n    event UnlockNodeBalance(address user, uint256 amount);\r\n    event BatchUpdatePools();\r\n    event ReclaimStakingReward(address user, uint256 amount);\r\n\r\n    function getpool() view public returns(PoolInfo[] memory){\r\n        return poolInfo;\r\n    }\r\n    //池子pid有效性检查\r\n    modifier validatePool(uint256 _pid) {\r\n        require(_pid < poolInfo.length, 'not good pid');\r\n        _;\r\n    }\r\n    constructor(address _fundToken, address teamHolder, uint256 teamReleaseTime, uint256 _nodeLockTime, uint256 _BLWPerBlock, uint256 _startBlock) ERC20(\"BlueWhale\", \"BLW\") public {\r\n        BLWPerBlock = _BLWPerBlock;\r\n        TeamHolder = teamHolder;\r\n        startBlock = _startBlock;\r\n        _mint(address(this), 41340000 * BASE); //total supply 41340000\r\n        _transferlock(teamHolder,4134000* BASE); //10%\r\n        _setupDecimals(8);\r\n        _setupFundParams(_fundToken); \r\n        _setupTeamParams(4134000* BASE, teamReleaseTime);\r\n        _setupNodeParams(_nodeLockTime);\r\n\r\n    }\r\n    \r\n    function _setupTeamParams(uint256 lockAmount, uint256 startTime) internal {\r\n        teamRewardPerDay = lockAmount / 365 / 4;\r\n        lastTeamReleaseTs = startTime;\r\n    }\r\n    \r\n    function _setupFundParams(address _fundToken) internal {\r\n        maxFund = 2000000 * BASE;\r\n        maxFundPerAccount = 500 * BASE;\r\n        IERC20Decimals erc20 = IERC20Decimals(_fundToken);\r\n        fundToken = _fundToken;\r\n        fundPrice = 17000 * 1e4 * (10 ** (erc20.decimals())) / BASE; // 1e8 based\r\n        fundStartTs = 1602518400;\r\n        fundFinishTs = 1603468800;\r\n        fundStartReleaseTs = 1605801600;\r\n        fundReleaseDays = 90;\r\n    }\r\n\r\n    function _setupNodeParams(uint256 _nodeLockTime) internal {\r\n        nodeinfo.lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        nodeRequireAmount = 5000 * BASE; \r\n        nodeStartReleaseTs = _nodeLockTime + 90 days; //node release time\r\n        nodeReleaseDays = 90; //node release cycle\r\n    }\r\n\r\n    function setNodeInfo(uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            batchUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(nodeinfo.allocPoint).add(_allocPoint);\r\n        emit NodeSet(nodeinfo.allocPoint, _allocPoint);\r\n        nodeinfo.allocPoint = _allocPoint;\r\n\r\n    }\r\n\r\n    function updateFundParams(uint256 _fundStartAt, uint256 _fundFinishAt, uint256 _fundStartReleaseTs,\r\n        uint256 _maxFund, uint256 _maxFundPerAccount, uint256 _fundPrice, uint32 _fundReleaseDays) public onlyOwner {\r\n        fundStartTs = _fundStartAt;\r\n        fundFinishTs = _fundFinishAt;\r\n        fundStartReleaseTs = _fundStartReleaseTs;\r\n        maxFund = _maxFund;\r\n        maxFundPerAccount = _maxFundPerAccount;\r\n        fundPrice = _fundPrice;\r\n        fundReleaseDays = _fundReleaseDays;\r\n    }\r\n    function getFundParams() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        return (fundStartTs, fundFinishTs, fundStartReleaseTs, maxFund,\r\n            maxFundPerAccount, currentLockedFund, fundReleaseDays, fundPrice, poolstart);\r\n    }\r\n    function _teamTransfer(address sender, address recipient, uint256 amount) internal {\r\n        uint256 _amount = balanceOf(sender).sub(Locked[sender]);\r\n        require(_amount >= amount);\r\n        if (accountNodestatus[recipient]) { \r\n            updateNodeReward(); \r\n            accountNodeInfo[recipient].rewardPending = accountNodeInfo[recipient].rewardPending.add(accountNodeInfo[recipient].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18).sub(accountNodeInfo[recipient].rewardDebt));              \r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            nodeinfo.totalamount = nodeinfo.totalamount.add(amount);\r\n            accountNodeInfo[recipient].initAmount = accountNodeInfo[recipient].initAmount.add(amount);\r\n            accountNodeInfo[recipient].rewardDebt = accountNodeInfo[recipient].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n        }else{ \r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n    }\r\n    function _fromNodeTransfer(address sender, address recipient, uint256 amount) internal {\r\n        updateNodeReward();\r\n        uint256 _amount = balanceOf(sender).sub(accountNodeInfo[sender].lockedAmount); \r\n        require(_amount >= amount);\r\n        if (accountNodestatus[recipient]){\r\n            accountNodeInfo[sender].rewardPending = accountNodeInfo[sender].rewardPending.add(accountNodeInfo[sender].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18).sub(accountNodeInfo[sender].rewardDebt));\r\n            accountNodeInfo[recipient].rewardPending = accountNodeInfo[recipient].rewardPending.add(accountNodeInfo[recipient].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18).sub(accountNodeInfo[recipient].rewardDebt));              \r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            accountNodeInfo[recipient].initAmount = accountNodeInfo[recipient].initAmount.add(amount);\r\n            accountNodeInfo[recipient].rewardDebt = accountNodeInfo[recipient].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n            accountNodeInfo[sender].initAmount = accountNodeInfo[sender].initAmount.sub(amount);\r\n            accountNodeInfo[sender].rewardDebt = accountNodeInfo[sender].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n            if (accountNodeInfo[sender].initAmount < 5000 * BASE) {\r\n                accountNodestatus[sender] = false;\r\n                nodeinfo.totalamount = nodeinfo.totalamount.sub(accountNodeInfo[sender].initAmount);\r\n                accountNodeInfo[sender].initAmount = 0;\r\n                accountNodeInfo[sender].rewardDebt = accountNodeInfo[sender].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n            }\r\n        }else{\r\n            accountNodeInfo[sender].rewardPending = accountNodeInfo[sender].rewardPending.add(accountNodeInfo[sender].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18).sub(accountNodeInfo[sender].rewardDebt));\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            nodeinfo.totalamount = nodeinfo.totalamount.sub(amount);\r\n            accountNodeInfo[sender].initAmount = accountNodeInfo[sender].initAmount.sub(amount);\r\n            accountNodeInfo[sender].rewardDebt = accountNodeInfo[sender].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n            if (accountNodeInfo[sender].initAmount < 5000 * BASE) {\r\n                accountNodestatus[sender] = false;\r\n                nodeinfo.totalamount = nodeinfo.totalamount.sub(accountNodeInfo[sender].initAmount);\r\n                accountNodeInfo[sender].initAmount = 0;\r\n                accountNodeInfo[sender].rewardDebt = accountNodeInfo[sender].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n            }\r\n        }\r\n    }\r\n    function _toNodeTransfer(address sender, address recipient, uint256 amount) internal {\r\n            updateNodeReward();\r\n            accountNodeInfo[recipient].rewardPending = accountNodeInfo[recipient].rewardPending.add(accountNodeInfo[recipient].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18).sub(accountNodeInfo[recipient].rewardDebt));             \r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            nodeinfo.totalamount = nodeinfo.totalamount.add(amount);\r\n            accountNodeInfo[recipient].initAmount = accountNodeInfo[recipient].initAmount.add(amount);\r\n            accountNodeInfo[recipient].rewardDebt = accountNodeInfo[recipient].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override{\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if (sender == TeamHolder) { \r\n            _teamTransfer(sender, recipient, amount);\r\n            emit Transfer(sender, recipient, amount);\r\n            return; \r\n        }\r\n        if (accountNodestatus[sender]) {\r\n            _fromNodeTransfer(sender, recipient, amount);\r\n            emit Transfer(sender, recipient, amount);\r\n            return;\r\n\r\n        }\r\n        if (accountNodestatus[recipient]) { \r\n            _toNodeTransfer(sender, recipient, amount);\r\n            emit Transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n     \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        \r\n    }\r\n\r\n    function _transferlock(address _TeamHolder, uint256 amount) internal {\r\n        _transfer(address(this), _TeamHolder, amount); // \r\n        Locked[_TeamHolder] = amount;\r\n        emit Lock(_TeamHolder, amount);\r\n    }\r\n\r\n    function unlockTeam() public onlyOwner {\r\n        _unlockTeam();\r\n    }\r\n\r\n    function _unlockTeam() internal {\r\n        uint256 _amount = getAvailableTeamReward();\r\n        Locked[TeamHolder] = Locked[TeamHolder].sub(_amount);\r\n        lastTeamReleaseTs = block.timestamp;\r\n        emit unLock(TeamHolder, _amount);\r\n    }\r\n\r\n    function getAvailableTeamReward() public view returns (uint256)  {\r\n        if(block.timestamp <= lastTeamReleaseTs) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 _days = (block.timestamp - lastTeamReleaseTs) / 1 days;\r\n        if(_days > 0) {\r\n            uint256 _releaseByDay = _days * teamRewardPerDay;\r\n            return Locked[TeamHolder] > _releaseByDay ? _releaseByDay : Locked[TeamHolder];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //add node\r\n    function addNodeAdmin(address account) public {\r\n        require(msg.sender == TeamHolder, \"Team only\");\r\n        require(account != address(this));\r\n        require(account != TeamHolder);\r\n        require(!accountNodestatus[account]);\r\n        require(accountNodeInfo[account].lockedAmount == 0, \"There are unreleased tokens\");\r\n        safeBLWTransfer(account, nodeRequireAmount);\r\n        accountNodestatus[account] = true;\r\n        accountNodeInfo[account].initAmount = balanceOf(account);\r\n        accountNodeInfo[account].lockedAmount = nodeRequireAmount;\r\n        accountNodeInfo[account].lastUnlockTs = block.timestamp > nodeStartReleaseTs ? block.timestamp : nodeStartReleaseTs;\r\n        accountNodeInfo[account].rewardPending = 0;\r\n        accountNodeInfo[account].rewardDebt = accountNodeInfo[account].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n        nodeinfo.totalamount = nodeinfo.totalamount.add(balanceOf(account));\r\n\r\n    }\r\n\r\n    function unlockNodeAmount() public {\r\n        require(block.timestamp >= nodeStartReleaseTs, \"\");\r\n        uint256 _amount = getAvailableNodeAmount(msg.sender);\r\n        require(_amount > 0, \"no available fund\");\r\n        accountNodeInfo[msg.sender].lockedAmount = accountNodeInfo[msg.sender].lockedAmount.sub(_amount);\r\n        accountNodeInfo[msg.sender].lastUnlockTs = block.timestamp;\r\n\r\n        emit UnlockNodeBalance(msg.sender, _amount);\r\n    }\r\n\r\n    function getAvailableNodeAmount(address account) public view returns (uint256) {\r\n        if(accountNodeInfo[account].lockedAmount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if(block.timestamp <= nodeStartReleaseTs || block.timestamp <= accountNodeInfo[account].lastUnlockTs) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 _last_ts = nodeStartReleaseTs > accountNodeInfo[account].lastUnlockTs ? nodeStartReleaseTs : accountNodeInfo[account].lastUnlockTs;\r\n        uint256 _days = (block.timestamp - _last_ts) / DAY1;\r\n\r\n        if(_days > 0) {\r\n            uint256 _releaseByDay = nodeRequireAmount.mul(_days).div(nodeReleaseDays);\r\n            return accountNodeInfo[account].lockedAmount > _releaseByDay ? _releaseByDay : accountNodeInfo[account].lockedAmount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //update node reward\r\n    function updateNodeReward() internal {\r\n        if (block.number <= nodeinfo.lastRewardBlock) {\r\n            return;\r\n        }\r\n        if (nodeinfo.totalamount == 0) {\r\n            nodeinfo.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(nodeinfo.lastRewardBlock, block.number);\r\n        uint256 BLWReward = multiplier\r\n            .mul(BLWPerBlock)\r\n            .mul(nodeinfo.allocPoint)\r\n            .div(totalAllocPoint);\r\n        \r\n        \r\n        nodeinfo.accBLWPerShare = nodeinfo.accBLWPerShare.add(BLWReward.mul(1e18).div(nodeinfo.totalamount));\r\n\r\n        nodeinfo.lastRewardBlock = block.number;  \r\n    }\r\n    // query node reward\r\n    function getNodeReward() public view returns(uint256) {\r\n        uint256 accBLWPerShare = nodeinfo.accBLWPerShare;\r\n        uint256 lpSupply = nodeinfo.totalamount;\r\n        if (block.number > nodeinfo.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(\r\n                nodeinfo.lastRewardBlock,\r\n                block.number\r\n            );\r\n            uint256 BLWReward = multiplier\r\n                .mul(BLWPerBlock)\r\n                .mul(nodeinfo.allocPoint)\r\n                .div(totalAllocPoint);\r\n            accBLWPerShare = accBLWPerShare.add(\r\n                BLWReward.mul(1e18).div(lpSupply)\r\n            );\r\n        }\r\n\r\n        uint256 Pending = accountNodeInfo[msg.sender].rewardPending.add(accountNodeInfo[msg.sender].initAmount.mul(accBLWPerShare).div(1e18).sub(accountNodeInfo[msg.sender].rewardDebt));\r\n        return Pending;\r\n    }\r\n\r\n    //withdraw node reward\r\n    function takeNodeReward() public {\r\n        updateNodeReward();\r\n        uint256 Pending = accountNodeInfo[msg.sender].rewardPending.add(accountNodeInfo[msg.sender].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18).sub(accountNodeInfo[msg.sender].rewardDebt));\r\n        require(Pending > 0, \"no reward\");\r\n        accountNodeInfo[msg.sender].rewardPending = 0;\r\n        accountNodeInfo[msg.sender].rewardDebt = accountNodeInfo[msg.sender].initAmount.mul(nodeinfo.accBLWPerShare).div(1e18);\r\n        safeBLWTransfer(msg.sender, Pending);\r\n    }\r\n\r\n\r\n    function checkRepeatedPool(IERC20 _lpToken) internal view {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            if (poolInfo[pid].lpToken == _lpToken) {\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n    //add pool\r\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\r\n        checkRepeatedPool(_lpToken);\r\n\r\n        if (_withUpdate) {\r\n            batchUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                totalamount: 0,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accBLWPerShare: 0\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner validatePool(_pid) {\r\n        if (_withUpdate) {\r\n            batchUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        emit Set(_pid, _allocPoint, _withUpdate);\r\n    }\r\n\r\n\r\n\r\n    function batchUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n        emit BatchUpdatePools();\r\n    }\r\n    function getMultiplier(uint256 _from, uint256 _to) internal pure returns (uint256) {\r\n        return _to.sub(_from);\r\n    \r\n    }\r\n    function pendingBLW(uint256 _pid, address _user)external view validatePool(_pid) returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accBLWPerShare = pool.accBLWPerShare;\r\n        uint256 lpSupply = pool.totalamount;\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(\r\n                pool.lastRewardBlock,\r\n                block.number\r\n            );\r\n            uint256 BLWReward = multiplier\r\n                .mul(BLWPerBlock)\r\n                .mul(pool.allocPoint)\r\n                .div(totalAllocPoint);\r\n            accBLWPerShare = accBLWPerShare.add(\r\n                BLWReward.mul(1e18).div(lpSupply)\r\n            );\r\n        }\r\n        return user.pending.add(user.amount.mul(accBLWPerShare).div(1e18)).sub(user.rewardDebt);\r\n    }\r\n\r\n    function updatePool(uint256 _pid) public validatePool(_pid) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.totalamount;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 BLWReward = multiplier\r\n            .mul(BLWPerBlock)\r\n            .mul(pool.allocPoint)\r\n            .div(totalAllocPoint);\r\n\r\n        pool.accBLWPerShare = pool.accBLWPerShare.add(\r\n            BLWReward.mul(1e18).div(lpSupply)\r\n        );\r\n      \r\n        pool.lastRewardBlock = block.number;\r\n\r\n    }\r\n    //deposit\r\n    function deposit(uint256 _pid, uint256 _amount) public validatePool(_pid) payable {\r\n        if (_pid == 0 || _pid == 1) {\r\n            require(block.timestamp >= poolstart, \"pool no start\");\r\n        }\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accBLWPerShare).div(1e18).sub(user.rewardDebt);\r\n            user.pending = user.pending.add(pending);\r\n        }\r\n        if (address(pool.lpToken) == address(0)) {\r\n            _amount = msg.value;\r\n        } else {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        }\r\n        pool.totalamount = pool.totalamount.add(_amount);\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accBLWPerShare).div(1e18);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) public validatePool(_pid){\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (funds[msg.sender].Locked > 0 && _pid == 2){\r\n            _unlockFund();\r\n            require(user.amount.sub(funds[msg.sender].Locked) >= _amount);\r\n        }\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        pool.totalamount = pool.totalamount.sub(_amount);\r\n        uint256 pending = user.amount.mul(pool.accBLWPerShare).div(1e18).sub(user.rewardDebt);\r\n        user.pending = user.pending.add(pending);\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accBLWPerShare).div(1e18);\r\n        if (address(pool.lpToken) == address(0)) {\r\n            msg.sender.transfer(_amount);\r\n        } else {\r\n            pool.lpToken.safeTransfer(msg.sender, _amount);\r\n        }\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function reclaimStakingReward(uint256 _pid) public validatePool(_pid) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        uint256 pending = user.pending.add(user.amount.mul(pool.accBLWPerShare).div(1e18).sub(user.rewardDebt));\r\n        if (pending > 0) {\r\n            safeBLWTransfer(msg.sender, pending);\r\n        }\r\n        user.pending = 0;\r\n        user.rewardDebt = user.amount.mul(pool.accBLWPerShare).div(1e18);\r\n        emit ReclaimStakingReward(msg.sender, pending);\r\n    }\r\n\r\n    function safeBLWTransfer(address _to, uint256 _amount) internal {\r\n        PoolInfo storage pool = poolInfo[2];\r\n        uint256 BLWBal = balanceOf(address(this)).sub(pool.totalamount);\r\n        if (_amount > BLWBal) {\r\n            _transfer(address(this),_to, BLWBal);\r\n        } else {\r\n            _transfer(address(this), _to, _amount);\r\n        }\r\n    }\r\n\r\n    function lockFund(uint256 amount) public {\r\n        require(block.timestamp >= fundStartTs, \"wait\");\r\n        require(block.timestamp <= fundFinishTs, \"it is over\");\r\n        currentLockedFund = currentLockedFund.add(amount);\r\n        require(currentLockedFund <= maxFund, \"fund end\");\r\n\r\n        uint256 _fundTokenAmount = getRequireFundToken(amount);\r\n        require(_fundTokenAmount > 0, \"amount error\");\r\n\r\n        uint256 _newAmount = funds[msg.sender].initFund.add(amount);\r\n        require(_newAmount <= maxFundPerAccount, \"reach max limit\");\r\n\r\n        funds[msg.sender].initFund = funds[msg.sender].initFund.add(amount);\r\n        funds[msg.sender].Locked = funds[msg.sender].Locked.add(amount);\r\n        funds[msg.sender].lastReleaseTs = block.timestamp > fundStartReleaseTs ? block.timestamp : fundStartReleaseTs;\r\n\r\n        IERC20 erc20 = IERC20(fundToken); \r\n        erc20.safeTransferFrom(msg.sender, address(this), _fundTokenAmount);\r\n        erc20.safeTransfer(TeamHolder, _fundTokenAmount);\r\n        PoolInfo storage pool = poolInfo[2];\r\n        UserInfo storage user = userInfo[2][msg.sender];\r\n        updatePool(2);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accBLWPerShare).div(1e18).sub(user.rewardDebt);\r\n            safeBLWTransfer(msg.sender, pending);\r\n        }\r\n        pool.totalamount = pool.totalamount.add(amount);\r\n        user.amount = user.amount.add(amount);\r\n        user.rewardDebt = user.amount.mul(pool.accBLWPerShare).div(1e18);\r\n        emit Deposit(msg.sender, 2, amount);\r\n        emit LockFund(msg.sender, amount);\r\n    }\r\n\r\n    function getRequireFundToken(uint256 amount) public view returns (uint256) {\r\n        return amount.mul(fundPrice).div(BASE);\r\n    }\r\n\r\n    function unlockFund() public {\r\n        uint256 _amount = getAvailableFund(msg.sender);\r\n        withdraw(2,_amount);\r\n    }\r\n\r\n    function _unlockFund() internal {\r\n        require(block.timestamp >= fundStartReleaseTs, \"wait start\");\r\n        uint256 _amount = getAvailableFund(msg.sender);\r\n        require(_amount > 0);\r\n        currentLockedFund = currentLockedFund.sub(_amount); \r\n        funds[msg.sender].Locked = funds[msg.sender].Locked.sub(_amount);\r\n        funds[msg.sender].lastReleaseTs = block.timestamp; \r\n    }\r\n\r\n    function getAvailableFund(address account) public view returns (uint256) {\r\n        if(funds[account].initFund == 0) {\r\n            return 0;\r\n        }\r\n        if(block.timestamp <= fundStartReleaseTs || block.timestamp < funds[account].lastReleaseTs) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 _days = (block.timestamp - funds[account].lastReleaseTs) / DAY1;\r\n\r\n        if(_days > 0) {\r\n            uint256 _releaseByDay = funds[account].initFund.mul(_days).div(fundReleaseDays);\r\n            return funds[account].Locked > _releaseByDay ? _releaseByDay : funds[account].Locked;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    function setinit() public onlyOwner {\r\n        init = true;\r\n    }\r\n\r\n    //import historical data\r\n    function batchlockFund(address[] memory _to, uint256[] memory _value) onlyOwner public {\r\n        require(!init);\r\n        require(_to.length > 0);\r\n        require(_to.length == _value.length);\r\n        uint256 sum = 0;\r\n        address account;\r\n        uint256 amount;  \r\n        for(uint256 i = 0; i < _to.length; i++){\r\n            amount = _value[i];\r\n            account = _to[i];\r\n            sum = sum.add(amount);    \r\n            funds[account].initFund = amount;\r\n            funds[account].Locked = amount;\r\n            funds[account].lastReleaseTs = fundStartReleaseTs;        \r\n            UserInfo storage user = userInfo[2][account];\r\n            user.amount = user.amount.add(amount);\r\n            emit Deposit(account, 2, amount);\r\n            emit LockFund(account, amount);\r\n        }\r\n        currentLockedFund = currentLockedFund.add(sum);\r\n        require(currentLockedFund <= maxFund, \"fund end\");\r\n        PoolInfo storage pool = poolInfo[2];\r\n        pool.totalamount = pool.totalamount.add(sum);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BLWPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BatchUpdatePools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldallocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newallocPoint\",\"type\":\"uint256\"}],\"name\":\"NodeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimStakingReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockNodeBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unLock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLWPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountNodeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountNodestatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addNodeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchlockFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLockedFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAvailableFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAvailableNodeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableTeamReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRequireFundToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getpool\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBLWPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct BlueWhale.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTeamReleaseTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeReleaseDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeRequireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeStartReleaseTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBLWPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBLW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBLWPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"reclaimStakingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setNodeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setinit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeNodeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamRewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockNodeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundStartAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundFinishAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundStartReleaseTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFundPerAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_fundReleaseDays\",\"type\":\"uint32\"}],\"name\":\"updateFundParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BlueWhale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000003258f4a509e680bf95db88472f453bf8214e23db000000000000000000000000000000000000000000000000000000005f4f5f10000000000000000000000000000000000000000000000000000000005faead800000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000ab91b8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f1783b1de76aaa5eea985d170a68ffd4452b466d20d29387a1acdc4fbf94db40"}]}