{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface ITokenGeyserManager {\r\n    /**\r\n        @dev Retrieves total rewards earned for a specific staking token\r\n        @param token - address of the ERC20 token\r\n    */\r\n    function getEarned(address token) external view returns (uint256);\r\n\r\n    /**\r\n        @dev Retrieves staked amount for a specific token address\r\n        @param token - address of the ERC20 token\r\n    */\r\n    function getStake(address token) external view returns (uint256);\r\n\r\n    /**\r\n        @dev Retrieves total rewards earned for all the staking tokens\r\n    */\r\n    function getEarnings()\r\n        external\r\n        view\r\n        returns (address[] memory, uint256[] memory);\r\n\r\n    /**\r\n        @dev Retrieves all stakes for sender\r\n     */\r\n    function getStakes()\r\n        external\r\n        view\r\n        returns (address[] memory, uint256[] memory);\r\n\r\n    /**\r\n        @dev Stakes all tokens sent\r\n        @param tokens - array of tokens' addresses you want to stake\r\n        @param amounts - stake amount you want for each token\r\n     */\r\n    function stake(\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        int256 nftId\r\n    ) external returns (bool);\r\n\r\n    /**\r\n        @dev Unstakes all tokens sent\r\n        @param tokens - array of tokens' addresses you want to unstake\r\n        @param amounts - unstake amount you want for each token\r\n     */\r\n    function unstake(address[] calldata tokens, uint256[] calldata amounts)\r\n        external;\r\n\r\n    /**\r\n        @dev Retrives current user's rewards amount\r\n        @param tokens - array of tokens' addresses you want to unstake\r\n        @param amounts - unstake amount you want for each token\r\n     */\r\n    function unstakeQuery(\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts\r\n    ) external returns (address[] memory, uint256[] memory);\r\n\r\n    /**\r\n        @dev Adds a new geyser in the team\r\n        @param token - address of the staking token for which the geyser was created\r\n        @param geyser - address of the geyser\r\n     */\r\n    function addGeyser(address token, address geyser) external returns (bool);\r\n\r\n    event Staked(address indexed sender, address indexed token, uint256 amount);\r\n    event Unstaked(\r\n        address indexed sender,\r\n        address indexed token,\r\n        uint256 amount\r\n    );\r\n\r\n    event GeyserAdded(\r\n        address indexed sender,\r\n        address indexed geyser,\r\n        address token\r\n    );\r\n    event GeyserManagerCreated(\r\n        address indexed sender,\r\n        address indexed geyserManager\r\n    );\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title Staking interface, as defined by EIP-900.\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ninterface IStaking {\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n\r\n    function unstake(address staker, uint256 amount, bytes calldata data) external;\r\n\r\n    function totalStakedFor(address addr) external view returns (uint256);\r\n\r\n    function totalStaked() external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function supportsHistory() external pure returns (bool);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title Staking interface, as defined by EIP-900.\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ninterface IStakeWithNFT {\r\n    function stake(\r\n        address staker,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        int256 nftId\r\n    ) external;\r\n\r\n    function stakeFor(\r\n        address staker,\r\n        address user,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        int256 nftId\r\n    ) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title A simple holder of tokens.\r\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\r\n * needs to hold multiple distinct pools of the same token.\r\n */\r\ncontract TokenPool is Ownable {\r\n    IERC20 public token;\r\n    bool private _isTokenRescuable;\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n        _isTokenRescuable = false;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function setRescuable(bool rescuable) public onlyOwner {\r\n        _isTokenRescuable = rescuable;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return token.transfer(to, value);\r\n    }\r\n\r\n    function rescueFunds(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner returns (bool) {\r\n        if (!_isTokenRescuable) {\r\n            require(\r\n                address(token) != tokenToRescue,\r\n                \"TokenPool: Cannot claim token held by the contract\"\r\n            );\r\n        }\r\n\r\n        return IERC20(tokenToRescue).transfer(to, amount);\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = byte(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from holder address to their (enumerable) set of owned tokens\r\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\r\n\r\n    // Enumerable mapping from token ids to their owners\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping (uint256 => string) private _tokenURIs;\r\n\r\n    // Base URI\r\n    string private _baseURI;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n     *     bytes4(keccak256('name()')) == 0x06fdde03\r\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n     *\r\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(_baseURI).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(_baseURI, _tokenURI));\r\n        }\r\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\r\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\r\n    * to the token ID if no specific URI is set for that token ID.\r\n    */\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     d*\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n\r\n        _holderTokens[owner].remove(tokenId);\r\n\r\n        _tokenOwners.remove(tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the base URI for all token IDs. It is\r\n     * automatically added as a prefix to the value returned in {tokenURI},\r\n     * or to the token ID if {tokenURI} is empty.\r\n     */\r\n    function _setBaseURI(string memory baseURI_) internal virtual {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev ERC721 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC721Pausable is ERC721, Pausable {\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\n/*\r\n    uint256 public constant socialNftIdentifier = uint256(1);\r\n    uint256 public constant rareNftIdentifier = uint256(2);\r\n    uint256 public constant epicNftIdentifier = uint256(4);\r\n    uint256 public constant legendaryNftIdentifier = uint256(8);\r\n*/\r\ncontract WarpNFT is Ownable, ERC721Pausable {\r\n    uint256 public idTracker;\r\n\r\n    // converts id -> token type\r\n    mapping(uint256 => uint256) public tokenType;\r\n\r\n    /**\r\n    @notice the constructor function is fired only once during contract deployment\r\n    @dev assuming all NFT URI metadata is based on a URL he baseURI would be something like https://\r\n    **/\r\n    constructor() public ERC721(\"Warp Finance\", \"WNFT\") {\r\n        idTracker = 0;\r\n    }\r\n\r\n    /**\r\n    @notice mintNewNFT allows the owner of this contract to mint an input address a newNFT\r\n    @param _to is the address the NFT is being minted to\r\n    **/\r\n    function mintNewNFT(\r\n        address _to,\r\n        uint256 _type,\r\n        string memory _tokenURI\r\n    ) public onlyOwner {\r\n        _safeMint(_to, idTracker);\r\n        _setTokenURI(idTracker, _tokenURI);\r\n        tokenType[idTracker] = _type;\r\n        idTracker++;\r\n    }\r\n\r\n    function burn(uint256 tokenId) public onlyOwner {\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string memory _tokenURI)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _setTokenURI(tokenId, _tokenURI);\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI_) public onlyOwner {\r\n        _setBaseURI(baseURI_);\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title Token Geyser\r\n * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\r\n *      Compound and Uniswap.\r\n *\r\n *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\r\n *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\r\n *      claimed by users.\r\n *\r\n *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\r\n *      is a function of the number of tokens deposited as well as the length of time deposited.\r\n *      Specifically, a user's share of the currently-unlocked pool equals their \"deposit-seconds\"\r\n *      divided by the global \"deposit-seconds\". This aligns the new token distribution with long\r\n *      term supporters of the project, addressing one of the major drawbacks of simple airdrops.\r\n *\r\n *      More background and motivation available at:\r\n *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\r\n */\r\ncontract TokenGeyser is IStaking, IStakeWithNFT, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\r\n    // amount: Unlocked tokens, total: Total locked tokens\r\n    event TokensUnlocked(uint256 amount, uint256 total);\r\n\r\n    TokenPool private _stakingPool;\r\n    TokenPool private _unlockedPool;\r\n    TokenPool private _lockedPool;\r\n\r\n    //\r\n    // Time-bonus params\r\n    //\r\n    uint256 public bonusDecimals = 2;\r\n    uint256 public startBonus = 0;\r\n    uint256 public bonusPeriodSec = 0;\r\n\r\n    //\r\n    // Global accounting state\r\n    //\r\n    uint256 public totalLockedShares = 0;\r\n    uint256 public totalStakingShares = 0;\r\n    uint256 private _totalStakingShareSeconds = 0;\r\n    uint256 private _lastAccountingTimestampSec = now;\r\n    uint256 private _maxUnlockSchedules = 0;\r\n    uint256 private _initialSharesPerToken = 0;\r\n\r\n    //\r\n    // User accounting state\r\n    //\r\n    // Represents a single stake for a user. A user may have multiple.\r\n    struct Stake {\r\n        uint256 stakingShares;\r\n        uint256 timestampSec;\r\n    }\r\n\r\n    // Caches aggregated values from the User->Stake[] map to save computation.\r\n    // If lastAccountingTimestampSec is 0, there's no entry for that user.\r\n    struct UserTotals {\r\n        uint256 stakingShares;\r\n        uint256 stakingShareSeconds;\r\n        uint256 lastAccountingTimestampSec;\r\n    }\r\n\r\n    // Aggregated staking values per user\r\n    mapping(address => UserTotals) private _userTotals;\r\n\r\n    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\r\n    mapping(address => Stake[]) private _userStakes;\r\n\r\n\r\n    //\r\n    // Locked/Unlocked Accounting state\r\n    //\r\n    struct UnlockSchedule {\r\n        uint256 initialLockedShares;\r\n        uint256 unlockedShares;\r\n        uint256 lastUnlockTimestampSec;\r\n        uint256 endAtSec;\r\n        uint256 durationSec;\r\n    }\r\n\r\n    UnlockSchedule[] public unlockSchedules;\r\n\r\n    WarpNFT public _warpNFT;\r\n    address public geyserManager;\r\n    mapping(address => uint256) public originalAmounts;\r\n    mapping(address => uint256) public extraAmounts;\r\n    uint256 public totalExtra;\r\n    mapping(address => uint256) userEarnings;\r\n\r\n    /**\r\n     * @param stakingToken The token users deposit as stake.\r\n     * @param distributionToken The token users receive as they unstake.\r\n     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\r\n     * @param startBonus_ Starting time bonus\r\n     *                    e.g. 25% means user gets 25% of max distribution tokens.\r\n     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\r\n     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\r\n     * @param bonusDecimals_ The number of decimals for shares\r\n     */\r\n    constructor(\r\n        IERC20 stakingToken,\r\n        IERC20 distributionToken,\r\n        uint256 maxUnlockSchedules,\r\n        uint256 startBonus_,\r\n        uint256 bonusPeriodSec_,\r\n        uint256 initialSharesPerToken,\r\n        uint256 bonusDecimals_,\r\n        address warpNFT,\r\n        address managerAddress\r\n    ) public {\r\n        // The start bonus must be some fraction of the max. (i.e. <= 100%)\r\n        require(\r\n            startBonus_ <= 10**bonusDecimals_,\r\n            \"TokenGeyser: start bonus too high\"\r\n        );\r\n        // If no period is desired, instead set startBonus = 100%\r\n        // and bonusPeriod to a small value like 1sec.\r\n        require(bonusPeriodSec_ != 0, \"TokenGeyser: bonus period is zero\");\r\n        require(\r\n            initialSharesPerToken > 0,\r\n            \"TokenGeyser: initialSharesPerToken is zero\"\r\n        );\r\n\r\n        require(bonusDecimals_ > 0, \"TokenGeyser: bonusDecimals_ is zero\");\r\n\r\n        _stakingPool = new TokenPool(stakingToken);\r\n        _unlockedPool = new TokenPool(distributionToken);\r\n        _lockedPool = new TokenPool(distributionToken);\r\n        _unlockedPool.setRescuable(true);\r\n\r\n        geyserManager = managerAddress;\r\n        startBonus = startBonus_;\r\n        bonusDecimals = bonusDecimals_;\r\n        bonusPeriodSec = bonusPeriodSec_;\r\n        _maxUnlockSchedules = maxUnlockSchedules;\r\n        _initialSharesPerToken = initialSharesPerToken;\r\n        _warpNFT = WarpNFT(warpNFT);\r\n    }\r\n\r\n    /**\r\n     * @return Total earnings for a user\r\n    */\r\n    function getEarnings(address user) public view returns (uint256) {\r\n        return userEarnings[user];\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue rewards\r\n     */\r\n    function rescueRewards(address user) external onlyOwner {\r\n        require(totalUnlocked() > 0, \"TokenGeyser: Nothing to rescue\");\r\n        require(\r\n            _unlockedPool.transfer(user, _unlockedPool.balance()),\r\n            \"TokenGeyser: rescue rewards from rewards pool failed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return The token users deposit as stake.\r\n     */\r\n    function getStakingToken() public view returns (IERC20) {\r\n        return _stakingPool.token();\r\n    }\r\n\r\n    /**\r\n     * @return The token users receive as they unstake.\r\n     */\r\n    function getDistributionToken() public view returns (IERC20) {\r\n        assert(_unlockedPool.token() == _lockedPool.token());\r\n        return _unlockedPool.token();\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the user.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param data Not used.\r\n     */\r\n    function stake(\r\n        address staker,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        int256 nftId\r\n    ) external override {\r\n        require(\r\n            geyserManager == msg.sender,\r\n            \"This method can be called by the geyser manager only\"\r\n        );\r\n        _stakeFor(staker, staker, amount, nftId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\r\n     * @param user User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param data Not used.\r\n     */\r\n    function stakeFor(\r\n        address staker,\r\n        address user,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        int256 nftId\r\n    ) external override onlyOwner {\r\n        require(\r\n            geyserManager == msg.sender,\r\n            \"This method can be called by the geyser manager only\"\r\n        );\r\n        _stakeFor(staker, user, amount, nftId);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the boost you get for a specific NFT\r\n     * @param beneficiary The address who receives the bonus\r\n     * @param amount The amount for which the bonus is calculated\r\n     * @param nftId The NFT identifier\r\n     */\r\n    function getNftBoost(\r\n        address beneficiary,\r\n        uint256 amount,\r\n        int256 nftId\r\n    ) public view returns (uint256) {\r\n        if (nftId < 0) return 0;\r\n        if (_warpNFT.ownerOf(uint256(nftId)) != beneficiary) return 0;\r\n\r\n        uint256 nftType = _warpNFT.tokenType(uint256(nftId));\r\n        if (nftType == uint256(1)) return 0;\r\n\r\n        // 1 | Social - no boost\r\n        // 2 | Rare - 15% boost\r\n        // 4 | Epic - 75% boost\r\n        // 8 | Legendary - 150% boost\r\n\r\n        uint256 bonus = 1;\r\n\r\n        if (nftType == uint256(2)) {\r\n            bonus = 15;\r\n        }\r\n        if (nftType == uint256(4)) {\r\n            bonus = 75;\r\n        }\r\n        if (nftType == uint256(8)) {\r\n            bonus = 150;\r\n        }\r\n\r\n        uint256 result = (amount * bonus) / 100;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Private implementation of staking methods.\r\n     * @param staker User address who deposits tokens to stake.\r\n     * @param beneficiary User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     */\r\n    function _stakeFor(\r\n        address staker,\r\n        address beneficiary,\r\n        uint256 amount,\r\n        int256 nftId\r\n    ) private {\r\n        require(amount > 0, \"TokenGeyser: stake amount is zero\");\r\n        require(\r\n            beneficiary != address(0),\r\n            \"TokenGeyser: beneficiary is zero address\"\r\n        );\r\n        require(\r\n            totalStakingShares == 0 || totalStaked() > 0,\r\n            \"TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do\"\r\n        );\r\n        uint256 sentAmount = 0;\r\n        sentAmount += amount;\r\n\r\n        uint256 extra = getNftBoost(beneficiary, amount, nftId);\r\n        originalAmounts[beneficiary] += amount;\r\n        extraAmounts[beneficiary] += extra;\r\n        amount += extra;\r\n        uint256 mintedStakingShares =\r\n            (totalStakingShares > 0)\r\n                ? totalStakingShares.mul(amount).div(totalStaked())\r\n                : amount.mul(_initialSharesPerToken);\r\n        totalExtra += extra;\r\n\r\n        require(\r\n            mintedStakingShares > 0,\r\n            \"TokenGeyser: Stake amount is too small\"\r\n        );\r\n\r\n        updateAccounting(beneficiary);\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[beneficiary];\r\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\r\n        totals.lastAccountingTimestampSec = now;\r\n\r\n        Stake memory newStake = Stake(mintedStakingShares, now);\r\n        _userStakes[beneficiary].push(newStake);\r\n\r\n        // 2. Global Accounting\r\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\r\n        // Already set in updateAccounting()\r\n        // _lastAccountingTimestampSec = now;\r\n\r\n        // interactions\r\n        require(\r\n            _stakingPool.token().transferFrom(\r\n                staker,\r\n                address(_stakingPool),\r\n                sentAmount\r\n            ),\r\n            \"TokenGeyser: transfer into staking pool failed\"\r\n        );\r\n\r\n        emit Staked(beneficiary, sentAmount, totalStakedFor(beneficiary), \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @param data Not used.\r\n     */\r\n    function unstake(address staker, uint256 amount, bytes calldata data) external override {\r\n        require(\r\n            geyserManager == msg.sender,\r\n            \"This method can be called by the geyser manager only\"\r\n        );\r\n        _unstake(staker, amount);\r\n    }\r\n\r\n    /**\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens that would be rewarded.\r\n     */\r\n    function unstakeQuery(address staker, uint256 amount) public returns (uint256) {\r\n        require(\r\n            geyserManager == msg.sender,\r\n            \"This method can be called by the geyser manager only\"\r\n        );\r\n        return _unstake(staker, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens rewarded.\r\n     */\r\n    function _unstake(address user, uint256 amount) private returns (uint256) {\r\n        updateAccounting(user);\r\n\r\n        // checks\r\n        require(amount == 0, \"TokenGeyser: only full unstake is allowed\");\r\n\r\n        amount = originalAmounts[user] + extraAmounts[user];\r\n        uint256 stakingSharesToBurn =\r\n            totalStakingShares.mul(amount).div(totalStaked());\r\n\r\n        require(\r\n            stakingSharesToBurn > 0,\r\n            \"TokenGeyser: Unable to unstake amount this small\"\r\n        );\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[user];\r\n        Stake[] storage accountStakes = _userStakes[user];\r\n\r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingShareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        uint256 rewardAmount = 0;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\r\n            uint256 newStakingShareSecondsToBurn = 0;\r\n\r\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\r\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\r\n                    stakeTimeSec\r\n                );\r\n                rewardAmount = computeNewReward(\r\n                    rewardAmount,\r\n                    newStakingShareSecondsToBurn,\r\n                    stakeTimeSec\r\n                );\r\n\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\r\n                    newStakingShareSecondsToBurn\r\n                );\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(\r\n                    lastStake.stakingShares\r\n                );\r\n                accountStakes.pop();\r\n            } else {\r\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\r\n                    stakeTimeSec\r\n                );\r\n                rewardAmount = computeNewReward(\r\n                    rewardAmount,\r\n                    newStakingShareSecondsToBurn,\r\n                    stakeTimeSec\r\n                );\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\r\n                    newStakingShareSecondsToBurn\r\n                );\r\n                lastStake.stakingShares = lastStake.stakingShares.sub(\r\n                    sharesLeftToBurn\r\n                );\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\r\n            stakingShareSecondsToBurn\r\n        );\r\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\r\n        // Already set in updateAccounting\r\n        // totals.lastAccountingTimestampSec = now;\r\n\r\n        // 2. Global Accounting\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\r\n            stakingShareSecondsToBurn\r\n        );\r\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\r\n        // Already set in updateAccounting\r\n        // _lastAccountingTimestampSec = now;\r\n\r\n        // interactions\r\n        require(\r\n            _stakingPool.transfer(user, originalAmounts[user]),\r\n            \"TokenGeyser: transfer out of staking pool failed\"\r\n        );\r\n\r\n        //in case rescueRewards was called, there are no rewards to be transfered\r\n        if (totalUnlocked() >= rewardAmount) {\r\n            require(\r\n                _unlockedPool.transfer(user, rewardAmount),\r\n                \"TokenGeyser: transfer out of unlocked pool failed\"\r\n            );\r\n            emit TokensClaimed(user, rewardAmount);\r\n\r\n            userEarnings[user] += rewardAmount;\r\n        }\r\n        \r\n\r\n        emit Unstaked(user, amount, totalStakedFor(user), \"\");\r\n\r\n        require(\r\n            totalStakingShares == 0 || totalStaked() > 0,\r\n            \"TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do\"\r\n        );\r\n\r\n        totalExtra -= extraAmounts[user];\r\n        originalAmounts[user] = 0;\r\n        extraAmounts[user] = 0;\r\n\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\r\n     *      encourage long-term deposits instead of constant unstake/restakes.\r\n     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\r\n     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\r\n     * @param currentRewardTokens The current number of distribution tokens already alotted for this\r\n     *                            unstake op. Any bonuses are already applied.\r\n     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\r\n     *                            distribution tokens.\r\n     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\r\n     *                     the time-bonus.\r\n     * @return Updated amount of distribution tokens to award, with any bonus included on the\r\n     *         newly added tokens.\r\n     */\r\n    function computeNewReward(\r\n        uint256 currentRewardTokens,\r\n        uint256 stakingShareSeconds,\r\n        uint256 stakeTimeSec\r\n    ) private view returns (uint256) {\r\n        uint256 newRewardTokens =\r\n            totalUnlocked().mul(stakingShareSeconds).div(\r\n                _totalStakingShareSeconds\r\n            );\r\n\r\n        if (stakeTimeSec >= bonusPeriodSec) {\r\n            return currentRewardTokens.add(newRewardTokens);\r\n        }\r\n\r\n        uint256 oneHundredPct = 10**bonusDecimals;\r\n        uint256 bonusedReward =\r\n            startBonus\r\n                .add(\r\n                oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(\r\n                    bonusPeriodSec\r\n                )\r\n            )\r\n                .mul(newRewardTokens)\r\n                .div(oneHundredPct);\r\n\r\n        return currentRewardTokens.add(bonusedReward);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param addr The user to look up staking information for.\r\n     * @return The number of staking tokens deposited for addr.\r\n     */\r\n    function totalStakedFor(address addr)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 amountWithExtra =\r\n            totalStakingShares > 0\r\n                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\r\n                    totalStakingShares\r\n                )\r\n                : 0;\r\n\r\n        if (amountWithExtra == 0) return amountWithExtra;\r\n        return amountWithExtra - extraAmounts[addr];\r\n    }\r\n\r\n    /**\r\n     * @return The total number of deposit tokens staked globally, by all users.\r\n     */\r\n    function totalStaked() public view override returns (uint256) {\r\n        return _stakingPool.balance() + totalExtra;\r\n    }\r\n\r\n    /**\r\n     * @dev Note that this application has a staking token as well as a distribution token, which\r\n     * may be different. This function is required by EIP-900.\r\n     * @return The deposit token used for staking.\r\n     */\r\n    function token() external view override returns (address) {\r\n        return address(getStakingToken());\r\n    }\r\n\r\n    /**\r\n     * @dev A globally callable function to update the accounting state of the system.\r\n     *      Global state and state for the caller are updated.\r\n     * @return [0] balance of the locked pool\r\n     * @return [1] balance of the unlocked pool\r\n     * @return [2] caller's staking share seconds\r\n     * @return [3] global staking share seconds\r\n     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\r\n     * @return [5] block timestamp\r\n     */\r\n    function updateAccounting(address user)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        _unlockTokens();\r\n\r\n        // Global accounting\r\n        uint256 newStakingShareSeconds =\r\n            now.sub(_lastAccountingTimestampSec).mul(totalStakingShares);\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\r\n            newStakingShareSeconds\r\n        );\r\n        _lastAccountingTimestampSec = now;\r\n\r\n        // User Accounting\r\n        UserTotals storage totals = _userTotals[user];\r\n        uint256 newUserStakingShareSeconds =\r\n            now.sub(totals.lastAccountingTimestampSec).mul(\r\n                totals.stakingShares\r\n            );\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\r\n            newUserStakingShareSeconds\r\n        );\r\n        totals.lastAccountingTimestampSec = now;\r\n\r\n        uint256 totalUserRewards =\r\n            (_totalStakingShareSeconds > 0)\r\n                ? totalUnlocked().mul(totals.stakingShareSeconds).div(\r\n                    _totalStakingShareSeconds\r\n                )\r\n                : 0;\r\n\r\n        return (\r\n            totalLocked(),\r\n            totalUnlocked(),\r\n            totals.stakingShareSeconds,\r\n            _totalStakingShareSeconds,\r\n            totalUserRewards,\r\n            now\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return Total number of locked distribution tokens.\r\n     */\r\n    function totalLocked() public view returns (uint256) {\r\n        return _lockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Total number of unlocked distribution tokens.\r\n     */\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Number of unlock schedules.\r\n     */\r\n    function unlockScheduleCount() public view returns (uint256) {\r\n        return unlockSchedules.length;\r\n    }\r\n\r\n    /**\r\n     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\r\n     *      with the associated \"unlock schedule\". These locked tokens immediately begin unlocking\r\n     *      linearly over the duraction of durationSec timeframe.\r\n     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\r\n     * @param durationSec Length of time to linear unlock the tokens.\r\n     */\r\n    function lockTokens(uint256 amount, uint256 durationSec)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            unlockSchedules.length < _maxUnlockSchedules,\r\n            \"TokenGeyser: reached maximum unlock schedules\"\r\n        );\r\n\r\n        // Update lockedTokens amount before using it in computations after.\r\n        updateAccounting(msg.sender);\r\n\r\n        uint256 lockedTokens = totalLocked();\r\n        uint256 mintedLockedShares =\r\n            (lockedTokens > 0)\r\n                ? totalLockedShares.mul(amount).div(lockedTokens)\r\n                : amount.mul(_initialSharesPerToken);\r\n\r\n        UnlockSchedule memory schedule;\r\n        schedule.initialLockedShares = mintedLockedShares;\r\n        schedule.lastUnlockTimestampSec = now;\r\n        schedule.endAtSec = now.add(durationSec);\r\n        schedule.durationSec = durationSec;\r\n        unlockSchedules.push(schedule);\r\n\r\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\r\n\r\n        require(\r\n            _lockedPool.token().transferFrom(\r\n                msg.sender,\r\n                address(_lockedPool),\r\n                amount\r\n            ),\r\n            \"TokenGeyser: transfer into locked pool failed\"\r\n        );\r\n        emit TokensLocked(amount, durationSec, totalLocked());\r\n    }\r\n\r\n    /**\r\n     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\r\n     *      previously defined unlock schedules. Publicly callable.\r\n     * @return Number of newly unlocked distribution tokens.\r\n     */\r\n    function unlockTokens() public onlyOwner returns (uint256) {\r\n        _unlockTokens();\r\n    }\r\n\r\n    function _unlockTokens() private returns (uint256) {\r\n        uint256 unlockedTokens = 0;\r\n        uint256 lockedTokens = totalLocked();\r\n\r\n        if (totalLockedShares == 0) {\r\n            unlockedTokens = lockedTokens;\r\n        } else {\r\n            uint256 unlockedShares = 0;\r\n            for (uint256 s = 0; s < unlockSchedules.length; s++) {\r\n                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\r\n            }\r\n            unlockedTokens = unlockedShares.mul(lockedTokens).div(\r\n                totalLockedShares\r\n            );\r\n            totalLockedShares = totalLockedShares.sub(unlockedShares);\r\n        }\r\n\r\n        if (unlockedTokens > 0) {\r\n            require(\r\n                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\r\n                \"TokenGeyser: transfer out of locked pool failed\"\r\n            );\r\n            emit TokensUnlocked(unlockedTokens, totalLocked());\r\n        }\r\n\r\n        return unlockedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of unlockable shares from a given schedule. The returned value\r\n     *      depends on the time since the last unlock. This function updates schedule accounting,\r\n     *      but does not actually transfer any tokens.\r\n     * @param s Index of the unlock schedule.\r\n     * @return The number of unlocked shares.\r\n     */\r\n    function unlockScheduleShares(uint256 s) private returns (uint256) {\r\n        UnlockSchedule storage schedule = unlockSchedules[s];\r\n\r\n        if (schedule.unlockedShares >= schedule.initialLockedShares) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 sharesToUnlock = 0;\r\n        // Special case to handle any leftover dust from integer division\r\n        if (now >= schedule.endAtSec) {\r\n            sharesToUnlock = (\r\n                schedule.initialLockedShares.sub(schedule.unlockedShares)\r\n            );\r\n            schedule.lastUnlockTimestampSec = schedule.endAtSec;\r\n        } else {\r\n            sharesToUnlock = now\r\n                .sub(schedule.lastUnlockTimestampSec)\r\n                .mul(schedule.initialLockedShares)\r\n                .div(schedule.durationSec);\r\n            schedule.lastUnlockTimestampSec = now;\r\n        }\r\n\r\n        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\r\n        return sharesToUnlock;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner rescue funds air-dropped to the staking pool.\r\n     * @param tokenToRescue Address of the token to be rescued.\r\n     * @param to Address to which the rescued funds are to be sent.\r\n     * @param amount Amount of tokens to be rescued.\r\n     * @return Transfer success.\r\n     */\r\n    function rescueFundsFromStakingPool(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyOwner returns (bool) {\r\n        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\r\n    }\r\n\r\n    function supportsHistory() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title Staking interface, as defined by EIP-900.\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ninterface IStake {\r\n    function stake(\r\n        address staker,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function stakeFor(\r\n        address staker,\r\n        address user,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title Non Nft Token Geyser\r\n * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\r\n *      Compound and Uniswap.\r\n *\r\n *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\r\n *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\r\n *      claimed by users.\r\n *\r\n *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\r\n *      is a function of the number of tokens deposited as well as the length of time deposited.\r\n *      Specifically, a user's share of the currently-unlocked pool equals their \"deposit-seconds\"\r\n *      divided by the global \"deposit-seconds\". This aligns the new token distribution with long\r\n *      term supporters of the project, addressing one of the major drawbacks of simple airdrops.\r\n *\r\n *      More background and motivation available at:\r\n *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\r\n */\r\ncontract TokenGeyserWithoutNFT is IStaking, IStake, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\r\n    // amount: Unlocked tokens, total: Total locked tokens\r\n    event TokensUnlocked(uint256 amount, uint256 total);\r\n\r\n    TokenPool private _stakingPool;\r\n    TokenPool private _unlockedPool;\r\n    TokenPool private _lockedPool;\r\n\r\n    //\r\n    // Time-bonus params\r\n    //\r\n    uint256 public bonusDecimals = 2;\r\n    uint256 public startBonus = 0;\r\n    uint256 public bonusPeriodSec = 0;\r\n\r\n    //\r\n    // Global accounting state\r\n    //\r\n    uint256 public totalLockedShares = 0;\r\n    uint256 public totalStakingShares = 0;\r\n    uint256 private _totalStakingShareSeconds = 0;\r\n    uint256 private _lastAccountingTimestampSec = now;\r\n    uint256 private _maxUnlockSchedules = 0;\r\n    uint256 private _initialSharesPerToken = 0;\r\n\r\n    //\r\n    // User accounting state\r\n    //\r\n    // Represents a single stake for a user. A user may have multiple.\r\n    struct Stake {\r\n        uint256 stakingShares;\r\n        uint256 timestampSec;\r\n    }\r\n\r\n    // Caches aggregated values from the User->Stake[] map to save computation.\r\n    // If lastAccountingTimestampSec is 0, there's no entry for that user.\r\n    struct UserTotals {\r\n        uint256 stakingShares;\r\n        uint256 stakingShareSeconds;\r\n        uint256 lastAccountingTimestampSec;\r\n    }\r\n\r\n    // Aggregated staking values per user\r\n    mapping(address => UserTotals) private _userTotals;\r\n\r\n    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\r\n    mapping(address => Stake[]) private _userStakes;\r\n\r\n    mapping(address => uint256) userEarnings;\r\n\r\n    //\r\n    // Locked/Unlocked Accounting state\r\n    //\r\n    struct UnlockSchedule {\r\n        uint256 initialLockedShares;\r\n        uint256 unlockedShares;\r\n        uint256 lastUnlockTimestampSec;\r\n        uint256 endAtSec;\r\n        uint256 durationSec;\r\n    }\r\n\r\n    UnlockSchedule[] public unlockSchedules;\r\n\r\n    address public geyserManager;\r\n\r\n    /**\r\n     * @param stakingToken The token users deposit as stake.\r\n     * @param distributionToken The token users receive as they unstake.\r\n     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\r\n     * @param startBonus_ Starting time bonus\r\n     *                    e.g. 25% means user gets 25% of max distribution tokens.\r\n     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\r\n     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\r\n     * @param bonusDecimals_ The number of decimals for shares\r\n     */\r\n    constructor(\r\n        IERC20 stakingToken,\r\n        IERC20 distributionToken,\r\n        uint256 maxUnlockSchedules,\r\n        uint256 startBonus_,\r\n        uint256 bonusPeriodSec_,\r\n        uint256 initialSharesPerToken,\r\n        uint256 bonusDecimals_,\r\n        address managerAddress\r\n    ) public {\r\n        // The start bonus must be some fraction of the max. (i.e. <= 100%)\r\n        require(\r\n            startBonus_ <= 10**bonusDecimals_,\r\n            \"TokenGeyser: start bonus too high\"\r\n        );\r\n        // If no period is desired, instead set startBonus = 100%\r\n        // and bonusPeriod to a small value like 1sec.\r\n        require(bonusPeriodSec_ != 0, \"TokenGeyser: bonus period is zero\");\r\n        require(\r\n            initialSharesPerToken > 0,\r\n            \"TokenGeyser: initialSharesPerToken is zero\"\r\n        );\r\n\r\n        require(bonusDecimals_ > 0, \"TokenGeyser: bonusDecimals_ is zero\");\r\n\r\n        _stakingPool = new TokenPool(stakingToken);\r\n        _unlockedPool = new TokenPool(distributionToken);\r\n        _lockedPool = new TokenPool(distributionToken);\r\n        _unlockedPool.setRescuable(true);\r\n\r\n        geyserManager = managerAddress;\r\n        startBonus = startBonus_;\r\n        bonusDecimals = bonusDecimals_;\r\n        bonusPeriodSec = bonusPeriodSec_;\r\n        _maxUnlockSchedules = maxUnlockSchedules;\r\n        _initialSharesPerToken = initialSharesPerToken;\r\n    }\r\n\r\n    /**\r\n     * @return Total earnings for a user\r\n    */\r\n    function getEarnings(address user) public view returns (uint256) {\r\n        return userEarnings[user];\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue rewards\r\n     */\r\n    function rescueRewards(address user) external onlyOwner {\r\n        require(totalUnlocked() > 0, \"TokenGeyser: Nothing to rescue\");\r\n        require(\r\n            _unlockedPool.transfer(user, _unlockedPool.balance()),\r\n            \"TokenGeyser: rescue rewards from rewards pool failed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return The token users deposit as stake.\r\n     */\r\n    function getStakingToken() public view returns (IERC20) {\r\n        return _stakingPool.token();\r\n    }\r\n\r\n    /**\r\n     * @return The token users receive as they unstake.\r\n     */\r\n    function getDistributionToken() public view returns (IERC20) {\r\n        assert(_unlockedPool.token() == _lockedPool.token());\r\n        return _unlockedPool.token();\r\n    }\r\n\r\n    event log(string s);\r\n    event log(uint256 s);\r\n    event log(address s);\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the user.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param data Not used.\r\n     */\r\n    function stake(\r\n        address staker,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external override {\r\n        require(\r\n            geyserManager == msg.sender,\r\n            \"This method can be called by the geyser manager only\"\r\n        );\r\n        _stakeFor(staker, staker, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\r\n     * @param user User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param data Not used.\r\n     */\r\n    function stakeFor(\r\n        address staker,\r\n        address user,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external override onlyOwner {\r\n        require(\r\n            geyserManager == msg.sender,\r\n            \"This method can be called by the geyser manager only\"\r\n        );\r\n        _stakeFor(staker, user, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Private implementation of staking methods.\r\n     * @param staker User address who deposits tokens to stake.\r\n     * @param beneficiary User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     */\r\n    function _stakeFor(\r\n        address staker,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) private {\r\n        require(amount > 0, \"TokenGeyser: stake amount is zero\");\r\n        require(\r\n            beneficiary != address(0),\r\n            \"TokenGeyser: beneficiary is zero address\"\r\n        );\r\n        require(\r\n            totalStakingShares == 0 || totalStaked() > 0,\r\n            \"TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do\"\r\n        );\r\n\r\n\r\n        uint256 mintedStakingShares =\r\n            (totalStakingShares > 0)\r\n                ? totalStakingShares.mul(amount).div(totalStaked())\r\n                : amount.mul(_initialSharesPerToken);\r\n\r\n        require(\r\n            mintedStakingShares > 0,\r\n            \"TokenGeyser: Stake amount is too small\"\r\n        );\r\n\r\n        updateAccounting(beneficiary);\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[beneficiary];\r\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\r\n        totals.lastAccountingTimestampSec = now;\r\n\r\n        Stake memory newStake = Stake(mintedStakingShares, now);\r\n        _userStakes[beneficiary].push(newStake);\r\n\r\n        // 2. Global Accounting\r\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\r\n        // Already set in updateAccounting()\r\n        // _lastAccountingTimestampSec = now;\r\n\r\n        // interactions\r\n        require(\r\n            _stakingPool.token().transferFrom(\r\n                staker,\r\n                address(_stakingPool),\r\n                amount\r\n            ),\r\n            \"TokenGeyser: transfer into staking pool failed\"\r\n        );\r\n\r\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @param data Not used.\r\n     */\r\n    function unstake(\r\n        address staker,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external override {\r\n        require(\r\n            geyserManager == msg.sender,\r\n            \"This method can be called by the geyser manager only\"\r\n        );\r\n        _unstake(staker, amount);\r\n    }\r\n\r\n    /**\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens that would be rewarded.\r\n     */\r\n    function unstakeQuery(address staker, uint256 amount)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            geyserManager == msg.sender,\r\n            \"This method can be called by the geyser manager only\"\r\n        );\r\n        return _unstake(staker, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens rewarded.\r\n     */\r\n    function _unstake(address user, uint256 amount) private returns (uint256) {\r\n        updateAccounting(user);\r\n\r\n        uint256 stakingSharesToBurn =\r\n            totalStakingShares.mul(amount).div(totalStaked());\r\n\r\n        require(\r\n            stakingSharesToBurn > 0,\r\n            \"TokenGeyser: Unable to unstake amount this small\"\r\n        );\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[user];\r\n        Stake[] storage accountStakes = _userStakes[user];\r\n\r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingShareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        uint256 rewardAmount = 0;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\r\n            uint256 newStakingShareSecondsToBurn = 0;\r\n\r\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\r\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\r\n                    stakeTimeSec\r\n                );\r\n                rewardAmount = computeNewReward(\r\n                    rewardAmount,\r\n                    newStakingShareSecondsToBurn,\r\n                    stakeTimeSec\r\n                );\r\n\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\r\n                    newStakingShareSecondsToBurn\r\n                );\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(\r\n                    lastStake.stakingShares\r\n                );\r\n                accountStakes.pop();\r\n            } else {\r\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\r\n                    stakeTimeSec\r\n                );\r\n                rewardAmount = computeNewReward(\r\n                    rewardAmount,\r\n                    newStakingShareSecondsToBurn,\r\n                    stakeTimeSec\r\n                );\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\r\n                    newStakingShareSecondsToBurn\r\n                );\r\n                lastStake.stakingShares = lastStake.stakingShares.sub(\r\n                    sharesLeftToBurn\r\n                );\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\r\n            stakingShareSecondsToBurn\r\n        );\r\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\r\n        // Already set in updateAccounting\r\n        // totals.lastAccountingTimestampSec = now;\r\n\r\n        // 2. Global Accounting\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\r\n            stakingShareSecondsToBurn\r\n        );\r\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\r\n        // Already set in updateAccountingF\r\n        // _lastAccountingTimestampSec = now;\r\n\r\n        // interactions\r\n        require(\r\n            _stakingPool.transfer(user, amount),\r\n            \"TokenGeyser: transfer out of staking pool failed\"\r\n        );\r\n\r\n        //in case rescueRewards was called, there are no rewards to be transfered\r\n        if (totalUnlocked() >= rewardAmount) {\r\n            require(\r\n                _unlockedPool.transfer(user, rewardAmount),\r\n                \"TokenGeyser: transfer out of unlocked pool failed\"\r\n            );\r\n            emit TokensClaimed(user, rewardAmount);\r\n            \r\n             userEarnings[user] += rewardAmount;\r\n        }\r\n\r\n        emit Unstaked(user, amount, totalStakedFor(user), \"\");\r\n\r\n        require(\r\n            totalStakingShares == 0 || totalStaked() > 0,\r\n            \"TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do\"\r\n        );\r\n\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\r\n     *      encourage long-term deposits instead of constant unstake/restakes.\r\n     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\r\n     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\r\n     * @param currentRewardTokens The current number of distribution tokens already alotted for this\r\n     *                            unstake op. Any bonuses are already applied.\r\n     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\r\n     *                            distribution tokens.\r\n     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\r\n     *                     the time-bonus.\r\n     * @return Updated amount of distribution tokens to award, with any bonus included on the\r\n     *         newly added tokens.\r\n     */\r\n    function computeNewReward(\r\n        uint256 currentRewardTokens,\r\n        uint256 stakingShareSeconds,\r\n        uint256 stakeTimeSec\r\n    ) private view returns (uint256) {\r\n        uint256 newRewardTokens =\r\n            totalUnlocked().mul(stakingShareSeconds).div(\r\n                _totalStakingShareSeconds\r\n            );\r\n\r\n        if (stakeTimeSec >= bonusPeriodSec) {\r\n            return currentRewardTokens.add(newRewardTokens);\r\n        }\r\n\r\n        uint256 oneHundredPct = 10**bonusDecimals;\r\n        uint256 bonusedReward =\r\n            startBonus\r\n                .add(\r\n                oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(\r\n                    bonusPeriodSec\r\n                )\r\n            )\r\n                .mul(newRewardTokens)\r\n                .div(oneHundredPct);\r\n\r\n        return currentRewardTokens.add(bonusedReward);\r\n    }\r\n\r\n    /**\r\n     * @param addr The user to look up staking information for.\r\n     * @return The number of staking tokens deposited for addr.\r\n     */\r\n    function totalStakedFor(address addr)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return\r\n            totalStakingShares > 0\r\n                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\r\n                    totalStakingShares\r\n                )\r\n                : 0;\r\n    }\r\n\r\n    /**\r\n     * @return The total number of deposit tokens staked globally, by all users.\r\n     */\r\n    function totalStaked() public view override returns (uint256) {\r\n        return _stakingPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @dev Note that this application has a staking token as well as a distribution token, which\r\n     * may be different. This function is required by EIP-900.\r\n     * @return The deposit token used for staking.\r\n     */\r\n    function token() external view override returns (address) {\r\n        return address(getStakingToken());\r\n    }\r\n\r\n    /**\r\n     * @dev A globally callable function to update the accounting state of the system.\r\n     *      Global state and state for the caller are updated.\r\n     * @return [0] balance of the locked pool\r\n     * @return [1] balance of the unlocked pool\r\n     * @return [2] caller's staking share seconds\r\n     * @return [3] global staking share seconds\r\n     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\r\n     * @return [5] block timestamp\r\n     */\r\n    function updateAccounting(address user)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        _unlockTokens();\r\n\r\n        // Global accounting\r\n        uint256 newStakingShareSeconds =\r\n            now.sub(_lastAccountingTimestampSec).mul(totalStakingShares);\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\r\n            newStakingShareSeconds\r\n        );\r\n        _lastAccountingTimestampSec = now;\r\n\r\n        // User Accounting\r\n        UserTotals storage totals = _userTotals[user];\r\n        uint256 newUserStakingShareSeconds =\r\n            now.sub(totals.lastAccountingTimestampSec).mul(\r\n                totals.stakingShares\r\n            );\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\r\n            newUserStakingShareSeconds\r\n        );\r\n        totals.lastAccountingTimestampSec = now;\r\n\r\n        uint256 totalUserRewards =\r\n            (_totalStakingShareSeconds > 0)\r\n                ? totalUnlocked().mul(totals.stakingShareSeconds).div(\r\n                    _totalStakingShareSeconds\r\n                )\r\n                : 0;\r\n\r\n        return (\r\n            totalLocked(),\r\n            totalUnlocked(),\r\n            totals.stakingShareSeconds,\r\n            _totalStakingShareSeconds,\r\n            totalUserRewards,\r\n            now\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return Total number of locked distribution tokens.\r\n     */\r\n    function totalLocked() public view returns (uint256) {\r\n        return _lockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Total number of unlocked distribution tokens.\r\n     */\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Number of unlock schedules.\r\n     */\r\n    function unlockScheduleCount() public view returns (uint256) {\r\n        return unlockSchedules.length;\r\n    }\r\n\r\n    /**\r\n     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\r\n     *      with the associated \"unlock schedule\". These locked tokens immediately begin unlocking\r\n     *      linearly over the duraction of durationSec timeframe.\r\n     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\r\n     * @param durationSec Length of time to linear unlock the tokens.\r\n     */\r\n    function lockTokens(uint256 amount, uint256 durationSec)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            unlockSchedules.length < _maxUnlockSchedules,\r\n            \"TokenGeyser: reached maximum unlock schedules\"\r\n        );\r\n\r\n        // Update lockedTokens amount before using it in computations after.\r\n        updateAccounting(msg.sender);\r\n\r\n        uint256 lockedTokens = totalLocked();\r\n        uint256 mintedLockedShares =\r\n            (lockedTokens > 0)\r\n                ? totalLockedShares.mul(amount).div(lockedTokens)\r\n                : amount.mul(_initialSharesPerToken);\r\n\r\n        UnlockSchedule memory schedule;\r\n        schedule.initialLockedShares = mintedLockedShares;\r\n        schedule.lastUnlockTimestampSec = now;\r\n        schedule.endAtSec = now.add(durationSec);\r\n        schedule.durationSec = durationSec;\r\n        unlockSchedules.push(schedule);\r\n\r\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\r\n\r\n        require(\r\n            _lockedPool.token().transferFrom(\r\n                msg.sender,\r\n                address(_lockedPool),\r\n                amount\r\n            ),\r\n            \"TokenGeyser: transfer into locked pool failed\"\r\n        );\r\n        emit TokensLocked(amount, durationSec, totalLocked());\r\n    }\r\n\r\n    /**\r\n     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\r\n     *      previously defined unlock schedules. Publicly callable.\r\n     * @return Number of newly unlocked distribution tokens.\r\n     */\r\n    function unlockTokens() public onlyOwner returns (uint256) {\r\n        _unlockTokens();\r\n    }\r\n\r\n    function _unlockTokens() private returns (uint256) {\r\n        uint256 unlockedTokens = 0;\r\n        uint256 lockedTokens = totalLocked();\r\n\r\n        if (totalLockedShares == 0) {\r\n            unlockedTokens = lockedTokens;\r\n        } else {\r\n            uint256 unlockedShares = 0;\r\n            for (uint256 s = 0; s < unlockSchedules.length; s++) {\r\n                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\r\n            }\r\n            unlockedTokens = unlockedShares.mul(lockedTokens).div(\r\n                totalLockedShares\r\n            );\r\n            totalLockedShares = totalLockedShares.sub(unlockedShares);\r\n        }\r\n\r\n        if (unlockedTokens > 0) {\r\n            require(\r\n                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\r\n                \"TokenGeyser: transfer out of locked pool failed\"\r\n            );\r\n            emit TokensUnlocked(unlockedTokens, totalLocked());\r\n        }\r\n\r\n        return unlockedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of unlockable shares from a given schedule. The returned value\r\n     *      depends on the time since the last unlock. This function updates schedule accounting,\r\n     *      but does not actually transfer any tokens.\r\n     * @param s Index of the unlock schedule.\r\n     * @return The number of unlocked shares.\r\n     */\r\n    function unlockScheduleShares(uint256 s) private returns (uint256) {\r\n        UnlockSchedule storage schedule = unlockSchedules[s];\r\n\r\n        if (schedule.unlockedShares >= schedule.initialLockedShares) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 sharesToUnlock = 0;\r\n        // Special case to handle any leftover dust from integer division\r\n        if (now >= schedule.endAtSec) {\r\n            sharesToUnlock = (\r\n                schedule.initialLockedShares.sub(schedule.unlockedShares)\r\n            );\r\n            schedule.lastUnlockTimestampSec = schedule.endAtSec;\r\n        } else {\r\n            sharesToUnlock = now\r\n                .sub(schedule.lastUnlockTimestampSec)\r\n                .mul(schedule.initialLockedShares)\r\n                .div(schedule.durationSec);\r\n            schedule.lastUnlockTimestampSec = now;\r\n        }\r\n\r\n        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\r\n        return sharesToUnlock;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner rescue funds air-dropped to the staking pool.\r\n     * @param tokenToRescue Address of the token to be rescued.\r\n     * @param to Address to which the rescued funds are to be sent.\r\n     * @param amount Amount of tokens to be rescued.\r\n     * @return Transfer success.\r\n     */\r\n    function rescueFundsFromStakingPool(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyOwner returns (bool) {\r\n        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\r\n    }\r\n\r\n    function supportsHistory() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/** @title Token Geyser Manager */\r\ncontract TokenGeyserManager is Ownable, ITokenGeyserManager {\r\n    bool public hasNFTBonus;\r\n    mapping(address => address) public geysers;\r\n    address[] public tokens;\r\n\r\n    /**\r\n       @dev Creates an empty Geyser token managers\r\n    \r\n     */\r\n    constructor(bool _hasNftBonus) public {\r\n        hasNFTBonus = _hasNftBonus;\r\n\r\n        emit GeyserManagerCreated(msg.sender, address(this));\r\n    }\r\n\r\n    /**\r\n        @dev Adds a new geyser in the team\r\n        @param token - address of the staking token for which the geyser was created\r\n        @param geyser - address of the geyser\r\n     */\r\n    function addGeyser(address token, address geyser)\r\n        public\r\n        override\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(token != address(0), \"TokenGeyserManager: token is invalid\");\r\n\r\n        require(geyser != address(0), \"TokenGeyserManager: geyser is invalid\");\r\n        tokens.push(token);\r\n        geysers[token] = geyser;\r\n\r\n        emit GeyserAdded(msg.sender, geyser, token);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Retrieves total rewards earned for a specific staking token\r\n        @param token - address of the ERC20 token\r\n    */\r\n    function getEarned(address token) public view override returns (uint256) {\r\n        if (hasNFTBonus) {\r\n            return TokenGeyser(geysers[token]).getEarnings(msg.sender);\r\n        }\r\n        return TokenGeyserWithoutNFT(geysers[token]).getEarnings(msg.sender);\r\n    }\r\n\r\n    /**\r\n        @dev Retrieves total rewards earned for all the staking tokens\r\n    */\r\n     function getEarnings() public view override returns (address[] memory, uint256[] memory){\r\n        address[] memory addresses = new address[](tokens.length);\r\n        uint256[] memory amounts = new uint256[](tokens.length);\r\n\r\n        for (uint8 i = 0; i < tokens.length; i++) {\r\n            addresses[i] = tokens[i];\r\n            if (hasNFTBonus) {\r\n                amounts[i] = TokenGeyser(geysers[tokens[i]]).getEarnings(\r\n                    msg.sender\r\n                );\r\n            } else {\r\n                amounts[i] = TokenGeyserWithoutNFT(geysers[tokens[i]])\r\n                    .getEarnings(msg.sender);\r\n            }\r\n        }\r\n\r\n        return (addresses, amounts);\r\n     }\r\n\r\n\r\n    /**\r\n        @dev Retrieves staked amount for a specific token address\r\n        @param token - address of the ERC20 token\r\n    */\r\n    function getStake(address token) public view override returns (uint256) {\r\n        if (hasNFTBonus) {\r\n            return TokenGeyser(geysers[token]).totalStakedFor(msg.sender);\r\n        }\r\n        return TokenGeyserWithoutNFT(geysers[token]).totalStakedFor(msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n        @dev Retrieves all stakes for sender\r\n     */\r\n    function getStakes()\r\n        public\r\n        view\r\n        override\r\n        returns (address[] memory, uint256[] memory)\r\n    {\r\n        address[] memory addresses = new address[](tokens.length);\r\n        uint256[] memory amounts = new uint256[](tokens.length);\r\n\r\n        for (uint8 i = 0; i < tokens.length; i++) {\r\n            addresses[i] = tokens[i];\r\n            if (hasNFTBonus) {\r\n                amounts[i] = TokenGeyser(geysers[tokens[i]]).totalStakedFor(\r\n                    msg.sender\r\n                );\r\n            } else {\r\n                amounts[i] = TokenGeyserWithoutNFT(geysers[tokens[i]])\r\n                    .totalStakedFor(msg.sender);\r\n            }\r\n        }\r\n\r\n        return (addresses, amounts);\r\n    }\r\n\r\n\r\n    /**\r\n        @dev Stakes all tokens sent\r\n        @param _tokens - array of tokens' addresses you want to stake\r\n        @param amounts - stake amount you want for each token\r\n     */\r\n    function stake(\r\n        address[] calldata _tokens,\r\n        uint256[] calldata amounts,\r\n        int256 nftId\r\n    ) external override returns (bool) {\r\n        //validation\r\n        require(tokens.length > 0, \"TokenGeyserManager: _tokens is empty\");\r\n        require(amounts.length > 0, \"TokenGeyserManager: amounts is empty\");\r\n        require(\r\n            _tokens.length == amounts.length,\r\n            \"TokenGeyserManager: tokens and amounts need to  be the same length\"\r\n        );\r\n\r\n        for (uint8 i = 0; i < _tokens.length; i++) {\r\n            ERC20 currentToken = ERC20(_tokens[i]);\r\n            uint256 currentTokenBalance = currentToken.balanceOf(msg.sender);\r\n            uint256 sentAmount = amounts[i];\r\n            string memory tokenName = currentToken.name();\r\n\r\n            require(\r\n                currentTokenBalance >= sentAmount,\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"TokenGeyserManager: Token \",\r\n                        tokenName,\r\n                        \" balance is lower than the amount sent\"\r\n                    )\r\n                )\r\n            );\r\n        }\r\n        //actions\r\n        for (uint8 i = 0; i < _tokens.length; i++) {\r\n            if (hasNFTBonus) {\r\n                TokenGeyser(geysers[_tokens[i]]).stake(\r\n                    msg.sender,\r\n                    amounts[i],\r\n                    \"\",\r\n                    nftId\r\n                );\r\n            } else {\r\n                TokenGeyserWithoutNFT(geysers[_tokens[i]]).stake(\r\n                    msg.sender,\r\n                    amounts[i],\r\n                    \"\"\r\n                );\r\n            }\r\n\r\n            emit Staked(msg.sender, tokens[i], amounts[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Unstakes all tokens sent\r\n        @param _tokens - array of tokens' addresses you want to unstake\r\n        @param amounts - unstake amount you want for each token\r\n     */\r\n    function unstake(address[] calldata _tokens, uint256[] calldata amounts)\r\n        external\r\n        override\r\n    {\r\n        //validation\r\n        require(tokens.length > 0, \"TokenGeyserManager: _tokens is empty\");\r\n        require(amounts.length > 0, \"TokenGeyserManager: amounts is empty\");\r\n        require(\r\n            _tokens.length == amounts.length,\r\n            \"TokenGeyserManager: tokens and amounts need to  be the same length\"\r\n        );\r\n\r\n        for (uint8 i = 0; i < _tokens.length; i++) {\r\n            if (hasNFTBonus) {\r\n                require(\r\n                    amounts[i] == 0,\r\n                    \"TokenGeyserManager: only full unstake is allowed\"\r\n                );\r\n                TokenGeyser(geysers[_tokens[i]]).unstake(\r\n                    msg.sender,\r\n                    amounts[i],\r\n                    \"\"\r\n                );\r\n            } else {\r\n                TokenGeyserWithoutNFT(geysers[_tokens[i]]).unstake(\r\n                    msg.sender,\r\n                    amounts[i],\r\n                    \"\"\r\n                );\r\n            }\r\n\r\n            emit Unstaked(msg.sender, _tokens[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n\r\n        /**\r\n        @dev get current eligible rewards from all farms\r\n     */\r\n    function unstakeQuery(address[] calldata _tokens, uint256[] calldata amounts)\r\n        external\r\n        override\r\n        returns (address[] memory, uint256[] memory)\r\n    {\r\n        //validation\r\n        require(tokens.length > 0, \"TokenGeyserManager: _tokens is empty\");\r\n        require(amounts.length > 0, \"TokenGeyserManager: amounts is empty\");\r\n        require(\r\n            _tokens.length == amounts.length,\r\n            \"TokenGeyserManager: tokens and amounts need to  be the same length\"\r\n        );\r\n\r\n        address[] memory addresses = new address[](tokens.length);\r\n        uint256[] memory values = new uint256[](tokens.length);\r\n\r\n        for (uint8 i = 0; i < _tokens.length; i++) {\r\n            addresses[i] = _tokens[i];\r\n            if (hasNFTBonus) {\r\n                require(\r\n                    amounts[i] == 0,\r\n                    \"TokenGeyserManager: only full unstake is allowed\"\r\n                );\r\n                values[i] = TokenGeyser(geysers[_tokens[i]]).unstakeQuery(\r\n                    msg.sender,\r\n                    amounts[i]\r\n                );\r\n            } else {\r\n                values[i] = TokenGeyserWithoutNFT(geysers[_tokens[i]]).unstakeQuery(\r\n                    msg.sender,\r\n                    amounts[i]\r\n                );\r\n            }\r\n\r\n            emit Unstaked(msg.sender, _tokens[i], values[i]);\r\n\r\n            return (addresses, values);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasNftBonus\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"geyser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"GeyserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"geyserManager\",\"type\":\"address\"}],\"name\":\"GeyserManagerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"geyser\",\"type\":\"address\"}],\"name\":\"addGeyser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarnings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"geysers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasNFTBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"int256\",\"name\":\"nftId\",\"type\":\"int256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"unstakeQuery\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenGeyserManager","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a80fa66151c0e950dfe7a272a9877345db5943adefe03fa0a45473e50d7ceb55"}]}