{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/X2Reader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IX2Market.sol\\\";\\nimport \\\"./interfaces/IX2ETHFactory.sol\\\";\\nimport \\\"./interfaces/IX2PriceFeed.sol\\\";\\nimport \\\"./interfaces/IX2Token.sol\\\";\\nimport \\\"./interfaces/IX2RewardDistributor.sol\\\";\\nimport \\\"./libraries/token/IERC20.sol\\\";\\n\\ncontract X2Reader {\\n    using SafeMath for uint256;\\n    uint256 constant PRECISION = 1e20;\\n\\n    function getMarkets(address _factory, uint256 _start) public view returns (uint256[] memory, address[] memory) {\\n        uint256 length = IX2ETHFactory(_factory).marketsLength();\\n        uint256[] memory leverages = new uint256[](length - _start);\\n        address[] memory priceFeeds = new address[](length - _start);\\n        for (uint256 i = _start; i < length; i++) {\\n            address market = IX2ETHFactory(_factory).markets(i);\\n            uint256 multiplierBasisPoints = IX2Market(market).multiplierBasisPoints();\\n            address priceFeed = IX2Market(market).priceFeed();\\n            leverages[i - _start] = multiplierBasisPoints;\\n            priceFeeds[i - _start] = priceFeed;\\n        }\\n\\n        return (leverages, priceFeeds);\\n    }\\n\\n    function getFees(address[] memory _markets) public view returns (uint256) {\\n        uint256 totalFees = 0;\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            address market = _markets[i];\\n            totalFees = totalFees.add(IX2Market(market).feeReserve());\\n        }\\n\\n        return totalFees;\\n    }\\n\\n    function distributeFees(address[] memory _markets) public returns (uint256) {\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            address market = _markets[i];\\n            IX2Market(market).distributeFees();\\n        }\\n    }\\n\\n    function getAppFees(address[] memory _markets, address app) public view returns (uint256) {\\n        uint256 totalFees = 0;\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            address market = _markets[i];\\n            totalFees = totalFees.add(IX2Market(market).appFees(app));\\n        }\\n\\n        return totalFees;\\n    }\\n\\n    function distributeAppFees(address[] memory _markets, address app) public returns (uint256) {\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            address market = _markets[i];\\n            IX2Market(market).distributeAppFees(app);\\n        }\\n    }\\n\\n    function getMarketInfo(address _market) public view returns (uint256[] memory) {\\n        address bullToken = IX2Market(_market).bullToken();\\n        address bearToken = IX2Market(_market).bearToken();\\n        (uint256 bullFunding, uint256 bearFunding) = IX2Market(_market).getFunding();\\n\\n        uint256[] memory amounts = new uint256[](5);\\n\\n        amounts[0] = IX2Market(_market).latestPrice();\\n        amounts[1] = IERC20(bullToken).totalSupply();\\n        amounts[2] = IERC20(bearToken).totalSupply();\\n        amounts[3] = bullFunding;\\n        amounts[4] = bearFunding;\\n\\n        return amounts;\\n    }\\n\\n    function getRewards(address _token, address _account) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](6);\\n        address distributor = IX2Token(_token).distributor();\\n        if (distributor == address(0)) {\\n            return amounts;\\n        }\\n\\n        amounts[0] = IX2RewardDistributor(distributor).tokensPerInterval(_token);\\n\\n        uint256 rewards = IX2Token(_token).getReward(_account);\\n        uint256 pendingRewards = IX2RewardDistributor(distributor).getDistributionAmount(_token);\\n        uint256 balance = IX2Token(_token)._balanceOf(_account);\\n        uint256 cumulativeRewardPerToken = IX2Token(_token).cumulativeRewardPerToken();\\n\\n        uint256 supply = IX2Token(_token)._totalSupply();\\n        if (supply > 0) {\\n            amounts[1] = rewards.add(pendingRewards.mul(balance).div(supply));\\n        }\\n        amounts[2] = IERC20(_token).totalSupply();\\n\\n        amounts[3] = balance;\\n        amounts[4] = cumulativeRewardPerToken;\\n        amounts[5] = PRECISION;\\n\\n        return amounts;\\n    }\\n\\n    function getBalanceInfo(address _market, address _account) public view returns (uint256[] memory) {\\n        address bullToken = IX2Market(_market).bullToken();\\n        address bearToken = IX2Market(_market).bearToken();\\n\\n        uint256[] memory amounts = new uint256[](9);\\n\\n        amounts[0] = _account.balance;\\n        amounts[1] = IERC20(bullToken).balanceOf(_account);\\n        amounts[2] = IERC20(bearToken).balanceOf(_account);\\n        amounts[3] = IX2Token(bullToken).lastBoughtAt(_account);\\n        amounts[4] = IX2Token(bearToken).lastBoughtAt(_account);\\n        amounts[5] = IX2Token(bullToken).getPendingProfit(_account);\\n        amounts[6] = IX2Token(bearToken).getPendingProfit(_account);\\n        amounts[7] = IX2Token(bullToken).costOf(_account);\\n        amounts[8] = IX2Token(bearToken).costOf(_account);\\n\\n        return amounts;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2Market {\\n    function feeReserve() external view returns (uint256);\\n    function appFees(address app) external view returns (uint256);\\n    function distributeFees() external returns (uint256);\\n    function distributeAppFees(address app) external returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function multiplierBasisPoints() external view returns (uint256);\\n    function bullToken() external view returns (address);\\n    function bearToken() external view returns (address);\\n    function latestPrice() external view returns (uint256);\\n    function lastPrice() external view returns (uint256);\\n    function getFunding() external view returns (uint256, uint256);\\n    function getDivisor(address token) external view returns (uint256);\\n    function getDivisors(uint256 _lastPrice, uint256 _nextPrice) external view returns (uint256, uint256);\\n    function setAppFee(uint256 feeBasisPoints) external;\\n    function setFunding(uint256 divisor) external;\\n    function cachedBullDivisor() external view returns (uint128);\\n    function cachedBearDivisor() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2ETHFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2ETHFactory {\\n    function marketsLength() external view returns (uint256);\\n    function markets(uint256 index) external view returns (address);\\n    function feeReceiver() external view returns (address);\\n    function interestReceiver() external view returns (address);\\n    function setAppFee(address market, uint256 appFeeBasisPoints) external;\\n    function createMarket(\\n        address _priceFeed,\\n        uint256 _multiplierBasisPoints,\\n        uint256 _maxProfitBasisPoints,\\n        uint256 _fundingDivisor,\\n        uint256 _appFeeBasisPoints\\n    ) external returns (address, address, address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2PriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2PriceFeed {\\n    function description() external view returns (string memory);\\n    function aggregator() external view returns (address);\\n    function latestAnswer() external view returns (int256);\\n    function latestRound() external view returns (uint80);\\n    function getRoundData(uint80 roundId) external view returns (uint80, int256, uint256, uint256, uint80);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2Token {\\n    function cumulativeRewardPerToken() external view returns (uint256);\\n    function lastBoughtAt(address account) external view returns (uint256);\\n    function getPendingProfit(address account) external view returns (uint256);\\n    function distributor() external view returns (address);\\n    function rewardToken() external view returns (address);\\n    function _totalSupply() external view returns (uint256);\\n    function _balanceOf(address account) external view returns (uint256);\\n    function market() external view returns (address);\\n    function getDivisor() external view returns (uint256);\\n    function getReward(address account) external view returns (uint256);\\n    function costOf(address account) external view returns (uint256);\\n    function mint(address account, uint256 amount, uint256 divisor) external;\\n    function burn(address account, uint256 amount, bool distribute) external returns (uint256);\\n    function setDistributor(address _distributor, address _rewardToken) external;\\n    function setInfo(string memory name, string memory symbol) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2RewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2RewardDistributor {\\n    function getDistributionAmount(address receiver) external view returns (uint256);\\n    function tokensPerInterval(address receiver) external view returns (uint256);\\n    function lastDistributionTime(address receiver) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_markets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"distributeAppFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_markets\",\"type\":\"address[]\"}],\"name\":\"distributeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_markets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"getAppFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBalanceInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_markets\",\"type\":\"address[]\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"getMarketInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"X2Reader","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}