{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.4.22 <0.7.0;\r\n\r\ncontract MrManager {\r\n    using SafeERC20 for IERC20;\r\n    address public owner;\r\n    address public backAddr = 0xfD91C24ade1E32A62ca00D8b419b55785bF7B4E0;\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    uint public contractBeginTime = block.timestamp.sub(4752000);\r\n    uint public contractBeginNum ;\r\n    uint public halfDays = 100 days;\r\n    uint public rewardPerBlock = 182291666666666660;//每个块收益\r\n    uint public totalDeposit; //总质押\r\n    uint public totalDynamicBase;//动态总基数\r\n    uint public totalWithdraw; //总挖出\r\n    uint public greatWithdraw;//星级总挖出\r\n    uint public oneEth = 1 ether;\r\n    uint public perRewardToken;\r\n    bool public isAudit;\r\n\r\n\r\n    address public mrToken;\r\n    address public msToken;\r\n    \r\n    constructor(address _mrToken,address _msToken) public {\r\n        owner = msg.sender;\r\n        msToken = _msToken;\r\n        mrToken = _mrToken;\r\n        contractBeginNum = block.number;\r\n        userInfo[0x44BDB5A53911e70E3B25e620a00F05Ca9E55185C].depoistTime = 1;\r\n    }\r\n    \r\n    struct UserInfo {\r\n        uint depositVal;//个人质押数\r\n        uint depoistTime;\r\n        address invitor;\r\n        uint level;\r\n        uint teamDeposit;\r\n        uint dynamicBase;\r\n        uint lastWithdrawBlock;\r\n        uint userWithdraw; //个人总挖出\r\n        uint userStaticReward;//累计静态\r\n        uint userDynamicReward;//累计动态\r\n        uint userGreateReward;//累计星级奖励\r\n        uint debatReward;\r\n        \r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    mapping(address => address[]) public referArr;\r\n    mapping(address => UserInfo) public userInfo;\r\n    \r\n    function transferOwnerShip(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    \r\n    \r\n    function depositMR(uint256 _amount,address _invitor) public {\r\n        require(msg.sender != _invitor);\r\n        require(_amount > 0);\r\n        IERC20(mrToken).safeTransferFrom(msg.sender,address(this),_amount);\r\n        \r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(msg.sender != user.invitor);\r\n        require(userInfo[_invitor].invitor != msg.sender);\r\n        require(userInfo[_invitor].depoistTime > 0);\r\n\r\n        user.depositVal = user.depositVal.add(_amount);\r\n        user.teamDeposit = user.teamDeposit.add(_amount);\r\n        \r\n        updateLevel(msg.sender);\r\n        \r\n        if(user.depoistTime == 0){\r\n            user.invitor = _invitor;\r\n            user.lastWithdrawBlock = block.number;\r\n            referArr[_invitor].push(msg.sender);\r\n        }\r\n        user.depoistTime = user.depoistTime.add(1);\r\n        totalDeposit = totalDeposit.add(_amount);\r\n        \r\n        updatePerReward();\r\n        user.debatReward = user.depositVal.mul(perRewardToken).div(1e12);\r\n        \r\n        for(uint i;i<5;i++){\r\n            user = userInfo[user.invitor];\r\n            user.teamDeposit = user.teamDeposit.add(_amount);\r\n        }\r\n        updateDynamic(msg.sender,_amount);\r\n    }\r\n\r\n    function withDrawMR(uint _amount) public {\r\n        require(_amount > 0);\r\n        \r\n        UserInfo storage user = userInfo[msg.sender];\r\n        getReward();\r\n        require(user.depositVal >= _amount);\r\n        user.depositVal = user.depositVal.sub(_amount);\r\n        IERC20(mrToken).transfer(msg.sender,_amount.mul(9000).div(10000));\r\n        IERC20(mrToken).transfer(backAddr,_amount.mul(1000).div(10000));\r\n        totalDeposit = totalDeposit.sub(_amount);\r\n        user.teamDeposit = user.teamDeposit.sub(_amount);\r\n        \r\n        updateLevel(msg.sender);\r\n        for(uint i;i<5;i++){\r\n            if(user.invitor == 0x44BDB5A53911e70E3B25e620a00F05Ca9E55185C){\r\n                continue;\r\n            }\r\n            updateLevel( user.invitor);\r\n            user = userInfo[user.invitor];\r\n            user.teamDeposit = user.teamDeposit.sub(_amount);\r\n            if(i<3){\r\n                uint amountIn ;\r\n                if(i==0){\r\n                    amountIn = _amount.div(2);\r\n                }else if(i==1){\r\n                    amountIn = _amount.mul(3).div(10);\r\n                }else if(i==2){\r\n                    amountIn = _amount.div(10);\r\n                }\r\n                user.dynamicBase = user.dynamicBase.sub(amountIn);\r\n                totalDynamicBase = totalDynamicBase.sub(amountIn);\r\n            }\r\n        } \r\n    }\r\n    function updateLevel(address _user) internal {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint level  = getLevel(_user);\r\n        user.level = level;\r\n    }\r\n\r\n    function updateDynamic(address _user,uint _amount) internal {\r\n        UserInfo storage user = userInfo[_user];\r\n        for(uint i;i<3;i++){\r\n            if(user.invitor == address(0)){\r\n                break;\r\n            }\r\n            uint amountIn ;\r\n            if(i==0){\r\n                amountIn = _amount.div(2);\r\n            }else if(i==1){\r\n                amountIn = _amount.mul(3).div(10);\r\n            }else if(i==2){\r\n                amountIn = _amount.div(10);\r\n            }\r\n            user = userInfo[user.invitor];\r\n            user.dynamicBase = user.dynamicBase.add(amountIn);\r\n            totalDynamicBase = totalDynamicBase.add(amountIn);\r\n        }\r\n    }\r\n\r\n    function getReward() public {\r\n        (uint staicReward,uint teamReward,uint greatReward,uint backReward) = viewReward(msg.sender);\r\n        uint reward = staicReward.add(teamReward).add(greatReward).add(backReward);\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.depositVal > 0);\r\n        \r\n        if(reward > 0){\r\n            require( IERC20(msToken).balanceOf(address(this)) >= reward );\r\n        \r\n            IERC20(msToken).transfer(msg.sender,reward);\r\n            \r\n            user.lastWithdrawBlock = block.number;\r\n            user.userStaticReward = user.userStaticReward.add(staicReward);\r\n            user.userDynamicReward = user.userDynamicReward.add(teamReward);\r\n            user.userGreateReward = user.userGreateReward.add(greatReward);\r\n            user.userWithdraw = user.userWithdraw.add(reward);\r\n            \r\n            greatWithdraw = greatWithdraw.add(greatReward);\r\n            totalWithdraw = totalWithdraw.add(reward);\r\n            \r\n        }\r\n        updatePerReward();\r\n        user.debatReward = user.depositVal.mul(perRewardToken).div(1e12);\r\n        user.lastWithdrawBlock = block.number;\r\n    }\r\n    \r\n    function updatePerReward() public {\r\n        uint staticRewardBlock = curReward().mul(block.number.sub(contractBeginNum));\r\n        perRewardToken = perRewardToken.add(staticRewardBlock.mul(4000).div(10000).mul(1e12).div(totalDeposit));\r\n    }\r\n\r\n    function viewReward(address _user) public view returns(uint ,uint,uint,uint){\r\n        uint staicReward = viewStaicReward(_user);\r\n        uint teamReward = viewTeamReward(_user);\r\n        UserInfo memory user = userInfo[msg.sender];\r\n        uint rate;\r\n        if(user.level == 1){\r\n            rate = 1000;\r\n        }else if(user.level == 2){\r\n            rate = 1500;\r\n        }else if(user.level == 3){\r\n            rate = 2000;\r\n        }else if(user.level == 4){\r\n            rate = 2500;\r\n        }else if(user.level == 5){\r\n            rate = 3000;\r\n        }\r\n        uint greatReward = viewGreatReward(_user,rate);//xin\r\n        uint backReward = viewStaicReward(user.invitor).mul(1000).div(10000);\r\n        return (staicReward,teamReward,greatReward,backReward);\r\n    }\r\n\r\n    //静态奖励\r\n    function viewStaicReward(address _user) public view returns(uint){\r\n        if(totalDeposit > 0){\r\n            UserInfo memory user = userInfo[_user];\r\n            uint staticRewardBlock = curReward().mul(block.number.sub(user.lastWithdrawBlock));\r\n            uint256  sunflowerReward = staticRewardBlock.mul(4000).div(10000);\r\n            uint perRewardTokenNew = perRewardToken.add(sunflowerReward.mul(1e12).div(totalDeposit));\r\n            return user.depositVal.mul(perRewardTokenNew).div(1e12).sub(user.debatReward);\r\n        }\r\n    }\r\n    //动态奖励\r\n    function viewTeamReward(address _user) public view returns(uint){\r\n        UserInfo memory user = userInfo[_user];\r\n        if(user.depositVal >= oneEth.mul(1000)){\r\n            return user.dynamicBase.mul(curReward()).mul(4000).div(10000).div(totalDynamicBase);\r\n        }\r\n    }\r\n    //星级奖励\r\n    function viewGreatReward(address _user,uint _rate) public view returns(uint){\r\n        UserInfo memory user = userInfo[_user];\r\n        uint teamD = user.teamDeposit;\r\n        uint netD = getNetDeposit(_user);\r\n        if(netD > 0){\r\n             return teamD.mul(curReward()).mul(2000).mul(_rate).div(netD).div(100000000);\r\n        }\r\n    }\r\n\r\n    \r\n    function getLevel(address _user) public view returns(uint willLevel){\r\n\r\n        UserInfo memory user = userInfo[_user];\r\n        uint teamDeposit = user.teamDeposit;\r\n        if(user.depositVal >= oneEth.mul(100000) && teamDeposit >= oneEth.mul(10000000) && getLevelTeamLevel(_user,4)){\r\n            willLevel = 5;\r\n        }else if(user.depositVal >= oneEth.mul(70000) && teamDeposit >= oneEth.mul(2000000) && getLevelTeamLevel(_user,3)){\r\n            willLevel = 4;\r\n        }else if(user.depositVal >= oneEth.mul(50000) && teamDeposit >= oneEth.mul(500000) && getLevelTeamLevel(_user,2)){\r\n            willLevel = 3;\r\n        }else if(user.depositVal >= oneEth.mul(30000) && teamDeposit >= oneEth.mul(100000) && getLevelTeamLevel(_user,1)){\r\n            willLevel = 2;\r\n        }else if(user.depositVal >= oneEth.mul(10000) && teamDeposit >= oneEth.mul(30000) ){\r\n             return 1;\r\n        }else{\r\n            return 0;\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    function getLevelTeamLevel(address _user,uint _level) public view returns(bool){\r\n        UserInfo memory user;\r\n        uint teamLen = referArr[_user].length;\r\n        uint count ;\r\n        for(uint i;i < teamLen ;i++){\r\n            user = userInfo[referArr[_user][i]];\r\n            if(user.level >= _level){\r\n                count++;\r\n            }\r\n            if(count >= 3){\r\n                break;\r\n            }\r\n        }\r\n        return (count >= 3);\r\n    }\r\n    //全网质押\r\n    function getNetDeposit(address _user) public view returns(uint){\r\n        UserInfo memory  user;\r\n        uint totalDeps;\r\n        uint teamLen = referArr[_user].length;\r\n        for(uint i;i < teamLen ;i++){\r\n            user = userInfo[referArr[_user][i]];\r\n            totalDeps = totalDeps.add(user.teamDeposit);\r\n        }\r\n        return totalDeps;\r\n    }\r\n\r\n    function getRefferLen(address _user) public view returns(uint){\r\n        return referArr[_user].length;\r\n    }\r\n    function curReward() public view returns( uint){\r\n        uint halfId = uint((block.timestamp.sub(contractBeginTime))/halfDays);\r\n        return rewardPerBlock/(2**halfId) ;\r\n    }\r\n    \r\n    //after audit contract is ok,set true;\r\n    function setAudit(bool _isAudit) public onlyOwner{\r\n        isAudit = _isAudit;\r\n    }\r\n    //this interface called just before audit contract is ok,if audited ,will be killed\r\n    function getTokenAfterAudit(address _user) public onlyOwner {\r\n        require(!isAudit);\r\n        IERC20(msToken).transfer(_user,IERC20(msToken).balanceOf(address(this)));\r\n    }\r\n    \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function mint(address,uint) external;\r\n}\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mrToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_msToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"backAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBeginNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBeginTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invitor\",\"type\":\"address\"}],\"name\":\"depositMR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"willLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getLevelTeamLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNetDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRefferLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenAfterAudit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"greatWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halfDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAudit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAudit\",\"type\":\"bool\"}],\"name\":\"setAudit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDynamicBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePerReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositVal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depoistTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaticReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDynamicReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userGreateReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debatReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"viewGreatReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewStaicReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewTeamReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDrawMR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MrManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e3323b78f5bf605949ae0edf26c5ad9bff4ddbb9000000000000000000000000f917c2a93cd03f656d807baf6fbbca779bb17dba","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://87e9b552cb9926d4bf0f10f8fe8fadf6fab1538442a9b2beed8a915a664b273f"}]}