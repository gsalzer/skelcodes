{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n//https://vote.idmoswap.com\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n    \r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        \r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n   \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract IDMOVote is Ownable {\r\n    using SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\t\r\n\tstruct proposal{\r\n\t\tuint createTime;    \r\n\t\tstring proposalCid; \r\n\t\tuint proposalId;    \r\n\t\tuint voteNum;       \r\n\t\tuint startBlock;    \r\n\t\tuint endBlock;      \r\n\t\tuint userNum;       \r\n\t\tIERC20 delegateToken;\r\n\t\tuint perVoteValue;  \r\n\t\tuint[] voteAmount;  \r\n\t\tuint[] voteUserNum; \r\n\t\taddress createAddr; \r\n\t\tuint voteLimit;     \r\n\t\tmapping (address=>uint) mapUserAmount; \r\n\t\t\r\n\t\tmapping (address=> mapping(uint=>uint)) mapUserVote; \r\n\t}\r\n\r\n\r\n\tstruct retProposal{\r\n\t\tuint createTime;    \r\n\t\tstring proposalCid; \r\n\t\tuint proposalId;    \r\n\t\tuint voteNum;       \r\n\t\tuint startBlock;    \r\n\t\tuint endBlock;      \r\n\t\tuint userNum;       \r\n\t\tIERC20 delegateToken;\r\n\t\tuint perVoteValue;  \r\n\t\tuint[] voteAmount;  \r\n\t\tuint[] voteUserNum; \r\n\t\taddress createAddr; \r\n\t\tuint voteLimit;     \r\n\t}\r\n\t\r\n\tbool public isAllowAllToken=false;  \r\n\r\n\tIERC20 public IDMOAddr = IERC20(0x4Ba376dec87EDaa662Cd82278d89406864118EFd);  \r\n\r\n\tuint public proposalIndex ;    \r\n\r\n\tmapping (uint=>proposal) public mapProposal;  \r\n\r\n\tuint public  createProposalFee = 1000000000000000000;   \r\n\r\n\taddress public devAddr = 0xa417400C71E36eD541fFBE57D9b1F5A10DD72129;    \r\n\t\r\n\tevent CreateProposalLog(address indexed createAddr, uint indexed proposalId, string proposalCid);\r\n\tevent DelegateLog(address indexed user, uint indexed proposalId, uint voteIndex, uint amount);\r\n\tevent WithdrawLog(address indexed user, uint indexed proposalId, uint amount);\r\n\t\r\n\tfunction getRetProposal(uint proposalId) public view returns(retProposal memory){\r\n\t\tretProposal memory ret;\r\n\t\tproposal memory useProposal = mapProposal[proposalId];\r\n\t\tret.createTime = useProposal.createTime;\r\n\t\tret.proposalCid = useProposal.proposalCid;\r\n\t\tret.proposalId = useProposal.proposalId;\r\n\t\tret.voteNum = useProposal.voteNum;\r\n\t\tret.startBlock = useProposal.startBlock;\r\n\t\tret.endBlock = useProposal.endBlock;\r\n\t\tret.userNum = useProposal.userNum;\r\n\t\tret.delegateToken = useProposal.delegateToken;\r\n\t\tret.perVoteValue = useProposal.perVoteValue;\r\n\t\tret.voteAmount = useProposal.voteAmount;\r\n\t\tret.voteUserNum = useProposal.voteUserNum;\r\n\t\tret.createAddr = useProposal.createAddr;\r\n\t\tret.voteLimit = useProposal.voteLimit;\r\n\t\treturn ret;\r\n\t}\r\n\t\r\n\t\r\n\r\n\tfunction viewProposal(uint startProposalId, uint endProposalId) public view returns( retProposal[] memory){\r\n\t\tuint256 length = endProposalId - startProposalId + 1;\r\n\t\tretProposal[] memory ret = new retProposal[](length);\r\n\t\tfor(uint i = startProposalId; i <= endProposalId; i++){\r\n\t\t\t//ret[i - startProposalId] = mapProposal[i];\r\n\t\t\tret[i - startProposalId] = getRetProposal(i);\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\r\n\tfunction viewUserAmount(uint proposalId, address userAddr) public view returns(uint){\r\n\t\treturn mapProposal[proposalId].mapUserAmount[userAddr];\r\n\t}\r\n\r\n\r\n\tfunction viewMaxAllowAmount(uint proposalId, address userAddr) public view returns(uint){\r\n\t\tuint256 MAX_INT = uint256(-1);\r\n\t\tproposal memory useProposal = mapProposal[proposalId];\r\n\t\tif(useProposal.voteLimit == 0){\r\n\t\t\treturn MAX_INT;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn useProposal.voteLimit.mul(useProposal.perVoteValue).sub(mapProposal[proposalId].mapUserAmount[userAddr]);\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tfunction createProposal(string  memory proposalCid, uint voteNum, uint startBlock, uint endBlock, IERC20 delegateToken, uint perVoteAmount, uint voteLimit) public {\r\n\t\trequire(voteNum >= 1, \"voteNum error.\");\r\n\t\trequire(endBlock > block.number, \"startBlock error.\");\r\n\t\trequire(endBlock > startBlock, \"endBlock error.\");\r\n\t\tif(isAllowAllToken == false){\r\n\t\t\trequire(delegateToken == IDMOAddr, \"delegateToken error.\");\r\n\t\t}\r\n\r\n\t\tIDMOAddr.safeTransferFrom(address(msg.sender), devAddr, createProposalFee);\r\n\t\t\r\n\t\tproposal storage useProposal = mapProposal[proposalIndex];\r\n\t\tuseProposal.createTime = now;\r\n\t\tuseProposal.proposalCid = proposalCid;\r\n\t\tuseProposal.proposalId = proposalIndex;\r\n\t\tuseProposal.voteNum = voteNum;\r\n\t\tuseProposal.startBlock = startBlock;\r\n\t\tuseProposal.endBlock = endBlock;\r\n\t\tuseProposal.delegateToken = delegateToken;\r\n\t\tuseProposal.perVoteValue = perVoteAmount;\r\n\t\tuseProposal.voteAmount = new uint[](voteNum);\r\n\t\tuseProposal.voteUserNum = new uint[](voteNum);\r\n\t\tuseProposal.createAddr = msg.sender;\r\n\t\tuseProposal.voteLimit = voteLimit;\r\n\t\t\r\n\t\tCreateProposalLog(msg.sender, proposalIndex, proposalCid);\r\n\t\t\r\n\t\tproposalIndex = proposalIndex.add(1);\r\n\t}\r\n\t\r\n\r\n\tfunction delegate(uint proposalId, uint  voteIndex, uint amount) public{\r\n\t\tproposal storage useProposal = mapProposal[proposalId];\r\n\t\trequire(voteIndex < useProposal.voteNum, \"voteIndex error.\");\r\n\t\trequire(block.number > useProposal.startBlock, \"not start\");\r\n\t\trequire(block.number <= useProposal.endBlock, \"end\");\r\n\t\trequire(amount >= useProposal.perVoteValue, \"less than perVoteValue\");\r\n\t\t//require(amount % (useProposal.perVoteValue) == 0, \"amount error.\");\r\n\t\trequire(amount.mod(useProposal.perVoteValue) == 0, \"amount error.\");\r\n\t\t\r\n\t\tif(useProposal.voteLimit != 0){\r\n\t\t\trequire(amount.add(useProposal.mapUserAmount[msg.sender]).div(useProposal.perVoteValue) <= useProposal.voteLimit, \"reach limit\");\r\n\t\t}\r\n\t\t\r\n\t\tuseProposal.delegateToken.safeTransferFrom(address(msg.sender), address(this), amount);\r\n\t\t\r\n\t\tif(useProposal.mapUserVote[msg.sender][voteIndex] == 0){ \r\n\t\t\tuseProposal.mapUserVote[msg.sender][voteIndex] = 1;  \r\n\t\t\tuseProposal.voteUserNum[voteIndex] = useProposal.voteUserNum[voteIndex].add(1); \r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tuseProposal.voteAmount[voteIndex] = useProposal.voteAmount[voteIndex].add(amount);\r\n\t\tif(useProposal.mapUserAmount[msg.sender] == 0){ \r\n\t\t\tuseProposal.userNum = useProposal.userNum.add(1);\r\n\t\t}\r\n\t\tuseProposal.mapUserAmount[msg.sender] = useProposal.mapUserAmount[msg.sender].add(amount); \r\n\t\t\r\n\t\tDelegateLog(msg.sender, proposalId, voteIndex, amount);\r\n\t}\r\n\r\n\r\n\tfunction withdraw(uint proposalId) public{\r\n\t\tproposal storage useProposal = mapProposal[proposalId];\r\n\t\trequire(useProposal.endBlock < block.number, \"not reach endBlock\");\r\n\t\tuint send_amount = useProposal.mapUserAmount[msg.sender];\r\n\t\tif(send_amount != 0){\r\n\t\t\tuseProposal.delegateToken.safeTransfer(address(msg.sender), send_amount);\r\n\t\t\tuseProposal.mapUserAmount[msg.sender] = 0;\r\n\t\t\tWithdrawLog(msg.sender, proposalId, send_amount);\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tfunction setStartEnd(uint proposalId, uint startBlock, uint endBlock)public onlyOwner{\r\n\t\tproposal storage useProposal = mapProposal[proposalId];\r\n\t\trequire(startBlock < endBlock, \"startBlock error\");\r\n\t\trequire(endBlock < useProposal.endBlock, \"endBlock error.\");\r\n\t\tuseProposal.startBlock = startBlock;\r\n\t\tuseProposal.endBlock = endBlock;\r\n\t}\r\n\r\n\r\n\r\n\tfunction setAllowAllToken(bool value) public onlyOwner{\r\n\t\tif(isAllowAllToken != value){\r\n\t\t\tisAllowAllToken = value;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tfunction setCreateProposalFee(uint amount) public onlyOwner{\r\n\t\tif(createProposalFee != amount){\r\n\t\t\tcreateProposalFee = amount;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tfunction setDevAddr(address addr) public onlyOwner{\r\n\t\tif(devAddr != addr){\r\n\t\t\tdevAddr = addr;\r\n\t\t}\r\n\t}\r\n\t\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"createAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalCid\",\"type\":\"string\"}],\"name\":\"CreateProposalLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegateLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IDMOAddr\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"delegateToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perVoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteLimit\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createProposalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getRetProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"delegateToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perVoteValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"voteAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteUserNum\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"createAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IDMOVote.retProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllowAllToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"delegateToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perVoteValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"createAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAllowAllToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCreateProposalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"setStartEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"viewMaxAllowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startProposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endProposalId\",\"type\":\"uint256\"}],\"name\":\"viewProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"delegateToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perVoteValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"voteAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteUserNum\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"createAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IDMOVote.retProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"viewUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IDMOVote","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c1b578013499c4c6f2f143a3a30dc09539a2352924d31027e9a0cc8aba0fa274"}]}