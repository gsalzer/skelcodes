{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Overload/ERC20.sol\n\npragma solidity 0.5.12;\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/interface/IBaseOperators.sol\n\n/**\n * @title IBaseOperators\n * @notice Interface for BaseOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ninterface IBaseOperators {\n    function isOperator(address _account) external view returns (bool);\n    function isAdmin(address _account) external view returns (bool);\n    function isSystem(address _account) external view returns (bool);\n    function isRelay(address _account) external view returns (bool);\n    function isMultisig(address _contract) external view returns (bool);\n\n    function confirmFor(address _address) external;\n\n    function addOperator(address _account) external;\n    function removeOperator(address _account) external;\n    function addAdmin(address _account) external;\n    function removeAdmin(address _account) external;\n    function addSystem(address _account) external;\n    function removeSystem(address _account) external;\n    function addRelay(address _account) external;\n    function removeRelay(address _account) external;\n\n    function addOperatorAndAdmin(address _account) external;\n    function removeOperatorAndAdmin(address _account) external;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/Initializable.sol\n\npragma solidity 0.5.12;\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Initializable: Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  function isInitialized() public view returns (bool) {\n    return initialized;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/base/Operatorable.sol\n\n/**\n * @title Operatorable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\n *       contracts.\n */\n\npragma solidity 0.5.12;\n\n\n\ncontract Operatorable is Initializable {\n    IBaseOperators internal operatorsInst;\n    address private operatorsPending;\n\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\n\n    /**\n     * @dev Reverts if sender does not have operator role associated.\n     */\n    modifier onlyOperator() {\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have admin role associated.\n     */\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have system role associated.\n     */\n    modifier onlySystem() {\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have multisig privileges.\n     */\n    modifier onlyMultisig() {\n        require(isMultisig(msg.sender), \"Operatorable: caller does not have multisig role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have admin or system role associated.\n     */\n    modifier onlyAdminOrSystem() {\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have operator or system role associated.\n     */\n    modifier onlyOperatorOrSystem() {\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the relay role associated.\n     */\n\tmodifier onlyRelay() {\n        require(isRelay(msg.sender), \"Operatorable: caller does not have relay role associated\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have relay or operator role associated.\n     */\n\tmodifier onlyOperatorOrRelay() {\n        require(isOperator(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the operator role nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have relay or admin role associated.\n     */\n\tmodifier onlyAdminOrRelay() {\n        require(isAdmin(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the admin role nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the operator, or system, or relay role associated.\n     */\n\tmodifier onlyOperatorOrSystemOrRelay() {\n        require(isOperator(msg.sender) || isSystem(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the operator role nor system nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\n     *       confirmation through the operators contract.\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function initialize(address _baseOperators) public initializer {\n        _setOperatorsContract(_baseOperators);\n    }\n\n    /**\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\n     *       broken and control of the contract can be lost in such case\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\n        operatorsPending = _baseOperators;\n        emit OperatorsContractPending(msg.sender, _baseOperators);\n    }\n\n    /**\n     * @dev The function should be called from new operators contract by admin to insure that operatorsPending address\n     *       is the real contract address.\n     */\n    function confirmOperatorsContract() public {\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\n        _setOperatorsContract(operatorsPending);\n    }\n\n    /**\n     * @return The address of the BaseOperators contract.\n     */\n    function getOperatorsContract() public view returns(address) {\n        return address(operatorsInst);\n    }\n\n    /**\n     * @return The pending address of the BaseOperators contract.\n     */\n    function getOperatorsPending() public view returns(address) {\n        return operatorsPending;\n    }\n\n    /**\n     * @return If '_account' has operator privileges.\n     */\n    function isOperator(address _account) public view returns (bool) {\n        return operatorsInst.isOperator(_account);\n    }\n\n    /**\n     * @return If '_account' has admin privileges.\n     */\n    function isAdmin(address _account) public view returns (bool) {\n        return operatorsInst.isAdmin(_account);\n    }\n\n    /**\n     * @return If '_account' has system privileges.\n     */\n    function isSystem(address _account) public view returns (bool) {\n        return operatorsInst.isSystem(_account);\n    }\n\n    /**\n     * @return If '_account' has relay privileges.\n     */\n    function isRelay(address _account) public view returns (bool) {\n        return operatorsInst.isRelay(_account);\n    }\n\n    /**\n     * @return If '_contract' has multisig privileges.\n     */\n    function isMultisig(address _contract) public view returns (bool) {\n        return operatorsInst.isMultisig(_contract);\n    }\n\n    /**\n     * @return If '_account' has admin or system privileges.\n     */\n    function isAdminOrSystem(address _account) public view returns (bool) {\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\n    }\n\n    /**\n     * @return If '_account' has operator or system privileges.\n     */\n    function isOperatorOrSystem(address _account) public view returns (bool) {\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _setOperatorsContract(address _baseOperators) internal {\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\n        operatorsInst = IBaseOperators(_baseOperators);\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/interface/IWhitelist.sol\n\npragma solidity 0.5.12;\n\n/**\n * @title IWhitelist\n * @notice Interface for Whitelist contract\n */\ncontract IWhitelist {\n    function isWhitelisted(address _account) external view returns (bool);\n    function toggleWhitelist(address _account, bool _toggled) external;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/instance/Whitelistable.sol\n\n/**\n * @title Whitelistable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Whitelistable contract stores the Whitelist contract address, and modifiers for\n *       contracts.\n */\n\npragma solidity 0.5.12;\n\n\n\n\ncontract Whitelistable is Initializable, Operatorable {\n    IWhitelist internal whitelistInst;\n    address private whitelistPending;\n\n    event WhitelistContractChanged(address indexed caller, address indexed whitelistAddress);\n    event WhitelistContractPending(address indexed caller, address indexed whitelistAddress);\n\n    /**\n     * @dev Reverts if _account is not whitelisted.\n     * @param _account address to determine if whitelisted.\n     */\n    modifier whenWhitelisted(address _account) {\n        require(isWhitelisted(_account), \"Whitelistable: account is not whitelisted\");\n        _;\n    }\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setWhitelistContract function can be called only by Admin role with\n     *       confirmation through the whitelist contract.\n     * @param _whitelist Whitelist contract address.\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function initialize(address _baseOperators, address _whitelist) public initializer {\n        _setOperatorsContract(_baseOperators);\n        _setWhitelistContract(_whitelist);\n    }\n\n    /**\n     * @dev Set the new the address of Whitelist contract, should be confirmed from whitelist contract by calling confirmFor(addr)\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\n     *       broken and control of the contract can be lost in such case\n     * @param _whitelist Whitelist contract address.\n     */\n    function setWhitelistContract(address _whitelist) public onlyAdmin {\n        require(_whitelist != address(0), \"Whitelistable: address of new whitelist contract can not be zero\");\n        whitelistPending = _whitelist;\n        emit WhitelistContractPending(msg.sender, _whitelist);\n    }\n\n    /**\n     * @dev The function should be called from new whitelist contract by admin to insure that whitelistPending address\n     *       is the real contract address.\n     */\n    function confirmWhitelistContract() public {\n        require(whitelistPending != address(0), \"Whitelistable: address of new whitelist contract can not be zero\");\n        require(msg.sender == whitelistPending, \"Whitelistable: should be called from new whitelist contract\");\n        _setWhitelistContract(whitelistPending);\n    }\n\n    /**\n     * @return The address of the Whitelist contract.\n     */\n    function getWhitelistContract() public view returns(address) {\n        return address(whitelistInst);\n    }\n\n    /**\n     * @return The pending address of the Whitelist contract.\n     */\n    function getWhitelistPending() public view returns(address) {\n        return whitelistPending;\n    }\n\n    /**\n     * @return If '_account' is whitelisted.\n     */\n    function isWhitelisted(address _account) public view returns (bool) {\n        return whitelistInst.isWhitelisted(_account);\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _setWhitelistContract(address _whitelist) internal {\n        require(_whitelist != address(0), \"Whitelistable: address of new whitelist contract cannot be zero\");\n        whitelistInst = IWhitelist(_whitelist);\n        emit WhitelistContractChanged(msg.sender, _whitelist);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Whitelist.sol\n\n/**\n * @title ERC20Whitelist\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Overloading ERC20 functions to ensure that addresses attempting to particular\n * actions are whitelisted.\n */\n\npragma solidity 0.5.12;\n\n\n\n\ncontract ERC20Whitelist is ERC20, Whitelistable {\n\n    /**\n     * @dev Overload transfer function to validate sender and receiver are whitelisted.\n     * @param to address that recieves the funds.\n     * @param value amount of funds.\n     */\n    function transfer(address to, uint256 value) public whenWhitelisted(msg.sender) whenWhitelisted(to) returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    /**\n     * @dev Overload approve function to validate sender and spender are whitelisted.\n     * @param spender address that can spend the funds.\n     * @param value amount of funds.\n     */\n    function approve(address spender, uint256 value) public whenWhitelisted(msg.sender) whenWhitelisted(spender) returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    /**\n     * @dev Overload transferFrom function to validate sender, from and receiver are whitelisted.\n     * @param from address that funds will be transferred from.\n     * @param to address that funds will be transferred to.\n     * @param value amount of funds.\n     */\n    function transferFrom(address from, address to, uint256 value) public whenWhitelisted(msg.sender) whenWhitelisted(from) whenWhitelisted(to) returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    /**\n     * @dev Overload increaseAllowance validate sender and spender are whitelisted.\n     * @param spender address that will be allowed to transfer funds.\n     * @param addedValue amount of funds to added to current allowance.\n     */\n    function increaseAllowance(address spender, uint addedValue) public whenWhitelisted(spender) whenWhitelisted(msg.sender) returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    /**\n     * @dev Overload decreaseAllowance validate sender and spender are whitelisted.\n     * @param spender address that will be allowed to transfer funds.\n     * @param subtractedValue amount of funds to be deducted to current allowance.\n     */\n    function decreaseAllowance(address spender, uint subtractedValue) public whenWhitelisted(spender) whenWhitelisted(msg.sender) returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n\n    /**\n     * @dev Overload _burn function to ensure that account has been whitelisted.\n     * @param account address that funds will be burned from.\n     * @param value amount of funds that will be burned.\n     */\n    function _burn(address account, uint256 value) internal whenWhitelisted(account) {\n        super._burn(account, value);\n    }\n\n    /**\n     * @dev Overload _burnFrom function to ensure sender and account have been whitelisted.\n     * @param account address that funds will be burned from allowance.\n     * @param amount amount of funds that will be burned.\n     */\n    function _burnFrom(address account, uint256 amount) internal whenWhitelisted(msg.sender) whenWhitelisted(account) {\n        super._burnFrom(account, amount);\n    }\n\n    /**\n     * @dev Overload _mint function to ensure account has been whitelisted.\n     * @param account address that funds will be minted to.\n     * @param amount amount of funds that will be minted.\n     */\n    function _mint(address account, uint256 amount) internal whenWhitelisted(account) {\n        super._mint(account, amount);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/interface/ITraderOperators.sol\n\n/**\n * @title ITraderOperators\n * @notice Interface for TraderOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ncontract ITraderOperators {\n    function isTrader(address _account) external view returns (bool);\n    function addTrader(address _account) external;\n    function removeTrader(address _account) external;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/trader/TraderOperatorable.sol\n\n/**\n * @title TraderOperatorable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev TraderOperatorable contract stores TraderOperators contract address, and modifiers for\n *      contracts.\n */\n\npragma solidity 0.5.12;\n\n\n\n\n\ncontract TraderOperatorable is Operatorable {\n    ITraderOperators internal traderOperatorsInst;\n    address private traderOperatorsPending;\n\n    event TraderOperatorsContractChanged(address indexed caller, address indexed traderOperatorsAddress);\n    event TraderOperatorsContractPending(address indexed caller, address indexed traderOperatorsAddress);\n\n    /**\n     * @dev Reverts if sender does not have the trader role associated.\n     */\n\tmodifier onlyTrader() {\n        require(isTrader(msg.sender), \"TraderOperatorable: caller is not trader\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the operator or trader role associated.\n     */\n    modifier onlyOperatorOrTraderOrSystem() {\n        require(isOperator(msg.sender) || isTrader(msg.sender) || isSystem(msg.sender), \"TraderOperatorable: caller is not trader or operator or system\");\n        _;\n    }\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setTradersOperatorsContract function can be called only by Admin role with\n     * confirmation through the operators contract.\n     * @param _baseOperators BaseOperators contract address.\n     * @param _traderOperators TraderOperators contract address.\n     */\n    function initialize(address _baseOperators, address _traderOperators) public initializer {\n        super.initialize(_baseOperators);\n        _setTraderOperatorsContract(_traderOperators);\n    }\n\n    /**\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\n     * broken and control of the contract can be lost in such case\n     * @param _traderOperators TradeOperators contract address.\n     */\n    function setTraderOperatorsContract(address _traderOperators) public onlyAdmin {\n        require(_traderOperators != address(0), \"TraderOperatorable: address of new traderOperators contract can not be zero\");\n        traderOperatorsPending = _traderOperators;\n        emit TraderOperatorsContractPending(msg.sender, _traderOperators);\n    }\n\n    /**\n     * @dev The function should be called from new operators contract by admin to insure that traderOperatorsPending address\n     *       is the real contract address.\n     */\n    function confirmTraderOperatorsContract() public {\n        require(traderOperatorsPending != address(0), \"TraderOperatorable: address of pending traderOperators contract can not be zero\");\n        require(msg.sender == traderOperatorsPending, \"TraderOperatorable: should be called from new traderOperators contract\");\n        _setTraderOperatorsContract(traderOperatorsPending);\n    }\n\n    /**\n     * @return The address of the TraderOperators contract.\n     */\n    function getTraderOperatorsContract() public view returns(address) {\n        return address(traderOperatorsInst);\n    }\n\n    /**\n     * @return The pending TraderOperators contract address\n     */\n    function getTraderOperatorsPending() public view returns(address) {\n        return traderOperatorsPending;\n    }\n\n    /**\n     * @return If '_account' has trader privileges.\n     */\n    function isTrader(address _account) public view returns (bool) {\n        return traderOperatorsInst.isTrader(_account);\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _setTraderOperatorsContract(address _traderOperators) internal {\n        require(_traderOperators != address(0), \"TraderOperatorable: address of new traderOperators contract can not be zero\");\n        traderOperatorsInst = ITraderOperators(_traderOperators);\n        emit TraderOperatorsContractChanged(msg.sender, _traderOperators);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/Pausable.sol\n\n/**\n * @title Pausable\n * @author Connor Howe <connor.howe@sygnum.com>\n * @dev Contract module which allows children to implement an emergency stop\n *      mechanism that can be triggered by an authorized account in the TraderOperatorable\n *      contract.\n */\npragma solidity 0.5.12;\n\n\ncontract Pausable is TraderOperatorable {\n    event Paused(address indexed account);\n    event Unpaused(address indexed account);\n\n    bool internal _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Reverts if contract is paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by operator to pause child contract. The contract\n     *      must not already be paused.\n     */\n    function pause() public onlyOperatorOrTraderOrSystem whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /** @dev Called by operator to pause child contract. The contract\n     *       must already be paused.\n     */\n    function unpause() public onlyOperatorOrTraderOrSystem whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    /**\n     * @return If child contract is already paused or not.\n     */\n    function isPaused() public view returns(bool){\n        return _paused;\n    }\n\n    /**\n     * @return If child contract is not paused.\n     */\n    function isNotPaused() public view returns(bool){\n        return !_paused;\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Pausable.sol\n\n/**\n * @title ERC20Pausable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Overloading ERC20 functions to ensure that the contract has not been paused.\n */\n\npragma solidity 0.5.12;\n\n\n\n\ncontract ERC20Pausable is ERC20, Pausable {\n\n    /**\n     * @dev Overload transfer function to ensure contract has not been paused.\n     * @param to address that recieves the funds.\n     * @param value amount of funds.\n     */\n   function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    /**\n     * @dev Overload approve function to ensure contract has not been paused.\n     * @param spender address that can spend the funds.\n     * @param value amount of funds.\n     */\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    /**\n     * @dev Overload transferFrom function to ensure contract has not been paused.\n     * @param from address that funds will be transferred from.\n     * @param to address that funds will be transferred to.\n     * @param value amount of funds.\n     */\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    /**\n     * @dev Overload increaseAllowance function to ensure contract has not been paused.\n     * @param spender address that will be allowed to transfer funds.\n     * @param addedValue amount of funds to added to current allowance.\n     */\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    /**\n     * @dev Overload decreaseAllowance function to ensure contract has not been paused.\n     * @param spender address that will be allowed to transfer funds.\n     * @param subtractedValue amount of funds to be deducted to current allowance.\n     */\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n\n    /**\n     * @dev Overload _burn function to ensure contract has not been paused.\n     * @param account address that funds will be burned from.\n     * @param value amount of funds that will be burned.\n     */\n    function _burn(address account, uint256 value) internal whenNotPaused {\n        super._burn(account, value);\n    }\n\n    /**\n     * @dev Overload _burnFrom function to ensure contract has not been paused.\n     * @param account address that funds will be burned from allowance.\n     * @param amount amount of funds that will be burned.\n     */\n    function _burnFrom(address account, uint256 amount) internal whenNotPaused {\n        super._burnFrom(account, amount);\n    }\n\n    /**\n     * @dev Overload _mint function to ensure contract has not been paused.\n     * @param account address that funds will be minted to.\n     * @param amount amount of funds that will be minted.\n     */\n    function _mint(address account, uint256 amount) internal whenNotPaused {\n        super._mint(account, amount);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/Freezable.sol\n\n/**\n * @title Freezable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Freezable contract to freeze functionality for particular addresses.  Freezing/unfreezing is controlled\n *       by operators in Operatorable contract which is initialized with the relevant BaseOperators address.\n */\n\npragma solidity 0.5.12;\n\n\ncontract Freezable is Operatorable {\n    mapping(address => bool) public frozen;\n\n    event FreezeToggled(address indexed account, bool frozen);\n\n    /**\n     * @dev Reverts if address is empty.\n     * @param _address address to validate.\n     */\n    modifier onlyValidAddress(address _address) {\n        require(_address != address(0), \"Freezable: Empty address\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if account address is frozen.\n     * @param _account address to validate is not frozen.\n     */\n    modifier whenNotFrozen(address _account) {\n        require(!frozen[_account], \"Freezable: account is frozen\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if account address is not frozen.\n     * @param _account address to validate is frozen.\n     */\n    modifier whenFrozen(address _account) {\n        require(frozen[_account], \"Freezable: account is not frozen\");\n        _;\n    }\n\n    /**\n     * @dev Getter to determine if address is frozen.\n     * @param _account address to determine if frozen or not.\n     * @return bool is frozen\n     */\n    function isFrozen(address _account) public view returns (bool) {\n        return frozen[_account];\n    }\n\n    /**\n     * @dev Toggle freeze/unfreeze on _account address, with _toggled being true/false.\n     * @param _account address to toggle.\n     * @param _toggled freeze/unfreeze.\n     */\n    function toggleFreeze(address _account, bool _toggled)\n        public\n        onlyValidAddress(_account)\n        onlyOperator\n    {\n        frozen[_account] = _toggled;\n        emit FreezeToggled(_account, _toggled);\n    }\n\n    /**\n     * @dev Batch freeze/unfreeze multiple addresses, with _toggled being true/false.\n     * @param _addresses address array.\n     * @param _toggled freeze/unfreeze.\n     */\n    function batchToggleFreeze(address[] memory _addresses, bool _toggled) public {\n        require(_addresses.length <= 256, \"Freezable: batch count is greater than 256\");\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            toggleFreeze(_addresses[i], _toggled);\n        }\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Freezable.sol\n\n/**\n * @title ERC20Freezable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Overloading ERC20 functions to ensure client addresses are not frozen for particular actions.\n */\n\npragma solidity 0.5.12;\n\n\n\n\ncontract ERC20Freezable is ERC20, Freezable {\n\n    /**\n     * @dev Overload transfer function to ensure sender and receiver have not been frozen.\n     * @param to address that recieves the funds.\n     * @param value amount of funds.\n     */\n   function transfer(address to, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(to) returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    /**\n     * @dev Overload approve function to ensure sender and receiver have not been frozen.\n     * @param spender address that can spend the funds.\n     * @param value amount of funds.\n     */\n    function approve(address spender, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    /**\n     * @dev Overload transferFrom function to ensure sender, approver and receiver have not been frozen.\n     * @param from address that funds will be transferred from.\n     * @param to address that funds will be transferred to.\n     * @param value amount of funds.\n     */\n    function transferFrom(address from, address to, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(from) whenNotFrozen(to) returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    /**\n     * @dev Overload increaseAllowance function to ensure sender and spender have not been frozen.\n     * @param spender address that will be allowed to transfer funds.\n     * @param addedValue amount of funds to added to current allowance.\n     */\n    function increaseAllowance(address spender, uint addedValue) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    /**\n     * @dev Overload decreaseAllowance function to ensure sender and spender have not been frozen.\n     * @param spender address that will be allowed to transfer funds.\n     * @param subtractedValue amount of funds to be deducted to current allowance.\n     */\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n\n    /**\n     * @dev Overload _burnfrom function to ensure sender and user to be burned from have not been frozen.\n     * @param account account that funds will be burned from.\n     * @param amount amount of funds to be burned.\n     */\n    function _burnFrom(address account, uint256 amount) internal whenNotFrozen(msg.sender) whenNotFrozen(account) {\n        super._burnFrom(account, amount);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Mintable.sol\n\n/**\n * @title ERC20Mintable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev For blocking and unblocking particular user funds.\n */\n\npragma solidity 0.5.12;\n\n\n\n\ncontract ERC20Mintable is ERC20, Operatorable {\n    \n    /**\n     * @dev Overload _mint to ensure only operator or system can mint funds.\n     * @param account address that will recieve new funds.\n     * @param amount of funds to be minted.\n     */\n    function _mint(address account, uint256 amount) internal onlyOperatorOrSystem {\n        require(amount > 0, 'ERC20Mintable: amount has to be greater than 0');\n        super._mint(account, amount);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Snapshot.sol\n\n/**\n * @title ERC20Snapshot\n * @author Connor Howe <connor.howe@sygnum.com>\n * @notice Records historical balances.\n */\npragma solidity 0.5.12;\n\n\n\n\ncontract ERC20Snapshot is ERC20 {\n    using SafeMath for uint256;\n\n    /**\n    * @dev `Snapshot` is the structure that attaches a block number to a\n    * given value. The block number attached is the one that last changed the value\n    */\n    struct Snapshot {\n        uint256 fromBlock;  // `fromBlock` is the block number at which the value was generated from\n        uint256 value;  // `value` is the amount of tokens at a specific block number\n    }\n\n    /**\n    * @dev `_snapshotBalances` is the map that tracks the balance of each address, in this\n    * contract when the balance changes the block number that the change\n    * occurred is also included in the map\n    */\n    mapping (address => Snapshot[]) private _snapshotBalances;\n\n    // Tracks the history of the `totalSupply` of the token\n    Snapshot[] private _snapshotTotalSupply;\n\n    /**\n    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    * @param _owner The address from which the balance will be retrieved\n    * @param _blockNumber The block number when the balance is queried\n    * @return The balance at `_blockNumber`\n    */\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint256) {\n        return getValueAt(_snapshotBalances[_owner], _blockNumber);\n    }\n\n    /**\n    * @dev Total amount of tokens at a specific `_blockNumber`.\n    * @param _blockNumber The block number when the totalSupply is queried\n    * @return The total amount of tokens at `_blockNumber`\n    */\n    function totalSupplyAt(uint _blockNumber) public view returns(uint256) {\n        return getValueAt(_snapshotTotalSupply, _blockNumber);\n    }\n\n    /**\n    * @dev `getValueAt` retrieves the number of tokens at a given block number\n    * @param checkpoints The history of values being queried\n    * @param _block The block number to retrieve the value at\n    * @return The number of tokens being queried\n    */\n    function getValueAt(Snapshot[] storage checkpoints, uint _block) internal view returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock) {\n            return checkpoints[checkpoints.length.sub(1)].value;\n        }\n\n        if (_block < checkpoints[0].fromBlock) {\n            return 0;\n        }\n\n        // Binary search of the value in the array\n        uint min;\n        uint max = checkpoints.length.sub(1);\n\n        while (max > min) {\n            uint mid = (max.add(min).add(1)).div(2);\n            if (checkpoints[mid].fromBlock <= _block) {\n                min = mid;\n            } else {\n                max = mid.sub(1);\n            }\n        }\n\n        return checkpoints[min].value;\n    }\n\n    /**\n    * @dev `updateValueAtNow` used to update the `_snapshotBalances` map and the `_snapshotTotalSupply`\n    * @param checkpoints The history of data being updated\n    * @param _value The new number of tokens\n    */\n    function updateValueAtNow(Snapshot[] storage checkpoints, uint _value) internal {\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\n            checkpoints.push(Snapshot(block.number, _value));\n        } else {\n            checkpoints[checkpoints.length.sub(1)].value = _value;\n        }\n    }\n\n    /**\n    * @dev Internal function that transfers an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param to The account that will receive the created tokens.\n    * @param value The amount that will be created.\n    */\n    function transfer(address to, uint256 value) public returns(bool result){\n        result = super.transfer(to, value);\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\n        updateValueAtNow(_snapshotBalances[msg.sender], balanceOf(msg.sender));\n        updateValueAtNow(_snapshotBalances[to], balanceOf(to));\n    }\n\n    /**\n    * @dev Internal function that transfers an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param from The account that funds will be taken from.\n    * @param to The account that funds will be given too.\n    * @param value The amount of funds to be transferred..\n    */\n    function transferFrom(address from, address to, uint256 value) public returns(bool result){\n        result = super.transferFrom(from, to, value);\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\n        updateValueAtNow(_snapshotBalances[from], balanceOf(from));\n        updateValueAtNow(_snapshotBalances[to], balanceOf(to));\n    }\n\n    /**\n    * @dev Internal function that confiscates an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param confiscatee The account that funds will be taken from.\n    * @param receiver The account that funds will be given too.\n    * @param amount The amount of funds to be transferred..\n    */\n    function _confiscate(address confiscatee, address receiver, uint256 amount) internal {\n        super._transfer(confiscatee, receiver, amount);\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\n        updateValueAtNow(_snapshotBalances[confiscatee], balanceOf(confiscatee));\n        updateValueAtNow(_snapshotBalances[receiver], balanceOf(receiver));\n    }\n\n    /**\n    * @dev Internal function that mints an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param account The account that will receive the created tokens.\n    * @param amount The amount that will be created.\n    */\n    function _mint(address account, uint256 amount) internal {\n        super._mint(account, amount);\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\n        updateValueAtNow(_snapshotBalances[account], balanceOf(account));\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account.\n    * @param account The account whose tokens will be burnt.\n    * @param amount The amount that will be burnt.\n    */\n    function _burn(address account, uint256 amount) internal {\n        super._burn(account, amount);\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\n        updateValueAtNow(_snapshotBalances[account], balanceOf(account));\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account.\n    * @param account The account whose tokens will be burnt.\n    * @param amount The amount that will be burnt.\n    */\n    function _burnFor(address account, uint256 amount) internal {\n        super._burn(account, amount);\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\n        updateValueAtNow(_snapshotBalances[account], balanceOf(account));\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account, deducting from the sender's allowance for said account. Uses the\n    * internal burn function.\n    * @param account The account whose tokens will be burnt.\n    * @param amount The amount that will be burnt.\n    */\n    function _burnFrom(address account, uint256 amount) internal {\n        super._burnFrom(account, amount);\n        updateValueAtNow(_snapshotTotalSupply, totalSupply());\n        updateValueAtNow(_snapshotBalances[account], balanceOf(account));\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Burnable.sol\n\n/**\n * @title ERC20Burnable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev For burning funds from particular user addresses.\n */\n\npragma solidity 0.5.12;\n\n\n\n\ncontract ERC20Burnable is ERC20Snapshot, Operatorable {\n\n    /**\n     * @dev Overload ERC20 _burnFor, burning funds from a particular users address.\n     * @param account address to burn funds from.\n     * @param amount of funds to burn.\n     */\n\n    function _burnFor(address account, uint256 amount) internal onlyOperator {\n        super._burn(account, amount);\n    }\n}\n\n// File: contracts/edge/EdgeToken.sol\n\n/**\n * @title EdgeToken\n * @author Connor Howe <connor.howe@sygnum.com>\n * @dev EdgeToken is a ERC20 token that is upgradable and pausable.\n *      User addresses require to be whitelisted for transfers\n *      to execute.  Addresses can be frozen, and funds from\n *      particular addresses can be confiscated.\n */\npragma solidity 0.5.12;\n\n\n\n\n\n\n\n\n\n\ncontract EdgeToken is ERC20, ERC20Detailed(\"Digital CHF\", \"DCHF\", 2), Initializable, ERC20Pausable,\n                        ERC20Whitelist, ERC20Freezable, ERC20Mintable, ERC20Burnable {\n\n    event Minted(address indexed minter, address indexed account, uint256 value);\n    event Burned(address indexed burner, uint256 value);\n    event BurnedFor(address indexed burner, address indexed account, uint256 value);\n\n    uint16 constant BATCH_LIMIT = 256;\n\n    /**\n     * @dev Initialization instead of constructor, only called once.\n     * @param _baseOperators Address of baseOperators contract.\n     */\n    function initialize(address _baseOperators, address _whitelist) public initializer {\n        super.initialize(_baseOperators, _whitelist);\n    }\n\n    /**\n    * @dev Burn.\n    * @param _amount Amount of tokens to burn.\n    */\n    function burn(uint256 _amount) public {\n        require(!isFrozen(msg.sender), \"EdgeToken: Account must not be frozen\");\n        super._burn(msg.sender, _amount);\n        emit Burned(msg.sender, _amount);\n    }\n\n    /**\n    * @dev BurnFor.\n    * @param _account Account to burn tokens from.\n    * @param _amount Amount of tokens to burn.\n    */\n    function burnFor(address _account, uint256 _amount) public {\n        super._burnFor(_account, _amount);\n        emit BurnedFor(msg.sender, _account, _amount);\n    }\n\n    /**\n    * @dev burnFrom.\n    * @param _account Account to burn from.\n    * @param _amount Amount of tokens to burn.\n    */\n    function burnFrom(address _account, uint256 _amount) public {\n        super._burnFrom(_account, _amount);\n        emit Burned(_account, _amount);\n    }\n\n    /**\n    * @dev Mint.\n    * @param _account Address to mint tokens to.\n    * @param _amount Amount to mint.\n    */\n    function mint(address _account, uint256 _amount) public {\n        if(isSystem(msg.sender)){\n            require(!isFrozen(_account), 'EdgeToken: Account must be frozen if system calling.');\n        }\n        super._mint(_account, _amount);\n        emit Minted(msg.sender, _account, _amount);\n    }\n\n    /**\n    * @dev confiscate.\n    * @param _confiscatee Account to confiscate funds from.\n    * @param _receiver Account to transfer confiscated funds too.\n    * @param _amount Amount of tokens to burn.\n    */\n    function confiscate(address _confiscatee, address _receiver, uint256 _amount)\n        public\n        onlyOperator\n        whenNotPaused\n        whenWhitelisted(_receiver)\n        whenWhitelisted(_confiscatee)\n    {\n        super._transfer(_confiscatee, _receiver, _amount);\n     }\n\n    /**\n     * @dev Batch burn from an operator or admin address.\n     * @param _recipients Array of recipient addresses.\n     * @param _values Array of amount to burn.\n     */\n    function batchBurnFor(address[] memory _recipients, uint256[] memory _values) public {\n        require(_recipients.length == _values.length, \"EdgeToken: values and recipients are not equal.\");\n        require(_recipients.length <= BATCH_LIMIT, \"EdgeToken: batch count is greater than BATCH_LIMIT.\");\n        for(uint256 i = 0; i < _recipients.length; i++) {\n            burnFor(_recipients[i], _values[i]);\n        }\n    }\n\n     /**\n     * @dev Batch mint to a maximum of 255 addresses, for a custom amount for each address.\n     * @param _recipients Array of recipient addresses.\n     * @param _values Array of amount to mint.\n     */\n    function batchMint(address[] memory _recipients, uint256[] memory _values) public {\n        require(_recipients.length == _values.length, \"EdgeToken: values and recipients are not equal.\");\n        require(_recipients.length <= BATCH_LIMIT, \"EdgeToken: greater than BATCH_LIMIT.\");\n        for(uint256 i = 0; i < _recipients.length; i++) {\n            mint(_recipients[i], _values[i]);\n        }\n    }\n\n     /**\n    * @dev Batch confiscate to a macimum of 255 addresses. \n    * @param _confiscatees array addresses who's funds are being confiscated\n    * @param _receivers array addresses who's receiving the funds\n    * @param _values array of values of funds being confiscated\n    */\n    function batchConfiscate(address[] memory _confiscatees, address[] memory _receivers, uint256[] memory _values) public {\n        require(_confiscatees.length == _values.length && _receivers.length == _values.length, \"EdgeToken: values and recipients are not equal\");\n        require(_confiscatees.length <= BATCH_LIMIT, \"EdgeToken: batch count is greater than BATCH_LIMIT\");\n        for(uint256 i = 0; i < _confiscatees.length; i++) {\n            confiscate(_confiscatees[i], _receivers[i], _values[i]);\n        }\n    }\n}\n\n// File: contracts/edge/upgrade/prd/constructor/EdgeTokenConstructorUpgrade.sol\n\n/**\n * @title EdgeTokenConstructor\n * @author Connor Howe <connor.howe@sygnum.com> \n * @dev This contract will be used in the first version of upgrading the EdgeToken to mitigate\n *      variables initialized in EdgeToken.sol constructor '_name, _symbol, _decimals' that are\n *      not initialized inside of EdgeTokenProxy.sol.  Additionally, as '_name, symbol, _decimals'\n *      were declared private, the getter functions 'name(), symbol(), decimals()' required to be\n *      overloaded to point to the correct/new/overloaded variables.\n*/\npragma solidity 0.5.12;\n\n\ncontract EdgeTokenConstructorUpgrade is EdgeToken {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    bool public initializedConstructorUpgrade;\n\n    function initializeConstructor() public {\n      require(!initializedConstructorUpgrade, \"EdgeTokenConstructorUpgrade: already initialized\");\n      _name = \"Digital CHF\";\n      _symbol = \"DCHF\";\n      _decimals = 2;\n      initializedConstructorUpgrade = true;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/edge/upgrade/tst/whitelistable/EdgeTokenWhitelistableUpgrade.sol\n\n/**\n * @title EdgeTokenConstructor\n * @author Connor Howe <connor.howe@sygnum.com>\n * @dev This contract will the used in the second upgrade done to EDGE for whitelistable integration.\n *      Meaning the token will point to another whitelist contract, and not have a whitelist\n *      integrated into the token itself(i.e. the token being the whitelist).\n */\npragma solidity 0.5.12;\n\n\ncontract EdgeTokenWhitelistableUpgrade is EdgeTokenConstructorUpgrade {\n    bool public initializedWhitelistableUpgrade;\n\n    function initializeWhitelist(address _whitelist) public {\n      require(!initializedWhitelistableUpgrade, \"EdgeTokenWhitelistableUpgrade: already initialized\");\n      _setWhitelistContract(_whitelist);\n      initializedWhitelistableUpgrade = true;\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/interface/IBlockerOperators.sol\n\n/**\n * @title IBlockerOperators\n * @notice Interface for BlockerOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ncontract IBlockerOperators {\n    function isBlocker(address _account) external view returns (bool);\n    function addBlocker(address _account) external;\n    function removeBlocker(address _account) external;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/blocker/BlockerOperatorable.sol\n\n/**\n * @title BlockerOperatorable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev BlockerOperatorable contract stores BlockerOperators contract address, and modifiers for\n *      contracts.\n */\n\npragma solidity 0.5.12;\n\n\n\n\n\ncontract BlockerOperatorable is Operatorable {\n    IBlockerOperators internal blockerOperatorsInst;\n    address private blockerOperatorsPending;\n\n    event BlockerOperatorsContractChanged(address indexed caller, address indexed blockerOperatorAddress);\n    event BlockerOperatorsContractPending(address indexed caller, address indexed blockerOperatorAddress);\n\n    /**\n     * @dev Reverts if sender does not have the blocker role associated.\n     */\n\tmodifier onlyBlocker() {\n        require(isBlocker(msg.sender), \"BlockerOperatorable: caller is not blocker role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the blocker or operator role associated.\n     */\n\tmodifier onlyBlockerOrOperator() {\n        require(isBlocker(msg.sender) || isOperator(msg.sender), \"BlockerOperatorable: caller is not blocker or operator role\");\n        _;\n    }\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setBlockerOperatorsContract function can be called only by Admin role with\n     * confirmation through the operators contract.\n     * @param _baseOperators BaseOperators contract address.\n     * @param _blockerOperators BlockerOperators contract address.\n     */\n    function initialize(address _baseOperators, address _blockerOperators) public initializer {\n        super.initialize(_baseOperators);\n        _setBlockerOperatorsContract(_blockerOperators);\n    }\n\n    /**\n     * @dev Set the new the address of BlockerOperators contract, should be confirmed from BlockerOperators contract by calling confirmFor(addr)\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\n     * broken and control of the contract can be lost in such case.\n     * @param _blockerOperators BlockerOperators contract address.\n     */\n    function setBlockerOperatorsContract(address _blockerOperators) public onlyAdmin {\n        require(_blockerOperators != address(0), \"BlockerOperatorable: address of new blockerOperators contract can not be zero.\");\n        blockerOperatorsPending = _blockerOperators;\n        emit BlockerOperatorsContractPending(msg.sender, _blockerOperators);\n    }\n\n    /**\n     * @dev The function should be called from new BlockerOperators contract by admin to insure that blockerOperatorsPending address\n     *       is the real contract address.\n     */\n    function confirmBlockerOperatorsContract() public {\n        require(blockerOperatorsPending != address(0), \"BlockerOperatorable: address of pending blockerOperators contract can not be zero\");\n        require(msg.sender == blockerOperatorsPending, \"BlockerOperatorable: should be called from new blockerOperators contract\");\n        _setBlockerOperatorsContract(blockerOperatorsPending);\n    }\n\n    /**\n     * @return The address of the BlockerOperators contract.\n     */\n    function getBlockerOperatorsContract() public view returns(address) {\n        return address(blockerOperatorsInst);\n    }\n\n    /**\n     * @return The pending BlockerOperators contract address\n     */\n    function getBlockerOperatorsPending() public view returns(address) {\n        return blockerOperatorsPending;\n    }\n\n    /**\n     * @return If '_account' has blocker privileges.\n     */\n    function isBlocker(address _account) public view returns (bool) {\n        return blockerOperatorsInst.isBlocker(_account);\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _setBlockerOperatorsContract(address _blockerOperators) internal {\n        require(_blockerOperators != address(0), \"BlockerOperatorable: address of new blockerOperators contract can not be zero\");\n        blockerOperatorsInst = IBlockerOperators(_blockerOperators);\n        emit BlockerOperatorsContractChanged(msg.sender, _blockerOperators);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Blockable.sol\n\n/**\n * @title ERC20Blockable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev For blocking and unblocking particular user funds.\n */\n\npragma solidity 0.5.12;\n\n\n\ncontract ERC20Blockable is ERC20, BlockerOperatorable {\n    uint256 public totalBlockedBalance;\n\n    mapping (address => uint256) public _blockedBalances;\n\n    event Blocked(address indexed blocker, address indexed account, uint256 value);\n    event UnBlocked(address indexed blocker, address indexed account, uint256 value);\n\n    /**\n     * @dev Block funds, and move funds from _balances into _blockedBalances.  \n     * @param _account address to block funds.\n     * @param _amount of funds to block.\n     */\n    function block(address _account, uint256 _amount) public onlyBlockerOrOperator {\n        _balances[_account] = _balances[_account].sub(_amount);\n        _blockedBalances[_account] = _blockedBalances[_account].add(_amount);\n\n        totalBlockedBalance = totalBlockedBalance.add(_amount);\n        emit Blocked(msg.sender, _account, _amount);\n    }\n\n    /**\n     * @dev Unblock funds, and move funds from _blockedBalances into _balances.  \n     * @param _account address to unblock funds.\n     * @param _amount of funds to unblock.\n     */\n    function unblock(address _account, uint256 _amount) public onlyBlockerOrOperator {\n        _balances[_account] = _balances[_account].add(_amount);\n        _blockedBalances[_account] = _blockedBalances[_account].sub(_amount);\n\n        totalBlockedBalance = totalBlockedBalance.sub(_amount);\n        emit UnBlocked(msg.sender, _account, _amount);\n    }\n\n    /**\n     * @dev Getter for the amount of blocked balance for a particular address.\n     * @param _account address to get blocked balance.\n     * @return amount of blocked balance.\n     */\n    function blockedBalanceOf(address _account) public view returns (uint256) {\n        return _blockedBalances[_account];\n    }\n\n    /**\n     * @dev Getter for the total amount of blocked funds for all users.\n     * @return amount of total blocked balance.\n     */\n    function getTotalBlockedBalance() public view returns (uint256) {\n        return totalBlockedBalance;\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/ERC20/ERC20Tradeable.sol\n\n/**\n * @title ERC20Tradeable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Trader accounts can approve particular addresses on behalf of a user.\n */\n\npragma solidity 0.5.12;\n\n\n\ncontract ERC20Tradeable is ERC20, TraderOperatorable {\n\n    /**\n     * @dev Trader can approve users balance to a particular address for a particular amount.\n     * @param _owner address that approves the funds.\n     * @param _spender address that spends the funds.\n     * @param _value amount of funds.\n     */\n    function approveOnBehalf(address _owner, address _spender, uint256 _value) public onlyTrader {\n        super._approve(_owner, _spender, _value);\n    }\n}\n\n// File: contracts/edge/upgrade/tst/blockUnblockTrader/EdgeTokenBlockUnblockTraderUpgrade.sol\n\n/**\n * @title EdgeTokenBlockUnblockTraderUpgrade\n * @author Connor Howe <connor.howe@sygnum.com> \n * @dev This contract will the used in the third upgrade done to EDGE for block/unblock/trader integration.\n */\npragma solidity 0.5.12;\n\n\n\n\ncontract EdgeTokenBlockUnblockTraderUpgrade is EdgeTokenWhitelistableUpgrade, ERC20Blockable, ERC20Tradeable {\n    bool public initializedBlockUnblockTraderUpgrade;\n\n    function initializeBlockerTraderOperators(address _blockerOperators, address _traderOperators) public {\n        require(!initializedBlockUnblockTraderUpgrade, \"EdgeTokenBlockUnblockTraderUpgrade: already initialized\");\n        _setBlockerOperatorsContract(_blockerOperators);\n        _setTraderOperatorsContract(_traderOperators);\n        initializedBlockUnblockTraderUpgrade = true;\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blocker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Blocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blockerOperatorAddress\",\"type\":\"address\"}],\"name\":\"BlockerOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blockerOperatorAddress\",\"type\":\"address\"}],\"name\":\"BlockerOperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FreezeToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperatorsAddress\",\"type\":\"address\"}],\"name\":\"TraderOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperatorsAddress\",\"type\":\"address\"}],\"name\":\"TraderOperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blocker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"WhitelistContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"WhitelistContractPending\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_confiscatees\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchConfiscate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_toggled\",\"type\":\"bool\"}],\"name\":\"batchToggleFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"block\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmBlockerOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmTraderOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmWhitelistContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_confiscatee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"confiscate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockerOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockerOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraderOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraderOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"initializeBlockerTraderOperators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeConstructor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"initializeWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedBlockUnblockTraderUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedConstructorUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedWhitelistableUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isMultisig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNotPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"}],\"name\":\"setBlockerOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"setTraderOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelistContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_toggled\",\"type\":\"bool\"}],\"name\":\"toggleFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unblock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EdgeTokenBlockUnblockTraderUpgrade","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}