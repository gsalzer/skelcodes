{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *  Program Name    : DAppCluster\r\n *  Website         : https://dappcluster.com/\r\n *  Telegram        : https://t.me/dappcluster\r\n *  Concept         : High Return On Investment Contract\r\n *  Category        : Passive Income\r\n *  Risk Category   : High Risk\r\n **/\r\n\r\npragma solidity >=0.6.0 <0.8.1;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract DAppCluster  is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    //Custom datatype to store investment details\r\n    struct Investment {\r\n        uint256 investmentAmount;\r\n        uint256 interestEarned;\r\n        uint256 investmentDate;\r\n        uint256 referralBonus;\r\n        uint256 expiryDate;\r\n        bool isExpired;\r\n        \r\n        uint256 level1RefId;\r\n        uint256 level2RefId;\r\n        uint256 level3RefId;\r\n    }\r\n    \r\n    uint256 public constant DEVELOPER_FEES = 4;\r\n    uint256 public constant MARKETING_FEES = 4;\r\n    uint256 public constant REFERRAL_LEVEL1_RATE = 8;\r\n    uint256 public constant REFERRAL_LEVEL2_RATE = 4;\r\n    uint256 public constant REFERRAL_LEVEL3_RATE = 2;\r\n    uint256 public constant MINIMUM_INVESTMENT = 10000000000000000;\r\n    uint256 public constant DAILY_INTEREST = 2;\r\n    uint256 public constant HARD_LOCKPERIOD_DAYS = 50;\r\n    uint256 public constant SOFT_LOCKPERIOD_DAYS = 11;\r\n    uint256 private constant START_USERCODE = 1000;\r\n    \r\n    uint256 private latestUserCode;\r\n    uint256 private totalInvestment;\r\n    uint256 private totalWithdrawal;\r\n    uint256 private totalInterestPaid;\r\n    uint256 private totalReferralBonusPaid;\r\n    \r\n    address private developerAccount;\r\n    address private marketingAccount;\r\n    \r\n    // mapping to store UserId of address\r\n    mapping(address => uint256) private UID;\r\n    \r\n    // mapping to store investment details of UserId\r\n    mapping(uint256 => Investment) private investment;\r\n    \r\n    // events to log action\r\n    event onInvest(address investor, uint256 amount, uint256 referral_Level1, uint256 referral_Level2, uint256 referral_Level3);\r\n    event onWithdraw(address investor, uint256 amount, uint256 interest, uint256 referralBonus, uint256 totalAmount);\r\n    \r\n    // constructor to initiate variables\r\n    constructor() {\r\n        \r\n        latestUserCode = START_USERCODE;\r\n        \r\n    }\r\n    \r\n    // function to get UserID if address is already part of system and generate new UserId if address is new in system\r\n    function getUserID(address _addr) internal returns(uint256 UserId){\r\n        uint256 uid = UID[_addr];\r\n        \r\n        if (uid == 0){\r\n            latestUserCode = latestUserCode.add(1);\r\n            UID[_addr] = latestUserCode;\r\n            uid = latestUserCode;\r\n        }\r\n        \r\n        return uid;\r\n    }\r\n    \r\n    // function to change marketing account\r\n    function setMarketingAccount(address payable _newMarketingAccount) public onlyOwner returns(bool) {\r\n        require(_newMarketingAccount != address(0));\r\n        \r\n        // marketing account able to withdraw bonus without locking as this money needs to pay for advertising & enhancement\r\n        \r\n        uint256 uid = getUserID(_newMarketingAccount);\r\n        \r\n        // make sure marketing account has not invested because locking doesn't get applied on it and eligible only to get bonus\r\n        require(investment[uid].investmentAmount == 0);\r\n        \r\n        marketingAccount = _newMarketingAccount;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // function to get marketing account\r\n    function getMarketingAccount() public view returns (address) {\r\n        return marketingAccount;\r\n    }\r\n    \r\n    // function to change developer account\r\n    function setDeveloperAccount(address payable _newDeveloperAccount) public onlyOwner returns(bool) {\r\n        require(_newDeveloperAccount != address(0));\r\n        \r\n        // developer account able to withdraw bonus without locking as this money needs to pay for advertising & enhancement\r\n        uint256 uid = getUserID(_newDeveloperAccount);\r\n        \r\n        // make sure developer account has not invested because locking doesn't get applied on it and eligible only to get bonus\r\n        require(investment[uid].investmentAmount == 0);\r\n        \r\n        developerAccount = _newDeveloperAccount;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // function to get developer account\r\n    function getDeveloperAccount() public view returns (address) {\r\n        return developerAccount;\r\n    }\r\n    \r\n    // function to get contract balance\r\n    function getContractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    // fallback function to handle accidently send investment\r\n    fallback() payable external{\r\n        _invest(msg.sender, 0, msg.value);\r\n    }\r\n    \r\n    // receive function to handle received coin\r\n    receive() payable external{\r\n        _invest(msg.sender, 0, msg.value);\r\n    }\r\n    \r\n    // invest function to handle investment using referral code\r\n    function invest(uint256 _referrerCode) public payable{\r\n        _invest(msg.sender, _referrerCode, msg.value);\r\n    }\r\n    \r\n    // _invest function to process received investment\r\n    function _invest(address _addr, uint256 _referrerCode, uint256 _amount) internal returns(bool){\r\n     \r\n        require(_amount >= MINIMUM_INVESTMENT, \"Less than the minimum amount of deposit requirement\");\r\n        \r\n        // Restricting marketing & developer account from investment as locking doesn't get applied on it and they can only earn bonus\r\n        require(_addr != marketingAccount && _addr != developerAccount, \"Marketing & Developement Account Are Not Allowed To Invest\");\r\n     \r\n        uint256 uid = getUserID(_addr);\r\n        \r\n        // assign development fees & marketing fees as bonus\r\n        investment[UID[developerAccount]].referralBonus = investment[UID[developerAccount]].referralBonus.add(_amount.mul(DEVELOPER_FEES).div(100));\r\n        investment[UID[marketingAccount]].referralBonus = investment[UID[marketingAccount]].referralBonus.add(_amount.mul(MARKETING_FEES).div(100));\r\n        \r\n        // assign referral level if user invested via referral link\r\n        if (_referrerCode != 0 && _referrerCode != uid && investment[uid].investmentAmount == 0){\r\n            \r\n            investment[uid].level1RefId = _referrerCode;\r\n            \r\n            if (investment[_referrerCode].level1RefId !=0){\r\n                investment[uid].level2RefId = investment[_referrerCode].level1RefId;\r\n                \r\n                if (investment[_referrerCode].level2RefId != 0){\r\n                    investment[uid].level3RefId = investment[_referrerCode].level2RefId;\r\n                }\r\n                else{\r\n                    investment[uid].level3RefId = 0;\r\n                }\r\n            }\r\n            else{\r\n                investment[uid].level2RefId = 0;\r\n                investment[uid].level3RefId = 0;\r\n            }\r\n        }\r\n        \r\n        // assign level1 referral bonus only if still invested in system\r\n        if (investment[uid].level1RefId != 0 && (investment[uid].level1RefId > START_USERCODE && investment[uid].level1RefId <= latestUserCode) && investment[investment[uid].level1RefId].isExpired != true){\r\n            investment[investment[uid].level1RefId].referralBonus = investment[investment[uid].level1RefId].referralBonus.add(_amount.mul(REFERRAL_LEVEL1_RATE).div(100));    \r\n                \r\n            // Assign Level2 Referral Bonus Only If Level1 & Level2 Still Invested In System\r\n            if (investment[uid].level2RefId != 0 && (investment[uid].level2RefId > START_USERCODE && investment[uid].level2RefId <= latestUserCode) && investment[investment[uid].level2RefId].isExpired != true){\r\n                investment[investment[uid].level2RefId].referralBonus = investment[investment[uid].level2RefId].referralBonus.add(_amount.mul(REFERRAL_LEVEL2_RATE).div(100));    \r\n                    \r\n                // Assign Level3 Referral Bonus Only If Level1, Level2 & Level3 Still Invested In System\r\n                if (investment[uid].level3RefId != 0 && (investment[uid].level3RefId > START_USERCODE && investment[uid].level3RefId <= latestUserCode) && investment[investment[uid].level3RefId].isExpired != true){\r\n                    investment[investment[uid].level3RefId].referralBonus = investment[investment[uid].level3RefId].referralBonus.add(_amount.mul(REFERRAL_LEVEL3_RATE).div(100));    \r\n                }\r\n            }\r\n        }\r\n        \r\n        // if user is already part of system & investing additional fund then calculate interest for previous investment and update balance with new fund \r\n        if (investment[uid].isExpired != true && investment[uid].investmentAmount != 0){\r\n            uint256 day = block.timestamp.sub(investment[uid].investmentDate).div(60).div(60).div(24);\r\n            investment[uid].interestEarned = investment[uid].interestEarned.add(investment[uid].investmentAmount.mul(DAILY_INTEREST).div(100).mul(day));\r\n        }\r\n        \r\n        // if user is already part of system with endParticipation & investing additional fund then calculate interest for previous investment and update balance with new fund \r\n        if (investment[uid].isExpired == true && investment[uid].investmentAmount != 0){\r\n            uint256 day = investment[uid].expiryDate.sub(investment[uid].investmentDate).div(60).div(60).div(24);\r\n            investment[uid].interestEarned = investment[uid].interestEarned.add(investment[uid].investmentAmount.mul(DAILY_INTEREST).div(100).mul(day));\r\n        }\r\n            \r\n        investment[uid].investmentAmount = investment[uid].investmentAmount.add(_amount);\r\n        \r\n        // update investment date & activate participation\r\n        investment[uid].investmentDate = block.timestamp;\r\n        investment[uid].expiryDate = 0;\r\n        investment[uid].isExpired = false;\r\n        \r\n        totalInvestment = totalInvestment.add(_amount);\r\n        \r\n        emit onInvest(_addr, _amount, investment[uid].level1RefId, investment[uid].level2RefId, investment[uid].level3RefId);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // endParticipation function to apply for SOFT_LOCKPERIOD\r\n    function endParticipation() public returns(bool){\r\n        address _addr = msg.sender;\r\n        uint256 uid = UID[_addr];\r\n        uint256 day = block.timestamp.sub(investment[uid].investmentDate).div(60).div(60).div(24);\r\n        \r\n        // user must be part of system\r\n        require(uid != 0);\r\n        \r\n        // check HARD_LOCKPERIOD if finished\r\n        require(day > HARD_LOCKPERIOD_DAYS, \"Hard locking period is not finished\");\r\n        \r\n        // enable SOFT_LOCKPERIOD and update time\r\n        investment[uid].isExpired = true;\r\n        investment[uid].expiryDate = block.timestamp;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // withdraw function to get investmentAmount, interest, referralBonus after SOFT_LOCKPERIOD completion\r\n    function withdraw() public returns(bool){\r\n        address _addr = msg.sender;\r\n        uint256 uid = UID[_addr];\r\n        uint256 day = 0 ;\r\n        \r\n        // user must be part of system\r\n        require(uid != 0);\r\n        \r\n        // locking is not applicable on marketing & developer account and they will be only eligible to withdraw bonus.\r\n        // Investement using Developement & marketing accounts are restricted via _invest function\r\n        \r\n        if (_addr != developerAccount && _addr != marketingAccount){\r\n            // check SOFT_LOCKPERIOD is enabled\r\n            require(investment[uid].isExpired == true, \"End participation & wait for soft locking period before withdrawing\");\r\n            require(investment[uid].expiryDate != 0, \"End participation & wait for soft locking period before withdrawing\");\r\n        \r\n            day = block.timestamp.sub(investment[uid].expiryDate).div(60).div(60).div(24);\r\n        \r\n            // check SOFT_LOCKPERIOD is completed\r\n            require(day > SOFT_LOCKPERIOD_DAYS,\"Wait for soft locking period before withdrawing\");\r\n        }\r\n        \r\n        uint256 amountToSend;\r\n        \r\n        // calculate days to pay interest\r\n        day = investment[uid].expiryDate.sub(investment[uid].investmentDate).div(60).div(60).div(24);\r\n        \r\n        //calculate amount to pay\r\n        uint256 interest = investment[uid].investmentAmount.mul(DAILY_INTEREST).div(100).mul(day);\r\n        amountToSend = investment[uid].investmentAmount.add(investment[uid].interestEarned).add(investment[uid].referralBonus).add(interest);\r\n        \r\n        // set global variables to keep record of totalWithdrawal, totalInterestPaid & totalReferralBonusPaid\r\n        totalWithdrawal = totalWithdrawal.add(investment[uid].investmentAmount);\r\n        totalInterestPaid = totalInterestPaid.add(investment[uid].interestEarned).add(interest);\r\n        totalReferralBonusPaid = totalReferralBonusPaid.add(investment[uid].referralBonus);\r\n        \r\n        // log event for withdrawal\r\n        emit onWithdraw(_addr, investment[uid].investmentAmount, interest.add(investment[uid].interestEarned), investment[uid].referralBonus, amountToSend);\r\n        \r\n        // update user balance details\r\n        investment[uid].investmentAmount = 0;\r\n        investment[uid].interestEarned = 0;\r\n        investment[uid].investmentDate = 0;\r\n        investment[uid].referralBonus = 0;\r\n        investment[uid].expiryDate = 0;\r\n        investment[uid].isExpired = false;\r\n        \r\n        // transfer fund to user wallet\r\n        payable(address(_addr)).transfer(amountToSend);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // function to get user balance ddetails\r\n    function getUserInformation(address _walletAddress) public view returns(uint256, uint256, uint256, uint256, uint256, uint256, bool){\r\n        require(msg.sender == _walletAddress || msg.sender == owner(),\"User can only check own balance\");\r\n        \r\n        uint256 investmentAmount;\r\n        uint256 interestEarned;\r\n        uint256 referralBonus;\r\n        uint256 investmentDate;\r\n        uint256 expiryDate;\r\n        bool isExpired;\r\n        uint day;\r\n        \r\n        address _addr = _walletAddress;\r\n        \r\n        uint256 uid = UID[_addr];\r\n        \r\n        investmentAmount = investment[uid].investmentAmount;\r\n        \r\n        // calculate days invested\r\n        if (investment[uid].isExpired != true){\r\n            day = block.timestamp.sub(investment[uid].investmentDate).div(60).div(60).div(24);\r\n        }\r\n        \r\n        if (investment[uid].isExpired == true){\r\n            day = investment[uid].expiryDate.sub(investment[uid].investmentDate).div(60).div(60).div(24);\r\n        }\r\n        \r\n        // calculate interest earned\r\n        interestEarned = investment[uid].interestEarned.add(investment[uid].investmentAmount.mul(DAILY_INTEREST).div(100).mul(day));\r\n        referralBonus = investment[uid].referralBonus;\r\n        investmentDate = investment[uid].investmentDate;\r\n        expiryDate = investment[uid].expiryDate;\r\n        isExpired = investment[uid].isExpired;\r\n        \r\n        return (uid, investmentAmount, interestEarned, referralBonus, investmentDate, expiryDate, isExpired);\r\n    }\r\n    \r\n    // function to get contract holding details\r\n    function getContractInformation() public view returns(uint256, uint256, uint256, uint256, uint256, uint256){\r\n        uint256 contractBalance;\r\n        contractBalance = address(this).balance;\r\n        \r\n        return (contractBalance, totalInvestment, totalWithdrawal, totalInterestPaid, totalReferralBonusPaid, latestUserCode - START_USERCODE);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referral_Level1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referral_Level2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referral_Level3\",\"type\":\"uint256\"}],\"name\":\"onInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DAILY_INTEREST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEVELOPER_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARD_LOCKPERIOD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_INVESTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_LEVEL1_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_LEVEL2_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_LEVEL3_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOFT_LOCKPERIOD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endParticipation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeveloperAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getUserInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerCode\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newDeveloperAccount\",\"type\":\"address\"}],\"name\":\"setDeveloperAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newMarketingAccount\",\"type\":\"address\"}],\"name\":\"setMarketingAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DAppCluster","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee5b38fabe8ff0828ebe7826c740fa401211c1915e14d4b7be00562f258a82d6"}]}