{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract DET {\r\n    using SafeMath for uint256;\r\n    \r\n    /*==============================\r\n    =            DET EVENTS            =\r\n    ==============================*/\r\n    \r\n    \r\n    event Approved(\r\n        address indexed spender,\r\n        address indexed recipient,\r\n        uint256 tokens\r\n    );\r\n\r\n     event Buy(\r\n         address indexed buyer,\r\n         uint256 tokensTransfered,\r\n         uint256 tokenToTransfer,\r\n         uint256 referralBal\r\n     );\r\n     \r\n      event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n     event Sells(\r\n         address indexed seller,\r\n         uint256 calculatedEtherTransfer,\r\n         uint256 tokens\r\n     );\r\n     \r\n     event stake(\r\n         address indexed staker,\r\n         uint256 amount,\r\n         uint256 timing\r\n     );\r\n     \r\n     \r\n     /*=====================================\r\n    =            DET CONFIGURABLES            =\r\n    =====================================*/\r\n    \r\n     string public token_name;\r\n     string public token_symbol;\r\n     uint8 public decimal;\r\n    \r\n     uint256 public token_price = 190000000000000;\r\n     uint256 public basePrice0 = 90000000000000;\r\n     uint256 public basePrice1 = 190000000000000;\r\n     uint256 public basePrice2 = 290000000000000;\r\n     uint256 public basePrice3 = 350000000000000;\r\n     uint256 public basePrice4 = 390000000000000;\r\n     uint256 public basePrice5 = 480000000000000;\r\n    \r\n     uint256 public basePrice6 = 580000000000000;\r\n    \r\n     uint256 public basePrice7 = 1400000000000000;\r\n     uint256 public basePrice8 = 2300000000000000;\r\n     uint256 public basePrice9 = 4800000000000000;\r\n     uint256 public basePrice10 = 9700000000000000;\r\n     uint256 public basePrice11= 19000000000000000;\r\n     uint256 public basePrice12 = 58000000000000000;\r\n     uint256 public basePrice13 = 140000000000000000;\r\n     uint256 public basePrice14 = 580000000000000000;\r\n     uint256 public basePrice15 = 1550000000000000000;\r\n     uint256 public basePrice16 = 3670000000000000000;\r\n    \r\n     uint256 public initialPriceIncrement = 0;\r\n    \r\n     uint256 public currentPrice;\r\n    \r\n     uint256 public totalSupply_;\r\n     uint256 public tokenSold = 200000;\r\n     address payable owner;\r\n     address stakeHolder;\r\n    \r\n     mapping(address => uint256) public tokenLedger;\r\n     mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    \r\n     modifier onlyOwner {\r\n         require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n     }\r\n    \r\n     constructor(string memory _tokenName, string memory _tokenSymbol, uint256 initialSupply) public  {\r\n        owner = msg.sender;\r\n        stakeHolder = owner;\r\n        token_name = _tokenName;\r\n        token_symbol = _tokenSymbol;\r\n        decimal = 0;\r\n        currentPrice = token_price + initialPriceIncrement;\r\n        totalSupply_ = initialSupply;\r\n        totalSupply_ = totalSupply_.sub(tokenSold);\r\n        tokenLedger[owner] = tokenSold;\r\n    }\r\n    \r\n    function contractAddress() public view returns(address) {\r\n        return address(this);\r\n    }\r\n\r\n    function updateCurrentPrice(uint256 _newPrice) external onlyOwner returns (bool) {\r\n          currentPrice = _newPrice;\r\n          return true;\r\n    }\r\n    \r\n    function etherToToken(uint256 incomingEtherWei) public view returns(uint256)  {\r\n        uint256 tokenToTransfer = incomingEtherWei.div(currentPrice);\r\n        return tokenToTransfer;\r\n    }\r\n\r\n    \r\n    function tokenToEther(uint256 tokenToSell) public view returns(uint256)  {\r\n        uint256 convertedEther = tokenToSell * currentPrice;\r\n        return convertedEther;\r\n    }\r\n\r\n     \r\n     function taxedTokenTransfer(uint256 incomingEther) internal view returns(uint256) {\r\n            uint256 deduction = incomingEther * 20000/100000;\r\n            uint256 taxedEther = incomingEther - deduction;\r\n            uint256 tokenToTransfer = taxedEther.div(currentPrice);\r\n            return tokenToTransfer;\r\n     }\r\n\r\n \r\n    \r\n    function balanceOf(address _customerAddress) external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenLedger[_customerAddress];\r\n    }\r\n    \r\n    function getCurrentPrice() public view returns(uint) {\r\n         return currentPrice;\r\n     }\r\n     \r\n    function stake_funds()  public view returns(uint256) {\r\n        return tokenLedger[stakeHolder];\r\n    }\r\n    \r\n     \r\n    function buy_token(address _referredBy ) external payable returns (bool) {\r\n         require(_referredBy != msg.sender, \"Self reference not allowed\");\r\n         address buyer = msg.sender;\r\n         uint256 etherValue = msg.value;\r\n         uint256 taxedTokenAmount = taxedTokenTransfer(etherValue);\r\n         uint256 tokenToTransfer = etherValue.div(currentPrice);\r\n\r\n         require(tokenToTransfer >= 5, \"Minimum DET purchase limit is 5\");\r\n         require(buyer != address(0), \"Can't send to Zero address\");\r\n         \r\n         uint256 referralTokenBal = tokenLedger[_referredBy];\r\n         \r\n         emit Transfer(address(this), buyer, taxedTokenAmount);\r\n         tokenLedger[buyer] = tokenLedger[buyer].add(taxedTokenAmount);\r\n         tokenSold = tokenSold.add(tokenToTransfer);\r\n         priceAlgoBuy(tokenToTransfer);\r\n         emit Buy(buyer,taxedTokenAmount, tokenToTransfer, referralTokenBal);\r\n         return true;\r\n     }\r\n    \r\n     \r\n    function sell(uint256 tokenToSell) external returns(bool){\r\n          require(tokenSold >= tokenToSell, \"Token sold should be greater than zero\");\r\n          require(tokenToSell >= 5, \"Minimum token sell amount is 5 DET\");\r\n          require(msg.sender != address(0), \"address zero\");\r\n          require(tokenToSell <= tokenLedger[msg.sender], \"insufficient balance\");\r\n           \r\n           uint256 convertedWei = etherValueTransfer(tokenToSell);\r\n           tokenLedger[msg.sender] = tokenLedger[msg.sender].sub(tokenToSell);\r\n           tokenSold = tokenSold.sub(tokenToSell);\r\n           priceAlgoSell(tokenToSell);\r\n           msg.sender.transfer(convertedWei);\r\n           emit Transfer(msg.sender, address(this), tokenToSell);\r\n           emit Sells(msg.sender,convertedWei, tokenToSell);\r\n           return true;\r\n     }\r\n    \r\n     \r\n    function etherValueTransfer(uint256 tokenToSell) public view returns(uint256) {\r\n        uint256 convertedEther = tokenToSell * currentPrice;\r\n        return convertedEther;\r\n     }\r\n      \r\n     \r\n     function totalEthereumBalance() external onlyOwner view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n     \r\n    \r\n    function mintToken(uint256 _mintedAmount) onlyOwner public {\r\n        totalSupply_ = totalSupply_.add(_mintedAmount);\r\n    }\r\n    \r\n     function destruct() onlyOwner() public{\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    \r\n    function withdrawReward(uint256 numberOfTokens, address _customerAddress)\r\n        onlyOwner\r\n        public\r\n    {\r\n        tokenLedger[_customerAddress] = tokenLedger[_customerAddress].add(numberOfTokens);\r\n    }\r\n    \r\n    \r\n    function holdStake(uint256 _amount, uint256 _timing)\r\n        public\r\n    {\r\n           address _customerAddress = msg.sender;\r\n           require(_amount <= tokenLedger[_customerAddress], \"insufficient balance\");\r\n           require(_amount >= 20, \"Minimum stake is 20 DET\");\r\n           tokenLedger[_customerAddress] = tokenLedger[_customerAddress].sub(_amount);\r\n           tokenLedger[stakeHolder] = tokenLedger[stakeHolder].add(_amount);\r\n           emit stake(_customerAddress, _amount, _timing);\r\n     }\r\n       \r\n    function unstake(uint256 _amount, address _customerAddress)\r\n        onlyOwner\r\n        public\r\n    {\r\n        tokenLedger[_customerAddress] = tokenLedger[_customerAddress].add(_amount);\r\n        tokenLedger[stakeHolder] = tokenLedger[stakeHolder].sub(_amount);\r\n    }\r\n    \r\n    \r\n    \r\n\r\n     function transfer(address _toAddress, uint256 _amountOfTokens) onlyOwner\r\n        public\r\n        returns(bool)\r\n      {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenLedger[_customerAddress]);\r\n        \r\n        tokenLedger[_customerAddress] = tokenLedger[_customerAddress].sub(_amountOfTokens);\r\n        tokenLedger[_toAddress] = tokenLedger[_toAddress].add(_amountOfTokens);\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 tokens) public returns(bool success)  {\r\n        require(tokens <= tokenLedger[_from]);\r\n        require(tokens > 0);\r\n        require(tokens <= allowed[_from][msg.sender]);\r\n        \r\n        tokenLedger[_from] = tokenLedger[_from].sub(tokens);\r\n        tokenLedger[_to] = tokenLedger[_to].add(tokens);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(tokens);\r\n        emit Transfer(_from, _to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    \r\n  function priceAlgoBuy( uint256 tokenQty) internal{\r\n\r\n   if( tokenSold >= 0 && tokenSold <= 200000 ){\r\n          currentPrice = basePrice0;\r\n          basePrice0 = currentPrice;\r\n      }\r\n      \r\n      \r\n      if( tokenSold >= 200000 && tokenSold <= 250000 ){\r\n          currentPrice = basePrice1;\r\n          basePrice1 = currentPrice;\r\n      }\r\n\r\n      if( tokenSold > 250000 && tokenSold <= 300000 ){\r\n         initialPriceIncrement = tokenQty*300000000;\r\n         currentPrice = basePrice2 + initialPriceIncrement;\r\n         basePrice2 = currentPrice;\r\n      }\r\n\r\n     if(tokenSold > 300000 && tokenSold <= 350000){\r\n          initialPriceIncrement = tokenQty*450000000;\r\n          currentPrice = basePrice3 + initialPriceIncrement;\r\n          basePrice3 = currentPrice;\r\n      }\r\n      if(tokenSold > 350000 && tokenSold <= 400000){\r\n           initialPriceIncrement = tokenQty*770000000;\r\n           currentPrice = basePrice4 + initialPriceIncrement;\r\n           basePrice4 = currentPrice;\r\n       }\r\n      if( tokenSold > 400000 && tokenSold <= 450000 ){\r\n           initialPriceIncrement = tokenQty*870000000;\r\n           currentPrice = basePrice5 + initialPriceIncrement;\r\n           basePrice5 = currentPrice;\r\n      }\r\n      if( tokenSold > 450000 && tokenSold <= 500000 ){\r\n           initialPriceIncrement = tokenQty*5725000000;\r\n           currentPrice = basePrice6 + initialPriceIncrement;\r\n           basePrice6 = currentPrice;\r\n       }\r\n\r\n     if( tokenSold > 500000 && tokenSold <= 550000 ){\r\n          initialPriceIncrement = tokenQty*9725000000;\r\n          currentPrice = basePrice7 + initialPriceIncrement;\r\n          basePrice7 = currentPrice;\r\n      }\r\n\r\n      if(tokenSold > 550000 && tokenSold <= 600000){\r\n          initialPriceIncrement = tokenQty*13900000000;\r\n          currentPrice = basePrice8 + initialPriceIncrement;\r\n          basePrice8 = currentPrice;\r\n      }\r\n\r\n       if( tokenSold > 600000 && tokenSold <= 650000 ){\r\n               initialPriceIncrement = tokenQty*34200000000;\r\n               currentPrice = basePrice9 + initialPriceIncrement;\r\n               basePrice9 = currentPrice;\r\n       }\r\n\r\n      if( tokenSold > 650000 && tokenSold <= 700000 ){\r\n          initialPriceIncrement = tokenQty*103325000000;\r\n          currentPrice = basePrice10 + initialPriceIncrement;\r\n          basePrice10 = currentPrice;\r\n       }\r\n\r\n     if(tokenSold > 700000 && tokenSold <= 750000){\r\n           initialPriceIncrement = tokenQty*394050000000;\r\n           currentPrice = basePrice11 + initialPriceIncrement;\r\n           basePrice11 = currentPrice;\r\n\r\n       }\r\n\r\n      if(tokenSold > 750000 && tokenSold <= 800000){\r\n           initialPriceIncrement = tokenQty*694050000000;//\r\n           currentPrice = basePrice12 + initialPriceIncrement;\r\n           basePrice12 = currentPrice;\r\n\r\n       }\r\n\r\n     if(tokenSold > 800000 && tokenSold <= 850000){\r\n           initialPriceIncrement = tokenQty*6500000000000;\r\n           currentPrice = basePrice13 + initialPriceIncrement;\r\n           basePrice13 = currentPrice;\r\n\r\n       }\r\n\r\n     if(tokenSold > 850000 && tokenSold <= 900000){\r\n          initialPriceIncrement = tokenQty*8400000000000;\r\n          currentPrice = basePrice14 + initialPriceIncrement;\r\n          basePrice14 = currentPrice;\r\n\r\n     }\r\n\r\n      if(tokenSold > 900000 && tokenSold <= 950000){\r\n         initialPriceIncrement = tokenQty*8400000000000;\r\n         currentPrice = basePrice15 + initialPriceIncrement;\r\n         basePrice15 = currentPrice;\r\n     }\r\n\r\n     if(tokenSold > 950000 ){\r\n         initialPriceIncrement = tokenQty*18400000000000;\r\n         currentPrice = basePrice16 + initialPriceIncrement;\r\n         basePrice16 = currentPrice;\r\n      }\r\n    }\r\n\r\n     \r\n    function priceAlgoSell( uint256 tokenQty) internal{\r\n\r\n    if( tokenSold >= 0 && tokenSold <= 200000 ){\r\n          currentPrice = basePrice0;\r\n          basePrice0 = currentPrice;\r\n      }\r\n      \r\n      if( tokenSold >= 200000 && tokenSold <= 250000 ){\r\n          currentPrice = basePrice1;\r\n          basePrice1 = currentPrice;\r\n      }\r\n\r\n      if( tokenSold > 250000 && tokenSold <= 300000 ){\r\n         initialPriceIncrement = tokenQty*300000000;\r\n         currentPrice = basePrice2 - initialPriceIncrement;\r\n         basePrice2 = currentPrice;\r\n      }\r\n\r\n     if(tokenSold > 300000 && tokenSold <= 350000){\r\n          initialPriceIncrement = tokenQty*450000000;\r\n          currentPrice = basePrice3 - initialPriceIncrement;\r\n          basePrice3 = currentPrice;\r\n      }\r\n      if(tokenSold > 350000 && tokenSold <= 400000){\r\n           initialPriceIncrement = tokenQty*770000000;\r\n           currentPrice = basePrice4 - initialPriceIncrement;\r\n           basePrice4 = currentPrice;\r\n       }\r\n      if( tokenSold > 400000 && tokenSold <= 450000 ){\r\n           initialPriceIncrement = tokenQty*870000000;\r\n           currentPrice = basePrice5 - initialPriceIncrement;\r\n           basePrice5 = currentPrice;\r\n      }\r\n      if( tokenSold > 450000 && tokenSold <= 500000 ){\r\n           initialPriceIncrement = tokenQty*5725000000;\r\n           currentPrice = basePrice6 - initialPriceIncrement;\r\n           basePrice6 = currentPrice;\r\n       }\r\n\r\n     if( tokenSold > 500000 && tokenSold <= 550000 ){\r\n          initialPriceIncrement = tokenQty*9725000000;\r\n          currentPrice = basePrice7 - initialPriceIncrement;\r\n          basePrice7 = currentPrice;\r\n      }\r\n\r\n      if(tokenSold > 550000 && tokenSold <= 600000){\r\n          initialPriceIncrement = tokenQty*13900000000;\r\n          currentPrice = basePrice8 - initialPriceIncrement;\r\n          basePrice8 = currentPrice;\r\n      }\r\n\r\n       if( tokenSold > 600000 && tokenSold <= 650000 ){\r\n           initialPriceIncrement = tokenQty*34200000000;\r\n           currentPrice = basePrice9 - initialPriceIncrement;\r\n           basePrice9 = currentPrice;\r\n       }\r\n\r\n      if( tokenSold > 650000 && tokenSold <= 700000 ){\r\n          initialPriceIncrement = tokenQty*103325000000;\r\n          currentPrice = basePrice10 - initialPriceIncrement;\r\n          basePrice10 = currentPrice;\r\n       }\r\n\r\n     if(tokenSold > 700000 && tokenSold <= 750000){\r\n           initialPriceIncrement = tokenQty*394050000000;\r\n           currentPrice = basePrice11 - initialPriceIncrement;\r\n           basePrice11 = currentPrice;\r\n\r\n       }\r\n\r\n      if(tokenSold > 750000 && tokenSold <= 800000){\r\n           initialPriceIncrement = tokenQty*694050000000;\r\n           currentPrice = basePrice12 - initialPriceIncrement;\r\n           basePrice12 = currentPrice;\r\n\r\n       }\r\n\r\n     if(tokenSold > 800000 && tokenSold <= 850000){\r\n           initialPriceIncrement = tokenQty*6500000000000;\r\n           currentPrice = basePrice13 - initialPriceIncrement;\r\n           basePrice13 = currentPrice;\r\n\r\n       }\r\n\r\n     if(tokenSold > 850000 && tokenSold <= 900000){\r\n          initialPriceIncrement = tokenQty*8400000000000;\r\n          currentPrice = basePrice14 - initialPriceIncrement;\r\n          basePrice14 = currentPrice;\r\n\r\n     }\r\n\r\n      if(tokenSold > 900000 && tokenSold <= 950000){\r\n         initialPriceIncrement = tokenQty*8400000000000;\r\n         currentPrice = basePrice15 - initialPriceIncrement;\r\n         basePrice15 = currentPrice;\r\n     }\r\n\r\n     if(tokenSold > 950000 ){\r\n         initialPriceIncrement = tokenQty*18400000000000;\r\n         currentPrice = basePrice16 - initialPriceIncrement;\r\n         basePrice16 = currentPrice;\r\n     }\r\n\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensTransfered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenToTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralBal\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"calculatedEtherTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Sells\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timing\",\"type\":\"uint256\"}],\"name\":\"stake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice11\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice13\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice14\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice15\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice16\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice9\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy_token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incomingEtherWei\",\"type\":\"uint256\"}],\"name\":\"etherToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToSell\",\"type\":\"uint256\"}],\"name\":\"etherValueTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timing\",\"type\":\"uint256\"}],\"name\":\"holdStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPriceIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToSell\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToSell\",\"type\":\"uint256\"}],\"name\":\"tokenToEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateCurrentPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DET","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000c4445542045584348414e4745000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034445540000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://467d3179e6b81347e579b19f0681de79080a634be83e4901424e03dfc1c5a5fc"}]}