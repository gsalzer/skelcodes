{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n/*\r\n   ____            __   __        __   _\r\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n     /___/\r\n\r\n* Synthetix: WARRewards.sol\r\n*\r\n* Docs: https://docs.synthetix.io/\r\n*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 Synthetix\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract IRewardDistributionRecipient is Ownable {\r\n    address public rewardDistribution;\r\n\r\n    function notifyRewardAmount(uint256 reward, uint256 _duration) external;\r\n\r\n    modifier onlyRewardDistribution() {\r\n        require(_msgSender() == rewardDistribution, \"Caller is not reward distribution\");\r\n        _;\r\n    }\r\n\r\n    function setRewardDistribution(address _rewardDistribution) external onlyOwner {\r\n        rewardDistribution = _rewardDistribution;\r\n    }\r\n}\r\n\r\ncontract BettingV2 is IRewardDistributionRecipient{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (string => BetNChoices) bets;\r\n    string[] betIds;\r\n\r\n    address payable uniswapAddress;\r\n    address payable yieldwarsAddress;\r\n\r\n    struct BetChoice {\r\n        uint32 choiceId;\r\n        uint256 value;\r\n        bool isClaimed;\r\n        uint256 ethEarnings;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct BetNChoices {\r\n        string  id;\r\n        uint256  endTime;\r\n        uint256  lastClaimTime;\r\n        string desc;\r\n\r\n        bool  isPaused;\r\n        bool  isCanceled;\r\n        bool  isFinal;\r\n        bool  isFeesClaimed;\r\n\r\n        uint32  winner;\r\n\r\n        mapping(address => BetChoice)  bets;\r\n        address[] betters;\r\n        mapping(uint32 => uint256)  pots;\r\n\r\n        mapping(string => uint32)  stringChoiceToId;\r\n        mapping(uint32 => string)  choiceIdToString;\r\n\r\n        uint256 totalPot;\r\n        string[] possibleChoices;\r\n    }\r\n\r\n    struct BetCreationRequest {\r\n        string id;\r\n        string desc;\r\n        uint256 endTime;\r\n        uint256 lastClaimTime;\r\n\r\n        string[] choices;\r\n    }\r\n\r\n    event ETHBetChoice(address indexed user, uint256 amount, string betId, string choice);\r\n    event EarningsPaid(string betId, address indexed user, uint256 ethEarnings);\r\n\r\n    modifier checkStatus(BetNChoices memory bet) {\r\n        require(!bet.isFinal, \"battle is decided\");\r\n        require(!bet.isCanceled, \"battle is canceled, claim your bet\");\r\n        require(!bet.isPaused, \"betting not started\");\r\n        require(block.timestamp < bet.endTime, \"betting has ended\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _rewardDistribution, address payable _uniswapAddress, address payable _yieldwarsAddress) public {\r\n        require(_uniswapAddress != address(0));\r\n        require(_yieldwarsAddress != address(0));\r\n        uniswapAddress = _uniswapAddress;\r\n        yieldwarsAddress = _yieldwarsAddress;\r\n\r\n        rewardDistribution = _rewardDistribution;    \r\n    }\r\n\r\n\r\n    function createBet(string calldata _id, string calldata _desc, uint256 _endTime, uint256 _lastClaimTime, string calldata choice1, string calldata choice2) external onlyRewardDistribution {\r\n\r\n        string[] memory choices = new string[](2);\r\n        choices[0] = choice1;\r\n        choices[1] = choice2;\r\n\r\n        BetCreationRequest memory req = BetCreationRequest({\r\n            id: _id,\r\n            endTime: _endTime,\r\n            lastClaimTime: _lastClaimTime,\r\n            choices: choices,\r\n            desc: _desc\r\n        });\r\n\r\n        _createBet(req);\r\n    }\r\n\r\n    function _createBet(BetCreationRequest memory req) internal {\r\n        BetNChoices storage bet = bets[req.id];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(\"\")), \"Bet already exists\");\r\n        require(req.lastClaimTime > req.endTime, \"lastClaimTime must be greater than endTime\");\r\n\r\n        bet.id = req.id;\r\n        bet.endTime = req.endTime;\r\n        bet.lastClaimTime = req.lastClaimTime;\r\n        bet.desc = req.desc;\r\n        for (uint32 i = 1; i <= req.choices.length; i++) {\r\n            bet.stringChoiceToId[req.choices[i-1]] = i;\r\n            bet.choiceIdToString[i] = req.choices[i-1];\r\n        }\r\n        bet.possibleChoices = req.choices;\r\n        betIds.push(bet.id);\r\n    }\r\n\r\n\r\n    function ETHBet(string memory betId, string memory choice) public payable {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n        ETHBetOnBet(bet, choice);\r\n    }\r\n\r\n    function pauseBetting(string calldata betId) external onlyRewardDistribution {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n        bet.isPaused = true;\r\n    }\r\n\r\n    function unpauseBetting(string calldata betId) external onlyRewardDistribution {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n        bet.isPaused = false;\r\n    }\r\n\r\n    function cancelBet(string calldata betId) external onlyRewardDistribution {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n        require(!bet.isFinal, \"battle is decided\");\r\n        bets[betId].isCanceled = true;\r\n    }\r\n\r\n    function finalizeBet(string calldata betId, string calldata choice) external onlyRewardDistribution {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n\r\n        uint32 choiceId = bet.stringChoiceToId[choice];\r\n        require(choiceId != 0, \"Invalid choice\");\r\n\r\n        require(!bet.isFinal, \"battle is decided\");\r\n        require(!bet.isCanceled, \"battle is canceled\");\r\n\r\n        bet.winner = choiceId;\r\n        bet.isFinal = true;\r\n    }\r\n\r\n    function transferFees(string calldata betId) external onlyRewardDistribution {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n        require(bet.isFinal, \"bet is not final\");\r\n        require(!bet.isFeesClaimed, \"fees claimed\");\r\n\r\n        bet.isFeesClaimed = true;\r\n\r\n        uint256 pot = bet.totalPot.sub(bet.pots[bet.winner]);\r\n        uint256 ethFees = pot.mul(1e19).div(1e20).div(2);\r\n\r\n        if (ethFees != 0) {\r\n            _safeTransfer(uniswapAddress, ethFees);\r\n            _safeTransfer(yieldwarsAddress, ethFees);\r\n        }\r\n    }\r\n\r\n    function updateAddresses(address payable _uniswapAddress, address payable _yieldwarsAddress) external onlyRewardDistribution {\r\n        require(_uniswapAddress != address(0));\r\n        require(_yieldwarsAddress != address(0));\r\n        uniswapAddress = _uniswapAddress;\r\n        yieldwarsAddress = _yieldwarsAddress;\r\n    }\r\n\r\n    function _safeTransfer(address payable to, uint256 amount) internal {\r\n        uint256 balance;\r\n        balance = address(this).balance;\r\n        if (amount > balance) {\r\n            amount = balance;\r\n        }\r\n        Address.sendValue(to, amount);\r\n    }\r\n\r\n    function ETHBetOnBet(BetNChoices storage bet, string memory choice) private checkStatus(bet) {\r\n        require(msg.value != 0, \"no ether sent\");\r\n\r\n        uint32 choiceId = bet.stringChoiceToId[choice];\r\n        require(choiceId != 0, \"invalid choice string\");\r\n\r\n        BetChoice storage currentBet = bet.bets[msg.sender];\r\n        if (currentBet.choiceId == 0) {\r\n            currentBet.choiceId = choiceId;\r\n        } else {\r\n            require(currentBet.choiceId == choiceId, \"Sorry. You already bet on the other side with ETH\");\r\n        }\r\n        if (currentBet.value == 0) {\r\n            // first bet for account\r\n            bet.betters.push(msg.sender);\r\n        }\r\n        currentBet.value += msg.value;\r\n        currentBet.timestamp = block.timestamp;\r\n        bet.pots[choiceId] += msg.value;\r\n        bet.totalPot += msg.value;\r\n        emit ETHBetChoice(msg.sender, msg.value, bet.id, choice);\r\n    }\r\n\r\n    function computeEarned(BetNChoices storage bet, BetChoice memory accountBet) private view returns (uint256 ethEarnings) {\r\n        uint256 winningPot = bet.pots[bet.winner];\r\n        uint256 totalWinnings = bet.totalPot.sub(winningPot);\r\n        if (bet.isCanceled) {\r\n            ethEarnings = accountBet.value;\r\n        } else if (accountBet.choiceId != bet.winner || accountBet.value == 0) {\r\n            ethEarnings = 0;\r\n        } else if (!bet.isFinal){\r\n            ethEarnings = 0;\r\n        } else {\r\n            uint256 winnings = totalWinnings.mul(accountBet.value).div(winningPot);\r\n            uint256 fee = winnings.mul(1e19).div(1e20);\r\n            ethEarnings = winnings.sub(fee);\r\n            ethEarnings = ethEarnings.add(accountBet.value);\r\n        }\r\n    }\r\n\r\n    function earned(string memory betId, address account) public view returns (uint256 ) {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n        require(bet.isFinal || bet.isCanceled, \"Bet is not finished\");\r\n        BetChoice memory accountBet = bet.bets[account];\r\n        return computeEarned(bet, accountBet);\r\n    }\r\n\r\n    function getRewards(string memory betId) public {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n        require(bet.isFinal || bet.isCanceled, \"battle not decided\");\r\n\r\n        BetChoice storage accountBet = bet.bets[msg.sender];\r\n\r\n        uint256 ethEarnings = earned(betId, msg.sender);\r\n        if (ethEarnings != 0) {\r\n            require(!accountBet.isClaimed, \"Rewards already claimed\");\r\n            accountBet.isClaimed = true;\r\n            accountBet.ethEarnings = ethEarnings;\r\n            _safeTransfer(msg.sender, ethEarnings);\r\n        }\r\n        emit EarningsPaid(betId, msg.sender, ethEarnings);\r\n    }\r\n\r\n    struct OutstandingReward {\r\n        string betId;\r\n        uint256 value;\r\n    }\r\n\r\n    function listOutstandingRewards(address account) public view returns (OutstandingReward[] memory) {\r\n        uint rewardCount = 0;\r\n        for (uint i; i < betIds.length; i++) {\r\n            BetNChoices memory bet = bets[betIds[i]];\r\n            if (bet.isFinal) {\r\n                uint256 reward = earned(bet.id, account);\r\n                if (reward > 0) {\r\n                    rewardCount++;\r\n                }\r\n            }\r\n        }\r\n        OutstandingReward[] memory rewards = new OutstandingReward[](rewardCount);\r\n        uint r = 0;\r\n        for (uint i; i < betIds.length; i++) {\r\n            BetNChoices memory bet = bets[betIds[i]];\r\n            if (bet.isFinal) {\r\n                uint256 reward = earned(bet.id, account);\r\n                if (reward > 0) {\r\n                    rewards[r] = OutstandingReward(bet.id, reward);\r\n                    r++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return rewards;\r\n    }\r\n\r\n    function rescueFunds() external onlyRewardDistribution {\r\n        require(betIds.length > 0, \"sanity check with betIds.length\");\r\n        for (uint i = 0; i < betIds.length; i ++) {\r\n            BetNChoices storage bet = bets[betIds[i]];\r\n            require(block.timestamp >= bet.lastClaimTime, \"not allowed yet\");\r\n        }\r\n\r\n        Address.sendValue(msg.sender, address(this).balance);\r\n    }\r\n    \r\n    struct GetBetChoiceResponse {\r\n        address account;\r\n        string choiceId;\r\n        uint256 value;\r\n        bool isClaimed;\r\n        uint256 ethEarnings;\r\n        bool won;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct GetBetPotResponse {\r\n        string choice;\r\n        uint256 value;\r\n    }\r\n\r\n    struct GetBetResponse {\r\n        string  id;\r\n        uint256  endTime;\r\n        uint256  lastClaimTime;\r\n        string desc;\r\n\r\n        bool  isPaused;\r\n        bool  isCanceled;\r\n        bool  isFinal;\r\n        bool  isFeesClaimed;\r\n\r\n        string  winner;\r\n        uint256 totalPot;\r\n\r\n        string[] possibleChoices;\r\n        GetBetChoiceResponse[] bets;\r\n        GetBetPotResponse[] pots;\r\n    }\r\n\r\n    function getBet(string memory betId) public view returns (GetBetResponse memory response) {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n\r\n        response.id = bet.id;\r\n        response.endTime = bet.endTime;\r\n        response.lastClaimTime = bet.lastClaimTime;\r\n        response.isPaused = bet.isPaused;\r\n        response.isCanceled = bet.isCanceled;\r\n        response.isFinal = bet.isFinal;\r\n        response.isFeesClaimed = bet.isFeesClaimed;\r\n\r\n        if (bet.winner != 0) {\r\n            response.winner = bet.choiceIdToString[bet.winner];\r\n        }\r\n        response.totalPot = bet.totalPot;\r\n        response.possibleChoices = bet.possibleChoices;\r\n\r\n        GetBetChoiceResponse[] memory betsResponse = new GetBetChoiceResponse[](bet.betters.length);\r\n\r\n        for (uint i = 0; i < bet.betters.length; i++) {\r\n            address account = bet.betters[i];\r\n            BetChoice memory accountBet = bet.bets[account];\r\n\r\n            betsResponse[i] = serializeBetChoice(bet, accountBet, account);\r\n        }\r\n        response.bets = betsResponse;\r\n\r\n        GetBetPotResponse[] memory potsResponse = new GetBetPotResponse[](bet.possibleChoices.length);\r\n\r\n        for (uint32 i = 0; i < bet.possibleChoices.length; i++ ) {\r\n            uint32 choiceId = i + 1;\r\n            string memory choiceStr = bet.choiceIdToString[choiceId];\r\n            potsResponse[i] = GetBetPotResponse({\r\n                choice: choiceStr,\r\n                value: bet.pots[choiceId]\r\n            });\r\n        }\r\n\r\n        response.pots = potsResponse;\r\n    }\r\n    struct BetHistoryResponse {\r\n        string betId;\r\n        GetBetChoiceResponse data;\r\n    }\r\n\r\n    function getBetHistory(address account) public view returns (BetHistoryResponse[] memory) {\r\n        uint resultSize = 0;\r\n        for (uint betId = 0; betId < betIds.length; betId++) {\r\n            BetNChoices storage bet = bets[betIds[betId]];\r\n            BetChoice memory accountBet = bet.bets[account];\r\n            if ((bet.isFinal || bet.isCanceled) && accountBet.choiceId != 0 && accountBet.value != 0) {\r\n                resultSize ++;\r\n            }\r\n        }\r\n        \r\n        BetHistoryResponse[] memory response = new BetHistoryResponse[](resultSize);\r\n        uint i = 0;\r\n        for (uint betId = 0; betId < betIds.length; betId++) {\r\n            BetNChoices storage bet = bets[betIds[betId]];\r\n            BetChoice memory accountBet = bet.bets[account];\r\n            if ((bet.isFinal || bet.isCanceled) && accountBet.choiceId != 0 && accountBet.value != 0) {\r\n                response[i].betId = bet.id;\r\n                response[i].data = serializeBetChoice(bet, accountBet, account);\r\n                i++;\r\n            }\r\n        }\r\n        return response;\r\n    }\r\n\r\n    function serializeBetChoice(BetNChoices storage bet, BetChoice memory accountBet, address account) internal view returns (GetBetChoiceResponse memory) {\r\n        bool won = false;\r\n\r\n        if (bet.isFinal && !bet.isCanceled && accountBet.choiceId == bet.winner) {\r\n            won = true;\r\n        }\r\n\r\n       return GetBetChoiceResponse({\r\n            account: account,\r\n            choiceId: bet.choiceIdToString[accountBet.choiceId],\r\n            value: accountBet.value,\r\n            isClaimed: accountBet.isClaimed,\r\n            ethEarnings: computeEarned(bet, accountBet),\r\n            won: won,\r\n            timestamp: accountBet.timestamp\r\n        });\r\n    }\r\n\r\n    function getCurrentBet(string memory betId, address accountAddress) public view returns (GetBetChoiceResponse memory) {\r\n        BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n        BetChoice memory accountBet = bet.bets[accountAddress];\r\n        require (accountBet.choiceId != 0 && accountBet.value != 0, \"not found\");\r\n\r\n        return serializeBetChoice(bet, accountBet, accountAddress);\r\n    }\r\n\r\n    function getPots(string memory betId) public view returns (GetBetPotResponse[] memory) {\r\n         BetNChoices storage bet = bets[betId];\r\n        require(keccak256(bytes(bet.id)) == keccak256(bytes(betId)), \"Invalid bet id\");\r\n\r\n        GetBetPotResponse[] memory potsResponse = new GetBetPotResponse[](bet.possibleChoices.length);\r\n\r\n        for (uint32 i = 0; i < bet.possibleChoices.length; i++ ) {\r\n            uint32 choiceId = i + 1;\r\n            string memory choiceStr = bet.choiceIdToString[choiceId];\r\n            potsResponse[i] = GetBetPotResponse({\r\n                choice: choiceStr,\r\n                value: bet.pots[choiceId]\r\n            });\r\n        }\r\n\r\n        return potsResponse;\r\n    }\r\n\r\n    // unused\r\n    function notifyRewardAmount(uint256 reward, uint256 _duration) external { return; }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_uniswapAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_yieldwarsAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"}],\"name\":\"ETHBetChoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethEarnings\",\"type\":\"uint256\"}],\"name\":\"EarningsPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"}],\"name\":\"ETHBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"}],\"name\":\"cancelBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"choice1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"choice2\",\"type\":\"string\"}],\"name\":\"createBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"}],\"name\":\"finalizeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"}],\"name\":\"getBet\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFeesClaimed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"winner\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalPot\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"possibleChoices\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"choiceId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ethEarnings\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingV2.GetBetChoiceResponse[]\",\"name\":\"bets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingV2.GetBetPotResponse[]\",\"name\":\"pots\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BettingV2.GetBetResponse\",\"name\":\"response\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBetHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"choiceId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ethEarnings\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingV2.GetBetChoiceResponse\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct BettingV2.BetHistoryResponse[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"getCurrentBet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"choiceId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ethEarnings\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingV2.GetBetChoiceResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"}],\"name\":\"getPots\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingV2.GetBetPotResponse[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"}],\"name\":\"getRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"listOutstandingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingV2.OutstandingReward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"}],\"name\":\"pauseBetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rescueFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"}],\"name\":\"transferFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"}],\"name\":\"unpauseBetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_uniswapAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_yieldwarsAddress\",\"type\":\"address\"}],\"name\":\"updateAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BettingV2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001e76dae726c9ddf9caa949ac0b69836af684f89a00000000000000000000000086a1a5efc50707e85f1599eea9b3d155b80fd965000000000000000000000000c6248dabf943fa24880182daa67e85c6f725bf81","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://aec8c8e936f2d948160267908d00ed992e29f2b1bf1c1d06d370f719eb1e501b"}]}