{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\modules\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'SafeMath: addition overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'SafeMath: substraction underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: multiplication overflow');\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Managerable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ncontract Managerable is Ownable {\r\n\r\n    address private _managerAddress;\r\n    /**\r\n     * @dev modifier, Only manager can be granted exclusive access to specific functions. \r\n     *\r\n     */\r\n    modifier onlyManager() {\r\n        require(_managerAddress == msg.sender,\"Managerable: caller is not the Manager\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev set manager by owner. \r\n     *\r\n     */\r\n    function setManager(address managerAddress)\r\n    public\r\n    onlyOwner\r\n    {\r\n        _managerAddress = managerAddress;\r\n    }\r\n    /**\r\n     * @dev get manager address. \r\n     *\r\n     */\r\n    function getManager()public view returns (address) {\r\n        return _managerAddress;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Halt.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract Halt is Ownable {\r\n    \r\n    bool private halted = false; \r\n    \r\n    modifier notHalted() {\r\n        require(!halted,\"This contract is halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(halted,\"This contract is not halted\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice function Emergency situation that requires \r\n    /// @notice contribution period to stop or not.\r\n    function setHalt(bool halt) \r\n        public \r\n        onlyOwner\r\n    {\r\n        halted = halt;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\whiteList.sol\r\n\r\npragma solidity =0.5.16;\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible uint32.\r\n     */\r\nlibrary whiteListUint32 {\r\n    /**\r\n     * @dev add uint32 into white list.\r\n     * @param whiteList the storage whiteList.\r\n     * @param temp input value\r\n     */\r\n\r\n    function addWhiteListUint32(uint32[] storage whiteList,uint32 temp) internal{\r\n        if (!isEligibleUint32(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    /**\r\n     * @dev remove uint32 from whitelist.\r\n     */\r\n    function removeWhiteListUint32(uint32[] storage whiteList,uint32 temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible uint256.\r\n     */\r\nlibrary whiteListUint256 {\r\n    // add whiteList\r\n    function addWhiteListUint256(uint256[] storage whiteList,uint256 temp) internal{\r\n        if (!isEligibleUint256(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListUint256(uint256[] storage whiteList,uint256 temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible address.\r\n     */\r\nlibrary whiteListAddress {\r\n    // add whiteList\r\n    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\r\n        if (!isEligibleAddress(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexAddress(address[] memory whiteList,address temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\AddressWhiteList.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n    /**\r\n     * @dev Implementation of a whitelist filters a eligible address.\r\n     */\r\ncontract AddressWhiteList is Halt {\r\n\r\n    using whiteListAddress for address[];\r\n    uint256 constant internal allPermission = 0xffffffff;\r\n    uint256 constant internal allowBuyOptions = 1;\r\n    uint256 constant internal allowSellOptions = 1<<1;\r\n    uint256 constant internal allowExerciseOptions = 1<<2;\r\n    uint256 constant internal allowAddCollateral = 1<<3;\r\n    uint256 constant internal allowRedeemCollateral = 1<<4;\r\n    // The eligible adress list\r\n    address[] internal whiteList;\r\n    mapping(address => uint256) internal addressPermission;\r\n    /**\r\n     * @dev Implementation of add an eligible address into the whitelist.\r\n     * @param addAddress new eligible address.\r\n     */\r\n    function addWhiteList(address addAddress)public onlyOwner{\r\n        whiteList.addWhiteListAddress(addAddress);\r\n        addressPermission[addAddress] = allPermission;\r\n    }\r\n    function modifyPermission(address addAddress,uint256 permission)public onlyOwner{\r\n        addressPermission[addAddress] = permission;\r\n    }\r\n    /**\r\n     * @dev Implementation of revoke an invalid address from the whitelist.\r\n     * @param removeAddress revoked address.\r\n     */\r\n    function removeWhiteList(address removeAddress)public onlyOwner returns (bool){\r\n        addressPermission[removeAddress] = 0;\r\n        return whiteList.removeWhiteListAddress(removeAddress);\r\n    }\r\n    /**\r\n     * @dev Implementation of getting the eligible whitelist.\r\n     */\r\n    function getWhiteList()public view returns (address[] memory){\r\n        return whiteList;\r\n    }\r\n    /**\r\n     * @dev Implementation of testing whether the input address is eligible.\r\n     * @param tmpAddress input address for testing.\r\n     */    \r\n    function isEligibleAddress(address tmpAddress) public view returns (bool){\r\n        return whiteList.isEligibleAddress(tmpAddress);\r\n    }\r\n    function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){\r\n        return  (addressPermission[tmpAddress]&state) == state;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\ReentrancyGuard.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\FNXMinePool\\MinePoolData.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @title FPTCoin mine pool, which manager contract is FPTCoin.\r\n * @dev A smart-contract which distribute some mine coins by FPTCoin balance.\r\n *\r\n */\r\ncontract MinePoolData is Managerable,AddressWhiteList,ReentrancyGuard {\r\n    //Special decimals for calculation\r\n    uint256 constant calDecimals = 1e18;\r\n    // miner's balance\r\n    // map mineCoin => user => balance\r\n    mapping(address=>mapping(address=>uint256)) internal minerBalances;\r\n    // miner's origins, specially used for mine distribution\r\n    // map mineCoin => user => balance\r\n    mapping(address=>mapping(address=>uint256)) internal minerOrigins;\r\n    \r\n    // mine coins total worth, specially used for mine distribution\r\n    mapping(address=>uint256) internal totalMinedWorth;\r\n    // total distributed mine coin amount\r\n    mapping(address=>uint256) internal totalMinedCoin;\r\n    // latest time to settlement\r\n    mapping(address=>uint256) internal latestSettleTime;\r\n    //distributed mine amount\r\n    mapping(address=>uint256) internal mineAmount;\r\n    //distributed time interval\r\n    mapping(address=>uint256) internal mineInterval;\r\n    //distributed mine coin amount for buy options user.\r\n    mapping(address=>uint256) internal buyingMineMap;\r\n    // user's Opterator indicator \r\n    uint256 constant internal opBurnCoin = 1;\r\n    uint256 constant internal opMintCoin = 2;\r\n    uint256 constant internal opTransferCoin = 3;\r\n    /**\r\n     * @dev Emitted when `account` mint `amount` miner shares.\r\n     */\r\n    event MintMiner(address indexed account,uint256 amount);\r\n    /**\r\n     * @dev Emitted when `account` burn `amount` miner shares.\r\n     */\r\n    event BurnMiner(address indexed account,uint256 amount);\r\n    /**\r\n     * @dev Emitted when `from` redeem `value` mineCoins.\r\n     */\r\n    event RedeemMineCoin(address indexed from, address indexed mineCoin, uint256 value);\r\n    /**\r\n     * @dev Emitted when `from` transfer to `to` `amount` mineCoins.\r\n     */\r\n    event TranserMiner(address indexed from, address indexed to, uint256 amount);\r\n    /**\r\n     * @dev Emitted when `account` buying options get `amount` mineCoins.\r\n     */\r\n    event BuyingMiner(address indexed account,address indexed mineCoin,uint256 amount);\r\n}\r\n\r\n// File: contracts\\ERC20\\IERC20.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\FNXMinePool\\FNXMinePool.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @title FPTCoin mine pool, which manager contract is FPTCoin.\r\n * @dev A smart-contract which distribute some mine coins by FPTCoin balance.\r\n *\r\n */\r\ncontract FNXMinePool is MinePoolData {\r\n    using SafeMath for uint256;\r\n    constructor () public{\r\n        initialize();\r\n    }\r\n    function initialize() onlyOwner public{\r\n    }\r\n    function update() onlyOwner public{\r\n    }\r\n    /**\r\n     * @dev default function for foundation input miner coins.\r\n     */\r\n    function()external payable{\r\n\r\n    }\r\n    /**\r\n     * @dev foundation redeem out mine coins.\r\n     * @param mineCoin mineCoin address\r\n     * @param amount redeem amount.\r\n     */\r\n    function redeemOut(address mineCoin,uint256 amount)public onlyOwner{\r\n        if (mineCoin == address(0)){\r\n            msg.sender.transfer(amount);\r\n        }else{\r\n            IERC20 token = IERC20(mineCoin);\r\n            uint256 preBalance = token.balanceOf(address(this));\r\n            token.transfer(msg.sender,amount);\r\n            uint256 afterBalance = token.balanceOf(address(this));\r\n            require(preBalance - afterBalance == amount,\"settlement token transfer error!\");\r\n        }\r\n    }\r\n    /**\r\n     * @dev retrieve total distributed mine coins.\r\n     * @param mineCoin mineCoin address\r\n     */\r\n    function getTotalMined(address mineCoin)public view returns(uint256){\r\n        uint256 _totalSupply = totalSupply();\r\n        uint256 _mineInterval = mineInterval[mineCoin];\r\n        if (_totalSupply > 0 && _mineInterval>0){\r\n            uint256 _mineAmount = mineAmount[mineCoin];\r\n            uint256 latestMined = _mineAmount.mul(now-latestSettleTime[mineCoin])/_mineInterval;\r\n            return totalMinedCoin[mineCoin].add(latestMined);\r\n        }\r\n        return totalMinedCoin[mineCoin];\r\n    }\r\n    /**\r\n     * @dev retrieve minecoin distributed informations.\r\n     * @param mineCoin mineCoin address\r\n     * @return distributed amount and distributed time interval.\r\n     */\r\n    function getMineInfo(address mineCoin)public view returns(uint256,uint256){\r\n        return (mineAmount[mineCoin],mineInterval[mineCoin]);\r\n    }\r\n    /**\r\n     * @dev retrieve user's mine balance.\r\n     * @param account user's account\r\n     * @param mineCoin mineCoin address\r\n     */\r\n    function getMinerBalance(address account,address mineCoin)public view returns(uint256){\r\n        uint256 totalBalance = minerBalances[mineCoin][account];\r\n        uint256 _totalSupply = totalSupply();\r\n        uint256 balance = balanceOf(account);\r\n        if (_totalSupply > 0 && balance>0){\r\n            uint256 tokenNetWorth = _getCurrentTokenNetWorth(mineCoin);\r\n            totalBalance= totalBalance.add(_settlement(mineCoin,account,balance,tokenNetWorth));\r\n        }\r\n        return totalBalance;\r\n    }\r\n    /**\r\n     * @dev Set mineCoin mine info, only foundation owner can invoked.\r\n     * @param mineCoin mineCoin address\r\n     * @param _mineAmount mineCoin distributed amount\r\n     * @param _mineInterval mineCoin distributied time interval\r\n     */\r\n    function setMineCoinInfo(address mineCoin,uint256 _mineAmount,uint256 _mineInterval)public onlyOwner {\r\n        require(_mineAmount<1e30,\"input mine amount is too large\");\r\n        require(_mineInterval>0,\"input mine Interval must larger than zero\");\r\n        _mineSettlement(mineCoin);\r\n        mineAmount[mineCoin] = _mineAmount;\r\n        mineInterval[mineCoin] = _mineInterval;\r\n        addWhiteList(mineCoin);\r\n    }\r\n    /**\r\n     * @dev Set the reward for buying options.\r\n     * @param mineCoin mineCoin address\r\n     * @param _mineAmount mineCoin reward amount\r\n     */\r\n    function setBuyingMineInfo(address mineCoin,uint256 _mineAmount)public onlyOwner {\r\n//        require(_mineAmount<1e30,\"input mine amount is too large\");\r\n        buyingMineMap[mineCoin] = _mineAmount;\r\n        addWhiteList(mineCoin);\r\n    }\r\n    /**\r\n     * @dev Get the reward for buying options.\r\n     * @param mineCoin mineCoin address\r\n     */\r\n    function getBuyingMineInfo(address mineCoin)public view returns(uint256){\r\n        return buyingMineMap[mineCoin];\r\n    }\r\n    /**\r\n     * @dev Get the all rewards for buying options.\r\n     */\r\n    function getBuyingMineInfoAll()public view returns(address[] memory,uint256[] memory){\r\n        uint256 len = whiteList.length;\r\n        address[] memory mineCoins = new address[](len);\r\n        uint256[] memory mineNums = new uint256[](len);\r\n        for (uint256 i=0;i<len;i++){\r\n            mineCoins[i] = whiteList[i];\r\n            mineNums[i] = buyingMineMap[mineCoins[i]];\r\n        }\r\n        return (mineCoins,mineNums);\r\n    }\r\n    /**\r\n     * @dev transfer mineCoin to recieptor when account transfer amount FPTCoin to recieptor, only manager contract can modify database.\r\n     * @param account the account transfer from\r\n     * @param recieptor the account transfer to\r\n     * @param amount the mine shared amount\r\n     */\r\n    function transferMinerCoin(address account,address recieptor,uint256 amount) public onlyManager {\r\n        _mineSettlementAll();\r\n        _transferMinerCoin(account,recieptor,amount);\r\n    }\r\n    /**\r\n     * @dev mint mineCoin to account when account add collateral to collateral pool, only manager contract can modify database.\r\n     * @param account user's account\r\n     * @param amount the mine shared amount\r\n     */\r\n    function mintMinerCoin(address account,uint256 amount) public onlyManager {\r\n        _mineSettlementAll();\r\n        _mintMinerCoin(account,amount);\r\n        emit MintMiner(account,amount);\r\n    }\r\n    /**\r\n     * @dev Burn mineCoin to account when account redeem collateral to collateral pool, only manager contract can modify database.\r\n     * @param account user's account\r\n     * @param amount the mine shared amount\r\n     */\r\n    function burnMinerCoin(address account,uint256 amount) public onlyManager {\r\n        _mineSettlementAll();\r\n        _burnMinerCoin(account,amount);\r\n        emit BurnMiner(account,amount);\r\n    }\r\n    /**\r\n     * @dev give amount buying reward to account, only manager contract can modify database.\r\n     * @param account user's account\r\n     * @param amount the buying shared amount\r\n     */\r\n    function addMinerBalance(address account,uint256 amount) public onlyManager {\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            address addr = whiteList[i];\r\n            uint256 mineNum = buyingMineMap[addr];\r\n            if (mineNum > 0){\r\n                uint128 mineRate = uint128(mineNum);\r\n                uint128 mineAdd = uint128(mineNum>>128);\r\n                uint256 _mineAmount = mineRate*amount/calDecimals + mineAdd;\r\n                minerBalances[addr][account] = minerBalances[addr][account].add(_mineAmount);\r\n                //totalMinedCoin[addr] = totalMinedCoin[addr].add(_mineAmount);\r\n                emit BuyingMiner(account,addr,_mineAmount);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @dev changer mine coin distributed amount , only foundation owner can modify database.\r\n     * @param mineCoin mine coin address\r\n     * @param _mineAmount the distributed amount.\r\n     */\r\n    function setMineAmount(address mineCoin,uint256 _mineAmount)public onlyOwner {\r\n        require(_mineAmount<1e30,\"input mine amount is too large\");\r\n        _mineSettlement(mineCoin);\r\n        mineAmount[mineCoin] = _mineAmount;\r\n    }\r\n    /**\r\n     * @dev changer mine coin distributed time interval , only foundation owner can modify database.\r\n     * @param mineCoin mine coin address\r\n     * @param _mineInterval the distributed time interval.\r\n     */\r\n    function setMineInterval(address mineCoin,uint256 _mineInterval)public onlyOwner {\r\n        require(_mineInterval>0,\"input mine Interval must larger than zero\");\r\n        _mineSettlement(mineCoin);\r\n        mineInterval[mineCoin] = _mineInterval;\r\n    }\r\n    /**\r\n     * @dev user redeem mine rewards.\r\n     * @param mineCoin mine coin address\r\n     * @param amount redeem amount.\r\n     */\r\n    function redeemMinerCoin(address mineCoin,uint256 amount)public nonReentrant notHalted {\r\n        _mineSettlement(mineCoin);\r\n        _settlementAllCoin(mineCoin,msg.sender);\r\n        uint256 minerAmount = minerBalances[mineCoin][msg.sender];\r\n        require(minerAmount>=amount,\"miner balance is insufficient\");\r\n\r\n        minerBalances[mineCoin][msg.sender] = minerAmount-amount;\r\n        _redeemMineCoin(mineCoin,msg.sender,amount);\r\n    }\r\n    /**\r\n     * @dev subfunction for user redeem mine rewards.\r\n     * @param mineCoin mine coin address\r\n     * @param recieptor recieptor's account\r\n     * @param amount redeem amount.\r\n     */\r\n    function _redeemMineCoin(address mineCoin,address payable recieptor,uint256 amount)internal {\r\n        if (amount == 0){\r\n            return;\r\n        }\r\n        if (mineCoin == address(0)){\r\n            recieptor.transfer(amount);\r\n        }else{\r\n            IERC20 minerToken = IERC20(mineCoin);\r\n            uint256 preBalance = minerToken.balanceOf(address(this));\r\n            minerToken.transfer(recieptor,amount);\r\n            uint256 afterBalance = minerToken.balanceOf(address(this));\r\n            require(preBalance - afterBalance == amount,\"settlement token transfer error!\");\r\n        }\r\n        emit RedeemMineCoin(recieptor,mineCoin,amount);\r\n    }\r\n    /**\r\n     * @dev settle all mine coin.\r\n     */    \r\n    function _mineSettlementAll()internal{\r\n        uint256 addrLen = whiteList.length;\r\n        for(uint256 i=0;i<addrLen;i++){\r\n            _mineSettlement(whiteList[i]);\r\n        }\r\n    }\r\n    /**\r\n     * @dev the auxiliary function for _mineSettlementAll.\r\n     */    \r\n    function _mineSettlement(address mineCoin)internal{\r\n        uint256 latestMined = _getLatestMined(mineCoin);\r\n        uint256 _mineInterval = mineInterval[mineCoin];\r\n        if (latestMined>0){\r\n            totalMinedWorth[mineCoin] = totalMinedWorth[mineCoin].add(latestMined.mul(calDecimals));\r\n            totalMinedCoin[mineCoin] = totalMinedCoin[mineCoin]+latestMined;\r\n        }\r\n        if (_mineInterval>0){\r\n            latestSettleTime[mineCoin] = now/_mineInterval*_mineInterval;\r\n        }else{\r\n            latestSettleTime[mineCoin] = now;\r\n        }\r\n    }\r\n    /**\r\n     * @dev the auxiliary function for _mineSettlementAll. Calculate latest time phase distributied mine amount.\r\n     */ \r\n    function _getLatestMined(address mineCoin)internal view returns(uint256){\r\n        uint256 _mineInterval = mineInterval[mineCoin];\r\n        uint256 _totalSupply = totalSupply();\r\n        if (_totalSupply > 0 && _mineInterval>0){\r\n            uint256 _mineAmount = mineAmount[mineCoin];\r\n            uint256 mintTime = (now-latestSettleTime[mineCoin])/_mineInterval;\r\n            uint256 latestMined = _mineAmount*mintTime;\r\n            return latestMined;\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * @dev subfunction, transfer mineCoin to recieptor when account transfer amount FPTCoin to recieptor\r\n     * @param account the account transfer from\r\n     * @param recipient the account transfer to\r\n     * @param amount the mine shared amount\r\n     */\r\n    function _transferMinerCoin(address account,address recipient,uint256 amount)internal{\r\n        uint256 addrLen = whiteList.length;\r\n        for(uint256 i=0;i<addrLen;i++){\r\n            settleMinerBalance(whiteList[i],account,recipient,amount,opTransferCoin);\r\n        }\r\n        emit TranserMiner(account,recipient,amount);\r\n    }\r\n    /**\r\n     * @dev subfunction, mint mineCoin to account when account add collateral to collateral pool\r\n     * @param account user's account\r\n     * @param amount the mine shared amount\r\n     */\r\n    function _mintMinerCoin(address account,uint256 amount)internal{\r\n        uint256 addrLen = whiteList.length;\r\n        for(uint256 i=0;i<addrLen;i++){\r\n            settleMinerBalance(whiteList[i],account,address(0),amount,opMintCoin);\r\n        }\r\n    }\r\n    /**\r\n     * @dev subfunction, settle user's mint balance when user want to modify mine database.\r\n     * @param mineCoin the mine coin address\r\n     * @param account user's account\r\n     */\r\n    function _settlementAllCoin(address mineCoin,address account)internal{\r\n        settleMinerBalance(mineCoin,account,address(0),0,0);\r\n    }\r\n    /**\r\n     * @dev subfunction, Burn mineCoin to account when account redeem collateral to collateral pool\r\n     * @param account user's account\r\n     * @param amount the mine shared amount\r\n     */\r\n    function _burnMinerCoin(address account,uint256 amount)internal{\r\n        uint256 addrLen = whiteList.length;\r\n        for(uint256 i=0;i<addrLen;i++){\r\n            settleMinerBalance(whiteList[i],account,address(0),amount,opBurnCoin);\r\n        }\r\n    }\r\n    /**\r\n     * @dev settle user's mint balance when user want to modify mine database.\r\n     * @param mineCoin the mine coin address\r\n     * @param account user's account\r\n     * @param recipient the recipient's address if operator is transfer\r\n     * @param amount the input amount for operator\r\n     * @param operators User operator to modify mine database.\r\n     */\r\n    function settleMinerBalance(address mineCoin,address account,address recipient,uint256 amount,uint256 operators)internal{\r\n        uint256 _totalSupply = totalSupply();\r\n        uint256 tokenNetWorth = _getTokenNetWorth(mineCoin);\r\n        if (_totalSupply > 0){\r\n            minerBalances[mineCoin][account] = minerBalances[mineCoin][account].add(\r\n                    _settlement(mineCoin,account,balanceOf(account),tokenNetWorth));\r\n            if (operators == opBurnCoin){\r\n                totalMinedWorth[mineCoin] = totalMinedWorth[mineCoin].sub(tokenNetWorth.mul(amount));\r\n            }else if (operators==opMintCoin){\r\n                totalMinedWorth[mineCoin] = totalMinedWorth[mineCoin].add(tokenNetWorth.mul(amount));\r\n            }else if (operators==opTransferCoin){\r\n                minerBalances[mineCoin][recipient] = minerBalances[mineCoin][recipient].add(\r\n                    _settlement(mineCoin,recipient,balanceOf(recipient),tokenNetWorth));\r\n                minerOrigins[mineCoin][recipient] = tokenNetWorth;\r\n            }\r\n        }\r\n        minerOrigins[mineCoin][account] = tokenNetWorth;\r\n    }\r\n    /**\r\n     * @dev subfunction, settle user's latest mine amount.\r\n     * @param mineCoin the mine coin address\r\n     * @param account user's account\r\n     * @param amount the input amount for operator\r\n     * @param tokenNetWorth the latest token net worth\r\n     */\r\n    function _settlement(address mineCoin,address account,uint256 amount,uint256 tokenNetWorth)internal view returns (uint256) {\r\n        uint256 origin = minerOrigins[mineCoin][account];\r\n        require(tokenNetWorth>=origin,\"error: tokenNetWorth logic error!\");\r\n        return amount.mul(tokenNetWorth-origin)/calDecimals;\r\n    }\r\n    /**\r\n     * @dev subfunction, calculate current token net worth.\r\n     * @param mineCoin the mine coin address\r\n     */\r\n    function _getCurrentTokenNetWorth(address mineCoin)internal view returns (uint256) {\r\n        uint256 latestMined = _getLatestMined(mineCoin);\r\n        uint256 _totalSupply = totalSupply();\r\n        if (_totalSupply > 0){\r\n            return (totalMinedWorth[mineCoin].add(latestMined*calDecimals))/_totalSupply;\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * @dev subfunction, calculate token net worth when settlement is completed.\r\n     * @param mineCoin the mine coin address\r\n     */\r\n    function _getTokenNetWorth(address mineCoin)internal view returns (uint256) {\r\n        uint256 _totalSupply = totalSupply();\r\n        if (_totalSupply > 0){\r\n            return totalMinedWorth[mineCoin]/_totalSupply;\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * @dev get FPTCoin's total supply.\r\n     */\r\n    function totalSupply()internal view returns(uint256){\r\n        IERC20 _FPTCoin = IERC20(getManager());\r\n        return _FPTCoin.totalSupply();\r\n    }\r\n    /**\r\n     * @dev get FPTCoin's user balance.\r\n     */\r\n    function balanceOf(address account)internal view returns(uint256){\r\n        IERC20 _FPTCoin = IERC20(getManager());\r\n        return _FPTCoin.balanceOf(account);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyingMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RedeemMineCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TranserMiner\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMinerBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addAddress\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnMinerCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tmpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"checkAddressPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"}],\"name\":\"getBuyingMineInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyingMineInfoAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"}],\"name\":\"getMineInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"}],\"name\":\"getMinerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"}],\"name\":\"getTotalMined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tmpAddress\",\"type\":\"address\"}],\"name\":\"isEligibleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintMinerCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permission\",\"type\":\"uint256\"}],\"name\":\"modifyPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemMinerCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"removeAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mineAmount\",\"type\":\"uint256\"}],\"name\":\"setBuyingMineInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mineAmount\",\"type\":\"uint256\"}],\"name\":\"setMineAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mineAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mineInterval\",\"type\":\"uint256\"}],\"name\":\"setMineCoinInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mineInterval\",\"type\":\"uint256\"}],\"name\":\"setMineInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recieptor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferMinerCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FNXMinePool","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f8e99b1730f4734cdec7359300717ec7688b68cf230c9c53d1851ac378a0e3f1"}]}