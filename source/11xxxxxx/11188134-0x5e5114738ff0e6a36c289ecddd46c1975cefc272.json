{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\modules\\Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IVolatility.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IVolatility {\r\n    function calculateIv(uint32 underlying,uint8 optType,uint256 expiration,uint256 currentPrice,uint256 strikePrice)external view returns (uint256);\r\n}\r\ncontract ImportVolatility is Ownable{\r\n    IVolatility internal _volatility;\r\n    function getVolatilityAddress() public view returns(address){\r\n        return address(_volatility);\r\n    }\r\n    function setVolatilityAddress(address volatility)public onlyOwner{\r\n        _volatility = IVolatility(volatility);\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\SmallNumbers.sol\r\n\r\npragma solidity =0.5.16;\r\n    /**\r\n     * @dev Implementation of a Fraction number operation library.\r\n     */\r\nlibrary SmallNumbers {\r\n//    using Fraction for fractionNumber;\r\n    int256 constant private sqrtNum = 1<<120;\r\n    int256 constant private shl = 80;\r\n    uint8 constant private PRECISION   = 32;  // fractional bits\r\n    uint256 constant public FIXED_ONE = uint256(1) << PRECISION; // 0x100000000\r\n    int256 constant public FIXED_64 = 1 << 64; // 0x100000000\r\n    uint256 constant private FIXED_TWO = uint256(2) << PRECISION; // 0x200000000\r\n    int256 constant private FIXED_SIX = int256(6) << PRECISION; // 0x200000000\r\n    uint256 constant private MAX_VAL   = uint256(1) << (256 - PRECISION); // 0x0000000100000000000000000000000000000000000000000000000000000000\r\n\r\n    /**\r\n     * @dev Standard normal cumulative distribution function\r\n     */\r\n    function normsDist(int256 xNum) internal pure returns (int256) {\r\n        bool _isNeg = xNum<0;\r\n        if (_isNeg) {\r\n            xNum = -xNum;\r\n        }\r\n        if (xNum > FIXED_SIX){\r\n            return _isNeg ? 0 : int256(FIXED_ONE);\r\n        } \r\n        // constant int256 b1 = 1371733226;\r\n        // constant int256 b2 = -1531429783;\r\n        // constant int256 b3 = 7651389478;\r\n        // constant int256 b4 = -7822234863;\r\n        // constant int256 b5 = 5713485167;\r\n        //t = 1.0/(1.0 + p*x);\r\n        int256 p = 994894385;\r\n        int256 t = FIXED_64/(((p*xNum)>>PRECISION)+int256(FIXED_ONE));\r\n        //double val = 1 - (1/(Math.sqrt(2*Math.PI))  * Math.exp(-1*Math.pow(a, 2)/2)) * (b1*t + b2 * Math.pow(t,2) + b3*Math.pow(t,3) + b4 * Math.pow(t,4) + b5 * Math.pow(t,5) );\r\n        //1.0 - (-x * x / 2.0).exp()/ (2.0*pi()).sqrt() * t * (a1 + t * (-0.356563782 + t * (1.781477937 + t * (-1.821255978 + t * 1.330274429)))) ;\r\n        xNum=xNum*xNum/int256(FIXED_TWO);\r\n        xNum = int256(7359186145390886912/fixedExp(uint256(xNum)));\r\n        int256 tt = t;\r\n        int256 All = 1371733226*tt;\r\n        tt = (tt*t)>>PRECISION;\r\n        All += -1531429783*tt;\r\n        tt = (tt*t)>>PRECISION;\r\n        All += 7651389478*tt;\r\n        tt = (tt*t)>>PRECISION;\r\n        All += -7822234863*tt;\r\n        tt = (tt*t)>>PRECISION;\r\n        All += 5713485167*tt;\r\n        xNum = (xNum*All)>>64;\r\n        if (!_isNeg) {\r\n            xNum = uint64(FIXED_ONE) - xNum;\r\n        }\r\n        return xNum;\r\n    }\r\n    function pow(uint256 _x,uint256 _y) internal pure returns (uint256){\r\n        _x = (ln(_x)*_y)>>PRECISION;\r\n        return fixedExp(_x);\r\n    }\r\n\r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        x = x << PRECISION;\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n    function ln(uint256 _x)  internal pure returns (uint256) {\r\n        return fixedLoge(_x);\r\n    }\r\n        /**\r\n        input range: \r\n            [0x100000000,uint256_max]\r\n        output range:\r\n            [0, 0x9b43d4f8d6]\r\n\r\n        This method asserts outside of bounds\r\n\r\n    */\r\n    function fixedLoge(uint256 _x) internal pure returns (uint256 logE) {\r\n        /*\r\n        Since `fixedLog2_min` output range is max `0xdfffffffff` \r\n        (40 bits, or 5 bytes), we can use a very large approximation\r\n        for `ln(2)`. This one is used since it’s the max accuracy \r\n        of Python `ln(2)`\r\n\r\n        0xb17217f7d1cf78 = ln(2) * (1 << 56)\r\n        \r\n        */\r\n        //Cannot represent negative numbers (below 1)\r\n        require(_x >= FIXED_ONE,\"loge function input is too small\");\r\n\r\n        uint256 _log2 = fixedLog2(_x);\r\n        logE = (_log2 * 0xb17217f7d1cf78) >> 56;\r\n    }\r\n\r\n    /**\r\n        Returns log2(x >> 32) << 32 [1]\r\n        So x is assumed to be already upshifted 32 bits, and \r\n        the result is also upshifted 32 bits. \r\n        \r\n        [1] The function returns a number which is lower than the \r\n        actual value\r\n\r\n        input-range : \r\n            [0x100000000,uint256_max]\r\n        output-range: \r\n            [0,0xdfffffffff]\r\n\r\n        This method asserts outside of bounds\r\n\r\n    */\r\n    function fixedLog2(uint256 _x) internal pure returns (uint256) {\r\n        // Numbers below 1 are negative. \r\n        require( _x >= FIXED_ONE,\"Log2 input is too small\");\r\n\r\n        uint256 hi = 0;\r\n        while (_x >= FIXED_TWO) {\r\n            _x >>= 1;\r\n            hi += FIXED_ONE;\r\n        }\r\n\r\n        for (uint8 i = 0; i < PRECISION; ++i) {\r\n            _x = (_x * _x) / FIXED_ONE;\r\n            if (_x >= FIXED_TWO) {\r\n                _x >>= 1;\r\n                hi += uint256(1) << (PRECISION - 1 - i);\r\n            }\r\n        }\r\n\r\n        return hi;\r\n    }\r\n    function exp(int256 _x)internal pure returns (uint256){\r\n        bool _isNeg = _x<0;\r\n        if (_isNeg) {\r\n            _x = -_x;\r\n        }\r\n        uint256 value = fixedExp(uint256(_x));\r\n        if (_isNeg){\r\n            return uint256(FIXED_64) / value;\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n        fixedExp is a ‘protected’ version of `fixedExpUnsafe`, which \r\n        asserts instead of overflows\r\n    */\r\n    function fixedExp(uint256 _x) internal pure returns (uint256) {\r\n        require(_x <= 0x386bfdba29,\"exp function input is overflow\");\r\n        return fixedExpUnsafe(_x);\r\n    }\r\n       /**\r\n        fixedExp \r\n        Calculates e^x according to maclauren summation:\r\n\r\n        e^x = 1+x+x^2/2!...+x^n/n!\r\n\r\n        and returns e^(x>>32) << 32, that is, upshifted for accuracy\r\n\r\n        Input range:\r\n            - Function ok at    <= 242329958953 \r\n            - Function fails at >= 242329958954\r\n\r\n        This method is is visible for testcases, but not meant for direct use. \r\n \r\n        The values in this method been generated via the following python snippet: \r\n\r\n        def calculateFactorials():\r\n            “”\"Method to print out the factorials for fixedExp”“”\r\n\r\n            ni = []\r\n            ni.append( 295232799039604140847618609643520000000) # 34!\r\n            ITERATIONS = 34\r\n            for n in range( 1,  ITERATIONS,1 ) :\r\n                ni.append(math.floor(ni[n - 1] / n))\r\n            print( “\\n        “.join([“xi = (xi * _x) >> PRECISION;\\n        res += xi * %s;” % hex(int(x)) for x in ni]))\r\n\r\n    */\r\n    function fixedExpUnsafe(uint256 _x) internal pure returns (uint256) {\r\n    \r\n        uint256 xi = FIXED_ONE;\r\n        uint256 res = 0xde1bc4d19efcac82445da75b00000000 * xi;\r\n\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xde1bc4d19efcb0000000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x6f0de268cf7e58000000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x2504a0cd9a7f72000000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x9412833669fdc800000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x1d9d4d714865f500000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x4ef8ce836bba8c0000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xb481d807d1aa68000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x16903b00fa354d000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x281cdaac677b3400000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x402e2aad725eb80000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x5d5a6c9f31fe24000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x7c7890d442a83000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x9931ed540345280000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xaf147cf24ce150000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xbac08546b867d000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xbac08546b867d00000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xafc441338061b8000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x9c3cabbc0056e000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x839168328705c80000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x694120286c04a0000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x50319e98b3d2c400;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x3a52a1e36b82020;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x289286e0fce002;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x1b0c59eb53400;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x114f95b55400;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xaa7210d200;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x650139600;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x39b78e80;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x1fd8080;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x10fbc0;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x8c40;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x462;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x22;\r\n\r\n        return res / 0xde1bc4d19efcac82445da75b00000000;\r\n    }  \r\n}\r\n\r\n// File: contracts\\optionsPrice.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @title Options price calculation contract.\r\n * @dev calculate options' price, using B-S formulas.\r\n *\r\n */\r\ncontract OptionsPrice is ImportVolatility{\r\n    // one year seconds\r\n    uint256 constant internal Year = 365 days;\r\n    int256 constant public FIXED_ONE = 1 << 32; // 0x100000000\r\n    uint256 internal ratioR2 = 4<<32;\r\n    \r\n    /**\r\n     * @dev constructor function , setting contract address.\r\n     */  \r\n    constructor (address ivContract) public{\r\n        setVolatilityAddress(ivContract);\r\n    }\r\n\r\n    /**\r\n     * @dev calculate option's price using B_S formulas\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param underlying option's underlying id, 1 for BTC, 2 for ETH.\r\n     * @param optType option's type, 0 for CALL, 2 for PUT.\r\n     */\r\n    function getOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration,uint32 underlying,uint8 optType)public view returns (uint256){\r\n         uint256 _iv = _volatility.calculateIv(underlying,optType,expiration,currentPrice,strikePrice);\r\n        if (optType == 0) {\r\n            return callOptionsPrice(currentPrice,strikePrice,expiration,_iv);\r\n        }else if (optType == 1){\r\n            return putOptionsPrice(currentPrice,strikePrice,expiration,_iv);\r\n        }else{\r\n            require(optType<2,\" Must input 0 for call option or 1 for put option\");\r\n        }\r\n    }\r\n    /**\r\n     * @dev calculate option's price using B_S formulas with user input iv.\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param _iv user input iv numerator.\r\n     * @param optType option's type, 0 for CALL, 2 for PUT.\r\n     */\r\n    function getOptionsPrice_iv(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\r\n            uint256 _iv,uint8 optType)public view returns (uint256){\r\n        if (optType == 0) {\r\n            return callOptionsPrice(currentPrice,strikePrice,expiration,_iv);\r\n        }else if (optType == 1){\r\n            return putOptionsPrice(currentPrice,strikePrice,expiration,_iv);\r\n        }else{\r\n            require(optType<2,\" Must input 0 for call option or 1 for put option\");\r\n        }\r\n    }\r\n    /**\r\n     * @dev An auxiliary function, calculate parameter d1 and d2 in B_S formulas.\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param derta implied volatility value in B-S formulas.\r\n     */\r\n    function calculateD1D2(uint256 currentPrice, uint256 strikePrice, uint256 expiration, uint256 derta) \r\n            internal pure returns (int256,int256) {\r\n        int256 d1 = 0;\r\n        if (currentPrice > strikePrice){\r\n            d1 = int256(SmallNumbers.fixedLoge((currentPrice<<32)/strikePrice));\r\n        }else if (currentPrice<strikePrice){\r\n            d1 = -int256(SmallNumbers.fixedLoge((strikePrice<<32)/currentPrice));\r\n        }\r\n        uint256 derta2 = (derta*derta)>>33;//0.5*derta^2\r\n        derta2 = derta2*expiration/Year;\r\n        d1 = d1+int256(derta2);\r\n        derta2 = SmallNumbers.sqrt(derta2*2);\r\n        d1 = (d1<<32)/int256(derta2);\r\n        return (d1, d1 - int256(derta2));\r\n    }\r\n    /**\r\n     * @dev An auxiliary function, calculate put option price using B_S formulas.\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param derta implied volatility value in B-S formulas.\r\n     */\r\n    //L*pow(e,-rT)*(1-N(d2)) - S*(1-N(d1))\r\n    function putOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration, uint256 derta) \r\n                internal pure returns (uint256) {\r\n       (int256 d1, int256 d2) = calculateD1D2(currentPrice, strikePrice, expiration, derta);\r\n        d1 = SmallNumbers.normsDist(d1);\r\n        d2 = SmallNumbers.normsDist(d2);\r\n        d1 = (FIXED_ONE - d1)*int256(currentPrice);\r\n        d2 = (FIXED_ONE - d2)*int256(strikePrice);\r\n        d1 = d2 - d1;\r\n        int256 minPrice = int256(currentPrice)*12884902;\r\n        return (d1>minPrice) ? uint256(d1>>32) : currentPrice*3/1000;\r\n    }\r\n    /**\r\n     * @dev An auxiliary function, calculate call option price using B_S formulas.\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param derta implied volatility value in B-S formulas.\r\n     */\r\n    //S*N(d1)-L*pow(e,-rT)*N(d2)\r\n    function callOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration, uint256 derta) \r\n                internal pure returns (uint256) {\r\n       (int256 d1, int256 d2) = calculateD1D2(currentPrice, strikePrice, expiration, derta);\r\n        d1 = SmallNumbers.normsDist(d1);\r\n        d2 = SmallNumbers.normsDist(d2);\r\n        d1 = d1*int256(currentPrice)-d2*int256(strikePrice);\r\n        int256 minPrice = int256(currentPrice)*12884902;\r\n        return (d1>minPrice) ? uint256(d1>>32) : currentPrice*3/1000;\r\n    }\r\n    function calOptionsPriceRatio(uint256 selfOccupied,uint256 totalOccupied,uint256 totalCollateral) public pure returns (uint256){\r\n        //r1 + 0.5\r\n        if (selfOccupied*2<=totalOccupied){\r\n            return 4294967296;\r\n        }\r\n        uint256 r1 = (selfOccupied<<32)/totalOccupied-2147483648;\r\n        uint256 r2 = (totalOccupied<<32)/totalCollateral*2;\r\n        //r1*r2*1.5\r\n        r1 = (r1*r2)>>32;\r\n        return ((r1*r1*r1)>>64)*3+4294967296;\r\n//        return SmallNumbers.pow(r1,r2);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ivContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIXED_ONE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"selfOccupied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOccupied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"}],\"name\":\"calOptionsPriceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"underlying\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"optType\",\"type\":\"uint8\"}],\"name\":\"getOptionsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_iv\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"optType\",\"type\":\"uint8\"}],\"name\":\"getOptionsPrice_iv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVolatilityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"volatility\",\"type\":\"address\"}],\"name\":\"setVolatilityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OptionsPrice","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000021d40f44d3c93ba4f0d94fa212a666fec381e26c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://65bd10ca90a5b59fd23e96d7756fb09434ebb2cc318434f6df24e97c816f3833"}]}