{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal virtual view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal virtual view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface IPriceOracleGetter {\r\n  function getAssetPrice(address asset) external view returns (uint256);\r\n}\r\n\r\ninterface IChainlinkAggregator {\r\n  function latestAnswer() external view returns (int256);\r\n}\r\n\r\n/// @title AaveOracle\r\n/// @author Aave\r\n/// @notice Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator\r\n///         smart contracts as primary option\r\n/// - If the returned price by a Chainlink aggregator is <= 0, the call is forwarded to a fallbackOracle\r\n/// - Owned by the Aave governance system, allowed to add sources for assets, replace them\r\n///   and change the fallbackOracle\r\ncontract AaveOracle is IPriceOracleGetter, Ownable {\r\n  event WethSet(address indexed weth);\r\n  event AssetSourceUpdated(address indexed asset, address indexed source);\r\n  event FallbackOracleUpdated(address indexed fallbackOracle);\r\n\r\n  mapping(address => IChainlinkAggregator) private assetsSources;\r\n  IPriceOracleGetter private _fallbackOracle;\r\n  address public immutable WETH;\r\n\r\n  /// @notice Constructor\r\n  /// @param assets The addresses of the assets\r\n  /// @param sources The address of the source of each asset\r\n  /// @param fallbackOracle The address of the fallback oracle to use if the data of an\r\n  ///        aggregator is not consistent\r\n  constructor(\r\n    address[] memory assets,\r\n    address[] memory sources,\r\n    address fallbackOracle,\r\n    address weth\r\n  ) public {\r\n    _setFallbackOracle(fallbackOracle);\r\n    _setAssetsSources(assets, sources);\r\n    WETH = weth;\r\n    emit WethSet(weth);\r\n  }\r\n\r\n  /// @notice External function called by the Aave governance to set or replace sources of assets\r\n  /// @param assets The addresses of the assets\r\n  /// @param sources The address of the source of each asset\r\n  function setAssetSources(address[] calldata assets, address[] calldata sources)\r\n    external\r\n    onlyOwner\r\n  {\r\n    _setAssetsSources(assets, sources);\r\n  }\r\n\r\n  /// @notice Sets the fallbackOracle\r\n  /// - Callable only by the Aave governance\r\n  /// @param fallbackOracle The address of the fallbackOracle\r\n  function setFallbackOracle(address fallbackOracle) external onlyOwner {\r\n    _setFallbackOracle(fallbackOracle);\r\n  }\r\n\r\n  /// @notice Internal function to set the sources for each asset\r\n  /// @param assets The addresses of the assets\r\n  /// @param sources The address of the source of each asset\r\n  function _setAssetsSources(address[] memory assets, address[] memory sources) internal {\r\n    require(assets.length == sources.length, 'INCONSISTENT_PARAMS_LENGTH');\r\n    for (uint256 i = 0; i < assets.length; i++) {\r\n      assetsSources[assets[i]] = IChainlinkAggregator(sources[i]);\r\n      emit AssetSourceUpdated(assets[i], sources[i]);\r\n    }\r\n  }\r\n\r\n  /// @notice Internal function to set the fallbackOracle\r\n  /// @param fallbackOracle The address of the fallbackOracle\r\n  function _setFallbackOracle(address fallbackOracle) internal {\r\n    _fallbackOracle = IPriceOracleGetter(fallbackOracle);\r\n    emit FallbackOracleUpdated(fallbackOracle);\r\n  }\r\n\r\n  /// @notice Gets an asset price by address\r\n  /// @param asset The asset address\r\n  function getAssetPrice(address asset) public override view returns (uint256) {\r\n    IChainlinkAggregator source = assetsSources[asset];\r\n\r\n    if (asset == WETH) {\r\n      return 1 ether;\r\n    } else if (address(source) == address(0)) {\r\n      return _fallbackOracle.getAssetPrice(asset);\r\n    } else {\r\n      int256 price = IChainlinkAggregator(source).latestAnswer();\r\n      if (price > 0) {\r\n        return uint256(price);\r\n      } else {\r\n        return _fallbackOracle.getAssetPrice(asset);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Gets a list of prices from a list of assets addresses\r\n  /// @param assets The list of assets addresses\r\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory) {\r\n    uint256[] memory prices = new uint256[](assets.length);\r\n    for (uint256 i = 0; i < assets.length; i++) {\r\n      prices[i] = getAssetPrice(assets[i]);\r\n    }\r\n    return prices;\r\n  }\r\n\r\n  /// @notice Gets the address of the source for an asset address\r\n  /// @param asset The address of the asset\r\n  /// @return address The address of the source\r\n  function getSourceOfAsset(address asset) external view returns (address) {\r\n    return address(assetsSources[asset]);\r\n  }\r\n\r\n  /// @notice Gets the address of the fallback oracle\r\n  /// @return address The addres of the fallback oracle\r\n  function getFallbackOracle() external view returns (address) {\r\n    return address(_fallbackOracle);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AssetSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"FallbackOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"WethSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAssetSources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"setFallbackOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveOracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000140000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef0000000000000000000000004fabb145d64652a948d72533023f6e7a623c7c530000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000f629cbd94d3791c9250152bd8dfbdf380e2a3b9c000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc9420000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000408e41876cccdc0f92210600ef50372656052a38000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f00000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f510000000000000000000000000000000000085d4780b73119b644ae5ecd22b3760000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000bc529c00c6401aef6d220be8c6ea1667f6ad93e000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f49800000000000000000000000010f7fc1f91ba351f9c629c5947ad69bd03c05b9600000000000000000000000000000000000000000000000000000000000000140000000000000000000000006df09e975c830ecae5bd4ed9d90f3a95a4f880120000000000000000000000000d16d4528239e9ee52fa531af613acdb23d88c94000000000000000000000000614715d2af89e6ec99a233818275142ce88d1cfd000000000000000000000000773616e4d11a78f511299002da57a0a94577f1f400000000000000000000000024d9ab51950f3d62e9144fdc2f3135daa6ce8d1b000000000000000000000000656c0544ef4c98a6a98491833a89204abb045d6b000000000000000000000000dc530d9457755926550b59e8eccdae762418155700000000000000000000000082a44d92d6c329826dc557c5e1be6ebec5d5feb900000000000000000000000024551a8fb2a7211a25a17b1481f043a8a8adc7f20000000000000000000000003147d7203354dc06d9fd350c7a2437bca92387a400000000000000000000000079291a9d692df95334b1a0b3b4ae6bc606782f8c0000000000000000000000008e0b7e6062272b5ef4524250bfff8e5bd34977570000000000000000000000003886ba987236181d98f2401c507fb8bea7871df2000000000000000000000000d6aa3d25116d8da79ea0246c4826eb951872e02e000000000000000000000000986b5e1e1755e3c2440e960477f25201b0a8bbd4000000000000000000000000ee9f2375b4bdf6387aa8265dd4fb8f16512a1d46000000000000000000000000deb288f737066589598e9214e782fa5a8ed689e80000000000000000000000007c5d4f8345e66f68099581db340cd65b078c41f40000000000000000000000002da4983a622a8498bb1a21fae9d8f6c6649399620000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e361b4072d4d8f7c5538b98948d76f20dcfa76c2e5b381ca3c114464bc2d71e8"}]}