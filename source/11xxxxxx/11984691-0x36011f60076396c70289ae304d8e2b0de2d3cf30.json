{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;// SPDX-License-Identifier: MIT\r\n\r\n\r\ncontract WhiteListHelper{\r\n    event NewWhiteList(uint _WhiteListCount, address _creator, address _contract, uint _changeUntil);\r\n\r\n    modifier OnlyCreator(uint256 _Id) {\r\n        require(\r\n            WhitelistSettings[_Id].Creator == msg.sender,\r\n            \"Only creator can access\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier TimeRemaining(uint256 _Id){\r\n        require(\r\n            now < WhitelistSettings[_Id].ChangeUntil,\r\n            \"Time for edit is finished\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier ValidateId(uint256 _Id){\r\n        require(_Id < WhiteListCount, \"Wrong ID\");\r\n        _;\r\n    }\r\n\r\n    struct WhiteListItem {\r\n        // uint256 Limit;\r\n        address Creator;\r\n        uint256 ChangeUntil;\r\n        //uint256 DrawLimit;\r\n        //uint256 SignUpPrice;\r\n        address Contract;\r\n        // mapping(address => uint256) WhiteListDB;\r\n        bool isReady; // defualt false | true after first address is added\r\n    }\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public WhitelistDB;\r\n    mapping(uint256 => WhiteListItem) public WhitelistSettings;\r\n    uint256 public WhiteListCost;\r\n    uint256 public WhiteListCount;\r\n\r\n    function _AddAddress(uint256 _Id, address user, uint amount) internal {\r\n        WhitelistDB[_Id][user] = amount;\r\n    }\r\n\r\n    function _RemoveAddress(uint256 _Id, address user) internal {\r\n        WhitelistDB[_Id][user] = 0;\r\n    }\r\n\r\n    function isWhiteListReady(uint256 _Id) external view returns(bool){\r\n        return WhitelistSettings[_Id].isReady;\r\n    }\r\n\r\n    //View function to Check if address is whitelisted\r\n    function Check(address _user, uint256 _id) external view returns(uint){\r\n        if (_id == 0) return uint256(-1);\r\n        return WhitelistDB[_id][_user];\r\n    }\r\n}/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ncontract WhiteList is WhiteListHelper, Ownable{\r\n    constructor() public {\r\n        WhiteListCount = 1; //0 is off\r\n        MaxUsersLimit = 10;\r\n        WhiteListCost = 0.01 ether;\r\n    }\r\n\r\n    //uint256 public SignUpCost;\r\n    uint256 public MaxUsersLimit;\r\n\r\n    modifier isBelowUserLimit(uint256 _limit) {\r\n        require(_limit <= MaxUsersLimit, \"Maximum User Limit exceeded\");\r\n        _;\r\n    }\r\n\r\n    function setMaxUsersLimit(uint256 _limit) external onlyOwner {\r\n        MaxUsersLimit = _limit;\r\n    }\r\n\r\n    function setWhiteListCost(uint256 _newCost) external onlyOwner {\r\n        WhiteListCost = _newCost;\r\n    }\r\n\r\n    function CreateManualWhiteList(\r\n        uint256 _ChangeUntil,\r\n        address _Contract\r\n    ) public payable returns (uint256 Id) {\r\n        require(msg.value >= WhiteListCost, \"ether not enough\");\r\n        WhitelistSettings[WhiteListCount] =  WhiteListItem(\r\n            /*_Limit == 0 ? uint256(-1) :*/\r\n            // _Limit,\r\n            msg.sender,\r\n            _ChangeUntil,\r\n            _Contract,\r\n            false\r\n        );\r\n        uint256 temp = WhiteListCount;\r\n        WhiteListCount++;\r\n        emit NewWhiteList(temp, msg.sender, _Contract, _ChangeUntil);\r\n        return temp;\r\n    }\r\n\r\n    function ChangeCreator(uint256 _Id, address _NewCreator)\r\n        external\r\n        OnlyCreator(_Id)\r\n        TimeRemaining(_Id)\r\n        ValidateId(_Id)\r\n    {\r\n        WhitelistSettings[_Id].Creator = _NewCreator;\r\n    }\r\n\r\n    function ChangeContract(uint256 _Id, address _NewContract)\r\n        external\r\n        OnlyCreator(_Id)\r\n        TimeRemaining(_Id)\r\n        ValidateId(_Id)\r\n    {\r\n        WhitelistSettings[_Id].Contract = _NewContract;\r\n    }\r\n\r\n    function AddAddress(uint256 _Id, address[] _Users, uint256[] _Amount)\r\n        public\r\n        OnlyCreator(_Id)\r\n        TimeRemaining(_Id)\r\n        ValidateId(_Id)\r\n        isBelowUserLimit(_Users.length)\r\n    {\r\n        require(_Users.length == _Amount.length, \"Number of users should be same as the amount length\");\r\n        require(_Users.length > 0,\"Need something...\");\r\n        if(!WhitelistSettings[_Id].isReady){\r\n            WhitelistSettings[_Id].isReady = true;\r\n        }\r\n        for (uint256 index = 0; index < _Users.length; index++) {\r\n            _AddAddress(_Id, _Users[index], _Amount[index]);\r\n        }\r\n    }\r\n\r\n    function RemoveAddress(uint256 _Id, address[] _Users)\r\n        public\r\n        OnlyCreator(_Id)\r\n        TimeRemaining(_Id)\r\n        ValidateId(_Id)\r\n        isBelowUserLimit(_Users.length)\r\n    {\r\n        for (uint256 index = 0; index < _Users.length; index++) {\r\n            _RemoveAddress(_Id, _Users[index]);\r\n        }\r\n    }\r\n\r\n    function Register(\r\n        uint256 _Id,\r\n        address _Subject,\r\n        uint256 _Amount\r\n    ) external {\r\n        if (_Id == 0) return;\r\n        require(\r\n            msg.sender == WhitelistSettings[_Id].Contract,\r\n            \"Only the Contract can call this\"\r\n        );\r\n        require(\r\n            WhitelistDB[_Id][_Subject] >= _Amount,\r\n            \"Sorry, no alocation for Subject\"\r\n        );\r\n        uint256 temp = WhitelistDB[_Id][_Subject] - _Amount;\r\n        WhitelistDB[_Id][_Subject] = temp;\r\n        assert(WhitelistDB[_Id][_Subject] == temp);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_Id\",\"type\":\"uint256\"},{\"name\":\"_Users\",\"type\":\"address[]\"}],\"name\":\"RemoveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ChangeUntil\",\"type\":\"uint256\"},{\"name\":\"_Contract\",\"type\":\"address\"}],\"name\":\"CreateManualWhiteList\",\"outputs\":[{\"name\":\"Id\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_Id\",\"type\":\"uint256\"}],\"name\":\"isWhiteListReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setMaxUsersLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WhiteListCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"WhitelistDB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Id\",\"type\":\"uint256\"},{\"name\":\"_NewContract\",\"type\":\"address\"}],\"name\":\"ChangeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Id\",\"type\":\"uint256\"},{\"name\":\"_Subject\",\"type\":\"address\"},{\"name\":\"_Amount\",\"type\":\"uint256\"}],\"name\":\"Register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxUsersLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Id\",\"type\":\"uint256\"},{\"name\":\"_NewCreator\",\"type\":\"address\"}],\"name\":\"ChangeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WhitelistSettings\",\"outputs\":[{\"name\":\"Creator\",\"type\":\"address\"},{\"name\":\"ChangeUntil\",\"type\":\"uint256\"},{\"name\":\"Contract\",\"type\":\"address\"},{\"name\":\"isReady\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Id\",\"type\":\"uint256\"},{\"name\":\"_Users\",\"type\":\"address[]\"},{\"name\":\"_Amount\",\"type\":\"uint256[]\"}],\"name\":\"AddAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setWhiteListCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"Check\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WhiteListCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_WhiteListCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_changeUntil\",\"type\":\"uint256\"}],\"name\":\"NewWhiteList\",\"type\":\"event\"}]","ContractName":"WhiteList","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://efa2504818b566b74a8123dd934966f96d8719b798cf42f880393f9046ae5fed"}]}