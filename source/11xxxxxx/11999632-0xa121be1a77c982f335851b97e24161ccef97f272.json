{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\ninterface IContractRegistry {\r\n\tfunction getContract(string calldata contractName) external view returns (address);\r\n}\r\n\r\ninterface IElections {\r\n\tfunction getCommittee() external view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\r\n}\r\n\r\ncontract CommitteeEnsResolver {\r\n\r\n    IContractRegistry   public orbsRegistry;\r\n    bytes32             public parentDomainNameHash;\r\n\r\n    constructor(address orbsRegistry_, bytes32 parentDomainNameHash_) public {\r\n        // set defaults\r\n        if (orbsRegistry_ == address(0)) {\r\n            orbsRegistry_ = 0x2C13510F548b5cD963B4D2CB6837c7E34321bBAa; // mainnet orbs V2 contracts registry\r\n        }\r\n    \r\n        if (parentDomainNameHash_ == bytes32(0)) {\r\n            parentDomainNameHash_ = 0xb30b0b22edc109e1bccfd9bf561963d8b0993b8de6025741af1fdd5bb75e1705; // committee.orbs.eth\r\n        }\r\n        \r\n        orbsRegistry = IContractRegistry(orbsRegistry_);\r\n        parentDomainNameHash = parentDomainNameHash_;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\r\n        // only Ethereum address and text\r\n        return interfaceID == 0x3b3b57de || interfaceID == 0x59d1d43c || interfaceID == 0x01ffc9a7; \r\n    }\r\n\r\n    function addr(bytes32 nodeID) public view returns (address) {\r\n        IElections elections = IElections(orbsRegistry.getContract('elections'));\r\n        (address[] memory committee, , , , ) = elections.getCommittee();\r\n        \r\n        for (uint i = 0; i < committee.length; i++) {\r\n            if (nodeID == namehash(uintToString(i))) {\r\n                return committee[i];\r\n            }\r\n        }\r\n        return address(0);\r\n    }\r\n    \r\n    function text(bytes32 nodeID, string memory key) public view returns (string memory) {\r\n        if (keccak256(bytes(key)) != keccak256(bytes('url'))) {\r\n            return '';\r\n        }\r\n        \r\n        IElections elections = IElections(orbsRegistry.getContract('elections'));\r\n        (, , , , bytes4[] memory ips ) = elections.getCommittee();\r\n        \r\n        for (uint i = 0; i < ips.length; i++) {\r\n            if (nodeID == namehash(uintToString(i))) {\r\n                return string(abi.encodePacked(\r\n                    'http://', \r\n                    string(abi.encodePacked(byteToString(ips[i][0]), '.')), \r\n                    string(abi.encodePacked(byteToString(ips[i][1]), '.')), \r\n                    string(abi.encodePacked(byteToString(ips[i][2]), '.')), \r\n                    string(abi.encodePacked(byteToString(ips[i][3]), '/'))));\r\n            }\r\n        }\r\n        return '';\r\n        \r\n    }\r\n\r\n    function namehash(string memory label) internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(parentDomainNameHash, keccak256(bytes(label))));\r\n    }\r\n    \r\n    function byteToString(byte v) internal pure returns (string memory str) {\r\n        return uintToString(uint8(v));\r\n    }\r\n    \r\n    function uintToString(uint v) internal pure returns (string memory str) {\r\n        if (v == 0) {\r\n            return '0';\r\n        }\r\n        \r\n        bytes memory reversed = new bytes(100);\r\n        uint len = 0;\r\n        while (v != 0) {\r\n            uint ls = v % 10;\r\n            v = v / 10;\r\n            reversed[len++] = byte(48 + uint8(ls));\r\n        }\r\n        bytes memory s = new bytes(len);\r\n        for (uint j = 0; j < len; j++) {\r\n            s[j] = reversed[len - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbsRegistry_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentDomainNameHash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeID\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orbsRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentDomainNameHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CommitteeEnsResolver","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002c13510f548b5cd963b4d2cb6837c7e34321bbaab30b0b22edc109e1bccfd9bf561963d8b0993b8de6025741af1fdd5bb75e1705","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c37007fd4444b3da40101a92596f8d797f11bc999447130ccb5d26ba764b8c70"}]}