{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/lender/fabs/operator.sol\npragma solidity >=0.5.15 >=0.5.15 <0.6.0;\n\n////// lib/tinlake-auth/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n/* pragma solidity >=0.5.15; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint256           wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n        uint256 wad;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n            wad := callvalue()\n        }\n\n        _;\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n    }\n}\n\n////// lib/tinlake-auth/src/auth.sol\n// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n\n/* import \"ds-note/note.sol\"; */\n\ncontract Auth is DSNote {\n    mapping (address => uint) public wards;\n    function rely(address usr) public auth note { wards[usr] = 1; }\n    function deny(address usr) public auth note { wards[usr] = 0; }\n    modifier auth { require(wards[msg.sender] == 1); _; }\n}\n\n////// src/lender/operator.sol\n// Copyright (C) 2020 Centrifuge\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n\n/* import \"ds-note/note.sol\"; */\n/* import \"tinlake-auth/auth.sol\"; */\n\ncontract TrancheLike_2 {\n    function supplyOrder(address usr, uint currencyAmount) public;\n    function redeemOrder(address usr, uint tokenAmount) public;\n    function disburse(address usr) public returns (uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken);\n    function disburse(address usr, uint endEpoch) public returns (uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken);\n    function currency() public view returns (address);\n}\n\ninterface RestrictedTokenLike {\n    function hasMember(address) external view returns (bool);\n}\n\ninterface EIP2612PermitLike {\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n\ninterface DaiPermitLike {\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n}\n\ncontract Operator is DSNote, Auth {\n    TrancheLike_2 public tranche;\n    RestrictedTokenLike public token;\n\n    constructor(address tranche_) public {\n        wards[msg.sender] = 1;\n        tranche = TrancheLike_2(tranche_);\n    }\n\n    /// sets the dependency to another contract\n    function depend(bytes32 contractName, address addr) public auth {\n        if (contractName == \"tranche\") { tranche = TrancheLike_2(addr); }\n        else if (contractName == \"token\") { token = RestrictedTokenLike(addr); }\n        else revert();\n    }\n\n    /// only investors that are on the memberlist can submit supplyOrders\n    function supplyOrder(uint amount) public note {\n        require((token.hasMember(msg.sender) == true), \"user-not-allowed-to-hold-token\");\n        tranche.supplyOrder(msg.sender, amount);\n    }\n\n    /// only investors that are on the memberlist can submit redeemOrders\n    function redeemOrder(uint amount) public note {\n        require((token.hasMember(msg.sender) == true), \"user-not-allowed-to-hold-token\");\n        token.hasMember(msg.sender);\n        tranche.redeemOrder(msg.sender, amount);\n    }\n\n    /// only investors that are on the memberlist can disburse\n    function disburse() external\n        returns(uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken)\n    {\n        require((token.hasMember(msg.sender) == true), \"user-not-allowed-to-hold-token\");\n        return tranche.disburse(msg.sender);\n    }\n\n    function disburse(uint endEpoch) external\n        returns(uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken)\n    {\n        require((token.hasMember(msg.sender) == true), \"user-not-allowed-to-hold-token\");\n        return tranche.disburse(msg.sender, endEpoch);\n    }\n\n    // --- Permit Support ---\n    function supplyOrderWithDaiPermit(uint amount, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n        DaiPermitLike(tranche.currency()).permit(msg.sender, address(tranche), nonce, expiry, true, v, r, s);\n        supplyOrder(amount);\n    }\n    function supplyOrderWithPermit(uint amount, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) public {\n        EIP2612PermitLike(tranche.currency()).permit(msg.sender, address(tranche), value, deadline, v, r, s);\n        supplyOrder(amount);\n    }\n    function redeemOrderWithPermit(uint amount, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) public {\n        EIP2612PermitLike(address(token)).permit(msg.sender, address(tranche), value, deadline, v, r, s);\n        redeemOrder(amount);\n    }\n}\n\n////// src/lender/fabs/operator.sol\n// Copyright (C) 2020 Centrifuge\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n/* import { Operator } from \"./../operator.sol\"; */\n\ninterface OperatorFabLike_2 {\n    function newOperator(address) external returns (address);\n}\n\ncontract OperatorFab {\n    function newOperator(address tranche) public returns (address) {\n        Operator operator = new Operator(tranche);\n        operator.rely(msg.sender);\n        operator.deny(address(this));\n        return address(operator);\n    }\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tranche\",\"type\":\"address\"}],\"name\":\"newOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OperatorFab","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}