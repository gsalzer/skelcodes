{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/TokenVesting.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with and vesting period.\r\n */\r\ncontract TokenVesting {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\r\n    // duration of four years, are safe to use.\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event TokensReleased(address token, address beneficiary, uint256 amount);\r\n\r\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\r\n    uint256 private _start;\r\n    uint256 private _duration;\r\n\r\n    IERC20 private _token;\r\n\r\n    // beneficiary token amounts and released amounts\r\n    mapping (address => uint256) private _totalTokens;\r\n    mapping (address => uint256) private _releasedTokens;\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n     * of the balance will have vested.\r\n     * @param beneficiaries addresses of the beneficiaries to whom vested tokens are transferred\r\n     * @param amounts amounts of tokens for the beneficiaries\r\n     * @param start the time (as Unix time) at which point vesting starts\r\n     * @param duration duration in seconds of the period in which the tokens will vest\r\n     */\r\n    constructor (address[] memory beneficiaries, uint256[] memory amounts, uint256 start, uint256 duration, IERC20 token) public {\r\n        require(duration > 0, \"TokenVesting: duration is 0\");\r\n        require(start.add(duration) > block.timestamp, \"TokenVesting: final time is before current time\");\r\n        require(beneficiaries.length == amounts.length, \"TokenVesting: beneficiaries length is not equal to amounts length\");\r\n\r\n        for (uint i = 0; i < beneficiaries.length; i++) {\r\n            require(beneficiaries[i] != address(0), \"TokenVesting: beneficiary is the zero address\");\r\n            require(amounts[i] != 0, \"TokenVesting: amount is zero\");\r\n            _totalTokens[beneficiaries[i]] = amounts[i];\r\n        }\r\n\r\n        _duration = duration;\r\n        _start = start;\r\n        _token = token;\r\n    }\r\n\r\n    /**\r\n     * @return the token that this contract is holding as vest\r\n     */\r\n    function token() public view returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    /**\r\n     * @return the amount of tokens for the given beneficiary of the tokens.\r\n     */\r\n    function totalTokens(address beneficiary) public view returns (uint256) {\r\n        return _totalTokens[beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the duration of the token vesting.\r\n     */\r\n    function duration() public view returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of the token released.\r\n     */\r\n    function releasedTokens(address beneficiary) public view returns (uint256) {\r\n        return _releasedTokens[beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @return the amount of tokens which can be claimed by a beneficiary.\r\n     */\r\n    function releasableAmount(address beneficiary) public view returns (uint256) {\r\n        return _vestedAmount(beneficiary).sub(_releasedTokens[beneficiary]);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * @param beneficiary beneficiary to receive the funds\r\n     */\r\n    function release(address beneficiary) public {\r\n        uint256 unreleased = releasableAmount(beneficiary);\r\n        require(unreleased > 0, \"TokenVesting: no tokens are due\");\r\n        _releasedTokens[beneficiary] = _releasedTokens[beneficiary].add(unreleased);\r\n        _token.safeTransfer(beneficiary, unreleased);\r\n        emit TokensReleased(address(_token), beneficiary, unreleased);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param beneficiary beneficiary address to check\r\n     */\r\n    function _vestedAmount(address beneficiary) private view returns (uint256) {\r\n        if (block.timestamp < _start) {\r\n            return 0;\r\n        } else if (block.timestamp >= _start.add(_duration)) {\r\n            return _totalTokens[beneficiary];\r\n        } else {\r\n            return _totalTokens[beneficiary].mul(block.timestamp.sub(_start)).div(_duration);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Distributor.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n/**\r\n * @title Distributor\r\n * @dev A distribution contract, which is given tokens, and two lists of addresses and amounts\r\n * which the given tokens are distributed to.\r\n */\r\ncontract Distributor {\r\n    // Token recipients and amounts state\r\n    address[] private _immediateRecipients;\r\n    uint256[] private _immediateAmounts;\r\n    address[] private _vestRecipients;\r\n    uint256[] private _vestAmounts;\r\n\r\n    // The TokenVesting instance which this contract will deploy\r\n    TokenVesting private _vesting;\r\n\r\n    // Authorization\r\n    address private _deployer;\r\n    bool private _distributed;\r\n    \r\n    /**\r\n     * @dev Creates a distribution contract that temporarily holds a set of tokens, to be distributed.\r\n     * These tokens are sent to two lists of addresses, one list being addresses which should immediately\r\n     * receive thier tokens, the other list being addresses that need to have their tokens vested over\r\n     * some period of time.\r\n     * @param immediateRecipients_ addresses which should immediately receive their tokens\r\n     * @param immediateAmounts_ token amounts that correpsond to the immediateRecipients_ addresses\r\n     * @param vestRecipients_ addresses which should have their tokens vest over some period of time\r\n     * @param vestAmounts_ token amounts that correpsond to the vestRecipients_ addresses\r\n     */\r\n    constructor(\r\n        address[] memory immediateRecipients_, uint256[] memory immediateAmounts_,\r\n        address[] memory vestRecipients_, uint256[] memory vestAmounts_\r\n    ) public {\r\n        require(\r\n            immediateRecipients_.length == immediateAmounts_.length,\r\n            \"Distributor::constructor: immediateRecipients_ length must equal immediateAmounts_ length\"\r\n        );\r\n        require(\r\n            vestRecipients_.length == vestAmounts_.length,\r\n            \"Distributor::constructor: vestRecipients_ length must equal vestAmounts_ length\"\r\n        );\r\n\r\n        _immediateRecipients = immediateRecipients_;\r\n        _immediateAmounts = immediateAmounts_;\r\n\r\n        _vestRecipients = vestRecipients_;\r\n        _vestAmounts = vestAmounts_;\r\n\r\n        // Save the deployer address, so that we can be sure that only that address calls `distribute`\r\n        _deployer = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @return the vesting contract address which this contract created\r\n     */\r\n    function vesting() public view returns (address) {\r\n        return address(_vesting);\r\n    }\r\n\r\n    /**\r\n     * @notice Distributes tokens to immediate recipients,\r\n     * creates a new TokenVesting contract, and sends the tokens to-be-vested to that contract\r\n     * @param token the ERC20 token which to operate on\r\n     * @param start the time at which tokens start to vest\r\n     * @param duration the TokenVesting duration\r\n     */\r\n    function distribute(IERC20 token, uint256 start, uint256 duration) public {\r\n        // Only callable one tine\r\n        require(_distributed == false, \"Distributor::distribute: _distributed is true\");\r\n        _distributed = true;\r\n\r\n        // Only the address which deployed this contract can call `distribute`\r\n        require(msg.sender == _deployer, \"Distributor::distribute: distributor is not deployer\");\r\n\r\n        // Send tokens directly to recipient addresses with no vesting\r\n        for (uint i = 0; i < _immediateRecipients.length; i++) {\r\n            token.transfer(_immediateRecipients[i], _immediateAmounts[i]);\r\n        }\r\n\r\n        // Calculate the amount of tokens to be vested\r\n        uint256 vestTotal;\r\n        for (uint i = 0; i < _vestAmounts.length; i++) {\r\n            vestTotal += _vestAmounts[i];\r\n        }\r\n\r\n        // Create new TokenVesting contract which will be shared between all vesting addresses, send tokens to it\r\n        _vesting = new TokenVesting(_vestRecipients, _vestAmounts, start, duration, token);\r\n        token.transfer(address(_vesting), vestTotal);\r\n\r\n        // Sanity check\r\n        require(token.balanceOf(address(this)) == 0, \"Distributor::distribute: distributor balance not 0\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"immediateRecipients_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"immediateAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"vestRecipients_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Distributor","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000050000000000000000000000003547ed2fb580dc5657b0d04396f92f6a746b54b60000000000000000000000000b84cf44954a37f9abbe024f945a1d0f3f7467bf000000000000000000000000a4da1678bf2885a048bec18a8aaee48c20bf3d1c00000000000000000000000077e879a426a9f49349e2bbab4e8b91dd3f23084e00000000000000000000000015160128d2152ddb01365b60fd1cec1876845e63000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000031a17e847807b1bc0000000000000000000000000000000000000000000000000c685fa11e01ec6f00000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000244265a76901b8030b140a2996e6dd4703cbf20f0000000000000000000000004a0a927043b01a7fb175bca4f4837e3b817c5e6b0000000000000000000000009354209b880ac0abb02821cb3915a6eeb9a9336c000000000000000000000000feb9bdcf0b5eec884777222d58583b1569400585000000000000000000000000b6420c6eae0325edba74845462c6760c6d70676600000000000000000000000043ce086a7769adc7921090cff6fb1c8efd62fb2600000000000000000000000061e2f3465a187c87bf8988e864764b338745fa60000000000000000000000000ab0eecc2026906072a8f9f0b4e9ef22314ebf1fe000000000000000000000000940c3f972c6eebf21d30e8fc86dcaf95f4dd5e28000000000000000000000000d1bbbc228a4753b9763a111e396a4a3083762a39000000000000000000000000cd635df513ebbbbb618fc6c63173adf8659a520d00000000000000000000000019fd3927ffe5f49c19e0c722290adba674bf52a3000000000000000000000000f05c863d877da228caa9b046df1d104b170364ce0000000000000000000000003453f2ff2ed689a31d0d5392638c3ab2ad71a752000000000000000000000000605acc13c07cb2de5261dc64d315857fde7d5c5c000000000000000000000000d48ab93dffac50a0aa51dd7c488d52d6472a74440000000000000000000000006a5868ca8187b5190b9238fc14e1c160e94df601000000000000000000000000548d20c41fde459d8036650821432e5a3249693d000000000000000000000000f9db5fe8d4025f58180e77148bfffb79fd0d807200000000000000000000000013c210e4a2035446cf02e5b8ac42b6b9a12f8675000000000000000000000000cd0093e2945b28f3b5ba3654e5a24946f7a538ed000000000000000000000000b1b7586656116d546033e3baff69bfcd6592225e000000000000000000000000e1a47414922159fb2d3f614ee9f0340c9c539b010000000000000000000000007fcae73cec08faf89f318a55fcda1706eee8407f000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000002a5a021794e9032700000000000000000000000000000000000000000000000023ffb7ed6565d64000000000000000000000000000000000000000000000000023ffb7ed6565d6400000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000007695a92c20d6fe0000000000000000000000000000000000000000000000000069e10de76676d08000000000000000000000000000000000000000000000000069e10de76676d0800000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000000000000000000000000000000000000000000000000e1e067ad31886cc0000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://96960f497d8dbc7f064936f6e801a0b45fd1db00ba9ce069e368570a7412f721"}]}