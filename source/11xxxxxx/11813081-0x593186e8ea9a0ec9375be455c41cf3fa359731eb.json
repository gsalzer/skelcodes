{"status":"1","message":"OK","result":[{"SourceCode":"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: browser/NyanManager.sol\r\n\r\npragma solidity ^0.6.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n\r\n    function updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\r\n            \"Not compatible\"\r\n        );\r\n        assembly { // solium-disable-line\r\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\r\n        }\r\n    }\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n    }\r\n}\r\n\r\ncontract LibraryLockDataLayout {\r\n  bool public initialized = false;\r\n}\r\n\r\ncontract LibraryLock is LibraryLockDataLayout {\r\n    // Ensures no one can manipulate the Logic Contract once it is deployed.\r\n    // PARITY WALLET HACK PREVENTION\r\n\r\n    modifier delegatedOnly() {\r\n        require(initialized == true, \"The library is locked. No direct 'call' is allowed\");\r\n        _;\r\n    }\r\n    function initialize() internal {\r\n        initialized = true;\r\n    }\r\n}\r\n\r\ncontract ManagerDataLayout is LibraryLock {\r\n    address public owner;\r\n    address public nyanVoting;\r\n    address[] public managers;\r\n    struct eachManager {\r\n        uint256 allowance;\r\n        uint256 totalAllowanceReturned;\r\n        uint256 profits;\r\n        uint32 ROI;\r\n        uint256 lastCheckInBlock;\r\n        bool isManager;\r\n        address[] usedContracts;\r\n        string name;\r\n        uint256[] profitHistory;\r\n        uint256[] holdingsHistory;\r\n        uint256 collateral;\r\n    }\r\n    mapping(address => eachManager) public managerStruct;\r\n    \r\n    uint256 public initialAllowance;\r\n    uint256 public nextVotingPeriod;\r\n    uint256 public votingBuffer;\r\n    bool public canBeginVoting;\r\n    \r\n    \r\n    struct eachCandidate {\r\n        uint256 votes;\r\n        uint256 lastVotingBlock;\r\n        string name;\r\n    }\r\n    mapping(address => eachCandidate) public managerCandidates;\r\n    address public topCandidate;\r\n    uint256 public topCandidateVotes;\r\n    address[] public allCandidates;\r\n    bool public isSelfManager;\r\n    uint32 public managerLimit;\r\n    \r\n    using SafeMath for uint32;\r\n    using SafeMath for uint256;\r\n    \r\n    address public fundContract = 0x2c9728ad35C1CfB16E3C1B5045bC9BA30F37FAc5;\r\n    address public connectorContract = 0x60d70dF1c783b1E5489721c443465684e2756555;\r\n    address public rewardsContract = 0x868f7622F57b62330Db8b282044d7EAf067fAcfe;\r\n    address public devFund = 0xd66A9D2B706e225204F475c9e70A4c09eEa62199;\r\n    address public registry = 0x66BFd3ed6618D9C62DcF1eF706D9Aacd5FdBCCD6;\r\n    address public contractManager;\r\n    address public selfManager;\r\n}\r\n\r\ninterface usedContract {\r\n    function liquidateHoldings(address _manager) external returns(bool);\r\n    function sendETH(address _manager) external payable;\r\n    function isSelfManager(address _manager) external view returns(bool);\r\n}\r\n\r\ncontract connector {\r\n    function fundLog(address manager, string calldata reason, address recipient) public payable {}\r\n}\r\n\r\ncontract NyanManager is Proxiable, ManagerDataLayout {\r\n    \r\n    modifier _onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    constructor() public {\r\n        \r\n    }\r\n    \r\n    function initConstructor(uint32 _managerLimit, uint256 _votingBuffer, uint256 _initialAllowance) public {\r\n        require(!initialized);\r\n        owner = msg.sender;\r\n        managerLimit = _managerLimit;\r\n        votingBuffer = _votingBuffer;\r\n        initialAllowance = _initialAllowance;\r\n        nextVotingPeriod = block.number;\r\n        initialize();\r\n    }\r\n    \r\n    function updateCode(address newCode) public delegatedOnly  {\r\n        if (owner == address(0)) {\r\n            require(msg.sender == contractManager);\r\n        } else {\r\n            require(msg.sender == owner);\r\n        }\r\n        updateCodeAddress(newCode);\r\n    }\r\n    \r\n    function relinquishOwnership()public _onlyOwner delegatedOnly {\r\n        owner = address(0);\r\n    } \r\n    \r\n    function setContracts(address _contractManager, address _selfManager) public _onlyOwner delegatedOnly {\r\n        contractManager = _contractManager;\r\n        selfManager = _selfManager;\r\n        fundContract = 0x2c9728ad35C1CfB16E3C1B5045bC9BA30F37FAc5;\r\n        connectorContract = 0x60d70dF1c783b1E5489721c443465684e2756555;\r\n        rewardsContract = 0x868f7622F57b62330Db8b282044d7EAf067fAcfe;\r\n        devFund = 0xd66A9D2B706e225204F475c9e70A4c09eEa62199;\r\n        registry = 0x66BFd3ed6618D9C62DcF1eF706D9Aacd5FdBCCD6;\r\n    }\r\n    \r\n    function registerCandidate(string memory name) public payable delegatedOnly {\r\n        require(!usedContract(selfManager).isSelfManager(msg.sender), \"This address is self managing\");\r\n        if (managers.length == managerLimit) {\r\n            require(block.number > nextVotingPeriod, \"Voting period has not started\");\r\n        }\r\n        require(msg.value >= .05 ether);\r\n        bool isCandidate;\r\n        for(uint32 i; i < allCandidates.length; i++) {\r\n            if (allCandidates[i] == msg.sender) {\r\n                isCandidate = true;\r\n            }\r\n        }\r\n        if (!isCandidate) {\r\n            managerCandidates[msg.sender].name = name;\r\n            managerCandidates[msg.sender].votes = msg.value;\r\n            allCandidates.push(msg.sender);\r\n        }\r\n        connector(connectorContract).fundLog(msg.sender, \"manager application\", fundContract);\r\n        rewardsContract.call{value: msg.value.div(2).sub(5)}(\"\");\r\n    }\r\n    \r\n    \r\n    function setManagerLimit(uint32 limit) public _onlyOwner delegatedOnly {\r\n        managerLimit = limit;\r\n    }\r\n    \r\n    function replaceManager(address newManager, uint256 index) public payable delegatedOnly {\r\n        require(canBeginVoting);\r\n        require(block.number > nextVotingPeriod, \"Voting period has not started\");\r\n        if (managerLimit == managers.length) {\r\n            require(block.number < nextVotingPeriod.add(votingBuffer), \"Voting period has ended\");\r\n        } else {\r\n            require(block.number < nextVotingPeriod.add(13000), \"Voting period has ended\");\r\n        }\r\n        \r\n        require(allCandidates[index] == newManager);\r\n        if (managerCandidates[newManager].lastVotingBlock < nextVotingPeriod) {\r\n            managerCandidates[newManager].votes = 0;\r\n        }\r\n        managerCandidates[newManager].votes = managerCandidates[newManager].votes.add(msg.value);\r\n        //if candidate total votes are higher than topCandidate,\r\n        //candidate is the new top candidate\r\n        if (managerCandidates[newManager].votes > topCandidateVotes) {\r\n            topCandidate = newManager;\r\n        }\r\n        managerCandidates[newManager].lastVotingBlock = block.number;\r\n        connector(connectorContract).fundLog(newManager, \"manager vote\", fundContract);\r\n        rewardsContract.call{value: msg.value.div(2).sub(5)}(\"\");\r\n    }\r\n    \r\n    function finalizeNewManager() public delegatedOnly {\r\n        if (managers.length == managerLimit) {\r\n            require(block.number > nextVotingPeriod.add(votingBuffer), \"Voting period has not entered finalize period\");\r\n        }\r\n        require(topCandidate != address(0));\r\n        address[] memory emptyArr;\r\n        \r\n        if (managerLimit == managers.length) {\r\n            //remove lowest profiting manager from array and reset struct\r\n            address lowestManager = managers[0];\r\n            uint256 lowestManagerProfits = managerStruct[managers[0]].profits;\r\n            uint index;\r\n            for(uint32 i; i < managers.length; i++) {\r\n                if (managerStruct[managers[i]].profits < lowestManagerProfits) {\r\n                    address lowestManager = managers[i];\r\n                    uint256 lowestManagerProfits = managerStruct[managers[i]].profits;\r\n                    index = i;\r\n                }\r\n            }\r\n            //remove manager from array\r\n            removeManager(index);\r\n            //liquidate old manager\r\n            liquidateOldManager(lowestManager);\r\n            //reset lowestManager\r\n            managerStruct[lowestManager].allowance = 0;\r\n            managerStruct[lowestManager].lastCheckInBlock = block.number;\r\n            managerStruct[lowestManager].isManager = false;\r\n            managerStruct[lowestManager].collateral = 0;\r\n            managerStruct[lowestManager].usedContracts = emptyArr;\r\n            //add topCandidate to array and set up struct\r\n        }\r\n        \r\n        managers.push(topCandidate);\r\n        managerStruct[topCandidate].isManager = true;\r\n        //reset topCandidate\r\n        topCandidate = address(0);\r\n        topCandidateVotes = 0;\r\n        \r\n        if (managerLimit > managers.length) {\r\n            nextVotingPeriod = block.number.add(13000);\r\n        } else {\r\n            nextVotingPeriod = block.number.add(votingBuffer);\r\n            allCandidates = emptyArr;\r\n        }\r\n    }\r\n    \r\n    function removeManager(uint index) internal {\r\n        managers[index] = managers[managers.length-1];\r\n        delete managers[managers.length-1];\r\n        managers.pop();\r\n    }\r\n    \r\n    function liquidateOldManager(address manager) internal {\r\n        //loop through manager's used contracts and call liquidate function\r\n        for (uint32 i; i < managerStruct[manager].usedContracts.length; i++) {\r\n            bool liquidated = usedContract(managerStruct[manager].usedContracts[i]).liquidateHoldings(manager);\r\n        }\r\n    }\r\n    \r\n    function getManagerLimit() public returns(uint32) {\r\n        return managerLimit;\r\n    }\r\n    \r\n    function beginVoting() public delegatedOnly {\r\n        require(msg.sender == owner);\r\n        canBeginVoting = true;\r\n        nextVotingPeriod = block.number;\r\n    }\r\n    \r\n    function checkFundManagerAllowance(address _manager, uint256 ETH) public delegatedOnly returns(bool) {\r\n        require(msg.sender == registry);\r\n        require(managerStruct[_manager].allowance >= ETH, \"Fund Manager: Insufficient allowance\");\r\n        managerStruct[_manager].allowance = managerStruct[_manager].allowance.sub(ETH);\r\n        managerStruct[_manager].holdingsHistory.push(managerStruct[_manager].allowance);\r\n        return true;\r\n    }\r\n    \r\n    function adjustFundManagerAllowance(address _manager, uint256 ETH, uint256 profit) public delegatedOnly {\r\n        require(msg.sender == registry);\r\n        //increase holdings by ETH\r\n        managerStruct[_manager].allowance = managerStruct[_manager].allowance.add(ETH);\r\n        //update holdings history\r\n        managerStruct[_manager].holdingsHistory.push(managerStruct[_manager].allowance);\r\n        //increase profits by profit amount\r\n        managerStruct[_manager].profits = managerStruct[_manager].profits.add(profit);\r\n        //update profit history\r\n        managerStruct[_manager].profitHistory.push(managerStruct[_manager].profits);\r\n    }\r\n    \r\n    function isFundManager(address manager) public view returns(bool) {\r\n        return managerStruct[manager].isManager;\r\n    }\r\n    \r\n    function updateROI() internal {\r\n       \r\n    }\r\n    \r\n    function getAllCandidates() public view returns(string[] memory, uint256[] memory) {\r\n        string[] memory emptyStringArr = new string[](allCandidates.length);\r\n        uint256[] memory emptyVotesArr = new uint256[](allCandidates.length);\r\n        for (uint32 i = 0; i < allCandidates.length; i++) {\r\n            emptyStringArr[i] = managerCandidates[allCandidates[i]].name;\r\n            emptyVotesArr[i] = managerCandidates[allCandidates[i]].votes;\r\n        }\r\n        return (\r\n            emptyStringArr,\r\n            emptyVotesArr\r\n        );\r\n    }\r\n    \r\n    \r\n    function checkIn(address _manager) internal delegatedOnly {\r\n        if(block.number.sub(managerStruct[_manager].lastCheckInBlock) > 6500) {\r\n            managerStruct[_manager].lastCheckInBlock = block.number;\r\n        }\r\n    }\r\n    \r\n    function manualCheckIn() public delegatedOnly {\r\n        managerStruct[msg.sender].lastCheckInBlock = block.number;\r\n    }\r\n    \r\n    \r\n    receive() external payable {\r\n        \r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"adjustFundManagerAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCandidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canBeginVoting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ETH\",\"type\":\"uint256\"}],\"name\":\"checkFundManagerAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeNewManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCandidates\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_managerLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_votingBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialAllowance\",\"type\":\"uint256\"}],\"name\":\"initConstructor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isFundManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSelfManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerCandidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVotingBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerStruct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllowanceReturned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profits\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"ROI\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"lastCheckInBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualCheckIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextVotingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanVoting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerCandidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"replaceManager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_selfManager\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"}],\"name\":\"setManagerLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topCandidateVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCode\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NyanManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://59adea12526dae45ddd2c8a103e9e45f5580bad12b7466bdb1a5da6889850408"}]}