{"status":"1","message":"OK","result":[{"SourceCode":"// The Great Seafi points to the deep blue... you must follow his commands.\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ISimpleToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/** Interface for any Siren SimpleToken\r\n */\r\ninterface ISimpleToken is IERC20 {\r\n    function initialize(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 amount) external;\r\n\r\n    function selfDestructToken(address payable refundAddress) external;\r\n}\r\n\r\n// File: contracts/market/IMarket.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/** Interface for any Siren Market\r\n */\r\ninterface IMarket {\r\n    /** Tracking the different states of the market */\r\n    enum MarketState {\r\n        /**\r\n         * New options can be created\r\n         * Redemption token holders can redeem their options for collateral\r\n         * Collateral token holders can't do anything\r\n         */\r\n        OPEN,\r\n        /**\r\n         * No new options can be created\r\n         * Redemption token holders can't do anything\r\n         * Collateral tokens holders can re-claim their collateral\r\n         */\r\n        EXPIRED,\r\n        /**\r\n         * 180 Days after the market has expired, it will be set to a closed state.\r\n         * Once it is closed, the owner can sweeep any remaining tokens and destroy the contract\r\n         * No new options can be created\r\n         * Redemption token holders can't do anything\r\n         * Collateral tokens holders can't do anything\r\n         */\r\n        CLOSED\r\n    }\r\n\r\n    /** Specifies the manner in which options can be redeemed */\r\n    enum MarketStyle {\r\n        /**\r\n         * Options can only be redeemed 30 minutes prior to the option's expiration date\r\n         */\r\n        EUROPEAN_STYLE,\r\n        /**\r\n         * Options can be redeemed any time between option creation\r\n         * and the option's expiration date\r\n         */\r\n        AMERICAN_STYLE\r\n    }\r\n\r\n    function state() external view returns (MarketState);\r\n\r\n    function mintOptions(uint256 collateralAmount) external;\r\n\r\n    function calculatePaymentAmount(uint256 collateralAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calculateFee(uint256 amount, uint16 basisPoints)\r\n        external\r\n        pure\r\n        returns (uint256);\r\n\r\n    function exerciseOption(uint256 collateralAmount) external;\r\n\r\n    function claimCollateral(uint256 collateralAmount) external;\r\n\r\n    function closePosition(uint256 collateralAmount) external;\r\n\r\n    function recoverTokens(IERC20 token) external;\r\n\r\n    function selfDestructMarket(address payable refundAddress) external;\r\n\r\n    function updateRestrictedMinter(address _restrictedMinter) external;\r\n\r\n    function marketName() external view returns (string memory);\r\n\r\n    function priceRatio() external view returns (uint256);\r\n\r\n    function expirationDate() external view returns (uint256);\r\n\r\n    function collateralToken() external view returns (IERC20);\r\n\r\n    function wToken() external view returns (ISimpleToken);\r\n\r\n    function bToken() external view returns (ISimpleToken);\r\n\r\n    function updateImplementation(address newImplementation) external;\r\n\r\n    function initialize(\r\n        string calldata _marketName,\r\n        address _collateralToken,\r\n        address _paymentToken,\r\n        MarketStyle _marketStyle,\r\n        uint256 _priceRatio,\r\n        uint256 _expirationDate,\r\n        uint16 _exerciseFeeBasisPoints,\r\n        uint16 _closeFeeBasisPoints,\r\n        uint16 _claimFeeBasisPoints,\r\n        address _tokenImplementation\r\n    ) external;\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/market/IMarketsRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/** Interface for any Siren MarketsRegistry\r\n */\r\ninterface IMarketsRegistry {\r\n    // function state() external view returns (MarketState);\r\n\r\n    function markets(string calldata marketName)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketsByAssetPair(bytes32 assetPair)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    function amms(bytes32 assetPair) external view returns (address);\r\n\r\n    function initialize(\r\n        address _tokenImplementation,\r\n        address _marketImplementation,\r\n        address _ammImplementation\r\n    ) external;\r\n\r\n    function updateTokenImplementation(address newTokenImplementation) external;\r\n\r\n    function updateMarketImplementation(address newMarketImplementation)\r\n        external;\r\n\r\n    function updateAmmImplementation(address newAmmImplementation) external;\r\n\r\n    function updateMarketsRegistryImplementation(\r\n        address newMarketsRegistryImplementation\r\n    ) external;\r\n\r\n    function createMarket(\r\n        string calldata _marketName,\r\n        address _collateralToken,\r\n        address _paymentToken,\r\n        IMarket.MarketStyle _marketStyle,\r\n        uint256 _priceRatio,\r\n        uint256 _expirationDate,\r\n        uint16 _exerciseFeeBasisPoints,\r\n        uint16 _closeFeeBasisPoints,\r\n        uint16 _claimFeeBasisPoints,\r\n        address _amm\r\n    ) external returns (address);\r\n\r\n    function createAmm(\r\n        AggregatorV3Interface _priceOracle,\r\n        IERC20 _paymentToken,\r\n        IERC20 _collateralToken,\r\n        uint16 _tradeFeeBasisPoints,\r\n        bool _shouldInvertOraclePrice\r\n    ) external returns (address);\r\n\r\n    function selfDestructMarket(IMarket market, address payable refundAddress)\r\n        external;\r\n\r\n    function updateImplementationForMarket(\r\n        IMarket market,\r\n        address newMarketImplementation\r\n    ) external;\r\n\r\n    function recoverTokens(IERC20 token, address destination) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/proxy/Proxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Proxy {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n    uint256 constant PROXY_MEM_SLOT = 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n\r\n    constructor(address contractLogic) public {\r\n        // Verify a valid address was passed in\r\n        require(contractLogic != address(0), \"Contract Logic cannot be 0x0\");\r\n\r\n        // save the code address\r\n        assembly {\r\n            // solium-disable-line\r\n            sstore(PROXY_MEM_SLOT, contractLogic)\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        assembly {\r\n            // solium-disable-line\r\n            let contractLogic := sload(PROXY_MEM_SLOT)\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0x0, calldatasize())\r\n            let success := delegatecall(\r\n                gas(),\r\n                contractLogic,\r\n                ptr,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            let retSz := returndatasize()\r\n            returndatacopy(ptr, 0, retSz)\r\n            switch success\r\n                case 0 {\r\n                    revert(ptr, retSz)\r\n                }\r\n                default {\r\n                    return(ptr, retSz)\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/proxy/Proxiable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n    uint256 constant PROXY_MEM_SLOT = 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n\r\n    event CodeAddressUpdated(address newAddress);\r\n\r\n    function _updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(PROXY_MEM_SLOT) == Proxiable(newAddress).proxiableUUID(),\r\n            \"Not compatible\"\r\n        );\r\n        assembly {\r\n            // solium-disable-line\r\n            sstore(PROXY_MEM_SLOT, newAddress)\r\n        }\r\n\r\n        emit CodeAddressUpdated(newAddress);\r\n    }\r\n\r\n    function getLogicAddress() public view returns (address logicAddress) {\r\n        assembly {\r\n            // solium-disable-line\r\n            logicAddress := sload(PROXY_MEM_SLOT)\r\n        }\r\n    }\r\n\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return bytes32(PROXY_MEM_SLOT);\r\n    }\r\n}\r\n\r\n// File: contracts/amm/InitializeableAmm.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\ninterface InitializeableAmm {\r\n    function initialize(\r\n        IMarketsRegistry _registry,\r\n        AggregatorV3Interface _priceOracle,\r\n        IERC20 _paymentToken,\r\n        IERC20 _collateralToken,\r\n        address _tokenImplementation,\r\n        uint16 _tradeFeeBasisPoints,\r\n        bool _shouldInvertOraclePrice\r\n    ) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n// File: contracts/market/MarketsRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The Markets Registry is responsible for creating and tracking markets\r\n */\r\ncontract MarketsRegistry is OwnableUpgradeSafe, Proxiable, IMarketsRegistry {\r\n    /** Use safe ERC20 functions for any token transfers since people don't follow the ERC20 standard */\r\n    using SafeERC20 for IERC20;\r\n\r\n    /** Mapping of market names to addresses */\r\n    mapping(string => address) public override markets;\r\n    mapping(bytes32 => address[]) marketsByAssets;\r\n\r\n    /** Mapping of keccak256(abi.encode(address(_collateralToken), address(_paymentToken))) \r\n     * bytes32 keys to AMM (Automated Market Maker) addresses\r\n     */\r\n    mapping(bytes32 => address) public override amms;\r\n\r\n    /** Implementation address for token contracts - can be upgraded by owner */\r\n    address public tokenImplementation;\r\n\r\n    /** Implementation address for the markets contract - can be upgraded by owner */\r\n    address public marketImplementation;\r\n\r\n    /** Implementation address for the AMM contract - can be upgraded by owner */\r\n    address public ammImplementation;\r\n\r\n    /** Emitted when the owner updates the token implementation address */\r\n    event TokenImplementationUpdated(address newAddress);\r\n\r\n    /** Emitted when the owner updates the market implementation address */\r\n    event MarketImplementationUpdated(address newAddress);\r\n\r\n    /** Emitted when the owner updates the amm implementation address */\r\n    event AmmImplementationUpdated(address newAddress);\r\n\r\n    /** Emitted when the owner creates a new market */\r\n    event MarketCreated(string name, address newAddress, uint256 marketIndex);\r\n\r\n    /** Emitted when contract is destroyed */\r\n    event MarketDestroyed(address market);\r\n\r\n    /** Emitted when tokens are recovered */\r\n    event TokensRecovered(\r\n        address indexed token,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    /** Emitted when a new AMM is created and initialized */\r\n    event AmmCreated(address amm);\r\n\r\n    /**\r\n     * Called to set this contract up\r\n     * Creation and initialization should be called in a single transaction.\r\n     */\r\n    function initialize(\r\n        address _tokenImplementation,\r\n        address _marketImplementation,\r\n        address _ammImplementation\r\n    ) public override {\r\n        __MarketsRegistry_init(\r\n            _tokenImplementation,\r\n            _marketImplementation,\r\n            _ammImplementation\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initialization function that only allows itself to be called once\r\n     */\r\n    function __MarketsRegistry_init(\r\n        address _tokenImplementation,\r\n        address _marketImplementation,\r\n        address _ammImplementation\r\n    ) internal initializer {\r\n        // Verify addresses\r\n        require(_tokenImplementation != address(0x0), \"Invalid _tokenImplementation\");\r\n        require(_marketImplementation != address(0x0), \"Invalid _marketImplementation\");\r\n        require(_ammImplementation != address(0x0), \"Invalid _ammImplementation\");\r\n\r\n        // Save off implementation addresses\r\n        tokenImplementation = _tokenImplementation;\r\n        marketImplementation = _marketImplementation;\r\n        ammImplementation = _ammImplementation;\r\n\r\n        // Set up the initialization of the inherited ownable contract\r\n        __Ownable_init();\r\n    }\r\n\r\n    /**\r\n     * The owner can update the token implementation address that will be used for future markets\r\n     */\r\n    function updateTokenImplementation(address newTokenImplementation)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(newTokenImplementation != address(0x0), \"Invalid newTokenImplementation\");\r\n\r\n        // Update the address\r\n        tokenImplementation = newTokenImplementation;\r\n\r\n        // Emit the event\r\n        emit TokenImplementationUpdated(tokenImplementation);\r\n    }\r\n\r\n    /**\r\n     * The owner can update the market implementation address that will be used for future markets\r\n     */\r\n    function updateMarketImplementation(address newMarketImplementation)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(newMarketImplementation != address(0x0), \"Invalid newMarketImplementation\");\r\n\r\n        // Update the address\r\n        marketImplementation = newMarketImplementation;\r\n\r\n        // Emit the event\r\n        emit MarketImplementationUpdated(marketImplementation);\r\n    }\r\n\r\n    /**\r\n     * The owner can update the AMM implementation address that will be used for future AMMs\r\n     */\r\n    function updateAmmImplementation(address newAmmImplementation)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(newAmmImplementation != address(0x0), \"Invalid newAmmImplementation\");\r\n\r\n        // Update the address\r\n        ammImplementation = newAmmImplementation;\r\n\r\n        // Emit the event\r\n        emit AmmImplementationUpdated(ammImplementation);\r\n    }\r\n\r\n    /**\r\n     * The owner can update the contract logic address in the proxy itself to upgrade\r\n     */\r\n    function updateMarketsRegistryImplementation(\r\n        address newMarketsRegistryImplementation\r\n    ) public override onlyOwner {\r\n        require(newMarketsRegistryImplementation != address(0x0), \"Invalid newMarketsRegistryImplementation\");\r\n\r\n        // Call the proxiable update\r\n        _updateCodeAddress(newMarketsRegistryImplementation);\r\n    }\r\n\r\n\r\n    /**\r\n     * The owner can update the contract logic address of a particular Market\r\n     * in the proxy itself to upgrade\r\n     */\r\n    function updateImplementationForMarket(\r\n        IMarket market,\r\n        address newMarketImplementation\r\n    ) public override onlyOwner {\r\n        require(newMarketImplementation != address(0x0), \"Invalid newMarketImplementation\");\r\n\r\n        // Call the proxiable update\r\n        market.updateImplementation(newMarketImplementation);\r\n    }\r\n\r\n    /**\r\n     * The owner can create new markets\r\n     */\r\n    function createMarket(\r\n        string calldata _marketName,\r\n        address _collateralToken,\r\n        address _paymentToken,\r\n        IMarket.MarketStyle _marketStyle,\r\n        uint256 _priceRatio,\r\n        uint256 _expirationDate,\r\n        uint16 _exerciseFeeBasisPoints,\r\n        uint16 _closeFeeBasisPoints,\r\n        uint16 _claimFeeBasisPoints,\r\n        address _amm\r\n    ) public override onlyOwner returns (address) {\r\n        require(_collateralToken != address(0x0), \"Invalid _collateralToken\");\r\n        require(_paymentToken != address(0x0), \"Invalid _paymentToken\");\r\n\r\n        // Verify a market with this name does not exist\r\n        require(\r\n            markets[_marketName] == address(0x0),\r\n            \"Market name already registered\"\r\n        );\r\n\r\n        // Deploy a new proxy pointing at the market impl\r\n        Proxy marketProxy = new Proxy(marketImplementation);\r\n        IMarket newMarket = IMarket(address(marketProxy));\r\n\r\n        // Initialize it\r\n        newMarket.initialize(\r\n            _marketName,\r\n            _collateralToken,\r\n            _paymentToken,\r\n            _marketStyle,\r\n            _priceRatio,\r\n            _expirationDate,\r\n            _exerciseFeeBasisPoints,\r\n            _closeFeeBasisPoints,\r\n            _claimFeeBasisPoints,\r\n            tokenImplementation\r\n        );\r\n\r\n        // only allow a particular AMM to mint options from this Market\r\n        newMarket.updateRestrictedMinter(address(_amm));\r\n\r\n        // Save off the new market\r\n        markets[_marketName] = address(newMarket);\r\n\r\n        // Add to list of markets by assets\r\n        bytes32 assetPair = keccak256(abi.encode(address(_collateralToken), address(_paymentToken)));\r\n        marketsByAssets[assetPair].push(address(newMarket));\r\n\r\n        // Emit the event\r\n        emit MarketCreated(_marketName, address(newMarket), marketsByAssets[assetPair].length - 1);\r\n\r\n        // Return the address of the market that was created\r\n        return address(newMarket);\r\n    }\r\n\r\n    /**\r\n     * The owner can create new AMM's for different asset pairs\r\n     */\r\n    function createAmm(\r\n        AggregatorV3Interface _priceOracle,\r\n        IERC20 _paymentToken,\r\n        IERC20 _collateralToken,\r\n        uint16 _tradeFeeBasisPoints,\r\n        bool _shouldInvertOraclePrice\r\n    ) public override onlyOwner returns (address) {\r\n        require(address(_priceOracle) != address(0x0), \"Invalid _priceOracle\");\r\n        require(address(_paymentToken) != address(0x0), \"Invalid _paymentToken\");\r\n        require(address(_collateralToken) != address(0x0), \"Invalid _collateralToken\");\r\n\r\n        // Verify a amm with this name does not exist\r\n        bytes32 assetPair = keccak256(abi.encode(address(_collateralToken), address(_paymentToken)));\r\n\r\n        require(\r\n            amms[assetPair] == address(0x0),\r\n            \"AMM name already registered\"\r\n        );\r\n\r\n        // Deploy a new proxy pointing at the AMM impl\r\n        Proxy ammProxy = new Proxy(ammImplementation);\r\n        InitializeableAmm newAmm = InitializeableAmm(address(ammProxy));\r\n\r\n        newAmm.initialize(\r\n            this,\r\n            _priceOracle,\r\n            _paymentToken,\r\n            _collateralToken,\r\n            tokenImplementation,\r\n            _tradeFeeBasisPoints,\r\n            _shouldInvertOraclePrice\r\n        );\r\n\r\n        // Set owner to msg.sender\r\n        newAmm.transferOwnership(msg.sender);\r\n\r\n        // Save off the new AMM\r\n        amms[assetPair] = address(newAmm);\r\n\r\n        // Emit the event\r\n        emit AmmCreated(address(newAmm));\r\n\r\n        // Return the address of the AMM that was created\r\n        return address(newAmm);\r\n    }\r\n\r\n    /**\r\n     * The owner can destroy a market (only once the market has closed)\r\n     */\r\n    function selfDestructMarket(IMarket market, address payable refundAddress)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(refundAddress != address(0x0), \"Invalid refundAddress\");\r\n\r\n        // Destroy the market\r\n        market.selfDestructMarket(refundAddress);\r\n\r\n        // Emit the event\r\n        emit MarketDestroyed(address(market));\r\n    }\r\n\r\n    /**\r\n     * Allow owner to move tokens from the registry\r\n     */\r\n    function recoverTokens(IERC20 token, address destination)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(destination != address(0x0), \"Invalid destination\");\r\n\r\n        // Get the balance\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        // Sweep out\r\n        token.safeTransfer(destination, balance);\r\n\r\n        // Emit the event\r\n        emit TokensRecovered(address(token), destination, balance);\r\n    }\r\n\r\n    function getMarketsByAssetPair(bytes32 assetPair)\r\n        public\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        return marketsByAssets[assetPair];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"}],\"name\":\"AmmCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AmmImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CodeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketIndex\",\"type\":\"uint256\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"MarketImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TokenImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ammImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"amms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_tradeFeeBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_shouldInvertOraclePrice\",\"type\":\"bool\"}],\"name\":\"createAmm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"enum IMarket.MarketStyle\",\"name\":\"_marketStyle\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_priceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_exerciseFeeBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_closeFeeBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_claimFeeBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"logicAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetPair\",\"type\":\"bytes32\"}],\"name\":\"getMarketsByAssetPair\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ammImplementation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"selfDestructMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAmmImplementation\",\"type\":\"address\"}],\"name\":\"updateAmmImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketImplementation\",\"type\":\"address\"}],\"name\":\"updateImplementationForMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketImplementation\",\"type\":\"address\"}],\"name\":\"updateMarketImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketsRegistryImplementation\",\"type\":\"address\"}],\"name\":\"updateMarketsRegistryImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenImplementation\",\"type\":\"address\"}],\"name\":\"updateTokenImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketsRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0651434ec79607bd505a6cc7d7a43de8d51dca753769888badd448ce4af8a9f1"}]}