{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.6;\r\n\r\ninterface IPayable {\r\n    fallback() external payable;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ZippieAccountERC20 {\r\n  address private owner;\r\n\r\n  constructor() {\r\n    owner = msg.sender; // Zippie Wallet\r\n  }\r\n\r\n  /**\r\n    * @dev Approve owner to send a specific ERC20 token (max 2^256)\r\n    * @param token token to be approved\r\n    */\r\n  function flushETHandTokens(address token, address payable to) public {\r\n    require(msg.sender == owner);\r\n    IERC20(token).transfer(to, IERC20(token).balanceOf(address(this)));\r\n    selfdestruct(to); // Sponsor (any available ETH will be sent here)\r\n  }\r\n  \r\n  function flushETH(address payable to) public {\r\n    require(msg.sender == owner);\r\n    selfdestruct(to); // Sponsor (any available ETH will be sent here)\r\n  }\r\n}\r\n\r\ncontract ZippieAccountERC20Deployer {\r\n    address payable public _owner;\r\n\r\n    constructor (address payable owner) {\r\n        _owner = owner;\r\n    }\r\n    \r\n    function setOwner(address payable newOwner) public {\r\n        require(msg.sender == _owner, 'A');\r\n        _owner = newOwner;\r\n    }\r\n    \r\n    function batchSweepETH(bytes32[] calldata _salt) public {\r\n        require(msg.sender == _owner, 'A');\r\n        \r\n        uint i;\r\n    \r\n        for (i = 0; i < _salt.length; i++) {\r\n            ZippieAccountERC20 account = new ZippieAccountERC20{salt: _salt[i]}();\r\n            account.flushETH(_owner);\r\n        }\r\n    }\r\n        \r\n    function batchSweepETHandTokens(IERC20[] calldata tokens, bytes32[] calldata _salt) public {\r\n        require(msg.sender == _owner, 'A');\r\n\r\n        require(tokens.length == _salt.length, 'B');\r\n\r\n        uint i;\r\n        for (i = 0; i < tokens.length; i++) {\r\n            ZippieAccountERC20 account = new ZippieAccountERC20{salt: _salt[i]}();\r\n            account.flushETHandTokens(address(tokens[i]), _owner);\r\n        }\r\n    }\r\n        \r\n    function getAddress(bytes32 _salt) public view returns (address) {\r\n        address predictedAddress = address(uint160(uint(keccak256(abi.encodePacked(\r\n            bytes1(0xff),\r\n            address(this),\r\n            _salt,\r\n            keccak256(abi.encodePacked(\r\n                type(ZippieAccountERC20).creationCode)  \r\n            ))\r\n        ))));\r\n        return predictedAddress;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_salt\",\"type\":\"bytes32[]\"}],\"name\":\"batchSweepETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_salt\",\"type\":\"bytes32[]\"}],\"name\":\"batchSweepETHandTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ZippieAccountERC20Deployer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005a40fbaaab73da844530e427837a2ce95cf3dcac","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85134b9aa875ef59167ccfdfc3ab836942276510cc6f49fd1492b5deba894af6"}]}