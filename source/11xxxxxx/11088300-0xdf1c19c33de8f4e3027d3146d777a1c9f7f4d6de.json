{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ReserveTraderV1Interface {\r\n    // events\r\n    event AddedAccount(address account);\r\n    event RemovedAccount(address account);\r\n    event CallTradeReserve(bytes data, bool ok, bytes returnData);\r\n    event Call(address target, uint256 amount, bytes data, bool ok, bytes returnData);\r\n\r\n    \r\n    // callable by accounts\r\n    function callTradeReserve(\r\n        bytes calldata data\r\n    ) external returns (bool ok, bytes memory returnData);\r\n\r\n    // only callable by owner\r\n    function addAccount(address account) external;\r\n    function removeAccount(address account) external;\r\n    function callAny(\r\n        address payable target, uint256 amount, bytes calldata data\r\n    ) external returns (bool ok, bytes memory returnData);\r\n\r\n    // view functions\r\n    function getAccounts() external view returns (address[] memory);\r\n    function getTradeReserve() external view returns (address tradeReserve);\r\n}\r\n\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"TwoStepOwnable: caller is not the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (`newOwner`) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \"TwoStepOwnable: new potential owner is the zero address.\"\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \"TwoStepOwnable: current owner must set caller as new potential owner.\"\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n\r\ncontract ReserveTraderV1Staging is ReserveTraderV1Interface, TwoStepOwnable {\r\n    // Track all authorized accounts.\r\n    address[] private _accounts;\r\n\r\n    // Indexes start at 1, as 0 signifies non-inclusion\r\n    mapping (address => uint256) private _accountIndexes;\r\n    \r\n    address private immutable _TRADE_RESERVE;\r\n\r\n    constructor(address tradeReserve, address[] memory initialAccounts) public {\r\n        _TRADE_RESERVE = tradeReserve;\r\n        for (uint256 i; i < initialAccounts.length; i++) {\r\n            address account = initialAccounts[i];\r\n            _addAccount(account);\r\n        }\r\n    }\r\n\r\n    function addAccount(address account) external override onlyOwner {\r\n        _addAccount(account);\r\n    }\r\n\r\n    function removeAccount(address account) external override onlyOwner {\r\n        _removeAccount(account);\r\n    }\r\n\r\n    function callTradeReserve(\r\n        bytes calldata data\r\n    ) external override returns (bool ok, bytes memory returnData) {\r\n        require(\r\n            _accountIndexes[msg.sender] != 0,\r\n            \"Only authorized accounts may trigger calls.\"\r\n        );\r\n        \r\n        // Call the Trade Serve and supply the specified amount and data.\r\n        (ok, returnData) = _TRADE_RESERVE.call(data);\r\n        \r\n        if (!ok) {\r\n            assembly {\r\n                revert(add(returnData, 32), returndatasize())\r\n            }\r\n        }\r\n\r\n        emit CallTradeReserve(data, ok, returnData);\r\n    }\r\n\r\n    function callAny(\r\n        address payable target, uint256 amount, bytes calldata data\r\n    ) external override onlyOwner returns (bool ok, bytes memory returnData) {\r\n        // Call the specified target and supply the specified amount and data.\r\n        (ok, returnData) = target.call{value: amount}(data);\r\n\r\n        emit Call(target, amount, data, ok, returnData);\r\n    }\r\n    \r\n    function getAccounts() external view override returns (address[] memory) {\r\n        return _accounts;\r\n    }\r\n\r\n    function getTradeReserve() external view override returns (address tradeReserve) {\r\n        return _TRADE_RESERVE;\r\n    }\r\n\r\n    function _addAccount(address account) internal {\r\n        require(\r\n            _accountIndexes[account] == 0,\r\n            \"Account matching the provided account already exists.\"\r\n        );\r\n        _accounts.push(account);\r\n        _accountIndexes[account] = _accounts.length;\r\n\r\n        emit AddedAccount(account);\r\n    }\r\n    \r\n    function _removeAccount(address account) internal {\r\n        uint256 removedAccountIndex = _accountIndexes[account];\r\n        require(\r\n            removedAccountIndex != 0,\r\n            \"No account found matching the provided account.\"\r\n        );\r\n\r\n        // swap account to remove with the last one then pop from the array.\r\n        address lastAccount = _accounts[_accounts.length - 1];\r\n        _accounts[removedAccountIndex - 1] = lastAccount;\r\n        _accountIndexes[lastAccount] = removedAccountIndex;\r\n        _accounts.pop();\r\n        delete _accountIndexes[account];\r\n\r\n        emit RemovedAccount(account); \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeReserve\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialAccounts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Call\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallTradeReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedAccount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAny\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callTradeReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tradeReserve\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReserveTraderV1Staging","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002040f2f2bb228927235dc24c33e99e3a0a7922c10000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000500000000000000000000000099763d7e2291866a4c736c2b1a4db4afe404e406000000000000000000000000da0444b680cbb465378831450f67b21adc5593b3000000000000000000000000dfb98aaf1a5c33d959053e9c5357d13f8dc50c7200000000000000000000000059af95ed2fd8baf3c6edb419c6cb2e6abd021616000000000000000000000000c07805842753858fb350674af61ffc9bab319afa","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://84369f9f94a7f1c0388e357b1b0d662fd3f3afa490a9f01d4c96cb3bb74e6404"}]}