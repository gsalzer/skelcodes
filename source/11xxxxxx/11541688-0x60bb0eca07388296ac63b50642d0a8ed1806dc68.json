{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/exchangeV3/offchainWrappersV3/ScpWrapper.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../utils/SafeERC20.sol\\\";\\nimport \\\"../../DS/DSMath.sol\\\";\\nimport \\\"../../auth/AdminAuth.sol\\\";\\nimport \\\"../DFSExchangeHelper.sol\\\";\\nimport \\\"../../interfaces/OffchainWrapperInterface.sol\\\";\\nimport \\\"../../interfaces/TokenInterface.sol\\\";\\n\\ncontract ScpWrapper is OffchainWrapperInterface, DFSExchangeHelper, AdminAuth, DSMath {\\n\\n    string public constant ERR_SRC_AMOUNT = \\\"Not enough funds\\\";\\n    string public constant ERR_PROTOCOL_FEE = \\\"Not enough eth for protcol fee\\\";\\n\\n    using SafeERC20 for ERC20;\\n\\n    /// @notice Takes order from Scp and returns bool indicating if it is successful\\n    /// @param _exData Exchange data\\n    /// @param _type Action type (buy or sell)\\n    function takeOrder(\\n        ExchangeData memory _exData,\\n        ActionType _type\\n    ) override public payable returns (bool success, uint256) {\\n        // check that contract have enough balance for exchange and protocol fee\\n        require(getBalance(_exData.srcAddr) >= _exData.srcAmount, ERR_SRC_AMOUNT);\\n        require(getBalance(KYBER_ETH_ADDRESS) >= _exData.offchainData.protocolFee, ERR_PROTOCOL_FEE);\\n\\n        ERC20(_exData.srcAddr).safeApprove(_exData.offchainData.allowanceTarget, _exData.srcAmount);\\n        \\n        // write in the exact amount we are selling/buing in an order\\n        if (_type == ActionType.SELL) {\\n            writeUint256(_exData.offchainData.callData, 36, _exData.srcAmount);\\n        } else {\\n            writeUint256(_exData.offchainData.callData, 36, wdiv(_exData.destAmount, _exData.offchainData.price));\\n        }\\n\\n        // we know that it will be eth if dest addr is either weth or eth\\n        address destAddr = _exData.destAddr == EXCHANGE_WETH_ADDRESS ? KYBER_ETH_ADDRESS : _exData.destAddr;\\n\\n        uint256 tokensBefore = getBalance(destAddr);\\n        (success, ) = _exData.offchainData.exchangeAddr.call{value: _exData.offchainData.protocolFee}(_exData.offchainData.callData);\\n        uint256 tokensSwaped = 0;\\n\\n        // convert weth to eth before sending back\\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\\n            );\\n        }\\n\\n        if (success) {\\n            // get the current balance of the swaped tokens\\n            tokensSwaped = getBalance(destAddr) - tokensBefore;\\n            require(tokensSwaped > 0);\\n        }\\n\\n        // returns all funds from src addr, dest addr and eth funds (protocol fee leftovers)\\n        sendLeftover(_exData.srcAddr, _exData.destAddr, msg.sender);\\n\\n        return (success, tokensSwaped);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external virtual payable {}\\n}\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     */\\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DS/DSMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x / y;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/auth/AdminAuth.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\ncontract AdminAuth {\\n\\n    using SafeERC20 for ERC20;\\n\\n    address public owner;\\n    address public admin;\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender);\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\\n    }\\n\\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\\n    /// @param _admin Address of multisig that becomes admin\\n    function setAdminByOwner(address _admin) public {\\n        require(msg.sender == owner);\\n        require(admin == address(0));\\n\\n        admin = _admin;\\n    }\\n\\n    /// @notice Admin is able to set new admin\\n    /// @param _admin Address of multisig that becomes new admin\\n    function setAdminByAdmin(address _admin) public {\\n        require(msg.sender == admin);\\n\\n        admin = _admin;\\n    }\\n\\n    /// @notice Admin is able to change owner\\n    /// @param _owner Address of new owner\\n    function setOwnerByAdmin(address _owner) public {\\n        require(msg.sender == admin);\\n\\n        owner = _owner;\\n    }\\n\\n    /// @notice Destroy the contract\\n    function kill() public onlyOwner {\\n        selfdestruct(payable(owner));\\n    }\\n\\n    /// @notice  withdraw stuck funds\\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            payable(owner).transfer(_amount);\\n        } else {\\n            ERC20(_token).safeTransfer(owner, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchangeV3/DFSExchangeHelper.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Discount.sol\\\";\\n\\ncontract DFSExchangeHelper {\\n\\n    string public constant ERR_OFFCHAIN_DATA_INVALID = \\\"Offchain data invalid\\\";\\n\\n    using SafeERC20 for ERC20;\\n\\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant EXCHANGE_WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\\n    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\\n\\n    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\\n\\n\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        if (_token == KYBER_ETH_ADDRESS) return 18;\\n\\n        return ERC20(_token).decimals();\\n    }\\n\\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\\n            balance = address(this).balance;\\n        } else {\\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\\n        }\\n    }\\n\\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\\n        // send back any leftover ether or tokens\\n        if (address(this).balance > 0) {\\n            _to.transfer(address(this).balance);\\n        }\\n\\n        if (getBalance(_srcAddr) > 0) {\\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\\n        }\\n\\n        if (getBalance(_destAddr) > 0) {\\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\\n        }\\n    }\\n\\n    /// @notice Takes a feePercentage and sends it to wallet\\n    /// @param _amount Dai amount of the whole trade\\n    /// @param _user Address of the user\\n    /// @param _token Address of the token\\n    /// @param _dfsFeeDivider Dfs fee divider\\n    /// @return feeAmount Amount in Dai owner earned on the fee\\n    function getFee(uint256 _amount, address _user, address _token, uint256 _dfsFeeDivider) internal returns (uint256 feeAmount) {\\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\\n            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\\n        }\\n\\n        if (_dfsFeeDivider == 0) {\\n            feeAmount = 0;\\n        } else {\\n            feeAmount = _amount / _dfsFeeDivider;\\n\\n            // fee can't go over 10% of the whole amount\\n            if (feeAmount > (_amount / 10)) {\\n                feeAmount = _amount / 10;\\n            }\\n\\n            if (_token == KYBER_ETH_ADDRESS) {\\n                WALLET_ID.transfer(feeAmount);\\n            } else {\\n                ERC20(_token).safeTransfer(WALLET_ID, feeAmount);\\n            }\\n        }\\n    }\\n\\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n        require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n\\n        uint256 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n\\n        return x;\\n    }\\n\\n        function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\\n        if (_b.length < _index + 32) {\\n            revert(ERR_OFFCHAIN_DATA_INVALID);\\n        }\\n\\n        bytes32 input = bytes32(_input);\\n\\n        _index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(_b, _index), input)\\n        }\\n    }\\n\\n    /// @notice Converts Kybers Eth address -> Weth\\n    /// @param _src Input address\\n    function ethToWethAddr(address _src) internal pure returns (address) {\\n        return _src == KYBER_ETH_ADDRESS ? EXCHANGE_WETH_ADDRESS : _src;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/OffchainWrapperInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../exchangeV3/DFSExchangeData.sol\\\";\\n\\nabstract contract OffchainWrapperInterface is DFSExchangeData {\\n    function takeOrder(\\n        ExchangeData memory _exData,\\n        ActionType _type\\n    ) virtual public payable returns (bool success, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/TokenInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nabstract contract TokenInterface {\\n\\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    \\n    function allowance(address, address) public virtual returns (uint256);\\n\\n    function balanceOf(address) public virtual returns (uint256);\\n\\n    function approve(address, uint256) public virtual;\\n\\n    function transfer(address, uint256) public virtual returns (bool);\\n\\n    function transferFrom(address, address, uint256) public virtual returns (bool);\\n\\n    function deposit() public virtual payable;\\n\\n    function withdraw(uint256) public virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ERC20 {\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    function decimals() external view returns (uint256 digits);\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Discount.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ncontract Discount {\\n    address public owner;\\n    mapping(address => CustomServiceFee) public serviceFees;\\n\\n    uint256 constant MAX_SERVICE_FEE = 400;\\n\\n    struct CustomServiceFee {\\n        bool active;\\n        uint256 amount;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function isCustomFeeSet(address _user) public view returns (bool) {\\n        return serviceFees[_user].active;\\n    }\\n\\n    function getCustomServiceFee(address _user) public view returns (uint256) {\\n        return serviceFees[_user].amount;\\n    }\\n\\n    function setServiceFee(address _user, uint256 _fee) public {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\\n\\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\\n    }\\n\\n    function disableServiceFee(address _user) public {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n\\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchangeV3/DFSExchangeData.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract DFSExchangeData {\\n\\n    // first is empty to keep the legacy order in place\\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\\n\\n    enum ActionType { SELL, BUY }\\n\\n    struct OffchainData {\\n        address wrapper;\\n        address exchangeAddr;\\n        address allowanceTarget;\\n        uint256 price;\\n        uint256 protocolFee;\\n        bytes callData;\\n    }\\n\\n    struct ExchangeData {\\n        address srcAddr;\\n        address destAddr;\\n        uint256 srcAmount;\\n        uint256 destAmount;\\n        uint256 minPrice;\\n        uint256 dfsFeeDivider; // service fee divider\\n        address user; // user to check special fee\\n        address wrapper;\\n        bytes wrapperData;\\n        OffchainData offchainData;\\n    }\\n\\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\\n        return abi.encode(_exData);\\n    }\\n\\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\\n        _exData = abi.decode(_data, (ExchangeData));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_OFFCHAIN_DATA_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_SRC_AMOUNT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAVER_EXCHANGE_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZRX_ALLOWLIST_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"name\":\"packExchangeData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"},{\"internalType\":\"enum DFSExchangeData.ActionType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"takeOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unpackExchangeData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ScpWrapper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}