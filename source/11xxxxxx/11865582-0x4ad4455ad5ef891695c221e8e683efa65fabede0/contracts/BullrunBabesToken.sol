//SPDX-License-Identifier: UNLICENSED

// Solidity files have to start with this pragma.
// It will be used by the Solidity compiler to validate its version.
pragma solidity >0.6.1 <0.7.0;
pragma experimental ABIEncoderV2;

// We import this library to be able to use console.log
import "hardhat/console.sol";

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/GSN/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol";
import "./BullrunBabesOracle.sol";

contract BullrunBabesToken is
    Context,
    AccessControl,
    ERC721Burnable,
    ERC721Pausable,
    BullrunBabesTokenI
{
    bytes32 public constant OWNER_ROLE = keccak256("OWNER_ROLE");
    bytes32 public constant COORDINATOR_ROLE = keccak256("COORDINATOR_ROLE");
    bytes32 public constant TRADE_ROLE = keccak256("TRADE_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `COORDINATOR_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor() public ERC721("BullrunBabesToken", "BRB") {
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(OWNER_ROLE, _msgSender());
        _setupRole(COORDINATOR_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());

        _setBaseURI("https://www.bullrunbabes.com/api/metadata/");
    }

    function burn(uint256 tokenId) public override {
        require(
            hasRole(COORDINATOR_ROLE, _msgSender()),
            "Must have COORDINATOR_ROLE to burn"
        );
        super._burn(tokenId);
    }

    function mint(address recipient, uint256 tokenId) public {
        require(
            hasRole(COORDINATOR_ROLE, _msgSender()),
            "Must have COORDINATOR_ROLE to mint"
        );
        super._mint(recipient, tokenId);
    }

    function transfer(
        address from,
        address to,
        uint256 tokenId
    ) public {
        require(
            hasRole(COORDINATOR_ROLE, _msgSender()),
            "Must have COORDINATOR_ROLE to transfer"
        );
        super._safeTransfer(from, to, tokenId, "");
    }

    /* Reenable transfers

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override(ERC721, IERC721) {
        require(
            hasRole(TRADE_ROLE, _msgSender()),
            "Must have TRADE_ROLE to safeTransferFrom"
        );
        super.safeTransferFrom(from, to, tokenId);
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) public override(ERC721, IERC721) {
        require(
            hasRole(TRADE_ROLE, _msgSender()),
            "Must have TRADE_ROLE to safeTransferFrom"
        );
        super.safeTransferFrom(from, to, tokenId, data);
    }

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override(ERC721, IERC721) {
        require(
            hasRole(TRADE_ROLE, _msgSender()),
            "Must have TRADE_ROLE to transferFrom"
        );
        super.transferFrom(from, to, tokenId);
    }
    */

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have pauser role to pause"
        );
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have pauser role to unpause"
        );
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override(ERC721, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }
}

