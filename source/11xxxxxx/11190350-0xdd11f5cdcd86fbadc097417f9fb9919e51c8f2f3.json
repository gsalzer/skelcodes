{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\ncontract LTT_Exchange {\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    event Reward(\r\n       address indexed to,\r\n       uint256 rewardAmount,\r\n       uint256 level\r\n    );\r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n   \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"Link Trade Token\";\r\n    string public symbol = \"LTT\";\r\n    uint8 constant public decimals = 0;\r\n    uint256 public totalSupply_ = 900000;\r\n    uint256 constant internal tokenPriceInitial_ = 0.00013 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 263157894;\r\n    uint256 public currentPrice_ = tokenPriceInitial_ + tokenPriceIncremental_;\r\n    uint256 public base = 1;\r\n    uint256 public basePrice = 380;\r\n    uint public percent = 1100;\r\n    uint256 public rewardSupply_ = 2000000;\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal rewardBalanceLedger_;\r\n    address commissionHolder;\r\n    uint256 internal tokenSupply_ = 0;\r\n    mapping(address => bool) internal administrators;\r\n    mapping(address => address) public genTree;\r\n    mapping(address => uint256) public level1Holding_;\r\n    address terminal;\r\n    uint8[] percent_ = [5,2,1,1,1];\r\n    uint256[] holding_ = [0,460,460,930,930];\r\n    uint internal minWithdraw = 1000;\r\n    uint funds = 0;\r\n    bool distributeRewards_ = false;\r\n    bool reEntrancyMutex = false;\r\n   \r\n    constructor() public\r\n    {\r\n        terminal = msg.sender;\r\n        administrators[terminal] = true;\r\n    }\r\n   \r\n   function upgradeContract(address[] _users, uint256[] _balances, uint256[] _rewards, address[] _referredBy, uint modeType)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        if(modeType == 1)\r\n        {\r\n            for(uint i = 0; i<_users.length;i++)\r\n            {\r\n                tokenBalanceLedger_[_users[i]] += _balances[i];\r\n                tokenSupply_ += _balances[i];\r\n                genTree[_users[i]] = _referredBy[i];\r\n                \r\n                rewardBalanceLedger_[_users[i]] += _rewards[i];\r\n                tokenSupply_ += _rewards[i]/100;\r\n                \r\n                emit Transfer(address(this),_users[i],_balances[i]);\r\n            }\r\n        }\r\n        if(modeType == 2)\r\n        {\r\n            for(i = 0; i<_users.length;i++)\r\n            {\r\n                rewardBalanceLedger_[_users[i]] += _balances[i];\r\n                tokenSupply_ += _balances[i]/100;\r\n            }\r\n        }\r\n    }\r\n   \r\n   function fundsInjection() public payable returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n    \r\n    function startSellDistribution() onlyAdministrator() public\r\n    {\r\n        distributeRewards_ = true;\r\n    }\r\n    \r\n    function stopSellDistribution() onlyAdministrator() public\r\n    {\r\n        distributeRewards_ = false;\r\n    }\r\n    \r\n    function upgradeDetails(uint256 _currentPrice, uint256 _grv)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        currentPrice_ = _currentPrice;\r\n        base = _grv;\r\n    }\r\n   \r\n    function withdrawRewards() public returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(!reEntrancyMutex);\r\n        require(rewardBalanceLedger_[_customerAddress]>minWithdraw);\r\n        reEntrancyMutex = true;\r\n        uint256 _balance = rewardBalanceLedger_[_customerAddress]/100;\r\n        rewardBalanceLedger_[_customerAddress] -= _balance*100;\r\n        emit Transfer(_customerAddress, address(this),_balance);\r\n        _balance = SafeMath.sub(_balance, (_balance*percent/10000));\r\n        uint256 _ethereum = tokensToEthereum_(_balance,true);\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _balance);\r\n        _customerAddress.transfer(_ethereum);\r\n        reEntrancyMutex = false;\r\n    }\r\n   \r\n    function distributeRewards(uint256 _amountToDistribute, address _idToDistribute)\r\n    internal\r\n    {\r\n        uint256 _currentPrice = currentPrice_*basePrice;\r\n        uint256 _tempAmountToDistribute = _amountToDistribute*100;\r\n        for(uint i=0; i<5; i++)\r\n        {\r\n            address referrer = genTree[_idToDistribute];\r\n            uint256 value = _currentPrice*tokenBalanceLedger_[referrer];\r\n            uint256 _holdingLevel1 = level1Holding_[referrer]*_currentPrice;\r\n            if(referrer != 0x0 && value >= (50*10**18) && _holdingLevel1 >= (holding_[i]*10**18))\r\n            {\r\n                rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[i]*100)/10;\r\n                _idToDistribute = referrer;\r\n                emit Reward(referrer,(_amountToDistribute*percent_[i]*100)/10,i);\r\n                _tempAmountToDistribute -= (_amountToDistribute*percent_[i]*100)/10;\r\n            }\r\n        }\r\n        rewardBalanceLedger_[commissionHolder] += _tempAmountToDistribute;\r\n    }\r\n   \r\n   function setBasePrice(uint256 _price)\r\n    onlyAdministrator()\r\n    public\r\n    returns(bool) {\r\n        basePrice = _price;\r\n    }\r\n   \r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        if(msg.sender == _referredBy)\r\n        {\r\n            genTree[msg.sender] = terminal;\r\n        }\r\n        else\r\n        {\r\n            genTree[msg.sender] = _referredBy;\r\n        }\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n   \r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        purchaseTokens(msg.value, 0x0);\r\n    }\r\n   \r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n    */\r\n     \r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        require(!reEntrancyMutex);\r\n        // setup data\r\n        reEntrancyMutex = true;\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _deficit = _tokens * percent / 10000;\r\n        uint256 _dividends = _tokens * (percent-200)/10000;\r\n        tokenBalanceLedger_[commissionHolder] += (_tokens*200)/10000;\r\n        _tokens = SafeMath.sub(_tokens, _deficit);\r\n        uint256 _ethereum = tokensToEthereum_(_tokens,true);\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        if(_dividends > 0 && distributeRewards_)\r\n        {\r\n            distributeRewards(_dividends,_customerAddress);\r\n        }\r\n        level1Holding_[genTree[_customerAddress]] -=_amountOfTokens;\r\n        \r\n        _customerAddress.transfer(_ethereum);\r\n        emit Transfer(_customerAddress, address(this), _amountOfTokens);\r\n        reEntrancyMutex = false;\r\n    }\r\n   \r\n    function rewardOf(address _toCheck)\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return rewardBalanceLedger_[_toCheck];    \r\n    }\r\n   \r\n    function holdingLevel1(address _toCheck)\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return level1Holding_[_toCheck];    \r\n    }\r\n   \r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        return true;\r\n    }\r\n   \r\n    function destruct() onlyAdministrator() public{\r\n        selfdestruct(terminal);\r\n    }\r\n   \r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n   \r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setupCommissionHolder(address _commissionHolder)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        commissionHolder = _commissionHolder;\r\n        administrators[commissionHolder] = true;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n   \r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalSupply_;\r\n    }\r\n   \r\n    function tokenSupply()\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n   \r\n   \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n   \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return currentPrice_;\r\n    }\r\n   \r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _deficit = _tokensToSell * percent / 10000;\r\n        _tokensToSell = SafeMath.sub(_tokensToSell, (_deficit-1));\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell,false);\r\n        return _ethereum;\r\n    }\r\n   \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n   \r\n    event testLog(\r\n        uint256 currBal\r\n    );\r\n\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _amountOfTokens = ethereumToTokens_(_ethereumToSpend, currentPrice_, base, false);\r\n        _amountOfTokens = SafeMath.sub(_amountOfTokens, _amountOfTokens * percent/10000);\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _amountOfTokens = ethereumToTokens_(_incomingEthereum , currentPrice_, base, true);\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n        require(SafeMath.add(_amountOfTokens,tokenSupply_) < (totalSupply_+rewardSupply_));\r\n        //deduct commissions for referrals\r\n        distributeRewards(_amountOfTokens * (percent-200)/10000,_customerAddress);\r\n        _amountOfTokens = SafeMath.sub(_amountOfTokens, _amountOfTokens * percent/10000);\r\n        level1Holding_[_referredBy] +=_amountOfTokens;\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        // fire event\r\n        emit Transfer(address(this), _customerAddress, _amountOfTokens);\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function ethereumToTokens_(uint256 _ethereum, uint256 _currentPrice, uint256 _grv, bool _buy)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(2**(_grv-1)));\r\n        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _totalTokens = 0;\r\n        uint256 _tokensReceived = (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            _tempad**2\r\n                            + (8*_tokenPriceIncremental*_ethereum)\r\n                        )\r\n                    ), _tempad\r\n                )\r\n            )/(2*_tokenPriceIncremental)\r\n        );\r\n        uint256 tempbase = upperBound_(_grv);\r\n        while((_tokensReceived + _tokenSupply) > tempbase){\r\n            _tokensReceived = tempbase - _tokenSupply;\r\n            _ethereum = SafeMath.sub(\r\n                _ethereum,\r\n                ((_tokensReceived)/2)*\r\n                ((2*_currentPrice)+((_tokensReceived-1)\r\n                *_tokenPriceIncremental))\r\n            );\r\n            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n            _grv = _grv + 1;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n            uint256 _tempTokensReceived = (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                _tempad**2\r\n                                + (8*_tokenPriceIncremental*_ethereum)\r\n                            )\r\n                        ), _tempad\r\n                    )\r\n                )/(2*_tokenPriceIncremental)\r\n            );\r\n            _tokenSupply = _tokenSupply + _tokensReceived;\r\n            _totalTokens = _totalTokens + _tokensReceived;\r\n            _tokensReceived = _tempTokensReceived;\r\n            tempbase = upperBound_(_grv);\r\n        }\r\n        _totalTokens = _totalTokens + _tokensReceived;\r\n        _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n        if(_buy == true)\r\n        {\r\n            currentPrice_ = _currentPrice;\r\n            base = _grv;\r\n        }\r\n        return _totalTokens;\r\n    }\r\n   \r\n    function upperBound_(uint256 _grv)\r\n    internal\r\n    view\r\n    returns(uint256)\r\n    {\r\n        if(_grv <= 5)\r\n        {\r\n            return (60000 * _grv);\r\n        }\r\n        if(_grv > 5 && _grv <= 10)\r\n        {\r\n            return (300000 + ((_grv-5)*50000));\r\n        }\r\n        if(_grv > 10 && _grv <= 15)\r\n        {\r\n            return (550000 + ((_grv-10)*40000));\r\n        }\r\n        if(_grv > 15 && _grv <= 20)\r\n        {\r\n            return (750000 +((_grv-15)*30000));\r\n        }\r\n        return 0;\r\n    }\r\n   \r\n     function tokensToEthereum_(uint256 _tokens, bool _sell)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _etherReceived = 0;\r\n        uint256 _grv = base;\r\n        uint256 tempbase = upperBound_(_grv-1);\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n        while((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            uint256 tokensToSell = _tokenSupply - tempbase;\r\n            if(tokensToSell == 0)\r\n            {\r\n                _tokenSupply = _tokenSupply - 1;\r\n                _grv -= 1;\r\n                tempbase = upperBound_(_grv-1);\r\n                continue;\r\n            }\r\n            uint256 b = ((tokensToSell-1)*_tokenPriceIncremental);\r\n            uint256 a = _currentPrice - b;\r\n            _tokens = _tokens - tokensToSell;\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+b));\r\n            _currentPrice = a;\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((2)**(_grv-1)));\r\n            tempbase = upperBound_(_grv-1);\r\n        }\r\n        if(_tokens > 0)\r\n        {\r\n             a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\r\n             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\r\n             _tokenSupply = _tokenSupply - _tokens;\r\n             _currentPrice = a;\r\n        }\r\n       \r\n        if(_sell == true)\r\n        {\r\n            base = _grv;\r\n            currentPrice_ = _currentPrice;\r\n        }\r\n        return _etherReceived;\r\n    }\r\n   \r\n   \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"level1Holding_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSellDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toCheck\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_grv\",\"type\":\"uint256\"}],\"name\":\"upgradeDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"genTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSellDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundsInjection\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"name\":\"_referredBy\",\"type\":\"address[]\"},{\"name\":\"modeType\",\"type\":\"uint256\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commissionHolder\",\"type\":\"address\"}],\"name\":\"setupCommissionHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toCheck\",\"type\":\"address\"}],\"name\":\"holdingLevel1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currBal\",\"type\":\"uint256\"}],\"name\":\"testLog\",\"type\":\"event\"}]","ContractName":"LTT_Exchange","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://30025a6a476084c4a094a453822cb957fc91d32369c03775e1b8b793eee535c6"}]}