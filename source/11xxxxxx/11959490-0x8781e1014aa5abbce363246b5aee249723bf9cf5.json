{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.7.0;\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner ;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor()  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ncontract B26_DevelopmentFund is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    // token contract address\r\n    address public constant tokenAddress = 0x481dE76d5ab31e28A33B0EA1c1063aDCb5B1769A;\r\n    \r\n    uint256 public tokens = 0;\r\n    uint256 public tokensToUnlock ;\r\n    \r\n    bool public firstWith =  false;\r\n    bool public secondWith = false;\r\n    bool public thirdWith =  false;\r\n    bool public fourthWith =  false;\r\n    bool public fiveWith =  false;\r\n    bool public sixWith =  false;\r\n    uint256 public relaseTime = 30 days;\r\n    uint256 public relaseTime2 = 60 days;\r\n    uint256 public relaseTime3 = 90 days;\r\n    uint256 public relaseTime4 = 120 days;\r\n    uint256 public relaseTime5 = 150 days;\r\n    uint256 public relaseTime6 = 180 days;\r\n    uint256 public timing ;\r\n    \r\n\r\n    function getTiming()  public view returns (uint256){\r\n        return block.timestamp.sub(timing);\r\n    }\r\n    \r\n    function deposit(uint amountToStake) public onlyOwner{\r\n        require( tokens == 0, \"Cannot deposit more Tokens\");\r\n        require( amountToStake > 0, \"Cannot deposit  Tokens\");\r\n        \r\n        require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), \"Insufficient Token Allowance\");\r\n        tokens = amountToStake;\r\n        tokensToUnlock = amountToStake.div(6);\r\n        firstWith = true;\r\n        timing = block.timestamp;\r\n        \r\n        }\r\n    \r\n    function withdraw1() public onlyOwner{\r\n        require( firstWith, \"Deposit first\");\r\n        require(block.timestamp.sub(timing)>relaseTime, \"Not yet\");\r\n        \r\n        firstWith = false;\r\n        secondWith = true;\r\n        require(Token(tokenAddress).transfer(owner, tokensToUnlock), \"Could not transfer tokens.\");\r\n        tokens = tokens.sub(tokensToUnlock);\r\n        \r\n        }\r\n    \r\n    \r\n    function withdraw2() public onlyOwner{\r\n        require( secondWith, \"With1 first\");\r\n        require(block.timestamp.sub(timing)>relaseTime2, \"Not yet\");\r\n        \r\n        secondWith = false;\r\n        thirdWith = true;\r\n        require(Token(tokenAddress).transfer(owner, tokensToUnlock), \"Could not transfer tokens.\");\r\n        tokens = tokens.sub(tokensToUnlock);  \r\n        \r\n        }\r\n        \r\n    function withdraw3() public onlyOwner{\r\n        require( thirdWith, \"With2 first\");\r\n        require(block.timestamp.sub(timing)>relaseTime3, \"Not yet\");\r\n        \r\n        thirdWith = false;\r\n        fourthWith = true;\r\n        require(Token(tokenAddress).transfer(owner, tokensToUnlock), \"Could not transfer tokens.\");\r\n        tokens = tokens.sub(tokensToUnlock); \r\n        }\r\n        \r\n    function withdraw4() public onlyOwner{\r\n        require( fourthWith, \"With3 first\");\r\n        require(block.timestamp.sub(timing)>relaseTime4, \"Not yet\");\r\n        \r\n        fourthWith = false;\r\n        fiveWith = true;\r\n        require(Token(tokenAddress).transfer(owner, tokensToUnlock), \"Could not transfer tokens.\");\r\n        tokens = tokens.sub(tokensToUnlock); \r\n    }\r\n    \r\n    function withdraw5() public onlyOwner{\r\n        require( fiveWith, \"With4 first\");\r\n        require(block.timestamp.sub(timing)>relaseTime5, \"Not yet\");\r\n        \r\n        fiveWith = false;\r\n        sixWith = true;\r\n        require(Token(tokenAddress).transfer(owner, tokensToUnlock), \"Could not transfer tokens.\");\r\n        tokens = tokens.sub(tokensToUnlock);\r\n        }\r\n        \r\n    function withdraw6() public onlyOwner{\r\n        require( sixWith, \"With5 first\");\r\n        require(block.timestamp.sub(timing)>relaseTime6, \"Not yet\");\r\n        \r\n        sixWith = false;\r\n        require(Token(tokenAddress).transfer(owner, tokensToUnlock), \"Could not transfer tokens.\");\r\n        tokens = tokens.sub(tokensToUnlock);  \r\n        }\r\n    \r\n    \r\n    \r\n    \r\n    }","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstWith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fiveWith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fourthWith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relaseTime2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relaseTime3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relaseTime4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relaseTime5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relaseTime6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondWith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sixWith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdWith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw6\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"B26_DevelopmentFund","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c771d4fee684817ed78447d91a4d700be6ed224006baf5006ab2be8d0530db4c"}]}