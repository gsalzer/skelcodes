{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/dependencies/openzeppelin/contracts/IERC20.sol\r\n\r\n// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\r\n\r\ninterface IERC20Detailed is IERC20 {\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/interfaces/ILendingPoolAddressesProvider.sol\r\n\r\n/**\r\n * @title LendingPoolAddressesProvider contract\r\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\r\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\r\n * - Owned by the Aave Governance\r\n * @author Aave\r\n **/\r\ninterface ILendingPoolAddressesProvider {\r\n  event MarketIdSet(string newMarketId);\r\n  event LendingPoolUpdated(address indexed newAddress);\r\n  event ConfigurationAdminUpdated(address indexed newAddress);\r\n  event EmergencyAdminUpdated(address indexed newAddress);\r\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\r\n  event PriceOracleUpdated(address indexed newAddress);\r\n  event LendingRateOracleUpdated(address indexed newAddress);\r\n  event ProxyCreated(bytes32 id, address indexed newAddress);\r\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n\r\n  function getMarketId() external view returns (string memory);\r\n\r\n  function setMarketId(string calldata marketId) external;\r\n\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  function setAddressAsProxy(bytes32 id, address impl) external;\r\n\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  function getLendingPool() external view returns (address);\r\n\r\n  function setLendingPoolImpl(address pool) external;\r\n\r\n  function getLendingPoolConfigurator() external view returns (address);\r\n\r\n  function setLendingPoolConfiguratorImpl(address configurator) external;\r\n\r\n  function getLendingPoolCollateralManager() external view returns (address);\r\n\r\n  function setLendingPoolCollateralManager(address manager) external;\r\n\r\n  function getPoolAdmin() external view returns (address);\r\n\r\n  function setPoolAdmin(address admin) external;\r\n\r\n  function getEmergencyAdmin() external view returns (address);\r\n\r\n  function setEmergencyAdmin(address admin) external;\r\n\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  function setPriceOracle(address priceOracle) external;\r\n\r\n  function getLendingRateOracle() external view returns (address);\r\n\r\n  function setLendingRateOracle(address lendingRateOracle) external;\r\n}\r\n\r\n// File: contracts/misc/interfaces/IUiPoolDataProvider.sol\r\n\r\ninterface IUiPoolDataProvider {\r\n  struct AggregatedReserveData {\r\n    address underlyingAsset;\r\n    string name;\r\n    string symbol;\r\n    uint256 decimals;\r\n    uint256 baseLTVasCollateral;\r\n    uint256 reserveLiquidationThreshold;\r\n    uint256 reserveLiquidationBonus;\r\n    uint256 reserveFactor;\r\n    bool usageAsCollateralEnabled;\r\n    bool borrowingEnabled;\r\n    bool stableBorrowRateEnabled;\r\n    bool isActive;\r\n    bool isFrozen;\r\n    // base data\r\n    uint128 liquidityIndex;\r\n    uint128 variableBorrowIndex;\r\n    uint128 liquidityRate;\r\n    uint128 variableBorrowRate;\r\n    uint128 stableBorrowRate;\r\n    uint40 lastUpdateTimestamp;\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    address interestRateStrategyAddress;\r\n    //\r\n    uint256 availableLiquidity;\r\n    uint256 totalPrincipalStableDebt;\r\n    uint256 averageStableRate;\r\n    uint256 stableDebtLastUpdateTimestamp;\r\n    uint256 totalScaledVariableDebt;\r\n    uint256 priceInEth;\r\n    uint256 variableRateSlope1;\r\n    uint256 variableRateSlope2;\r\n    uint256 stableRateSlope1;\r\n    uint256 stableRateSlope2;\r\n  }\r\n  //\r\n  //  struct ReserveData {\r\n  //    uint256 averageStableBorrowRate;\r\n  //    uint256 totalLiquidity;\r\n  //  }\r\n\r\n  struct UserReserveData {\r\n    address underlyingAsset;\r\n    uint256 scaledATokenBalance;\r\n    bool usageAsCollateralEnabledOnUser;\r\n    uint256 stableBorrowRate;\r\n    uint256 scaledVariableDebt;\r\n    uint256 principalStableDebt;\r\n    uint256 stableBorrowLastUpdateTimestamp;\r\n  }\r\n\r\n  //\r\n  //  struct ATokenSupplyData {\r\n  //    string name;\r\n  //    string symbol;\r\n  //    uint8 decimals;\r\n  //    uint256 totalSupply;\r\n  //    address aTokenAddress;\r\n  //  }\r\n\r\n  function getReservesData(ILendingPoolAddressesProvider provider, address user)\r\n    external\r\n    view\r\n    returns (\r\n      AggregatedReserveData[] memory,\r\n      UserReserveData[] memory,\r\n      uint256\r\n    );\r\n\r\n  //  function getUserReservesData(ILendingPoolAddressesProvider provider, address user)\r\n  //    external\r\n  //    view\r\n  //    returns (UserReserveData[] memory);\r\n  //\r\n  //  function getAllATokenSupply(ILendingPoolAddressesProvider provider)\r\n  //    external\r\n  //    view\r\n  //    returns (ATokenSupplyData[] memory);\r\n  //\r\n  //  function getATokenSupply(address[] calldata aTokens)\r\n  //    external\r\n  //    view\r\n  //    returns (ATokenSupplyData[] memory);\r\n}\r\n\r\n// File: contracts/protocol/libraries/types/DataTypes.sol\r\n\r\nlibrary DataTypes {\r\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    uint40 lastUpdateTimestamp;\r\n    //tokens addresses\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint8 id;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: Reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60-63: reserved\r\n    //bit 64-79: reserve factor\r\n    uint256 data;\r\n  }\r\n\r\n  struct UserConfigurationMap {\r\n    uint256 data;\r\n  }\r\n\r\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n}\r\n\r\n// File: contracts/interfaces/ILendingPool.sol\r\n\r\ninterface ILendingPool {\r\n  /**\r\n   * @dev Emitted on deposit()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the deposit\r\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\r\n   * @param amount The amount deposited\r\n   * @param referral The referral code used\r\n   **/\r\n  event Deposit(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on withdraw()\r\n   * @param reserve The address of the underlyng asset being withdrawn\r\n   * @param user The address initiating the withdrawal, owner of aTokens\r\n   * @param to Address that will receive the underlying\r\n   * @param amount The amount to be withdrawn\r\n   **/\r\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n   * @param reserve The address of the underlying asset being borrowed\r\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n   * initiator of the transaction on flashLoan()\r\n   * @param onBehalfOf The address that will be getting the debt\r\n   * @param amount The amount borrowed out\r\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\r\n   * @param borrowRate The numeric rate at which the user has borrowed\r\n   * @param referral The referral code used\r\n   **/\r\n  event Borrow(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint256 borrowRateMode,\r\n    uint256 borrowRate,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on repay()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The beneficiary of the repayment, getting his debt reduced\r\n   * @param repayer The address of the user initiating the repay(), providing the funds\r\n   * @param amount The amount repaid\r\n   **/\r\n  event Repay(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    address indexed repayer,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on swapBorrowRateMode()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user swapping his rate mode\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on rebalanceStableBorrowRate()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user for which the rebalance has been executed\r\n   **/\r\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on flashLoan()\r\n   * @param target The address of the flash loan receiver contract\r\n   * @param initiator The address initiating the flash loan\r\n   * @param asset The address of the asset being flash borrowed\r\n   * @param amount The amount flash borrowed\r\n   * @param premium The fee flash borrowed\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address indexed initiator,\r\n    address indexed asset,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    uint16 referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the pause is triggered.\r\n   */\r\n  event Paused();\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted.\r\n   */\r\n  event Unpaused();\r\n\r\n  /**\r\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\r\n   * LendingPoolCollateral manager using a DELEGATECALL\r\n   * This allows to have the events in the generated ABI for LendingPool.\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\r\n   * @param liquidator The address of the liquidator\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  event LiquidationCall(\r\n    address indexed collateralAsset,\r\n    address indexed debtAsset,\r\n    address indexed user,\r\n    uint256 debtToCover,\r\n    uint256 liquidatedCollateralAmount,\r\n    address liquidator,\r\n    bool receiveAToken\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\r\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\r\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\r\n   * gets added to the LendingPool ABI\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param liquidityRate The new liquidity rate\r\n   * @param stableBorrowRate The new stable borrow rate\r\n   * @param variableBorrowRate The new variable borrow rate\r\n   * @param liquidityIndex The new liquidity index\r\n   * @param variableBorrowIndex The new variable borrow index\r\n   **/\r\n  event ReserveDataUpdated(\r\n    address indexed reserve,\r\n    uint256 liquidityRate,\r\n    uint256 stableBorrowRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to deposit\r\n   * @param amount The amount to be deposited\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function deposit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n   * @param asset The address of the underlying asset to withdraw\r\n   * @param amount The underlying amount to be withdrawn\r\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n   * @param to Address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   * @return The final amount withdrawn\r\n   **/\r\n  function withdraw(\r\n    address asset,\r\n    uint256 amount,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\r\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n   * @param asset The address of the underlying asset to borrow\r\n   * @param amount The amount to be borrowed\r\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   **/\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @return The final amount repaid\r\n   **/\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 rateMode,\r\n    address onBehalfOf\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\r\n\r\n  /**\r\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n   * - Users can be rebalanced if the following conditions are satisfied:\r\n   *     1. Usage ratio is above 95%\r\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\r\n   *        borrowed at a stable rate and depositors are not earning enough\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param user The address of the user to be rebalanced\r\n   **/\r\n  function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n  /**\r\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\r\n   * @param asset The address of the underlying asset deposited\r\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\r\n   **/\r\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n  /**\r\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\r\n   * For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\r\n   * @param assets The addresses of the assets being flash-borrowed\r\n   * @param amounts The amounts amounts being flash-borrowed\r\n   * @param modes Types of the debt to open if the flash loan is not returned:\r\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata modes,\r\n    address onBehalfOf,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Returns the user account data across all the reserves\r\n   * @param user The address of the user\r\n   * @return totalCollateralETH the total collateral in ETH of the user\r\n   * @return totalDebtETH the total debt in ETH of the user\r\n   * @return availableBorrowsETH the borrowing power left of the user\r\n   * @return currentLiquidationThreshold the liquidation threshold of the user\r\n   * @return ltv the loan to value of the user\r\n   * @return healthFactor the current health factor of the user\r\n   **/\r\n  function getUserAccountData(address user)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralETH,\r\n      uint256 totalDebtETH,\r\n      uint256 availableBorrowsETH,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    );\r\n\r\n  function initReserve(\r\n    address reserve,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n\r\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\r\n    external;\r\n\r\n  function setConfiguration(address reserve, uint256 configuration) external;\r\n\r\n  /**\r\n   * @dev Returns the configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The configuration of the reserve\r\n   **/\r\n  function getConfiguration(address asset)\r\n    external\r\n    view\r\n    returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the configuration of the user across all the reserves\r\n   * @param user The user address\r\n   * @return The configuration of the user\r\n   **/\r\n  function getUserConfiguration(address user)\r\n    external\r\n    view\r\n    returns (DataTypes.UserConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the normalized income normalized income of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the normalized variable debt per unit of asset\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the state and configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The state of the reserve\r\n   **/\r\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromAfter,\r\n    uint256 balanceToBefore\r\n  ) external;\r\n\r\n  function getReservesList() external view returns (address[] memory);\r\n\r\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\r\n\r\n  function setPause(bool val) external;\r\n\r\n  function paused() external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IPriceOracleGetter.sol\r\n\r\n/**\r\n * @title IPriceOracleGetter interface\r\n * @notice Interface for the Aave price oracle.\r\n **/\r\n\r\ninterface IPriceOracleGetter {\r\n  /**\r\n   * @dev returns the asset price in ETH\r\n   * @param asset the address of the asset\r\n   * @return the ETH price of the asset\r\n   **/\r\n  function getAssetPrice(address asset) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IScaledBalanceToken.sol\r\n\r\ninterface IScaledBalanceToken {\r\n  /**\r\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\r\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\r\n   * @param user The user whose balance is calculated\r\n   * @return The scaled balance of the user\r\n   **/\r\n  function scaledBalanceOf(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the scaled balance of the user and the scaled total supply.\r\n   * @param user The address of the user\r\n   * @return The scaled balance of the user\r\n   * @return The scaled balance and the scaled total supply\r\n   **/\r\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\r\n\r\n  /**\r\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\r\n   * @return The scaled total supply\r\n   **/\r\n  function scaledTotalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IAToken.sol\r\n\r\ninterface IAToken is IERC20, IScaledBalanceToken {\r\n  /**\r\n   * @dev Emitted after the mint action\r\n   * @param from The address performing the mint\r\n   * @param value The amount being\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  event Mint(address indexed from, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @dev Mints `amount` aTokens to `user`\r\n   * @param user The address receiving the minted tokens\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The new liquidity index of the reserve\r\n   * @return `true` if the the previous balance of the user was 0\r\n   */\r\n  function mint(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted after aTokens are burned\r\n   * @param from The owner of the aTokens, getting them burned\r\n   * @param target The address that will receive the underlying\r\n   * @param value The amount being burned\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @dev Emitted during the transfer action\r\n   * @param from The user whose tokens are being transferred\r\n   * @param to The recipient\r\n   * @param value The amount being transferred\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\r\n   * @param user The owner of the aTokens, getting them burned\r\n   * @param receiverOfUnderlying The address that will receive the underlying\r\n   * @param amount The amount being burned\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  function burn(\r\n    address user,\r\n    address receiverOfUnderlying,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Mints aTokens to the reserve treasury\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The new liquidity index of the reserve\r\n   */\r\n  function mintToTreasury(uint256 amount, uint256 index) external;\r\n\r\n  /**\r\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\r\n   * @param from The address getting liquidated, current owner of the aTokens\r\n   * @param to The recipient\r\n   * @param value The amount of tokens getting transferred\r\n   **/\r\n  function transferOnLiquidation(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\r\n   * assets in borrow(), withdraw() and flashLoan()\r\n   * @param user The recipient of the aTokens\r\n   * @param amount The amount getting transferred\r\n   * @return The amount transferred\r\n   **/\r\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IVariableDebtToken.sol\r\n\r\n/**\r\n * @title IVariableDebtToken\r\n * @author Aave\r\n * @notice Defines the basic interface for a variable debt token.\r\n **/\r\ninterface IVariableDebtToken is IScaledBalanceToken {\r\n  /**\r\n   * @dev Emitted after the mint action\r\n   * @param from The address performing the mint\r\n   * @param onBehalfOf The address of the user on which behalf minting has been performed\r\n   * @param value The amount to be minted\r\n   * @param index The last index of the reserve\r\n   **/\r\n  event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @dev Mints debt token to the `onBehalfOf` address\r\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\r\n   * of credit delegate, or same as `onBehalfOf` otherwise\r\n   * @param onBehalfOf The address receiving the debt tokens\r\n   * @param amount The amount of debt being minted\r\n   * @param index The variable debt index of the reserve\r\n   * @return `true` if the the previous balance of the user is 0\r\n   **/\r\n  function mint(\r\n    address user,\r\n    address onBehalfOf,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when variable debt is burnt\r\n   * @param user The user which debt has been burned\r\n   * @param amount The amount of debt being burned\r\n   * @param index The index of the user\r\n   **/\r\n  event Burn(address indexed user, uint256 amount, uint256 index);\r\n\r\n  /**\r\n   * @dev Burns user variable debt\r\n   * @param user The user which debt is burnt\r\n   * @param index The variable debt index of the reserve\r\n   **/\r\n  function burn(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IStableDebtToken.sol\r\n\r\n/**\r\n * @title IStableDebtToken\r\n * @notice Defines the interface for the stable debt token\r\n * @dev It does not inherit from IERC20 to save in code size\r\n * @author Aave\r\n **/\r\n\r\ninterface IStableDebtToken {\r\n  /**\r\n   * @dev Emitted when new stable debt is minted\r\n   * @param user The address of the user who triggered the minting\r\n   * @param onBehalfOf The recipient of stable debt tokens\r\n   * @param amount The amount minted\r\n   * @param currentBalance The current balance of the user\r\n   * @param balanceIncrease The increase in balance since the last action of the user\r\n   * @param newRate The rate of the debt after the minting\r\n   * @param avgStableRate The new average stable rate after the minting\r\n   * @param newTotalSupply The new total supply of the stable debt token after the action\r\n   **/\r\n  event Mint(\r\n    address indexed user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint256 currentBalance,\r\n    uint256 balanceIncrease,\r\n    uint256 newRate,\r\n    uint256 avgStableRate,\r\n    uint256 newTotalSupply\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when new stable debt is burned\r\n   * @param user The address of the user\r\n   * @param amount The amount being burned\r\n   * @param currentBalance The current balance of the user\r\n   * @param balanceIncrease The the increase in balance since the last action of the user\r\n   * @param avgStableRate The new average stable rate after the burning\r\n   * @param newTotalSupply The new total supply of the stable debt token after the action\r\n   **/\r\n  event Burn(\r\n    address indexed user,\r\n    uint256 amount,\r\n    uint256 currentBalance,\r\n    uint256 balanceIncrease,\r\n    uint256 avgStableRate,\r\n    uint256 newTotalSupply\r\n  );\r\n\r\n  /**\r\n   * @dev Mints debt token to the `onBehalfOf` address.\r\n   * - The resulting rate is the weighted average between the rate of the new debt\r\n   * and the rate of the previous debt\r\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\r\n   * of credit delegate, or same as `onBehalfOf` otherwise\r\n   * @param onBehalfOf The address receiving the debt tokens\r\n   * @param amount The amount of debt tokens to mint\r\n   * @param rate The rate of the debt being minted\r\n   **/\r\n  function mint(\r\n    address user,\r\n    address onBehalfOf,\r\n    uint256 amount,\r\n    uint256 rate\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Burns debt of `user`\r\n   * - The resulting rate is the weighted average between the rate of the new debt\r\n   * and the rate of the previous debt\r\n   * @param user The address of the user getting his debt burned\r\n   * @param amount The amount of debt tokens getting burned\r\n   **/\r\n  function burn(address user, uint256 amount) external;\r\n\r\n  /**\r\n   * @dev Returns the average rate of all the stable rate loans.\r\n   * @return The average stable rate\r\n   **/\r\n  function getAverageStableRate() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the stable rate of the user debt\r\n   * @return The stable rate of the user\r\n   **/\r\n  function getUserStableRate(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the timestamp of the last update of the user\r\n   * @return The timestamp\r\n   **/\r\n  function getUserLastUpdated(address user) external view returns (uint40);\r\n\r\n  /**\r\n   * @dev Returns the principal, the total supply and the average stable rate\r\n   **/\r\n  function getSupplyData()\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint40\r\n    );\r\n\r\n  /**\r\n   * @dev Returns the timestamp of the last update of the total supply\r\n   * @return The timestamp\r\n   **/\r\n  function getTotalSupplyLastUpdated() external view returns (uint40);\r\n\r\n  /**\r\n   * @dev Returns the total supply and the average stable rate\r\n   **/\r\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\r\n\r\n  /**\r\n   * @dev Returns the principal debt balance of the user\r\n   * @return The debt balance of the user since the last burn/mint action\r\n   **/\r\n  function principalBalanceOf(address user) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/protocol/libraries/helpers/Errors.sol\r\n\r\n/**\r\n * @title Errors library\r\n * @author Aave\r\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\r\n * @dev Error messages prefix glossary:\r\n *  - VL = ValidationLogic\r\n *  - MATH = Math libraries\r\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\r\n *  - AT = AToken\r\n *  - SDT = StableDebtToken\r\n *  - VDT = VariableDebtToken\r\n *  - LP = LendingPool\r\n *  - LPAPR = LendingPoolAddressesProviderRegistry\r\n *  - LPC = LendingPoolConfiguration\r\n *  - RL = ReserveLogic\r\n *  - LPCM = LendingPoolCollateralManager\r\n *  - P = Pausable\r\n */\r\nlibrary Errors {\r\n  //common errors\r\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\r\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\r\n\r\n  //contract specific errors\r\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\r\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\r\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\r\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\r\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\r\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\r\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\r\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\r\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\r\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\r\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\r\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\r\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\r\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\r\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\r\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\r\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\r\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\r\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\r\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\r\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\r\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\r\n  string public constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\r\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\r\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\r\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\r\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\r\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\r\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\r\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\r\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\r\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\r\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\r\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\r\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\r\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\r\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\r\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\r\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \"There isn't enough liquidity available to liquidate\"\r\n  string public constant LPCM_NO_ERRORS = '46'; // 'No errors'\r\n  string public constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\r\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\r\n  string public constant MATH_ADDITION_OVERFLOW = '49';\r\n  string public constant MATH_DIVISION_BY_ZERO = '50';\r\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\r\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\r\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\r\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\r\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\r\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\r\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\r\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\r\n  string public constant LP_FAILED_COLLATERAL_SWAP = '60';\r\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\r\n  string public constant LP_REENTRANCY_NOT_ALLOWED = '62';\r\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\r\n  string public constant LP_IS_PAUSED = '64'; // 'Pool is paused'\r\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\r\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\r\n  string public constant RC_INVALID_LTV = '67';\r\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\r\n  string public constant RC_INVALID_LIQ_BONUS = '69';\r\n  string public constant RC_INVALID_DECIMALS = '70';\r\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\r\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\r\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\r\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\r\n  string public constant UL_INVALID_INDEX = '77';\r\n  string public constant LP_NOT_CONTRACT = '78';\r\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\r\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\r\n\r\n  enum CollateralManagerErrors {\r\n    NO_ERROR,\r\n    NO_COLLATERAL_AVAILABLE,\r\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\r\n    CURRRENCY_NOT_BORROWED,\r\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\r\n    NOT_ENOUGH_LIQUIDITY,\r\n    NO_ACTIVE_RESERVE,\r\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\r\n    INVALID_EQUAL_ASSETS_TO_SWAP,\r\n    FROZEN_RESERVE\r\n  }\r\n}\r\n\r\n// File: contracts/protocol/libraries/math/WadRayMath.sol\r\n\r\n/**\r\n * @title WadRayMath library\r\n * @author Aave\r\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\r\n **/\r\n\r\nlibrary WadRayMath {\r\n  uint256 internal constant WAD = 1e18;\r\n  uint256 internal constant halfWAD = WAD / 2;\r\n\r\n  uint256 internal constant RAY = 1e27;\r\n  uint256 internal constant halfRAY = RAY / 2;\r\n\r\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\r\n\r\n  /**\r\n   * @return One ray, 1e27\r\n   **/\r\n  function ray() internal pure returns (uint256) {\r\n    return RAY;\r\n  }\r\n\r\n  /**\r\n   * @return One wad, 1e18\r\n   **/\r\n\r\n  function wad() internal pure returns (uint256) {\r\n    return WAD;\r\n  }\r\n\r\n  /**\r\n   * @return Half ray, 1e27/2\r\n   **/\r\n  function halfRay() internal pure returns (uint256) {\r\n    return halfRAY;\r\n  }\r\n\r\n  /**\r\n   * @return Half ray, 1e18/2\r\n   **/\r\n  function halfWad() internal pure returns (uint256) {\r\n    return halfWAD;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two wad, rounding half up to the nearest wad\r\n   * @param a Wad\r\n   * @param b Wad\r\n   * @return The result of a*b, in wad\r\n   **/\r\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\r\n\r\n    return (a * b + halfWAD) / WAD;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two wad, rounding half up to the nearest wad\r\n   * @param a Wad\r\n   * @param b Wad\r\n   * @return The result of a/b, in wad\r\n   **/\r\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\r\n    uint256 halfB = b / 2;\r\n\r\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\r\n\r\n    return (a * WAD + halfB) / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two ray, rounding half up to the nearest ray\r\n   * @param a Ray\r\n   * @param b Ray\r\n   * @return The result of a*b, in ray\r\n   **/\r\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\r\n\r\n    return (a * b + halfRAY) / RAY;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two ray, rounding half up to the nearest ray\r\n   * @param a Ray\r\n   * @param b Ray\r\n   * @return The result of a/b, in ray\r\n   **/\r\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\r\n    uint256 halfB = b / 2;\r\n\r\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\r\n\r\n    return (a * RAY + halfB) / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Casts ray down to wad\r\n   * @param a Ray\r\n   * @return a casted to wad, rounded half up to the nearest wad\r\n   **/\r\n  function rayToWad(uint256 a) internal pure returns (uint256) {\r\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\r\n    uint256 result = halfRatio + a;\r\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\r\n\r\n    return result / WAD_RAY_RATIO;\r\n  }\r\n\r\n  /**\r\n   * @dev Converts wad up to ray\r\n   * @param a Wad\r\n   * @return a converted in ray\r\n   **/\r\n  function wadToRay(uint256 a) internal pure returns (uint256) {\r\n    uint256 result = a * WAD_RAY_RATIO;\r\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\r\n    return result;\r\n  }\r\n}\r\n\r\n// File: contracts/protocol/libraries/configuration/ReserveConfiguration.sol\r\n\r\n/**\r\n * @title ReserveConfiguration library\r\n * @author Aave\r\n * @notice Implements the bitmap logic to handle the reserve configuration\r\n */\r\nlibrary ReserveConfiguration {\r\n  uint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\r\n  uint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\r\n  uint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\r\n  uint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\r\n  uint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\r\n  uint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\r\n\r\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\r\n  uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\r\n  uint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\r\n  uint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\r\n  uint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\r\n  uint256 constant IS_FROZEN_START_BIT_POSITION = 57;\r\n  uint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\r\n  uint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\r\n  uint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\r\n\r\n  uint256 constant MAX_VALID_LTV = 65535;\r\n  uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\r\n  uint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\r\n  uint256 constant MAX_VALID_DECIMALS = 255;\r\n  uint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\r\n\r\n  /**\r\n   * @dev Sets the Loan to Value of the reserve\r\n   * @param self The reserve configuration\r\n   * @param ltv the new ltv\r\n   **/\r\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\r\n    require(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\r\n\r\n    self.data = (self.data & LTV_MASK) | ltv;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the Loan to Value of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The loan to value\r\n   **/\r\n  function getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\r\n    return self.data & ~LTV_MASK;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the liquidation threshold of the reserve\r\n   * @param self The reserve configuration\r\n   * @param threshold The new liquidation threshold\r\n   **/\r\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\r\n    internal\r\n    pure\r\n  {\r\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\r\n\r\n    self.data =\r\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\r\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the liquidation threshold of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The liquidation threshold\r\n   **/\r\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the liquidation bonus of the reserve\r\n   * @param self The reserve configuration\r\n   * @param bonus The new liquidation bonus\r\n   **/\r\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\r\n    internal\r\n    pure\r\n  {\r\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\r\n\r\n    self.data =\r\n      (self.data & LIQUIDATION_BONUS_MASK) |\r\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the liquidation bonus of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The liquidation bonus\r\n   **/\r\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the decimals of the underlying asset of the reserve\r\n   * @param self The reserve configuration\r\n   * @param decimals The decimals\r\n   **/\r\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\r\n    internal\r\n    pure\r\n  {\r\n    require(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\r\n\r\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the decimals of the underlying asset of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The decimals of the asset\r\n   **/\r\n  function getDecimals(DataTypes.ReserveConfigurationMap storage self)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the active state of the reserve\r\n   * @param self The reserve configuration\r\n   * @param active The active state\r\n   **/\r\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\r\n    self.data =\r\n      (self.data & ACTIVE_MASK) |\r\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the active state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The active state\r\n   **/\r\n  function getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\r\n    return (self.data & ~ACTIVE_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the frozen state of the reserve\r\n   * @param self The reserve configuration\r\n   * @param frozen The frozen state\r\n   **/\r\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\r\n    self.data =\r\n      (self.data & FROZEN_MASK) |\r\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the frozen state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The frozen state\r\n   **/\r\n  function getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\r\n    return (self.data & ~FROZEN_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Enables or disables borrowing on the reserve\r\n   * @param self The reserve configuration\r\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\r\n   **/\r\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\r\n    internal\r\n    pure\r\n  {\r\n    self.data =\r\n      (self.data & BORROWING_MASK) |\r\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the borrowing state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The borrowing state\r\n   **/\r\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return (self.data & ~BORROWING_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Enables or disables stable rate borrowing on the reserve\r\n   * @param self The reserve configuration\r\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\r\n   **/\r\n  function setStableRateBorrowingEnabled(\r\n    DataTypes.ReserveConfigurationMap memory self,\r\n    bool enabled\r\n  ) internal pure {\r\n    self.data =\r\n      (self.data & STABLE_BORROWING_MASK) |\r\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the stable rate borrowing state of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The stable rate borrowing state\r\n   **/\r\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the reserve factor of the reserve\r\n   * @param self The reserve configuration\r\n   * @param reserveFactor The reserve factor\r\n   **/\r\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\r\n    internal\r\n    pure\r\n  {\r\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\r\n\r\n    self.data =\r\n      (self.data & RESERVE_FACTOR_MASK) |\r\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the reserve factor of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The reserve factor\r\n   **/\r\n  function getReserveFactor(DataTypes.ReserveConfigurationMap storage self)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the configuration flags of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\r\n   **/\r\n  function getFlags(DataTypes.ReserveConfigurationMap storage self)\r\n    internal\r\n    view\r\n    returns (\r\n      bool,\r\n      bool,\r\n      bool,\r\n      bool\r\n    )\r\n  {\r\n    uint256 dataLocal = self.data;\r\n\r\n    return (\r\n      (dataLocal & ~ACTIVE_MASK) != 0,\r\n      (dataLocal & ~FROZEN_MASK) != 0,\r\n      (dataLocal & ~BORROWING_MASK) != 0,\r\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the configuration paramters of the reserve\r\n   * @param self The reserve configuration\r\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\r\n   **/\r\n  function getParams(DataTypes.ReserveConfigurationMap storage self)\r\n    internal\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    uint256 dataLocal = self.data;\r\n\r\n    return (\r\n      dataLocal & ~LTV_MASK,\r\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\r\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\r\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\r\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the configuration paramters of the reserve from a memory object\r\n   * @param self The reserve configuration\r\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\r\n   **/\r\n  function getParamsMemory(DataTypes.ReserveConfigurationMap memory self)\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    return (\r\n      self.data & ~LTV_MASK,\r\n      (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\r\n      (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\r\n      (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\r\n      (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the configuration flags of the reserve from a memory object\r\n   * @param self The reserve configuration\r\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\r\n   **/\r\n  function getFlagsMemory(DataTypes.ReserveConfigurationMap memory self)\r\n    internal\r\n    pure\r\n    returns (\r\n      bool,\r\n      bool,\r\n      bool,\r\n      bool\r\n    )\r\n  {\r\n    return (\r\n      (self.data & ~ACTIVE_MASK) != 0,\r\n      (self.data & ~FROZEN_MASK) != 0,\r\n      (self.data & ~BORROWING_MASK) != 0,\r\n      (self.data & ~STABLE_BORROWING_MASK) != 0\r\n    );\r\n  }\r\n}\r\n\r\n// File: contracts/protocol/libraries/configuration/UserConfiguration.sol\r\n\r\n/**\r\n * @title UserConfiguration library\r\n * @author Aave\r\n * @notice Implements the bitmap logic to handle the user configuration\r\n */\r\nlibrary UserConfiguration {\r\n  uint256 internal constant BORROWING_MASK =\r\n    0x5555555555555555555555555555555555555555555555555555555555555555;\r\n\r\n  /**\r\n   * @dev Sets if the user is borrowing the reserve identified by reserveIndex\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @param borrowing True if the user is borrowing the reserve, false otherwise\r\n   **/\r\n  function setBorrowing(\r\n    DataTypes.UserConfigurationMap storage self,\r\n    uint256 reserveIndex,\r\n    bool borrowing\r\n  ) internal {\r\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\r\n    self.data =\r\n      (self.data & ~(1 << (reserveIndex * 2))) |\r\n      (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\r\n  }\r\n\r\n  /**\r\n   * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\r\n   **/\r\n  function setUsingAsCollateral(\r\n    DataTypes.UserConfigurationMap storage self,\r\n    uint256 reserveIndex,\r\n    bool usingAsCollateral\r\n  ) internal {\r\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\r\n    self.data =\r\n      (self.data & ~(1 << (reserveIndex * 2 + 1))) |\r\n      (uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\r\n  }\r\n\r\n  /**\r\n   * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\r\n   **/\r\n  function isUsingAsCollateralOrBorrowing(\r\n    DataTypes.UserConfigurationMap memory self,\r\n    uint256 reserveIndex\r\n  ) internal pure returns (bool) {\r\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\r\n    return (self.data >> (reserveIndex * 2)) & 3 != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to validate if a user has been using the reserve for borrowing\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @return True if the user has been using a reserve for borrowing, false otherwise\r\n   **/\r\n  function isBorrowing(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex)\r\n    internal\r\n    pure\r\n    returns (bool)\r\n  {\r\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\r\n    return (self.data >> (reserveIndex * 2)) & 1 != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to validate if a user has been using the reserve as collateral\r\n   * @param self The configuration object\r\n   * @param reserveIndex The index of the reserve in the bitmap\r\n   * @return True if the user has been using a reserve as collateral, false otherwise\r\n   **/\r\n  function isUsingAsCollateral(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex)\r\n    internal\r\n    pure\r\n    returns (bool)\r\n  {\r\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\r\n    return (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to validate if a user has been borrowing from any reserve\r\n   * @param self The configuration object\r\n   * @return True if the user has been borrowing any reserve, false otherwise\r\n   **/\r\n  function isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\r\n    return self.data & BORROWING_MASK != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to validate if a user has not been using any reserve\r\n   * @param self The configuration object\r\n   * @return True if the user has been borrowing any reserve, false otherwise\r\n   **/\r\n  function isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\r\n    return self.data == 0;\r\n  }\r\n}\r\n\r\n// File: contracts/dependencies/openzeppelin/contracts/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IReserveInterestRateStrategy.sol\r\n\r\n/**\r\n * @title IReserveInterestRateStrategyInterface interface\r\n * @dev Interface for the calculation of the interest rates\r\n * @author Aave\r\n */\r\ninterface IReserveInterestRateStrategy {\r\n  function baseVariableBorrowRate() external view returns (uint256);\r\n\r\n  function getMaxVariableBorrowRate() external view returns (uint256);\r\n\r\n  function calculateInterestRates(\r\n    address reserve,\r\n    uint256 utilizationRate,\r\n    uint256 totalStableDebt,\r\n    uint256 totalVariableDebt,\r\n    uint256 averageStableBorrowRate,\r\n    uint256 reserveFactor\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 liquidityRate,\r\n      uint256 stableBorrowRate,\r\n      uint256 variableBorrowRate\r\n    );\r\n}\r\n\r\n// File: contracts/protocol/libraries/math/PercentageMath.sol\r\n\r\n/**\r\n * @title PercentageMath library\r\n * @author Aave\r\n * @notice Provides functions to perform percentage calculations\r\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\r\n * @dev Operations are rounded half up\r\n **/\r\n\r\nlibrary PercentageMath {\r\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\r\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\r\n\r\n  /**\r\n   * @dev Executes a percentage multiplication\r\n   * @param value The value of which the percentage needs to be calculated\r\n   * @param percentage The percentage of the value to be calculated\r\n   * @return The percentage of value\r\n   **/\r\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\r\n    if (value == 0 || percentage == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(\r\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\r\n      Errors.MATH_MULTIPLICATION_OVERFLOW\r\n    );\r\n\r\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @dev Executes a percentage division\r\n   * @param value The value of which the percentage needs to be calculated\r\n   * @param percentage The percentage of the value to be calculated\r\n   * @return The value divided the percentage\r\n   **/\r\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\r\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\r\n    uint256 halfPercentage = percentage / 2;\r\n\r\n    require(\r\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\r\n      Errors.MATH_MULTIPLICATION_OVERFLOW\r\n    );\r\n\r\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/ILendingRateOracle.sol\r\n\r\n/**\r\n * @title ILendingRateOracle interface\r\n * @notice Interface for the Aave borrow rate oracle. Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\r\n **/\r\n\r\ninterface ILendingRateOracle {\r\n  /**\r\n    @dev returns the market borrow rate in ray\r\n    **/\r\n  function getMarketBorrowRate(address asset) external view returns (uint256);\r\n\r\n  /**\r\n    @dev sets the market borrow rate. Rate value must be in ray\r\n    **/\r\n  function setMarketBorrowRate(address asset, uint256 rate) external;\r\n}\r\n\r\n// File: contracts/protocol/lendingpool/DefaultReserveInterestRateStrategy.sol\r\n\r\n/**\r\n * @title DefaultReserveInterestRateStrategy contract\r\n * @notice Implements the calculation of the interest rates depending on the reserve state\r\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\r\n * point of utilization and another from that one to 100%\r\n * - An instance of this same contract, can't be used across different Aave markets, due to the caching\r\n *   of the LendingPoolAddressesProvider\r\n * @author Aave\r\n **/\r\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\r\n  using WadRayMath for uint256;\r\n  using SafeMath for uint256;\r\n  using PercentageMath for uint256;\r\n\r\n  /**\r\n   * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\r\n   * Expressed in ray\r\n   **/\r\n  uint256 public immutable OPTIMAL_UTILIZATION_RATE;\r\n\r\n  /**\r\n   * @dev This constant represents the excess utilization rate above the optimal. It's always equal to\r\n   * 1-optimal utilization rate. Added as a constant here for gas optimizations.\r\n   * Expressed in ray\r\n   **/\r\n\r\n  uint256 public immutable EXCESS_UTILIZATION_RATE;\r\n\r\n  ILendingPoolAddressesProvider public immutable addressesProvider;\r\n\r\n  // Base variable borrow rate when Utilization rate = 0. Expressed in ray\r\n  uint256 internal immutable _baseVariableBorrowRate;\r\n\r\n  // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n  uint256 internal immutable _variableRateSlope1;\r\n\r\n  // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n  uint256 internal immutable _variableRateSlope2;\r\n\r\n  // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n  uint256 internal immutable _stableRateSlope1;\r\n\r\n  // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n  uint256 internal immutable _stableRateSlope2;\r\n\r\n  constructor(\r\n    ILendingPoolAddressesProvider provider,\r\n    uint256 optimalUtilizationRate,\r\n    uint256 baseVariableBorrowRate,\r\n    uint256 variableRateSlope1,\r\n    uint256 variableRateSlope2,\r\n    uint256 stableRateSlope1,\r\n    uint256 stableRateSlope2\r\n  ) public {\r\n    OPTIMAL_UTILIZATION_RATE = optimalUtilizationRate;\r\n    EXCESS_UTILIZATION_RATE = WadRayMath.ray().sub(optimalUtilizationRate);\r\n    addressesProvider = provider;\r\n    _baseVariableBorrowRate = baseVariableBorrowRate;\r\n    _variableRateSlope1 = variableRateSlope1;\r\n    _variableRateSlope2 = variableRateSlope2;\r\n    _stableRateSlope1 = stableRateSlope1;\r\n    _stableRateSlope2 = stableRateSlope2;\r\n  }\r\n\r\n  function variableRateSlope1() external view returns (uint256) {\r\n    return _variableRateSlope1;\r\n  }\r\n\r\n  function variableRateSlope2() external view returns (uint256) {\r\n    return _variableRateSlope2;\r\n  }\r\n\r\n  function stableRateSlope1() external view returns (uint256) {\r\n    return _stableRateSlope1;\r\n  }\r\n\r\n  function stableRateSlope2() external view returns (uint256) {\r\n    return _stableRateSlope2;\r\n  }\r\n\r\n  function baseVariableBorrowRate() external view override returns (uint256) {\r\n    return _baseVariableBorrowRate;\r\n  }\r\n\r\n  function getMaxVariableBorrowRate() external view override returns (uint256) {\r\n    return _baseVariableBorrowRate.add(_variableRateSlope1).add(_variableRateSlope2);\r\n  }\r\n\r\n  struct CalcInterestRatesLocalVars {\r\n    uint256 totalDebt;\r\n    uint256 currentVariableBorrowRate;\r\n    uint256 currentStableBorrowRate;\r\n    uint256 currentLiquidityRate;\r\n    uint256 utilizationRate;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the interest rates depending on the reserve's state and configurations\r\n   * @param reserve The address of the reserve\r\n   * @param availableLiquidity The liquidity available in the reserve\r\n   * @param totalStableDebt The total borrowed from the reserve a stable rate\r\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\r\n   * @param averageStableBorrowRate The weighted average of all the stable rate loans\r\n   * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\r\n   * @return The liquidity rate, the stable borrow rate and the variable borrow rate\r\n   **/\r\n  function calculateInterestRates(\r\n    address reserve,\r\n    uint256 availableLiquidity,\r\n    uint256 totalStableDebt,\r\n    uint256 totalVariableDebt,\r\n    uint256 averageStableBorrowRate,\r\n    uint256 reserveFactor\r\n  )\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    CalcInterestRatesLocalVars memory vars;\r\n\r\n    vars.totalDebt = totalStableDebt.add(totalVariableDebt);\r\n    vars.currentVariableBorrowRate = 0;\r\n    vars.currentStableBorrowRate = 0;\r\n    vars.currentLiquidityRate = 0;\r\n\r\n    uint256 utilizationRate =\r\n      vars.totalDebt == 0 ? 0 : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\r\n\r\n    vars.currentStableBorrowRate = ILendingRateOracle(addressesProvider.getLendingRateOracle())\r\n      .getMarketBorrowRate(reserve);\r\n\r\n    if (utilizationRate > OPTIMAL_UTILIZATION_RATE) {\r\n      uint256 excessUtilizationRateRatio =\r\n        utilizationRate.sub(OPTIMAL_UTILIZATION_RATE).rayDiv(EXCESS_UTILIZATION_RATE);\r\n\r\n      vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(_stableRateSlope1).add(\r\n        _stableRateSlope2.rayMul(excessUtilizationRateRatio)\r\n      );\r\n\r\n      vars.currentVariableBorrowRate = _baseVariableBorrowRate.add(_variableRateSlope1).add(\r\n        _variableRateSlope2.rayMul(excessUtilizationRateRatio)\r\n      );\r\n    } else {\r\n      vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\r\n        _stableRateSlope1.rayMul(utilizationRate.rayDiv(OPTIMAL_UTILIZATION_RATE))\r\n      );\r\n      vars.currentVariableBorrowRate = _baseVariableBorrowRate.add(\r\n        utilizationRate.rayMul(_variableRateSlope1).rayDiv(OPTIMAL_UTILIZATION_RATE)\r\n      );\r\n    }\r\n\r\n    vars.currentLiquidityRate = _getOverallBorrowRate(\r\n      totalStableDebt,\r\n      totalVariableDebt,\r\n      vars\r\n        .currentVariableBorrowRate,\r\n      averageStableBorrowRate\r\n    )\r\n      .rayMul(utilizationRate)\r\n      .percentMul(PercentageMath.PERCENTAGE_FACTOR.sub(reserveFactor));\r\n\r\n    return (\r\n      vars.currentLiquidityRate,\r\n      vars.currentStableBorrowRate,\r\n      vars.currentVariableBorrowRate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the overall borrow rate as the weighted average between the total variable debt and total stable debt\r\n   * @param totalStableDebt The total borrowed from the reserve a stable rate\r\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\r\n   * @param currentVariableBorrowRate The current variable borrow rate of the reserve\r\n   * @param currentAverageStableBorrowRate The current weighted average of all the stable rate loans\r\n   * @return The weighted averaged borrow rate\r\n   **/\r\n  function _getOverallBorrowRate(\r\n    uint256 totalStableDebt,\r\n    uint256 totalVariableDebt,\r\n    uint256 currentVariableBorrowRate,\r\n    uint256 currentAverageStableBorrowRate\r\n  ) internal pure returns (uint256) {\r\n    uint256 totalDebt = totalStableDebt.add(totalVariableDebt);\r\n\r\n    if (totalDebt == 0) return 0;\r\n\r\n    uint256 weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate);\r\n\r\n    uint256 weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate);\r\n\r\n    uint256 overallBorrowRate =\r\n      weightedVariableRate.add(weightedStableRate).rayDiv(totalDebt.wadToRay());\r\n\r\n    return overallBorrowRate;\r\n  }\r\n}\r\n\r\n// File: contracts/misc/UiPoolDataProvider.sol\r\n\r\ncontract UiPoolDataProvider is IUiPoolDataProvider {\r\n  using WadRayMath for uint256;\r\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\r\n  using UserConfiguration for DataTypes.UserConfigurationMap;\r\n\r\n  address public constant MOCK_USD_ADDRESS = 0x10F7Fc1F91Ba351f9C629c5947AD69bD03C05b96;\r\n\r\n  function getInterestRateStrategySlopes(DefaultReserveInterestRateStrategy interestRateStrategy)\r\n    internal\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    return (\r\n      interestRateStrategy.variableRateSlope1(),\r\n      interestRateStrategy.variableRateSlope2(),\r\n      interestRateStrategy.stableRateSlope1(),\r\n      interestRateStrategy.stableRateSlope2()\r\n    );\r\n  }\r\n\r\n  function getReservesData(ILendingPoolAddressesProvider provider, address user)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      AggregatedReserveData[] memory,\r\n      UserReserveData[] memory,\r\n      uint256\r\n    )\r\n  {\r\n    ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\r\n    IPriceOracleGetter oracle = IPriceOracleGetter(provider.getPriceOracle());\r\n    address[] memory reserves = lendingPool.getReservesList();\r\n    DataTypes.UserConfigurationMap memory userConfig = lendingPool.getUserConfiguration(user);\r\n\r\n    AggregatedReserveData[] memory reservesData = new AggregatedReserveData[](reserves.length);\r\n    UserReserveData[] memory userReservesData =\r\n      new UserReserveData[](user != address(0) ? reserves.length : 0);\r\n\r\n    for (uint256 i = 0; i < reserves.length; i++) {\r\n      AggregatedReserveData memory reserveData = reservesData[i];\r\n      reserveData.underlyingAsset = reserves[i];\r\n\r\n      // reserve current state\r\n      DataTypes.ReserveData memory baseData =\r\n        lendingPool.getReserveData(reserveData.underlyingAsset);\r\n      reserveData.liquidityIndex = baseData.liquidityIndex;\r\n      reserveData.variableBorrowIndex = baseData.variableBorrowIndex;\r\n      reserveData.liquidityRate = baseData.currentLiquidityRate;\r\n      reserveData.variableBorrowRate = baseData.currentVariableBorrowRate;\r\n      reserveData.stableBorrowRate = baseData.currentStableBorrowRate;\r\n      reserveData.lastUpdateTimestamp = baseData.lastUpdateTimestamp;\r\n      reserveData.aTokenAddress = baseData.aTokenAddress;\r\n      reserveData.stableDebtTokenAddress = baseData.stableDebtTokenAddress;\r\n      reserveData.variableDebtTokenAddress = baseData.variableDebtTokenAddress;\r\n      reserveData.interestRateStrategyAddress = baseData.interestRateStrategyAddress;\r\n      reserveData.priceInEth = oracle.getAssetPrice(reserveData.underlyingAsset);\r\n\r\n      reserveData.availableLiquidity = IERC20Detailed(reserveData.underlyingAsset).balanceOf(\r\n        reserveData.aTokenAddress\r\n      );\r\n      (\r\n        reserveData.totalPrincipalStableDebt,\r\n        ,\r\n        reserveData.averageStableRate,\r\n        reserveData.stableDebtLastUpdateTimestamp\r\n      ) = IStableDebtToken(reserveData.stableDebtTokenAddress).getSupplyData();\r\n      reserveData.totalScaledVariableDebt = IVariableDebtToken(reserveData.variableDebtTokenAddress)\r\n        .scaledTotalSupply();\r\n\r\n      // reserve configuration\r\n\r\n      // we're getting this info from the aToken, because some of assets can be not compliant with ETC20Detailed\r\n      reserveData.symbol = IERC20Detailed(reserveData.aTokenAddress).symbol();\r\n      reserveData.name = '';\r\n\r\n      (\r\n        reserveData.baseLTVasCollateral,\r\n        reserveData.reserveLiquidationThreshold,\r\n        reserveData.reserveLiquidationBonus,\r\n        reserveData.decimals,\r\n        reserveData.reserveFactor\r\n      ) = baseData.configuration.getParamsMemory();\r\n      (\r\n        reserveData.isActive,\r\n        reserveData.isFrozen,\r\n        reserveData.borrowingEnabled,\r\n        reserveData.stableBorrowRateEnabled\r\n      ) = baseData.configuration.getFlagsMemory();\r\n      reserveData.usageAsCollateralEnabled = reserveData.baseLTVasCollateral != 0;\r\n      (\r\n        reserveData.variableRateSlope1,\r\n        reserveData.variableRateSlope2,\r\n        reserveData.stableRateSlope1,\r\n        reserveData.stableRateSlope2\r\n      ) = getInterestRateStrategySlopes(\r\n        DefaultReserveInterestRateStrategy(reserveData.interestRateStrategyAddress)\r\n      );\r\n\r\n      if (user != address(0)) {\r\n        // user reserve data\r\n        userReservesData[i].underlyingAsset = reserveData.underlyingAsset;\r\n        userReservesData[i].scaledATokenBalance = IAToken(reserveData.aTokenAddress)\r\n          .scaledBalanceOf(user);\r\n        userReservesData[i].usageAsCollateralEnabledOnUser = userConfig.isUsingAsCollateral(i);\r\n\r\n        if (userConfig.isBorrowing(i)) {\r\n          userReservesData[i].scaledVariableDebt = IVariableDebtToken(\r\n            reserveData\r\n              .variableDebtTokenAddress\r\n          )\r\n            .scaledBalanceOf(user);\r\n          userReservesData[i].principalStableDebt = IStableDebtToken(\r\n            reserveData\r\n              .stableDebtTokenAddress\r\n          )\r\n            .principalBalanceOf(user);\r\n          if (userReservesData[i].principalStableDebt != 0) {\r\n            userReservesData[i].stableBorrowRate = IStableDebtToken(\r\n              reserveData\r\n                .stableDebtTokenAddress\r\n            )\r\n              .getUserStableRate(user);\r\n            userReservesData[i].stableBorrowLastUpdateTimestamp = IStableDebtToken(\r\n              reserveData\r\n                .stableDebtTokenAddress\r\n            )\r\n              .getUserLastUpdated(user);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (reservesData, userReservesData, oracle.getAssetPrice(MOCK_USD_ADDRESS));\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"MOCK_USD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReservesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseLTVasCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"stableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableDebtLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalScaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope2\",\"type\":\"uint256\"}],\"internalType\":\"struct IUiPoolDataProvider.AggregatedReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledATokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabledOnUser\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IUiPoolDataProvider.UserReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UiPoolDataProvider","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b96fe3be02d54e67cd3bcbfb7044e2e377d09585b35a67dd69f485c0441dec75"}]}