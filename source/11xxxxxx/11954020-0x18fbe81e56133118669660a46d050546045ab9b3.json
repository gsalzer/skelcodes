{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/mirror-finance/MirrorMainnet_mTWTR_UST.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"../../base/snx-base/interfaces/SNXRewardInterface.sol\\\";\\nimport \\\"../../base/snx-base/SNXReward2FarmStrategyUL.sol\\\";\\n\\ncontract MirrorMainnet_mTWTR_UST is SNXReward2FarmStrategyUL {\\n\\n  address public ust = address(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD);\\n  address public mtwtr_ust = address(0x34856be886A2dBa5F7c38c4df7FD86869aB08040);\\n  address public mtwtr = address(0xEdb0414627E6f1e3F082DE65cD4F9C693D78CCA9);\\n  address public mir = address(0x09a3EcAFa817268f77BE1283176B946C4ff2E608);\\n  address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n  address public mTWTRUSTRewardPool = address(0x99d737ab0df10cdC99c6f64D0384ACd5C03AEF7F);\\n  address public constant universalLiquidatorRegistry = address(0x7882172921E99d590E097cD600554339fBDBc480);\\n  address public constant farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\\n\\n  constructor(\\n    address _storage,\\n    address _vault,\\n    address _distributionPool\\n  )\\n  SNXReward2FarmStrategyUL(_storage, mtwtr_ust, _vault, mTWTRUSTRewardPool, mir, universalLiquidatorRegistry, farm, _distributionPool)\\n  public {\\n    require(IVault(_vault).underlying() == mtwtr_ust, \\\"Underlying mismatch\\\");\\n    liquidationPath = [mir, farm];\\n    liquidationDexes.push(bytes32(uint256(keccak256(\\\"uni\\\"))));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/snx-base/interfaces/SNXRewardInterface.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface SNXRewardInterface {\\n    function withdraw(uint) external;\\n    function getReward() external;\\n    function stake(uint) external;\\n    function balanceOf(address) external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n    function exit() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/snx-base/SNXReward2FarmStrategyUL.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../StrategyBaseUL.sol\\\";\\nimport \\\"../interface/IVault.sol\\\";\\nimport \\\"../interface/IRewardDistributionSwitcher.sol\\\";\\nimport \\\"../interface/INoMintRewardPool.sol\\\";\\nimport \\\"./interfaces/SNXRewardInterface.sol\\\";\\n\\n/*\\n*   This is a general strategy for yields that are based on the synthetix reward contract\\n*   for example, yam, spaghetti, ham, shrimp.\\n*\\n*   One strategy is deployed for one underlying asset, but the design of the contract\\n*   should allow it to switch between different reward contracts.\\n*\\n*   It is important to note that not all SNX reward contracts that are accessible via the same interface are\\n*   suitable for this Strategy. One concrete example is CREAM.finance, as it implements a \\\"Lock\\\" feature and\\n*   would not allow the user to withdraw within some timeframe after the user have deposited.\\n*   This would be problematic to user as our \\\"invest\\\" function in the vault could be invoked by anyone anytime\\n*   and thus locking/reverting on subsequent withdrawals. Another variation is the YFI Governance: it can\\n*   activate a vote lock to stop withdrawal.\\n*\\n*   Ref:\\n*   1. CREAM https://etherscan.io/address/0xc29e89845fa794aa0a0b8823de23b760c3d766f5#code\\n*   2. YAM https://etherscan.io/address/0x8538E5910c6F80419CD3170c26073Ff238048c9E#code\\n*   3. SHRIMP https://etherscan.io/address/0x9f83883FD3cadB7d2A83a1De51F9Bf483438122e#code\\n*   4. BASED https://etherscan.io/address/0x5BB622ba7b2F09BF23F1a9b509cd210A818c53d7#code\\n*   5. YFII https://etherscan.io/address/0xb81D3cB2708530ea990a287142b82D058725C092#code\\n*   6. YFIGovernance https://etherscan.io/address/0xBa37B002AbaFDd8E89a1995dA52740bbC013D992#code\\n*\\n*\\n*\\n*   Respecting the current system design of choosing the best strategy under the vault, and also rewarding/funding\\n*   the public key that invokes the switch of strategies, this smart contract should be deployed twice and linked\\n*   to the same vault. When the governance want to rotate the crop, they would set the reward source on the strategy\\n*   that is not active, then set that apy higher and this one lower.\\n*\\n*   Consequently, in the smart contract we restrict that we can only set a new reward source when it is not active.\\n*\\n*/\\n\\ncontract SNXReward2FarmStrategyUL is StrategyBaseUL {\\n\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  address public farm;\\n  address public distributionPool;\\n  address public distributionSwitcher;\\n  address public rewardToken;\\n  bool public pausedInvesting = false; // When this flag is true, the strategy will not be able to invest. But users should be able to withdraw.\\n\\n  SNXRewardInterface public rewardPool;\\n\\n  // a flag for disabling selling for simplified emergency exit\\n  bool public sell = true;\\n  uint256 public sellFloor = 1e6;\\n\\n\\n  //  Instead of trying to pass in the detailed liquidation path and different dexes to the liquidator,\\n  //    we just pass in the input output of the liquidation path:\\n  //      [ MIC, WETH, FARM ] , [SUSHI, UNI]\\n  //\\n  //  This means that:\\n  //     the first dex is sushi, the input is MIC and output is WETH.\\n  //     the second dex is uni, the input is WETH and the output is FARM.\\n  //     the universal liquidator itself would record the best path to liquidate from MIC to WETH on Sushiswap\\n\\n  // provides the path for liquidating a token\\n  address [] public liquidationPath;\\n  // specifies which DEX is the token liquidated on\\n  bytes32 [] public liquidationDexes;\\n\\n  event ProfitsNotCollected();\\n\\n  // This is only used in `investAllUnderlying()`\\n  // The user can still freely withdraw from the strategy\\n  modifier onlyNotPausedInvesting() {\\n    require(!pausedInvesting, \\\"Action blocked as the strategy is in emergency state\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    address _storage,\\n    address _underlying,\\n    address _vault,\\n    address _rewardPool,\\n    address _rewardToken,\\n    address _universalLiquidatorRegistry,\\n    address _farm,\\n    address _distributionPool\\n  )\\n  StrategyBaseUL(_storage, _underlying, _vault, _farm, _universalLiquidatorRegistry)\\n  public {\\n    require(_vault == INoMintRewardPool(_distributionPool).lpToken(), \\\"distribution pool's lp must be the vault\\\");\\n    require(\\n      (_farm == INoMintRewardPool(_distributionPool).rewardToken())\\n      || (_farm == IVault(INoMintRewardPool(_distributionPool).rewardToken()).underlying()),\\n      \\\"distribution pool's reward must be FARM or iFARM\\\");\\n\\n    farm = _farm;\\n    distributionPool = _distributionPool;\\n    rewardToken = _rewardToken;\\n    rewardPool = SNXRewardInterface(_rewardPool);\\n  }\\n\\n  function depositArbCheck() public view returns(bool) {\\n    return true;\\n  }\\n\\n  /*\\n  *   In case there are some issues discovered about the pool or underlying asset\\n  *   Governance can exit the pool properly\\n  *   The function is only used for emergency to exit the pool\\n  */\\n  function emergencyExit() public onlyGovernance {\\n    rewardPool.exit();\\n    pausedInvesting = true;\\n  }\\n\\n  /*\\n  *   Resumes the ability to invest into the underlying reward pools\\n  */\\n\\n  function continueInvesting() public onlyGovernance {\\n    pausedInvesting = false;\\n  }\\n\\n\\n  function setLiquidationPaths(address [] memory _liquidationPath, bytes32[] memory _dexes) public onlyGovernance {\\n    liquidationPath = _liquidationPath;\\n    liquidationDexes = _dexes;\\n  }\\n\\n  function _liquidateReward() internal {\\n    uint256 rewardBalance = IERC20(rewardToken).balanceOf(address(this));\\n    if (!sell || rewardBalance < sellFloor) {\\n      // Profits can be disabled for possible simplified and rapid exit\\n      emit ProfitsNotCollected();\\n      return;\\n    }\\n\\n    // sell reward token to FARM\\n    // we can accept 1 as minimum because this is called only by a trusted role\\n\\n    address uliquidator = universalLiquidator();\\n    IERC20(rewardToken).safeApprove(uliquidator, 0);\\n    IERC20(rewardToken).safeApprove(uliquidator, rewardBalance);\\n\\n    ILiquidator(uliquidator).swapTokenOnMultipleDEXes(\\n      rewardBalance,\\n      1,\\n      address(this), // target\\n      liquidationDexes,\\n      liquidationPath\\n    );\\n\\n    uint256 farmAmount = IERC20(farm).balanceOf(address(this));\\n\\n    // Share profit + buyback\\n    notifyProfitAndBuybackInRewardToken(farmAmount, distributionPool);\\n  }\\n\\n  /*\\n  *   Stakes everything the strategy holds into the reward pool\\n  */\\n  function investAllUnderlying() internal onlyNotPausedInvesting {\\n    // this check is needed, because most of the SNX reward pools will revert if\\n    // you try to stake(0).\\n    if(IERC20(underlying).balanceOf(address(this)) > 0) {\\n      IERC20(underlying).approve(address(rewardPool), IERC20(underlying).balanceOf(address(this)));\\n      rewardPool.stake(IERC20(underlying).balanceOf(address(this)));\\n    }\\n  }\\n\\n  /*\\n  *   Withdraws all the asset to the vault\\n  */\\n  function withdrawAllToVault() public restricted {\\n    if (address(rewardPool) != address(0)) {\\n      if (rewardPool.balanceOf(address(this)) > 0) {\\n        rewardPool.exit();\\n      }\\n    }\\n    _liquidateReward();\\n\\n    if (IERC20(underlying).balanceOf(address(this)) > 0) {\\n      IERC20(underlying).safeTransfer(vault, IERC20(underlying).balanceOf(address(this)));\\n    }\\n  }\\n\\n  /*\\n  *   Withdraws all the asset to the vault\\n  */\\n  function withdrawToVault(uint256 amount) public restricted {\\n    // Typically there wouldn't be any amount here\\n    // however, it is possible because of the emergencyExit\\n    if(amount > IERC20(underlying).balanceOf(address(this))){\\n      // While we have the check above, we still using SafeMath below\\n      // for the peace of mind (in case something gets changed in between)\\n      uint256 needToWithdraw = amount.sub(IERC20(underlying).balanceOf(address(this)));\\n      rewardPool.withdraw(Math.min(rewardPool.balanceOf(address(this)), needToWithdraw));\\n    }\\n\\n    IERC20(underlying).safeTransfer(vault, amount);\\n  }\\n\\n  /*\\n  *   Note that we currently do not have a mechanism here to include the\\n  *   amount of reward that is accrued.\\n  */\\n  function investedUnderlyingBalance() external view returns (uint256) {\\n    if (address(rewardPool) == address(0)) {\\n      return IERC20(underlying).balanceOf(address(this));\\n    }\\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\\n    // both are in the units of \\\"underlying\\\"\\n    // The second part is needed because there is the emergency exit mechanism\\n    // which would break the assumption that all the funds are always inside of the reward pool\\n    return rewardPool.balanceOf(address(this)).add(IERC20(underlying).balanceOf(address(this)));\\n  }\\n\\n  /*\\n  *   Governance or Controller can claim coins that are somehow transferred into the contract\\n  *   Note that they cannot come in take away coins that are used and defined in the strategy itself\\n  *   Those are protected by the \\\"unsalvagableTokens\\\". To check, see where those are being flagged.\\n  */\\n  function salvage(address recipient, address token, uint256 amount) external onlyControllerOrGovernance {\\n     // To make sure that governance cannot come in and take away the coins\\n    require(!unsalvagableTokens[token], \\\"token is defined as not salvagable\\\");\\n    IERC20(token).safeTransfer(recipient, amount);\\n  }\\n\\n  /*\\n  *   Get the reward, sell it in exchange for underlying, invest what you got.\\n  *   It's not much, but it's honest work.\\n  *\\n  *   Note that although `onlyNotPausedInvesting` is not added here,\\n  *   calling `investAllUnderlying()` affectively blocks the usage of `doHardWork`\\n  *   when the investing is being paused by governance.\\n  */\\n  function doHardWork() external onlyNotPausedInvesting restricted {\\n    rewardPool.getReward();\\n    _liquidateReward();\\n    investAllUnderlying();\\n  }\\n\\n  /**\\n  * Can completely disable claiming UNI rewards and selling. Good for emergency withdraw in the\\n  * simplest possible way.\\n  */\\n  function setSell(bool s) public onlyGovernance {\\n    sell = s;\\n  }\\n\\n  /**\\n  * Sets the minimum amount of CRV needed to trigger a sale.\\n  */\\n  function setSellFloor(uint256 floor) public onlyGovernance {\\n    sellFloor = floor;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/StrategyBaseUL.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.5.16;\\n\\nimport \\\"./inheritance/RewardTokenProfitNotifier.sol\\\";\\nimport \\\"./interface/IStrategy.sol\\\";\\n\\nimport \\\"./interface/ILiquidator.sol\\\";\\nimport \\\"./interface/ILiquidatorRegistry.sol\\\";\\n\\ncontract StrategyBaseUL is IStrategy, RewardTokenProfitNotifier  {\\n\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  event ProfitsNotCollected(address);\\n  event Liquidating(address, uint256);\\n\\n  address public underlying;\\n  address public vault;\\n  mapping (address => bool) public unsalvagableTokens;\\n  address public universalLiquidatorRegistry;\\n\\n\\n  modifier restricted() {\\n    require(msg.sender == vault || msg.sender == address(controller()) || msg.sender == address(governance()),\\n      \\\"The sender has to be the controller or vault or governance\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    address _storage,\\n    address _underlying,\\n    address _vault,\\n    address _rewardToken,\\n    address _universalLiquidatorRegistry\\n  ) RewardTokenProfitNotifier(_storage, _rewardToken) public {\\n    underlying = _underlying;\\n    vault = _vault;\\n    unsalvagableTokens[_rewardToken] = true;\\n    unsalvagableTokens[_underlying] = true;\\n    universalLiquidatorRegistry = _universalLiquidatorRegistry;\\n  }\\n\\n  function universalLiquidator() public view returns(address) {\\n    return ILiquidatorRegistry(universalLiquidatorRegistry).universalLiquidator();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVault {\\n\\n    function initializeVault(\\n      address _storage,\\n      address _underlying,\\n      uint256 _toInvestNumerator,\\n      uint256 _toInvestDenominator\\n    ) external ;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    // function store() external view returns (address);\\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n    function announceStrategyUpdate(address _strategy) external;\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\n\\n    function deposit(uint256 amountWei) external;\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256 numberOfShares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IRewardDistributionSwitcher.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract IRewardDistributionSwitcher {\\n\\n  function switchingAllowed(address) external returns(bool);\\n  function returnOwnership(address poolAddr) external;\\n  function enableSwitchers(address[] calldata switchers) external;\\n  function setSwithcer(address switcher, bool allowed) external;\\n  function setPoolRewardDistribution(address poolAddr, address newRewardDistributor) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/INoMintRewardPool.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface INoMintRewardPool {\\n    function withdraw(uint) external;\\n    function getReward() external;\\n    function stake(uint) external;\\n    function balanceOf(address) external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n    function exit() external;\\n\\n    function rewardDistribution() external view returns (address);\\n    function lpToken() external view returns(address);\\n    function rewardToken() external view returns(address);\\n\\n    // only owner\\n    function setRewardDistribution(address _rewardDistributor) external;\\n    function transferOwnership(address _owner) external;\\n    function notifyRewardAmount(uint256 _reward) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/RewardTokenProfitNotifier.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\nimport \\\"../interface/IFeeRewardForwarderV5.sol\\\";\\nimport \\\"./Controllable.sol\\\";\\n\\ncontract RewardTokenProfitNotifier is Controllable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public profitSharingNumerator;\\n  uint256 public profitSharingDenominator;\\n  address public rewardToken;\\n\\n  constructor(\\n    address _storage,\\n    address _rewardToken\\n  ) public Controllable(_storage){\\n    rewardToken = _rewardToken;\\n    // persist in the state for immutability of the fee\\n    profitSharingNumerator = 30; //IController(controller()).profitSharingNumerator();\\n    profitSharingDenominator = 100; //IController(controller()).profitSharingDenominator();\\n    require(profitSharingNumerator < profitSharingDenominator, \\\"invalid profit share\\\");\\n  }\\n\\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n  event ProfitAndBuybackLog(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n\\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator).div(profitSharingDenominator);\\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\\n      IERC20(rewardToken).safeApprove(controller(), 0);\\n      IERC20(rewardToken).safeApprove(controller(), feeAmount);\\n\\n      IController(controller()).notifyFee(\\n        rewardToken,\\n        feeAmount\\n      );\\n    } else {\\n      emit ProfitLogInReward(0, 0, block.timestamp);\\n    }\\n  }\\n\\n  function notifyProfitAndBuybackInRewardToken(uint256 _rewardBalance, address pool) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator).div(profitSharingDenominator);\\n      address forwarder = IController(controller()).feeRewardForwarder();\\n      emit ProfitAndBuybackLog(_rewardBalance, feeAmount, block.timestamp);\\n      IERC20(rewardToken).safeApprove(forwarder, 0);\\n      IERC20(rewardToken).safeApprove(forwarder, _rewardBalance);\\n\\n      IFeeRewardForwarderV5(forwarder).notifyFeeAndBuybackAmounts(\\n        feeAmount,\\n        pool,\\n        _rewardBalance.sub(feeAmount)\\n      );\\n    } else {\\n      emit ProfitAndBuybackLog(0, 0, block.timestamp);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStrategy {\\n    \\n    function unsalvagableTokens(address tokens) external view returns (bool);\\n    \\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function vault() external view returns (address);\\n\\n    function withdrawAllToVault() external;\\n    function withdrawToVault(uint256 amount) external;\\n\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\n\\n    // should only be called by controller\\n    function salvage(address recipient, address token, uint256 amount) external;\\n\\n    function doHardWork() external;\\n    function depositArbCheck() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/ILiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.16;\\n\\ninterface ILiquidator {\\n  event Swap(\\n    address indexed buyToken,\\n    address indexed sellToken,\\n    address indexed target,\\n    address initiator,\\n    uint256 amountIn,\\n    uint256 slippage,\\n    uint256 total\\n  );\\n\\n  function swapTokenOnMultipleDEXes(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address target,\\n    bytes32[] calldata dexes,\\n    address[] calldata path\\n  ) external;\\n\\n  function swapTokenOnDEX(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address target,\\n    bytes32 dexName,\\n    address[] calldata path\\n  ) external;\\n\\n  function getAllDexes() external view returns (bytes32[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/ILiquidatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.16;\\n\\ninterface ILiquidatorRegistry {\\n\\n  function universalLiquidator() external view returns(address);\\n\\n  function setUniversalLiquidator(address _ul) external;\\n\\n  function getPath(\\n    bytes32 dex,\\n    address inputToken,\\n    address outputToken\\n  ) external view returns(address[] memory);\\n\\n  function setPath(\\n    bytes32 dex,\\n    address inputToken,\\n    address outputToken,\\n    address[] calldata path\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IController {\\n    // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    // This grey list is only used in Vault.sol, see the code there for reference\\n    function greyList(address _target) external view returns(bool);\\n\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\n    function doHardWork(address _vault) external;\\n    function hasVault(address _vault) external returns(bool);\\n\\n    function salvage(address _token, uint256 amount) external;\\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\\n\\n    function notifyFee(address _underlying, uint256 fee) external;\\n    function profitSharingNumerator() external view returns (uint256);\\n    function profitSharingDenominator() external view returns (uint256);\\n\\n    function feeRewardForwarder() external view returns(address);\\n    function setFeeRewardForwarder(address _value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IFeeRewardForwarderV5.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IFeeRewardForwarderV5 {\\n    function poolNotifyFixedTarget(address _token, uint256 _amount) external;\\n\\n    function notifyFeeAndBuybackAmounts(uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\\n    function profitSharingPool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Controllable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Governable.sol\\\";\\n\\ncontract Controllable is Governable {\\n\\n  constructor(address _storage) Governable(_storage) public {\\n  }\\n\\n  modifier onlyController() {\\n    require(store.isController(msg.sender), \\\"Not a controller\\\");\\n    _;\\n  }\\n\\n  modifier onlyControllerOrGovernance(){\\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\\n      \\\"The caller must be controller or governance\\\");\\n    _;\\n  }\\n\\n  function controller() public view returns (address) {\\n    return store.controller();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Governable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Governable {\\n\\n  Storage public store;\\n\\n  constructor(address _store) public {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  function governance() public view returns (address) {\\n    return store.governance();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() public {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributionPool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Liquidating\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitAndBuybackLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLogInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueInvesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionSwitcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidationDexes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidationPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mTWTRUSTRewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mir\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtwtr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtwtr_ust\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedInvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"contract SNXRewardInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_liquidationPath\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dexes\",\"type\":\"bytes32[]\"}],\"name\":\"setLiquidationPaths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"setSellFloor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"universalLiquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"universalLiquidatorRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ust\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MirrorMainnet_mTWTR_UST","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d197000000000000000000000000b37c79f954e3e1a4accc14a5cca3e46f226038b7000000000000000000000000677ad66025063be55b070685e618a84ff3dd62be","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}