{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.5.16;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n\r\n * checks.\r\n\r\n *\r\n\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n\r\n * error, which is the standard behavior in high level programming languages.\r\n\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n\r\n * operation overflows.\r\n\r\n *\r\n\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n\r\n * class of bugs, so it's recommended to use it always.\r\n\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `+` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Addition cannot overflow.\r\n\r\n     */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     *\r\n\r\n     * _Available since v2.4.0._\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `*` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Multiplication cannot overflow.\r\n\r\n     */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\r\n     * division by zero. The result is rounded towards zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\r\n     * division by zero. The result is rounded towards zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     *\r\n\r\n     * _Available since v2.4.0._\r\n\r\n     */\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        // Solidity only automatically asserts when dividing by 0\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\r\n     * Reverts when dividing by zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\r\n     * Reverts with custom message when dividing by zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     *\r\n\r\n     * _Available since v2.4.0._\r\n\r\n     */\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b != 0, errorMessage);\r\n\r\n        return a % b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n\r\n */\r\n\r\ninterface IERC20 {\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens in existence.\r\n\r\n     */\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n\r\n     */\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\r\n     * zero by default.\r\n\r\n     *\r\n\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n\r\n     * transaction ordering. One possible solution to mitigate this race\r\n\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n\r\n     * desired value afterwards:\r\n\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event.\r\n\r\n     */\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n\r\n     * allowance.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\r\n     * another (`to`).\r\n\r\n     *\r\n\r\n     * Note that `value` may be zero.\r\n\r\n     */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\r\n     * a call to {approve}. `value` is the new allowance.\r\n\r\n     */\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n\r\n * there is an account (an owner) that can be granted exclusive access to\r\n\r\n * specific functions.\r\n\r\n *\r\n\r\n * This module is used through inheritance. It will make available the modifier\r\n\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n\r\n * the owner.\r\n\r\n */\r\n\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor() internal {\r\n\r\n        _owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns true if the caller is the current owner.\r\n\r\n     */\r\n\r\n    function isOwner() public view returns (bool) {\r\n\r\n        return msg.sender == _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\r\n     *\r\n\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\r\n     * thereby removing any functionality that is only available to the owner.\r\n\r\n     */\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     */\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Storage {\r\n\r\n    address public fnxToken = 0xeF9Cd7882c067686691B6fF49e650b43AFBBCC6B;\r\n\r\n    address public fnxCollateral = 0x919a35A4F40c479B3319E3c3A2484893c06fd7de;\r\n\r\n\r\n\r\n    address[] public uniswapLp = [0x722885caB8be10B27F359Fcb225808fe2Af07B16];\r\n\r\n    address[] public uniFnxMine = [0x702164396De92bF0f4a1315c00EFDb5a7ea287eC];\r\n\r\n    mapping (address => bool) public uniswapLpDisable;\r\n\r\n\r\n\r\n    address[] public sushiswapLp = [0xaa500101C73065f755Ba9b902d643705EF2523E3];\r\n\r\n    address   public sushimine = 0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd;\r\n\r\n    uint256[] public sushimineLpId = [86];\r\n\r\n\r\n\r\n\r\n\r\n    mapping (address => bool) public sushiswapLpDisable;\r\n\r\n\r\n\r\n    address public temp1 =  address(0x0);\r\n\r\n    address public temp2 =  address(0x0);\r\n\r\n    address public temp3 =  address(0x0);\r\n\r\n}\r\n\r\n\r\n\r\ninterface ICollateralPool {\r\n\r\n    function getUserInputCollateral(address user,address collateral) external view returns (uint256);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniMinePool {\r\n\r\n    function totalStakedFor(address addr) external view returns (uint256);\r\n\r\n}\r\n\r\n\r\n\r\ninterface ISushiMinePool {\r\n\r\n    function userInfo(uint256 pid,address addr) external view returns (uint256,uint256);\r\n\r\n}\r\n\r\n\r\n\r\ncontract FnxVote is Storage,Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    function fnxTokenBalance(address _user) public view returns (uint256) {\r\n\r\n        return IERC20(fnxToken).balanceOf(_user);\r\n\r\n    }\r\n\r\n\r\n\r\n    function fnxBalanceInUniswap(address _user) public view returns (uint256) {\r\n\r\n        uint256 total = 0;\r\n\r\n        for(uint256 i=0;i<uniswapLp.length;i++){\r\n\r\n            if(uniswapLpDisable[uniswapLp[i]]) {\r\n\r\n                continue;\r\n\r\n            }\r\n\r\n\r\n\r\n            uint256 LpFnxBalance = IERC20(fnxToken).balanceOf(uniswapLp[i]);\r\n\r\n            if (LpFnxBalance == 0) {\r\n\r\n                continue;\r\n\r\n            }\r\n\r\n            if(IERC20(uniswapLp[i]).totalSupply()==0) {\r\n\r\n                continue;\r\n\r\n            }\r\n\r\n\r\n\r\n            uint256 fnxPerUni = LpFnxBalance.mul(1e12).div(IERC20(uniswapLp[i]).totalSupply());\r\n\r\n\r\n\r\n            uint256 userUnimineLpBalance = IUniMinePool(uniFnxMine[i]).totalStakedFor(_user);\r\n\r\n            uint256 userLpBalance = IERC20(uniswapLp[i]).balanceOf(_user);\r\n\r\n\r\n\r\n            total = total.add((userLpBalance.add(userUnimineLpBalance)).mul(fnxPerUni).div(1e12));\r\n\r\n        }\r\n\r\n\r\n\r\n        return total;\r\n\r\n    }\r\n\r\n\r\n\r\n    function fnxBalanceInSushiSwap(address _user) public view returns (uint256) {\r\n\r\n        uint256 total = 0;\r\n\r\n        for(uint256 i=0;i<sushiswapLp.length;i++){\r\n\r\n\r\n\r\n            if(sushiswapLpDisable[sushiswapLp[i]]) {\r\n\r\n                continue;\r\n\r\n            }\r\n\r\n\r\n\r\n            uint256 LpFnxBalance = IERC20(fnxToken).balanceOf(sushiswapLp[i]);\r\n\r\n            if (LpFnxBalance == 0) {\r\n\r\n                continue;\r\n\r\n            }\r\n\r\n            if(IERC20(sushiswapLp[i]).totalSupply()==0) {\r\n\r\n                continue;\r\n\r\n            }\r\n\r\n\r\n\r\n            uint256 fnxPerUni = LpFnxBalance.mul(1e12).div(IERC20(sushiswapLp[i]).totalSupply());\r\n\r\n            if(sushimine!=address(0)) {\r\n\r\n                uint256 userUnimineLpBalance = 0;\r\n\r\n\r\n\r\n                (userUnimineLpBalance,) = ISushiMinePool(sushimine).userInfo(sushimineLpId[i],_user);\r\n\r\n\r\n\r\n                uint256 userLpBalance = IERC20(sushiswapLp[i]).balanceOf(_user);\r\n\r\n                total = total.add((userLpBalance.add(userUnimineLpBalance)).mul(fnxPerUni).div(1e12));\r\n\r\n            } else {\r\n\r\n                uint256 userLpBalance = IERC20(sushiswapLp[i]).balanceOf(_user);\r\n\r\n                total = total.add(userLpBalance.mul(fnxPerUni).div(1e12));\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        return total;\r\n\r\n    }\r\n\r\n\r\n\r\n    function fnxCollateralBalance(address _user) public view returns (uint256) {\r\n\r\n        return ICollateralPool(fnxCollateral).getUserInputCollateral(_user,fnxToken);\r\n\r\n    }\r\n\r\n\r\n\r\n    function fnxBalanceAll(address _user) public view returns (uint256) {\r\n\r\n        uint256 tokenNum = fnxTokenBalance(_user);\r\n\r\n        uint256 uniTokenNum = fnxBalanceInUniswap(_user);\r\n\r\n        uint256 colTokenNum = fnxCollateralBalance(_user);\r\n\r\n        uint256 sushiTokenNum = fnxBalanceInSushiSwap(_user);\r\n\r\n        uint256 total = tokenNum.add(uniTokenNum).add(colTokenNum).add(sushiTokenNum);\r\n\r\n\r\n\r\n        return total;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setFnx(address _fnxToken) public onlyOwner{\r\n\r\n        fnxToken = _fnxToken;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function setOptionCol(address _collateral)  public onlyOwner{\r\n\r\n        fnxCollateral = _collateral;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setUniswap(address _uniswap,address _uniMine) public onlyOwner{\r\n\r\n        uniswapLp.push(_uniswap);\r\n\r\n        uniFnxMine.push(_uniMine);\r\n\r\n    }\r\n\r\n\r\n\r\n    function disableUniswap(address _uniswap) public onlyOwner{\r\n\r\n        uniswapLpDisable[_uniswap] = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSushiSwap(address _sushiswap,uint256 _pid) public onlyOwner{\r\n\r\n        sushiswapLp.push(_sushiswap);\r\n\r\n        sushimineLpId.push(_pid);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSushiMine(address _sushimine) public onlyOwner{\r\n\r\n        sushimine = _sushimine;\r\n\r\n    }\r\n\r\n\r\n\r\n    function removeAll() public onlyOwner {\r\n\r\n        for(uint256 i=0;i<uniswapLp.length;i++){\r\n\r\n            delete uniswapLpDisable[sushiswapLp[i]];\r\n\r\n        }\r\n\r\n\r\n\r\n        for(uint256 i=0;i<uniswapLp.length;i++){\r\n\r\n            delete sushiswapLpDisable[sushiswapLp[i]];\r\n\r\n        }\r\n\r\n\r\n\r\n        sushiswapLp.length = 0;\r\n\r\n        sushimineLpId.length = 0;\r\n\r\n\r\n\r\n        uniswapLp.length = 0;\r\n\r\n        uniFnxMine.length = 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    function disableSushiSwap(address _sushiswap)  public onlyOwner{\r\n\r\n        sushiswapLpDisable[_sushiswap] = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getVersion() public pure returns (uint256)  {\r\n\r\n        return 1;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sushiswap\",\"type\":\"address\"}],\"name\":\"disableSushiSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"}],\"name\":\"disableUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fnxBalanceAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fnxBalanceInSushiSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fnxBalanceInUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fnxCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fnxCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fnxToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fnxTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fnxToken\",\"type\":\"address\"}],\"name\":\"setFnx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"setOptionCol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sushimine\",\"type\":\"address\"}],\"name\":\"setSushiMine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sushiswap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setSushiSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniMine\",\"type\":\"address\"}],\"name\":\"setUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sushimine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sushimineLpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sushiswapLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sushiswapLpDisable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"temp1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"temp2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"temp3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniFnxMine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapLpDisable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FnxVote","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e6c1f55bd151fa0a6d8c8006fd396615b708a310de7ab69107c307f61fd958aa"}]}