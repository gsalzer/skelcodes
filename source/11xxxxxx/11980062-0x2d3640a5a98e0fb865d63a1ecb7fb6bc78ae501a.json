{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/Config.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Governable.sol\\\";\\n\\ncontract Config is Governable {\\n\\n    event ConfigSet(bytes32 config, uint256 value);\\n\\n    mapping (bytes32 => uint256) private _config;\\n\\n    function initialize() external initializer {\\n        super.initialize(msg.sender);\\n         setConfig(\\\"PROVIDER_MINIMUM_ANKR_STAKING\\\", 100000 ether);\\n         setConfig(\\\"PROVIDER_MINIMUM_ETH_STAKING\\\", 2 ether);\\n         setConfig(\\\"REQUESTER_MINIMUM_POOL_STAKING\\\", 500 finney);\\n         setConfig(\\\"EXIT_BLOCKS\\\", 24);\\n    }\\n\\n    function setConfig(bytes32 config, uint256 value) public governance {\\n        _config[config] = value;\\n    }\\n\\n    function getConfig(bytes32 config) public view returns(uint256) {\\n        return _config[config];\\n    }\\n\\n    uint256[50] private __gap;\\n}\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\ncontract Governable is Initializable {\\n    address public governor;\\n\\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\\n\\n    /**\\n     * @dev Contract initializer.\\n     * called once by the factory at time of deployment\\n     */\\n    function initialize(address governor_) virtual public initializer {\\n        governor = governor_;\\n        emit GovernorshipTransferred(address(0), governor);\\n    }\\n\\n    modifier governance() {\\n        require(msg.sender == governor);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current governor to relinquish control of the contract.\\n     * @notice Renouncing to governorship will leave the contract without an governor.\\n     * It will not be possible to call the functions with the `governance.js`\\n     * modifier anymore.\\n     */\\n    function renounceGovernorship() public governance {\\n        emit GovernorshipTransferred(governor, address(0));\\n        governor = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\\n     * @param newGovernor The address to transfer governorship to.\\n     */\\n    function transferGovernorship(address newGovernor) public governance {\\n        _transferGovernorship(newGovernor);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newGovernor.\\n     * @param newGovernor The address to transfer governorship to.\\n     */\\n    function _transferGovernorship(address newGovernor) internal {\\n        require(newGovernor != address(0));\\n        emit GovernorshipTransferred(governor, newGovernor);\\n        governor = newGovernor;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/lib/Configurable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ncontract Configurable {\\n    mapping (bytes32 => uint) internal config;\\n\\n    mapping (bytes32 => string) internal configString;\\n\\n    mapping (bytes32 => address) internal configAddress;\\n\\n    function getConfig(bytes32 key) public view returns (uint) {\\n        return config[key];\\n    }\\n    function getConfig(bytes32 key, uint index) public view returns (uint) {\\n        return config[bytes32(uint(key) ^ index)];\\n    }\\n    function getConfig(bytes32 key, address addr) public view returns (uint) {\\n        return config[bytes32(uint(key) ^ uint(addr))];\\n    }\\n\\n    function _setConfig(bytes32 key, uint value) internal {\\n        if(config[key] != value)\\n            config[key] = value;\\n    }\\n    function _setConfig(bytes32 key, uint index, uint value) internal {\\n        _setConfig(bytes32(uint(key) ^ index), value);\\n    }\\n    function _setConfig(bytes32 key, address addr, uint value) internal {\\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\\n    }\\n\\n    function setConfig(bytes32 key, uint value) internal {\\n        _setConfig(key, value);\\n    }\\n    function setConfig(bytes32 key, uint index, uint value) internal {\\n        _setConfig(bytes32(uint(key) ^ index), value);\\n    }\\n    function setConfig(bytes32 key, address addr, uint value) internal {\\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\\n    }\\n    function getConfigString(bytes32 key) public view returns (string memory) {\\n        return configString[key];\\n    }\\n    function getConfigString(bytes32 key, uint index) public view returns (string memory) {\\n        return configString[bytes32(uint(key) ^ index)];\\n    }\\n    function setConfigString(bytes32 key, string memory value) internal {\\n        configString[key] = value;\\n    }\\n    function setConfigString(bytes32 key, uint index, string memory value) internal {\\n        setConfigString(bytes32(uint(key) ^ index), value);\\n    }\\n\\n    function getConfigAddress(bytes32 key) public view returns (address) {\\n        return configAddress[key];\\n    }\\n\\n    function getConfigAddress(bytes32 key, uint index) public view returns (address) {\\n        return configAddress[bytes32(uint(key) ^ index)];\\n    }\\n\\n    function setConfigAddress(bytes32 key, address addr) internal {\\n        configAddress[key] = addr;\\n    }\\n\\n    function setConfigAddress(bytes32 key, uint index, address addr) internal {\\n        setConfigAddress(bytes32(uint(key) ^ index), addr);\\n    }\\n}\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/lib/Lockable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\nabstract contract Lockable {\\n    mapping(address => bool) private _locks;\\n\\n    modifier unlocked(address addr) {\\n        require(!_locks[addr], \\\"Reentrancy protection\\\");\\n        _locks[addr] = true;\\n        _;\\n        _locks[addr] = false;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/lib/Pausable.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\ncontract Pausable is  OwnableUpgradeSafe {\\n    mapping (bytes32 => bool) internal _paused;\\n\\n    modifier whenNotPaused(bytes32 action) {\\n        require(!_paused[action], \\\"This action currently paused\\\");\\n        _;\\n    }\\n\\n    function togglePause(bytes32 action) public onlyOwner {\\n        _paused[action] = !_paused[action];\\n    }\\n\\n    function isPaused(bytes32 action) public view returns(bool) {\\n        return _paused[action];\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/lib/interfaces/IAETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAETH is IERC20 {\\n    function burn(uint256 amount) external;\\n\\n    function updateMicroPoolContract(address microPoolContract) external;\\n\\n    function ratio() external returns (uint256);\\n\\n    function mintFrozen(address account, uint256 amount) external;\\n\\n    function mint(address account, uint256 amount) external returns(uint256);\\n\\n    function mintPool() payable external;\\n\\n    function fundPool(uint256 poolIndex, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/lib/interfaces/IConfig.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ninterface IConfig {\\n    function getConfig(bytes32 config) external view returns (uint256);\\n\\n    function setConfig(bytes32 config, uint256 value) external;\\n}\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/lib/interfaces/IMarketPlace.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ninterface IMarketPlace {\\n    function ethUsdRate() external returns (uint256);\\n\\n    function ankrEthRate() external returns (uint256);\\n\\n    function burnAeth(uint256 etherAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/lib/interfaces/IStaking.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ninterface IStaking {\\n    function compensateLoss(address provider, uint256 ethAmount) external returns (bool, uint256, uint256);\\n\\n    function freeze(address user, uint256 amount) external returns (bool);\\n\\n    function unfreeze(address user, uint256 amount) external returns (bool);\\n\\n    function frozenStakesOf(address staker) external view returns (uint256);\\n\\n    function stakesOf(address staker) external view returns (uint256);\\n\\n    function frozenDepositsOf(address staker) external view returns (uint256);\\n\\n    function depositsOf(address staker) external view returns (uint256);\\n\\n    function deposit() external;\\n\\n    function deposit(address user) external;\\n}\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/upgrades/AnkrDeposit_R1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"../lib/Lockable.sol\\\";\\nimport \\\"../lib/interfaces/IAETH.sol\\\";\\nimport \\\"../lib/interfaces/IMarketPlace.sol\\\";\\nimport \\\"../lib/Configurable.sol\\\";\\n\\ncontract AnkrDeposit_R1 is OwnableUpgradeSafe, Lockable, Configurable {\\n    using SafeMath for uint256;\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 value\\n    );\\n\\n    // if ends at value is zero,\\n    event Freeze(\\n        address indexed user,\\n        uint256 value,\\n        uint256 endsAt\\n    );\\n\\n    event Unfreeze(\\n        address indexed user,\\n        uint256 value\\n    );\\n\\n    event Withdraw(\\n        address indexed user,\\n        uint256 value\\n    );\\n\\n    event Compensate(address indexed provider, uint256 ankrAmount, uint256 etherAmount);\\n\\n    IAETH private _AETHContract;\\n\\n    IMarketPlace _marketPlaceContract;\\n\\n    IERC20 private _ankrContract;\\n\\n    address private _globalPoolContract;\\n\\n    address _governanceContract;\\n\\n    address _operator;\\n\\n    mapping (address => uint256[]) public _userLocks;\\n\\n    bytes32 constant _deposit_ = \\\"AnkrDeposit#Deposit\\\";\\n\\n    bytes32 constant _freeze_ = \\\"AnkrDeposit#Freeze\\\";\\n    bytes32 constant _unfreeze_ = \\\"AnkrDeposit#Unfreeze\\\";\\n    bytes32 constant _lockTotal_ = \\\"AnkrDeposit#LockTotal\\\";\\n    bytes32 constant _lockEndsAt_ = \\\"AnkrDeposit#LockEndsAt\\\";\\n    bytes32 constant _lockAmount_ = \\\"AnkrDeposit#LockAmount\\\";\\n    bytes32 constant _lockID_ = \\\"AnkrDeposit#LockID\\\";\\n\\n    bytes32 constant _allowed_ = \\\"AnkrDeposit#Allowed\\\";\\n\\n\\n    function deposit_init(address ankrContract, address globalPoolContract, address aethContract) internal initializer {\\n        OwnableUpgradeSafe.__Ownable_init();\\n\\n        _ankrContract = IERC20(ankrContract);\\n        _globalPoolContract = globalPoolContract;\\n        _AETHContract = IAETH(aethContract);\\n        allowAddressForFunction(globalPoolContract, _unfreeze_);\\n        allowAddressForFunction(globalPoolContract, _freeze_);\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == owner() || msg.sender == _operator, \\\"Ankr Deposit#onlyOperator: not allowed\\\");\\n        _;\\n    }\\n\\n    modifier addressAllowed(address addr, bytes32 topic) {\\n        require(getConfig(_allowed_ ^ topic, addr) > 0, \\\"Ankr Deposit#addressAllowed: You are not allowed to run this function\\\");\\n        _;\\n    }\\n\\n    function deposit() public unlocked(msg.sender) returns (uint256) {\\n        return _claimAndDeposit(msg.sender);\\n    }\\n\\n    function deposit(address user) public unlocked(user) returns (uint256) {\\n        return _claimAndDeposit(user);\\n    }\\n    /*\\n        This function used to deposit ankr with transferFrom\\n    */\\n    function _claimAndDeposit(address user) private returns (uint256) {\\n        address ths = address(this);\\n        uint256 allowance = _ankrContract.allowance(user, ths);\\n\\n        if (allowance == 0) {\\n            return 0;\\n        }\\n\\n        _ankrContract.transferFrom(user, ths, allowance);\\n\\n        setConfig(_deposit_, user, depositsOf(user).add(allowance));\\n\\n        cleanUserLocks(user);\\n\\n        emit Deposit(user, allowance);\\n\\n        return allowance;\\n    }\\n\\n    function withdraw(uint256 amount) public unlocked(msg.sender) returns (bool) {\\n        address sender = msg.sender;\\n        uint256 available = availableDepositsOf(sender);\\n\\n        require(available >= amount, \\\"Ankr Deposit#withdraw: You dont have available deposit balance\\\");\\n\\n        setConfig(_deposit_, sender, depositsOf(sender).sub(amount));\\n\\n        _transferToken(sender, amount);\\n\\n        cleanUserLocks(sender);\\n\\n        emit Withdraw(sender, amount);\\n\\n        return true;\\n    }\\n\\n    function _unfreeze(address addr, uint256 amount)\\n    internal\\n    returns (bool)\\n    {\\n        setConfig(_freeze_, addr, _frozenDeposits(addr).sub(amount, \\\"Ankr Deposit#_unfreeze: Insufficient funds\\\"));\\n        cleanUserLocks(addr);\\n        emit Unfreeze(addr, amount);\\n        return true;\\n    }\\n\\n    function _freeze(address addr, uint256 amount)\\n    internal\\n    returns (bool)\\n    {\\n        _claimAndDeposit(addr);\\n\\n        require(depositsOf(addr) >= amount, \\\"Ankr Deposit#_freeze: You dont have enough amount to freeze ankr\\\");\\n        setConfig(_freeze_, addr, _frozenDeposits(addr).add(amount));\\n\\n        cleanUserLocks(addr);\\n\\n        emit Freeze(addr, amount, 0);\\n        return true;\\n    }\\n\\n    function unfreeze(address addr, uint256 amount)\\n    public\\n    addressAllowed(_globalPoolContract, _unfreeze_)\\n    returns (bool)\\n    {\\n        return _unfreeze(addr, amount);\\n    }\\n\\n    function freeze(address addr, uint256 amount)\\n    public\\n    addressAllowed(_globalPoolContract, _freeze_)\\n    returns (bool)\\n    {\\n        return _freeze(addr, amount);\\n    }\\n\\n    function availableDepositsOf(address user) public view returns (uint256) {\\n        return depositsOf(user).sub(frozenDepositsOf(user));\\n    }\\n\\n    function depositsOf(address user) public view returns (uint256) {\\n        return getConfig(_deposit_, user);\\n    }\\n\\n    function frozenDepositsOf(address user) public view returns (uint256) {\\n        return _frozenDeposits(user).add(lockedDepositsOf(user));\\n    }\\n\\n    function _frozenDeposits(address user) internal view returns(uint256) {\\n        return getConfig(_freeze_, user);\\n    }\\n\\n    function lockedDepositsOf(address user) public view returns(uint256) {\\n        return getConfig(_lockTotal_, user).sub(availableAmountForUnlock(user));\\n    }\\n\\n    function _transferToken(address to, uint256 amount) internal {\\n        require(_ankrContract.transfer(to, amount), \\\"Failed token transfer\\\");\\n    }\\n\\n    function allowAddressForFunction(address addr, bytes32 topic) public onlyOperator {\\n        setConfig(_allowed_ ^ topic, addr, 1);\\n    }\\n\\n    function _addNewLockToUser(address user, uint256 amount, uint256 endsAt, uint256 lockId) internal {\\n        uint256 deposits = depositsOf(user);\\n        uint256 lockedDeposits = lockedDepositsOf(user);\\n        if (amount <= lockedDeposits) {\\n            return;\\n        }\\n        amount = amount.sub(lockedDeposits);\\n        require(amount <= deposits, \\\"Ankr Deposit#_addNewLockToUser: Insufficient funds\\\");\\n\\n        require(getConfig(_lockEndsAt_, lockId) == 0, \\\"Ankr Deposit#_addNewLockToUser: Cannot set same lock id\\\");\\n        if (amount == 0) return;\\n        // set ends at property for lock\\n        setConfig(_lockEndsAt_, lockId, endsAt);\\n        // set amount property for lock\\n        setConfig(_lockAmount_, lockId, amount);\\n        setConfig(_lockTotal_, user, getConfig(_lockTotal_, user).add(amount));\\n\\n        // set lock id\\n        _userLocks[user].push(lockId);\\n    }\\n\\n    function cleanUserLocks(address user) public {\\n        uint256 userLockCount = _userLocks[user].length;\\n        uint256 currentTs = block.timestamp;\\n\\n        if (userLockCount == 0) return;\\n\\n        for (uint256 i = 0; i < userLockCount; i++) {\\n            uint256 lockId = _userLocks[user][i];\\n            if (getConfig(_lockEndsAt_, lockId) > currentTs && getConfig(_lockAmount_, lockId) != 0) {\\n                continue;\\n            }\\n\\n            // set total lock amount for user\\n            setConfig(_lockTotal_, user, getConfig(_lockTotal_, user).sub(getConfig(_lockAmount_, lockId)));\\n            // remove lock from array\\n            _userLocks[user][i] = _userLocks[user][userLockCount.sub(1)];\\n            _userLocks[user].pop();\\n            //\\n            userLockCount--;\\n            i--;\\n        }\\n    }\\n\\n    function availableAmountForUnlock(address user) public view returns (uint256) {\\n        uint256 userLockCount = _userLocks[user].length;\\n        uint256 amount = 0;\\n        if (userLockCount == 0) {\\n            return amount;\\n        }\\n\\n        for (uint256 i = 0; i < userLockCount; i++) {\\n            uint256 lockId = _userLocks[user][i];\\n            if (getConfig(_lockEndsAt_, lockId) <= now) {\\n                amount += getConfig(_lockAmount_, lockId);\\n            }\\n        }\\n\\n        return amount;\\n    }\\n\\n    function changeOperator(address operator) public onlyOwner {\\n        _operator = operator;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ubuntu/stkr/mainnet/stkr-smartcontract/contracts/upgrades/Governance_R1.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"../lib/Pausable.sol\\\";\\nimport \\\"../lib/interfaces/IConfig.sol\\\";\\nimport \\\"../lib/interfaces/IStaking.sol\\\";\\nimport \\\"../lib/Configurable.sol\\\";\\nimport \\\"../Config.sol\\\";\\nimport \\\"./AnkrDeposit_R1.sol\\\";\\n\\ncontract Governance_R1 is Pausable, AnkrDeposit_R1 {\\n    using SafeMath for uint256;\\n\\n    event ConfigurationChanged(bytes32 indexed key, uint256 oldValue, uint256 newValue);\\n    event Vote(address indexed holder, bytes32 indexed ID, bytes32 vote, uint256 votes);\\n    event Propose(address indexed proposer, bytes32 proposeID, string topic, string content, uint span);\\n    event ProposalFinished(bytes32 indexed proposeID, bool result, uint256 yes, uint256 no);\\n\\n    IConfig private configContract;\\n    IStaking private depositContract;\\n\\n    bytes32 internal constant _spanLo_ = \\\"Gov#spanLo\\\";\\n    bytes32 internal constant _spanHi_ = \\\"Gov#spanHi\\\";\\n    bytes32 internal constant _proposalMinimumThreshold_ = \\\"Gov#minimumDepositThreshold\\\";\\n\\n    bytes32 internal constant _startBlock_ = \\\"Gov#startBlock\\\";\\n\\n    bytes32 internal constant _proposeTopic_ = \\\"Gov#proposeTopic\\\";\\n    bytes32 internal constant _proposeContent_ = \\\"Gov#proposeContent\\\";\\n\\n    bytes32 internal constant _proposeEndAt_ = \\\"Gov#ProposeEndAt\\\";\\n    bytes32 internal constant _proposeStartAt_ = \\\"Gov#ProposeStartAt\\\";\\n    bytes32 internal constant _proposeTimelock_ = \\\"Gov#ProposeTimelock\\\";\\n\\n    bytes32 internal constant _proposeCountLimit_ = \\\"Gov#ProposeCountLimit\\\";\\n\\n    bytes32 internal constant _proposerLastProposeAt_ = \\\"Gov#ProposerLastProposeAt\\\";\\n    bytes32 internal constant _proposerProposeCountInMonth_ = \\\"Gov#ProposeCountInMonth\\\";\\n\\n    bytes32 internal constant _proposer_ = \\\"Gov#proposer\\\";\\n    bytes32 internal constant _proposerHasActiveProposal_ = \\\"Gov#hasActiveProposal\\\";\\n\\n    bytes32 internal constant _totalProposes_ = \\\"Gov#proposer\\\";\\n    bytes32 internal constant _minimumVoteAcceptance_ = \\\"Gov#minimumVoteAcceptance\\\";\\n\\n    bytes32 internal constant _proposeID_ = \\\"Gov#proposeID\\\";\\n    bytes32 internal constant _proposeStatus_ = \\\"Gov#proposeStatus\\\";\\n\\n    bytes32 internal constant _votes_ = \\\"Gov#votes\\\";\\n    bytes32 internal constant _voteCount_ = \\\"Gov#voteCount\\\";\\n\\n    uint256 internal constant PROPOSE_STATUS_WAITING = 0;\\n    uint256 internal constant PROPOSE_STATUS_VOTING = 1;\\n    uint256 internal constant PROPOSE_STATUS_FAIL = 2;\\n    uint256 internal constant PROPOSE_STATUS_PASS = 3;\\n    uint256 internal constant PROPOSE_STATUS_CANCELED = 4;\\n\\n    uint256 internal constant MONTH = 2592000;\\n\\n    bytes32 internal constant VOTE_YES = \\\"VOTE_YES\\\";\\n    bytes32 internal constant VOTE_NO = \\\"VOTE_NO\\\";\\n    bytes32 internal constant VOTE_CANCEL = \\\"VOTE_CANCEL\\\";\\n\\n    uint256 internal constant DIVISOR = 1 ether;\\n\\n    function initialize(address ankrContract, address globalPoolContract, address aethContract) public initializer {\\n        __Ownable_init();\\n        deposit_init(ankrContract, globalPoolContract, aethContract);\\n\\n        // minimum ankrs deposited needed for voting\\n        changeConfiguration(_proposalMinimumThreshold_, 5000000 ether);\\n\\n        changeConfiguration(\\\"PROVIDER_MINIMUM_ANKR_STAKING\\\", 100000 ether);\\n        changeConfiguration(\\\"PROVIDER_MINIMUM_ETH_TOP_UP\\\", 0.1 ether);\\n        changeConfiguration(\\\"PROVIDER_MINIMUM_ETH_STAKING\\\", 2 ether);\\n        changeConfiguration(\\\"REQUESTER_MINIMUM_POOL_STAKING\\\", 500 finney);\\n        changeConfiguration(\\\"EXIT_BLOCKS\\\", 24);\\n\\n        changeConfiguration(_proposeCountLimit_, 2);\\n\\n        // 2 days\\n        changeConfiguration(_proposeTimelock_, 60 * 60 * 24 * 2);\\n\\n        changeConfiguration(_spanLo_, 24 * 60 * 60 * 3);\\n        // 3 days\\n        changeConfiguration(_spanHi_, 24 * 60 * 60 * 7);\\n        // 7 days\\n    }\\n\\n    function propose(uint256 _timeSpan, string memory _topic, string memory _content) public {\\n        require(_timeSpan >= getConfig(_spanLo_), \\\"Gov#propose: Timespan lower than limit\\\");\\n        require(_timeSpan <= getConfig(_spanHi_), \\\"Gov#propose: Timespan greater than limit\\\");\\n\\n        uint256 proposalMinimum = getConfig(_proposalMinimumThreshold_);\\n        address sender = msg.sender;\\n        uint256 senderInt = uint(sender);\\n\\n        require(getConfig(_proposerHasActiveProposal_, sender) == 0, \\\"Gov#propose: You have an active proposal\\\");\\n\\n        setConfig(_proposerHasActiveProposal_, sender, 1);\\n\\n        deposit();\\n        require(depositsOf(sender) >= proposalMinimum, \\\"Gov#propose: Not enough balance\\\");\\n\\n        // proposer can create 2 proposal in a month\\n        uint256 lastProposeAt = getConfig(_proposerLastProposeAt_, senderInt);\\n        if (now.sub(lastProposeAt) < MONTH) {\\n            // get new count in this month\\n            uint256 proposeCountInMonth = getConfig(_proposerProposeCountInMonth_, senderInt).add(1);\\n            require(proposeCountInMonth <= getConfig(_proposeCountLimit_), \\\"Gov#propose: Cannot create more proposals this month\\\");\\n            setConfig(_proposerProposeCountInMonth_, senderInt, proposeCountInMonth);\\n        }\\n        else {\\n            setConfig(_proposerProposeCountInMonth_, senderInt, 1);\\n        }\\n        // set last propose at for proposer\\n        setConfig(_proposerLastProposeAt_, senderInt, now);\\n\\n        uint256 totalProposes = getConfig(_totalProposes_);\\n        bytes32 _proposeID = bytes32(senderInt ^ totalProposes ^ block.number);\\n        uint256 idInteger = uint(_proposeID);\\n\\n        setConfig(_totalProposes_, totalProposes.add(1));\\n\\n        // set started block\\n        setConfig(_startBlock_, idInteger, block.number);\\n        // set sender\\n        setConfigAddress(_proposer_, idInteger, sender);\\n        // set\\n        setConfigString(_proposeTopic_, idInteger, _topic);\\n        setConfigString(_proposeContent_, idInteger, _content);\\n\\n        // proposal will start after #timelock# days\\n        uint256 endsAt = _timeSpan.add(getConfig(_proposeTimelock_)).add(now);\\n\\n        setConfig(_proposeEndAt_, idInteger, endsAt);\\n        setConfig(_proposeStatus_, idInteger, PROPOSE_STATUS_WAITING);\\n\\n        setConfig(_proposeStartAt_, idInteger, now);\\n\\n        // add new lock to user\\n        _addNewLockToUser(sender, proposalMinimum, endsAt, senderInt ^ idInteger);\\n\\n        // set proposal status (pending)\\n        emit Propose(sender, _proposeID, _topic, _content, _timeSpan);\\n        __vote(_proposeID, VOTE_YES, false);\\n    }\\n\\n    function vote(bytes32 _ID, bytes32 _vote) public {\\n        deposit();\\n        uint256 ID = uint256(_ID);\\n        uint256 status = getConfig(_proposeStatus_, ID);\\n        uint256 startAt = getConfig(_proposeStartAt_, ID);\\n        // if propose status is waiting and enough time passed, change status\\n        if (status == PROPOSE_STATUS_WAITING && now.sub(startAt) >= getConfig(_proposeTimelock_)) {\\n            setConfig(_proposeStatus_, ID, PROPOSE_STATUS_VOTING);\\n            status = PROPOSE_STATUS_VOTING;\\n        }\\n        require(status == PROPOSE_STATUS_VOTING, \\\"Gov#__vote: Propose status is not VOTING\\\");\\n        require(getConfigAddress(_proposer_, ID) != msg.sender, \\\"Gov#__vote: Proposers cannot vote their own proposals\\\") ;\\n\\n        __vote(_ID, _vote, true);\\n    }\\n\\n    string public go;\\n\\n    function __vote(bytes32 _ID, bytes32 _vote, bool _lockTokens) internal {\\n\\n        uint256 ID = uint256(_ID);\\n        address _holder = msg.sender;\\n\\n        uint256 _holderID = uint(_holder) ^ uint(ID);\\n        uint256 endsAt = getConfig(_proposeEndAt_, ID);\\n\\n        if (now < endsAt) {\\n            // previous vote type\\n            bytes32 voted = bytes32(getConfig(_votes_, _holderID));\\n            require(voted == 0x0 || _vote == VOTE_CANCEL, \\\"Gov#__vote: You already voted to this proposal\\\");\\n            // previous vote count\\n            uint256 voteCount = getConfig(_voteCount_, _holderID);\\n\\n            uint256 ID_voted = uint256(_ID ^ voted);\\n            // if this is a cancelling operation, set vote count to 0 for user and remove votes\\n            if ((voted == VOTE_YES || voted == VOTE_NO) && _vote == VOTE_CANCEL) {\\n                setConfig(_votes_, ID_voted, getConfig(_votes_, ID_voted).sub(voteCount));\\n                setConfig(_voteCount_, _holderID, 0);\\n\\n                setConfig(_votes_, _holderID, uint256(_vote));\\n                emit Vote(_holder, _ID, _vote, 0);\\n                return;\\n            }\\n            else if (_vote == VOTE_YES || _vote == VOTE_NO) {\\n                uint256 ID_vote = uint256(_ID ^ _vote);\\n                // get total stakes from deposit contract\\n                uint256 staked = depositsOf(_holder);\\n\\n                // add new lock to user\\n                if (_lockTokens) {\\n                    _addNewLockToUser(_holder, staked, endsAt, _holderID);\\n                }\\n\\n                setConfig(_votes_, ID_vote, getConfig(_votes_, ID_vote).add(staked.div(DIVISOR)));\\n                setConfig(_votes_, _holderID, uint256(_vote));\\n                emit Vote(_holder, _ID, _vote, staked);\\n            }\\n        }\\n    }\\n\\n    //0xc7bc95c2\\n    function getVotes(bytes32 _ID, bytes32 _vote) public view returns (uint256) {\\n        return getConfig(_votes_, uint256(_ID ^ _vote));\\n    }\\n\\n    function finishProposal(bytes32 _ID) public {\\n        uint256 ID = uint256(_ID);\\n        require(getConfig(_proposeEndAt_, ID) <= now, \\\"Gov#finishProposal: There is still time for proposal\\\");\\n        uint256 status = getConfig(_proposeStatus_, ID);\\n        require(status == PROPOSE_STATUS_VOTING || status == PROPOSE_STATUS_WAITING, \\\"Gov#finishProposal: You cannot finish proposals that already finished\\\");\\n\\n        _finishProposal(_ID);\\n    }\\n\\n    function _finishProposal(bytes32 _ID) internal returns (bool result) {\\n        uint256 ID = uint256(_ID);\\n        uint256 yes = 0;\\n        uint256 no = 0;\\n\\n        (result, yes, no,,,,,) = proposal(_ID);\\n\\n        setConfig(_proposeStatus_, ID, result ? PROPOSE_STATUS_PASS : PROPOSE_STATUS_FAIL);\\n\\n        setConfig(_proposerHasActiveProposal_, getConfigAddress(_proposer_, ID), 0);\\n\\n        emit ProposalFinished(_ID, result, yes, no);\\n    }\\n\\n    function proposal(bytes32 _ID) public view returns (\\n        bool result,\\n        uint256 yes,\\n        uint256 no,\\n        string memory topic,\\n        string memory content,\\n        uint256 status,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) {\\n        uint256 idInteger = uint(_ID);\\n        yes = getConfig(_votes_, uint256(_ID ^ VOTE_YES));\\n        no = getConfig(_votes_, uint256(_ID ^ VOTE_NO));\\n\\n        result = yes > no && yes.add(no) > getConfig(_minimumVoteAcceptance_);\\n\\n        topic = getConfigString(_proposeTopic_, idInteger);\\n        content = getConfigString(_proposeContent_, idInteger);\\n\\n        endTime = getConfig(_proposeEndAt_, idInteger);\\n        startTime = getConfig(_proposeStartAt_, idInteger);\\n\\n        status = getConfig(_proposeStatus_, idInteger);\\n        if (status == PROPOSE_STATUS_WAITING && now.sub(getConfig(_proposeStartAt_, idInteger)) >= getConfig(_proposeTimelock_)) {\\n            status = PROPOSE_STATUS_VOTING;\\n        }\\n    }\\n\\n    function changeConfiguration(bytes32 key, uint256 value) public onlyOperator {\\n        uint256 oldValue = config[key];\\n        if (oldValue != value) {\\n            config[key] = value;\\n            emit ConfigurationChanged(key, oldValue, value);\\n        }\\n    }\\n\\n    function cancelProposal(bytes32 _ID, string memory _reason) public onlyOwner {\\n        uint256 ID = uint(_ID);\\n        require(getConfig(_proposeStatus_, ID) == PROPOSE_STATUS_WAITING, \\\"Gov#cancelProposal: Only waiting proposals can be canceled\\\");\\n        address sender = msg.sender;\\n        // set status cancel\\n        setConfig(_proposeStatus_, ID, PROPOSE_STATUS_CANCELED);\\n        // remove from propose count for month\\n        setConfig(_proposerProposeCountInMonth_, ID, getConfig(_proposerProposeCountInMonth_, ID).sub(1));\\n        // remove locked amount\\n        setConfig(_lockTotal_, sender, getConfig(_lockTotal_, sender).sub(getConfig(_lockAmount_, uint(sender) ^ ID)));\\n        // set locked amount to zero for this proposal\\n        setConfig(_lockAmount_, uint(sender) ^ ID, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ankrAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Compensate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ConfigurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposeID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposeID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"span\",\"type\":\"uint256\"}],\"name\":\"Propose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vote\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"topic\",\"type\":\"bytes32\"}],\"name\":\"allowAddressForFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableAmountForUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableDepositsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cleanUserLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ID\",\"type\":\"bytes32\"}],\"name\":\"finishProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"frozenDepositsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getConfigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getConfigString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfigString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_vote\",\"type\":\"bytes32\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"go\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ankrContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalPoolContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aethContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedDepositsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ID\",\"type\":\"bytes32\"}],\"name\":\"proposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"yes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeSpan\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_topic\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_vote\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Governance_R1","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}