{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/oracle/ICADConversionOracle.sol\r\n\r\n\r\n/**\r\n * @title ICADRateOracle\r\n * @notice provides interface for converting USD stable coins to CAD\r\n*/\r\ninterface ICADConversionOracle {\r\n\r\n    /**\r\n     * @notice convert USD amount to CAD amount\r\n     * @param amount     amount of USD in 18 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdToCad(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert Dai amount to CAD amount\r\n     * @param amount     amount of dai in 18 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function daiToCad(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert USDC amount to CAD amount\r\n     * @param amount     amount of USDC in 6 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdcToCad(uint256 amount) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice convert USDT amount to CAD amount\r\n     * @param amount     amount of USDT in 6 decimal places\r\n     * @return amount of CAD in 18 decimal places\r\n     */\r\n    function usdtToCad(uint256 amount) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice convert CAD amount to USD amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USD in 18 decimal places\r\n     */\r\n    function cadToUsd(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to Dai amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of Dai in 18 decimal places\r\n     */\r\n    function cadToDai(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to USDC amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USDC in 6 decimal places\r\n     */\r\n    function cadToUsdc(uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convert CAD amount to USDT amount\r\n     * @param amount     amount of CAD in 18 decimal places\r\n     * @return amount of USDT in 6 decimal places\r\n     */\r\n    function cadToUsdt(uint256 amount) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/standardTokens/IDividendAware.sol\r\n\r\n\r\n/**\r\n * @dev Interface for dividend claim functions that should be present in dividend aware tokens\r\n */\r\ninterface IDividendAware {\r\n\r\n    /**\r\n     * @notice withdraw all accrued dividends by the sender to the sender\r\n     * @return true if successful\r\n     */\r\n    function claimAllDividends() external returns (bool);\r\n\r\n    /**\r\n     * @notice withdraw all accrued dividends by the sender to the recipient\r\n     * @param recipient     address to receive dividends\r\n     * @return true if successful\r\n     */\r\n    function claimAllDividendsTo(address recipient) external returns (bool);\r\n\r\n    /**\r\n     * @notice withdraw portion of dividends by the sender to the sender\r\n     * @return true if successful\r\n     */\r\n    function claimDividends(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @notice withdraw portion of dividends by the sender to the recipient\r\n     * @param recipient     address to receive dividends\r\n     * @param amount        amount of dividends to withdraw\r\n     * @return true if successful\r\n     */\r\n    function claimDividendsTo(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/acquisition/ITokenPool.sol\r\n\r\n\r\n/**\r\n * @title ITokenPool\r\n * @notice provides interface for token pool where ERC20 tokens can be deposited and withdraw\r\n*/\r\ninterface ITokenPool {\r\n\r\n    /**\r\n    * @notice deposit token into the pool from the source\r\n    * @param amount     amount of token to deposit\r\n    * @return true if success\r\n    */\r\n    function depositAssetToken(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @notice withdraw token from the pool back to the source\r\n    * @param amount     amount of token to withdraw\r\n    * @return true if success\r\n    */\r\n    function withdrawAssetToken(uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/acquisition/FixedPriceCADSingleSourceTokenPool.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FixedPriceCADSingleSourceTokenPool\r\n * @notice Convert USD into a wToken in CAD. wToken is transfered from a single-source pool to the sender of USD, while USD is transferred to the source.\r\n*/\r\ncontract FixedPriceCADSingleSourceTokenPool is ITokenPool {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    event TokenDeposited(uint256 amount);\r\n    event TokenWithdrawn(uint256 amount);\r\n\r\n    event TokenTransaction(address indexed from, address to, uint256 tokenAmount, uint8 usdType, uint256 usdAmount);\r\n\r\n    // source where the wTokens come from\r\n    address public _poolSource;\r\n\r\n    // address of the wToken\r\n    IERC20 public _wToken;\r\n\r\n    // address of the USD to CAD oracle\r\n    ICADConversionOracle public _cadOracle;\r\n\r\n    // wTokens, if fix-priced in CAD, will not require more than 2 decimals\r\n    uint256 public _fixedPriceCADCent;\r\n\r\n    // Dai contract\r\n    IERC20 public _daiContract;\r\n\r\n    // USDC contract\r\n    IERC20 public _usdcContract;\r\n\r\n    // USDT contract\r\n    IERC20 public _usdtContract;\r\n\r\n\r\n    constructor(\r\n        address poolSource,\r\n        address tokenAddress,\r\n        address cadOracleAddress,\r\n        uint256 fixedPriceCADCent,\r\n\r\n        address daiContractddress,\r\n        address usdcContractAddress,\r\n        address usdtContractAddress\r\n    ) public {\r\n        _poolSource = poolSource;\r\n        _wToken = IERC20(tokenAddress);\r\n        _cadOracle = ICADConversionOracle(cadOracleAddress);\r\n        _fixedPriceCADCent = fixedPriceCADCent;\r\n\r\n        _daiContract = IERC20(daiContractddress);\r\n        _usdcContract = IERC20(usdcContractAddress);\r\n        _usdtContract = IERC20(usdtContractAddress);\r\n    }\r\n\r\n    /**\r\n    * @notice deposit token into the pool from the source\r\n    * @param amount     amount of token to deposit\r\n    * @return true if success\r\n    */\r\n    function depositAssetToken(uint256 amount) external virtual override returns (bool) {\r\n        require(msg.sender == _poolSource, \"Only designated source can deposit token\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n\r\n        _wToken.transferFrom(_poolSource, address(this), amount);\r\n\r\n        emit TokenDeposited(amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice withdraw token from the pool back to the source\r\n    * @param amount     amount of token to withdraw\r\n    * @return true if success\r\n    */\r\n    function withdrawAssetToken(uint256 amount) external virtual override returns (bool) {\r\n        require(msg.sender == _poolSource, \"Only designated source can withdraw token\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n\r\n        _wToken.transfer(_poolSource, amount);\r\n\r\n        emit TokenWithdrawn(amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice withdraw any Dai accumulated as dividends, and any tokens that might have been erroneously sent to this contract\r\n    * @param token      address of token to withdraw\r\n    * @param amount     amount of token to withdraw\r\n    * @return true if success\r\n    */\r\n    function withdrawERC20(address token, uint256 amount) external returns (bool) {\r\n        require(msg.sender == _poolSource, \"Only designated source can withdraw any token\");\r\n        require(token != address(_wToken), \"Cannot withdraw asset token this way\");\r\n\r\n        IERC20(token).safeTransfer(_poolSource, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice while the pool holds wNest, it is accumulating dividends, pool source can claim them\r\n    * @return true if success\r\n    */\r\n    function claimDividends() external returns (bool) {\r\n        require(msg.sender == _poolSource, \"Only designated source can claim dividends\");\r\n\r\n        IDividendAware(address(_wToken)).claimAllDividendsTo(msg.sender);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice deposit Dai and get back wTokens\r\n    * @param amount      amount of Dai to deposit\r\n    * @return true if success\r\n    */\r\n    function swapWithDai(uint256 amount) external returns (bool) {\r\n        require(amount > 0, \"Dai amount must be greater than 0\");\r\n\r\n        uint256 tokenAmount = daiToToken(amount);\r\n\r\n        // through not strictly needed, useful to have a clear message for this error case\r\n        require(_wToken.balanceOf(address(this)) >= tokenAmount, \"Insufficient token supply in the pool\");\r\n\r\n        _daiContract.transferFrom(msg.sender, _poolSource, amount);\r\n        _wToken.transfer(msg.sender, tokenAmount);\r\n\r\n        emit TokenTransaction(msg.sender, msg.sender, tokenAmount, 1, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice deposit USDC and get back wTokens\r\n    * @param amount      amount of USDC to deposit\r\n    * @return true if success\r\n    */\r\n    function swapWithUSDC(uint256 amount) external returns (bool) {\r\n        require(amount > 0, \"USDC amount must be greater than 0\");\r\n\r\n        uint256 tokenAmount = usdcToToken(amount);\r\n\r\n        require(_wToken.balanceOf(address(this)) >= tokenAmount, \"Insufficient token supply in the pool\");\r\n\r\n        _usdcContract.transferFrom(msg.sender, _poolSource, amount);\r\n        _wToken.transfer(msg.sender, tokenAmount);\r\n\r\n        emit TokenTransaction(msg.sender, msg.sender, tokenAmount, 2, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice deposit USDT and get back wTokens\r\n    * @param amount      amount of USDT to deposit\r\n    * @return true if success\r\n    */\r\n    function swapWithUSDT(uint256 amount) external returns (bool) {\r\n        require(amount > 0, \"USDT amount must be greater than 0\");\r\n\r\n        uint256 tokenAmount = usdtToToken(amount);\r\n\r\n        require(_wToken.balanceOf(address(this)) >= tokenAmount, \"Insufficient token supply in the pool\");\r\n\r\n        // safeTransferFrom is necessary for USDT due to argument byte size check in USDT's transferFrom function\r\n        _usdtContract.safeTransferFrom(msg.sender, _poolSource, amount);\r\n        _wToken.transfer(msg.sender, tokenAmount);\r\n\r\n        emit TokenTransaction(msg.sender, msg.sender, tokenAmount, 3, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @notice given a Dai amount, calculate resulting wToken amount\r\n    * @param amount      amount of Dai for conversion, in 18 decimals\r\n    * @return amount of resulting wTokens\r\n    */\r\n    function daiToToken(uint256 amount) public view returns (uint256) {\r\n        return _cadOracle\r\n            .daiToCad(amount.mul(100))\r\n            .div(_fixedPriceCADCent);\r\n    }\r\n\r\n    /**\r\n    * @notice given a USDC amount, calculate resulting wToken amount\r\n    * @param amount      amount of USDC for conversion, in 6 decimals\r\n    * @return amount of resulting wTokens\r\n    */\r\n    function usdcToToken(uint256 amount) public view returns (uint256) {\r\n        return _cadOracle\r\n            .usdcToCad(amount.mul(100))\r\n            .div(_fixedPriceCADCent);\r\n    }\r\n\r\n    /**\r\n    * @notice given a USDT amount, calculate resulting wToken amount\r\n    * @param amount      amount of USDT for conversion, in 6 decimals\r\n    * @return amount of resulting wTokens\r\n    */\r\n    function usdtToToken(uint256 amount) public view returns (uint256) {\r\n        return _cadOracle\r\n            .usdtToCad(amount.mul(100))\r\n            .div(_fixedPriceCADCent);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @notice view how many tokens are currently available\r\n    * @return amount of tokens available in the pool\r\n    */\r\n    function tokensAvailable() public view returns (uint256) {\r\n        return _wToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @notice view max amount of USD deposit that can be accepted\r\n    * @return max amount of USD deposit (18 decimal places)\r\n    */\r\n    function availableTokenInUSD() external view returns (uint256) {\r\n        return _cadOracle\r\n            .cadToUsd(tokensAvailable().mul(_fixedPriceCADCent))\r\n            .div(100);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cadOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceCADCent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daiContractddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"usdType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"TokenTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_cadOracle\",\"outputs\":[{\"internalType\":\"contract ICADConversionOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_daiContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fixedPriceCADCent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_poolSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdcContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokenInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"daiToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAssetToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapWithDai\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapWithUSDC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdcToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAssetToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FixedPriceCADSingleSourceTokenPool","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000834da7c990a41d65fa2b6ed20cd38e302e9901c7000000000000000000000000058843c1d91f611db374a1ffcbbcc61a74f613cc000000000000000000000000b101c8c418b09c5943fcc060e74cee743132d4ba00000000000000000000000000000000000000000000000000000000000000640000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c8e6454da408e323627dc582166e07e39e3a824b9e703281f90da8520bb11c3d"}]}