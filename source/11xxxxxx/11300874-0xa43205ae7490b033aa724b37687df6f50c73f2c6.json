{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: unlicensed\r\npragma solidity ^0.7.0;\r\n\r\ncontract Boxes  {\r\n    \r\n    //other shit\r\n    address payable owner;\r\n    address payable[18] boxes;\r\n\r\n    address[18] lastResultAddresses;\r\n    uint256[18] lastResultAmounts;\r\n    uint256 gameNumber;\r\n    uint256 gameBlockFinishedOn;\r\n    \r\n    //split it, cos, bugsz\r\n    function getBoxes1() public view returns (address, address, address, address, address, address, address, address) {\r\n        return (boxes[0], boxes[1], boxes[2], boxes[3], boxes[4], boxes[5], boxes[6], boxes[7]);\r\n    }\r\n    \r\n    function getBoxes2() public view returns (address, address, address, address, address, address, address) {\r\n        return (boxes[8], boxes[9], boxes[10], boxes[11], boxes[12], boxes[13], boxes[14]);\r\n    }\r\n\r\n    function getJackpots() public view returns (uint256,uint256,uint256) {\r\n        return (jackpotMini, jackpotMega, jackpotUltra);\r\n    }\r\n    \r\n    function getLastGameResults() public view returns (address[18] memory, uint256[18] memory, uint256, uint256) {\r\n        return (lastResultAddresses, lastResultAmounts, gameNumber, gameBlockFinishedOn);\r\n    }\r\n\r\n    // function debugSetBoxes() public {\r\n    //     for(uint xo=0; xo < boxes.length; xo++){\r\n    //         boxes[xo] = msg.sender;\r\n    //     }\r\n    // }\r\n    \r\n    uint256[18] boxPayoutAmounts;\r\n    \r\n    event debugShit(uint256);\r\n\r\n    uint256 jackpotMini;\r\n    uint256 jackpotMega;\r\n    uint256 jackpotUltra;\r\n    \r\n    \r\n    address payable[3]  jackpotWinners;\r\n    uint256[3]  jackpotAmts;\r\n    \r\n    event gameResults(address[18], uint256[18], uint256, uint256);\r\n    \r\n    function random(uint256 maxBruh, uint256 nonce) private view returns (uint256) {\r\n        //NOTE: This is INCLUSIVE, and NEVER PRODUCES 0;, i.e. random(3) = [1,2,3];\r\n        uint256 randomnumber = uint256(\r\n            keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce))\r\n        ) % maxBruh;\r\n        randomnumber = randomnumber + 1;\r\n        nonce++;\r\n        return randomnumber;\r\n    }\r\n\r\n     constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function buyBox(uint256 boxNumber) public payable{\r\n        \r\n                    \r\n        if(boxNumber > 15){\r\n            revert(\"Learn to count cunt\");\r\n        }\r\n        \r\n        if(msg.value >= 50000000000000000) {\r\n            //they sent enough\r\n            if(boxes[boxNumber] == address(0)){\r\n                //box is empty, it's for sale\r\n                boxes[boxNumber] = msg.sender;\r\n            } else {\r\n                revert(\"Box already bought by some other Chad\");\r\n            }\r\n        } else {\r\n            revert(\"Send more monkeys ya cheap cunt\");\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n    function finishGame() public payable returns(uint256[18] memory, address payable[18] memory){\r\n        //NOTE: Jackpot winners/amounts are put in the last 3 slots of each array\r\n        \r\n        //reset some shit, stack was too deep so had to make them in storage, cunts.\r\n        jackpotWinners[0] = 0x0000000000000000000000000000000000000000;\r\n        jackpotWinners[1] = 0x0000000000000000000000000000000000000000;\r\n        jackpotWinners[2] = 0x0000000000000000000000000000000000000000;\r\n        jackpotAmts[0] = 0;\r\n        jackpotAmts[1] = 0;\r\n        jackpotAmts[2] = 0;\r\n        \r\n        for(uint zx=0; zx < boxes.length; zx++){\r\n            boxes[zx] = msg.sender;\r\n        }\r\n\r\n        //check that all boxes have been purchased\r\n        bool allBoxesPurchased = true;\r\n        for(uint i=0; i < boxes.length; i++){\r\n            if(boxes[i] == address(0)){\r\n                allBoxesPurchased = false;\r\n            }\r\n        }\r\n        \r\n        uint256 jackpotWinHappenedMini = 0;\r\n        uint256 jackpotWinHappenedMega = 0;\r\n        uint256 jackpotWinHappenedUltra = 0;\r\n        \r\n        if(allBoxesPurchased == false){\r\n            // revert(\"Game not done cunt, so fuck the fuck off\");\r\n        }\r\n        \r\n        //work out if its time to jackpot bruhhh\r\n        if(random(10, 1337) == 1){\r\n            jackpotWinHappenedMini = jackpotMini;\r\n            jackpotMini = 0;\r\n        }\r\n        \r\n        if(random(50, 13378) == 1){\r\n            jackpotWinHappenedMega = jackpotMega;\r\n            jackpotMega = 0;\r\n        }\r\n        \r\n        if(random(200, 13379) == 1){\r\n            jackpotWinHappenedUltra = jackpotUltra;\r\n            jackpotUltra = 0;\r\n        }\r\n        \r\n        //workout payouts for everything\r\n        uint256  bigChunks = 200000000000000000;\r\n        uint256  mediumChunks = 50000000000000000;\r\n        uint256 tinyChunks = 50000000000000000;\r\n        \r\n        uint256 tempRandom;\r\n        uint256 counterbruh;\r\n        \r\n        while(bigChunks > 0){\r\n            tempRandom = random(15, counterbruh);\r\n            boxPayoutAmounts[tempRandom - 1] = boxPayoutAmounts[tempRandom - 1] + 100000000000000000;\r\n            bigChunks = bigChunks - 100000000000000000;\r\n            counterbruh++;\r\n        }\r\n        \r\n        while(mediumChunks > 0){\r\n            tempRandom = random(15, counterbruh);\r\n            boxPayoutAmounts[tempRandom - 1] = boxPayoutAmounts[tempRandom - 1] + 50000000000000000;\r\n            mediumChunks = mediumChunks - 50000000000000000;\r\n            counterbruh++;\r\n        }\r\n\r\n        while(tinyChunks > 0){\r\n            tempRandom = random(15, counterbruh);\r\n            boxPayoutAmounts[tempRandom - 1] = boxPayoutAmounts[tempRandom - 1] + 25000000000000000;\r\n            tinyChunks = tinyChunks - 25000000000000000;\r\n            counterbruh++;\r\n        }\r\n        \r\n        //big chunk\r\n        tempRandom = random(15, counterbruh);\r\n        boxPayoutAmounts[tempRandom - 1] = boxPayoutAmounts[tempRandom - 1] + 250000000000000000;\r\n\r\n        \r\n        if(jackpotWinHappenedMini > 0){\r\n            //payout jackpot mini\r\n            uint256 anotherTempRandom = random(15, counterbruh);\r\n            jackpotWinners[0] = boxes[anotherTempRandom];\r\n            jackpotAmts[0] = jackpotWinHappenedMini;\r\n            \r\n            //transfer then emit a fucking event bruhhh\r\n            jackpotMini = 0; //reset to zeero\r\n            jackpotWinners[0].transfer(jackpotWinHappenedMini);\r\n            counterbruh++;\r\n        }\r\n        \r\n        //megaaaa\r\n        if(jackpotWinHappenedMega > 0){\r\n            //payout jackpot mega\r\n            uint256 anotherTempRandom = random(15, counterbruh);\r\n            jackpotWinners[1] = boxes[anotherTempRandom];\r\n            jackpotAmts[1] = jackpotWinHappenedMega;\r\n            \r\n            //transfer then emit a fucking event bruhhh\r\n            jackpotMega = 0; //reset to zeero\r\n            jackpotWinners[1].transfer(jackpotWinHappenedMega);\r\n            counterbruh++;\r\n        }\r\n        \r\n        //ultraaaa\r\n        if(jackpotWinHappenedUltra > 0){\r\n            //payout jackpot ultra\r\n            uint256 anotherTempRandom = random(15, counterbruh);\r\n            jackpotWinners[2] = boxes[anotherTempRandom];\r\n            jackpotAmts[2] = jackpotWinHappenedUltra;\r\n            \r\n            //transfer then emit a fucking event bruhhh\r\n            jackpotUltra = 0; //reset to zeero\r\n            jackpotWinners[2].transfer(jackpotWinHappenedUltra);\r\n            counterbruh++;\r\n        }\r\n        \r\n        \r\n        for(uint uu=0; uu < 15; uu++){\r\n            if(boxPayoutAmounts[uu] > 0 ){\r\n            boxes[uu].transfer(boxPayoutAmounts[uu]);\r\n            }\r\n        }\r\n        \r\n        //add to the jackpots (same amount every time)\r\n        jackpotMini = jackpotMini + 20000000000000000;\r\n        jackpotMega = jackpotMega + 25000000000000000;\r\n        jackpotUltra = jackpotUltra + 30000000000000000;\r\n        \r\n        //pay the devs everything left, minus jackpots, minus a safe balance left on the contract\r\n        uint256 safezone = jackpotMini + jackpotMega + jackpotUltra + 100000000000000000;\r\n        uint256 amountToPayDevs = address(this).balance - safezone;\r\n        \r\n        //min amount to pay devs is 0.1 ether\r\n        if(amountToPayDevs  > 100000000000000000){\r\n            owner.transfer(amountToPayDevs);\r\n        }\r\n        \r\n\r\n        \r\n        boxPayoutAmounts[15] = jackpotAmts[0];\r\n        boxPayoutAmounts[16] = jackpotAmts[1];\r\n        boxPayoutAmounts[17] = jackpotAmts[2];\r\n        boxes[15] = jackpotWinners[0];\r\n        boxes[16] = jackpotWinners[1];\r\n        boxes[17] = jackpotWinners[2];\r\n\r\n        \r\n        gameNumber = gameNumber + 1;\r\n        gameBlockFinishedOn = block.number;\r\n        \r\n        for(uint ii=0; ii < 18; ii++){\r\n            lastResultAddresses[ii] = boxes[ii];\r\n            lastResultAmounts[ii] = boxPayoutAmounts[ii];\r\n            boxPayoutAmounts[ii] = 0;\r\n            boxes[ii] = 0x0000000000000000000000000000000000000000;\r\n        }\r\n        \r\n        emit gameResults(lastResultAddresses, lastResultAmounts, gameNumber, gameBlockFinishedOn);\r\n        \r\n    \r\n    }\r\n    \r\n    // function cashout() public payable{\r\n    //     msg.sender.transfer(address(this).balance - 0.01 ether);\r\n    // }\r\n    \r\n        fallback() external payable {}\r\n        \r\n            receive() external payable {}\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debugShit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[18]\",\"name\":\"\",\"type\":\"address[18]\"},{\"indexed\":false,\"internalType\":\"uint256[18]\",\"name\":\"\",\"type\":\"uint256[18]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameResults\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxNumber\",\"type\":\"uint256\"}],\"name\":\"buyBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishGame\",\"outputs\":[{\"internalType\":\"uint256[18]\",\"name\":\"\",\"type\":\"uint256[18]\"},{\"internalType\":\"address payable[18]\",\"name\":\"\",\"type\":\"address[18]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoxes1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoxes2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastGameResults\",\"outputs\":[{\"internalType\":\"address[18]\",\"name\":\"\",\"type\":\"address[18]\"},{\"internalType\":\"uint256[18]\",\"name\":\"\",\"type\":\"uint256[18]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Boxes","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0f90d8d70dc9f0002b6a01f70bc26636c9be85e461a15bdc2e368b0fe10a26ae"}]}