{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"temp-contracts/interfaces/IDelegateCallProxyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\n\\n/**\\n * @dev Contract that manages deployment and upgrades of delegatecall proxies.\\n *\\n * An implementation identifier can be created on the proxy manager which is\\n * used to specify the logic address for a particular contract type, and to\\n * upgrade the implementation as needed.\\n *\\n * A one-to-one proxy is a single proxy contract with an upgradeable implementation\\n * address.\\n *\\n * A many-to-one proxy is a single upgradeable implementation address that may be\\n * used by many proxy contracts.\\n */\\ninterface IDelegateCallProxyManager {\\n/* ==========  Events  ========== */\\n\\n  event DeploymentApprovalGranted(address deployer);\\n  event DeploymentApprovalRevoked(address deployer);\\n\\n  event ManyToOne_ImplementationCreated(\\n    bytes32 implementationID,\\n    address implementationAddress\\n  );\\n\\n  event ManyToOne_ImplementationUpdated(\\n    bytes32 implementationID,\\n    address implementationAddress\\n  );\\n\\n  event ManyToOne_ProxyDeployed(\\n    bytes32 implementationID,\\n    address proxyAddress\\n  );\\n\\n  event OneToOne_ProxyDeployed(\\n    address proxyAddress,\\n    address implementationAddress\\n  );\\n\\n  event OneToOne_ImplementationUpdated(\\n    address proxyAddress,\\n    address implementationAddress\\n  );\\n\\n/* ==========  Controls  ========== */\\n\\n  /**\\n   * @dev Allows `deployer` to deploy many-to-one proxies.\\n   */\\n  function approveDeployer(address deployer) external;\\n\\n  /**\\n   * @dev Prevents `deployer` from deploying many-to-one proxies.\\n   */\\n  function revokeDeployerApproval(address deployer) external;\\n\\n/* ==========  Implementation Management  ========== */\\n\\n  /**\\n   * @dev Creates a many-to-one proxy relationship.\\n   *\\n   * Deploys an implementation holder contract which stores the\\n   * implementation address for many proxies. The implementation\\n   * address can be updated on the holder to change the runtime\\n   * code used by all its proxies.\\n   *\\n   * @param implementationID ID for the implementation, used to identify the\\n   * proxies that use it. Also used as the salt in the create2 call when\\n   * deploying the implementation holder contract.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function createManyToOneProxyRelationship(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationManyToOne(bytes32 implementationID) external;\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationOneToOne(address proxyAddress) external;\\n\\n  /**\\n   * @dev Updates the implementation address for a many-to-one\\n   * proxy relationship.\\n   *\\n   * @param implementationID Identifier for the implementation.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function setImplementationAddressManyToOne(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  /**\\n   * @dev Updates the implementation address for a one-to-one proxy.\\n   *\\n   * Note: This could work for many-to-one as well if the caller\\n   * provides the implementation holder address in place of the\\n   * proxy address, as they use the same access control and update\\n   * mechanism.\\n   *\\n   * @param proxyAddress Address of the deployed proxy\\n   * @param implementation Address with the runtime code for\\n   * the proxy to use.\\n   */\\n  function setImplementationAddressOneToOne(\\n    address proxyAddress,\\n    address implementation\\n  ) external;\\n\\n/* ==========  Proxy Deployment  ========== */\\n\\n  /**\\n   * @dev Deploy a proxy contract with a one-to-one relationship\\n   * with its implementation.\\n   *\\n   * The proxy will have its own implementation address which can\\n   * be updated by the proxy manager.\\n   *\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   * @param implementation Address of the contract with the runtime\\n   * code that the proxy should use.\\n   */\\n  function deployProxyOneToOne(\\n    bytes32 suppliedSalt,\\n    address implementation\\n  ) external returns(address proxyAddress);\\n\\n  /**\\n   * @dev Deploy a proxy with a many-to-one relationship with its implemenation.\\n   *\\n   * The proxy will call the implementation holder for every transaction to\\n   * determine the address to use in calls.\\n   *\\n   * @param implementationID Identifier for the proxy's implementation.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   */\\n  function deployProxyManyToOne(\\n    bytes32 implementationID,\\n    bytes32 suppliedSalt\\n  ) external returns(address proxyAddress);\\n\\n/* ==========  Queries  ========== */\\n\\n  /**\\n   * @dev Returns a boolean stating whether `implementationID` is locked.\\n   */\\n  function isImplementationLocked(bytes32 implementationID) external view returns (bool);\\n\\n  /**\\n   * @dev Returns a boolean stating whether `proxyAddress` is locked.\\n   */\\n  function isImplementationLocked(address proxyAddress) external view returns (bool);\\n\\n  /**\\n   * @dev Returns a boolean stating whether `deployer` is allowed to deploy many-to-one\\n   * proxies.\\n   */\\n  function isApprovedDeployer(address deployer) external view returns (bool);\\n\\n  /**\\n   * @dev Queries the temporary storage value `_implementationHolder`.\\n   * This is used in the constructor of the many-to-one proxy contract\\n   * so that the create2 address is static (adding constructor arguments\\n   * would change the codehash) and the implementation holder can be\\n   * stored as a constant.\\n   */\\n  function getImplementationHolder() external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the implementation holder contract\\n   * for `implementationID`.\\n   */\\n  function getImplementationHolder(bytes32 implementationID) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address for a one-to-one proxy requested\\n   * by `originator` using `suppliedSalt`.\\n   *\\n   * @param originator Address of the account requesting deployment.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   */\\n  function computeProxyAddressOneToOne(\\n    address originator,\\n    bytes32 suppliedSalt\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address for a many-to-one proxy for the\\n   * implementation `implementationID` requested by `originator` using\\n   * `suppliedSalt`.\\n   *\\n   * @param originator Address of the account requesting deployment.\\n   * @param implementationID The identifier for the contract implementation.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n  */\\n  function computeProxyAddressManyToOne(\\n    address originator,\\n    bytes32 implementationID,\\n    bytes32 suppliedSalt\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address of the implementation holder\\n   * for `implementationID`.\\n   *\\n   * @param implementationID The identifier for the contract implementation.\\n  */\\n  function computeHolderAddressManyToOne(bytes32 implementationID) external view returns (address);\\n}\"\r\n    },\r\n    \"temp-contracts/interfaces/IProxyManagerAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\n\\ninterface IProxyManagerAccessControl {\\n/* ==========  Events  ========== */\\n\\n  event AdminAccessGranted(address newAdmin);\\n  event AdminAccessRevoked(address newAdmin);\\n\\n/* ==========  Queries  ========== */\\n  /**\\n   * @dev Checks whether `account` has administrator access.\\n   */\\n  function hasAdminAccess(address account) external view returns (bool);\\n\\n  /**\\n   * @dev Gets the address of the proxy manager.\\n   */\\n  function proxyManager() external view returns (address);\\n\\n/* ==========  Controls  ========== */\\n\\n  /**\\n   * @dev Allows `deployer` to deploy many-to-one proxies.\\n   */\\n  function approveDeployer(address deployer) external;\\n\\n  /**\\n   * @dev Prevents `deployer` from deploying many-to-one proxies.\\n   */\\n  function revokeDeployerApproval(address deployer) external;\\n\\n  /**\\n   * @dev Grants admin access to `admin`.\\n   */\\n  function grantAdminAccess(address admin) external;\\n\\n  /**\\n   * @dev Revokes admin access from `admin`.\\n   */\\n  function revokeAdminAccess(address admin) external;\\n\\n  /**\\n   * @dev Transfers ownership of the proxy manager.\\n   */\\n  function transferManagerOwnership(address newOwner) external;\\n\\n/* ==========  Implementation Management  ========== */\\n\\n  /**\\n   * @dev Creates a many-to-one proxy relationship.\\n   *\\n   * Deploys an implementation holder contract which stores the\\n   * implementation address for many proxies. The implementation\\n   * address can be updated on the holder to change the runtime\\n   * code used by all its proxies.\\n   *\\n   * @param implementationID ID for the implementation, used to identify the\\n   * proxies that use it. Also used as the salt in the create2 call when\\n   * deploying the implementation holder contract.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function createManyToOneProxyRelationship(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationManyToOne(bytes32 implementationID) external;\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationOneToOne(address proxyAddress) external;\\n\\n  /**\\n   * @dev Updates the implementation address for a many-to-one\\n   * proxy relationship.\\n   *\\n   * @param implementationID Identifier for the implementation.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function setImplementationAddressManyToOne(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  /**\\n   * @dev Updates the implementation address for a one-to-one proxy.\\n   *\\n   * Note: This could work for many-to-one as well if the caller\\n   * provides the implementation holder address in place of the\\n   * proxy address, as they use the same access control and update\\n   * mechanism.\\n   *\\n   * @param proxyAddress Address of the deployed proxy\\n   * @param implementation Address with the runtime code for\\n   * the proxy to use.\\n   */\\n  function setImplementationAddressOneToOne(\\n    address proxyAddress,\\n    address implementation\\n  ) external;\\n\\n  /* ==========  Proxy Deployment  ========== */\\n\\n  /**\\n   * @dev Deploy a proxy contract with a one-to-one relationship\\n   * with its implementation.\\n   *\\n   * The proxy will have its own implementation address which can\\n   * be updated by the proxy manager.\\n   *\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   * @param implementation Address of the contract with the runtime\\n   * code that the proxy should use.\\n   */\\n  function deployProxyOneToOne(\\n    bytes32 suppliedSalt,\\n    address implementation\\n  ) external returns(address proxyAddress);\\n\\n  /**\\n   * @dev Deploy a proxy with a many-to-one relationship with its implemenation.\\n   *\\n   * The proxy will call the implementation holder for every transaction to\\n   * determine the address to use in calls.\\n   *\\n   * @param implementationID Identifier for the proxy's implementation.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   */\\n  function deployProxyManyToOne(\\n    bytes32 implementationID,\\n    bytes32 suppliedSalt\\n  ) external returns(address proxyAddress);\\n}\"\r\n    },\r\n    \"temp-contracts/ProxyManagerAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IProxyManagerAccessControl.sol\\\";\\nimport \\\"./interfaces/IDelegateCallProxyManager.sol\\\";\\n\\n\\ncontract ProxyManagerAccessControl is IProxyManagerAccessControl, Ownable {\\n/* ==========  Storage  ========== */\\n\\n  mapping (address => bool) public override hasAdminAccess;\\n  address public immutable override proxyManager;\\n\\n/* ==========  Modifiers  ========== */\\n\\n  modifier onlyAdminOrOwner {\\n    require(\\n      hasAdminAccess[msg.sender] || msg.sender == owner(),\\n      \\\"ERR_NOT_ADMIN_OR_OWNER\\\"\\n    );\\n    _;\\n  }\\n\\n/* ==========  Constructor  ========== */\\n\\n  constructor(address proxyManager_) public Ownable() {\\n    proxyManager = proxyManager_;\\n  }\\n\\n/* ==========  Admin Controls  ========== */\\n\\n  /**\\n   * @dev Allows `deployer` to deploy many-to-one proxies.\\n   */\\n  function approveDeployer(address deployer) external override onlyAdminOrOwner {\\n    IDelegateCallProxyManager(proxyManager).approveDeployer(deployer);\\n  }\\n\\n  /**\\n   * @dev Creates a many-to-one proxy relationship.\\n   *\\n   * Deploys an implementation holder contract which stores the\\n   * implementation address for many proxies. The implementation\\n   * address can be updated on the holder to change the runtime\\n   * code used by all its proxies.\\n   *\\n   * @param implementationID ID for the implementation, used to identify the\\n   * proxies that use it. Also used as the salt in the create2 call when\\n   * deploying the implementation holder contract.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function createManyToOneProxyRelationship(\\n    bytes32 implementationID,\\n    address implementation\\n  )\\n    external\\n    override\\n    onlyAdminOrOwner\\n  {\\n    IDelegateCallProxyManager(proxyManager).createManyToOneProxyRelationship(\\n      implementationID,\\n      implementation\\n    );\\n  }\\n\\n/* ==========  Owner Controls  ========== */\\n\\n  /**\\n   * @dev Grants admin access to `admin`.\\n   */\\n  function grantAdminAccess(address admin) external override onlyOwner {\\n    hasAdminAccess[admin] = true;\\n    emit AdminAccessGranted(admin);\\n  }\\n\\n  /**\\n   * @dev Revokes admin access from `admin`.\\n   */\\n  function revokeAdminAccess(address admin) external override onlyOwner {\\n    hasAdminAccess[admin] = false;\\n    emit AdminAccessRevoked(admin);\\n  }\\n\\n  /**\\n   * @dev Prevents `deployer` from deploying many-to-one proxies.\\n   */\\n  function revokeDeployerApproval(address deployer) external override onlyOwner {\\n    IDelegateCallProxyManager(proxyManager).revokeDeployerApproval(deployer);\\n  }\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationManyToOne(bytes32 implementationID)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    IDelegateCallProxyManager(proxyManager).lockImplementationManyToOne(\\n      implementationID\\n    );\\n  }\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationOneToOne(address proxyAddress)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    IDelegateCallProxyManager(proxyManager).lockImplementationOneToOne(\\n      proxyAddress\\n    );\\n  }\\n\\n  /**\\n   * @dev Updates the implementation address for a many-to-one\\n   * proxy relationship.\\n   *\\n   * @param implementationID Identifier for the implementation.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function setImplementationAddressManyToOne(\\n    bytes32 implementationID,\\n    address implementation\\n  )\\n    external\\n    override\\n    onlyOwner\\n  {\\n    IDelegateCallProxyManager(proxyManager).setImplementationAddressManyToOne(\\n      implementationID,\\n      implementation\\n    );\\n  }\\n\\n  /**\\n   * @dev Updates the implementation address for a one-to-one proxy.\\n   *\\n   * Note: This could work for many-to-one as well if the caller\\n   * provides the implementation holder address in place of the\\n   * proxy address, as they use the same access control and update\\n   * mechanism.\\n   *\\n   * @param proxyAddress Address of the deployed proxy\\n   * @param implementation Address with the runtime code for\\n   * the proxy to use.\\n   */\\n  function setImplementationAddressOneToOne(\\n    address proxyAddress,\\n    address implementation\\n  )\\n    external\\n    override\\n    onlyOwner\\n  {\\n    IDelegateCallProxyManager(proxyManager).setImplementationAddressOneToOne(\\n      proxyAddress,\\n      implementation\\n    );\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the proxy manager to a new account.\\n   */\\n  function transferManagerOwnership(address newOwner) external override onlyOwner {\\n    Ownable(proxyManager).transferOwnership(newOwner);\\n  }\\n\\n/* ==========  Proxy Deployment  ========== */\\n\\n  /**\\n   * @dev Deploy a proxy contract with a one-to-one relationship\\n   * with its implementation.\\n   *\\n   * The proxy will have its own implementation address which can\\n   * be updated by the proxy manager.\\n   *\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   * @param implementation Address of the contract with the runtime\\n   * code that the proxy should use.\\n   */\\n  function deployProxyOneToOne(\\n    bytes32 suppliedSalt,\\n    address implementation\\n  )\\n    external\\n    override\\n    onlyAdminOrOwner\\n    returns(address)\\n  {\\n    return IDelegateCallProxyManager(proxyManager).deployProxyOneToOne(\\n      suppliedSalt,\\n      implementation\\n    );\\n  }\\n\\n  /**\\n   * @dev Deploy a proxy with a many-to-one relationship with its implemenation.\\n   *\\n   * The proxy will call the implementation holder for every transaction to\\n   * determine the address to use in calls.\\n   *\\n   * @param implementationID Identifier for the proxy's implementation.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   */\\n  function deployProxyManyToOne(\\n    bytes32 implementationID,\\n    bytes32 suppliedSalt\\n  )\\n    external\\n    override\\n    onlyAdminOrOwner\\n    returns(address proxyAddress)\\n  {\\n    return IDelegateCallProxyManager(proxyManager).deployProxyManyToOne(\\n      implementationID,\\n      suppliedSalt\\n    );\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"approveDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"implementationID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"createManyToOneProxyRelationship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"implementationID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"suppliedSalt\",\"type\":\"bytes32\"}],\"name\":\"deployProxyManyToOne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"suppliedSalt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"deployProxyOneToOne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"grantAdminAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAdminAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"implementationID\",\"type\":\"bytes32\"}],\"name\":\"lockImplementationManyToOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"lockImplementationOneToOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdminAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"revokeDeployerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"implementationID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setImplementationAddressManyToOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setImplementationAddressOneToOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferManagerOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProxyManagerAccessControl","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d23dedc599bd56767e42d48484d6ca96ab01c115","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://75fdd08a7afcd3480b9410b65898f6d33a45c4b9e216f5cba3d23adf989afb31"}]}