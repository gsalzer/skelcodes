{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IKeep3rV1Oracle {\r\n    function sample(address tokenIn, uint amountIn, address tokenOut, uint points, uint window) external view returns (uint[] memory);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ncontract Keep3rV1Volatility {\r\n    \r\n    uint private constant FIXED_1 = 0x080000000000000000000000000000000;\r\n    uint private constant FIXED_2 = 0x100000000000000000000000000000000;\r\n    uint private constant SQRT_1 = 13043817825332782212;\r\n    uint private constant LOG_10_2 = 3010299957;\r\n    uint private constant BASE = 1e10;\r\n    \r\n    IKeep3rV1Oracle public constant KV1O = IKeep3rV1Oracle(0x73353801921417F465377c8d898c6f4C0270282C);\r\n\r\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\r\n        uint8 res = 0;\r\n\r\n        if (_n < 256) {\r\n            // At most 8 iterations\r\n            while (_n > 1) {\r\n                _n >>= 1;\r\n                res += 1;\r\n            }\r\n        } else {\r\n            // Exactly 8 iterations\r\n            for (uint8 s = 128; s > 0; s >>= 1) {\r\n                if (_n >= (uint(1) << s)) {\r\n                    _n >>= s;\r\n                    res |= s;\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n    \r\n    function generalLog(uint256 x) internal pure returns (uint) {\r\n        uint res = 0;\r\n\r\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\r\n        if (x >= FIXED_2) {\r\n            uint8 count = floorLog2(x / FIXED_1);\r\n            x >>= count; // now x < 2\r\n            res = count * FIXED_1;\r\n        }\r\n\r\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\r\n        if (x > FIXED_1) {\r\n            for (uint8 i = 127; i > 0; --i) {\r\n                x = (x * x) / FIXED_1; // now 1 < x < 4\r\n                if (x >= FIXED_2) {\r\n                    x >>= 1; // now 1 < x < 2\r\n                    res += uint(1) << (i - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return res * LOG_10_2 / BASE;\r\n    }\r\n    \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n    \r\n    function vol(uint[] memory p) public pure returns (uint x) {\r\n        for (uint8 i = 1; i <= (p.length-1); i++) {\r\n            x += ((generalLog(p[i] * FIXED_1) - generalLog(p[i-1] * FIXED_1)))**2;\r\n            //denom += FIXED_1**2;\r\n        }\r\n        //return (sum, denom);\r\n        x = sqrt(uint(252) * sqrt(x / (p.length-1)));\r\n        return uint(1e18) * x / SQRT_1;\r\n    }\r\n    \r\n    function rVol(address tokenIn, address tokenOut, uint points, uint window) public view returns (uint) {\r\n        return vol(KV1O.sample(tokenIn, uint(10)**IERC20(tokenIn).decimals(), tokenOut, points, window));\r\n    }\r\n    \r\n    function rVolHourly(address tokenIn, address tokenOut, uint points) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, points, 2);\r\n    }\r\n    \r\n    function rVolDaily(address tokenIn, address tokenOut, uint points) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, points, 48);\r\n    }\r\n    \r\n    function rVolWeekly(address tokenIn, address tokenOut, uint points) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, points, 336);\r\n    }\r\n    \r\n    function rVolHourlyRecent(address tokenIn, address tokenOut) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, 2, 2);\r\n    }\r\n    \r\n    function rVolDailyRecent(address tokenIn, address tokenOut) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, 2, 48);\r\n    }\r\n    \r\n    function rVolWeeklyRecent(address tokenIn, address tokenOut) external view returns (uint) {\r\n        return rVol(tokenIn, tokenOut, 2, 336);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"KV1O\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"rVol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"rVolDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"rVolDailyRecent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"rVolHourly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"rVolHourlyRecent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"rVolWeekly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"rVolWeeklyRecent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"p\",\"type\":\"uint256[]\"}],\"name\":\"vol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Keep3rV1Volatility","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://31306d2dbb18d8750db78d6e3cb9c49b9b31a966fa84f6c76de94f35ae4a4825"}]}