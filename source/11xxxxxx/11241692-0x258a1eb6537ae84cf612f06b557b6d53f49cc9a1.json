{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Pausable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\IAddressResolver.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IAddressResolver {\r\n    \r\n    function key2address(bytes32 key) external view returns(address);\r\n    function address2key(address addr) external view returns(bytes32);\r\n    function requireAndKey2Address(bytes32 name, string calldata reason) external view returns(address);\r\n\r\n    function setAddress(bytes32 key, address addr) external;\r\n    function setMultiAddress(bytes32[] memory keys, address[] memory addrs) external;\r\n}\r\n\r\n// File: contracts\\interface\\ITunnel.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface ITunnel {\r\n    function pledge(address account, uint amount) external;\r\n    function redeem(address account, uint amount) external;\r\n    function issue(address account, uint amount) external;\r\n    function burn(address account, uint amount, string memory assetAddress) external;\r\n    function totalValuePledge() external view  returns(uint);\r\n    function canIssueAmount() external view returns(uint);\r\n    function oTokenKey() external view returns(bytes32);\r\n}\r\n\r\n// File: contracts\\ParamBook.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract ParamBook is Ownable {\r\n    mapping(bytes32 => uint256) public params;\r\n    mapping(bytes32 => mapping(bytes32 => uint256)) public params2;\r\n\r\n    function setParams(bytes32 name, uint256 value) public onlyOwner {\r\n        params[name] = value;\r\n    }\r\n\r\n    function setMultiParams(bytes32[] memory names, uint[] memory values) public onlyOwner {\r\n        require(names.length == values.length, \"ParamBook::setMultiParams:param length not match\");\r\n        for (uint i=0; i < names.length; i++ ) {\r\n            params[names[i]] = values[i];\r\n        }\r\n    }\r\n\r\n    function setParams2(\r\n        bytes32 name1,\r\n        bytes32 name2,\r\n        uint256 value\r\n    ) public onlyOwner {\r\n        params2[name1][name2] = value;\r\n    }\r\n\r\n    function setMultiParams2(bytes32[] memory names1, bytes32[] memory names2, uint[] memory values) public onlyOwner {\r\n        require(names1.length == names2.length, \"ParamBook::setMultiParams2:param length not match\");\r\n        require(names1.length == values.length, \"ParamBook::setMultiParams2:param length not match\");\r\n        for(uint i=0; i < names1.length; i++) {\r\n            params2[names1[i]][names2[i]] = values[i];\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\SafeDecimalMath.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n// Libraries\r\n\r\n\r\n// https://docs.synthetix.io/contracts/SafeDecimalMath\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    /* Number of decimal places in the representations. */\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    /* The number representing 1.0. */\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    /* The number representing 1.0 for higher fidelity numbers. */\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    /**\r\n     * @return Provides an interface to UNIT.\r\n     */\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return Provides an interface to PRECISE_UNIT.\r\n     */\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\r\n     * decimals.\r\n     *\r\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\r\n     * so that product must be less than 2**256. As this is an integer division,\r\n     * the internal division always rounds down. This helps save on gas. Rounding\r\n     * is more expensive on gas.\r\n     */\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of the specified precision unit.\r\n     *\r\n     * @dev The operands should be in the form of a the specified unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a precise unit.\r\n     *\r\n     * @dev The operands should be in the precise unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a standard unit.\r\n     *\r\n     * @dev The operands should be in the standard unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is a high\r\n     * precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\r\n     * this is an integer division, the result is always rounded down.\r\n     * This helps save on gas. Rounding is more expensive on gas.\r\n     */\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Reintroduce the UNIT factor that will be divided out by y. */\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * decimal in the precision unit specified in the parameter.\r\n     *\r\n     * @dev y is divided after the product of x and the specified precision unit\r\n     * is evaluated, so the product of x and the specified precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * standard precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and the standard precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * high precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the high precision unit\r\n     * is evaluated, so the product of x and the high precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a standard decimal representation to a high precision one.\r\n     */\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a high precision decimal to a standard decimal representation.\r\n     */\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\IBoringDAO.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IBoringDAO {\r\n    // function openTunnel(bytes32 tunnelKey) external;\r\n\r\n    function pledge(bytes32 tunnelKey, uint _amount) external;\r\n    function redeem(bytes32 tunnelKey, uint _amount) external;\r\n\r\n    function approveMint(bytes32 tunnelKey, string memory _txid, uint _amount, address account, string memory assetAddress) external;\r\n    function burnBToken(bytes32 _tunnelKey, uint _amount, string memory assetAddress) external;\r\n\r\n    function getTrustee(uint index) external view returns(address);\r\n    function getTrusteeCount() external view returns(uint);\r\n    function getRandomTrustee() external view returns (address);\r\n\r\n}\r\n\r\n// File: contracts\\interface\\IOracle.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IOracle {\r\n    \r\n    function setPrice(bytes32 _symbol, uint _price) external;\r\n    function getPrice(bytes32 _symbol) external view returns (uint);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\interface\\IFeePool.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IFeePool {\r\n\r\n    function earned(address account) external view returns(uint, uint);\r\n\r\n    function notifyBORFeeAmount(uint amount) external;\r\n    function notifyBTokenFeeAmount(uint amount) external;\r\n    function notifyPTokenAmount(address account, uint amount) external;\r\n    \r\n    function withdraw(address account, uint amount) external;\r\n\r\n}\r\n\r\n// File: contracts\\interface\\IStakingRewardsFactory.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IStakingRewardsFactory {\r\n    function satelliteTVL() external view returns(uint);\r\n}\r\n\r\n// File: contracts\\interface\\IMintBurn.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IMintBurn {\r\n\r\n    function burn(address account, uint amount) external;\r\n    function mint(address account, uint amount) external;\r\n}\r\n\r\n// File: contracts\\interface\\ITrusteeFeePool.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface ITrusteeFeePool {\r\n    function exit(address account) external;\r\n    function enter(address account) external;\r\n    function notifyReward(uint reward) external;\r\n}\r\n\r\n// File: contracts\\interface\\ILiquidate.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface ILiquidate {\r\n    function liquidate(address account) external;\r\n}\r\n\r\n// File: contracts\\Tunnel.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ncontract Tunnel is Ownable, Pausable, ITunnel, ILiquidate {\r\n    using SafeMath for uint256;\r\n    using SafeDecimalMath for uint256;\r\n\r\n    IAddressResolver addrResolver;\r\n    bytes32 public constant BORINGDAO = \"BoringDAO\";\r\n    // BTOKEN_BTC\r\n    bytes32 public override oTokenKey;\r\n    bytes32 public tunnelKey;\r\n    bytes32 public constant MINT_FEE = \"mint_fee\";\r\n    bytes32 public constant BURN_FEE = \"burn_fee\";\r\n    bytes32 public constant MINT_FEE_TRUSTEE = \"mint_fee_trustee\";\r\n    bytes32 public constant MINT_FEE_PLEDGER = \"mint_fee_pledger\";\r\n    bytes32 public constant MINT_FEE_DEV = \"mint_fee_dev\";\r\n    bytes32 public constant BURN_FEE_INSURANCE = \"burn_fee_insurance\";\r\n    bytes32 public constant BURN_FEE_PLEDGER = \"burn_fee_pledger\";\r\n    bytes32 public constant FEE_POOL = \"FeePool\";\r\n    bytes32 public constant INSURANCE_POOL = \"InsurancePool\";\r\n    bytes32 public constant DEV_ADDRESS = \"DevUser\";\r\n    bytes32 public constant ADDRESS_BOOK = \"AddressBook\";\r\n    bytes32 public constant ORACLE = \"Oracle\";\r\n    bytes32 public constant BOR = \"BOR\";\r\n    bytes32 public constant PLEDGE_RATE = \"pledge_rate\";\r\n    bytes32 public constant NETWORK_FEE = \"network_fee\";\r\n    bytes32 public constant PLEDGE_TOKEN = \"oBTC-PPT\";\r\n    bytes32 public constant PARAM_BOOK = \"ParamBook\";\r\n    bytes32 public constant TRUSTEE_FEE_POOL = \"TrusteeFeePool\";\r\n    bytes32 public constant SATELLITE_POOL_FACTORY = \"BTCSatellitePoolFactory\";\r\n    bytes32 public constant LIQUIDATION = \"Liquidation\";\r\n\r\n    mapping(address => uint) public borPledgeInfo;\r\n    // total pledge value in one token\r\n    uint256 public totalPledgeBOR;\r\n\r\n    // burn mini limit\r\n    uint256 public burnMiniLimit=1e15;\r\n    uint256 public redeemLockTxLimit=5;\r\n\r\n    struct PledgerInfo {\r\n        uint256 amount;\r\n        uint256 feeDebt;\r\n    }\r\n\r\n    struct LockAmount{\r\n        uint unlockTime;\r\n        uint amount;\r\n    }\r\n    mapping(address=>LockAmount[]) public lockInfo;\r\n\r\n    uint256 public lockDuration = 86400;\r\n\r\n    constructor(\r\n        IAddressResolver _addrResolver,\r\n        bytes32 _oTokenKey,\r\n        bytes32 _tunnelKey\r\n    ) public {\r\n        addrResolver = _addrResolver;\r\n        oTokenKey = _oTokenKey;\r\n        tunnelKey = _tunnelKey;\r\n        _pause();\r\n    }\r\n\r\n    // view\r\n    function otokenMintBurn() internal view returns (IMintBurn) {\r\n        return IMintBurn(addrResolver.requireAndKey2Address(oTokenKey, \"Tunnel::otokenMintBurn: oToken contract not exist in Tunnel\"));\r\n    }\r\n\r\n    function otokenERC20() internal view returns (IERC20) {\r\n        return IERC20(addrResolver.requireAndKey2Address(oTokenKey, \"Tunnel::otokenERC20: oToken contract not exist in Tunnel\"));\r\n    }\r\n\r\n    function borERC20() internal view returns (IERC20) {\r\n        return IERC20(addrResolver.requireAndKey2Address(BOR, \"borERC20::borERC20: BOR contract not exist in Tunnel\"));\r\n    }\r\n\r\n    function boringDAO() internal view returns (IBoringDAO) {\r\n        return IBoringDAO(addrResolver.key2address(BORINGDAO));\r\n    }\r\n\r\n    function oracle() internal view returns (IOracle) {\r\n        return IOracle(addrResolver.key2address(ORACLE));\r\n    }\r\n\r\n    function ppTokenMintBurn() internal view returns (IMintBurn) {\r\n        return IMintBurn(addrResolver.key2address(PLEDGE_TOKEN));\r\n    }\r\n\r\n    function ppTokenERC20() internal view returns (IERC20) {\r\n        return IERC20(addrResolver.key2address(PLEDGE_TOKEN));\r\n    }\r\n\r\n    function feePool() internal view returns (IFeePool) {\r\n        return IFeePool(addrResolver.key2address(FEE_POOL));\r\n    }\r\n\r\n    function trusteeFeePool() internal view returns (ITrusteeFeePool) {\r\n        return ITrusteeFeePool(addrResolver.requireAndKey2Address(TRUSTEE_FEE_POOL, \"Tunnel::trusteeFeePool is address(0)\"));\r\n    }\r\n\r\n    function paramBook() internal view returns (ParamBook) {\r\n        return ParamBook(addrResolver.key2address(PARAM_BOOK));\r\n    }\r\n\r\n    function getRate(bytes32 name) internal view returns (uint256) {\r\n        return paramBook().params2(tunnelKey, name);\r\n    }\r\n\r\n    function satellitePoolFactory() internal view returns(IStakingRewardsFactory) {\r\n        return IStakingRewardsFactory(addrResolver.key2address(SATELLITE_POOL_FACTORY));\r\n    }\r\n\r\n    function totalValuePledge() public override view returns (uint256) {\r\n        uint256 borPrice = oracle().getPrice(BOR);\r\n        return totalPledgeBOR.multiplyDecimal(borPrice);\r\n    }\r\n\r\n    function userLockLength(address account) public view returns (uint) {\r\n        return lockInfo[account].length;\r\n    }\r\n\r\n    function userLockAmount() public view returns(uint256, uint256) {\r\n        uint lock;\r\n        uint unlock;\r\n        for (uint i=0; i<lockInfo[msg.sender].length; i++) {\r\n            if(block.timestamp >= lockInfo[msg.sender][i].unlockTime) {\r\n                unlock = unlock.add(lockInfo[msg.sender][i].amount);\r\n            } else {\r\n                lock = lock.add(lockInfo[msg.sender][i].amount);\r\n            }\r\n        }\r\n        return (lock, unlock);\r\n    }\r\n\r\n    // todo\r\n\r\n    // duration should bigger than lockDuration\r\n    function setLockDuration(uint duration) public onlyOwner {\r\n        lockDuration = duration;\r\n    }\r\n\r\n    function setRedeemLockTxLimit(uint limit) public onlyOwner {\r\n            redeemLockTxLimit = limit;\r\n    }\r\n\r\n    function setBurnMiniLimit(uint amount) public onlyOwner {\r\n        burnMiniLimit = amount;\r\n    }\r\n\r\n    function pledge(address account, uint256 amount)\r\n        external\r\n        override\r\n        onlyBoringDAO\r\n    {\r\n        borPledgeInfo[account] = borPledgeInfo[account].add(amount);\r\n        totalPledgeBOR = totalPledgeBOR.add(amount);\r\n        // mint pledge token\r\n        ppTokenMintBurn().mint(account, amount);\r\n        feePool().notifyPTokenAmount(account, amount);\r\n        emit PledgeSuccess(account, amount);\r\n    }\r\n\r\n    function redeem(address account, uint256 amount)\r\n        external\r\n        override\r\n        onlyBoringDAO\r\n    {\r\n        require(\r\n            ppTokenERC20().balanceOf(account) >= amount,\r\n            \"Tunnel::redeem: not enough pledge provider token\"\r\n        );\r\n        require(borPledgeInfo[account] >= amount, \"Tunnel:redeem: Not enough bor amount\");\r\n        require(lockInfo[account].length < redeemLockTxLimit, \"Tunnel::redeem: A user can only redeem at most five redeem, try again after extraction\");\r\n        borPledgeInfo[account] = borPledgeInfo[account].sub(amount);\r\n        // send fee and burn ptoken\r\n        // pledge token and fee\r\n        // burn ptoken and tansfer back BOR\r\n        lock(account, amount, block.timestamp.add(lockDuration));\r\n        ppTokenMintBurn().burn(account, amount);\r\n        feePool().withdraw(account, amount);\r\n        emit RedeemSuccess(account, amount);\r\n    }\r\n\r\n    function lock(address account, uint amount, uint unlockTime) internal {\r\n        lockInfo[account].push(LockAmount(unlockTime, amount));\r\n    }\r\n\r\n    function withdrawUnlock() public {\r\n        uint unlock;\r\n        uint  i = 0;\r\n        while (i!=lockInfo[msg.sender].length) {\r\n            if (block.timestamp >= lockInfo[msg.sender][i].unlockTime) {\r\n                unlock = unlock.add(lockInfo[msg.sender][i].amount);\r\n                lockInfo[msg.sender][i] = lockInfo[msg.sender][lockInfo[msg.sender].length.sub(1)];\r\n                lockInfo[msg.sender].pop();\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n        if (unlock > 0 ) {\r\n            totalPledgeBOR = totalPledgeBOR.sub(unlock);\r\n            borERC20().transfer(msg.sender, unlock);\r\n            emit WithdrawUnlockSuccess(\r\n                msg.sender,\r\n                unlock\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    // when approved then issue\r\n    function issue(address account, uint256 amount)\r\n        external\r\n        override\r\n        onlyBoringDAO\r\n    {\r\n        //network fee\r\n        uint networkFee = paramBook().params2(tunnelKey, NETWORK_FEE);\r\n        // calculate fee\r\n        uint256 mintFeeRation = getRate(MINT_FEE);\r\n        uint256 mintFeeAmount = amount.multiplyDecimal(mintFeeRation);\r\n        uint256 mintAmount = amount.sub(mintFeeAmount).sub(networkFee);\r\n        otokenMintBurn().mint(account, mintAmount);\r\n        // handle fee\r\n        // trustee fee\r\n        uint256 mintFeeTrusteeRatio = getRate(MINT_FEE_TRUSTEE);\r\n        uint256 mintFeeTrusteeAmount = mintFeeAmount.multiplyDecimal(mintFeeTrusteeRatio).add(networkFee);\r\n        otokenMintBurn().mint(address(trusteeFeePool()), mintFeeTrusteeAmount);\r\n        trusteeFeePool().notifyReward(mintFeeTrusteeAmount);\r\n\r\n        // fee to pledger\r\n        uint256 mintFeePledgerRation = getRate(MINT_FEE_PLEDGER);\r\n        uint256 mintFeePledgerAmount = mintFeeAmount.multiplyDecimal(\r\n            mintFeePledgerRation\r\n        );\r\n        address feePoolAddress = address(feePool());\r\n        otokenMintBurn().mint(feePoolAddress, mintFeePledgerAmount);\r\n        feePool().notifyBTokenFeeAmount(mintFeePledgerAmount);\r\n\r\n\r\n        // to developer team\r\n        uint256 mintFeeDevRation = getRate(MINT_FEE_DEV);\r\n        uint256 mintFeeDevAmount = mintFeeAmount.multiplyDecimal(\r\n            mintFeeDevRation\r\n        );\r\n        address devAddress = addrResolver.key2address(DEV_ADDRESS);\r\n\r\n        otokenMintBurn().mint(devAddress, mintFeeDevAmount);\r\n    }\r\n\r\n\r\n    function burn(address account, uint256 amount, string memory assetAddress) external override onlyBoringDAO{\r\n        require(amount>=burnMiniLimit, \"Tunnel::burn: the amount too small\");\r\n        uint256 burnFeeAmountBToken = amount.multiplyDecimal(getRate(BURN_FEE));\r\n        // convert to bor amount\r\n        uint burnFeeAmount = oracle().getPrice(tunnelKey).multiplyDecimal(burnFeeAmountBToken).divideDecimal(oracle().getPrice(BOR));\r\n\r\n        // insurance apart\r\n        address insurancePoolAddress = addrResolver.key2address(INSURANCE_POOL);\r\n        uint256 burnFeeAmountInsurance = burnFeeAmount.multiplyDecimal(\r\n            getRate(BURN_FEE_INSURANCE)\r\n        );\r\n\r\n\r\n        // pledger apart\r\n        uint256 burnFeeAmountPledger = burnFeeAmount.multiplyDecimal(\r\n            getRate(BURN_FEE_PLEDGER)\r\n        );\r\n        borERC20().transferFrom(\r\n            account,\r\n            insurancePoolAddress,\r\n            burnFeeAmountInsurance\r\n        );\r\n        //fee to feepool\r\n        borERC20().transferFrom(\r\n            account,\r\n            address(feePool()),\r\n            burnFeeAmountPledger\r\n        );\r\n        feePool().notifyBORFeeAmount(burnFeeAmountPledger);\r\n        // otoken burn\r\n        otokenMintBurn().burn(account, amount);\r\n        emit BurnOToken(\r\n            account,\r\n            amount,\r\n            boringDAO().getRandomTrustee(),\r\n            assetAddress\r\n        );\r\n    }\r\n\r\n    function totalTVL() public view returns(uint) {\r\n        uint256 borTVL = totalValuePledge();\r\n        uint satelliteTVL = satellitePoolFactory().satelliteTVL();\r\n        return borTVL.add(satelliteTVL);\r\n    }\r\n    \r\n    function pledgeRatio() public view returns(uint) {\r\n        uint tvl = totalTVL();\r\n        uint btokenValue = otokenERC20().totalSupply().multiplyDecimal(oracle().getPrice(tunnelKey));\r\n        if (btokenValue == 0) {\r\n            return 0;\r\n        }\r\n        return tvl.divideDecimal(btokenValue);\r\n    }\r\n\r\n    function canIssueAmount() external override view returns (uint256) {\r\n        // satellite pool tvl\r\n        uint total = totalTVL();\r\n        uint256 pledgeRate = paramBook().params2(tunnelKey, PLEDGE_RATE);\r\n        uint256 canIssueValue = total.divideDecimal(pledgeRate);\r\n        uint256 tunnelKeyPrice = oracle().getPrice(tunnelKey);\r\n        return canIssueValue.divideDecimal(tunnelKeyPrice);\r\n    }\r\n\r\n    function liquidate(address account) public override onlyLiquidation {\r\n        borERC20().transfer(account, totalPledgeBOR);\r\n    }\r\n\r\n    function unpause() public returns (bool) {\r\n        if (totalPledgeBOR >= 3000e18) {\r\n            _unpause();\r\n        } \r\n        return paused();\r\n    }\r\n\r\n    modifier onlyBoringDAO {\r\n        require(msg.sender == addrResolver.key2address(BORINGDAO));\r\n        _;\r\n    }\r\n\r\n    modifier onlyLiquidation {\r\n        require(msg.sender == addrResolver.requireAndKey2Address(LIQUIDATION, \"Tunnel::liquidation contract no exist\"));\r\n        _;\r\n    }\r\n\r\n    event BurnOToken(\r\n        address indexed account,\r\n        uint256 amount,\r\n        address proposer,\r\n        string assetAddress\r\n    );\r\n\r\n    event WithdrawUnlockSuccess(\r\n        address account,\r\n        uint    amount\r\n    );\r\n\r\n     event PledgeSuccess(\r\n         address account,\r\n         uint   amount\r\n     );\r\n\r\n    event RedeemSuccess(\r\n        address account,\r\n        uint amount\r\n    );\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"_addrResolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_oTokenKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tunnelKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetAddress\",\"type\":\"string\"}],\"name\":\"BurnOToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PledgeSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnlockSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_BOOK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORINGDAO\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_FEE_INSURANCE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_FEE_PLEDGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_ADDRESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSURANCE_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FEE_DEV\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FEE_PLEDGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FEE_TRUSTEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NETWORK_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARAM_BOOK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLEDGE_RATE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLEDGE_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SATELLITE_POOL_FACTORY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTEE_FEE_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borPledgeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetAddress\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMiniLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canIssueAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oTokenKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemLockTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBurnMiniLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setRedeemLockTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPledgeBOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValuePledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tunnelKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userLockLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Tunnel","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000065dfd6117bcd70a0fe37a715de75aae38eb50e486f425443000000000000000000000000000000000000000000000000000000004254430000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b742445b9bc2e3ff7cb859204f3744d7a2401769406277bf524e016d0b148d6c"}]}