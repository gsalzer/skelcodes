{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow.\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow.\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow.\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero.\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero.\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\r\n\tuint256 public _totalSupply;\r\n\tmapping (address => uint256) public _balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public _allowance;\r\n\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals) public {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balanceOf[account];\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowance[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public override returns (bool _success) {\r\n\t\t_allowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public override returns (bool _success) {\r\n\t\trequire(_to != address(0), \"ERC20: Recipient address is null.\");\r\n\t\t_balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n\t\t_balanceOf[_to] = _balanceOf[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public override returns (bool _success) {\r\n\t\trequire(_to != address(0), \"ERC20: Recipient address is null.\");\r\n\t\t_balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n\t\t_balanceOf[_to] = _balanceOf[_to].add(_value);\r\n\t\t_allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _mint(address _to, uint256 _amount) internal {\r\n\t\t_totalSupply = _totalSupply.add(_amount);\r\n\t\t_balanceOf[_to] = _balanceOf[_to].add(_amount);\r\n\t\temit Transfer(address(0), _to, _amount);\r\n\t}\r\n\r\n\tfunction _burn(address _from, uint256 _amount) internal {\r\n\t\trequire(_from != address(0), \"ERC20: Burning from address 0.\");\r\n\t\t_balanceOf[_from] = _balanceOf[_from].sub(_amount, \"ERC20: burn amount exceeds balance.\");\r\n\t\t_totalSupply = _totalSupply.sub(_amount);\r\n\t\temit Transfer(_from, address(0), _amount);\r\n\t}\r\n}\r\n\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\tconstructor () public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"Not owner\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction setOwnership(address _newOwner) external onlyOwner {\r\n\t\towner = _newOwner;\r\n\t}\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\tbool public isPaused;\r\n\t\r\n\tconstructor () public {\r\n\t\tisPaused = false;\r\n\t}\r\n\t\r\n\tmodifier notPaused() {\r\n\t\trequire(!isPaused, \"paused\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction pause() external onlyOwner {\r\n\t\tisPaused = true;\r\n\t}\r\n\t\r\n\tfunction unpause() external onlyOwner {\r\n\t\tisPaused = false;\r\n\t}\r\n}\r\n\r\ninterface ILeviathanClaim {\r\n    function release(uint256 payID) external;\r\n    function totalReleased() external view returns (uint256);\r\n    function released(uint256 payID) external view returns (uint256);\r\n}\r\n\r\ncontract WrappedLeviathan is ERC20(\"Wrapped Leviathan\", \"WLEV\", 18), Pausable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tIERC721 public constant LEVIATHAN = IERC721(0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc);\r\n    address private _leviathanClaim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\r\n    address private _surf = 0xEa319e87Cf06203DAe107Dd8E5672175e3Ee976c;\r\n\r\n\tuint256[] public leviathans;\r\n\r\n\tevent LeviathanWrapped(uint256 leviathanID);\r\n\tevent LeviathanUnwrapped(uint256 leviathanID);\r\n\r\n    function _getSeed(uint256 _seed, address _sender) internal view returns (uint256) {\r\n\t\tif (_seed == 0)\r\n\t\t\treturn uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _sender)));\r\n\t\telse\r\n\t\t\treturn uint256(keccak256(abi.encodePacked(_seed)));\r\n\t}\r\n\r\n    function checkClaim(uint ID)\r\n    public view returns (uint256) {\r\n        uint256 totalReleased = ILeviathanClaim(_leviathanClaim).totalReleased();\r\n        uint256 released = ILeviathanClaim(_leviathanClaim).released(ID);\r\n        uint256 totalReceived = IERC20(_surf).balanceOf(_leviathanClaim).add(totalReleased);\r\n        return totalReceived.mul(1).div(333).sub(released);\r\n    }\r\n\r\n\tfunction wrap(uint256[] calldata _leviathansToWrap) public notPaused {\r\n\t\tfor (uint256 i = 0; i < _leviathansToWrap.length; i++) {\r\n\t\t\trequire(_leviathansToWrap[i] >= 1 && _leviathansToWrap[i] <= 333, \"WrappedLeviathan: Invalid ID.\");\r\n\t\t\tleviathans.push(_leviathansToWrap[i]);\r\n\t\t\tLEVIATHAN.transferFrom(msg.sender, address(this), _leviathansToWrap[i]);\r\n\r\n            if(checkClaim(_leviathansToWrap[i]) > 0 )\r\n                ILeviathanClaim(_leviathanClaim).release(_leviathansToWrap[i]);\r\n            \r\n\t\t\temit LeviathanWrapped(_leviathansToWrap[i]);\r\n\t\t}\r\n\t\t_mint(msg.sender, _leviathansToWrap.length * (10**uint256(decimals)));\r\n\r\n        uint surfBalance = IERC20(_surf).balanceOf(address(this));\r\n        if(surfBalance > 0)\r\n            IERC20(_surf).transfer(_leviathanClaim, surfBalance);\r\n\t}\r\n\r\n\tfunction unwrap(uint256 _amount) public notPaused{\r\n\t\tunwrapFor(_amount, msg.sender);\r\n\t}\r\n\r\n\tfunction unwrapFor(uint256 _amount, address _recipient) public notPaused {\r\n\t\trequire(_recipient != address(0), \"WrappedLeviathan: Cannot send to void address.\");\r\n\r\n\t\t_burn(msg.sender, _amount * (10**uint256(decimals)));\r\n\t\tuint256 _seed = 0;\r\n\t\tfor (uint256 i = 0; i < _amount; i++) {\r\n\t\t\t_seed = _getSeed(_seed, msg.sender);\r\n\t\t\tuint256 _index = _seed % leviathans.length;\r\n\t\t\tuint256 _tokenId = leviathans[_index];\r\n\r\n\t\t\tleviathans[_index] = leviathans[leviathans.length - 1];\r\n\t\t\tleviathans.pop();\r\n\r\n            if(checkClaim(_tokenId) > 0)\r\n                ILeviathanClaim(_leviathanClaim).release(_tokenId);\r\n\r\n\t\t\tLEVIATHAN.transferFrom(address(this), _recipient, _tokenId);\r\n\r\n\t\t\temit LeviathanUnwrapped(_tokenId);\r\n\t\t}\r\n\r\n        uint surfBalance = IERC20(_surf).balanceOf(address(this));\r\n        if(surfBalance > 0)\r\n            IERC20(_surf).transfer(_leviathanClaim, surfBalance);\r\n\t}\r\n\r\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes calldata _data) external view returns (bytes4) {\r\n\t\trequire(msg.sender == address(LEVIATHAN), \"Not Leviathan NFT\");\r\n\t\treturn WrappedLeviathan.onERC721Received.selector;\r\n\t}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leviathanID\",\"type\":\"uint256\"}],\"name\":\"LeviathanUnwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leviathanID\",\"type\":\"uint256\"}],\"name\":\"LeviathanWrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LEVIATHAN\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"checkClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leviathans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"unwrapFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_leviathansToWrap\",\"type\":\"uint256[]\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WrappedLeviathan","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://891047a6444a0f084ad4906679029ac0624d5f7c43482db9feed9eb299020836"}]}