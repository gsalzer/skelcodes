{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.x;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Token_interface {\r\n    function owner() public view virtual returns (address);\r\n\r\n    function decimals() public view virtual returns (uint8);\r\n\r\n    function balanceOf(address who) public view virtual returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public virtual returns (bool);\r\n\r\n    function allowance(address _owner, address _spender) public virtual returns (uint);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public virtual returns (bool);\r\n}\r\n\r\ncontract MultiSigPermission is Context {\r\n\r\n    uint constant public MAX_OWNER_COUNT = 3;\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event SignRoleAddition(address indexed signRoleAddress);\r\n    event SignRoleRemoval(address indexed signRoleAddress);\r\n    event RequirementChange(uint required);\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isSignRole;\r\n    address[] public signRoleAddresses;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    modifier signRoleAddresseExists(address signRoleAddress) {\r\n        require(isSignRole[signRoleAddress], \"Role doesn't exists\");\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        require(transactions[transactionId].destination != address(0), \"Transaction doesn't exists\");\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address signRoleAddress) {\r\n        require(confirmations[transactionId][signRoleAddress], \"Transaction didn't confirm\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address signRoleAddress) {\r\n        require(!confirmations[transactionId][signRoleAddress], \"Transaction already confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        require(!transactions[transactionId].executed, \"Transaction already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0), \"address is 0\");\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint signRoleAddresseCount, uint _required) {\r\n        require(signRoleAddresseCount <= MAX_OWNER_COUNT\r\n            && _required <= signRoleAddresseCount\r\n            && _required != 0\r\n            && signRoleAddresseCount != 0, \"Not valid required count\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint _required)\r\n    {\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        view returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<signRoleAddresses.length; i++) {\r\n            if (confirmations[transactionId][signRoleAddresses[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function checkSignRoleExists(address signRoleAddress)\r\n        public\r\n        view returns (bool)\r\n    {\r\n        return isSignRole[signRoleAddress];\r\n    }\r\n\r\n\r\n\r\n    /// @dev Allows an signRoleAddress to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        signRoleAddresseExists(_msgSender())\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, _msgSender())\r\n    {\r\n        confirmations[transactionId][_msgSender()] = true;\r\n        Confirmation(_msgSender(), transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        private\r\n        signRoleAddresseExists(_msgSender())\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            transactions[transactionId].executed = true;\r\n            (bool success,) = transactions[transactionId].destination.call{value : transactions[transactionId].value}(transactions[transactionId].data);\r\n            if (success)\r\n                Execution(transactionId);\r\n            else {\r\n                ExecutionFailure(transactionId);\r\n                transactions[transactionId].executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    function addTransaction(address destination, uint value, bytes memory data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        Submission(transactionId);\r\n    }\r\n\r\n    function submitTransaction(address destination, uint value, bytes memory data)\r\n        internal\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    function addSignRole(address signRoleAddress)\r\n        internal\r\n    {\r\n        require(signRoleAddress != address(0), \"Address cannot be null\");\r\n        require(signRoleAddresses.length + 1 <= MAX_OWNER_COUNT, \"Address qty cannot be more then max admins value\");\r\n        require(!checkSignRoleExists(signRoleAddress), \"Address already exists\");\r\n\r\n        isSignRole[signRoleAddress] = true;\r\n        signRoleAddresses.push(signRoleAddress);\r\n        SignRoleAddition(signRoleAddress);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract AdminRole is Context, MultiSigPermission {\r\n\r\n    uint constant public REQUIRED_CONFIRMATIONS_COUNT = 2;\r\n    \r\n    constructor () MultiSigPermission(REQUIRED_CONFIRMATIONS_COUNT) {\r\n        addSignRole(_msgSender());\r\n        addSignRole(address(0x42586d48C29651f32FC65b8e1D1d0E6ebAD28206));\r\n        addSignRole(address(0x160e529055D084add9634fE1c2059109c8CE044e));\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(checkSignRoleExists(_msgSender()), \"you don't have permission to perform that action\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\nlibrary TxDataBuilder {\r\n    string constant public RTTD_FUNCHASH = '0829d713'; // WizRefund - refundTokensTransferredDirectly\r\n    string constant public EFWD_FUNCHASH = 'eee48b02'; // WizRefund - clearFinalWithdrawData\r\n    string constant public FR_FUNCHASH =   '492b2b37'; // WizRefund - forceRegister\r\n    string constant public RP_FUNCHASH =   '422a042e'; // WizRefund - revertPhase\r\n    string constant public WETH_FUNCHASH =   '4782f779'; // WizRefund - withdrawETH\r\n\r\n    function uint2bytes32(uint256 x)\r\n        public\r\n        pure returns (bytes memory b) {\r\n            b = new bytes(32);\r\n            assembly { mstore(add(b, 32), x) }\r\n    }\r\n    \r\n    function uint2bytes8(uint256 x)\r\n        public\r\n        pure returns (bytes memory b) {\r\n            b = new bytes(32);\r\n            assembly { mstore(add(b, 32), x) }\r\n    }\r\n    \r\n    function concatb(bytes memory self, bytes memory other)\r\n        public\r\n        pure returns (bytes memory) {\r\n             return bytes(abi.encodePacked(self, other));\r\n        }\r\n        \r\n    // Convert an hexadecimal character to their value\r\n    function fromHexChar(uint8 c) public pure returns (uint8) {\r\n        if (bytes1(c) >= bytes1('0') && bytes1(c) <= bytes1('9')) {\r\n            return c - uint8(bytes1('0'));\r\n        }\r\n        if (bytes1(c) >= bytes1('a') && bytes1(c) <= bytes1('f')) {\r\n            return 10 + c - uint8(bytes1('a'));\r\n        }\r\n        if (bytes1(c) >= bytes1('A') && bytes1(c) <= bytes1('F')) {\r\n            return 10 + c - uint8(bytes1('A'));\r\n        }\r\n        require(false, \"unknown variant\");\r\n    }\r\n    \r\n    // Convert an hexadecimal string to raw bytes\r\n    function fromHex(string memory s) public pure returns (bytes memory) {\r\n        bytes memory ss = bytes(s);\r\n        require(ss.length%2 == 0); // length must be even\r\n        bytes memory r = new bytes(ss.length/2);\r\n        for (uint i=0; i<ss.length/2; ++i) {\r\n            r[i] = bytes1(fromHexChar(uint8(ss[2*i])) * 16 +\r\n                        fromHexChar(uint8(ss[2*i+1])));\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function buildData(string memory function_hash, uint256[] memory argv)\r\n        public\r\n        pure returns (bytes memory data){\r\n            bytes memory f = fromHex(function_hash);\r\n            data = concatb(data, f);\r\n            for(uint i=0;i<argv.length;i++){\r\n                bytes memory d = uint2bytes32(argv[i]);\r\n                data = concatb(data, d);\r\n            }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract WizRefund is Context, Ownable, AdminRole {\r\n    using SafeMath for uint256;\r\n    \r\n    modifier selfCall() {\r\n        require(_msgSender() == address(this), \"You cannot call this method\");\r\n        _;\r\n    }\r\n\r\n    uint256 constant PHASES_COUNT = 4;\r\n    uint256 private _token_exchange_rate = 273789679021000; //0.000273789679021 ETH per 1 token\r\n    uint256 private _totalburnt = 0;\r\n    uint256 public final_distribution_balance;\r\n    uint256 public sum_burnt_amount_registered;\r\n\r\n    address payable[] private _participants;\r\n\r\n    mapping(address => uint256) private _burnt_amounts;\r\n    mapping(address => bool) private _participants_with_request;\r\n    mapping(address => bool) private _is_final_withdraw;\r\n\r\n    struct PhaseParams {\r\n        string NAME;\r\n        bool IS_STARTED;\r\n        bool IS_FINISHED;\r\n    }\r\n    PhaseParams[] public phases;\r\n\r\n    Token_interface public token;\r\n\r\n    event BurningRequiredValues(uint256 allowed_value, uint256 topay_value, address indexed sc_address, uint256 sc_balance);\r\n    event LogWithdrawETH(address indexed wallet, uint256 amount);\r\n    event LogRefundValue(address indexed wallet, uint256 amount);\r\n\r\n    constructor () {\r\n\r\n        token = Token_interface(address(0x2F9b6779c37DF5707249eEb3734BbfC94763fBE2));\r\n\r\n        // 0 - first\r\n        PhaseParams memory phaseInitialize;\r\n        phaseInitialize.NAME = \"Initialize\";\r\n        phaseInitialize.IS_STARTED = true;\r\n        phases.push(phaseInitialize);\r\n\r\n        // 1 - second\r\n        // tokens exchanging is active in this phase, tokenholders may burn their tokens using\r\n        //           method approve(params: this SC address, amount in\r\n        //           uint256) method in Token SC, then he/she has to call refund()\r\n        //           method in this SC, all tokens from amount will be exchanged and the\r\n        //           tokenholder will receive his/her own ETH on his/her own address\r\n        // if somebody accidentally sent tokens to this SC directly you may use\r\n        //           refundTokensTransferredDirectly(params: tokenholder ETH address, amount in\r\n        //           uint256) method with mandatory multisignatures\r\n        PhaseParams memory phaseFirst;\r\n        phaseFirst.NAME = \"the First Phase\";\r\n        phases.push(phaseFirst);\r\n\r\n        // 2 - third\r\n        // in this phase tokeholders who exchanged their own tokens in phase 1 may claim a\r\n        // remaining ETH stake with register() method\r\n        PhaseParams memory phaseSecond;\r\n        phaseSecond.NAME = \"the Second Phase\";\r\n        phases.push(phaseSecond);\r\n\r\n        // 3 - last\r\n        // this is a final distribution phase. Everyone who left the request during the\r\n        // phase 2 with register() method will get remaining ETH amount\r\n        // in proportion to their exchanged tokens\r\n        PhaseParams memory phaseFinal;\r\n        phaseFinal.NAME = \"Final\";\r\n        phases.push(phaseFinal);\r\n        \r\n    }\r\n\r\n    //\r\n    // ####################################\r\n    //\r\n\r\n    //only owner or admins can top up the smart contract with ETH\r\n    receive() external payable {\r\n        require(checkSignRoleExists(_msgSender()), \"the contract can't obtain ETH from this address\");\r\n    }\r\n\r\n    // owner or admin may withdraw ETH from this SC, multisig is mandatory\r\n    function withdrawETH(address payable recipient, uint256 value) external selfCall {\r\n        require(address(this).balance >= value, \"Insufficient funds\");\r\n        (bool success,) = recipient.call{value : value}(\"\");\r\n        require(success, \"Transfer failed\");\r\n        emit LogWithdrawETH(msg.sender, value);\r\n    }\r\n\r\n    function getExchangeRate() external view returns (uint256){\r\n        return _token_exchange_rate;\r\n    }\r\n\r\n    function getBurntAmountByAddress(address holder) public view returns (uint256){\r\n        return _burnt_amounts[holder];\r\n    }\r\n\r\n    function getBurntAmountTotal() external view returns (uint256) {\r\n        return _totalburnt;\r\n    }\r\n\r\n    function getParticipantAddressByIndex(uint256 index) external view returns (address){\r\n        return _participants[index];\r\n    }\r\n\r\n    function getNumberOfParticipants() public view returns (uint256){\r\n        return _participants.length;\r\n    }\r\n\r\n    function isRegistration(address participant) public view returns (bool){\r\n        return _participants_with_request[participant];\r\n    }\r\n\r\n    //\r\n    // ####################################\r\n    //\r\n    // tokenholder has to call approve(params: this SC address, amount in uint256)\r\n    // method in Token SC, then he/she has to call refund() method in this\r\n    // SC, all tokens from amount will be exchanged and the tokenholder will receive\r\n    // his/her own ETH on his/her own address\r\n    function refund() external {\r\n        // First phase\r\n        uint256 i = getCurrentPhaseIndex();\r\n        require(i == 1 && !phases[i].IS_FINISHED, \"Not Allowed phase\");\r\n\r\n        address payable sender = _msgSender();\r\n        uint256 value = token.allowance(sender, address(this));\r\n\r\n        require(value > 0, \"Not Allowed value\");\r\n\r\n        uint256 topay_value = value.mul(_token_exchange_rate).div(10 ** 18);\r\n        BurningRequiredValues(value, topay_value, address(this), address(this).balance);\r\n        require(address(this).balance >= topay_value, \"Insufficient funds\");\r\n\r\n        require(token.transferFrom(sender, address(0), value), \"Insufficient approve() value\");\r\n\r\n        if (_burnt_amounts[sender] == 0) {\r\n            _participants.push(sender);\r\n        }\r\n\r\n        _burnt_amounts[sender] = _burnt_amounts[sender].add(value);\r\n        _totalburnt = _totalburnt.add(value);\r\n\r\n        (bool success,) = sender.call{value : topay_value}(\"\");\r\n        require(success, \"Transfer failed\");\r\n        emit LogRefundValue(msg.sender, topay_value);\r\n    }\r\n\r\n    // if somebody accidentally sends tokens to this SC directly you may use\r\n    // burnTokensTransferredDirectly(params: tokenholder ETH address, amount in\r\n    // uint256)\r\n    function refundTokensTransferredDirectly(address payable participant, uint256 value) external selfCall {\r\n        uint256 i = getCurrentPhaseIndex();\r\n        require(i == 1, \"Not Allowed phase\");\r\n        // First phase\r\n\r\n        uint256 topay_value = value.mul(_token_exchange_rate).div(10 ** uint256(token.decimals()));\r\n        require(address(this).balance >= topay_value, \"Insufficient funds\");\r\n\r\n        require(token.transfer(address(0), value), \"Error with transfer\");\r\n\r\n        if (_burnt_amounts[participant] == 0) {\r\n            _participants.push(participant);\r\n        }\r\n\r\n        _burnt_amounts[participant] = _burnt_amounts[participant].add(value);\r\n        _totalburnt = _totalburnt.add(value);\r\n\r\n        (bool success,) = participant.call{value : topay_value}(\"\");\r\n        require(success, \"Transfer failed\");\r\n        emit LogRefundValue(participant, topay_value);\r\n    }\r\n\r\n    // This is a final distribution after phase 2 is fihished, everyone who left the\r\n    // request with register() method will get remaining ETH amount\r\n    // in proportion to their exchanged tokens\r\n    function startFinalDistribution(uint256 start_index, uint256 end_index) external onlyOwnerOrAdmin {\r\n        require(end_index < getNumberOfParticipants());\r\n        \r\n        uint256 j = getCurrentPhaseIndex();\r\n        require(j == 3 && !phases[j].IS_FINISHED, \"Not Allowed phase\");\r\n        // Final Phase\r\n\r\n        uint256 pointfix = 1000000000000000000;\r\n        // 10^18\r\n\r\n        for (uint i = start_index; i <= end_index; i++) {\r\n            if(!isRegistration(_participants[i]) || isFinalWithdraw(_participants[i])){\r\n                continue;\r\n            }\r\n            \r\n            uint256 piece = getBurntAmountByAddress(_participants[i]).mul(pointfix).div(sum_burnt_amount_registered);\r\n            uint256 value = final_distribution_balance.mul(piece).div(pointfix);\r\n            \r\n            if (value > 0) {\r\n                _is_final_withdraw[_participants[i]] = true;\r\n                (bool success,) = _participants[i].call{value : value}(\"\");\r\n                require(success, \"Transfer failed\");\r\n                emit LogWithdrawETH(_participants[i], value);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function isFinalWithdraw(address _wallet) public view returns (bool) {\r\n        return _is_final_withdraw[_wallet];\r\n    }\r\n    \r\n    function clearFinalWithdrawData(uint256 start_index, uint256 end_index) external selfCall{\r\n        require(end_index < getNumberOfParticipants());\r\n        \r\n        uint256 i = getCurrentPhaseIndex();\r\n        require(i == 3 && !phases[i].IS_FINISHED, \"Not Allowed phase\");\r\n        \r\n        for (uint j = start_index; j <= end_index; j++) {\r\n            if(isFinalWithdraw(_participants[j])){\r\n                _is_final_withdraw[_participants[j]] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // tokeholders who exchanged their own tokens in phase 1 may claim a remaining ETH stake\r\n    function register() external {\r\n        _write_register(_msgSender());\r\n    }\r\n\r\n    // admin can claim register() method instead of tokenholder\r\n    function forceRegister(address payable participant) external selfCall {\r\n        _write_register(participant);\r\n    }\r\n\r\n    function _write_register(address payable participant) private {\r\n        uint256 i = getCurrentPhaseIndex();\r\n        require(i == 2 && !phases[i].IS_FINISHED, \"Not Allowed phase\");\r\n        // Second phase\r\n\r\n        require(_burnt_amounts[participant] > 0, \"This address has not refunded tokens\");\r\n\r\n        _participants_with_request[participant] = true;\r\n        sum_burnt_amount_registered  = sum_burnt_amount_registered.add(getBurntAmountByAddress(participant));\r\n    }\r\n\r\n    function startNextPhase() external onlyOwnerOrAdmin {\r\n        uint256 i = getCurrentPhaseIndex();\r\n        require((i + 1) < PHASES_COUNT);\r\n        require(phases[i].IS_FINISHED);\r\n        phases[i + 1].IS_STARTED = true;\r\n        if (phases[2].IS_STARTED && !phases[2].IS_FINISHED && phases[1].IS_FINISHED) {\r\n            sum_burnt_amount_registered = 0;\r\n        }else if (phases[3].IS_STARTED && phases[2].IS_FINISHED) {\r\n            final_distribution_balance = address(this).balance;\r\n        }\r\n    }\r\n\r\n    function finishCurrentPhase() external onlyOwnerOrAdmin {\r\n        uint256 i = getCurrentPhaseIndex();\r\n        phases[i].IS_FINISHED = true;\r\n    }\r\n\r\n    // this method reverts the current phase to the previous one\r\n    function revertPhase() external selfCall {\r\n        uint256 i = getCurrentPhaseIndex();\r\n\r\n        require(i > 0, \"Initialize phase is already active\");\r\n\r\n        phases[i].IS_STARTED = false;\r\n        phases[i].IS_FINISHED = false;\r\n\r\n        phases[i - 1].IS_STARTED = true;\r\n        phases[i - 1].IS_FINISHED = false;\r\n    }\r\n\r\n    function getPhaseName() external view returns (string memory){\r\n        uint256 i = getCurrentPhaseIndex();\r\n        return phases[i].NAME;\r\n    }\r\n\r\n    function getCurrentPhaseIndex() public view returns (uint256){\r\n        uint256 current_phase = 0;\r\n        for (uint256 i = 0; i < PHASES_COUNT; i++)\r\n        {\r\n            if (phases[i].IS_STARTED) {\r\n                current_phase = i;\r\n            }\r\n        }\r\n        return current_phase;\r\n    }\r\n    \r\n    function _base_submitTx(bytes memory data)\r\n      private \r\n      returns (uint256 transactionId){\r\n        uint256 value = 0;\r\n        transactionId = submitTransaction(address(this), value, data);\r\n      }\r\n      \r\n    function submitTx_withdrawETH(address payable recipient, uint256 value)\r\n      public\r\n      onlyOwnerOrAdmin\r\n      returns (uint256 transactionId){\r\n        uint256[] memory f_args = new uint256[](2);\r\n        f_args[0] = uint256(recipient);\r\n        f_args[1] = value;\r\n        bytes memory data = TxDataBuilder.buildData(TxDataBuilder.WETH_FUNCHASH, f_args);\r\n        transactionId = _base_submitTx(data);\r\n      }\r\n    \r\n    function submitTx_revertPhase()\r\n      external\r\n      onlyOwnerOrAdmin\r\n      returns (uint256 transactionId){\r\n        uint256[] memory f_args = new uint256[](0);\r\n        bytes memory data = TxDataBuilder.buildData(TxDataBuilder.RP_FUNCHASH, f_args);\r\n        transactionId = _base_submitTx(data);\r\n      }\r\n    \r\n    function submitTx_forceRegister(address payable participant)\r\n      external\r\n      onlyOwnerOrAdmin\r\n      returns (uint256 transactionId){\r\n        uint256[] memory f_args = new uint256[](1);\r\n        f_args[0] = uint256(participant);\r\n        bytes memory data = TxDataBuilder.buildData(TxDataBuilder.FR_FUNCHASH, f_args);\r\n        transactionId = _base_submitTx(data);\r\n      }\r\n    \r\n    function submitTx_clearFinalWithdrawData(uint256 start_index, uint256 end_index)\r\n      external\r\n      onlyOwnerOrAdmin\r\n      returns (uint256 transactionId){\r\n        uint256[] memory f_args = new uint256[](2);\r\n        f_args[0] = start_index;\r\n        f_args[1] = end_index;\r\n        bytes memory data = TxDataBuilder.buildData(TxDataBuilder.EFWD_FUNCHASH, f_args);\r\n        transactionId = _base_submitTx(data);\r\n      }\r\n      \r\n    \r\n    function submitTx_refundTokensTransferredDirectly(address payable participant, uint256 value)\r\n      external\r\n      onlyOwnerOrAdmin\r\n      returns (uint256 transactionId){\r\n        uint256[] memory f_args = new uint256[](2);\r\n        f_args[0] = uint256(participant);\r\n        f_args[1] = value;\r\n        bytes memory data = TxDataBuilder.buildData(TxDataBuilder.RTTD_FUNCHASH, f_args);\r\n        transactionId = _base_submitTx(data);\r\n      }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowed_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topay_value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sc_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sc_balance\",\"type\":\"uint256\"}],\"name\":\"BurningRequiredValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRefundValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signRoleAddress\",\"type\":\"address\"}],\"name\":\"SignRoleAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signRoleAddress\",\"type\":\"address\"}],\"name\":\"SignRoleRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUIRED_CONFIRMATIONS_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signRoleAddress\",\"type\":\"address\"}],\"name\":\"checkSignRoleExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_index\",\"type\":\"uint256\"}],\"name\":\"clearFinalWithdrawData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"final_distribution_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishCurrentPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"forceRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getBurntAmountByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurntAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPhaseIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParticipantAddressByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isFinalWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isRegistration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSignRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"NAME\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"IS_STARTED\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"IS_FINISHED\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"refundTokensTransferredDirectly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revertPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signRoleAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_index\",\"type\":\"uint256\"}],\"name\":\"startFinalDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNextPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_index\",\"type\":\"uint256\"}],\"name\":\"submitTx_clearFinalWithdrawData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"submitTx_forceRegister\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"submitTx_refundTokensTransferredDirectly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitTx_revertPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"submitTx_withdrawETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sum_burnt_amount_registered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token_interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WizRefund","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"TxDataBuilder:457a04d3ec4314eeaff263502a212a35f19d59d7","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3ada0a849b8c6a40ea09e76fa8117247a933e59552bbf262665424afbab4d3bc"}]}