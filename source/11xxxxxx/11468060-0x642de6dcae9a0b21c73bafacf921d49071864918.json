{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DeflectorProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ncontract DeflectorProxy {\\n    bytes32 private constant implementationPosition = bytes32(uint256(keccak256(\\\"deflector.proxy.impl\\\")) - 1);\\n    bytes32 private constant proxyOwnerPosition = bytes32(uint256(keccak256(\\\"deflector.owner.impl\\\")) - 1);\\n\\n    constructor() public {\\n        _setUpgradeabilityOwner(msg.sender);\\n    }\\n\\n    function setup(address _implementation) external {\\n        require(msg.sender == proxyOwner());\\n        _setUpgradeabilityOwner(msg.sender);\\n        _setImplementation(_implementation);\\n    }\\n\\n    // setter to set the position of an implementation from the implementation position onwards\\n    function _setImplementation(address _newImplementation) internal {\\n        require(msg.sender == proxyOwner());\\n        bytes32 position = implementationPosition;\\n\\n        assembly {\\n            sstore(position, _newImplementation)\\n        }\\n    }\\n\\n    // retrieving the address at the implementation position\\n    function implementation() public view returns (address impl) {\\n        bytes32 position = implementationPosition;\\n        assembly {\\n            impl := sload(position)\\n        }\\n    }\\n\\n    function proxyOwner() public view returns (address owner) {\\n        bytes32 position = proxyOwnerPosition;\\n        assembly {\\n            owner := sload(position)\\n        }\\n    }\\n\\n    function _setUpgradeabilityOwner(address _newProxyOwner) private {\\n        bytes32 position = proxyOwnerPosition;\\n        assembly {\\n            sstore(position, _newProxyOwner)\\n        }\\n    }\\n\\n    fallback() external payable {\\n        address addr = implementation();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), addr, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeflectorProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}