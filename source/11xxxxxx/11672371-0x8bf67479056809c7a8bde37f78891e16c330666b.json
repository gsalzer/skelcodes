{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    function TokensPurchased(address buyer, uint256 amount) external  returns (bool success);\r\n    function burn(uint256 _value) external returns (bool success);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        \r\n        _notEntered = true;\r\n    }\r\n\r\n    \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        \r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract SLDS_CROWDSALE is Context, ReentrancyGuard{\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    address public governance;\r\n    \r\n    uint256 public rate;\r\n    uint256 private _weiRaised;\r\n    uint256 public totalSold;\r\n    IERC20 public tokenAddress;\r\n    //uint256 public startTime = 1608483600; //\r\n    //uint256 public endTime = 16084077611; //\r\n    \r\n    uint256 public minimumBuyAmount = 10 ** 10;\r\n    uint256 public maximumBuyAmount = 5 ether;\r\n    address payable public walletAddress;\r\n    event TokensPurchased(address indexed to, uint256 amount);\r\n    \r\n    constructor () public {\r\n        governance = tx.origin;\r\n        rate = uint256(100);\r\n        walletAddress = 0x8fB51eb64E6f121466E2c315feB0eD2A8185DBE8; //TEAM\r\n        tokenAddress = IERC20(0x0);\r\n    }\r\n    \r\n    function () external payable {\r\n        buy();\r\n    }\r\n    \r\n    function changeWallet (address payable _walletAddress) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        walletAddress = _walletAddress;\r\n    }\r\n    \r\n    function setToken(IERC20 _tokenAddress) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    function buy() public payable {\r\n        //require((block.timestamp > startTime ) && (block.timestamp < endTime)  , \"D01 Token Crowdsate is not active\");\r\n        uint256 weiValue = msg.value;\r\n        require((weiValue >= minimumBuyAmount) &&(weiValue<= maximumBuyAmount), \"Minimum amount is 0.1 eth and Maximum amount is 5 Eth\");\r\n        uint256 amount = weiValue.mul(rate);\r\n        _weiRaised = _weiRaised.add(weiValue);\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.safeTransfer(msg.sender, amount);\r\n        walletAddress.transfer(weiValue);\r\n        //require(walletAddress.send(weiValue)); //_fundRaisingWallet.transfer(msg.value);\r\n        //require(token.TokensPurchased(msg.sender, amount));\r\n        totalSold += amount;\r\n        emit TokensPurchased(msg.sender, amount);\r\n    }\r\n    \r\n    function burnUnsold() private {\r\n        require(msg.sender == governance, \"!governance\");\r\n        //require((block.timestamp > endTime), Crowdsate is still active\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        token.burn(amount);\r\n    }\r\n    \r\n    //Spyro was here...:\r\n    //                 /      /                                               \r\n   //             /' .,,,,  ./                                                 \r\n   //            /';'     ,/                                                   \r\n   //           / /   ,,//,`'`                                                 \r\n   //          ( ,, '_,  ,,,' ``                                               \r\n   //          |    /@  ,,, ;\" `                                               \r\n   //         /    .   ,''/' `,``                                              \r\n   //        /   .     ./, `,, ` ;                                             \r\n   //     ,./  .   ,-,',` ,,/''\\,'                                             \r\n   //    |   /; ./,,'`,,'' |   |                                               \r\n   //    |     /   ','    /    |                                               \r\n   //     \\___/'   '     |     |                                               \r\n   //       `,,'  |      /     `\\                                              \r\n   //            /      |        ~\\                                            \r\n   //          (                                                      \r\n   //          :                                                               \r\n   //         ; .         \\--                                                  \r\n   //       :   \\         ;\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SLDS_CROWDSALE","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://97d9113333d2e4bcd5be394fd575cf844e244ba7f10e66bc0f940168057d868d"}]}