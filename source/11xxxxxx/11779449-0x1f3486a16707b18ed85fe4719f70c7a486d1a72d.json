{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\fixed-inflation\\util\\DFOHub.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\IFixedInflationFactory.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\ninterface IFixedInflationFactory {\r\n\r\n    function fixedInflationDefaultExtension() external view returns (address);\r\n\r\n    function feePercentageInfo() external view returns (uint256, address);\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\FixedInflationFactory.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\ncontract FixedInflationFactory is IFixedInflationFactory {\r\n\r\n    // fixed inflation contract implementation address\r\n    address public fixedInflationImplementationAddress;\r\n\r\n    // fixed inflation default extension\r\n    address public override fixedInflationDefaultExtension;\r\n\r\n    // double proxy address of the linked DFO\r\n    address public _doubleProxy;\r\n\r\n    // linked DFO exit fee\r\n    uint256 private _feePercentage;\r\n\r\n    // event that tracks fixed inflation contracts deployed\r\n    event FixedInflationDeployed(address indexed fixedInflationAddress, address indexed sender, bytes fixedInflationInitResultData);\r\n\r\n    // event that tracks logic contract address change\r\n    event FixedInflationLogicSet(address indexed newAddress);\r\n\r\n    // event that tracks default extension contract address change\r\n    event FixedInflationDefaultExtensionSet(address indexed newAddress);\r\n\r\n    // event that tracks wallet changes\r\n    event FeePercentageSet(uint256 newFeePercentage);\r\n\r\n    constructor(address doubleProxy, address _fixedInflationImplementationAddress, address _fixedInflationDefaultExtension, uint256 feePercentage) {\r\n        _doubleProxy = doubleProxy;\r\n        emit FixedInflationLogicSet(fixedInflationImplementationAddress = _fixedInflationImplementationAddress);\r\n        emit FixedInflationDefaultExtensionSet(fixedInflationDefaultExtension = _fixedInflationDefaultExtension);\r\n        emit FeePercentageSet(_feePercentage = feePercentage);\r\n    }\r\n\r\n    /** PUBLIC METHODS */\r\n\r\n    function feePercentageInfo() public override view returns (uint256, address) {\r\n        return (_feePercentage, IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress());\r\n    }\r\n\r\n    /** @dev allows the DFO to update the double proxy address.\r\n      * @param newDoubleProxy new double proxy address.\r\n    */\r\n    function setDoubleProxy(address newDoubleProxy) public onlyDFO {\r\n        _doubleProxy = newDoubleProxy;\r\n    }\r\n\r\n    /** @dev change the fee percentage\r\n     * @param feePercentage new fee percentage.\r\n     */\r\n    function updateFeePercentage(uint256 feePercentage) public onlyDFO {\r\n        emit FeePercentageSet(_feePercentage = feePercentage);\r\n    }\r\n\r\n    /** @dev allows the factory owner to update the logic contract address.\r\n     * @param _fixedInflationImplementationAddress new fixed inflation implementation address.\r\n     */\r\n    function updateLogicAddress(address _fixedInflationImplementationAddress) public onlyDFO {\r\n        emit FixedInflationLogicSet(fixedInflationImplementationAddress = _fixedInflationImplementationAddress);\r\n    }\r\n\r\n    /** @dev allows the factory owner to update the extension contract address.\r\n     * @param _fixedInflationDefaultExtension new fixed inflation extension address.\r\n     */\r\n    function updateDefaultExtensionAddress(address _fixedInflationDefaultExtension) public onlyDFO {\r\n        emit FixedInflationDefaultExtensionSet(fixedInflationDefaultExtension = _fixedInflationDefaultExtension);\r\n    }\r\n\r\n    /** @dev this function deploys a new FixedInflation contract and calls the encoded function passed as data.\r\n     * @param data encoded initialize function for the fixed inflation contract (check FixedInflation contract code).\r\n     * @return contractAddress new fixed inflation contract address.\r\n     * @return initResultData new fixed inflation contract call result.\r\n     */\r\n    function deploy(bytes memory data) public returns (address contractAddress, bytes memory initResultData) {\r\n        initResultData = _call(contractAddress = _clone(fixedInflationImplementationAddress), data);\r\n        emit FixedInflationDeployed(contractAddress, msg.sender, initResultData);\r\n    }\r\n\r\n    /** PRIVATE METHODS */\r\n\r\n    /** @dev clones the input contract address and returns the copied contract address.\r\n     * @param original address of the original contract.\r\n     * @return copy copied contract address.\r\n     */\r\n    function _clone(address original) private returns (address copy) {\r\n        assembly {\r\n            mstore(\r\n                0,\r\n                or(\r\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\r\n                    mul(original, 0x1000000000000000000)\r\n                )\r\n            )\r\n            copy := create(0, 0, 32)\r\n            switch extcodesize(copy)\r\n                case 0 {\r\n                    invalid()\r\n                }\r\n        }\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n\r\n    /** @dev onlyDFO modifier used to check for unauthorized accesses. */\r\n    modifier onlyDFO() {\r\n        require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \"Unauthorized.\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doubleProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fixedInflationImplementationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fixedInflationDefaultExtension\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"FeePercentageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FixedInflationDefaultExtensionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fixedInflationAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fixedInflationInitResultData\",\"type\":\"bytes\"}],\"name\":\"FixedInflationDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FixedInflationLogicSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_doubleProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initResultData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentageInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedInflationDefaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedInflationImplementationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDoubleProxy\",\"type\":\"address\"}],\"name\":\"setDoubleProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fixedInflationDefaultExtension\",\"type\":\"address\"}],\"name\":\"updateDefaultExtensionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"name\":\"updateFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fixedInflationImplementationAddress\",\"type\":\"address\"}],\"name\":\"updateLogicAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FixedInflationFactory","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f869538e3904778a0cb1ff620c8e83c7df36b946000000000000000000000000d5cb0ab968ad1b434a78f768fda4bdbe3823a40e000000000000000000000000a19887d66b37501cc68c7f1ba89564755342dee40000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://69705f86e9f3c364fcf348361b31a48de58cd5af8ea3b0b55374280e95f3ecff"}]}