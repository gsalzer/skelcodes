{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/kroll/Dev/StakingDeployment1/contracts/RewardsRecipient.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract RewardsRecipient {\\n    address public rewardsDistributor;\\n\\n    modifier onlyRewardsDistributor() {\\n        require(msg.sender == rewardsDistributor, \\\"!rewardsDistributor\\\");\\n        _;\\n    }\\n\\n    function notifyRewardAmount(uint256 rewardTokenIndex, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/kroll/Dev/StakingDeployment1/contracts/StakingRewards.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/ILinkswapERC20.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./RewardsRecipient.sol\\\";\\n\\ncontract StakingRewards is IStakingRewards, RewardsRecipient, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(address indexed rewardToken, uint256 amount);\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 amount);\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public stakingToken;\\n    uint256 public lastUpdateTime;\\n    uint256 public periodFinish;\\n    uint256 public rewardsDuration;\\n\\n    IERC20[2] public rewardTokens;\\n    uint256[2] public rewardRate;\\n    uint256[2] public rewardPerTokenStored;\\n    mapping(address => uint256)[2] public userRewardPerTokenPaid;\\n    mapping(address => uint256)[2] public unclaimedRewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardsDistributor,\\n        address _yflToken,\\n        address _extraRewardToken, // optional\\n        uint256 _rewardsDuration\\n    ) public {\\n        require(\\n            _rewardsDistributor != address(0) &&\\n                _yflToken != address(0) &&\\n                _stakingToken != address(0),\\n            \\\"address(0)\\\"\\n        );\\n        require(_rewardsDuration > 0, \\\"rewardsDuration=0\\\");\\n        rewardsDistributor = _rewardsDistributor;\\n        rewardTokens[0] = IERC20(_yflToken);\\n        rewardTokens[1] = IERC20(_extraRewardToken);\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsDuration = _rewardsDuration;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored[0] = rewardPerToken(0);\\n        if (address(rewardTokens[1]) != address(0)) rewardPerTokenStored[1] = rewardPerToken(1);\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            unclaimedRewards[0][account] = earned(account, 0);\\n            unclaimedRewards[1][account] = earned(account, 1);\\n            userRewardPerTokenPaid[0][account] = rewardPerTokenStored[0];\\n            userRewardPerTokenPaid[1][account] = rewardPerTokenStored[1];\\n        }\\n        _;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function getRewardForDuration(uint256 rewardTokenIndex) external view returns (uint256) {\\n        return rewardRate[rewardTokenIndex].mul(rewardsDuration);\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken(uint256 rewardTokenIndex) public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored[rewardTokenIndex];\\n        }\\n        return\\n            rewardPerTokenStored[rewardTokenIndex].add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate[rewardTokenIndex])\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function earned(address account, uint256 rewardTokenIndex) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(\\n                rewardPerToken(rewardTokenIndex).sub(\\n                    userRewardPerTokenPaid[rewardTokenIndex][account]\\n                )\\n            )\\n                .div(1e18)\\n                .add(unclaimedRewards[rewardTokenIndex][account]);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stakeWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        ILinkswapERC20(address(stakingToken)).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function stake(uint256 amount) external nonReentrant updateReward(msg.sender) {\\n        _stake(amount);\\n    }\\n\\n    function unstakeAndClaimRewards(uint256 unstakeAmount)\\n        external\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        _unstake(unstakeAmount);\\n        _claimReward(0);\\n        _claimReward(1);\\n    }\\n\\n    // Unstake without claiming rewards. For emergency use if claiming rewards is failing.\\n    function unstake(uint256 amount) external nonReentrant updateReward(msg.sender) {\\n        _unstake(amount);\\n    }\\n\\n    // Sends to the caller any unclaimed rewards earned by the caller.\\n    function claimRewards() external nonReentrant updateReward(msg.sender) {\\n        _claimReward(0);\\n        _claimReward(1);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function _stake(uint256 amount) private {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function _unstake(uint256 amount) private {\\n        require(amount > 0, \\\"Cannot unstake 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    function _claimReward(uint256 rewardTokenIndex) private {\\n        uint256 rewardAmount = unclaimedRewards[rewardTokenIndex][msg.sender];\\n        if (rewardAmount > 0) {\\n            unclaimedRewards[rewardTokenIndex][msg.sender] = 0;\\n            uint256 rewardsBal = rewardTokens[rewardTokenIndex].balanceOf(address(this));\\n            if (rewardsBal == 0) return;\\n            // avoid paying more than total rewards balance\\n            rewardAmount = rewardsBal < rewardAmount ? rewardsBal : rewardAmount;\\n            rewardTokens[rewardTokenIndex].safeTransfer(msg.sender, rewardAmount);\\n            emit RewardPaid(msg.sender, address(rewardTokens[rewardTokenIndex]), rewardAmount);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(uint256 amount, uint256 extraAmount)\\n        external\\n        onlyRewardsDistributor\\n        updateReward(address(0))\\n    {\\n        if (extraAmount > 0) {\\n            require(address(rewardTokens[1]) != address(0), \\\"extraRewardToken=0x0\\\");\\n        }\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate[0] = amount.div(rewardsDuration);\\n            if (extraAmount > 0) rewardRate[1] = extraAmount.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate[0]);\\n            rewardRate[0] = amount.add(leftover).div(rewardsDuration);\\n            if (extraAmount > 0) {\\n                leftover = remaining.mul(rewardRate[1]);\\n                rewardRate[1] = extraAmount.add(leftover).div(rewardsDuration);\\n            }\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardTokens[0].balanceOf(address(this));\\n        require(rewardRate[0] <= balance.div(rewardsDuration), \\\"Provided reward too high\\\");\\n        if (extraAmount > 0) {\\n            balance = rewardTokens[1].balanceOf(address(this));\\n            require(\\n                rewardRate[1] <= balance.div(rewardsDuration),\\n                \\\"Provided extra reward too high\\\"\\n            );\\n        }\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(address(rewardTokens[0]), amount);\\n        if (extraAmount > 0) emit RewardAdded(address(rewardTokens[1]), extraAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kroll/Dev/StakingDeployment1/contracts/StakingRewardsFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"./StakingRewards.sol\\\";\\n\\ncontract StakingRewardsFactory is Ownable {\\n    // info about rewards for a particular staking token\\n    struct StakingRewardsInfo {\\n        address stakingRewards;\\n        uint256 yflRewardAmount;\\n        address extraRewardToken;\\n        uint256 extraRewardTokenAmount;\\n    }\\n\\n    // immutables\\n    address public yflToken;\\n    uint256 public stakingRewardsGenesis;\\n\\n    // the staking tokens for which the rewards contract has been deployed\\n    address[] public stakingTokens;\\n\\n    // rewards info by staking token\\n    mapping(address => StakingRewardsInfo) public stakingRewardsInfoByStakingToken;\\n\\n    constructor(address _yflToken, uint256 _stakingRewardsGenesis) public Ownable() {\\n        require(_yflToken != address(0), \\\"yflToken=0x0\\\");\\n        require(_stakingRewardsGenesis >= block.timestamp, \\\"genesis<timestamp\\\");\\n        yflToken = _yflToken;\\n        stakingRewardsGenesis = _stakingRewardsGenesis;\\n    }\\n\\n    ///// permissioned functions\\n\\n    // deploy a staking reward contract for the staking token, and store the reward amount\\n    // the reward will be distributed to the staking reward contract no sooner than the genesis\\n    function deploy(\\n        address _stakingToken,\\n        uint256 _yflRewardAmount,\\n        address _extraRewardToken, // optional\\n        uint256 _extraRewardTokenAmount,\\n        uint256 _rewardsDuration\\n    ) external onlyOwner {\\n        require(_stakingToken != address(0), \\\"stakingToken=0x0\\\");\\n        require(_extraRewardToken != yflToken, \\\"extraRewardToken=yflToken\\\");\\n        require(_yflRewardAmount > 0 || _extraRewardTokenAmount > 0, \\\"amounts=0\\\");\\n        if (_extraRewardToken == address(0)) {\\n            require(_extraRewardTokenAmount == 0, \\\"extraRewardTokenAmount!=0\\\");\\n        } else {\\n            require(_extraRewardTokenAmount > 0, \\\"extraRewardTokenAmount=0\\\");\\n        }\\n        require(_rewardsDuration > 0, \\\"rewardsDuration=0\\\");\\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[_stakingToken];\\n        require(info.stakingRewards == address(0), \\\"already deployed\\\");\\n\\n        info.stakingRewards = address(\\n            new StakingRewards(\\n                _stakingToken,\\n                address(this), // rewardsDistributor\\n                yflToken,\\n                _extraRewardToken,\\n                _rewardsDuration\\n            )\\n        );\\n        info.yflRewardAmount = _yflRewardAmount;\\n        info.extraRewardToken = _extraRewardToken;\\n        info.extraRewardTokenAmount = _extraRewardTokenAmount;\\n        stakingTokens.push(_stakingToken);\\n    }\\n\\n    ///// permissionless functions\\n\\n    // call notifyRewardAmount for all staking tokens.\\n    function notifyRewardAmounts() external {\\n        require(stakingTokens.length > 0, \\\"no deploys yet\\\");\\n        for (uint256 i = 0; i < stakingTokens.length; i++) {\\n            notifyRewardAmount(stakingTokens[i]);\\n        }\\n    }\\n\\n    // notify reward amount for an individual staking token.\\n    // this is a fallback in case the notifyRewardAmounts costs too much gas to call for all contracts\\n    function notifyRewardAmount(address _stakingToken) public {\\n        require(block.timestamp >= stakingRewardsGenesis, \\\"timestamp<genesis\\\");\\n\\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[_stakingToken];\\n        require(info.stakingRewards != address(0), \\\"not deployed\\\");\\n\\n        uint256 rewardAmount = info.yflRewardAmount;\\n        uint256 extraRewardAmount = info.extraRewardTokenAmount;\\n        if (rewardAmount > 0) {\\n            info.yflRewardAmount = 0;\\n            require(\\n                IERC20(yflToken).transfer(info.stakingRewards, rewardAmount),\\n                \\\"transfer failed\\\"\\n            );\\n        }\\n        if (extraRewardAmount > 0) {\\n            info.extraRewardTokenAmount = 0;\\n            require(\\n                IERC20(info.extraRewardToken).transfer(info.stakingRewards, rewardAmount),\\n                \\\"transfer failed\\\"\\n            );\\n        }\\n        StakingRewards(info.stakingRewards).notifyRewardAmount(rewardAmount, extraRewardAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kroll/Dev/StakingDeployment1/contracts/interfaces/ILinkswapERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface ILinkswapERC20 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Users/kroll/Dev/StakingDeployment1/contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStakingRewards {\\n    // Mutative\\n    function stake(uint256 amount) external;\\n\\n    function unstakeAndClaimRewards(uint256 unstakeAmount) external;\\n\\n    function unstake(uint256 amount) external;\\n\\n    function claimRewards() external;\\n\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken(uint256 rewardTokenIndex) external view returns (uint256);\\n\\n    function earned(address account, uint256 rewardTokenIndex) external view returns (uint256);\\n\\n    function getRewardForDuration(uint256 rewardTokenIndex) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * > Note that this information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * `IERC20.balanceOf` and `IERC20.transfer`.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * > It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\\n * available, which can be aplied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    constructor () internal {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yflToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardsGenesis\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_yflRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_extraRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_extraRewardTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"notifyRewardAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRewardsGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewardsInfoByStakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yflRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extraRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraRewardTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yflToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingRewardsFactory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000028cb7e841ee97947a86b06fa4090c8451f64c0be000000000000000000000000000000000000000000000000000000005fcd5848","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}