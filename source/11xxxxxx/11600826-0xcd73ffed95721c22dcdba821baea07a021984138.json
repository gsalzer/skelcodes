{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/ReferralRewardsType3.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ReferralRewardsV2.sol\\\";\\n\\ncontract ReferralRewardsType3 is ReferralRewardsV2 {\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _token Token to be staked and harvested.\\n    /// @param _referralTree Contract with referral's tree.\\n    /// @param _rewards Old farming contract.\\n    /// @param _rewardsV2 Main farming contract.\\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\\n    constructor(\\n        IMintableBurnableERC20 _token,\\n        IReferralTree _referralTree,\\n        IRewards _rewards,\\n        IRewardsV2 _rewardsV2,\\n        uint256[amtLevels] memory _depositBounds,\\n        uint256[referDepth][amtLevels] memory _depositRate,\\n        uint256[referDepth][amtLevels] memory _stakingRate\\n    )\\n        public\\n        ReferralRewardsV2(\\n            _token,\\n            _referralTree,\\n            _rewards,\\n            _rewardsV2,\\n            _depositBounds,\\n            _depositRate,\\n            _stakingRate\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/ReferralRewardsV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMintableBurnableERC20.sol\\\";\\nimport \\\"./interfaces/IReferralTree.sol\\\";\\nimport \\\"./interfaces/IRewardsV2.sol\\\";\\nimport \\\"./interfaces/IRewards.sol\\\";\\n\\ncontract ReferralRewardsV2 is Ownable {\\n    using SafeMath for uint256;\\n\\n    event ReferralDepositReward(\\n        address indexed refferer,\\n        address indexed refferal,\\n        uint256 indexed level,\\n        uint256 amount\\n    );\\n    event ReferralRewardPaid(address indexed user, uint256 amount);\\n\\n    // Info of each referral\\n    struct ReferralInfo {\\n        uint256 totalDeposit; // Ammount of own deposits\\n        uint256 reward; // Ammount of collected deposit rewardsV2\\n        uint256 lastUpdate; // Last time the referral claimed rewardsV2\\n        uint256[amtLevels] amounts; // Amounts that generate rewardsV2 on each referral level\\n    }\\n\\n    uint256 public constant amtLevels = 3; // Number of levels by total staked amount that determine referral reward's rate\\n    uint256 public constant referDepth = 3; // Number of referral levels that can receive dividends\\n\\n    IMintableBurnableERC20 public token; // Harvested token contract\\n    IReferralTree public referralTree; // Contract with referral's tree\\n    IRewardsV2 rewardsV2; // Main farming contract\\n    IRewards rewards; // Main farming contract\\n\\n    uint256[amtLevels] public depositBounds; // Limits of referral's stake used to determine the referral rate\\n    uint256[referDepth][amtLevels] public depositRate; // Referral rates based on referral's deplth and stake received from deposit\\n    uint256[referDepth][amtLevels] public stakingRate; // Referral rates based on referral's deplth and stake received from staking\\n\\n    mapping(address => ReferralInfo) public referralReward; // Info per each referral\\n\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _token Token to be staked and harvested.\\n    /// @param _referralTree Contract with referral's tree.\\n    /// @param _rewards Main farming contract.\\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\\n    constructor(\\n        IMintableBurnableERC20 _token,\\n        IReferralTree _referralTree,\\n        IRewards _rewards,\\n        IRewardsV2 _rewardsV2,\\n        uint256[amtLevels] memory _depositBounds,\\n        uint256[referDepth][amtLevels] memory _depositRate,\\n        uint256[referDepth][amtLevels] memory _stakingRate\\n    ) public Ownable() {\\n        token = _token;\\n        referralTree = _referralTree;\\n        depositBounds = _depositBounds;\\n        depositRate = _depositRate;\\n        stakingRate = _stakingRate;\\n        rewardsV2 = _rewardsV2;\\n        rewards = _rewards;\\n    }\\n\\n    /// @dev Allows an owner to update bounds.\\n    /// @param _depositBounds Limits of referral's stake used to determine the referral rate.\\n    function setBounds(uint256[amtLevels] memory _depositBounds)\\n        public\\n        onlyOwner\\n    {\\n        depositBounds = _depositBounds;\\n    }\\n\\n    /// @dev Allows an owner to update deposit rates.\\n    /// @param _depositRate Referral rates based on referral's deplth and stake received from deposit.\\n    function setDepositRate(uint256[referDepth][amtLevels] memory _depositRate)\\n        public\\n        onlyOwner\\n    {\\n        depositRate = _depositRate;\\n    }\\n\\n    /// @dev Allows an owner to update staking rates.\\n    /// @param _stakingRate Referral rates based on referral's deplth and stake received from staking.\\n    function setStakingRate(uint256[referDepth][amtLevels] memory _stakingRate)\\n        public\\n        onlyOwner\\n    {\\n        stakingRate = _stakingRate;\\n    }\\n\\n    /// @dev Allows the main farming contract to assess referral deposit rewardsV2.\\n    /// @param _referrer Address of the referred user.\\n    /// @param _referral Address of the user.\\n    /// @param _amount Amount of new deposit.\\n    function proccessDeposit(\\n        address _referrer,\\n        address _referral,\\n        uint256 _amount\\n    ) external virtual {\\n        require(\\n            msg.sender == address(rewardsV2),\\n            \\\"assessReferalDepositReward: bad role\\\"\\n        );\\n        referralTree.setReferral(_referrer, _referral);\\n        referralReward[_referrer].totalDeposit = referralReward[_referrer]\\n            .totalDeposit\\n            .add(_amount);\\n        address[] memory referrals =\\n            referralTree.getReferrals(_referrer, referDepth);\\n        uint256[] memory referralStakes = rewards.getReferralStakes(referrals);\\n        for (uint256 level = 0; level < referrals.length; level++) {\\n            if (referrals[level] == address(0)) {\\n                continue;\\n            }\\n            accumulateReward(referrals[level]);\\n            ReferralInfo storage referralInfo =\\n                referralReward[referrals[level]];\\n            referralInfo.amounts[level] = referralInfo.amounts[level].add(\\n                _amount\\n            );\\n            uint256 percent =\\n                getDepositRate(\\n                    referralInfo.totalDeposit.add(referralStakes[level]),\\n                    level\\n                );\\n            if (percent == 0) {\\n                continue;\\n            }\\n            uint256 depositReward = _amount.mul(percent);\\n            if (depositReward > 0) {\\n                referralInfo.reward = referralInfo.reward.add(depositReward);\\n                emit ReferralDepositReward(\\n                    _referrer,\\n                    referrals[level],\\n                    level,\\n                    depositReward\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Allows the main farming contract to assess referral deposit rewardsV2.\\n    /// @param _referrer Address of the referred user.\\n    /// @param _amount Amount of new deposit.\\n    function handleDepositEnd(address _referrer, uint256 _amount)\\n        external\\n        virtual\\n    {\\n        require(msg.sender == address(rewardsV2), \\\"handleDepositEnd: bad role\\\");\\n        referralReward[_referrer].totalDeposit = referralReward[_referrer]\\n            .totalDeposit\\n            .sub(_amount);\\n        address[] memory referrals =\\n            referralTree.getReferrals(_referrer, referDepth);\\n        for (uint256 level = 0; level < referrals.length; level++) {\\n            if (referrals[level] == address(0)) {\\n                continue;\\n            }\\n            accumulateReward(referrals[level]);\\n            ReferralInfo storage referralInfo =\\n                referralReward[referrals[level]];\\n            referralInfo.amounts[level] = referralInfo.amounts[level].sub(\\n                _amount\\n            );\\n        }\\n    }\\n\\n    /// @dev Allows a user to claim his dividends.\\n    function claimDividends() public {\\n        claimUserDividends(msg.sender);\\n    }\\n\\n    /// @dev Allows a referral tree to claim all the dividends.\\n    /// @param _referral Address of user that claims his dividends.\\n    function claimAllDividends(address _referral) public {\\n        require(\\n            msg.sender == address(referralTree),\\n            \\\"claimAllDividends: bad role\\\"\\n        );\\n        claimUserDividends(_referral);\\n    }\\n\\n    /// @dev Update the staking referral reward for _user.\\n    /// @param _user Address of the referral.\\n    function accumulateReward(address _user) internal {\\n        ReferralInfo storage referralInfo = referralReward[_user];\\n        if (referralInfo.lastUpdate > now) {\\n            return;\\n        }\\n        uint256 rewardPerSec = rewardsV2.rewardPerSec();\\n        uint256 referralPrevStake = rewards.getReferralStake(_user);\\n        uint256[referDepth] memory rates =\\n            getStakingRateRange(\\n                referralInfo.totalDeposit.add(referralPrevStake)\\n            );\\n        if (referralInfo.lastUpdate > 0) {\\n            for (uint256 i = 0; i < referralInfo.amounts.length; i++) {\\n                uint256 reward =\\n                    now\\n                        .sub(referralInfo.lastUpdate)\\n                        .mul(referralInfo.amounts[i])\\n                        .mul(rewardPerSec)\\n                        .mul(rates[i])\\n                        .div(1e18);\\n                if (reward > 0) {\\n                    referralInfo.reward = referralInfo.reward.add(reward);\\n                }\\n            }\\n        }\\n        referralInfo.lastUpdate = now;\\n    }\\n\\n    /// @dev Asses and distribute claimed dividends.\\n    /// @param _user Address of user that claims dividends.\\n    function claimUserDividends(address _user) internal {\\n        accumulateReward(_user);\\n        ReferralInfo storage referralInfo = referralReward[_user];\\n        uint256 amount = referralInfo.reward.div(1e18);\\n        if (amount > 0) {\\n            uint256 scaledReward = amount.mul(1e18);\\n            referralInfo.reward = referralInfo.reward.sub(scaledReward);\\n            token.mint(_user, amount);\\n            emit ReferralRewardPaid(_user, amount);\\n        }\\n    }\\n\\n    /// @dev Returns referral reward.\\n    /// @param _user Address of referral.\\n    /// @return Referral reward.\\n    function getReferralReward(address _user) external view returns (uint256) {\\n        ReferralInfo storage referralInfo = referralReward[_user];\\n        uint256 rewardPerSec = rewardsV2.rewardPerSec();\\n        uint256 referralPrevStake = rewards.getReferralStake(_user);\\n        uint256[referDepth] memory rates =\\n            getStakingRateRange(\\n                referralInfo.totalDeposit.add(referralPrevStake)\\n            );\\n        uint256 _reward = referralInfo.reward;\\n        if (referralInfo.lastUpdate > 0) {\\n            for (uint256 i = 0; i < referralInfo.amounts.length; i++) {\\n                _reward = _reward.add(\\n                    now\\n                        .sub(referralInfo.lastUpdate)\\n                        .mul(referralInfo.amounts[i])\\n                        .mul(rewardPerSec)\\n                        .mul(rates[i])\\n                        .div(1e18)\\n                );\\n            }\\n        }\\n        return _reward.div(1e18);\\n    }\\n\\n    /// @dev Returns direct user referral.\\n    /// @param _user Address of referrer.\\n    /// @return Direct user referral.\\n    function getReferral(address _user) public view returns (address) {\\n        return referralTree.referrals(_user);\\n    }\\n\\n    /// @dev Returns stakong rate for the spesific referral stake.\\n    /// @param _referralStake Amount staked by referral.\\n    /// @return _rates Array of stakong rates by referral level.\\n    function getStakingRateRange(uint256 _referralStake)\\n        public\\n        view\\n        returns (uint256[referDepth] memory _rates)\\n    {\\n        for (uint256 i = 0; i < depositBounds.length; i++) {\\n            if (_referralStake >= depositBounds[i]) {\\n                return stakingRate[i];\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns deposit rate based on the spesific referral stake and referral level.\\n    /// @param _referralStake Amount staked by referrals.\\n    /// @param _level Level of the referral.\\n    /// @return _rate Deposit rates by referral level.\\n    function getDepositRate(uint256 _referralStake, uint256 _level)\\n        public\\n        view\\n        returns (uint256 _rate)\\n    {\\n        for (uint256 j = 0; j < depositBounds.length; j++) {\\n            if (_referralStake >= depositBounds[j]) {\\n                return depositRate[j][_level];\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns limits of referral's stake used to determine the referral rate.\\n    /// @return Array of deposit bounds.\\n    function getDepositBounds()\\n        public\\n        view\\n        returns (uint256[referDepth] memory)\\n    {\\n        return depositBounds;\\n    }\\n\\n    /// @dev Returns referral rates based on referral's deplth and stake received from staking.\\n    /// @return Array of staking rates.\\n    function getStakingRates()\\n        public\\n        view\\n        returns (uint256[referDepth][amtLevels] memory)\\n    {\\n        return stakingRate;\\n    }\\n\\n    /// @dev Returns referral rates based on referral's deplth and stake received from deposit.\\n    /// @return Array of deposit rates.\\n    function getDepositRates()\\n        public\\n        view\\n        returns (uint256[referDepth][amtLevels] memory)\\n    {\\n        return depositRate;\\n    }\\n\\n    /// @dev Returns amounts that generate reward for referral bu levels.\\n    /// @param _user Address of referral.\\n    /// @return Returns amounts that generate reward for referral bu levels.\\n    function getReferralAmounts(address _user)\\n        public\\n        view\\n        returns (uint256[amtLevels] memory)\\n    {\\n        ReferralInfo memory referralInfo = referralReward[_user];\\n        return referralInfo.amounts;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/RewardsType3.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./RewardsV2.sol\\\";\\nimport \\\"./ReferralRewardsType3.sol\\\";\\n\\ncontract RewardsType3 is RewardsV2 {\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _token Token to be staked and harvested.\\n    /// @param _rewards Old main farming contract.\\n    /// @param _referralTree Contract with referral's tree.\\n    constructor(\\n        IMintableBurnableERC20 _token,\\n        IRewards _rewards,\\n        IReferralTree _referralTree\\n    ) public RewardsV2(_token, 300 days, 115740741 * 1e3) {\\n        ReferralRewardsType3 newRreferralRewards =\\n            new ReferralRewardsType3(\\n                _token,\\n                _referralTree,\\n                _rewards,\\n                IRewardsV2(address(this)),\\n                [uint256(5000 * 1e18), 2000 * 1e18, 100 * 1e18],\\n                [\\n                    [uint256(6 * 1e16), 2 * 1e16, 1 * 1e16],\\n                    [uint256(5 * 1e16), 15 * 1e15, 75 * 1e14],\\n                    [uint256(4 * 1e16), 1 * 1e16, 5 * 1e15]\\n                ],\\n                [\\n                    [uint256(6 * 1e16), 2 * 1e16, 1 * 1e16],\\n                    [uint256(5 * 1e16), 15 * 1e15, 75 * 1e14],\\n                    [uint256(4 * 1e16), 1 * 1e16, 5 * 1e15]\\n                ]\\n            );\\n        newRreferralRewards.transferOwnership(_msgSender());\\n        referralRewards = IReferralRewardsV2(address(newRreferralRewards));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/RewardsV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMintableBurnableERC20.sol\\\";\\nimport \\\"./interfaces/IReferralRewardsV2.sol\\\";\\n\\nabstract contract RewardsV2 is Ownable {\\n    using SafeMath for uint256;\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 ended,\\n        uint256 time\\n    );\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    // Info of each deposit made by the user\\n    struct DepositInfo {\\n        uint256 amount; // Amount of deposited LP tokens\\n        uint256 time; // Wnen the deposit is ended\\n    }\\n\\n    // Info of each user\\n    struct UserInfo {\\n        uint256 amount; // Total deposited amount\\n        uint256 unfrozen; // Amount of token to be unstaked\\n        uint256 reward; // Ammount of claimed rewards\\n        uint256 claimable; // Ammount of claimable rewards\\n        uint256 lastUpdate; // Last time the user claimed rewards\\n        uint256 depositHead; // The start index in the deposit's list\\n        uint256 depositTail; // The end index in the deposit's list\\n        mapping(uint256 => DepositInfo) deposits; // User's dposits\\n    }\\n\\n    IMintableBurnableERC20 public token; // Harvested token contract\\n    IReferralRewardsV2 public referralRewards; // Contract that manages referral rewards\\n\\n    uint256 public duration; // How long the deposit works\\n    uint256 public rewardPerSec; // Reward rate generated each second\\n    uint256 public totalStake; // Amount of all staked LP tokens\\n    uint256 public totalClaimed; // Amount of all distributed rewards\\n    uint256 public lastUpdate; // Last time someone received rewards\\n\\n    bool public isActive; // If the deposits are allowed\\n\\n    mapping(address => UserInfo) public userInfo; // Info per each user\\n\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _token Token to be staked and harvested.\\n    /// @param _duration How long the deposit works.\\n    /// @param _rewardPerSec Reward rate generated each second.\\n    constructor(\\n        IMintableBurnableERC20 _token,\\n        uint256 _duration,\\n        uint256 _rewardPerSec\\n    ) public Ownable() {\\n        token = _token;\\n        duration = _duration;\\n        rewardPerSec = _rewardPerSec;\\n        isActive = true;\\n    }\\n\\n    /// @dev Allows an owner to stop or countinue deposits.\\n    /// @param _isActive Whether the deposits are allowed.\\n    function setActive(bool _isActive) public onlyOwner {\\n        isActive = _isActive;\\n    }\\n\\n    /// @dev Allows an owner to update referral rewardsV2 module.\\n    /// @param _referralRewards Contract that manages referral rewardsV2.\\n    function setReferralRewards(IReferralRewardsV2 _referralRewards)\\n        public\\n        onlyOwner\\n    {\\n        referralRewards = _referralRewards;\\n    }\\n\\n    /// @dev Allows an owner to update duration of the deposits.\\n    /// @param _duration How long the deposit works.\\n    function setDuration(uint256 _duration) public onlyOwner {\\n        duration = _duration;\\n    }\\n\\n    /// @dev Allows an owner to update reward rate per sec.\\n    /// @param _rewardPerSec Reward rate generated each second.\\n    function setRewardPerSec(uint256 _rewardPerSec) public onlyOwner {\\n        rewardPerSec = _rewardPerSec;\\n    }\\n\\n    /// @dev Allows to stake for the specific user.\\n    /// @param _user Deposit receiver.\\n    /// @param _amount Amount of deposit.\\n    function stakeFor(address _user, uint256 _amount) public {\\n        require(\\n            referralRewards.getReferral(_user) != address(0),\\n            \\\"stakeFor: referral isn't set\\\"\\n        );\\n        proccessStake(_user, _amount, address(0), 0);\\n    }\\n\\n    /// @dev Allows to stake for themselves.\\n    /// @param _amount Amount of deposit.\\n    /// @param _refferal Referral address that will be set in case of the first stake.\\n    /// @param _reinvest Whether the tokens should be reinvested.\\n    function stake(\\n        uint256 _amount,\\n        address _refferal,\\n        uint256 _reinvest\\n    ) public {\\n        proccessStake(msg.sender, _amount, _refferal, _reinvest);\\n    }\\n\\n    /// @dev Allows to stake for themselves.\\n    /// @param _count Max amount of claimed deposits.\\n    function claimDeposits(uint256 _count) public {\\n        executeUnstakes(msg.sender, _count);\\n    }\\n\\n    /// @dev Allows to stake for themselves.\\n    /// @param _amount Max amount of claimed deposits.\\n    function claim(uint256 _amount) public {\\n        updateStakingReward(msg.sender);\\n        proccessClaim(msg.sender, _amount, false);\\n    }\\n\\n    /// @dev Proccess the stake.\\n    /// @param _receiver Deposit receiver.\\n    /// @param _amount Amount of deposit.\\n    /// @param _refferal Referral address that will be set in case of the first stake.\\n    /// @param _reinvest Whether the tokens should be reinvested.\\n    function proccessStake(\\n        address _receiver,\\n        uint256 _amount,\\n        address _refferal,\\n        uint256 _reinvest\\n    ) internal virtual {\\n        require(isActive, \\\"stake: is paused\\\");\\n        updateStakingReward(_receiver);\\n        if (_amount > 0) {\\n            token.transferFrom(msg.sender, address(this), _amount);\\n            addDeposit(_receiver, _amount, _refferal);\\n        }\\n        if (_reinvest > 0) {\\n            proccessClaim(_receiver, _reinvest, true);\\n        }\\n    }\\n\\n    /// @dev Proccess the stake.\\n    /// @param _receiver Deposit receiver.\\n    /// @param _amount Amount of deposit.\\n    /// @param _reinvest Whether the tokens should be reinvested.\\n    function proccessClaim(\\n        address _receiver,\\n        uint256 _amount,\\n        bool _reinvest\\n    ) internal virtual {\\n        UserInfo storage user = userInfo[_receiver];\\n        if (_amount == 0) {\\n            _amount = user.claimable;\\n        }\\n        require(user.claimable >= _amount, \\\"claim: insufficient rewards\\\");\\n        user.claimable = user.claimable.sub(_amount);\\n        user.reward = user.reward.add(_amount);\\n        totalClaimed = totalClaimed.add(_amount);\\n        emit RewardPaid(_receiver, _amount);\\n        if (_reinvest) {\\n            token.mint(address(this), _amount);\\n            addDeposit(_receiver, _amount, address(0));\\n        } else {\\n            token.mint(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Assess new reward.\\n    /// @param _user Address of the user.\\n    function updateStakingReward(address _user) internal {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.lastUpdate >= now) {\\n            return;\\n        }\\n        uint256 scaledReward =\\n            now.sub(user.lastUpdate).mul(user.amount).mul(rewardPerSec);\\n        uint256 reward = scaledReward.div(1e18);\\n        lastUpdate = now;\\n        user.claimable = user.claimable.add(reward);\\n        user.lastUpdate = now;\\n    }\\n\\n    /// @dev Add the deposit.\\n    /// @param _receiver Deposit receiver.\\n    /// @param _amount Amount of deposit.\\n    /// @param _refferal Referral address that will be set in case of the first stake.\\n    function addDeposit(\\n        address _receiver,\\n        uint256 _amount,\\n        address _refferal\\n    ) internal virtual {\\n        UserInfo storage user = userInfo[_receiver];\\n        user.amount = user.amount.add(_amount);\\n        totalStake = totalStake.add(_amount);\\n        user.deposits[user.depositTail] = DepositInfo({\\n            amount: _amount,\\n            time: now + duration\\n        });\\n        emit Deposit(_receiver, user.depositTail, _amount, now, now + duration);\\n        user.depositTail = user.depositTail.add(1);\\n        referralRewards.proccessDeposit(_receiver, _refferal, _amount);\\n    }\\n\\n    /// @dev Accumulate new reward and remove old deposits.\\n    /// @param _user Address of the user.\\n    /// @param _count How many deposits to claim.\\n    function executeUnstakes(address _user, uint256 _count) internal virtual {\\n        UserInfo storage user = userInfo[_user];\\n        _count = (_count == 0)\\n            ? user.depositTail\\n            : Math.min(user.depositTail, user.depositHead.add(_count));\\n        uint256 endedDepositAmount = 0;\\n        for (uint256 i = user.depositHead; i < _count; i++) {\\n            DepositInfo memory deposit = user.deposits[i];\\n            if (deposit.time < now) {\\n                endedDepositAmount = endedDepositAmount.add(deposit.amount);\\n                delete user.deposits[i];\\n                user.depositHead = user.depositHead.add(1);\\n                emit Withdraw(_user, 0, deposit.amount, deposit.time, now);\\n            }\\n        }\\n        if (endedDepositAmount > 0) {\\n            user.amount = user.amount.sub(endedDepositAmount);\\n            totalStake = totalStake.sub(endedDepositAmount);\\n            referralRewards.handleDepositEnd(_user, endedDepositAmount);\\n            safeTokenTransfer(_user, endedDepositAmount);\\n        }\\n    }\\n\\n    /// @dev Safe token transfer.\\n    /// @param _to Address of the receiver.\\n    /// @param _amount Amount of the tokens to be sent.\\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 tokenBal = token.balanceOf(address(this));\\n        if (_amount > tokenBal) {\\n            token.transfer(_to, tokenBal);\\n        } else {\\n            token.transfer(_to, _amount);\\n        }\\n    }\\n\\n    /// @dev Returns user's unclaimed reward.\\n    /// @param _user Address of the user.\\n    /// @param _includeDeposit Should the finnished deposits be included into calculations.\\n    /// @return _reward User's reward.\\n    function getPendingReward(address _user, bool _includeDeposit)\\n        public\\n        view\\n        virtual\\n        returns (uint256 _reward)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        _reward = user.claimable.add(\\n            now.sub(user.lastUpdate).mul(user.amount).mul(rewardPerSec).div(\\n                1e18\\n            )\\n        );\\n        if (_includeDeposit) {\\n            for (uint256 i = user.depositHead; i < user.depositTail; i++) {\\n                DepositInfo memory deposit = user.deposits[i];\\n                if (deposit.time < now) {\\n                    _reward = _reward.add(deposit.amount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns claimed and unclaimed user's reward.\\n    /// @param _user Address of the user.\\n    /// @return _reward User's reward.\\n    function getReward(address _user)\\n        public\\n        view\\n        virtual\\n        returns (uint256 _reward)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        _reward = user.reward.add(getPendingReward(_user, false));\\n    }\\n\\n    /// @dev Returns approximate reward assessed in the future.\\n    /// @param _delta Time to estimate.\\n    /// @return Predicted rewardsV2.\\n    function getEstimated(uint256 _delta) public view returns (uint256) {\\n        return\\n            (now + _delta)\\n                .sub(lastUpdate)\\n                .mul(totalStake)\\n                .mul(rewardPerSec)\\n                .div(1e18);\\n    }\\n\\n    /// @dev Returns user's deposit by id.\\n    /// @param _user Address of user.\\n    /// @param _id Deposit id.\\n    /// @return Deposited amount and deposit end time.\\n    function getDeposit(address _user, uint256 _id)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        DepositInfo memory deposit = userInfo[_user].deposits[_id];\\n        return (deposit.amount, deposit.time);\\n    }\\n\\n    /// @dev Returns user's ended deposits.\\n    /// @param _user Address of the user.\\n    /// @return _count Number of the deposit's that can be withdrawn.\\n    function getEndedDepositsCount(address _user)\\n        public\\n        view\\n        virtual\\n        returns (uint256 _count)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        for (uint256 i = user.depositHead; i < user.depositTail; i++) {\\n            DepositInfo memory deposit = user.deposits[i];\\n            if (deposit.time < now) {\\n                _count = _count.add(1);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/interfaces/IMintableBurnableERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ninterface IMintableBurnableERC20 is IERC20 {\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/interfaces/IReferralRewards.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IReferralRewards {\\n    struct DepositInfo {\\n        address referrer;\\n        uint256 depth;\\n        uint256 amount;\\n        uint256 time;\\n        uint256 lastUpdatedTime;\\n    }\\n    struct ReferralInfo {\\n        uint256 reward;\\n        uint256 lastUpdate;\\n        uint256 depositHead;\\n        uint256 depositTail;\\n        uint256[3] amounts;\\n        mapping(uint256 => DepositInfo) deposits;\\n    }\\n\\n    function setBounds(uint256[3] calldata _depositBounds) external;\\n\\n    function setDepositRate(uint256[3][3] calldata _depositRate) external;\\n\\n    function setStakingRate(uint256[3][3] calldata _stakingRate) external;\\n\\n    function assessReferalDepositReward(address _referrer, uint256 _amount)\\n        external;\\n\\n    function claimDividends() external;\\n\\n    function claimAllDividends(address _referral) external;\\n\\n    function removeDepositReward(address _referrer, uint256 _amount) external;\\n\\n    function getReferralReward(address _user) external view;\\n\\n    function getReferral(address _user) external view returns (address);\\n\\n    function getStakingRateRange(uint256 _referralStake)\\n        external\\n        view\\n        returns (uint256[3] memory _rates);\\n\\n    function getDepositRate(uint256[] calldata _referralStakes)\\n        external\\n        view\\n        returns (uint256[] memory _rates);\\n\\n    function getDepositBounds() external view returns (uint256[3] memory);\\n\\n    function getStakingRates() external view returns (uint256[3][3] memory);\\n\\n    function getDepositRates() external view returns (uint256[3][3] memory);\\n\\n    function getReferralAmounts(address _user)\\n        external\\n        view\\n        returns (uint256[3] memory);\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/interfaces/IReferralRewardsV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IReferralRewardsV2 {\\n    struct ReferralInfo {\\n        uint256 totalDeposit;\\n        uint256 reward;\\n        uint256 lastUpdate;\\n        uint256[3] amounts;\\n    }\\n\\n    function setBounds(uint256[3] calldata _depositBounds) external;\\n\\n    function setDepositRate(uint256[3][3] calldata _depositRate) external;\\n\\n    function setStakingRate(uint256[3][3] calldata _stakingRate) external;\\n\\n    function setReferral(address _referrer, address _referral) external;\\n\\n    function assessReferalDepositReward(address _referrer, uint256 _amount)\\n        external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function claimDividends() external;\\n\\n    function claimAllDividends(address _referral) external;\\n\\n    function proccessDeposit(\\n        address _referrer,\\n        address _referral,\\n        uint256 _amount\\n    ) external;\\n\\n    function handleDepositEnd(address _referrer, uint256 _amount) external;\\n\\n    function getReferralReward(address _user) external view;\\n\\n    function getReferral(address _user) external view returns (address);\\n\\n    function getStakingRateRange(uint256 _referralStake)\\n        external\\n        view\\n        returns (uint256[3] memory _rates);\\n\\n    function getDepositRate(uint256[] calldata _referralStakes)\\n        external\\n        view\\n        returns (uint256[] memory _rates);\\n\\n    function getDepositBounds() external view returns (uint256[3] memory);\\n\\n    function getStakingRates() external view returns (uint256[3][3] memory);\\n\\n    function getDepositRates() external view returns (uint256[3][3] memory);\\n\\n    function getReferralAmounts(address _user)\\n        external\\n        view\\n        returns (uint256[3] memory);\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/interfaces/IReferralTree.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IReferralRewards.sol\\\";\\n\\ninterface IReferralTree {\\n    function changeAdmin(address _newAdmin) external;\\n\\n    function setReferral(address _referrer, address _referral) external;\\n\\n    function removeReferralReward(IReferralRewards _referralRewards) external;\\n\\n    function addReferralReward(IReferralRewards _referralRewards) external;\\n\\n    function claimAllDividends() external;\\n\\n    function getReferrals(address _referrer, uint256 _referDepth)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function referrals(address _referrer) external view returns (address);\\n\\n    function getReferrers(address _referral)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getUserReferralReward(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getReferralRewards()\\n        external\\n        view\\n        returns (IReferralRewards[] memory);\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n// import \\\"./dANT.sol\\\";\\nimport \\\"./IReferralRewards.sol\\\";\\n\\ninterface IRewards {\\n    struct DepositInfo {\\n        uint256 amount;\\n        uint256 time;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 unfrozen;\\n        uint256 reward;\\n        uint256 lastUpdate;\\n        uint256 depositHead;\\n        uint256 depositTail;\\n        mapping(uint256 => DepositInfo) deposits;\\n    }\\n\\n    function setActive(bool _isActive) external;\\n\\n    function setReferralRewards(IReferralRewards _referralRewards) external;\\n\\n    function setDuration(uint256 _duration) external;\\n\\n    function setRewardPerSec(uint256 _rewardPerSec) external;\\n\\n    function stakeFor(address _user, uint256 _amount) external;\\n\\n    function stake(uint256 _amount, address _refferal) external;\\n\\n    function getPendingReward(address _user, bool _includeDeposit)\\n        external\\n        view\\n        returns (uint256 _reward);\\n\\n    function getReward(address _user) external view returns (uint256 _reward);\\n\\n    function getReferralStakes(address[] calldata _referrals)\\n        external\\n        view\\n        returns (uint256[] memory _stakes);\\n\\n    function getReferralStake(address _referral)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEstimated(uint256 _delta) external view returns (uint256);\\n\\n    function getDeposit(address _user, uint256 _id)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/kstasi/Documents/side/dANT/contracts/interfaces/IRewardsV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n// import \\\"./dANT.sol\\\";\\nimport \\\"./IReferralRewards.sol\\\";\\n\\ninterface IRewardsV2 {\\n    struct DepositInfo {\\n        uint256 amount;\\n        uint256 time;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 unfrozen;\\n        uint256 reward;\\n        uint256 lastUpdate;\\n        uint256 depositHead;\\n        uint256 depositTail;\\n        mapping(uint256 => DepositInfo) deposits;\\n    }\\n\\n    function setActive(bool _isActive) external;\\n\\n    function setReferralRewards(IReferralRewards _referralRewards) external;\\n\\n    function setDuration(uint256 _duration) external;\\n\\n    function setRewardPerSec(uint256 _rewardPerSec) external;\\n\\n    function stakeFor(address _user, uint256 _amount) external;\\n\\n    function stake(uint256 _amount, address _refferal) external;\\n\\n    function getPendingReward(address _user, bool _includeDeposit)\\n        external\\n        view\\n        returns (uint256 _reward);\\n\\n    function rewardPerSec() external view returns (uint256);\\n\\n    function getReward(address _user) external view returns (uint256 _reward);\\n\\n    function getReferralStake(address _referral)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEstimated(uint256 _delta) external view returns (uint256);\\n\\n    function getDeposit(address _user, uint256 _id)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMintableBurnableERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IRewards\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"contract IReferralTree\",\"name\":\"_referralTree\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ended\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"claimDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEndedDepositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"getEstimated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includeDeposit\",\"type\":\"bool\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"contract IReferralRewardsV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReferralRewardsV2\",\"name\":\"_referralRewards\",\"type\":\"address\"}],\"name\":\"setReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSec\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refferal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reinvest\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IMintableBurnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unfrozen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositHead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTail\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardsType3","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000be3c393fb670f0a29c3f3e660ffb113200e3667600000000000000000000000023d5caf6c288ab71b6061d97c9d8beda6f2ef3ae000000000000000000000000e5c23851bbde700414beb3ab2d2ae7063c8d9c72","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}