{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n  * @title Logic for Compound's JumpRateModel Contract V2.\r\n  * @author Compound (modified by Dharma Labs, refactored by Arr00)\r\n  * @notice Version 2 modifies Version 1 by enabling updateable parameters.\r\n  */\r\ncontract BaseJumpRateModelV2 {\r\n    using SafeMath for uint;\r\n\r\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\r\n\r\n    /**\r\n     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\r\n     */\r\n    address public owner;\r\n\r\n    /**\r\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\r\n     */\r\n    uint public constant blocksPerYear = 2102400;\r\n\r\n    /**\r\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\r\n     */\r\n    uint public multiplierPerBlock;\r\n\r\n    /**\r\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\r\n     */\r\n    uint public baseRatePerBlock;\r\n\r\n    /**\r\n     * @notice The multiplierPerBlock after hitting a specified utilization point\r\n     */\r\n    uint public jumpMultiplierPerBlock;\r\n\r\n    /**\r\n     * @notice The utilization point at which the jump multiplier is applied\r\n     */\r\n    uint public kink;\r\n\r\n    /**\r\n     * @notice Construct an interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\r\n     */\r\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_) internal {\r\n        owner = owner_;\r\n\r\n        updateJumpRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink_);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n    function updateJumpRateModel(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) external {\r\n        require(msg.sender == owner, \"only the owner may call this function.\");\r\n\r\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market (currently unused)\r\n     * @return The utilization rate as a mantissa between [0, 1e18]\r\n     */\r\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\r\n        // Utilization rate is 0 when there are no borrows\r\n        if (borrows == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {\r\n        uint util = utilizationRate(cash, borrows, reserves);\r\n\r\n        if (util <= kink) {\r\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\r\n        } else {\r\n            uint normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\r\n            uint excessUtil = util.sub(kink);\r\n            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current supply rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @param reserveFactorMantissa The current reserve factor for the market\r\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\r\n        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\r\n        uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);\r\n        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\r\n        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to update the parameters of the interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n    function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\r\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\r\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink_));\r\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\r\n        kink = kink_;\r\n\r\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\ncontract ComptrollerInterface {\r\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\r\n    bool public constant isComptroller = true;\r\n\r\n    /*** Assets You Are In ***/\r\n\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function exitMarket(address cToken) external returns (uint);\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\r\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\r\n\r\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\r\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\r\n\r\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\r\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\r\n\r\n    function repayBorrowAllowed(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint);\r\n    function repayBorrowVerify(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint borrowerIndex) external;\r\n\r\n    function liquidateBorrowAllowed(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint);\r\n    function liquidateBorrowVerify(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint seizeTokens) external;\r\n\r\n    function seizeAllowed(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external returns (uint);\r\n    function seizeVerify(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external;\r\n\r\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\r\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        uint repayAmount) external returns (uint, uint);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n  * @title Compound's InterestRateModel Interface\r\n  * @author Compound\r\n  */\r\ncontract InterestRateModel {\r\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\r\n    bool public constant isInterestRateModel = true;\r\n\r\n    /**\r\n      * @notice Calculates the current borrow interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amount of reserves the market has\r\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\r\n\r\n    /**\r\n      * @notice Calculates the current supply interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amount of reserves the market has\r\n      * @param reserveFactorMantissa The current reserve factor the market has\r\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ncontract CTokenStorage {\r\n    /**\r\n     * @dev Guard variable for re-entrancy checks\r\n     */\r\n    bool internal _notEntered;\r\n\r\n    /**\r\n     * @notice EIP-20 token name for this token\r\n     */\r\n    string public name;\r\n\r\n    /**\r\n     * @notice EIP-20 token symbol for this token\r\n     */\r\n    string public symbol;\r\n\r\n    /**\r\n     * @notice EIP-20 token decimals for this token\r\n     */\r\n    uint8 public decimals;\r\n\r\n    /**\r\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\r\n     */\r\n\r\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\r\n\r\n    /**\r\n     * @notice Maximum fraction of interest that can be set aside for reserves\r\n     */\r\n    uint internal constant reserveFactorMaxMantissa = 1e18;\r\n\r\n    /**\r\n     * @notice Administrator for this contract\r\n     */\r\n    address payable public admin;\r\n\r\n    /**\r\n     * @notice Pending administrator for this contract\r\n     */\r\n    address payable public pendingAdmin;\r\n\r\n    /**\r\n     * @notice Contract which oversees inter-cToken operations\r\n     */\r\n    ComptrollerInterface public comptroller;\r\n\r\n    /**\r\n     * @notice Model which tells what the current interest rate should be\r\n     */\r\n    InterestRateModel public interestRateModel;\r\n\r\n    /**\r\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\r\n     */\r\n    uint internal initialExchangeRateMantissa;\r\n\r\n    /**\r\n     * @notice Fraction of interest currently set aside for reserves\r\n     */\r\n    uint public reserveFactorMantissa;\r\n\r\n    /**\r\n     * @notice Block number that interest was last accrued at\r\n     */\r\n    uint public accrualBlockNumber;\r\n\r\n    /**\r\n     * @notice Accumulator of the total earned interest rate since the opening of the market\r\n     */\r\n    uint public borrowIndex;\r\n\r\n    /**\r\n     * @notice Total amount of outstanding borrows of the underlying in this market\r\n     */\r\n    uint public totalBorrows;\r\n\r\n    /**\r\n     * @notice Total amount of reserves of the underlying held in this market\r\n     */\r\n    uint public totalReserves;\r\n\r\n    /**\r\n     * @notice Total number of tokens in circulation\r\n     */\r\n    uint public totalSupply;\r\n\r\n    /**\r\n     * @notice Official record of token balances for each account\r\n     */\r\n    mapping (address => uint) internal accountTokens;\r\n\r\n    /**\r\n     * @notice Approved token transfer amounts on behalf of others\r\n     */\r\n    mapping (address => mapping (address => uint)) internal transferAllowances;\r\n\r\n    /**\r\n     * @notice Container for borrow balance information\r\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\r\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\r\n     */\r\n    struct BorrowSnapshot {\r\n        uint principal;\r\n        uint interestIndex;\r\n    }\r\n\r\n    /**\r\n     * @notice Mapping of account addresses to outstanding borrow balances\r\n     */\r\n    mapping(address => BorrowSnapshot) internal accountBorrows;\r\n}\r\n\r\ncontract CTokenInterface is CTokenStorage {\r\n    /**\r\n     * @notice Indicator that this is a CToken contract (for inspection)\r\n     */\r\n    bool public constant isCToken = true;\r\n\r\n\r\n    /*** Market Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when interest is accrued\r\n     */\r\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are minted\r\n     */\r\n    event Mint(address minter, uint mintAmount, uint mintTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are redeemed\r\n     */\r\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when underlying is borrowed\r\n     */\r\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is repaid\r\n     */\r\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is liquidated\r\n     */\r\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\r\n\r\n\r\n    /*** Admin Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is changed\r\n     */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\r\n     */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when comptroller is changed\r\n     */\r\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\r\n\r\n    /**\r\n     * @notice Event emitted when interestRateModel is changed\r\n     */\r\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserve factor is changed\r\n     */\r\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are added\r\n     */\r\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are reduced\r\n     */\r\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\r\n\r\n    /**\r\n     * @notice EIP20 Transfer event\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    /**\r\n     * @notice EIP20 Approval event\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    /**\r\n     * @notice Failure event\r\n     */\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n\r\n    /*** User Interface ***/\r\n\r\n    function transfer(address dst, uint amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\r\n    function borrowRatePerBlock() external view returns (uint);\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function totalBorrowsCurrent() external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function borrowBalanceStored(address account) public view returns (uint);\r\n    function exchangeRateCurrent() public returns (uint);\r\n    function exchangeRateStored() public view returns (uint);\r\n    function getCash() external view returns (uint);\r\n    function accrueInterest() public returns (uint);\r\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\r\n\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\r\n    function _acceptAdmin() external returns (uint);\r\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\r\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\r\n    function _reduceReserves(uint reduceAmount) external returns (uint);\r\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\r\n}\r\n\r\ncontract CErc20Storage {\r\n    /**\r\n     * @notice Underlying asset for this CToken\r\n     */\r\n    address public underlying;\r\n}\r\n\r\ncontract CErc20Interface is CErc20Storage {\r\n\r\n    /*** User Interface ***/\r\n\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\r\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\r\n\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    function _addReserves(uint addAmount) external returns (uint);\r\n}\r\n\r\ncontract CDelegationStorage {\r\n    /**\r\n     * @notice Implementation address for this contract\r\n     */\r\n    address public implementation;\r\n}\r\n\r\ncontract CDelegatorInterface is CDelegationStorage {\r\n    /**\r\n     * @notice Emitted when implementation is changed\r\n     */\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /**\r\n     * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\r\n}\r\n\r\ncontract CDelegateInterface is CDelegationStorage {\r\n    /**\r\n     * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @dev Should revert if any issues arise which make it unfit for delegation\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n    function _becomeImplementation(bytes memory data) public;\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\r\n     */\r\n    function _resignImplementation() public;\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\ncontract ComptrollerErrorReporter {\r\n    enum Error {\r\n        NO_ERROR,\r\n        UNAUTHORIZED,\r\n        COMPTROLLER_MISMATCH,\r\n        INSUFFICIENT_SHORTFALL,\r\n        INSUFFICIENT_LIQUIDITY,\r\n        INVALID_CLOSE_FACTOR,\r\n        INVALID_COLLATERAL_FACTOR,\r\n        INVALID_LIQUIDATION_INCENTIVE,\r\n        MARKET_NOT_ENTERED, // no longer possible\r\n        MARKET_NOT_LISTED,\r\n        MARKET_ALREADY_LISTED,\r\n        MATH_ERROR,\r\n        NONZERO_BORROW_BALANCE,\r\n        PRICE_ERROR,\r\n        REJECTION,\r\n        SNAPSHOT_ERROR,\r\n        TOO_MANY_ASSETS,\r\n        TOO_MUCH_REPAY\r\n    }\r\n\r\n    enum FailureInfo {\r\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\r\n        EXIT_MARKET_BALANCE_OWED,\r\n        EXIT_MARKET_REJECTION,\r\n        SET_CLOSE_FACTOR_OWNER_CHECK,\r\n        SET_CLOSE_FACTOR_VALIDATION,\r\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\r\n        SET_COLLATERAL_FACTOR_VALIDATION,\r\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\r\n        SET_IMPLEMENTATION_OWNER_CHECK,\r\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\r\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\r\n        SET_MAX_ASSETS_OWNER_CHECK,\r\n        SET_PENDING_ADMIN_OWNER_CHECK,\r\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\r\n        SET_PRICE_ORACLE_OWNER_CHECK,\r\n        SUPPORT_MARKET_EXISTS,\r\n        SUPPORT_MARKET_OWNER_CHECK,\r\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\r\n    }\r\n\r\n    /**\r\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n      **/\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n    /**\r\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n      */\r\n    function fail(Error err, FailureInfo info) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), 0);\r\n\r\n        return uint(err);\r\n    }\r\n\r\n    /**\r\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n      */\r\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), opaqueError);\r\n\r\n        return uint(err);\r\n    }\r\n}\r\n\r\ncontract TokenErrorReporter {\r\n    enum Error {\r\n        NO_ERROR,\r\n        UNAUTHORIZED,\r\n        BAD_INPUT,\r\n        COMPTROLLER_REJECTION,\r\n        COMPTROLLER_CALCULATION_ERROR,\r\n        INTEREST_RATE_MODEL_ERROR,\r\n        INVALID_ACCOUNT_PAIR,\r\n        INVALID_CLOSE_AMOUNT_REQUESTED,\r\n        INVALID_COLLATERAL_FACTOR,\r\n        MATH_ERROR,\r\n        MARKET_NOT_FRESH,\r\n        MARKET_NOT_LISTED,\r\n        TOKEN_INSUFFICIENT_ALLOWANCE,\r\n        TOKEN_INSUFFICIENT_BALANCE,\r\n        TOKEN_INSUFFICIENT_CASH,\r\n        TOKEN_TRANSFER_IN_FAILED,\r\n        TOKEN_TRANSFER_OUT_FAILED\r\n    }\r\n\r\n    /*\r\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\r\n     *       This is because FailureInfo grows significantly faster, and\r\n     *       the order of Error has some meaning, while the order of FailureInfo\r\n     *       is entirely arbitrary.\r\n     */\r\n    enum FailureInfo {\r\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\r\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\r\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n        BORROW_ACCRUE_INTEREST_FAILED,\r\n        BORROW_CASH_NOT_AVAILABLE,\r\n        BORROW_FRESHNESS_CHECK,\r\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\r\n        BORROW_MARKET_NOT_LISTED,\r\n        BORROW_COMPTROLLER_REJECTION,\r\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\r\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\r\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\r\n        LIQUIDATE_COMPTROLLER_REJECTION,\r\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\r\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\r\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\r\n        LIQUIDATE_FRESHNESS_CHECK,\r\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\r\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\r\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\r\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\r\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\r\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\r\n        LIQUIDATE_SEIZE_TOO_MUCH,\r\n        MINT_ACCRUE_INTEREST_FAILED,\r\n        MINT_COMPTROLLER_REJECTION,\r\n        MINT_EXCHANGE_CALCULATION_FAILED,\r\n        MINT_EXCHANGE_RATE_READ_FAILED,\r\n        MINT_FRESHNESS_CHECK,\r\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\r\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n        MINT_TRANSFER_IN_FAILED,\r\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\r\n        REDEEM_ACCRUE_INTEREST_FAILED,\r\n        REDEEM_COMPTROLLER_REJECTION,\r\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\r\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\r\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\r\n        REDEEM_FRESHNESS_CHECK,\r\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\r\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\r\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\r\n        REDUCE_RESERVES_ADMIN_CHECK,\r\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\r\n        REDUCE_RESERVES_FRESH_CHECK,\r\n        REDUCE_RESERVES_VALIDATION,\r\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\r\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\r\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n        REPAY_BORROW_COMPTROLLER_REJECTION,\r\n        REPAY_BORROW_FRESHNESS_CHECK,\r\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\r\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\r\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n        SET_COLLATERAL_FACTOR_VALIDATION,\r\n        SET_COMPTROLLER_OWNER_CHECK,\r\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\r\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\r\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\r\n        SET_MAX_ASSETS_OWNER_CHECK,\r\n        SET_ORACLE_MARKET_NOT_LISTED,\r\n        SET_PENDING_ADMIN_OWNER_CHECK,\r\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\r\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\r\n        SET_RESERVE_FACTOR_FRESH_CHECK,\r\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\r\n        TRANSFER_COMPTROLLER_REJECTION,\r\n        TRANSFER_NOT_ALLOWED,\r\n        TRANSFER_NOT_ENOUGH,\r\n        TRANSFER_TOO_MUCH,\r\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\r\n        ADD_RESERVES_FRESH_CHECK,\r\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\r\n    }\r\n\r\n    /**\r\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n      **/\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n    /**\r\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n      */\r\n    function fail(Error err, FailureInfo info) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), 0);\r\n\r\n        return uint(err);\r\n    }\r\n\r\n    /**\r\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n      */\r\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), opaqueError);\r\n\r\n        return uint(err);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n  * @title Careful Math\r\n  * @author Compound\r\n  * @notice Derived from OpenZeppelin's SafeMath library\r\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n  */\r\ncontract CarefulMath {\r\n\r\n    /**\r\n     * @dev Possible error codes that we can return\r\n     */\r\n    enum MathError {\r\n        NO_ERROR,\r\n        DIVISION_BY_ZERO,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, returns an error on overflow.\r\n    */\r\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (a == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (MathError.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b == 0) {\r\n            return (MathError.DIVISION_BY_ZERO, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, a / b);\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b <= a) {\r\n            return (MathError.NO_ERROR, a - b);\r\n        } else {\r\n            return (MathError.INTEGER_UNDERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, returns an error on overflow.\r\n    */\r\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        uint c = a + b;\r\n\r\n        if (c >= a) {\r\n            return (MathError.NO_ERROR, c);\r\n        } else {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev add a and b and then subtract c\r\n    */\r\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\r\n        (MathError err0, uint sum) = addUInt(a, b);\r\n\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, 0);\r\n        }\r\n\r\n        return subUInt(sum, c);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author Compound\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract Exponential is CarefulMath {\r\n    uint constant expScale = 1e18;\r\n    uint constant doubleScale = 1e36;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    struct Double {\r\n        uint mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates an exponential from numerator and denominator values.\r\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\r\n     *            or if `denom` is zero.\r\n     */\r\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two exponentials, returning a new exponential.\r\n     */\r\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two exponentials, returning a new exponential.\r\n     */\r\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(product));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return addUInt(truncate(product), addend);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, returning a new Exp.\r\n     */\r\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\r\n        /*\r\n          We are doing this as:\r\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\r\n\r\n          How it works:\r\n          Exp = a / b;\r\n          Scalar = s;\r\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\r\n        */\r\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n        return getExp(numerator, divisor.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\r\n     */\r\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(fraction));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials, returning a new exponential.\r\n     */\r\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n\r\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        // We add half the scale before dividing so that we get rounding instead of truncation.\r\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\r\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\r\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\r\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\r\n        assert(err2 == MathError.NO_ERROR);\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\r\n     */\r\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\r\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies three exponentials, returning a new exponential.\r\n     */\r\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\r\n        (MathError err, Exp memory ab) = mulExp(a, b);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, ab);\r\n        }\r\n        return mulExp(ab, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two exponentials, returning a new exponential.\r\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\r\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\r\n     */\r\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        return getExp(a.mantissa, b.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if first Exp is less than second Exp.\r\n     */\r\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa < right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp <= right Exp.\r\n     */\r\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa <= right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp > right Exp.\r\n     */\r\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa > right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if Exp is exactly zero\r\n     */\r\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\r\n        return value.mantissa == 0;\r\n    }\r\n\r\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\r\n        require(n < 2**224, errorMessage);\r\n        return uint224(n);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(uint a, uint b) pure internal returns (uint) {\r\n        return add_(a, b, \"addition overflow\");\r\n    }\r\n\r\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(uint a, uint b) pure internal returns (uint) {\r\n        return sub_(a, b, \"subtraction underflow\");\r\n    }\r\n\r\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\r\n    }\r\n\r\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / expScale;\r\n    }\r\n\r\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\r\n    }\r\n\r\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / doubleScale;\r\n    }\r\n\r\n    function mul_(uint a, uint b) pure internal returns (uint) {\r\n        return mul_(a, b, \"multiplication overflow\");\r\n    }\r\n\r\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\r\n    }\r\n\r\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, expScale), b.mantissa);\r\n    }\r\n\r\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\r\n    }\r\n\r\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Double memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, doubleScale), b.mantissa);\r\n    }\r\n\r\n    function div_(uint a, uint b) pure internal returns (uint) {\r\n        return div_(a, b, \"divide by zero\");\r\n    }\r\n\r\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title ERC 20 Token Standard Interface\r\n *  https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface EIP20Interface {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n      * @notice Get the total number of tokens in circulation\r\n      * @return The supply of tokens\r\n      */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return Whether or not the transfer succeeded\r\n      */\r\n    function transfer(address dst, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return Whether or not the transfer succeeded\r\n      */\r\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved (-1 means infinite)\r\n      * @return Whether or not the approval succeeded\r\n      */\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return The number of tokens allowed to be spent (-1 means infinite)\r\n      */\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title EIP20NonStandardInterface\r\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n */\r\ninterface EIP20NonStandardInterface {\r\n\r\n    /**\r\n     * @notice Get the total number of tokens in circulation\r\n     * @return The supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n    function transferFrom(address src, address dst, uint256 amount) external;\r\n\r\n    /**\r\n      * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved\r\n      * @return Whether or not the approval succeeded\r\n      */\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return The number of tokens allowed to be spent\r\n      */\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Compound's CToken Contract\r\n * @notice Abstract base for CTokens\r\n * @author Compound\r\n */\r\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\r\n    /**\r\n     * @notice Initialize the money market\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ EIP-20 name of this token\r\n     * @param symbol_ EIP-20 symbol of this token\r\n     * @param decimals_ EIP-20 decimal precision of this token\r\n     */\r\n    function initialize(ComptrollerInterface comptroller_,\r\n                        InterestRateModel interestRateModel_,\r\n                        uint initialExchangeRateMantissa_,\r\n                        string memory name_,\r\n                        string memory symbol_,\r\n                        uint8 decimals_) public {\r\n        require(msg.sender == admin, \"only admin may initialize the market\");\r\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\r\n\r\n        // Set initial exchange rate\r\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\r\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\r\n\r\n        // Set the comptroller\r\n        uint err = _setComptroller(comptroller_);\r\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\r\n\r\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\r\n        accrualBlockNumber = getBlockNumber();\r\n        borrowIndex = mantissaOne;\r\n\r\n        // Set the interest rate model (depends on block number / borrow index)\r\n        err = _setInterestRateModelFresh(interestRateModel_);\r\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\r\n\r\n        name = name_;\r\n        symbol = symbol_;\r\n        decimals = decimals_;\r\n\r\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\r\n     * @dev Called by both `transfer` and `transferFrom` internally\r\n     * @param spender The address of the account performing the transfer\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param tokens The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\r\n        /* Fail if transfer not allowed */\r\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\r\n        if (allowed != 0) {\r\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\r\n        }\r\n\r\n        /* Do not allow self-transfers */\r\n        if (src == dst) {\r\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\r\n        }\r\n\r\n        /* Get the allowance, infinite for the account owner */\r\n        uint startingAllowance = 0;\r\n        if (spender == src) {\r\n            startingAllowance = uint(-1);\r\n        } else {\r\n            startingAllowance = transferAllowances[src][spender];\r\n        }\r\n\r\n        /* Do the calculations, checking for {under,over}flow */\r\n        MathError mathErr;\r\n        uint allowanceNew;\r\n        uint srcTokensNew;\r\n        uint dstTokensNew;\r\n\r\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\r\n        }\r\n\r\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\r\n        }\r\n\r\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        accountTokens[src] = srcTokensNew;\r\n        accountTokens[dst] = dstTokensNew;\r\n\r\n        /* Eat some of the allowance (if necessary) */\r\n        if (startingAllowance != uint(-1)) {\r\n            transferAllowances[src][spender] = allowanceNew;\r\n        }\r\n\r\n        /* We emit a Transfer event */\r\n        emit Transfer(src, dst, tokens);\r\n\r\n        comptroller.transferVerify(address(this), src, dst, tokens);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\r\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\r\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        address src = msg.sender;\r\n        transferAllowances[src][spender] = amount;\r\n        emit Approval(src, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current allowance from `owner` for `spender`\r\n     * @param owner The address of the account which owns the tokens to be spent\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @return The number of tokens allowed to be spent (-1 means infinite)\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return transferAllowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the token balance of the `owner`\r\n     * @param owner The address of the account to query\r\n     * @return The number of tokens owned by `owner`\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256) {\r\n        return accountTokens[owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the underlying balance of the `owner`\r\n     * @dev This also accrues interest in a transaction\r\n     * @param owner The address of the account to query\r\n     * @return The amount of underlying owned by `owner`\r\n     */\r\n    function balanceOfUnderlying(address owner) external returns (uint) {\r\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\r\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\r\n        require(mErr == MathError.NO_ERROR, \"balance could not be calculated\");\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\r\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\r\n     * @param account Address of the account to snapshot\r\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\r\n     */\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\r\n        uint cTokenBalance = accountTokens[account];\r\n        uint borrowBalance;\r\n        uint exchangeRateMantissa;\r\n\r\n        MathError mErr;\r\n\r\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\r\n        if (mErr != MathError.NO_ERROR) {\r\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\r\n        }\r\n\r\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\r\n        if (mErr != MathError.NO_ERROR) {\r\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\r\n        }\r\n\r\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to simply retrieve block number\r\n     *  This exists mainly for inheriting test contracts to stub this result.\r\n     */\r\n    function getBlockNumber() internal view returns (uint) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current per-block borrow interest rate for this cToken\r\n     * @return The borrow interest rate per block, scaled by 1e18\r\n     */\r\n    function borrowRatePerBlock() external view returns (uint) {\r\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current per-block supply interest rate for this cToken\r\n     * @return The supply interest rate per block, scaled by 1e18\r\n     */\r\n    function supplyRatePerBlock() external view returns (uint) {\r\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current total borrows plus accrued interest\r\n     * @return The total borrows with interest\r\n     */\r\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\r\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\r\n        return totalBorrows;\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\r\n     * @param account The address whose balance should be calculated after updating borrowIndex\r\n     * @return The calculated balance\r\n     */\r\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\r\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\r\n        return borrowBalanceStored(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the borrow balance of account based on stored data\r\n     * @param account The address whose balance should be calculated\r\n     * @return The calculated balance\r\n     */\r\n    function borrowBalanceStored(address account) public view returns (uint) {\r\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\r\n        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the borrow balance of account based on stored data\r\n     * @param account The address whose balance should be calculated\r\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\r\n     */\r\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\r\n        /* Note: we do not assert that the market is up to date */\r\n        MathError mathErr;\r\n        uint principalTimesIndex;\r\n        uint result;\r\n\r\n        /* Get borrowBalance and borrowIndex */\r\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\r\n\r\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\r\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\r\n         */\r\n        if (borrowSnapshot.principal == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        /* Calculate new borrow balance using the interest index:\r\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\r\n         */\r\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return (mathErr, 0);\r\n        }\r\n\r\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return (mathErr, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, result);\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue interest then return the up-to-date exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\r\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\r\n        return exchangeRateStored();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateStored() public view returns (uint) {\r\n        (MathError err, uint result) = exchangeRateStoredInternal();\r\n        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return (error code, calculated exchange rate scaled by 1e18)\r\n     */\r\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\r\n        uint _totalSupply = totalSupply;\r\n        if (_totalSupply == 0) {\r\n            /*\r\n             * If there are no tokens minted:\r\n             *  exchangeRate = initialExchangeRate\r\n             */\r\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\r\n        } else {\r\n            /*\r\n             * Otherwise:\r\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\r\n             */\r\n            uint totalCash = getCashPrior();\r\n            uint cashPlusBorrowsMinusReserves;\r\n            Exp memory exchangeRate;\r\n            MathError mathErr;\r\n\r\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\r\n            if (mathErr != MathError.NO_ERROR) {\r\n                return (mathErr, 0);\r\n            }\r\n\r\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\r\n            if (mathErr != MathError.NO_ERROR) {\r\n                return (mathErr, 0);\r\n            }\r\n\r\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get cash balance of this cToken in the underlying asset\r\n     * @return The quantity of underlying asset owned by this contract\r\n     */\r\n    function getCash() external view returns (uint) {\r\n        return getCashPrior();\r\n    }\r\n\r\n    /**\r\n     * @notice Applies accrued interest to total borrows and reserves\r\n     * @dev This calculates interest accrued from the last checkpointed block\r\n     *   up to the current block and writes new checkpoint to storage.\r\n     */\r\n    function accrueInterest() public returns (uint) {\r\n        /* Remember the initial block number */\r\n        uint currentBlockNumber = getBlockNumber();\r\n        uint accrualBlockNumberPrior = accrualBlockNumber;\r\n\r\n        /* Short-circuit accumulating 0 interest */\r\n        if (accrualBlockNumberPrior == currentBlockNumber) {\r\n            return uint(Error.NO_ERROR);\r\n        }\r\n\r\n        /* Read the previous values out of storage */\r\n        uint cashPrior = getCashPrior();\r\n        uint borrowsPrior = totalBorrows;\r\n        uint reservesPrior = totalReserves;\r\n        uint borrowIndexPrior = borrowIndex;\r\n\r\n        /* Calculate the current borrow interest rate */\r\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\r\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \"borrow rate is absurdly high\");\r\n\r\n        /* Calculate the number of blocks elapsed since the last accrual */\r\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\r\n        require(mathErr == MathError.NO_ERROR, \"could not calculate block delta\");\r\n\r\n        /*\r\n         * Calculate the interest accumulated into borrows and reserves and the new index:\r\n         *  simpleInterestFactor = borrowRate * blockDelta\r\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\r\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\r\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\r\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\r\n         */\r\n\r\n        Exp memory simpleInterestFactor;\r\n        uint interestAccumulated;\r\n        uint totalBorrowsNew;\r\n        uint totalReservesNew;\r\n        uint borrowIndexNew;\r\n\r\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\r\n        }\r\n\r\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\r\n        }\r\n\r\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\r\n        }\r\n\r\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\r\n        }\r\n\r\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /* We write the previously calculated values into storage */\r\n        accrualBlockNumber = currentBlockNumber;\r\n        borrowIndex = borrowIndexNew;\r\n        totalBorrows = totalBorrowsNew;\r\n        totalReserves = totalReservesNew;\r\n\r\n        /* We emit an AccrueInterest event */\r\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\r\n     */\r\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\r\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\r\n        }\r\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\r\n        return mintFresh(msg.sender, mintAmount);\r\n    }\r\n\r\n    struct MintLocalVars {\r\n        Error err;\r\n        MathError mathErr;\r\n        uint exchangeRateMantissa;\r\n        uint mintTokens;\r\n        uint totalSupplyNew;\r\n        uint accountTokensNew;\r\n        uint actualMintAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice User supplies assets into the market and receives cTokens in exchange\r\n     * @dev Assumes interest has already been accrued up to the current block\r\n     * @param minter The address of the account which is supplying the assets\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\r\n     */\r\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\r\n        /* Fail if mint not allowed */\r\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\r\n        if (allowed != 0) {\r\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\r\n        }\r\n\r\n        MintLocalVars memory vars;\r\n\r\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\r\n        if (vars.mathErr != MathError.NO_ERROR) {\r\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         *  We call `doTransferIn` for the minter and the mintAmount.\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\r\n         *  side-effects occurred. The function returns the amount actually transferred,\r\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\r\n         *  of cash.\r\n         */\r\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\r\n\r\n        /*\r\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\r\n         *  mintTokens = actualMintAmount / exchangeRate\r\n         */\r\n\r\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\r\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_EXCHANGE_CALCULATION_FAILED\");\r\n\r\n        /*\r\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\r\n         *  totalSupplyNew = totalSupply + mintTokens\r\n         *  accountTokensNew = accountTokens[minter] + mintTokens\r\n         */\r\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\r\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\r\n\r\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\r\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\r\n\r\n        /* We write previously calculated values into storage */\r\n        totalSupply = vars.totalSupplyNew;\r\n        accountTokens[minter] = vars.accountTokensNew;\r\n\r\n        /* We emit a Mint event, and a Transfer event */\r\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\r\n        emit Transfer(address(this), minter, vars.mintTokens);\r\n\r\n        /* We call the defense hook */\r\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\r\n\r\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\r\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\r\n        }\r\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\r\n        return redeemFresh(msg.sender, redeemTokens, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\r\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\r\n        }\r\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\r\n        return redeemFresh(msg.sender, 0, redeemAmount);\r\n    }\r\n\r\n    struct RedeemLocalVars {\r\n        Error err;\r\n        MathError mathErr;\r\n        uint exchangeRateMantissa;\r\n        uint redeemTokens;\r\n        uint redeemAmount;\r\n        uint totalSupplyNew;\r\n        uint accountTokensNew;\r\n    }\r\n\r\n    /**\r\n     * @notice User redeems cTokens in exchange for the underlying asset\r\n     * @dev Assumes interest has already been accrued up to the current block\r\n     * @param redeemer The address of the account which is redeeming the tokens\r\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\r\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\r\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\r\n\r\n        RedeemLocalVars memory vars;\r\n\r\n        /* exchangeRate = invoke Exchange Rate Stored() */\r\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\r\n        if (vars.mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\r\n        }\r\n\r\n        /* If redeemTokensIn > 0: */\r\n        if (redeemTokensIn > 0) {\r\n            /*\r\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\r\n             *  redeemTokens = redeemTokensIn\r\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\r\n             */\r\n            vars.redeemTokens = redeemTokensIn;\r\n\r\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\r\n            if (vars.mathErr != MathError.NO_ERROR) {\r\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\r\n            }\r\n        } else {\r\n            /*\r\n             * We get the current exchange rate and calculate the amount to be redeemed:\r\n             *  redeemTokens = redeemAmountIn / exchangeRate\r\n             *  redeemAmount = redeemAmountIn\r\n             */\r\n\r\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\r\n            if (vars.mathErr != MathError.NO_ERROR) {\r\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\r\n            }\r\n\r\n            vars.redeemAmount = redeemAmountIn;\r\n        }\r\n\r\n        /* Fail if redeem not allowed */\r\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\r\n        if (allowed != 0) {\r\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\r\n        }\r\n\r\n        /*\r\n         * We calculate the new total supply and redeemer balance, checking for underflow:\r\n         *  totalSupplyNew = totalSupply - redeemTokens\r\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\r\n         */\r\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\r\n        if (vars.mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\r\n        }\r\n\r\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\r\n        if (vars.mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\r\n        }\r\n\r\n        /* Fail gracefully if protocol has insufficient cash */\r\n        if (getCashPrior() < vars.redeemAmount) {\r\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  On success, the cToken has redeemAmount less of cash.\r\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n         */\r\n        doTransferOut(redeemer, vars.redeemAmount);\r\n\r\n        /* We write previously calculated values into storage */\r\n        totalSupply = vars.totalSupplyNew;\r\n        accountTokens[redeemer] = vars.accountTokensNew;\r\n\r\n        /* We emit a Transfer event, and a Redeem event */\r\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\r\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\r\n\r\n        /* We call the defense hook */\r\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\r\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\r\n        }\r\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\r\n        return borrowFresh(msg.sender, borrowAmount);\r\n    }\r\n\r\n    struct BorrowLocalVars {\r\n        MathError mathErr;\r\n        uint accountBorrows;\r\n        uint accountBorrowsNew;\r\n        uint totalBorrowsNew;\r\n    }\r\n\r\n    /**\r\n      * @notice Users borrow assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\r\n        /* Fail if borrow not allowed */\r\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\r\n        if (allowed != 0) {\r\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\r\n        }\r\n\r\n        /* Fail gracefully if protocol has insufficient underlying cash */\r\n        if (getCashPrior() < borrowAmount) {\r\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\r\n        }\r\n\r\n        BorrowLocalVars memory vars;\r\n\r\n        /*\r\n         * We calculate the new borrower and total borrow balances, failing on overflow:\r\n         *  accountBorrowsNew = accountBorrows + borrowAmount\r\n         *  totalBorrowsNew = totalBorrows + borrowAmount\r\n         */\r\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\r\n        if (vars.mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\r\n        }\r\n\r\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\r\n        if (vars.mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\r\n        }\r\n\r\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\r\n        if (vars.mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         * We invoke doTransferOut for the borrower and the borrowAmount.\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  On success, the cToken borrowAmount less of cash.\r\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n         */\r\n        doTransferOut(borrower, borrowAmount);\r\n\r\n        /* We write the previously calculated values into storage */\r\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\r\n        accountBorrows[borrower].interestIndex = borrowIndex;\r\n        totalBorrows = vars.totalBorrowsNew;\r\n\r\n        /* We emit a Borrow event */\r\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\r\n\r\n        /* We call the defense hook */\r\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\r\n     */\r\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\r\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\r\n        }\r\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\r\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\r\n     */\r\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\r\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\r\n        }\r\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\r\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\r\n    }\r\n\r\n    struct RepayBorrowLocalVars {\r\n        Error err;\r\n        MathError mathErr;\r\n        uint repayAmount;\r\n        uint borrowerIndex;\r\n        uint accountBorrows;\r\n        uint accountBorrowsNew;\r\n        uint totalBorrowsNew;\r\n        uint actualRepayAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Borrows are repaid by another user (possibly the borrower).\r\n     * @param payer the account paying off the borrow\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount the amount of undelrying tokens being returned\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\r\n     */\r\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\r\n        /* Fail if repayBorrow not allowed */\r\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\r\n        if (allowed != 0) {\r\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\r\n        }\r\n\r\n        RepayBorrowLocalVars memory vars;\r\n\r\n        /* We remember the original borrowerIndex for verification purposes */\r\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\r\n\r\n        /* We fetch the amount the borrower owes, with accumulated interest */\r\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\r\n        if (vars.mathErr != MathError.NO_ERROR) {\r\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\r\n        }\r\n\r\n        /* If repayAmount == -1, repayAmount = accountBorrows */\r\n        if (repayAmount == uint(-1)) {\r\n            vars.repayAmount = vars.accountBorrows;\r\n        } else {\r\n            vars.repayAmount = repayAmount;\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         * We call doTransferIn for the payer and the repayAmount\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  On success, the cToken holds an additional repayAmount of cash.\r\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n         *   it returns the amount actually transferred, in case of a fee.\r\n         */\r\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\r\n\r\n        /*\r\n         * We calculate the new borrower and total borrow balances, failing on underflow:\r\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\r\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\r\n         */\r\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\r\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\r\n\r\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\r\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\r\n\r\n        /* We write the previously calculated values into storage */\r\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\r\n        accountBorrows[borrower].interestIndex = borrowIndex;\r\n        totalBorrows = vars.totalBorrowsNew;\r\n\r\n        /* We emit a RepayBorrow event */\r\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\r\n\r\n        /* We call the defense hook */\r\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\r\n\r\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\r\n     */\r\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\r\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\r\n        }\r\n\r\n        error = cTokenCollateral.accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\r\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\r\n        }\r\n\r\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\r\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\r\n    }\r\n\r\n    /**\r\n     * @notice The liquidator liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param liquidator The address repaying the borrow and seizing collateral\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\r\n     */\r\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\r\n        /* Fail if liquidate not allowed */\r\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\r\n        if (allowed != 0) {\r\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\r\n        }\r\n\r\n        /* Verify market's block number equals current block number */\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\r\n        }\r\n\r\n        /* Verify cTokenCollateral market's block number equals current block number */\r\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\r\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\r\n        }\r\n\r\n        /* Fail if borrower = liquidator */\r\n        if (borrower == liquidator) {\r\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\r\n        }\r\n\r\n        /* Fail if repayAmount = 0 */\r\n        if (repayAmount == 0) {\r\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\r\n        }\r\n\r\n        /* Fail if repayAmount = -1 */\r\n        if (repayAmount == uint(-1)) {\r\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\r\n        }\r\n\r\n\r\n        /* Fail if repayBorrow fails */\r\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\r\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\r\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /* We calculate the number of collateral tokens that will be seized */\r\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\r\n        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\r\n\r\n        /* Revert if borrower collateral token balance < seizeTokens */\r\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \"LIQUIDATE_SEIZE_TOO_MUCH\");\r\n\r\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\r\n        uint seizeError;\r\n        if (address(cTokenCollateral) == address(this)) {\r\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\r\n        } else {\r\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\r\n        }\r\n\r\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\r\n        require(seizeError == uint(Error.NO_ERROR), \"token seizure failed\");\r\n\r\n        /* We emit a LiquidateBorrow event */\r\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\r\n\r\n        /* We call the defense hook */\r\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\r\n\r\n        return (uint(Error.NO_ERROR), actualRepayAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers collateral tokens (this market) to the liquidator.\r\n     * @dev Will fail unless called by another cToken during the process of liquidation.\r\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\r\n     * @param liquidator The account receiving seized collateral\r\n     * @param borrower The account having collateral seized\r\n     * @param seizeTokens The number of cTokens to seize\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\r\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers collateral tokens (this market) to the liquidator.\r\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\r\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\r\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\r\n     * @param liquidator The account receiving seized collateral\r\n     * @param borrower The account having collateral seized\r\n     * @param seizeTokens The number of cTokens to seize\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\r\n        /* Fail if seize not allowed */\r\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\r\n        if (allowed != 0) {\r\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\r\n        }\r\n\r\n        /* Fail if borrower = liquidator */\r\n        if (borrower == liquidator) {\r\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\r\n        }\r\n\r\n        MathError mathErr;\r\n        uint borrowerTokensNew;\r\n        uint liquidatorTokensNew;\r\n\r\n        /*\r\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\r\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\r\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\r\n         */\r\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\r\n        }\r\n\r\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /* We write the previously calculated values into storage */\r\n        accountTokens[borrower] = borrowerTokensNew;\r\n        accountTokens[liquidator] = liquidatorTokensNew;\r\n\r\n        /* Emit a Transfer event */\r\n        emit Transfer(borrower, liquidator, seizeTokens);\r\n\r\n        /* We call the defense hook */\r\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    /**\r\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\r\n        // Check caller = admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\r\n        }\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _acceptAdmin() external returns (uint) {\r\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\r\n        }\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Sets a new comptroller for the market\r\n      * @dev Admin function to set a new comptroller\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\r\n        }\r\n\r\n        ComptrollerInterface oldComptroller = comptroller;\r\n        // Ensure invoke comptroller.isComptroller() returns true\r\n        require(newComptroller.isComptroller(), \"marker method returned false\");\r\n\r\n        // Set market's comptroller to newComptroller\r\n        comptroller = newComptroller;\r\n\r\n        // Emit NewComptroller(oldComptroller, newComptroller)\r\n        emit NewComptroller(oldComptroller, newComptroller);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\r\n      * @dev Admin function to accrue interest and set a new reserve factor\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\r\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\r\n        }\r\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\r\n        return _setReserveFactorFresh(newReserveFactorMantissa);\r\n    }\r\n\r\n    /**\r\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\r\n      * @dev Admin function to set a new reserve factor\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\r\n        }\r\n\r\n        // Verify market's block number equals current block number\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\r\n        }\r\n\r\n        // Check newReserveFactor ≤ maxReserveFactor\r\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\r\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\r\n        }\r\n\r\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\r\n        reserveFactorMantissa = newReserveFactorMantissa;\r\n\r\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\r\n     * @param addAmount Amount of addition to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\r\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\r\n        }\r\n\r\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\r\n        (error, ) = _addReservesFresh(addAmount);\r\n        return error;\r\n    }\r\n\r\n    /**\r\n     * @notice Add reserves by transferring from caller\r\n     * @dev Requires fresh interest accrual\r\n     * @param addAmount Amount of addition to reserves\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\r\n     */\r\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\r\n        // totalReserves + actualAddAmount\r\n        uint totalReservesNew;\r\n        uint actualAddAmount;\r\n\r\n        // We fail gracefully unless market's block number equals current block number\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        /*\r\n         * We call doTransferIn for the caller and the addAmount\r\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n         *  On success, the cToken holds an additional addAmount of cash.\r\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n         *  it returns the amount actually transferred, in case of a fee.\r\n         */\r\n\r\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\r\n\r\n        totalReservesNew = totalReserves + actualAddAmount;\r\n\r\n        /* Revert on overflow */\r\n        require(totalReservesNew >= totalReserves, \"add reserves unexpected overflow\");\r\n\r\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\r\n        totalReserves = totalReservesNew;\r\n\r\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\r\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\r\n\r\n        /* Return (NO_ERROR, actualAddAmount) */\r\n        return (uint(Error.NO_ERROR), actualAddAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Accrues interest and reduces reserves by transferring to admin\r\n     * @param reduceAmount Amount of reduction to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\r\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\r\n        }\r\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\r\n        return _reduceReservesFresh(reduceAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Reduces reserves by transferring to admin\r\n     * @dev Requires fresh interest accrual\r\n     * @param reduceAmount Amount of reduction to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\r\n        // totalReserves - reduceAmount\r\n        uint totalReservesNew;\r\n\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\r\n        }\r\n\r\n        // We fail gracefully unless market's block number equals current block number\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\r\n        }\r\n\r\n        // Fail gracefully if protocol has insufficient underlying cash\r\n        if (getCashPrior() < reduceAmount) {\r\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\r\n        }\r\n\r\n        // Check reduceAmount ≤ reserves[n] (totalReserves)\r\n        if (reduceAmount > totalReserves) {\r\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\r\n        }\r\n\r\n        /////////////////////////\r\n        // EFFECTS & INTERACTIONS\r\n        // (No safe failures beyond this point)\r\n\r\n        totalReservesNew = totalReserves - reduceAmount;\r\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\r\n        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\r\n\r\n        // Store reserves[n+1] = reserves[n] - reduceAmount\r\n        totalReserves = totalReservesNew;\r\n\r\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n        doTransferOut(admin, reduceAmount);\r\n\r\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\r\n     * @dev Admin function to accrue interest and update the interest rate model\r\n     * @param newInterestRateModel the new interest rate model to use\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\r\n        uint error = accrueInterest();\r\n        if (error != uint(Error.NO_ERROR)) {\r\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\r\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\r\n        }\r\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\r\n        return _setInterestRateModelFresh(newInterestRateModel);\r\n    }\r\n\r\n    /**\r\n     * @notice updates the interest rate model (*requires fresh interest accrual)\r\n     * @dev Admin function to update the interest rate model\r\n     * @param newInterestRateModel the new interest rate model to use\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\r\n\r\n        // Used to store old model for use in the event that is emitted on success\r\n        InterestRateModel oldInterestRateModel;\r\n\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\r\n        }\r\n\r\n        // We fail gracefully unless market's block number equals current block number\r\n        if (accrualBlockNumber != getBlockNumber()) {\r\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\r\n        }\r\n\r\n        // Track the market's current interest rate model\r\n        oldInterestRateModel = interestRateModel;\r\n\r\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\r\n        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\r\n\r\n        // Set the interest rate model to newInterestRateModel\r\n        interestRateModel = newInterestRateModel;\r\n\r\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\r\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /*** Safe Token ***/\r\n\r\n    /**\r\n     * @notice Gets balance of this contract in terms of the underlying\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of underlying owned by this contract\r\n     */\r\n    function getCashPrior() internal view returns (uint);\r\n\r\n    /**\r\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\r\n     *  This may revert due to insufficient balance or insufficient allowance.\r\n     */\r\n    function doTransferIn(address from, uint amount) internal returns (uint);\r\n\r\n    /**\r\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\r\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\r\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\r\n     */\r\n    function doTransferOut(address payable to, uint amount) internal;\r\n\r\n\r\n    /*** Reentrancy Guard ***/\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     */\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"re-entered\");\r\n        _notEntered = false;\r\n        _;\r\n        _notEntered = true; // get a gas-refund post-Istanbul\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Compound's CErc20 Contract\r\n * @notice CTokens which wrap an EIP-20 underlying\r\n * @author Compound\r\n */\r\ncontract CErc20 is CToken, CErc20Interface {\r\n    /**\r\n     * @notice Initialize the new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     */\r\n    function initialize(address underlying_,\r\n                        ComptrollerInterface comptroller_,\r\n                        InterestRateModel interestRateModel_,\r\n                        uint initialExchangeRateMantissa_,\r\n                        string memory name_,\r\n                        string memory symbol_,\r\n                        uint8 decimals_) public {\r\n        // CToken initialize does the bulk of the work\r\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\r\n\r\n        // Set underlying and sanity check it\r\n        underlying = underlying_;\r\n        EIP20Interface(underlying).totalSupply();\r\n    }\r\n\r\n    /*** User Interface ***/\r\n\r\n    /**\r\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function mint(uint mintAmount) external returns (uint) {\r\n        (uint err,) = mintInternal(mintAmount);\r\n        return err;\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeem(uint redeemTokens) external returns (uint) {\r\n        return redeemInternal(redeemTokens);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\r\n        return redeemUnderlyingInternal(redeemAmount);\r\n    }\r\n\r\n    /**\r\n      * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function borrow(uint borrowAmount) external returns (uint) {\r\n        return borrowInternal(borrowAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function repayBorrow(uint repayAmount) external returns (uint) {\r\n        (uint err,) = repayBorrowInternal(repayAmount);\r\n        return err;\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\r\n        (uint err,) = repayBorrowBehalfInternal(borrower, repayAmount);\r\n        return err;\r\n    }\r\n\r\n    /**\r\n     * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {\r\n        (uint err,) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\r\n        return err;\r\n    }\r\n\r\n    /**\r\n     * @notice The sender adds to reserves.\r\n     * @param addAmount The amount fo underlying token to add as reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _addReserves(uint addAmount) external returns (uint) {\r\n        return _addReservesInternal(addAmount);\r\n    }\r\n\r\n    /*** Safe Token ***/\r\n\r\n    /**\r\n     * @notice Gets balance of this contract in terms of the underlying\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of underlying tokens owned by this contract\r\n     */\r\n    function getCashPrior() internal view returns (uint) {\r\n        EIP20Interface token = EIP20Interface(underlying);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\r\n     *      This will revert due to insufficient balance or insufficient allowance.\r\n     *      This function returns the actual amount received,\r\n     *      which may be less than `amount` if there is a fee attached to the transfer.\r\n     *\r\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n     */\r\n    function doTransferIn(address from, uint amount) internal returns (uint) {\r\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\r\n        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\r\n        token.transferFrom(from, address(this), amount);\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {                       // This is a non-standard ERC-20\r\n                    success := not(0)          // set success to true\r\n                }\r\n                case 32 {                      // This is a compliant ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)        // Set `success = returndata` of external call\r\n                }\r\n                default {                      // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_IN_FAILED\");\r\n\r\n        // Calculate the amount that was *actually* transferred\r\n        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\r\n        require(balanceAfter >= balanceBefore, \"TOKEN_TRANSFER_IN_OVERFLOW\");\r\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\r\n    }\r\n\r\n    /**\r\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\r\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\r\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\r\n     *      it is >= amount, this should not revert in normal conditions.\r\n     *\r\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n     */\r\n    function doTransferOut(address payable to, uint amount) internal {\r\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\r\n        token.transfer(to, amount);\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {                      // This is a non-standard ERC-20\r\n                    success := not(0)          // set success to true\r\n                }\r\n                case 32 {                     // This is a complaint ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)        // Set `success = returndata` of external call\r\n                }\r\n                default {                     // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Compound's CErc20Delegate Contract\r\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\r\n * @author Compound\r\n */\r\ncontract CErc20Delegate is CErc20, CDelegateInterface {\r\n    /**\r\n     * @notice Construct an empty delegate\r\n     */\r\n    constructor() public {}\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n    function _becomeImplementation(bytes memory data) public {\r\n        // Shh -- currently unused\r\n        data;\r\n\r\n        // Shh -- we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            implementation = address(0);\r\n        }\r\n\r\n        require(msg.sender == admin, \"only the admin may call _becomeImplementation\");\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\r\n     */\r\n    function _resignImplementation() public {\r\n        // Shh -- we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            implementation = address(0);\r\n        }\r\n\r\n        require(msg.sender == admin, \"only the admin may call _resignImplementation\");\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface CompLike {\r\n  function delegate(address delegatee) external;\r\n}\r\n\r\n/**\r\n * @title Compound's CCompLikeDelegate Contract\r\n * @notice CTokens which can 'delegate votes' of their underlying ERC-20\r\n * @author Compound\r\n */\r\ncontract CCompLikeDelegate is CErc20Delegate {\r\n  /**\r\n   * @notice Construct an empty delegate\r\n   */\r\n  constructor() public CErc20Delegate() {}\r\n\r\n  /**\r\n   * @notice Admin call to delegate the votes of the COMP-like underlying\r\n   * @param compLikeDelegatee The address to delegate votes to\r\n   */\r\n  function _delegateCompLikeTo(address compLikeDelegatee) external {\r\n    require(msg.sender == admin, \"only the admin may set the comp-like delegate\");\r\n    CompLike(underlying).delegate(compLikeDelegatee);\r\n  }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Compound's CDai Contract\r\n * @notice CToken which wraps Multi-Collateral DAI\r\n * @author Compound\r\n */\r\ncontract CDaiDelegate is CErc20Delegate {\r\n    /**\r\n     * @notice DAI adapter address\r\n     */\r\n    address public daiJoinAddress;\r\n\r\n    /**\r\n     * @notice DAI Savings Rate (DSR) pot address\r\n     */\r\n    address public potAddress;\r\n\r\n    /**\r\n     * @notice DAI vat address\r\n     */\r\n    address public vatAddress;\r\n\r\n    /**\r\n     * @notice Delegate interface to become the implementation\r\n     * @param data The encoded arguments for becoming\r\n     */\r\n    function _becomeImplementation(bytes memory data) public {\r\n        require(msg.sender == admin, \"only the admin may initialize the implementation\");\r\n\r\n        (address daiJoinAddress_, address potAddress_) = abi.decode(data, (address, address));\r\n        return _becomeImplementation(daiJoinAddress_, potAddress_);\r\n    }\r\n\r\n    /**\r\n     * @notice Explicit interface to become the implementation\r\n     * @param daiJoinAddress_ DAI adapter address\r\n     * @param potAddress_ DAI Savings Rate (DSR) pot address\r\n     */\r\n    function _becomeImplementation(address daiJoinAddress_, address potAddress_) internal {\r\n        // Get dai and vat and sanity check the underlying\r\n        DaiJoinLike daiJoin = DaiJoinLike(daiJoinAddress_);\r\n        PotLike pot = PotLike(potAddress_);\r\n        GemLike dai = daiJoin.dai();\r\n        VatLike vat = daiJoin.vat();\r\n        require(address(dai) == underlying, \"DAI must be the same as underlying\");\r\n\r\n        // Remember the relevant addresses\r\n        daiJoinAddress = daiJoinAddress_;\r\n        potAddress = potAddress_;\r\n        vatAddress = address(vat);\r\n\r\n        // Approve moving our DAI into the vat through daiJoin\r\n        dai.approve(daiJoinAddress, uint(-1));\r\n\r\n        // Approve the pot to transfer our funds within the vat\r\n        vat.hope(potAddress);\r\n        vat.hope(daiJoinAddress);\r\n\r\n        // Accumulate DSR interest -- must do this in order to doTransferIn\r\n        pot.drip();\r\n\r\n        // Transfer all cash in (doTransferIn does this regardless of amount)\r\n        doTransferIn(address(this), 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate interface to resign the implementation\r\n     */\r\n    function _resignImplementation() public {\r\n        require(msg.sender == admin, \"only the admin may abandon the implementation\");\r\n\r\n        // Transfer all cash out of the DSR - note that this relies on self-transfer\r\n        DaiJoinLike daiJoin = DaiJoinLike(daiJoinAddress);\r\n        PotLike pot = PotLike(potAddress);\r\n        VatLike vat = VatLike(vatAddress);\r\n\r\n        // Accumulate interest\r\n        pot.drip();\r\n\r\n        // Calculate the total amount in the pot, and move it out\r\n        uint pie = pot.pie(address(this));\r\n        pot.exit(pie);\r\n\r\n        // Checks the actual balance of DAI in the vat after the pot exit\r\n        uint bal = vat.dai(address(this));\r\n\r\n        // Remove our whole balance\r\n        daiJoin.exit(address(this), bal / RAY);\r\n    }\r\n\r\n    /*** CToken Overrides ***/\r\n\r\n    /**\r\n      * @notice Accrues DSR then applies accrued interest to total borrows and reserves\r\n      * @dev This calculates interest accrued from the last checkpointed block\r\n      *      up to the current block and writes new checkpoint to storage.\r\n      */\r\n    function accrueInterest() public returns (uint) {\r\n        // Accumulate DSR interest\r\n        PotLike(potAddress).drip();\r\n\r\n        // Accumulate CToken interest\r\n        return super.accrueInterest();\r\n    }\r\n\r\n    /*** Safe Token ***/\r\n\r\n    /**\r\n     * @notice Gets balance of this contract in terms of the underlying\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of underlying tokens owned by this contract\r\n     */\r\n    function getCashPrior() internal view returns (uint) {\r\n        PotLike pot = PotLike(potAddress);\r\n        uint pie = pot.pie(address(this));\r\n        return mul(pot.chi(), pie) / RAY;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer the underlying to this contract and sweep into DSR pot\r\n     * @param from Address to transfer funds from\r\n     * @param amount Amount of underlying to transfer\r\n     * @return The actual amount that is transferred\r\n     */\r\n    function doTransferIn(address from, uint amount) internal returns (uint) {\r\n        // Perform the EIP-20 transfer in\r\n        EIP20Interface token = EIP20Interface(underlying);\r\n        require(token.transferFrom(from, address(this), amount), \"unexpected EIP-20 transfer in return\");\r\n\r\n        DaiJoinLike daiJoin = DaiJoinLike(daiJoinAddress);\r\n        GemLike dai = GemLike(underlying);\r\n        PotLike pot = PotLike(potAddress);\r\n        VatLike vat = VatLike(vatAddress);\r\n\r\n        // Convert all our DAI to internal DAI in the vat\r\n        daiJoin.join(address(this), dai.balanceOf(address(this)));\r\n\r\n        // Checks the actual balance of DAI in the vat after the join\r\n        uint bal = vat.dai(address(this));\r\n\r\n        // Calculate the percentage increase to th pot for the entire vat, and move it in\r\n        // Note: We may leave a tiny bit of DAI in the vat...but we do the whole thing every time\r\n        uint pie = bal / pot.chi();\r\n        pot.join(pie);\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer the underlying from this contract, after sweeping out of DSR pot\r\n     * @param to Address to transfer funds to\r\n     * @param amount Amount of underlying to transfer\r\n     */\r\n    function doTransferOut(address payable to, uint amount) internal {\r\n        DaiJoinLike daiJoin = DaiJoinLike(daiJoinAddress);\r\n        PotLike pot = PotLike(potAddress);\r\n\r\n        // Calculate the percentage decrease from the pot, and move that much out\r\n        // Note: Use a slightly larger pie size to ensure that we get at least amount in the vat\r\n        uint pie = add(mul(amount, RAY) / pot.chi(), 1);\r\n        pot.exit(pie);\r\n\r\n        daiJoin.exit(to, amount);\r\n    }\r\n\r\n    /*** Maker Internals ***/\r\n\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"add-overflow\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n}\r\n\r\n/*** Maker Interfaces ***/\r\n\r\ncontract PotLike {\r\n    function chi() external view returns (uint);\r\n    function dsr() external view returns (uint);\r\n    function rho() external view returns (uint);\r\n    function pie(address) external view returns (uint);\r\n    function drip() external returns (uint);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n}\r\n\r\ninterface GemLike {\r\n    function approve(address, uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface VatLike {\r\n    function dai(address) external view returns (uint);\r\n    function hope(address) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external returns (VatLike);\r\n    function dai() external returns (GemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Compound's CErc20Delegator Contract\r\n * @notice CTokens which wrap an EIP-20 underlying and delegate to an implementation\r\n * @author Compound\r\n */\r\ncontract CErc20Delegator is CTokenInterface, CErc20Interface, CDelegatorInterface {\r\n    /**\r\n     * @notice Construct a new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     * @param admin_ Address of the administrator of this token\r\n     * @param implementation_ The address of the implementation the contract delegates to\r\n     * @param becomeImplementationData The encoded args for becomeImplementation\r\n     */\r\n    constructor(address underlying_,\r\n                ComptrollerInterface comptroller_,\r\n                InterestRateModel interestRateModel_,\r\n                uint initialExchangeRateMantissa_,\r\n                string memory name_,\r\n                string memory symbol_,\r\n                uint8 decimals_,\r\n                address payable admin_,\r\n                address implementation_,\r\n                bytes memory becomeImplementationData) public {\r\n        // Creator of the contract is admin during initialization\r\n        admin = msg.sender;\r\n\r\n        // First delegate gets to initialize the delegator (i.e. storage contract)\r\n        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\r\n                                                            underlying_,\r\n                                                            comptroller_,\r\n                                                            interestRateModel_,\r\n                                                            initialExchangeRateMantissa_,\r\n                                                            name_,\r\n                                                            symbol_,\r\n                                                            decimals_));\r\n\r\n        // New implementations always get set via the settor (post-initialize)\r\n        _setImplementation(implementation_, false, becomeImplementationData);\r\n\r\n        // Set the proper admin now that initialization is done\r\n        admin = admin_;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public {\r\n        require(msg.sender == admin, \"CErc20Delegator::_setImplementation: Caller must be admin\");\r\n\r\n        if (allowResign) {\r\n            delegateToImplementation(abi.encodeWithSignature(\"_resignImplementation()\"));\r\n        }\r\n\r\n        address oldImplementation = implementation;\r\n        implementation = implementation_;\r\n\r\n        delegateToImplementation(abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData));\r\n\r\n        emit NewImplementation(oldImplementation, implementation);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function mint(uint mintAmount) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"mint(uint256)\", mintAmount));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeem(uint redeemTokens) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"redeem(uint256)\", redeemTokens));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"redeemUnderlying(uint256)\", redeemAmount));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n      * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function borrow(uint borrowAmount) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"borrow(uint256)\", borrowAmount));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function repayBorrow(uint repayAmount) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"repayBorrow(uint256)\", repayAmount));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"repayBorrowBehalf(address,uint256)\", borrower, repayAmount));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"liquidateBorrow(address,uint256,address)\", borrower, repayAmount, cTokenCollateral));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint amount) external returns (bool) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transfer(address,uint256)\", dst, amount));\r\n        return abi.decode(data, (bool));\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", src, dst, amount));\r\n        return abi.decode(data, (bool));\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"approve(address,uint256)\", spender, amount));\r\n        return abi.decode(data, (bool));\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current allowance from `owner` for `spender`\r\n     * @param owner The address of the account which owns the tokens to be spent\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @return The number of tokens allowed to be spent (-1 means infinite)\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint) {\r\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"allowance(address,address)\", owner, spender));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Get the token balance of the `owner`\r\n     * @param owner The address of the account to query\r\n     * @return The number of tokens owned by `owner`\r\n     */\r\n    function balanceOf(address owner) external view returns (uint) {\r\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"balanceOf(address)\", owner));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Get the underlying balance of the `owner`\r\n     * @dev This also accrues interest in a transaction\r\n     * @param owner The address of the account to query\r\n     * @return The amount of underlying owned by `owner`\r\n     */\r\n    function balanceOfUnderlying(address owner) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"balanceOfUnderlying(address)\", owner));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\r\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\r\n     * @param account Address of the account to snapshot\r\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\r\n     */\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\r\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"getAccountSnapshot(address)\", account));\r\n        return abi.decode(data, (uint, uint, uint, uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current per-block borrow interest rate for this cToken\r\n     * @return The borrow interest rate per block, scaled by 1e18\r\n     */\r\n    function borrowRatePerBlock() external view returns (uint) {\r\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"borrowRatePerBlock()\"));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current per-block supply interest rate for this cToken\r\n     * @return The supply interest rate per block, scaled by 1e18\r\n     */\r\n    function supplyRatePerBlock() external view returns (uint) {\r\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"supplyRatePerBlock()\"));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current total borrows plus accrued interest\r\n     * @return The total borrows with interest\r\n     */\r\n    function totalBorrowsCurrent() external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"totalBorrowsCurrent()\"));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\r\n     * @param account The address whose balance should be calculated after updating borrowIndex\r\n     * @return The calculated balance\r\n     */\r\n    function borrowBalanceCurrent(address account) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"borrowBalanceCurrent(address)\", account));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Return the borrow balance of account based on stored data\r\n     * @param account The address whose balance should be calculated\r\n     * @return The calculated balance\r\n     */\r\n    function borrowBalanceStored(address account) public view returns (uint) {\r\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"borrowBalanceStored(address)\", account));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n   /**\r\n     * @notice Accrue interest then return the up-to-date exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateCurrent() public returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"exchangeRateCurrent()\"));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateStored() public view returns (uint) {\r\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"exchangeRateStored()\"));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Get cash balance of this cToken in the underlying asset\r\n     * @return The quantity of underlying asset owned by this contract\r\n     */\r\n    function getCash() external view returns (uint) {\r\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"getCash()\"));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n      * @notice Applies accrued interest to total borrows and reserves.\r\n      * @dev This calculates interest accrued from the last checkpointed block\r\n      *      up to the current block and writes new checkpoint to storage.\r\n      */\r\n    function accrueInterest() public returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"accrueInterest()\"));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers collateral tokens (this market) to the liquidator.\r\n     * @dev Will fail unless called by another cToken during the process of liquidation.\r\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\r\n     * @param liquidator The account receiving seized collateral\r\n     * @param borrower The account having collateral seized\r\n     * @param seizeTokens The number of cTokens to seize\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"seize(address,address,uint256)\", liquidator, borrower, seizeTokens));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    /**\r\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setPendingAdmin(address)\", newPendingAdmin));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n      * @notice Sets a new comptroller for the market\r\n      * @dev Admin function to set a new comptroller\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setComptroller(address)\", newComptroller));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\r\n      * @dev Admin function to accrue interest and set a new reserve factor\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setReserveFactor(uint256)\", newReserveFactorMantissa));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _acceptAdmin() external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_acceptAdmin()\"));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Accrues interest and adds reserves by transferring from admin\r\n     * @param addAmount Amount of reserves to add\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _addReserves(uint addAmount) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_addReserves(uint256)\", addAmount));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Accrues interest and reduces reserves by transferring to admin\r\n     * @param reduceAmount Amount of reduction to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _reduceReserves(uint reduceAmount) external returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_reduceReserves(uint256)\", reduceAmount));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\r\n     * @dev Admin function to accrue interest and update the interest rate model\r\n     * @param newInterestRateModel the new interest rate model to use\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\r\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setInterestRateModel(address)\", newInterestRateModel));\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    /**\r\n     * @notice Internal method to delegate execution to another contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param callee The contract to delegatecall\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize)\r\n            }\r\n        }\r\n        return returnData;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to the implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToImplementation(bytes memory data) public returns (bytes memory) {\r\n        return delegateTo(implementation, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\r\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize)\r\n            }\r\n        }\r\n        return abi.decode(returnData, (bytes));\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     */\r\n    function () external payable {\r\n        require(msg.value == 0,\"CErc20Delegator:fallback: cannot send value to fallback\");\r\n\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = implementation.delegatecall(msg.data);\r\n\r\n        assembly {\r\n            let free_mem_ptr := mload(0x40)\r\n            returndatacopy(free_mem_ptr, 0, returndatasize)\r\n\r\n            switch success\r\n            case 0 { revert(free_mem_ptr, returndatasize) }\r\n            default { return(free_mem_ptr, returndatasize) }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Compound's CErc20Immutable Contract\r\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\r\n * @author Compound\r\n */\r\ncontract CErc20Immutable is CErc20 {\r\n    /**\r\n     * @notice Construct a new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     * @param admin_ Address of the administrator of this token\r\n     */\r\n    constructor(address underlying_,\r\n                ComptrollerInterface comptroller_,\r\n                InterestRateModel interestRateModel_,\r\n                uint initialExchangeRateMantissa_,\r\n                string memory name_,\r\n                string memory symbol_,\r\n                uint8 decimals_,\r\n                address payable admin_) public {\r\n        // Creator of the contract is admin during initialization\r\n        admin = msg.sender;\r\n\r\n        // Initialize the market\r\n        initialize(underlying_, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\r\n\r\n        // Set the proper admin now that initialization is done\r\n        admin = admin_;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Compound's CEther Contract\r\n * @notice CToken which wraps Ether\r\n * @author Compound\r\n */\r\ncontract CEther is CToken {\r\n    /**\r\n     * @notice Construct a new CEther money market\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     * @param admin_ Address of the administrator of this token\r\n     */\r\n    constructor(ComptrollerInterface comptroller_,\r\n                InterestRateModel interestRateModel_,\r\n                uint initialExchangeRateMantissa_,\r\n                string memory name_,\r\n                string memory symbol_,\r\n                uint8 decimals_,\r\n                address payable admin_) public {\r\n        // Creator of the contract is admin during initialization\r\n        admin = msg.sender;\r\n\r\n        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\r\n\r\n        // Set the proper admin now that initialization is done\r\n        admin = admin_;\r\n    }\r\n\r\n\r\n    /*** User Interface ***/\r\n\r\n    /**\r\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Reverts upon any failure\r\n     */\r\n    function mint() external payable {\r\n        (uint err,) = mintInternal(msg.value);\r\n        requireNoError(err, \"mint failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeem(uint redeemTokens) external returns (uint) {\r\n        return redeemInternal(redeemTokens);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\r\n        return redeemUnderlyingInternal(redeemAmount);\r\n    }\r\n\r\n    /**\r\n      * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function borrow(uint borrowAmount) external returns (uint) {\r\n        return borrowInternal(borrowAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays their own borrow\r\n     * @dev Reverts upon any failure\r\n     */\r\n    function repayBorrow() external payable {\r\n        (uint err,) = repayBorrowInternal(msg.value);\r\n        requireNoError(err, \"repayBorrow failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Sender repays a borrow belonging to borrower\r\n     * @dev Reverts upon any failure\r\n     * @param borrower the account with the debt being payed off\r\n     */\r\n    function repayBorrowBehalf(address borrower) external payable {\r\n        (uint err,) = repayBorrowBehalfInternal(borrower, msg.value);\r\n        requireNoError(err, \"repayBorrowBehalf failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @dev Reverts upon any failure\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     */\r\n    function liquidateBorrow(address borrower, CToken cTokenCollateral) external payable {\r\n        (uint err,) = liquidateBorrowInternal(borrower, msg.value, cTokenCollateral);\r\n        requireNoError(err, \"liquidateBorrow failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Send Ether to CEther to mint\r\n     */\r\n    function () external payable {\r\n        (uint err,) = mintInternal(msg.value);\r\n        requireNoError(err, \"mint failed\");\r\n    }\r\n\r\n    /*** Safe Token ***/\r\n\r\n    /**\r\n     * @notice Gets balance of this contract in terms of Ether, before this message\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of Ether owned by this contract\r\n     */\r\n    function getCashPrior() internal view returns (uint) {\r\n        (MathError err, uint startingBalance) = subUInt(address(this).balance, msg.value);\r\n        require(err == MathError.NO_ERROR);\r\n        return startingBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Perform the actual transfer in, which is a no-op\r\n     * @param from Address sending the Ether\r\n     * @param amount Amount of Ether being sent\r\n     * @return The actual amount of Ether transferred\r\n     */\r\n    function doTransferIn(address from, uint amount) internal returns (uint) {\r\n        // Sanity checks\r\n        require(msg.sender == from, \"sender mismatch\");\r\n        require(msg.value == amount, \"value mismatch\");\r\n        return amount;\r\n    }\r\n\r\n    function doTransferOut(address payable to, uint amount) internal {\r\n        /* Send the Ether, with minimal gas and revert on failure */\r\n        to.transfer(amount);\r\n    }\r\n\r\n    function requireNoError(uint errCode, string memory message) internal pure {\r\n        if (errCode == uint(Error.NO_ERROR)) {\r\n            return;\r\n        }\r\n\r\n        bytes memory fullMessage = new bytes(bytes(message).length + 5);\r\n        uint i;\r\n\r\n        for (i = 0; i < bytes(message).length; i++) {\r\n            fullMessage[i] = bytes(message)[i];\r\n        }\r\n\r\n        fullMessage[i+0] = byte(uint8(32));\r\n        fullMessage[i+1] = byte(uint8(40));\r\n        fullMessage[i+2] = byte(uint8(48 + ( errCode / 10 )));\r\n        fullMessage[i+3] = byte(uint8(48 + ( errCode % 10 )));\r\n        fullMessage[i+4] = byte(uint8(41));\r\n\r\n        require(errCode == uint(Error.NO_ERROR), string(fullMessage));\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\ncontract PriceOracle {\r\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\r\n    bool public constant isPriceOracle = true;\r\n\r\n    /**\r\n      * @notice Get the underlying price of a cToken asset\r\n      * @param cToken The cToken to get the underlying price of\r\n      * @return The underlying asset price mantissa (scaled by 1e18).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getUnderlyingPrice(CToken cToken) external returns (uint);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ncontract UnitrollerAdminStorage {\r\n    /**\r\n    * @notice Administrator for this contract\r\n    */\r\n    address public admin;\r\n\r\n    /**\r\n    * @notice Pending administrator for this contract\r\n    */\r\n    address public pendingAdmin;\r\n\r\n    /**\r\n    * @notice Active brains of Unitroller\r\n    */\r\n    address public comptrollerImplementation;\r\n\r\n    /**\r\n    * @notice Pending brains of Unitroller\r\n    */\r\n    address public pendingComptrollerImplementation;\r\n}\r\n\r\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\r\n\r\n    /**\r\n     * @notice Oracle which gives the price of any given asset\r\n     */\r\n    PriceOracle public oracle;\r\n\r\n    /**\r\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\r\n     */\r\n    uint public closeFactorMantissa;\r\n\r\n    /**\r\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\r\n     */\r\n    uint public liquidationIncentiveMantissa;\r\n\r\n    /**\r\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\r\n     */\r\n    uint public maxAssets;\r\n\r\n    /**\r\n     * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\r\n     */\r\n    mapping(address => CToken[]) public accountAssets;\r\n\r\n}\r\n\r\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\r\n    struct Market {\r\n        /// @notice Whether or not this market is listed\r\n        bool isListed;\r\n\r\n        /**\r\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\r\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\r\n         *  Must be between 0 and 1, and stored as a mantissa.\r\n         */\r\n        uint collateralFactorMantissa;\r\n\r\n        /// @notice Per-market mapping of \"accounts in this asset\"\r\n        mapping(address => bool) accountMembership;\r\n\r\n        /// @notice Whether or not this market receives COMP\r\n        bool isComped;\r\n    }\r\n\r\n    /**\r\n     * @notice Official mapping of cTokens -> Market metadata\r\n     * @dev Used e.g. to determine if a market is supported\r\n     */\r\n    mapping(address => Market) public markets;\r\n\r\n\r\n    /**\r\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\r\n     *  Actions which allow users to remove their own assets cannot be paused.\r\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\r\n     */\r\n    address public pauseGuardian;\r\n    bool public _mintGuardianPaused;\r\n    bool public _borrowGuardianPaused;\r\n    bool public transferGuardianPaused;\r\n    bool public seizeGuardianPaused;\r\n    mapping(address => bool) public mintGuardianPaused;\r\n    mapping(address => bool) public borrowGuardianPaused;\r\n}\r\n\r\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\r\n    struct CompMarketState {\r\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\r\n        uint224 index;\r\n\r\n        /// @notice The block number the index was last updated at\r\n        uint32 block;\r\n    }\r\n\r\n    /// @notice A list of all markets\r\n    CToken[] public allMarkets;\r\n\r\n    /// @notice The rate at which the flywheel distributes COMP, per block\r\n    uint public compRate;\r\n\r\n    /// @notice The portion of compRate that each market currently receives\r\n    mapping(address => uint) public compSpeeds;\r\n\r\n    /// @notice The COMP market supply state for each market\r\n    mapping(address => CompMarketState) public compSupplyState;\r\n\r\n    /// @notice The COMP market borrow state for each market\r\n    mapping(address => CompMarketState) public compBorrowState;\r\n\r\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\r\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\r\n\r\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\r\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\r\n\r\n    /// @notice The COMP accrued but not yet transferred to each user\r\n    mapping(address => uint) public compAccrued;\r\n}\r\n\r\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\r\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\r\n    address public borrowCapGuardian;\r\n\r\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\r\n    mapping(address => uint) public borrowCaps;\r\n}\r\n\r\n\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @title ComptrollerCore\r\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\r\n * CTokens should reference this contract as their comptroller.\r\n */\r\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\r\n\r\n    /**\r\n      * @notice Emitted when pendingComptrollerImplementation is changed\r\n      */\r\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\r\n      */\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingAdmin is changed\r\n      */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n      */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    constructor() public {\r\n        // Set admin to caller\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\r\n\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\r\n        }\r\n\r\n        address oldPendingImplementation = pendingComptrollerImplementation;\r\n\r\n        pendingComptrollerImplementation = newPendingImplementation;\r\n\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\r\n    * @dev Admin function for new implementation to accept it's role as implementation\r\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n    */\r\n    function _acceptImplementation() public returns (uint) {\r\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\r\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\r\n        }\r\n\r\n        // Save current values for inclusion in log\r\n        address oldImplementation = comptrollerImplementation;\r\n        address oldPendingImplementation = pendingComptrollerImplementation;\r\n\r\n        comptrollerImplementation = pendingComptrollerImplementation;\r\n\r\n        pendingComptrollerImplementation = address(0);\r\n\r\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n\r\n    /**\r\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\r\n        // Check caller = admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\r\n        }\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _acceptAdmin() public returns (uint) {\r\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\r\n        }\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * It returns to the external caller whatever the implementation returns\r\n     * or forwards reverts.\r\n     */\r\n    function () payable external {\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\r\n\r\n        assembly {\r\n              let free_mem_ptr := mload(0x40)\r\n              returndatacopy(free_mem_ptr, 0, returndatasize)\r\n\r\n              switch success\r\n              case 0 { revert(free_mem_ptr, returndatasize) }\r\n              default { return(free_mem_ptr, returndatasize) }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Comp {\r\n    /// @notice EIP-20 token name for this token\r\n    string public constant name = \"Based Loans Ownership\";\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public constant symbol = \"BLO\";\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint public constant totalSupply = 100000000e18; // 10 million Comp\r\n\r\n    /// @notice Allowance amounts on behalf of others\r\n    mapping (address => mapping (address => uint96)) internal allowances;\r\n\r\n    /// @notice Official record of token balances for each account\r\n    mapping (address => uint96) internal balances;\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping (address => address) public delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /**\r\n     * @notice Construct a new Comp token\r\n     * @param account The initial account to grant all the tokens\r\n     */\r\n    constructor(address account) public {\r\n        balances[account] = uint96(totalSupply);\r\n        emit Transfer(address(0), account, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint rawAmount) external returns (bool) {\r\n        uint96 amount;\r\n        if (rawAmount == uint(-1)) {\r\n            amount = uint96(-1);\r\n        } else {\r\n            amount = safe96(rawAmount, \"Comp::approve: amount exceeds 96 bits\");\r\n        }\r\n\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint rawAmount) external returns (bool) {\r\n        uint96 amount = safe96(rawAmount, \"Comp::transfer: amount exceeds 96 bits\");\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint96 spenderAllowance = allowances[src][spender];\r\n        uint96 amount = safe96(rawAmount, \"Comp::approve: amount exceeds 96 bits\");\r\n\r\n        if (spender != src && spenderAllowance != uint96(-1)) {\r\n            uint96 newAllowance = sub96(spenderAllowance, amount, \"Comp::transferFrom: transfer amount exceeds spender allowance\");\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) public {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"Comp::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"Comp::delegateBySig: invalid nonce\");\r\n        require(now <= expiry, \"Comp::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint96) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\r\n        require(blockNumber < block.number, \"Comp::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint96 delegatorBalance = balances[delegator];\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint96 amount) internal {\r\n        require(src != address(0), \"Comp::_transferTokens: cannot transfer from the zero address\");\r\n        require(dst != address(0), \"Comp::_transferTokens: cannot transfer to the zero address\");\r\n\r\n        balances[src] = sub96(balances[src], amount, \"Comp::_transferTokens: transfer amount exceeds balance\");\r\n        balances[dst] = add96(balances[dst], amount, \"Comp::_transferTokens: transfer amount overflows\");\r\n        emit Transfer(src, dst, amount);\r\n\r\n        _moveDelegates(delegates[src], delegates[dst], amount);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"Comp::_moveVotes: vote amount underflows\");\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint96 dstRepNew = add96(dstRepOld, amount, \"Comp::_moveVotes: vote amount overflows\");\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\r\n      uint32 blockNumber = safe32(block.number, \"Comp::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n      } else {\r\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n          numCheckpoints[delegatee] = nCheckpoints + 1;\r\n      }\r\n\r\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Compound's Comptroller Contract\r\n * @author Compound\r\n */\r\ncontract Comptroller is ComptrollerV4Storage, ComptrollerInterface, ComptrollerErrorReporter, Exponential {\r\n    /// @notice Emitted when an admin supports a market\r\n    event MarketListed(CToken cToken);\r\n\r\n    /// @notice Emitted when an account enters a market\r\n    event MarketEntered(CToken cToken, address account);\r\n\r\n    /// @notice Emitted when an account exits a market\r\n    event MarketExited(CToken cToken, address account);\r\n\r\n    /// @notice Emitted when close factor is changed by admin\r\n    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\r\n\r\n    /// @notice Emitted when a collateral factor is changed by admin\r\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\r\n\r\n    /// @notice Emitted when liquidation incentive is changed by admin\r\n    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\r\n\r\n    /// @notice Emitted when maxAssets is changed by admin\r\n    event NewMaxAssets(uint oldMaxAssets, uint newMaxAssets);\r\n\r\n    /// @notice Emitted when price oracle is changed\r\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\r\n\r\n    /// @notice Emitted when pause guardian is changed\r\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\r\n\r\n    /// @notice Emitted when an action is paused globally\r\n    event ActionPaused(string action, bool pauseState);\r\n\r\n    /// @notice Emitted when an action is paused on a market\r\n    event ActionPaused(CToken cToken, string action, bool pauseState);\r\n\r\n    /// @notice Emitted when market comped status is changed\r\n    event MarketComped(CToken cToken, bool isComped);\r\n\r\n    /// @notice Emitted when COMP rate is changed\r\n    event NewCompRate(uint oldCompRate, uint newCompRate);\r\n\r\n    /// @notice Emitted when a new COMP speed is calculated for a market\r\n    event CompSpeedUpdated(CToken indexed cToken, uint newSpeed);\r\n\r\n    /// @notice Emitted when COMP is distributed to a supplier\r\n    event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);\r\n\r\n    /// @notice Emitted when COMP is distributed to a borrower\r\n    event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);\r\n\r\n    /// @notice Emitted when borrow cap for a cToken is changed\r\n    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\r\n\r\n    /// @notice Emitted when borrow cap guardian is changed\r\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\r\n\r\n    /// @notice The threshold above which the flywheel transfers COMP, in wei\r\n    uint public constant compClaimThreshold = 0.001e18;\r\n\r\n    /// @notice The initial COMP index for a market\r\n    uint224 public constant compInitialIndex = 1e36;\r\n\r\n    // closeFactorMantissa must be strictly greater than this value\r\n    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\r\n\r\n    // closeFactorMantissa must not exceed this value\r\n    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n    // No collateralFactorMantissa may exceed this value\r\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n    // liquidationIncentiveMantissa must be no less than this value\r\n    uint internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\r\n\r\n    // liquidationIncentiveMantissa must be no greater than this value\r\n    uint internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /*** Assets You Are In ***/\r\n\r\n    /**\r\n     * @notice Returns the assets an account has entered\r\n     * @param account The address of the account to pull assets for\r\n     * @return A dynamic list with the assets the account has entered\r\n     */\r\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\r\n        CToken[] memory assetsIn = accountAssets[account];\r\n\r\n        return assetsIn;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether the given account is entered in the given asset\r\n     * @param account The address of the account to check\r\n     * @param cToken The cToken to check\r\n     * @return True if the account is in the asset, otherwise false.\r\n     */\r\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\r\n        return markets[address(cToken)].accountMembership[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Add assets to be included in account liquidity calculation\r\n     * @param cTokens The list of addresses of the cToken markets to be enabled\r\n     * @return Success indicator for whether each corresponding market was entered\r\n     */\r\n    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\r\n        uint len = cTokens.length;\r\n\r\n        uint[] memory results = new uint[](len);\r\n        for (uint i = 0; i < len; i++) {\r\n            CToken cToken = CToken(cTokens[i]);\r\n\r\n            results[i] = uint(addToMarketInternal(cToken, msg.sender));\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\r\n     * @param cToken The market to enter\r\n     * @param borrower The address of the account to modify\r\n     * @return Success indicator for whether the market was entered\r\n     */\r\n    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\r\n        Market storage marketToJoin = markets[address(cToken)];\r\n\r\n        if (!marketToJoin.isListed) {\r\n            // market is not listed, cannot join\r\n            return Error.MARKET_NOT_LISTED;\r\n        }\r\n\r\n        if (marketToJoin.accountMembership[borrower] == true) {\r\n            // already joined\r\n            return Error.NO_ERROR;\r\n        }\r\n\r\n        if (accountAssets[borrower].length >= maxAssets)  {\r\n            // no space, cannot join\r\n            return Error.TOO_MANY_ASSETS;\r\n        }\r\n\r\n        // survived the gauntlet, add to list\r\n        // NOTE: we store these somewhat redundantly as a significant optimization\r\n        //  this avoids having to iterate through the list for the most common use cases\r\n        //  that is, only when we need to perform liquidity checks\r\n        //  and not whenever we want to check if an account is in a particular market\r\n        marketToJoin.accountMembership[borrower] = true;\r\n        accountAssets[borrower].push(cToken);\r\n\r\n        emit MarketEntered(cToken, borrower);\r\n\r\n        return Error.NO_ERROR;\r\n    }\r\n\r\n    /**\r\n     * @notice Removes asset from sender's account liquidity calculation\r\n     * @dev Sender must not have an outstanding borrow balance in the asset,\r\n     *  or be providing necessary collateral for an outstanding borrow.\r\n     * @param cTokenAddress The address of the asset to be removed\r\n     * @return Whether or not the account successfully exited the market\r\n     */\r\n    function exitMarket(address cTokenAddress) external returns (uint) {\r\n        CToken cToken = CToken(cTokenAddress);\r\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\r\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\r\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\r\n\r\n        /* Fail if the sender has a borrow balance */\r\n        if (amountOwed != 0) {\r\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\r\n        }\r\n\r\n        /* Fail if the sender is not permitted to redeem all of their tokens */\r\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\r\n        if (allowed != 0) {\r\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\r\n        }\r\n\r\n        Market storage marketToExit = markets[address(cToken)];\r\n\r\n        /* Return true if the sender is not already ‘in’ the market */\r\n        if (!marketToExit.accountMembership[msg.sender]) {\r\n            return uint(Error.NO_ERROR);\r\n        }\r\n\r\n        /* Set cToken account membership to false */\r\n        delete marketToExit.accountMembership[msg.sender];\r\n\r\n        /* Delete cToken from the account’s list of assets */\r\n        // load into memory for faster iteration\r\n        CToken[] memory userAssetList = accountAssets[msg.sender];\r\n        uint len = userAssetList.length;\r\n        uint assetIndex = len;\r\n        for (uint i = 0; i < len; i++) {\r\n            if (userAssetList[i] == cToken) {\r\n                assetIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // We *must* have found the asset in the list or our redundant data structure is broken\r\n        assert(assetIndex < len);\r\n\r\n        // copy last item in list to location of item to be removed, reduce length by 1\r\n        CToken[] storage storedList = accountAssets[msg.sender];\r\n        storedList[assetIndex] = storedList[storedList.length - 1];\r\n        storedList.length--;\r\n\r\n        emit MarketExited(cToken, msg.sender);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to mint tokens in the given market\r\n     * @param cToken The market to verify the mint against\r\n     * @param minter The account which would get the minted tokens\r\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\r\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!mintGuardianPaused[cToken], \"mint is paused\");\r\n\r\n        // Shh - currently unused\r\n        minter;\r\n        mintAmount;\r\n\r\n        if (!markets[cToken].isListed) {\r\n            return uint(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        updateCompSupplyIndex(cToken);\r\n        distributeSupplierComp(cToken, minter, false);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates mint and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being minted\r\n     * @param minter The address minting the tokens\r\n     * @param actualMintAmount The amount of the underlying asset being minted\r\n     * @param mintTokens The number of tokens being minted\r\n     */\r\n    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {\r\n        // Shh - currently unused\r\n        cToken;\r\n        minter;\r\n        actualMintAmount;\r\n        mintTokens;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\r\n     * @param cToken The market to verify the redeem against\r\n     * @param redeemer The account which would redeem the tokens\r\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\r\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\r\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\r\n        if (allowed != uint(Error.NO_ERROR)) {\r\n            return allowed;\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        updateCompSupplyIndex(cToken);\r\n        distributeSupplierComp(cToken, redeemer, false);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    // oracle: ok\r\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal returns (uint) {\r\n        if (!markets[cToken].isListed) {\r\n            return uint(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\r\n        if (!markets[cToken].accountMembership[redeemer]) {\r\n            return uint(Error.NO_ERROR);\r\n        }\r\n\r\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\r\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0);\r\n        if (err != Error.NO_ERROR) {\r\n            return uint(err);\r\n        }\r\n        if (shortfall > 0) {\r\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\r\n        }\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates redeem and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being redeemed\r\n     * @param redeemer The address redeeming the tokens\r\n     * @param redeemAmount The amount of the underlying asset being redeemed\r\n     * @param redeemTokens The number of tokens being redeemed\r\n     */\r\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\r\n        // Shh - currently unused\r\n        cToken;\r\n        redeemer;\r\n\r\n        // Require tokens is zero or amount is also zero\r\n        if (redeemTokens == 0 && redeemAmount > 0) {\r\n            revert(\"redeemTokens zero\");\r\n        }\r\n    }\r\n\r\n    // oracle: ok\r\n    /**\r\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\r\n     * @param cToken The market to verify the borrow against\r\n     * @param borrower The account which would borrow the asset\r\n     * @param borrowAmount The amount of underlying the account would borrow\r\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\r\n\r\n        if (!markets[cToken].isListed) {\r\n            return uint(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        if (!markets[cToken].accountMembership[borrower]) {\r\n            // only cTokens may call borrowAllowed if borrower not in market\r\n            require(msg.sender == cToken, \"sender must be cToken\");\r\n\r\n            // attempt to add borrower to the market\r\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\r\n            if (err != Error.NO_ERROR) {\r\n                return uint(err);\r\n            }\r\n\r\n            // it should be impossible to break the important invariant\r\n            assert(markets[cToken].accountMembership[borrower]);\r\n        }\r\n\r\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\r\n            return uint(Error.PRICE_ERROR);\r\n        }\r\n\r\n\r\n        uint borrowCap = borrowCaps[cToken];\r\n        // Borrow cap of 0 corresponds to unlimited borrowing\r\n        if (borrowCap != 0) {\r\n            uint totalBorrows = CToken(cToken).totalBorrows();\r\n            (MathError mathErr, uint nextTotalBorrows) = addUInt(totalBorrows, borrowAmount);\r\n            require(mathErr == MathError.NO_ERROR, \"total borrows overflow\");\r\n            require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\r\n        }\r\n\r\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\r\n        if (err != Error.NO_ERROR) {\r\n            return uint(err);\r\n        }\r\n        if (shortfall > 0) {\r\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\r\n        updateCompBorrowIndex(cToken, borrowIndex);\r\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates borrow and reverts on rejection. May emit logs.\r\n     * @param cToken Asset whose underlying is being borrowed\r\n     * @param borrower The address borrowing the underlying\r\n     * @param borrowAmount The amount of the underlying asset requested to borrow\r\n     */\r\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {\r\n        // Shh - currently unused\r\n        cToken;\r\n        borrower;\r\n        borrowAmount;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\r\n     * @param cToken The market to verify the repay against\r\n     * @param payer The account which would repay the asset\r\n     * @param borrower The account which would borrowed the asset\r\n     * @param repayAmount The amount of the underlying asset the account would repay\r\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function repayBorrowAllowed(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint) {\r\n        // Shh - currently unused\r\n        payer;\r\n        borrower;\r\n        repayAmount;\r\n\r\n        if (!markets[cToken].isListed) {\r\n            return uint(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\r\n        updateCompBorrowIndex(cToken, borrowIndex);\r\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being repaid\r\n     * @param payer The address repaying the borrow\r\n     * @param borrower The address of the borrower\r\n     * @param actualRepayAmount The amount of underlying being repaid\r\n     */\r\n    function repayBorrowVerify(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint actualRepayAmount,\r\n        uint borrowerIndex) external {\r\n        // Shh - currently unused\r\n        cToken;\r\n        payer;\r\n        borrower;\r\n        actualRepayAmount;\r\n        borrowerIndex;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the liquidation should be allowed to occur\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param repayAmount The amount of underlying being repaid\r\n     */\r\n    function liquidateBorrowAllowed(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint) {\r\n        // Shh - currently unused\r\n        liquidator;\r\n\r\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\r\n            return uint(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        /* The borrower must have shortfall in order to be liquidatable */\r\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\r\n        if (err != Error.NO_ERROR) {\r\n            return uint(err);\r\n        }\r\n        if (shortfall == 0) {\r\n            return uint(Error.INSUFFICIENT_SHORTFALL);\r\n        }\r\n\r\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\r\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\r\n        (MathError mathErr, uint maxClose) = mulScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return uint(Error.MATH_ERROR);\r\n        }\r\n        if (repayAmount > maxClose) {\r\n            return uint(Error.TOO_MUCH_REPAY);\r\n        }\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param actualRepayAmount The amount of underlying being repaid\r\n     */\r\n    function liquidateBorrowVerify(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint actualRepayAmount,\r\n        uint seizeTokens) external {\r\n        // Shh - currently unused\r\n        cTokenBorrowed;\r\n        cTokenCollateral;\r\n        liquidator;\r\n        borrower;\r\n        actualRepayAmount;\r\n        seizeTokens;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the seizing of assets should be allowed to occur\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param seizeTokens The number of collateral tokens to seize\r\n     */\r\n    function seizeAllowed(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external returns (uint) {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!seizeGuardianPaused, \"seize is paused\");\r\n\r\n        // Shh - currently unused\r\n        seizeTokens;\r\n\r\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\r\n            return uint(Error.MARKET_NOT_LISTED);\r\n        }\r\n\r\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\r\n            return uint(Error.COMPTROLLER_MISMATCH);\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        updateCompSupplyIndex(cTokenCollateral);\r\n        distributeSupplierComp(cTokenCollateral, borrower, false);\r\n        distributeSupplierComp(cTokenCollateral, liquidator, false);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates seize and reverts on rejection. May emit logs.\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param seizeTokens The number of collateral tokens to seize\r\n     */\r\n    function seizeVerify(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external {\r\n        // Shh - currently unused\r\n        cTokenCollateral;\r\n        cTokenBorrowed;\r\n        liquidator;\r\n        borrower;\r\n        seizeTokens;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\r\n     * @param cToken The market to verify the transfer against\r\n     * @param src The account which sources the tokens\r\n     * @param dst The account which receives the tokens\r\n     * @param transferTokens The number of cTokens to transfer\r\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!transferGuardianPaused, \"transfer is paused\");\r\n\r\n        // Currently the only consideration is whether or not\r\n        //  the src is allowed to redeem this many tokens\r\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\r\n        if (allowed != uint(Error.NO_ERROR)) {\r\n            return allowed;\r\n        }\r\n\r\n        // Keep the flywheel moving\r\n        updateCompSupplyIndex(cToken);\r\n        distributeSupplierComp(cToken, src, false);\r\n        distributeSupplierComp(cToken, dst, false);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates transfer and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being transferred\r\n     * @param src The account which sources the tokens\r\n     * @param dst The account which receives the tokens\r\n     * @param transferTokens The number of cTokens to transfer\r\n     */\r\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {\r\n        // Shh - currently unused\r\n        cToken;\r\n        src;\r\n        dst;\r\n        transferTokens;\r\n\r\n        // Shh - we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            maxAssets = maxAssets;\r\n        }\r\n    }\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    /**\r\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\r\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\r\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\r\n     */\r\n    struct AccountLiquidityLocalVars {\r\n        uint sumCollateral;\r\n        uint sumBorrowPlusEffects;\r\n        uint cTokenBalance;\r\n        uint borrowBalance;\r\n        uint exchangeRateMantissa;\r\n        uint oraclePriceMantissa;\r\n        Exp collateralFactor;\r\n        Exp exchangeRate;\r\n        Exp oraclePrice;\r\n        Exp tokensToDenom;\r\n    }\r\n\r\n    // oracle: ?\r\n    /**\r\n     * @notice Determine the current account liquidity wrt collateral requirements\r\n     * @return (possible error code (semi-opaque),\r\n                account liquidity in excess of collateral requirements,\r\n     *          account shortfall below collateral requirements)\r\n     */\r\n    function getAccountLiquidity(address account) public returns (uint, uint, uint) {\r\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\r\n\r\n        return (uint(err), liquidity, shortfall);\r\n    }\r\n\r\n    // oracle: ok\r\n    /**\r\n     * @notice Determine the current account liquidity wrt collateral requirements\r\n     * @return (possible error code,\r\n                account liquidity in excess of collateral requirements,\r\n     *          account shortfall below collateral requirements)\r\n     */\r\n    function getAccountLiquidityInternal(address account) internal returns (Error, uint, uint) {\r\n        return getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\r\n    }\r\n\r\n    // oracle: ?\r\n    /**\r\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @return (possible error code (semi-opaque),\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n    function getHypotheticalAccountLiquidity(\r\n        address account,\r\n        address cTokenModify,\r\n        uint redeemTokens,\r\n        uint borrowAmount) public returns (uint, uint, uint) {\r\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount);\r\n        return (uint(err), liquidity, shortfall);\r\n    }\r\n\r\n    // oracle: ?\r\n    /**\r\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\r\n     *  without calculating accumulated interest.\r\n     * @return (possible error code,\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n    function getHypotheticalAccountLiquidityInternal(\r\n        address account,\r\n        CToken cTokenModify,\r\n        uint redeemTokens,\r\n        uint borrowAmount) internal returns (Error, uint, uint) {\r\n\r\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\r\n        uint oErr;\r\n        MathError mErr;\r\n\r\n        // For each asset the account is in\r\n        CToken[] memory assets = accountAssets[account];\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            CToken asset = assets[i];\r\n\r\n            // Read the balances and exchange rate from the cToken\r\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\r\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\r\n                return (Error.SNAPSHOT_ERROR, 0, 0);\r\n            }\r\n            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\r\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\r\n\r\n            // Get the normalized price of the asset\r\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\r\n            if (vars.oraclePriceMantissa == 0) {\r\n                return (Error.PRICE_ERROR, 0, 0);\r\n            }\r\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\r\n\r\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\r\n            (mErr, vars.tokensToDenom) = mulExp3(vars.collateralFactor, vars.exchangeRate, vars.oraclePrice);\r\n            if (mErr != MathError.NO_ERROR) {\r\n                return (Error.MATH_ERROR, 0, 0);\r\n            }\r\n\r\n            // sumCollateral += tokensToDenom * cTokenBalance\r\n            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\r\n            if (mErr != MathError.NO_ERROR) {\r\n                return (Error.MATH_ERROR, 0, 0);\r\n            }\r\n\r\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\r\n            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\r\n            if (mErr != MathError.NO_ERROR) {\r\n                return (Error.MATH_ERROR, 0, 0);\r\n            }\r\n\r\n            // Calculate effects of interacting with cTokenModify\r\n            if (asset == cTokenModify) {\r\n                // redeem effect\r\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\r\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\r\n                if (mErr != MathError.NO_ERROR) {\r\n                    return (Error.MATH_ERROR, 0, 0);\r\n                }\r\n\r\n                // borrow effect\r\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\r\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\r\n                if (mErr != MathError.NO_ERROR) {\r\n                    return (Error.MATH_ERROR, 0, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        // These are safe, as the underflow condition is checked first\r\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\r\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\r\n        } else {\r\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\r\n        }\r\n    }\r\n\r\n    // oracle: ok\r\n    /**\r\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\r\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\r\n     * @param cTokenBorrowed The address of the borrowed cToken\r\n     * @param cTokenCollateral The address of the collateral cToken\r\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\r\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\r\n     */\r\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external returns (uint, uint) {\r\n        /* Read oracle prices for borrowed and collateral markets */\r\n        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\r\n        uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\r\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\r\n            return (uint(Error.PRICE_ERROR), 0);\r\n        }\r\n\r\n        /*\r\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\r\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\r\n         *  seizeTokens = seizeAmount / exchangeRate\r\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\r\n         */\r\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\r\n        uint seizeTokens;\r\n        Exp memory numerator;\r\n        Exp memory denominator;\r\n        Exp memory ratio;\r\n        MathError mathErr;\r\n\r\n        (mathErr, numerator) = mulExp(liquidationIncentiveMantissa, priceBorrowedMantissa);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return (uint(Error.MATH_ERROR), 0);\r\n        }\r\n\r\n        (mathErr, denominator) = mulExp(priceCollateralMantissa, exchangeRateMantissa);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return (uint(Error.MATH_ERROR), 0);\r\n        }\r\n\r\n        (mathErr, ratio) = divExp(numerator, denominator);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return (uint(Error.MATH_ERROR), 0);\r\n        }\r\n\r\n        (mathErr, seizeTokens) = mulScalarTruncate(ratio, actualRepayAmount);\r\n        if (mathErr != MathError.NO_ERROR) {\r\n            return (uint(Error.MATH_ERROR), 0);\r\n        }\r\n\r\n        return (uint(Error.NO_ERROR), seizeTokens);\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n\r\n    /**\r\n      * @notice Sets a new price oracle for the comptroller\r\n      * @dev Admin function to set a new price oracle\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\r\n        }\r\n\r\n        // Track the old oracle for the comptroller\r\n        PriceOracle oldOracle = oracle;\r\n\r\n        // Set comptroller's oracle to newOracle\r\n        oracle = newOracle;\r\n\r\n        // Emit NewPriceOracle(oldOracle, newOracle)\r\n        emit NewPriceOracle(oldOracle, newOracle);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Sets the closeFactor used when liquidating borrows\r\n      * @dev Admin function to set closeFactor\r\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n      */\r\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\r\n        }\r\n\r\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\r\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\r\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\r\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\r\n        }\r\n\r\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\r\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\r\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\r\n        }\r\n\r\n        uint oldCloseFactorMantissa = closeFactorMantissa;\r\n        closeFactorMantissa = newCloseFactorMantissa;\r\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    // oracle: ok\r\n    /**\r\n      * @notice Sets the collateralFactor for a market\r\n      * @dev Admin function to set per-market collateralFactor\r\n      * @param cToken The market to set the factor on\r\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n      */\r\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\r\n        }\r\n\r\n        // Verify market is listed\r\n        Market storage market = markets[address(cToken)];\r\n        if (!market.isListed) {\r\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\r\n        }\r\n\r\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\r\n\r\n        // Check collateral factor <= 0.9\r\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\r\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\r\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\r\n        }\r\n\r\n        // If collateral factor != 0, fail if price == 0\r\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\r\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\r\n        }\r\n\r\n        // Set market's collateral factor to new collateral factor, remember old value\r\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\r\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\r\n\r\n        // Emit event with asset, old collateral factor, and new collateral factor\r\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Sets maxAssets which controls how many markets can be entered\r\n      * @dev Admin function to set maxAssets\r\n      * @param newMaxAssets New max assets\r\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n      */\r\n    function _setMaxAssets(uint newMaxAssets) external returns (uint) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MAX_ASSETS_OWNER_CHECK);\r\n        }\r\n\r\n        uint oldMaxAssets = maxAssets;\r\n        maxAssets = newMaxAssets;\r\n        emit NewMaxAssets(oldMaxAssets, newMaxAssets);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Sets liquidationIncentive\r\n      * @dev Admin function to set liquidationIncentive\r\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n      */\r\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\r\n        // Check caller is admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\r\n        }\r\n\r\n        // Check de-scaled min <= newLiquidationIncentive <= max\r\n        Exp memory newLiquidationIncentive = Exp({mantissa: newLiquidationIncentiveMantissa});\r\n        Exp memory minLiquidationIncentive = Exp({mantissa: liquidationIncentiveMinMantissa});\r\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\r\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\r\n        }\r\n\r\n        Exp memory maxLiquidationIncentive = Exp({mantissa: liquidationIncentiveMaxMantissa});\r\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\r\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\r\n        }\r\n\r\n        // Save current value for use in log\r\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\r\n\r\n        // Set liquidation incentive to new incentive\r\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\r\n\r\n        // Emit event with old incentive, new incentive\r\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Add the market to the markets mapping and set it as listed\r\n      * @dev Admin function to set isListed and add support for the market\r\n      * @param cToken The address of the market (token) to list\r\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n      */\r\n    function _supportMarket(CToken cToken) external returns (uint) {\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\r\n        }\r\n\r\n        if (markets[address(cToken)].isListed) {\r\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\r\n        }\r\n\r\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\r\n\r\n        markets[address(cToken)] = Market({isListed: true, isComped: false, collateralFactorMantissa: 0});\r\n\r\n        _addMarketInternal(address(cToken));\r\n\r\n        emit MarketListed(cToken);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    function _addMarketInternal(address cToken) internal {\r\n        for (uint i = 0; i < allMarkets.length; i ++) {\r\n            require(allMarkets[i] != CToken(cToken), \"market already added\");\r\n        }\r\n        allMarkets.push(CToken(cToken));\r\n    }\r\n\r\n\r\n    /**\r\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\r\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\r\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\r\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\r\n      */\r\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\r\n    \trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\");\r\n\r\n        uint numMarkets = cTokens.length;\r\n        uint numBorrowCaps = newBorrowCaps.length;\r\n\r\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\r\n\r\n        for(uint i = 0; i < numMarkets; i++) {\r\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\r\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function to change the Borrow Cap Guardian\r\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\r\n     */\r\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\r\n        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\r\n\r\n        // Save current value for inclusion in log\r\n        address oldBorrowCapGuardian = borrowCapGuardian;\r\n\r\n        // Store borrowCapGuardian with value newBorrowCapGuardian\r\n        borrowCapGuardian = newBorrowCapGuardian;\r\n\r\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\r\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function to change the Pause Guardian\r\n     * @param newPauseGuardian The address of the new Pause Guardian\r\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n     */\r\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\r\n        }\r\n\r\n        // Save current value for inclusion in log\r\n        address oldPauseGuardian = pauseGuardian;\r\n\r\n        // Store pauseGuardian with value newPauseGuardian\r\n        pauseGuardian = newPauseGuardian;\r\n\r\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\r\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\r\n        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\r\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n        mintGuardianPaused[address(cToken)] = state;\r\n        emit ActionPaused(cToken, \"Mint\", state);\r\n        return state;\r\n    }\r\n\r\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\r\n        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\r\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n        borrowGuardianPaused[address(cToken)] = state;\r\n        emit ActionPaused(cToken, \"Borrow\", state);\r\n        return state;\r\n    }\r\n\r\n    function _setTransferPaused(bool state) public returns (bool) {\r\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n        transferGuardianPaused = state;\r\n        emit ActionPaused(\"Transfer\", state);\r\n        return state;\r\n    }\r\n\r\n    function _setSeizePaused(bool state) public returns (bool) {\r\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n        seizeGuardianPaused = state;\r\n        emit ActionPaused(\"Seize\", state);\r\n        return state;\r\n    }\r\n\r\n    function _become(Unitroller unitroller) public {\r\n        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\r\n        require(unitroller._acceptImplementation() == 0, \"change not authorized\");\r\n    }\r\n\r\n    /**\r\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\r\n     */\r\n    function adminOrInitializing() internal view returns (bool) {\r\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\r\n    }\r\n\r\n    /*** Comp Distribution ***/\r\n\r\n    /**\r\n     * @notice Recalculate and update COMP speeds for all COMP markets\r\n     */\r\n    function refreshCompSpeeds() public {\r\n        require(msg.sender == tx.origin, \"only externally owned accounts may refresh speeds\");\r\n        refreshCompSpeedsInternal();\r\n    }\r\n\r\n    // oracle: ok\r\n    function refreshCompSpeedsInternal() internal {\r\n        CToken[] memory allMarkets_ = allMarkets;\r\n\r\n        for (uint i = 0; i < allMarkets_.length; i++) {\r\n            CToken cToken = allMarkets_[i];\r\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\r\n            updateCompSupplyIndex(address(cToken));\r\n            updateCompBorrowIndex(address(cToken), borrowIndex);\r\n        }\r\n\r\n        Exp memory totalUtility = Exp({mantissa: 0});\r\n        Exp[] memory utilities = new Exp[](allMarkets_.length);\r\n        for (uint i = 0; i < allMarkets_.length; i++) {\r\n            CToken cToken = allMarkets_[i];\r\n            if (markets[address(cToken)].isComped) {\r\n                Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});\r\n                Exp memory utility = mul_(assetPrice, cToken.totalBorrows());\r\n                utilities[i] = utility;\r\n                totalUtility = add_(totalUtility, utility);\r\n            }\r\n        }\r\n\r\n        for (uint i = 0; i < allMarkets_.length; i++) {\r\n            CToken cToken = allMarkets[i];\r\n            uint newSpeed = totalUtility.mantissa > 0 ? mul_(compRate, div_(utilities[i], totalUtility)) : 0;\r\n            compSpeeds[address(cToken)] = newSpeed;\r\n            emit CompSpeedUpdated(cToken, newSpeed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue COMP to the market by updating the supply index\r\n     * @param cToken The market whose supply index to update\r\n     */\r\n    function updateCompSupplyIndex(address cToken) internal {\r\n        CompMarketState storage supplyState = compSupplyState[cToken];\r\n        uint supplySpeed = compSpeeds[cToken];\r\n        uint blockNumber = getBlockNumber();\r\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\r\n        if (deltaBlocks > 0 && supplySpeed > 0) {\r\n            uint supplyTokens = CToken(cToken).totalSupply();\r\n            uint compAccrued = mul_(deltaBlocks, supplySpeed);\r\n            Double memory ratio = supplyTokens > 0 ? fraction(compAccrued, supplyTokens) : Double({mantissa: 0});\r\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\r\n            compSupplyState[cToken] = CompMarketState({\r\n                index: safe224(index.mantissa, \"new index exceeds 224 bits\"),\r\n                block: safe32(blockNumber, \"block number exceeds 32 bits\")\r\n            });\r\n        } else if (deltaBlocks > 0) {\r\n            supplyState.block = safe32(blockNumber, \"block number exceeds 32 bits\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Accrue COMP to the market by updating the borrow index\r\n     * @param cToken The market whose borrow index to update\r\n     */\r\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal {\r\n        CompMarketState storage borrowState = compBorrowState[cToken];\r\n        uint borrowSpeed = compSpeeds[cToken];\r\n        uint blockNumber = getBlockNumber();\r\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\r\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\r\n            uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\r\n            uint compAccrued = mul_(deltaBlocks, borrowSpeed);\r\n            Double memory ratio = borrowAmount > 0 ? fraction(compAccrued, borrowAmount) : Double({mantissa: 0});\r\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\r\n            compBorrowState[cToken] = CompMarketState({\r\n                index: safe224(index.mantissa, \"new index exceeds 224 bits\"),\r\n                block: safe32(blockNumber, \"block number exceeds 32 bits\")\r\n            });\r\n        } else if (deltaBlocks > 0) {\r\n            borrowState.block = safe32(blockNumber, \"block number exceeds 32 bits\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\r\n     * @param cToken The market in which the supplier is interacting\r\n     * @param supplier The address of the supplier to distribute COMP to\r\n     */\r\n    function distributeSupplierComp(address cToken, address supplier, bool distributeAll) internal {\r\n        CompMarketState storage supplyState = compSupplyState[cToken];\r\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\r\n        Double memory supplierIndex = Double({mantissa: compSupplierIndex[cToken][supplier]});\r\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\r\n\r\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\r\n            supplierIndex.mantissa = compInitialIndex;\r\n        }\r\n\r\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\r\n        uint supplierTokens = CToken(cToken).balanceOf(supplier);\r\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\r\n        uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);\r\n        compAccrued[supplier] = transferComp(supplier, supplierAccrued, distributeAll ? 0 : compClaimThreshold);\r\n        emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\r\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\r\n     * @param cToken The market in which the borrower is interacting\r\n     * @param borrower The address of the borrower to distribute COMP to\r\n     */\r\n    function distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex, bool distributeAll) internal {\r\n        CompMarketState storage borrowState = compBorrowState[cToken];\r\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\r\n        Double memory borrowerIndex = Double({mantissa: compBorrowerIndex[cToken][borrower]});\r\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\r\n\r\n        if (borrowerIndex.mantissa > 0) {\r\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\r\n            uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\r\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\r\n            uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\r\n            compAccrued[borrower] = transferComp(borrower, borrowerAccrued, distributeAll ? 0 : compClaimThreshold);\r\n            emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer COMP to the user, if they are above the threshold\r\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\r\n     * @param user The address of the user to transfer COMP to\r\n     * @param userAccrued The amount of COMP to (possibly) transfer\r\n     * @return The amount of COMP which was NOT transferred to the user\r\n     */\r\n    function transferComp(address user, uint userAccrued, uint threshold) internal returns (uint) {\r\n        if (userAccrued >= threshold && userAccrued > 0) {\r\n            Comp comp = Comp(getCompAddress());\r\n            uint compRemaining = comp.balanceOf(address(this));\r\n            if (userAccrued <= compRemaining) {\r\n                comp.transfer(user, userAccrued);\r\n                return 0;\r\n            }\r\n        }\r\n        return userAccrued;\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all the comp accrued by holder in all markets\r\n     * @param holder The address to claim COMP for\r\n     */\r\n    function claimComp(address holder) public {\r\n        return claimComp(holder, allMarkets);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all the comp accrued by holder in the specified markets\r\n     * @param holder The address to claim COMP for\r\n     * @param cTokens The list of markets to claim COMP in\r\n     */\r\n    function claimComp(address holder, CToken[] memory cTokens) public {\r\n        address[] memory holders = new address[](1);\r\n        holders[0] = holder;\r\n        claimComp(holders, cTokens, true, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all comp accrued by the holders\r\n     * @param holders The addresses to claim COMP for\r\n     * @param cTokens The list of markets to claim COMP in\r\n     * @param borrowers Whether or not to claim COMP earned by borrowing\r\n     * @param suppliers Whether or not to claim COMP earned by supplying\r\n     */\r\n    function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {\r\n        for (uint i = 0; i < cTokens.length; i++) {\r\n            CToken cToken = cTokens[i];\r\n            require(markets[address(cToken)].isListed, \"market must be listed\");\r\n            if (borrowers == true) {\r\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\r\n                updateCompBorrowIndex(address(cToken), borrowIndex);\r\n                for (uint j = 0; j < holders.length; j++) {\r\n                    distributeBorrowerComp(address(cToken), holders[j], borrowIndex, true);\r\n                }\r\n            }\r\n            if (suppliers == true) {\r\n                updateCompSupplyIndex(address(cToken));\r\n                for (uint j = 0; j < holders.length; j++) {\r\n                    distributeSupplierComp(address(cToken), holders[j], true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*** Comp Distribution Admin ***/\r\n\r\n    /**\r\n     * @notice Set the amount of COMP distributed per block\r\n     * @param compRate_ The amount of COMP wei per block to distribute\r\n     */\r\n    function _setCompRate(uint compRate_) public {\r\n        require(adminOrInitializing(), \"only admin can change comp rate\");\r\n\r\n        uint oldRate = compRate;\r\n        compRate = compRate_;\r\n        emit NewCompRate(oldRate, compRate_);\r\n\r\n        refreshCompSpeedsInternal();\r\n    }\r\n\r\n    /**\r\n     * @notice Add markets to compMarkets, allowing them to earn COMP in the flywheel\r\n     * @param cTokens The addresses of the markets to add\r\n     */\r\n    function _addCompMarkets(address[] memory cTokens) public {\r\n        require(adminOrInitializing(), \"only admin can add comp market\");\r\n\r\n        for (uint i = 0; i < cTokens.length; i++) {\r\n            _addCompMarketInternal(cTokens[i]);\r\n        }\r\n\r\n        refreshCompSpeedsInternal();\r\n    }\r\n\r\n    function _addCompMarketInternal(address cToken) internal {\r\n        Market storage market = markets[cToken];\r\n        require(market.isListed == true, \"comp market is not listed\");\r\n        require(market.isComped == false, \"comp market already added\");\r\n\r\n        market.isComped = true;\r\n        emit MarketComped(CToken(cToken), true);\r\n\r\n        if (compSupplyState[cToken].index == 0 && compSupplyState[cToken].block == 0) {\r\n            compSupplyState[cToken] = CompMarketState({\r\n                index: compInitialIndex,\r\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\r\n            });\r\n        }\r\n\r\n        if (compBorrowState[cToken].index == 0 && compBorrowState[cToken].block == 0) {\r\n            compBorrowState[cToken] = CompMarketState({\r\n                index: compInitialIndex,\r\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a market from compMarkets, preventing it from earning COMP in the flywheel\r\n     * @param cToken The address of the market to drop\r\n     */\r\n    function _dropCompMarket(address cToken) public {\r\n        require(msg.sender == admin, \"only admin can drop comp market\");\r\n\r\n        Market storage market = markets[cToken];\r\n        require(market.isComped == true, \"market is not a comp market\");\r\n\r\n        market.isComped = false;\r\n        emit MarketComped(CToken(cToken), false);\r\n\r\n        refreshCompSpeedsInternal();\r\n    }\r\n\r\n    /**\r\n     * @notice Return all of the markets\r\n     * @dev The automatic getter may be used to access an individual market.\r\n     * @return The list of market addresses\r\n     */\r\n    function getAllMarkets() public view returns (CToken[] memory) {\r\n        return allMarkets;\r\n    }\r\n\r\n    function getBlockNumber() public view returns (uint) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the address of the COMP token\r\n     * @return The address of COMP\r\n     */\r\n    function getCompAddress() public view returns (address) {\r\n        return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n    }\r\n}\r\n\r\n\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n  * @title Compound's JumpRateModel Contract V2 for V2 cTokens\r\n  * @author Arr00\r\n  * @notice Supports only for V2 cTokens\r\n  */\r\ncontract JumpRateModelV2 is InterestRateModel, BaseJumpRateModelV2  {\r\n\r\n\t/**\r\n     * @notice Calculates the current borrow rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint) {\r\n        return getBorrowRateInternal(cash, borrows, reserves);\r\n    }\r\n\r\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_)\r\n    \tBaseJumpRateModelV2(baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_,owner_) public {}\r\n}\r\n\r\n\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n  * @title Compound's DAIInterestRateModel Contract (version 3)\r\n  * @author Compound (modified by Dharma Labs)\r\n  * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper.\r\n  * Version 3 modifies the interest rate model in Version 2 by increasing the initial \"gap\" or slope of\r\n  * the model prior to the \"kink\" from 2% to 4%, and enabling updateable parameters.\r\n  */\r\ncontract DAIInterestRateModelV3 is JumpRateModelV2 {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @notice The additional margin per block separating the base borrow rate from the roof.\r\n     */\r\n    uint public gapPerBlock;\r\n\r\n    /**\r\n     * @notice The assumed (1 - reserve factor) used to calculate the minimum borrow rate (reserve factor = 0.05)\r\n     */\r\n    uint public constant assumedOneMinusReserveFactorMantissa = 0.95e18;\r\n\r\n    PotLike pot;\r\n    JugLike jug;\r\n\r\n    /**\r\n     * @notice Construct an interest rate model\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     * @param pot_ The address of the Dai pot (where DSR is earned)\r\n     * @param jug_ The address of the Dai jug (where SF is kept)\r\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\r\n     */\r\n    constructor(uint jumpMultiplierPerYear, uint kink_, address pot_, address jug_, address owner_) JumpRateModelV2(0, 0, jumpMultiplierPerYear, kink_, owner_) public {\r\n        gapPerBlock = 4e16 / blocksPerYear;\r\n        pot = PotLike(pot_);\r\n        jug = JugLike(jug_);\r\n        poke();\r\n    }\r\n\r\n    /**\r\n     * @notice External function to update the parameters of the interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18). For DAI, this is calculated from DSR and SF. Input not used.\r\n     * @param gapPerYear The Additional margin per year separating the base borrow rate from the roof. (scaled by 1e18)\r\n     * @param jumpMultiplierPerYear The jumpMultiplierPerYear after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n    function updateJumpRateModel(uint baseRatePerYear, uint gapPerYear, uint jumpMultiplierPerYear, uint kink_) external {\r\n        require(msg.sender == owner, \"only the owner may call this function.\");\r\n        gapPerBlock = gapPerYear / blocksPerYear;\r\n        updateJumpRateModelInternal(0, 0, jumpMultiplierPerYear, kink_);\r\n        poke();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current supply interest rate per block including the Dai savings rate\r\n     * @param cash The total amount of cash the market has\r\n     * @param borrows The total amount of borrows the market has outstanding\r\n     * @param reserves The total amnount of reserves the market has\r\n     * @param reserveFactorMantissa The current reserve factor the market has\r\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n     */\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\r\n        uint protocolRate = super.getSupplyRate(cash, borrows, reserves, reserveFactorMantissa);\r\n\r\n        uint underlying = cash.add(borrows).sub(reserves);\r\n        if (underlying == 0) {\r\n            return protocolRate;\r\n        } else {\r\n            uint cashRate = cash.mul(dsrPerBlock()).div(underlying);\r\n            return cashRate.add(protocolRate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the Dai savings rate per block\r\n     * @return The Dai savings rate per block (as a percentage, and scaled by 1e18)\r\n     */\r\n    function dsrPerBlock() public view returns (uint) {\r\n        return pot\r\n            .dsr().sub(1e27)  // scaled 1e27 aka RAY, and includes an extra \"ONE\" before subraction\r\n            .div(1e9) // descale to 1e18\r\n            .mul(15); // 15 seconds per block\r\n    }\r\n\r\n    /**\r\n     * @notice Resets the baseRate and multiplier per block based on the stability fee and Dai savings rate\r\n     */\r\n    function poke() public {\r\n        (uint duty, ) = jug.ilks(\"ETH-A\");\r\n        uint stabilityFeePerBlock = duty.add(jug.base()).sub(1e27).mul(1e18).div(1e27).mul(15);\r\n\r\n        // We ensure the minimum borrow rate >= DSR / (1 - reserve factor)\r\n        baseRatePerBlock = dsrPerBlock().mul(1e18).div(assumedOneMinusReserveFactorMantissa);\r\n\r\n        // The roof borrow rate is max(base rate, stability fee) + gap, from which we derive the slope\r\n        if (baseRatePerBlock < stabilityFeePerBlock) {\r\n            multiplierPerBlock = stabilityFeePerBlock.sub(baseRatePerBlock).add(gapPerBlock).mul(1e18).div(kink);\r\n        } else {\r\n            multiplierPerBlock = gapPerBlock.mul(1e18).div(kink);\r\n        }\r\n\r\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\r\n    }\r\n}\r\n\r\n\r\n/*** Maker Interfaces ***/\r\n\r\n\r\ncontract JugLike {\r\n    // --- Data ---\r\n    struct Ilk {\r\n        uint256 duty;\r\n        uint256  rho;\r\n    }\r\n\r\n   mapping (bytes32 => Ilk) public ilks;\r\n   uint256 public base;\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n  * @title Compound's JumpRateModel Contract\r\n  * @author Compound\r\n  */\r\ncontract JumpRateModel is InterestRateModel {\r\n    using SafeMath for uint;\r\n\r\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\r\n\r\n    /**\r\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\r\n     */\r\n    uint public constant blocksPerYear = 2102400;\r\n\r\n    /**\r\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\r\n     */\r\n    uint public multiplierPerBlock;\r\n\r\n    /**\r\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\r\n     */\r\n    uint public baseRatePerBlock;\r\n\r\n    /**\r\n     * @notice The multiplierPerBlock after hitting a specified utilization point\r\n     */\r\n    uint public jumpMultiplierPerBlock;\r\n\r\n    /**\r\n     * @notice The utilization point at which the jump multiplier is applied\r\n     */\r\n    uint public kink;\r\n\r\n    /**\r\n     * @notice Construct an interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) public {\r\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\r\n        multiplierPerBlock = multiplierPerYear.div(blocksPerYear);\r\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\r\n        kink = kink_;\r\n\r\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market (currently unused)\r\n     * @return The utilization rate as a mantissa between [0, 1e18]\r\n     */\r\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\r\n        // Utilization rate is 0 when there are no borrows\r\n        if (borrows == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) public view returns (uint) {\r\n        uint util = utilizationRate(cash, borrows, reserves);\r\n\r\n        if (util <= kink) {\r\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\r\n        } else {\r\n            uint normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\r\n            uint excessUtil = util.sub(kink);\r\n            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current supply rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @param reserveFactorMantissa The current reserve factor for the market\r\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\r\n        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\r\n        uint borrowRate = getBorrowRate(cash, borrows, reserves);\r\n        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\r\n        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n  * @title Compound's Legacy InterestRateModel Interface\r\n  * @author Compound (modified by Arr00)\r\n  */\r\ncontract LegacyInterestRateModel {\r\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\r\n    bool public constant isInterestRateModel = true;\r\n\r\n    /**\r\n      * @notice Calculates the current borrow interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amount of reserves the market has\r\n      * @return error code (0 = no error), The borrow rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint,uint);\r\n\r\n    /**\r\n      * @notice Calculates the current supply interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amount of reserves the market has\r\n      * @param reserveFactorMantissa The current reserve factor the market has\r\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n  * @title Compound's JumpRateModel Contract V2 for legacy cTokens\r\n  * @author Arr00\r\n  * @notice Supports only legacy cTokens\r\n  */\r\ncontract LegacyJumpRateModelV2 is LegacyInterestRateModel, BaseJumpRateModelV2  {\r\n\r\n\t/**\r\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return (Error, The borrow rate percentage per block as a mantissa (scaled by 1e18))\r\n     */\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint, uint) {\r\n        return (0,getBorrowRateInternal(cash, borrows, reserves));\r\n    }\r\n\r\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_)\r\n    \tBaseJumpRateModelV2(baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_,owner_) public {}\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\ncontract GovernorAlpha {\r\n    /// @notice The name of this contract\r\n    string public constant name = \"Based Loans Governor Alpha\";\r\n\r\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\r\n    function quorumVotes() public pure returns (uint) { return 4000000e18; } // 4,000,000 = 4% of Comp\r\n\r\n    /// @notice The number of votes required in order for a voter to become a proposer\r\n    function proposalThreshold() public pure returns (uint) { return 1000000e18; } // 1,000,000 = 1% of Comp\r\n\r\n    /// @notice The maximum number of actions that can be included in a proposal\r\n    function proposalMaxOperations() public pure returns (uint) { return 10; } // 10 actions\r\n\r\n    /// @notice The delay before voting on a proposal may take place, once proposed\r\n    function votingDelay() public pure returns (uint) { return 1; } // 1 block\r\n\r\n    /// @notice The duration of voting on a proposal, in blocks\r\n    function votingPeriod() public pure returns (uint) { return 17280; } // ~3 days in blocks (assuming 15s blocks)\r\n\r\n    /// @notice The address of the Compound Protocol Timelock\r\n    TimelockInterface public timelock;\r\n\r\n    /// @notice The address of the Compound governance token\r\n    CompInterface public comp;\r\n\r\n    /// @notice The address of the Governor Guardian\r\n    address public guardian;\r\n\r\n    /// @notice The total number of proposals\r\n    uint public proposalCount;\r\n\r\n    struct Proposal {\r\n        /// @notice Unique id for looking up a proposal\r\n        uint id;\r\n\r\n        /// @notice Creator of the proposal\r\n        address proposer;\r\n\r\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n        uint eta;\r\n\r\n        /// @notice the ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n\r\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint[] values;\r\n\r\n        /// @notice The ordered list of function signatures to be called\r\n        string[] signatures;\r\n\r\n        /// @notice The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n\r\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\r\n        uint startBlock;\r\n\r\n        /// @notice The block at which voting ends: votes must be cast prior to this block\r\n        uint endBlock;\r\n\r\n        /// @notice Current number of votes in favor of this proposal\r\n        uint forVotes;\r\n\r\n        /// @notice Current number of votes in opposition to this proposal\r\n        uint againstVotes;\r\n\r\n        /// @notice Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n\r\n        /// @notice Flag marking whether the proposal has been executed\r\n        bool executed;\r\n\r\n        /// @notice Receipts of ballots for the entire set of voters\r\n        mapping (address => Receipt) receipts;\r\n    }\r\n\r\n    /// @notice Ballot receipt record for a voter\r\n    struct Receipt {\r\n        /// @notice Whether or not a vote has been cast\r\n        bool hasVoted;\r\n\r\n        /// @notice Whether or not the voter supports the proposal\r\n        bool support;\r\n\r\n        /// @notice The number of votes the voter had, which were cast\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed\r\n    }\r\n\r\n    /// @notice The official record of all proposals ever proposed\r\n    mapping (uint => Proposal) public proposals;\r\n\r\n    /// @notice The latest proposal for each proposer\r\n    mapping (address => uint) public latestProposalIds;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\r\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,bool support)\");\r\n\r\n    /// @notice An event emitted when a new proposal is created\r\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description);\r\n\r\n    /// @notice An event emitted when a vote has been cast on a proposal\r\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\r\n\r\n    /// @notice An event emitted when a proposal has been canceled\r\n    event ProposalCanceled(uint id);\r\n\r\n    /// @notice An event emitted when a proposal has been queued in the Timelock\r\n    event ProposalQueued(uint id, uint eta);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the Timelock\r\n    event ProposalExecuted(uint id);\r\n\r\n    constructor(address timelock_, address comp_, address guardian_) public {\r\n        timelock = TimelockInterface(timelock_);\r\n        comp = CompInterface(comp_);\r\n        guardian = guardian_;\r\n    }\r\n\r\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint) {\r\n        require(comp.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold(), \"GovernorAlpha::propose: proposer votes below proposal threshold\");\r\n        require(targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length, \"GovernorAlpha::propose: proposal function information arity mismatch\");\r\n        require(targets.length != 0, \"GovernorAlpha::propose: must provide actions\");\r\n        require(targets.length <= proposalMaxOperations(), \"GovernorAlpha::propose: too many actions\");\r\n\r\n        uint latestProposalId = latestProposalIds[msg.sender];\r\n        if (latestProposalId != 0) {\r\n          ProposalState proposersLatestProposalState = state(latestProposalId);\r\n          require(proposersLatestProposalState != ProposalState.Active, \"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\");\r\n          require(proposersLatestProposalState != ProposalState.Pending, \"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\");\r\n        }\r\n\r\n        uint startBlock = add256(block.number, votingDelay());\r\n        uint endBlock = add256(startBlock, votingPeriod());\r\n\r\n        proposalCount++;\r\n        Proposal memory newProposal = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            eta: 0,\r\n            targets: targets,\r\n            values: values,\r\n            signatures: signatures,\r\n            calldatas: calldatas,\r\n            startBlock: startBlock,\r\n            endBlock: endBlock,\r\n            forVotes: 0,\r\n            againstVotes: 0,\r\n            canceled: false,\r\n            executed: false\r\n        });\r\n\r\n        proposals[newProposal.id] = newProposal;\r\n        latestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\r\n        return newProposal.id;\r\n    }\r\n\r\n    function queue(uint proposalId) public {\r\n        require(state(proposalId) == ProposalState.Succeeded, \"GovernorAlpha::queue: proposal can only be queued if it is succeeded\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        uint eta = add256(block.timestamp, timelock.delay());\r\n        for (uint i = 0; i < proposal.targets.length; i++) {\r\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\r\n        }\r\n        proposal.eta = eta;\r\n        emit ProposalQueued(proposalId, eta);\r\n    }\r\n\r\n    function _queueOrRevert(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\r\n        require(!timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))), \"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\");\r\n        timelock.queueTransaction(target, value, signature, data, eta);\r\n    }\r\n\r\n    function execute(uint proposalId) public payable {\r\n        require(state(proposalId) == ProposalState.Queued, \"GovernorAlpha::execute: proposal can only be executed if it is queued\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.executed = true;\r\n        for (uint i = 0; i < proposal.targets.length; i++) {\r\n            timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\r\n        }\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    function cancel(uint proposalId) public {\r\n        ProposalState state = state(proposalId);\r\n        require(state != ProposalState.Executed, \"GovernorAlpha::cancel: cannot cancel executed proposal\");\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(msg.sender == guardian || comp.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(), \"GovernorAlpha::cancel: proposer above threshold\");\r\n\r\n        proposal.canceled = true;\r\n        for (uint i = 0; i < proposal.targets.length; i++) {\r\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\r\n        }\r\n\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    function getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\r\n        Proposal storage p = proposals[proposalId];\r\n        return (p.targets, p.values, p.signatures, p.calldatas);\r\n    }\r\n\r\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\r\n        return proposals[proposalId].receipts[voter];\r\n    }\r\n\r\n    function state(uint proposalId) public view returns (ProposalState) {\r\n        require(proposalCount >= proposalId && proposalId > 0, \"GovernorAlpha::state: invalid proposal id\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        } else if (block.number <= proposal.startBlock) {\r\n            return ProposalState.Pending;\r\n        } else if (block.number <= proposal.endBlock) {\r\n            return ProposalState.Active;\r\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()) {\r\n            return ProposalState.Defeated;\r\n        } else if (proposal.eta == 0) {\r\n            return ProposalState.Succeeded;\r\n        } else if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\r\n            return ProposalState.Expired;\r\n        } else {\r\n            return ProposalState.Queued;\r\n        }\r\n    }\r\n\r\n    function castVote(uint proposalId, bool support) public {\r\n        return _castVote(msg.sender, proposalId, support);\r\n    }\r\n\r\n    function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"GovernorAlpha::castVoteBySig: invalid signature\");\r\n        return _castVote(signatory, proposalId, support);\r\n    }\r\n\r\n    function _castVote(address voter, uint proposalId, bool support) internal {\r\n        require(state(proposalId) == ProposalState.Active, \"GovernorAlpha::_castVote: voting is closed\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = proposal.receipts[voter];\r\n        require(receipt.hasVoted == false, \"GovernorAlpha::_castVote: voter already voted\");\r\n        uint96 votes = comp.getPriorVotes(voter, proposal.startBlock);\r\n\r\n        if (support) {\r\n            proposal.forVotes = add256(proposal.forVotes, votes);\r\n        } else {\r\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\r\n        }\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.support = support;\r\n        receipt.votes = votes;\r\n\r\n        emit VoteCast(voter, proposalId, support, votes);\r\n    }\r\n\r\n    function __acceptAdmin() public {\r\n        require(msg.sender == guardian, \"GovernorAlpha::__acceptAdmin: sender must be gov guardian\");\r\n        timelock.acceptAdmin();\r\n    }\r\n\r\n    function __abdicate() public {\r\n        require(msg.sender == guardian, \"GovernorAlpha::__abdicate: sender must be gov guardian\");\r\n        guardian = address(0);\r\n    }\r\n\r\n    function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\r\n        require(msg.sender == guardian, \"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\");\r\n        timelock.queueTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\r\n    }\r\n\r\n    function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\r\n        require(msg.sender == guardian, \"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\");\r\n        timelock.executeTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\r\n    }\r\n\r\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\r\n        require(b <= a, \"subtraction underflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}\r\n\r\ninterface TimelockInterface {\r\n    function delay() external view returns (uint);\r\n    function GRACE_PERIOD() external view returns (uint);\r\n    function acceptAdmin() external;\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n    function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external returns (bytes32);\r\n    function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external;\r\n    function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external payable returns (bytes memory);\r\n}\r\n\r\ninterface CompInterface {\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ComptrollerLensInterface {\r\n    function markets(address) external view returns (bool, uint);\r\n    function oracle() external view returns (PriceOracle);\r\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\r\n    function getAssetsIn(address) external view returns (CToken[] memory);\r\n    function claimComp(address) external;\r\n    function compAccrued(address) external view returns (uint);\r\n}\r\n\r\ncontract CompoundLens {\r\n    struct CTokenMetadata {\r\n        address cToken;\r\n        uint exchangeRateCurrent;\r\n        uint supplyRatePerBlock;\r\n        uint borrowRatePerBlock;\r\n        uint reserveFactorMantissa;\r\n        uint totalBorrows;\r\n        uint totalReserves;\r\n        uint totalSupply;\r\n        uint totalCash;\r\n        bool isListed;\r\n        uint collateralFactorMantissa;\r\n        address underlyingAssetAddress;\r\n        uint cTokenDecimals;\r\n        uint underlyingDecimals;\r\n    }\r\n\r\n    function cTokenMetadata(CToken cToken) public returns (CTokenMetadata memory) {\r\n        uint exchangeRateCurrent = cToken.exchangeRateCurrent();\r\n        ComptrollerLensInterface comptroller = ComptrollerLensInterface(address(cToken.comptroller()));\r\n        (bool isListed, uint collateralFactorMantissa) = comptroller.markets(address(cToken));\r\n        address underlyingAssetAddress;\r\n        uint underlyingDecimals;\r\n\r\n        if (compareStrings(cToken.symbol(), \"bETH\")) {\r\n            underlyingAssetAddress = address(0);\r\n            underlyingDecimals = 18;\r\n        } else {\r\n            CErc20 cErc20 = CErc20(address(cToken));\r\n            underlyingAssetAddress = cErc20.underlying();\r\n            underlyingDecimals = EIP20Interface(cErc20.underlying()).decimals();\r\n        }\r\n\r\n        return CTokenMetadata({\r\n            cToken: address(cToken),\r\n            exchangeRateCurrent: exchangeRateCurrent,\r\n            supplyRatePerBlock: cToken.supplyRatePerBlock(),\r\n            borrowRatePerBlock: cToken.borrowRatePerBlock(),\r\n            reserveFactorMantissa: cToken.reserveFactorMantissa(),\r\n            totalBorrows: cToken.totalBorrows(),\r\n            totalReserves: cToken.totalReserves(),\r\n            totalSupply: cToken.totalSupply(),\r\n            totalCash: cToken.getCash(),\r\n            isListed: isListed,\r\n            collateralFactorMantissa: collateralFactorMantissa,\r\n            underlyingAssetAddress: underlyingAssetAddress,\r\n            cTokenDecimals: cToken.decimals(),\r\n            underlyingDecimals: underlyingDecimals\r\n        });\r\n    }\r\n\r\n    function cTokenMetadataAll(CToken[] calldata cTokens) external returns (CTokenMetadata[] memory) {\r\n        uint cTokenCount = cTokens.length;\r\n        CTokenMetadata[] memory res = new CTokenMetadata[](cTokenCount);\r\n        for (uint i = 0; i < cTokenCount; i++) {\r\n            res[i] = cTokenMetadata(cTokens[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct CTokenBalances {\r\n        address cToken;\r\n        uint balanceOf;\r\n        uint borrowBalanceCurrent;\r\n        uint balanceOfUnderlying;\r\n        uint tokenBalance;\r\n        uint tokenAllowance;\r\n    }\r\n\r\n    function cTokenBalances(CToken cToken, address payable account) public returns (CTokenBalances memory) {\r\n        uint balanceOf = cToken.balanceOf(account);\r\n        uint borrowBalanceCurrent = cToken.borrowBalanceCurrent(account);\r\n        uint balanceOfUnderlying = cToken.balanceOfUnderlying(account);\r\n        uint tokenBalance;\r\n        uint tokenAllowance;\r\n\r\n        if (compareStrings(cToken.symbol(), \"bETH\")) {\r\n            tokenBalance = account.balance;\r\n            tokenAllowance = account.balance;\r\n        } else {\r\n            CErc20 cErc20 = CErc20(address(cToken));\r\n            EIP20Interface underlying = EIP20Interface(cErc20.underlying());\r\n            tokenBalance = underlying.balanceOf(account);\r\n            tokenAllowance = underlying.allowance(account, address(cToken));\r\n        }\r\n\r\n        return CTokenBalances({\r\n            cToken: address(cToken),\r\n            balanceOf: balanceOf,\r\n            borrowBalanceCurrent: borrowBalanceCurrent,\r\n            balanceOfUnderlying: balanceOfUnderlying,\r\n            tokenBalance: tokenBalance,\r\n            tokenAllowance: tokenAllowance\r\n        });\r\n    }\r\n\r\n    function cTokenBalancesAll(CToken[] calldata cTokens, address payable account) external returns (CTokenBalances[] memory) {\r\n        uint cTokenCount = cTokens.length;\r\n        CTokenBalances[] memory res = new CTokenBalances[](cTokenCount);\r\n        for (uint i = 0; i < cTokenCount; i++) {\r\n            res[i] = cTokenBalances(cTokens[i], account);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct CTokenUnderlyingPrice {\r\n        address cToken;\r\n        uint underlyingPrice;\r\n    }\r\n\r\n    function cTokenUnderlyingPrice(CToken cToken) public returns (CTokenUnderlyingPrice memory) {\r\n        ComptrollerLensInterface comptroller = ComptrollerLensInterface(address(cToken.comptroller()));\r\n        PriceOracle priceOracle = comptroller.oracle();\r\n\r\n        return CTokenUnderlyingPrice({\r\n            cToken: address(cToken),\r\n            underlyingPrice: priceOracle.getUnderlyingPrice(cToken)\r\n        });\r\n    }\r\n\r\n    function cTokenUnderlyingPriceAll(CToken[] calldata cTokens) external returns (CTokenUnderlyingPrice[] memory) {\r\n        uint cTokenCount = cTokens.length;\r\n        CTokenUnderlyingPrice[] memory res = new CTokenUnderlyingPrice[](cTokenCount);\r\n        for (uint i = 0; i < cTokenCount; i++) {\r\n            res[i] = cTokenUnderlyingPrice(cTokens[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct AccountLimits {\r\n        CToken[] markets;\r\n        uint liquidity;\r\n        uint shortfall;\r\n    }\r\n\r\n    function getAccountLimits(ComptrollerLensInterface comptroller, address account) public returns (AccountLimits memory) {\r\n        (uint errorCode, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(account);\r\n        require(errorCode == 0);\r\n\r\n        return AccountLimits({\r\n            markets: comptroller.getAssetsIn(account),\r\n            liquidity: liquidity,\r\n            shortfall: shortfall\r\n        });\r\n    }\r\n\r\n    struct GovReceipt {\r\n        uint proposalId;\r\n        bool hasVoted;\r\n        bool support;\r\n        uint96 votes;\r\n    }\r\n\r\n    function getGovReceipts(GovernorAlpha governor, address voter, uint[] memory proposalIds) public view returns (GovReceipt[] memory) {\r\n        uint proposalCount = proposalIds.length;\r\n        GovReceipt[] memory res = new GovReceipt[](proposalCount);\r\n        for (uint i = 0; i < proposalCount; i++) {\r\n            GovernorAlpha.Receipt memory receipt = governor.getReceipt(proposalIds[i], voter);\r\n            res[i] = GovReceipt({\r\n                proposalId: proposalIds[i],\r\n                hasVoted: receipt.hasVoted,\r\n                support: receipt.support,\r\n                votes: receipt.votes\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct GovProposal {\r\n        uint proposalId;\r\n        address proposer;\r\n        uint eta;\r\n        address[] targets;\r\n        uint[] values;\r\n        string[] signatures;\r\n        bytes[] calldatas;\r\n        uint startBlock;\r\n        uint endBlock;\r\n        uint forVotes;\r\n        uint againstVotes;\r\n        bool canceled;\r\n        bool executed;\r\n    }\r\n\r\n    function setProposal(GovProposal memory res, GovernorAlpha governor, uint proposalId) internal view {\r\n        (\r\n            ,\r\n            address proposer,\r\n            uint eta,\r\n            uint startBlock,\r\n            uint endBlock,\r\n            uint forVotes,\r\n            uint againstVotes,\r\n            bool canceled,\r\n            bool executed\r\n        ) = governor.proposals(proposalId);\r\n        res.proposalId = proposalId;\r\n        res.proposer = proposer;\r\n        res.eta = eta;\r\n        res.startBlock = startBlock;\r\n        res.endBlock = endBlock;\r\n        res.forVotes = forVotes;\r\n        res.againstVotes = againstVotes;\r\n        res.canceled = canceled;\r\n        res.executed = executed;\r\n    }\r\n\r\n    function getGovProposals(GovernorAlpha governor, uint[] calldata proposalIds) external view returns (GovProposal[] memory) {\r\n        GovProposal[] memory res = new GovProposal[](proposalIds.length);\r\n        for (uint i = 0; i < proposalIds.length; i++) {\r\n            (\r\n                address[] memory targets,\r\n                uint[] memory values,\r\n                string[] memory signatures,\r\n                bytes[] memory calldatas\r\n            ) = governor.getActions(proposalIds[i]);\r\n            res[i] = GovProposal({\r\n                proposalId: 0,\r\n                proposer: address(0),\r\n                eta: 0,\r\n                targets: targets,\r\n                values: values,\r\n                signatures: signatures,\r\n                calldatas: calldatas,\r\n                startBlock: 0,\r\n                endBlock: 0,\r\n                forVotes: 0,\r\n                againstVotes: 0,\r\n                canceled: false,\r\n                executed: false\r\n            });\r\n            setProposal(res[i], governor, proposalIds[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct CompBalanceMetadata {\r\n        uint balance;\r\n        uint votes;\r\n        address delegate;\r\n    }\r\n\r\n    function getCompBalanceMetadata(Comp comp, address account) external view returns (CompBalanceMetadata memory) {\r\n        return CompBalanceMetadata({\r\n            balance: comp.balanceOf(account),\r\n            votes: uint256(comp.getCurrentVotes(account)),\r\n            delegate: comp.delegates(account)\r\n        });\r\n    }\r\n\r\n    struct CompBalanceMetadataExt {\r\n        uint balance;\r\n        uint votes;\r\n        address delegate;\r\n        uint allocated;\r\n    }\r\n\r\n    function getCompBalanceMetadataExt(Comp comp, ComptrollerLensInterface comptroller, address account) external returns (CompBalanceMetadataExt memory) {\r\n        uint balance = comp.balanceOf(account);\r\n        comptroller.claimComp(account);\r\n        uint newBalance = comp.balanceOf(account);\r\n        uint accrued = comptroller.compAccrued(account);\r\n        uint total = add(accrued, newBalance, \"sum comp total\");\r\n        uint allocated = sub(total, balance, \"sub allocated\");\r\n\r\n        return CompBalanceMetadataExt({\r\n            balance: balance,\r\n            votes: uint256(comp.getCurrentVotes(account)),\r\n            delegate: comp.delegates(account),\r\n            allocated: allocated\r\n        });\r\n    }\r\n\r\n    struct CompVotes {\r\n        uint blockNumber;\r\n        uint votes;\r\n    }\r\n\r\n    function getCompVotes(Comp comp, address account, uint32[] calldata blockNumbers) external view returns (CompVotes[] memory) {\r\n        CompVotes[] memory res = new CompVotes[](blockNumbers.length);\r\n        for (uint i = 0; i < blockNumbers.length; i++) {\r\n            res[i] = CompVotes({\r\n                blockNumber: uint256(blockNumbers[i]),\r\n                votes: uint256(comp.getPriorVotes(account, blockNumbers[i]))\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Compound's Maximillion Contract\r\n * @author Compound\r\n */\r\ncontract Maximillion {\r\n    /**\r\n     * @notice The default cEther market to repay in\r\n     */\r\n    CEther public cEther;\r\n\r\n    /**\r\n     * @notice Construct a Maximillion to repay max in a CEther market\r\n     */\r\n    constructor(CEther cEther_) public {\r\n        cEther = cEther_;\r\n    }\r\n\r\n    /**\r\n     * @notice msg.sender sends Ether to repay an account's borrow in the cEther market\r\n     * @dev The provided Ether is applied towards the borrow balance, any excess is refunded\r\n     * @param borrower The address of the borrower account to repay on behalf of\r\n     */\r\n    function repayBehalf(address borrower) public payable {\r\n        repayBehalfExplicit(borrower, cEther);\r\n    }\r\n\r\n    /**\r\n     * @notice msg.sender sends Ether to repay an account's borrow in a cEther market\r\n     * @dev The provided Ether is applied towards the borrow balance, any excess is refunded\r\n     * @param borrower The address of the borrower account to repay on behalf of\r\n     * @param cEther_ The address of the cEther contract to repay in\r\n     */\r\n    function repayBehalfExplicit(address borrower, CEther cEther_) public payable {\r\n        uint received = msg.value;\r\n        uint borrows = cEther_.borrowBalanceCurrent(borrower);\r\n        if (received > borrows) {\r\n            cEther_.repayBorrowBehalf.value(borrows)(borrower);\r\n            msg.sender.transfer(received - borrows);\r\n        } else {\r\n            cEther_.repayBorrowBehalf.value(received)(borrower);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Reservoir Contract\r\n * @notice Distributes a token to a different contract at a fixed rate.\r\n * @dev This contract must be poked via the `drip()` function every so often.\r\n * @author Compound\r\n */\r\ncontract Reservoir {\r\n\r\n  /// @notice The block number when the Reservoir started (immutable)\r\n  uint public dripStart;\r\n\r\n  /// @notice Tokens per block that to drip to target (immutable)\r\n  uint public dripRate;\r\n\r\n  /// @notice Reference to token to drip (immutable)\r\n  EIP20Interface public token;\r\n\r\n  /// @notice Target to receive dripped tokens (immutable)\r\n  address public target;\r\n\r\n  /// @notice Amount that has already been dripped\r\n  uint public dripped;\r\n\r\n  /**\r\n    * @notice Constructs a Reservoir\r\n    * @param dripRate_ Numer of tokens per block to drip\r\n    * @param token_ The token to drip\r\n    * @param target_ The recipient of dripped tokens\r\n    */\r\n  constructor(uint dripRate_, EIP20Interface token_, address target_) public {\r\n    dripStart = block.number;\r\n    dripRate = dripRate_;\r\n    token = token_;\r\n    target = target_;\r\n    dripped = 0;\r\n  }\r\n\r\n  /**\r\n    * @notice Drips the maximum amount of tokens to match the drip rate since inception\r\n    * @dev Note: this will only drip up to the amount of tokens available.\r\n    * @return The amount of tokens dripped in this call\r\n    */\r\n  function drip() public returns (uint) {\r\n    // First, read storage into memory\r\n    EIP20Interface token_ = token;\r\n    uint reservoirBalance_ = token_.balanceOf(address(this)); // TODO: Verify this is a static call\r\n    uint dripRate_ = dripRate;\r\n    uint dripStart_ = dripStart;\r\n    uint dripped_ = dripped;\r\n    address target_ = target;\r\n    uint blockNumber_ = block.number;\r\n\r\n    // Next, calculate intermediate values\r\n    uint dripTotal_ = mul(dripRate_, blockNumber_ - dripStart_, \"dripTotal overflow\");\r\n    uint deltaDrip_ = sub(dripTotal_, dripped_, \"deltaDrip underflow\");\r\n    uint toDrip_ = min(reservoirBalance_, deltaDrip_);\r\n    uint drippedNext_ = add(dripped_, toDrip_, \"tautological\");\r\n\r\n    // Finally, write new `dripped` value and transfer tokens to target\r\n    dripped = drippedNext_;\r\n    token_.transfer(target_, toDrip_);\r\n\r\n    return toDrip_;\r\n  }\r\n\r\n  /* Internal helper functions for safe math */\r\n\r\n  function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    require(b <= a, errorMessage);\r\n    uint c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    require(c / a == b, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function min(uint a, uint b) internal pure returns (uint) {\r\n    if (a <= b) {\r\n      return a;\r\n    } else {\r\n      return b;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ncontract SimplePriceOracle is PriceOracle {\r\n    mapping(address => uint) prices;\r\n    event PricePosted(address asset, uint previousPriceMantissa, uint requestedPriceMantissa, uint newPriceMantissa);\r\n\r\n    function getUnderlyingPrice(CToken cToken) public returns (uint) {\r\n        if (compareStrings(cToken.symbol(), \"cETH\")) {\r\n            return 1e18;\r\n        } else {\r\n            return prices[address(CErc20(address(cToken)).underlying())];\r\n        }\r\n    }\r\n\r\n    function setUnderlyingPrice(CToken cToken, uint underlyingPriceMantissa) public {\r\n        address asset = address(CErc20(address(cToken)).underlying());\r\n        emit PricePosted(asset, prices[asset], underlyingPriceMantissa, underlyingPriceMantissa);\r\n        prices[asset] = underlyingPriceMantissa;\r\n    }\r\n\r\n    function setDirectPrice(address asset, uint price) public {\r\n        emit PricePosted(asset, prices[asset], price, price);\r\n        prices[asset] = price;\r\n    }\r\n\r\n    // v1 price oracle interface for use as backing of proxy\r\n    function assetPrices(address asset) external view returns (uint) {\r\n        return prices[asset];\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\ncontract Timelock {\r\n    using SafeMath for uint;\r\n\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint indexed newDelay);\r\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\r\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\r\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\r\n\r\n    uint public constant GRACE_PERIOD = 14 days;\r\n    uint public constant MINIMUM_DELAY = 2 days;\r\n    uint public constant MAXIMUM_DELAY = 30 days;\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    uint public delay;\r\n\r\n    mapping (bytes32 => bool) public queuedTransactions;\r\n\r\n\r\n    constructor(address admin_, uint delay_) public {\r\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\r\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n\r\n        admin = admin_;\r\n        delay = delay_;\r\n    }\r\n\r\n    function() external payable { }\r\n\r\n    function setDelay(uint delay_) public {\r\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\r\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n        delay = delay_;\r\n\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function acceptAdmin() public {\r\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    function setPendingAdmin(address pendingAdmin_) public {\r\n        require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\r\n        pendingAdmin = pendingAdmin_;\r\n\r\n        emit NewPendingAdmin(pendingAdmin);\r\n    }\r\n\r\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\r\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\r\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n        return txHash;\r\n    }\r\n\r\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\r\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = false;\r\n\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\r\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\r\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\r\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\r\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint) {\r\n        // solium-disable-next-line security/no-block-members\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n  * @title Compound's WhitePaperInterestRateModel Contract\r\n  * @author Compound\r\n  * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper\r\n  */\r\ncontract WhitePaperInterestRateModel is InterestRateModel {\r\n    using SafeMath for uint;\r\n\r\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock);\r\n\r\n    /**\r\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\r\n     */\r\n    uint public constant blocksPerYear = 2102400;\r\n\r\n    /**\r\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\r\n     */\r\n    uint public multiplierPerBlock;\r\n\r\n    /**\r\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\r\n     */\r\n    uint public baseRatePerBlock;\r\n\r\n    /**\r\n     * @notice Construct an interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\r\n     */\r\n    constructor(uint baseRatePerYear, uint multiplierPerYear) public {\r\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\r\n        multiplierPerBlock = multiplierPerYear.div(blocksPerYear);\r\n\r\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market (currently unused)\r\n     * @return The utilization rate as a mantissa between [0, 1e18]\r\n     */\r\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\r\n        // Utilization rate is 0 when there are no borrows\r\n        if (borrows == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) public view returns (uint) {\r\n        uint ur = utilizationRate(cash, borrows, reserves);\r\n        return ur.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the current supply rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @param reserveFactorMantissa The current reserve factor for the market\r\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\r\n        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\r\n        uint borrowRate = getBorrowRate(cash, borrows, reserves);\r\n        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\r\n        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.CTokenBalances\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cTokenBalancesAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.CTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"cTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"cTokenMetadataAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.CTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"cTokenUnderlyingPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.CTokenUnderlyingPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"cTokenUnderlyingPriceAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.CTokenUnderlyingPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"contract CToken[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract Comp\",\"name\":\"comp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCompBalanceMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct CompoundLens.CompBalanceMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Comp\",\"name\":\"comp\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCompBalanceMetadataExt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.CompBalanceMetadataExt\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract Comp\",\"name\":\"comp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"blockNumbers\",\"type\":\"uint32[]\"}],\"name\":\"getCompVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLens.CompVotes[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct CompoundLens.GovProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovReceipts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct CompoundLens.GovReceipt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CompoundLens","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1a4509ddf40a0e9d5152a8d1391c7b4702440229690c1a792430ac3e1bb7f7d8"}]}