{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Boardroom.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.6.0;\\n//pragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport './lib/Safe112.sol';\\nimport './owner/Operator.sol';\\nimport './utils/ContractGuard.sol';\\nimport './interfaces/IHCAsset.sol';\\n\\ncontract ShareWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public share;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _totalInternalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _internalBalances;\\n\\n    function totalInternalSupply() public view returns (uint256) {\\n        return _totalInternalSupply;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n    \\n    function internalBalanceOf(address account) public view returns (uint256) {\\n        return _internalBalances[account];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount, uint256 userBoostPower) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _totalInternalSupply = _totalInternalSupply.add(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].add((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        share.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount, uint256 userBoostPower) public virtual {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _totalInternalSupply = _totalInternalSupply.sub(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].sub((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        share.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _update(uint256 _userBoostPower) internal {\\n        uint256 oldInternalBalance = _internalBalances[msg.sender];\\n        uint256 newInternalBalance = _balances[msg.sender].mul(_userBoostPower.add(1e18)).div(1e18);\\n        _internalBalances[msg.sender] = newInternalBalance;\\n        _totalInternalSupply = _totalInternalSupply.sub(oldInternalBalance).add(newInternalBalance);\\n    }\\n}\\n\\ninterface IHayekPlate {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function getFeatureAddr() external returns(address);\\n}\\n\\ninterface IHayekPlateCustomData {\\n    function getTokenIdBoostPower(uint256 tokenId) external view returns(uint256);\\n}\\n\\ncontract HayekPlateWrapper {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlate; \\n\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    mapping(address => uint256[]) private _ownedTokens;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => uint256) private _ownedBoostPower;\\n    mapping (uint256 => address) private _tokenOwner;\\n    \\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function totalNFTSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function stakePlate(uint256 tokenId) public virtual {\\n        require(msg.sender == hayekPlate.ownerOf(tokenId), 'This account is not owner');\\n        _tokenOwner[tokenId] = msg.sender;\\n        _addTokenToOwnerEnumeration(msg.sender, tokenId);\\n        _addTokenToAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] += _plateBoostPower;\\n        hayekPlate.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) public virtual {\\n        require(msg.sender == _tokenOwner[tokenId], 'This account is not owner');\\n        _removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] -= _plateBoostPower;\\n        hayekPlate.transfer(msg.sender, tokenId);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        _ownedTokens[from].pop();\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function getAccountBoostPower(address account) public view returns(uint256){\\n        return _ownedBoostPower[account];\\n    }\\n\\n    function getTokenIdBoostPower(uint256 tokenId) internal returns(uint256){\\n        address customDataAddr = hayekPlate.getFeatureAddr();\\n        IHayekPlateCustomData hayekPlateCustomData = IHayekPlateCustomData(customDataAddr);\\n        return hayekPlateCustomData.getTokenIdBoostPower(tokenId);\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external \\n        returns (bytes4) \\n    {\\n        // Shh\\n        return _ERC721_RECEIVED;\\n    }\\n}\\n\\ncontract Boardroom is ShareWrapper, HayekPlateWrapper, ContractGuard, Operator {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using Safe112 for uint112;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Boardseat {\\n        uint256 lastSnapshotIndex;\\n        uint256 rewardEarned;\\n    }\\n\\n    struct BoardSnapshot {\\n        uint256 time;\\n        uint256 rewardReceived;\\n        uint256 rewardPerShare;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 private cash;\\n\\n    mapping(address => Boardseat) private directors;\\n    BoardSnapshot[] private boardHistory;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(IERC20 _cash, IHayekPlate _hayekPlate, IERC20 _share) public {\\n        cash = _cash;\\n        share = _share;\\n        hayekPlate = _hayekPlate;\\n        BoardSnapshot memory genesisSnapshot =\\n            BoardSnapshot({\\n                time: block.number,\\n                rewardReceived: 0,\\n                rewardPerShare: 0\\n            });\\n        boardHistory.push(genesisSnapshot);\\n    }\\n\\n    /* ========== Modifiers =============== */\\n    modifier directorExists {\\n        require(\\n            balanceOf(msg.sender) > 0,\\n            'Boardroom: The director does not exist'\\n        );\\n        _;\\n    }\\n\\n    modifier updateReward(address director) {\\n        if (director != address(0)) {\\n            Boardseat memory seat = directors[director];\\n            seat.rewardEarned = earned(director);\\n            seat.lastSnapshotIndex = latestSnapshotIndex();\\n            directors[director] = seat;\\n        }\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // =========== Snapshot getters\\n\\n    function latestSnapshotIndex() public view returns (uint256) {\\n        return boardHistory.length.sub(1);\\n    }\\n\\n    function getLatestSnapshot() internal view returns (BoardSnapshot memory) {\\n        return boardHistory[latestSnapshotIndex()];\\n    }\\n\\n    function getLastSnapshotIndexOf(address director)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return directors[director].lastSnapshotIndex;\\n    }\\n\\n    function getLastSnapshotOf(address director)\\n        internal\\n        view\\n        returns (BoardSnapshot memory)\\n    {\\n        return boardHistory[getLastSnapshotIndexOf(director)];\\n    }\\n\\n    // =========== Director getters\\n\\n    function rewardPerShare() public view returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function earned(address director) public view returns (uint256) {\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 storedRPS = getLastSnapshotOf(director).rewardPerShare;\\n\\n        return\\n            internalBalanceOf(director).mul(latestRPS.sub(storedRPS)).div(1e18).add(\\n                directors[director].rewardEarned\\n            );\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stakePlate(uint256 tokenId) \\n        public\\n        override\\n        onlyOneBlock\\n        updateReward(msg.sender)\\n    {\\n        require(tokenId > 0, 'HCCUNIPool: Invalid tokenId');\\n        super.stakePlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateStaked(msg.sender, tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) \\n        public\\n        override\\n        onlyOneBlock\\n        updateReward(msg.sender)\\n    {\\n        require(tokenId > 0, 'HCCUNIPool: Invalid tokenId');\\n        super.withdrawPlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateWithdrawn(msg.sender, tokenId);\\n    }\\n\\n    function stake(uint256 amount)\\n        public\\n        onlyOneBlock\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, 'Boardroom: Cannot stake 0');\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.stake(amount, userBoostPower);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        onlyOneBlock\\n        directorExists\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, 'Boardroom: Cannot withdraw 0');\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.withdraw(amount, userBoostPower);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        claimReward();\\n    }\\n\\n    function claimReward() public updateReward(msg.sender) {\\n        uint256 reward = directors[msg.sender].rewardEarned;\\n        if (reward > 0) {\\n            directors[msg.sender].rewardEarned = 0;\\n            cash.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function allocateSeigniorage(uint256 amount)\\n        external\\n        onlyOneBlock\\n        onlyOperator\\n    {\\n        require(amount > 0, 'Boardroom: Cannot allocate 0');\\n        require(\\n            totalSupply() > 0,\\n            'Boardroom: Cannot allocate when totalSupply is 0'\\n        );\\n\\n        // Create & add new snapshot\\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalInternalSupply()));\\n\\n        BoardSnapshot memory newSnapshot =\\n            BoardSnapshot({\\n                time: block.number,\\n                rewardReceived: amount,\\n                rewardPerShare: nextRPS\\n            });\\n        boardHistory.push(newSnapshot);\\n\\n        cash.safeTransferFrom(msg.sender, address(this), amount);\\n        emit RewardAdded(msg.sender, amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event PlateStaked(address indexed user, uint256 tokenId);\\n    event PlateWithdrawn(address indexed user, uint256 tokenId);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardAdded(address indexed user, uint256 reward);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Safe112.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary Safe112 {\\n    function add(uint112 a, uint112 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'Safe112: addition overflow');\\n\\n        return c;\\n    }\\n\\n    function sub(uint112 a, uint112 b) internal pure returns (uint256) {\\n        return sub(a, b, 'Safe112: subtraction overflow');\\n    }\\n\\n    function sub(\\n        uint112 a,\\n        uint112 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint112) {\\n        require(b <= a, errorMessage);\\n        uint112 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint112 a, uint112 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'Safe112: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    function div(uint112 a, uint112 b) internal pure returns (uint256) {\\n        return div(a, b, 'Safe112: division by zero');\\n    }\\n\\n    function div(\\n        uint112 a,\\n        uint112 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint112) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint112 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mod(uint112 a, uint112 b) internal pure returns (uint256) {\\n        return mod(a, b, 'Safe112: modulo by zero');\\n    }\\n\\n    function mod(\\n        uint112 a,\\n        uint112 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint112) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/owner/Operator.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/GSN/Context.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            'operator: caller is not the operator'\\n        );\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(\\n            newOperator_ != address(0),\\n            'operator: zero address given for new operator'\\n        );\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ContractGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(\\n            !checkSameOriginReentranted(),\\n            'ContractGuard: one block, one function'\\n        );\\n        require(\\n            !checkSameSenderReentranted(),\\n            'ContractGuard: one block, one function'\\n        );\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHCAsset.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface IHCAsset {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Treasury.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\n\\nimport './interfaces/IOracle.sol';\\nimport './interfaces/IBoardroom.sol';\\nimport './interfaces/IHCAsset.sol';\\nimport './interfaces/ISimpleERCFund.sol';\\nimport './lib/Babylonian.sol';\\nimport './lib/FixedPoint.sol';\\nimport './lib/Safe112.sol';\\nimport './owner/Operator.sol';\\nimport './utils/Epoch.sol';\\nimport './utils/ContractGuard.sol';\\n\\n/**\\n * @title OK Cash Treasury contract\\n * @notice Monetary policy logic to adjust supplies of ok cash assets\\n * @author Summer Smith & Rick Sanchez\\n */\\ncontract Treasury is ContractGuard, Epoch {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using Safe112 for uint112;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // ========== FLAGS\\n    bool public migrated = false;\\n    bool public initialized = false;\\n\\n    // ========== CORE\\n    address public fund;\\n    address public cash;\\n    address public bond;\\n    address public share;\\n    address public boardroom;\\n\\n    address public bondOracle;\\n    address public seigniorageOracle;\\n\\n    // ========== PARAMS\\n    uint256 public cashPriceOne;\\n    uint256 public cashPriceCeiling;\\n    uint256 public bondDepletionFloor;\\n    uint256 private accumulatedSeigniorage = 0;\\n    uint256 public fundAllocationRate = 2; // %\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _cash,\\n        address _bond,\\n        address _share,\\n        address _bondOracle,\\n        address _seigniorageOracle,\\n        address _boardroom,\\n        address _fund,\\n        uint256 _startTime\\n    ) public Epoch(1 days, _startTime, 0) {\\n        cash = _cash;\\n        bond = _bond;\\n        share = _share;\\n        bondOracle = _bondOracle;\\n        seigniorageOracle = _seigniorageOracle;\\n\\n        boardroom = _boardroom;\\n        fund = _fund;\\n\\n        cashPriceOne = 10**18;\\n        cashPriceCeiling = uint256(105).mul(cashPriceOne).div(10**2);\\n\\n        bondDepletionFloor = uint256(1000).mul(cashPriceOne);\\n    }\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier checkMigration {\\n        require(!migrated, 'Treasury: migrated');\\n\\n        _;\\n    }\\n\\n    modifier checkOperator {\\n        require(\\n            IHCAsset(cash).operator() == address(this) &&\\n                IHCAsset(bond).operator() == address(this) &&\\n                IHCAsset(share).operator() == address(this) &&\\n                Operator(boardroom).operator() == address(this),\\n            'Treasury: need more permission'\\n        );\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return accumulatedSeigniorage;\\n    }\\n\\n    // oracle\\n    function getBondOraclePrice() public view returns (uint256) {\\n        return _getCashPrice(bondOracle);\\n    }\\n\\n    function getSeigniorageOraclePrice() public view returns (uint256) {\\n        return _getCashPrice(seigniorageOracle);\\n    }\\n\\n    function _getCashPrice(address oracle) internal view returns (uint256) {\\n        try IOracle(oracle).consult(cash, 1e18) returns (uint256 price) {\\n            return price;\\n        } catch {\\n            revert('Treasury: failed to consult cash price from the oracle');\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize() public checkOperator {\\n        require(!initialized, 'Treasury: initialized');\\n\\n        // burn all of it's balance\\n        IHCAsset(cash).burn(IERC20(cash).balanceOf(address(this)));\\n\\n        // set accumulatedSeigniorage to it's balance\\n        accumulatedSeigniorage = IERC20(cash).balanceOf(address(this));\\n\\n        initialized = true;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function migrate(address target) public onlyOperator checkOperator {\\n        require(!migrated, 'Treasury: migrated');\\n\\n        // cash\\n        Operator(cash).transferOperator(target);\\n        Operator(cash).transferOwnership(target);\\n        IERC20(cash).transfer(target, IERC20(cash).balanceOf(address(this)));\\n\\n        // bond\\n        Operator(bond).transferOperator(target);\\n        Operator(bond).transferOwnership(target);\\n        IERC20(bond).transfer(target, IERC20(bond).balanceOf(address(this)));\\n\\n        // share\\n        Operator(share).transferOperator(target);\\n        Operator(share).transferOwnership(target);\\n        IERC20(share).transfer(target, IERC20(share).balanceOf(address(this)));\\n\\n        migrated = true;\\n        emit Migration(target);\\n    }\\n\\n    function setFund(address newFund) public onlyOperator {\\n        fund = newFund;\\n        emit ContributionPoolChanged(msg.sender, newFund);\\n    }\\n\\n    function setFundAllocationRate(uint256 rate) public onlyOperator {\\n        fundAllocationRate = rate;\\n        emit ContributionPoolRateChanged(msg.sender, rate);\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateCashPrice() internal {\\n        try IOracle(bondOracle).update()  {} catch {}\\n        try IOracle(seigniorageOracle).update()  {} catch {}\\n    }\\n\\n    function buyBonds(uint256 amount, uint256 targetPrice)\\n        external\\n        onlyOneBlock\\n        checkMigration\\n        checkStartTime\\n        checkOperator\\n    {\\n        require(amount > 0, 'Treasury: cannot purchase bonds with zero amount');\\n\\n        uint256 cashPrice = _getCashPrice(bondOracle);\\n        require(cashPrice == targetPrice, 'Treasury: cash price moved');\\n        require(\\n            cashPrice < cashPriceOne, // price < $1\\n            'Treasury: cashPrice not eligible for bond purchase'\\n        );\\n\\n        uint256 bondPrice = cashPrice;\\n\\n        IHCAsset(cash).burnFrom(msg.sender, amount);\\n        IHCAsset(bond).mint(msg.sender, amount.mul(1e18).div(bondPrice));\\n        _updateCashPrice();\\n\\n        emit BoughtBonds(msg.sender, amount);\\n    }\\n\\n    function redeemBonds(uint256 amount, uint256 targetPrice)\\n        external\\n        onlyOneBlock\\n        checkMigration\\n        checkStartTime\\n        checkOperator\\n    {\\n        require(amount > 0, 'Treasury: cannot redeem bonds with zero amount');\\n\\n        uint256 cashPrice = _getCashPrice(bondOracle);\\n        require(cashPrice == targetPrice, 'Treasury: cash price moved');\\n        require(\\n            cashPrice > cashPriceCeiling, // price > $1.05\\n            'Treasury: cashPrice not eligible for bond purchase'\\n        );\\n        require(\\n            IERC20(cash).balanceOf(address(this)) >= amount,\\n            'Treasury: treasury has no more budget'\\n        );\\n\\n        accumulatedSeigniorage = accumulatedSeigniorage.sub(\\n            Math.min(accumulatedSeigniorage, amount)\\n        );\\n\\n        IHCAsset(bond).burnFrom(msg.sender, amount);\\n        IERC20(cash).safeTransfer(msg.sender, amount);\\n        _updateCashPrice();\\n\\n        emit RedeemedBonds(msg.sender, amount);\\n    }\\n\\n    function allocateSeigniorage()\\n        external\\n        onlyOneBlock\\n        checkMigration\\n        checkStartTime\\n        checkEpoch\\n        checkOperator\\n    {\\n        _updateCashPrice();\\n        uint256 cashPrice = _getCashPrice(seigniorageOracle);\\n        if (cashPrice <= cashPriceCeiling) {\\n            return; // just advance epoch instead revert\\n        }\\n\\n        // circulating supply\\n        uint256 cashSupply = IERC20(cash).totalSupply().sub(\\n            accumulatedSeigniorage\\n        );\\n        uint256 percentage = cashPrice.sub(cashPriceOne);\\n        uint256 seigniorage = cashSupply.mul(percentage).div(1e18);\\n        IHCAsset(cash).mint(address(this), seigniorage);\\n\\n        // ======================== BIP-3\\n        uint256 fundReserve = seigniorage.mul(fundAllocationRate).div(100);\\n        if (fundReserve > 0) {\\n            IERC20(cash).safeApprove(fund, fundReserve);\\n            ISimpleERCFund(fund).deposit(\\n                cash,\\n                fundReserve,\\n                'Treasury: Seigniorage Allocation'\\n            );\\n            emit ContributionPoolFunded(now, fundReserve);\\n        }\\n\\n        seigniorage = seigniorage.sub(fundReserve);\\n\\n        // ======================== BIP-4\\n        uint256 treasuryReserve = Math.min(\\n            seigniorage,\\n            IERC20(bond).totalSupply().sub(accumulatedSeigniorage)\\n        );\\n        if (treasuryReserve > 0) {\\n            accumulatedSeigniorage = accumulatedSeigniorage.add(\\n                treasuryReserve\\n            );\\n            emit TreasuryFunded(now, treasuryReserve);\\n        }\\n\\n        // boardroom\\n        uint256 boardroomReserve = seigniorage.sub(treasuryReserve);\\n        if (boardroomReserve > 0) {\\n            IERC20(cash).safeApprove(boardroom, boardroomReserve);\\n            IBoardroom(boardroom).allocateSeigniorage(boardroomReserve);\\n            emit BoardroomFunded(now, boardroomReserve);\\n        }\\n    }\\n\\n    // GOV\\n    event Initialized(address indexed executor, uint256 at);\\n    event Migration(address indexed target);\\n    event ContributionPoolChanged(address indexed operator, address newFund);\\n    event ContributionPoolRateChanged(\\n        address indexed operator,\\n        uint256 newRate\\n    );\\n\\n    // CORE\\n    event RedeemedBonds(address indexed from, uint256 amount);\\n    event BoughtBonds(address indexed from, uint256 amount);\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event ContributionPoolFunded(uint256 timestamp, uint256 seigniorage);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address token, uint256 amountIn)\\n        external\\n        view\\n        returns (uint256 amountOut);\\n    // function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestamp);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBoardroom.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface IBoardroom {\\n    function allocateSeigniorage(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISimpleERCFund.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ISimpleERCFund {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        string memory reason\\n    ) external;\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        address to,\\n        string memory reason\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Babylonian.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FixedPoint.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport './Babylonian.sol';\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\\n    uint256 private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y)\\n        internal\\n        pure\\n        returns (uq144x112 memory)\\n    {\\n        uint256 z;\\n        require(\\n            y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x),\\n            'FixedPoint: MULTIPLICATION_OVERFLOW'\\n        );\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(denominator > 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    function sqrt(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Epoch.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../owner/Operator.sol';\\n\\ncontract Epoch is Operator {\\n    using SafeMath for uint256;\\n\\n    uint256 private period;\\n    uint256 private startTime;\\n    uint256 private epoch;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        uint256 _period,\\n        uint256 _startTime,\\n        uint256 _startEpoch\\n    ) public {\\n        period = _period;\\n        startTime = _startTime;\\n        epoch = _startEpoch;\\n    }\\n\\n    /* ========== Modifier ========== */\\n\\n    modifier checkStartTime {\\n        require(now >= startTime, 'Epoch: not started yet');\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch {\\n        require(now >= nextEpochPoint(), 'Epoch: not allowed');\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function getCurrentEpoch() public view returns (uint256) {\\n        return epoch;\\n    }\\n\\n    function getPeriod() public view returns (uint256) {\\n        return period;\\n    }\\n\\n    function getStartTime() public view returns (uint256) {\\n        return startTime;\\n    }\\n\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(period));\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function setPeriod(uint256 _period) external onlyOperator {\\n        period = _period;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VoteProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './owner/Operator.sol';\\n\\ncontract VoteProxy is Operator {\\n    // Events\\n    event BoardroomChanged(\\n        address indexed operator,\\n        address indexed oldBoardroom,\\n        address indexed newBoardroom\\n    );\\n\\n    // Boardroom\\n    address public boardroom;\\n\\n    constructor(address _boardroom) public {\\n        boardroom = _boardroom;\\n    }\\n\\n    function setBoardroom(address newBoardroom) public onlyOperator {\\n        address oldBoardroom = boardroom;\\n        boardroom = newBoardroom;\\n        emit BoardroomChanged(msg.sender, oldBoardroom, newBoardroom);\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return 'HCS in Boardroom';\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return 'SHCS';\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return IERC20(boardroom).totalSupply();\\n    }\\n\\n    function balanceOf(address _voter) external view returns (uint256) {\\n        return IERC20(boardroom).balanceOf(_voter);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/MockBoardroom.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '../owner/Operator.sol';\\nimport '../interfaces/IBoardroom.sol';\\n\\ncontract MockBoardroom is IBoardroom, Operator {\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public cash;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _cash) public {\\n        cash = IERC20(_cash);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function allocateSeigniorage(uint256 amount)\\n        external\\n        override\\n        onlyOperator\\n    {\\n        require(amount > 0, 'Boardroom: Cannot allocate 0');\\n        cash.safeTransferFrom(msg.sender, address(this), amount);\\n        emit RewardAdded(msg.sender, amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(address indexed user, uint256 reward);\\n}\\n\"\r\n    },\r\n    \"contracts/SimpleERCFund.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport './owner/Operator.sol';\\nimport './interfaces/ISimpleERCFund.sol';\\n\\ncontract SimpleERCFund is ISimpleERCFund, Operator {\\n    using SafeERC20 for IERC20;\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        string memory reason\\n    ) public override {\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Deposit(msg.sender, now, reason);\\n    }\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        address to,\\n        string memory reason\\n    ) public override onlyOperator {\\n        IERC20(token).safeTransfer(to, amount);\\n        emit Withdrawal(msg.sender, to, now, reason);\\n    }\\n\\n    event Deposit(address indexed from, uint256 indexed at, string reason);\\n    event Withdrawal(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed at,\\n        string reason\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/Timelock.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/*\\n * Copyright 2020 Compound Labs, Inc.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * 1. Redistributions of source code must retain the above copyright notice,\\n * this list of conditions and the following disclaimer.\\n *\\n * 2. Redistributions in binary form must reproduce the above copyright notice,\\n * this list of conditions and the following disclaimer in the documentation\\n * and/or other materials provided with the distribution.\\n *\\n * 3. Neither the name of the copyright holder nor the names of its contributors\\n * may be used to endorse or promote products derived from this software without\\n * specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\ncontract Timelock {\\n    using SafeMath for uint256;\\n\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint256 indexed newDelay);\\n    event CancelTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n    event ExecuteTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n    event QueueTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n\\n    uint256 public constant GRACE_PERIOD = 14 days;\\n    uint256 public constant MINIMUM_DELAY = 2 days;\\n    uint256 public constant MAXIMUM_DELAY = 30 days;\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    uint256 public delay;\\n\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    constructor(address admin_, uint256 delay_) public {\\n        require(\\n            delay_ >= MINIMUM_DELAY,\\n            'Timelock::constructor: Delay must exceed minimum delay.'\\n        );\\n        require(\\n            delay_ <= MAXIMUM_DELAY,\\n            'Timelock::setDelay: Delay must not exceed maximum delay.'\\n        );\\n\\n        admin = admin_;\\n        delay = delay_;\\n    }\\n\\n    receive() external payable {}\\n\\n    function setDelay(uint256 delay_) public {\\n        require(\\n            msg.sender == address(this),\\n            'Timelock::setDelay: Call must come from Timelock.'\\n        );\\n        require(\\n            delay_ >= MINIMUM_DELAY,\\n            'Timelock::setDelay: Delay must exceed minimum delay.'\\n        );\\n        require(\\n            delay_ <= MAXIMUM_DELAY,\\n            'Timelock::setDelay: Delay must not exceed maximum delay.'\\n        );\\n        delay = delay_;\\n\\n        emit NewDelay(delay);\\n    }\\n\\n    function acceptAdmin() public {\\n        require(\\n            msg.sender == pendingAdmin,\\n            'Timelock::acceptAdmin: Call must come from pendingAdmin.'\\n        );\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setPendingAdmin(address pendingAdmin_) public {\\n        require(\\n            msg.sender == address(this),\\n            'Timelock::setPendingAdmin: Call must come from Timelock.'\\n        );\\n        pendingAdmin = pendingAdmin_;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public returns (bytes32) {\\n        require(\\n            msg.sender == admin,\\n            'Timelock::queueTransaction: Call must come from admin.'\\n        );\\n        require(\\n            eta >= getBlockTimestamp().add(delay),\\n            'Timelock::queueTransaction: Estimated execution block must satisfy delay.'\\n        );\\n\\n        bytes32 txHash = keccak256(\\n            abi.encode(target, value, signature, data, eta)\\n        );\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public {\\n        require(\\n            msg.sender == admin,\\n            'Timelock::cancelTransaction: Call must come from admin.'\\n        );\\n\\n        bytes32 txHash = keccak256(\\n            abi.encode(target, value, signature, data, eta)\\n        );\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public payable returns (bytes memory) {\\n        require(\\n            msg.sender == admin,\\n            'Timelock::executeTransaction: Call must come from admin.'\\n        );\\n\\n        bytes32 txHash = keccak256(\\n            abi.encode(target, value, signature, data, eta)\\n        );\\n        require(\\n            queuedTransactions[txHash],\\n            \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\"\\n        );\\n        require(\\n            getBlockTimestamp() >= eta,\\n            \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\"\\n        );\\n        require(\\n            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\\n            'Timelock::executeTransaction: Transaction is stale.'\\n        );\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(\\n                bytes4(keccak256(bytes(signature))),\\n                data\\n            );\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value: value}(\\n            callData\\n        );\\n        require(\\n            success,\\n            'Timelock::executeTransaction: Transaction execution reverted.'\\n        );\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint256) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/MockOracle.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../interfaces/IOracle.sol';\\n\\ncontract MockOracle is IOracle {\\n    using SafeMath for uint256;\\n\\n    uint256 public price;\\n    bool public error;\\n\\n    function setPrice(uint256 _price) public {\\n        price = _price;\\n    }\\n\\n    function setRevert(bool _error) public {\\n        error = _error;\\n    }\\n\\n    function update() external override {\\n        require(!error, 'Oracle: mocked error');\\n        emit Updated(0, 0);\\n    }\\n\\n    function consult(address, uint256 amountIn)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return price.mul(amountIn).div(1e18);\\n    }\\n\\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\\n}\\n\"\r\n    },\r\n    \"contracts/Oracle.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport './lib/Babylonian.sol';\\nimport './lib/FixedPoint.sol';\\nimport './lib/UniswapV2Library.sol';\\nimport './lib/UniswapV2OracleLibrary.sol';\\nimport './utils/Epoch.sol';\\nimport './interfaces/IUniswapV2Pair.sol';\\nimport './interfaces/IUniswapV2Factory.sol';\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract Oracle is Epoch {\\n    using FixedPoint for *;\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // uniswap\\n    address public token0;\\n    address public token1;\\n    IUniswapV2Pair public pair;\\n\\n    // oracle\\n    uint32 public blockTimestampLast;\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _startTime\\n    ) public Epoch(_period, _startTime, 0) {\\n        IUniswapV2Pair _pair = IUniswapV2Pair(\\n            UniswapV2Library.pairFor(_factory, _tokenA, _tokenB)\\n        );\\n        pair = _pair;\\n        token0 = _pair.token0();\\n        token1 = _pair.token1();\\n        price0CumulativeLast = _pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\\n        price1CumulativeLast = _pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, 'Oracle: NO_RESERVES'); // ensure that there's liquidity in the pair\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    /** @dev Updates 1-day EMA price from Uniswap.  */\\n    function update() external checkEpoch {\\n        (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed == 0) {\\n            // prevent divided by zero\\n            return;\\n        }\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        price0Average = FixedPoint.uq112x112(\\n            uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)\\n        );\\n        price1Average = FixedPoint.uq112x112(\\n            uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)\\n        );\\n\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n\\n        emit Updated(price0Cumulative, price1Cumulative);\\n    }\\n\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address token, uint256 amountIn)\\n        external\\n        view\\n        returns (uint144 amountOut)\\n    {\\n        if (token == token0) {\\n            amountOut = price0Average.mul(amountIn).decode144();\\n        } else {\\n            require(token == token1, 'Oracle: INVALID_TOKEN');\\n            amountOut = price1Average.mul(amountIn).decode144();\\n        }\\n    }\\n\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address lpt) {\\n        return UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n    }\\n\\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UniswapV2Library.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../interfaces/IUniswapV2Pair.sol';\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB)\\n        )\\n            .getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UniswapV2OracleLibrary.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport './FixedPoint.sol';\\nimport '../interfaces/IUniswapV2Pair.sol';\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        ) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative +=\\n                uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\\n                timeElapsed;\\n            // counterfactual\\n            price1Cumulative +=\\n                uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\\n                timeElapsed;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/HCCWETHPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: HAYEKCASHRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n// File: contracts/IRewardDistributionRecipient.sol\\n\\nimport '../interfaces/IRewardDistributionRecipient.sol';\\n\\ncontract WETHWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public weth;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _totalInternalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _internalBalances;\\n\\n    function totalInternalSupply() public view returns (uint256) {\\n        return _totalInternalSupply;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function internalBalanceOf(address account) public view returns (uint256) {\\n        return _internalBalances[account];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.add(amount);\\n        _totalInternalSupply = _totalInternalSupply.add(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].add((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        weth.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _totalInternalSupply = _totalInternalSupply.sub(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].sub((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        weth.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _update(uint256 _userBoostPower) internal {\\n        uint256 oldInternalBalance = _internalBalances[msg.sender];\\n        uint256 newInternalBalance = _balances[msg.sender].mul(_userBoostPower.add(1e18)).div(1e18);\\n        _internalBalances[msg.sender] = newInternalBalance;\\n        _totalInternalSupply = _totalInternalSupply.sub(oldInternalBalance).add(newInternalBalance);\\n    }\\n}\\n\\ninterface IHayekPlate {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function getFeatureAddr() external returns(address);\\n}\\n\\ninterface IHayekPlateCustomData {\\n    function getTokenIdBoostPower(uint256 tokenId) external view returns(uint256);\\n}\\n\\ncontract HayekPlateWrapper {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlate; \\n\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    mapping(address => uint256[]) private _ownedTokens;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => uint256) private _ownedBoostPower;\\n    mapping (uint256 => address) private _tokenOwner;\\n    \\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function totalNFTSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function stakePlate(uint256 tokenId) public virtual {\\n        require(msg.sender == hayekPlate.ownerOf(tokenId), 'This account is not owner');\\n        _tokenOwner[tokenId] = msg.sender;\\n        _addTokenToOwnerEnumeration(msg.sender, tokenId);\\n        _addTokenToAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] += _plateBoostPower;\\n        hayekPlate.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) public virtual {\\n        require(msg.sender == _tokenOwner[tokenId], 'This account is not owner');\\n        _removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] -= _plateBoostPower;\\n        hayekPlate.transfer(msg.sender, tokenId);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        _ownedTokens[from].pop();\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function getAccountBoostPower(address account) public view returns(uint256){\\n        return _ownedBoostPower[account];\\n    }\\n\\n    function getTokenIdBoostPower(uint256 tokenId) internal returns(uint256){\\n        address customDataAddr = hayekPlate.getFeatureAddr();\\n        IHayekPlateCustomData hayekPlateCustomData = IHayekPlateCustomData(customDataAddr);\\n        return hayekPlateCustomData.getTokenIdBoostPower(tokenId);\\n    }\\n\\n    function getStakedTokenIds(address account) public view returns(uint256[] memory){\\n        return _ownedTokens[account];\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external \\n        returns (bytes4) \\n    {\\n        // Shh\\n        return _ERC721_RECEIVED;\\n    }\\n}\\n\\ncontract HCCWETHPool is HayekPlateWrapper, WETHWrapper, IRewardDistributionRecipient {\\n    IERC20 public hayekCash;\\n    uint256 public DURATION = 10 days;\\n    uint256 public starttime;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public deposits;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event PlateStaked(address indexed user, uint256 tokenId);\\n    event PlateWithdrawn(address indexed user, uint256 tokenId);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        address hayekCash_,\\n        address weth_,\\n        address hayekPlate_,\\n        uint256 starttime_\\n    ) public {\\n        hayekCash = IERC20(hayekCash_);\\n        weth = IERC20(weth_);\\n        hayekPlate = IHayekPlate(hayekPlate_);\\n        starttime = starttime_;\\n    }\\n\\n    modifier checkStart() {\\n        require(block.timestamp >= starttime, 'HCCWETHPool: not start');\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalInternalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalInternalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            internalBalanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function stakePlate(uint256 tokenId) \\n        public \\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCWETHPool: Invalid tokenId');\\n        super.stakePlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateStaked(msg.sender, tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCWETHPool: Invalid tokenId');\\n        super.withdrawPlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateWithdrawn(msg.sender, tokenId);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCWETHPool: Cannot stake 0');\\n        uint256 newDeposit = deposits[msg.sender].add(amount);\\n        require(\\n            newDeposit <= 10e18,\\n            'HCCWETHPool: deposit amount exceeds maximum 10'\\n        );\\n        deposits[msg.sender] = newDeposit;\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.stake(amount, userBoostPower);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCWETHPool: Cannot withdraw 0');\\n        deposits[msg.sender] = deposits[msg.sender].sub(amount);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.withdraw(amount, userBoostPower);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkStart {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            hayekCash.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp > starttime) {\\n            if (block.timestamp >= periodFinish) {\\n                rewardRate = reward.div(DURATION);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(rewardRate);\\n                rewardRate = reward.add(leftover).div(DURATION);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            rewardRate = reward.div(DURATION);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(reward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardDistributionRecipient.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nabstract contract IRewardDistributionRecipient is Ownable {\\n    address public rewardDistribution;\\n\\n    function notifyRewardAmount(uint256 reward) external virtual;\\n\\n    modifier onlyRewardDistribution() {\\n        require(\\n            _msgSender() == rewardDistribution,\\n            'Caller is not reward distribution'\\n        );\\n        _;\\n    }\\n\\n    function setRewardDistribution(address _rewardDistribution)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        rewardDistribution = _rewardDistribution;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDistributor.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface IDistributor {\\n    function distribute() external;\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/HCCDAIPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: HAYEKCASHRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n// File: contracts/IRewardDistributionRecipient.sol\\n\\nimport '../interfaces/IRewardDistributionRecipient.sol';\\n\\ncontract DAIWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public dai;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _totalInternalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _internalBalances;\\n\\n    function totalInternalSupply() public view returns (uint256) {\\n        return _totalInternalSupply;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function internalBalanceOf(address account) public view returns (uint256) {\\n        return _internalBalances[account];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.add(amount);\\n        _totalInternalSupply = _totalInternalSupply.add(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].add((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        dai.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _totalInternalSupply = _totalInternalSupply.sub(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].sub((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        dai.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _update(uint256 _userBoostPower) internal {\\n        uint256 oldInternalBalance = _internalBalances[msg.sender];\\n        uint256 newInternalBalance = _balances[msg.sender].mul(_userBoostPower.add(1e18)).div(1e18);\\n        _internalBalances[msg.sender] = newInternalBalance;\\n        _totalInternalSupply = _totalInternalSupply.sub(oldInternalBalance).add(newInternalBalance);\\n    }\\n}\\n\\ninterface IHayekPlate {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function getFeatureAddr() external returns(address);\\n}\\n\\ninterface IHayekPlateCustomData {\\n    function getTokenIdBoostPower(uint256 tokenId) external view returns(uint256);\\n}\\n\\ncontract HayekPlateWrapper {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlate;\\n    \\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    mapping(address => uint256[]) private _ownedTokens;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => uint256) private _ownedBoostPower;\\n    mapping (uint256 => address) private _tokenOwner;\\n    \\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function totalNFTSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function stakePlate(uint256 tokenId) public virtual {\\n        require(msg.sender == hayekPlate.ownerOf(tokenId), 'This account is not owner');\\n        _tokenOwner[tokenId] = msg.sender;\\n        _addTokenToOwnerEnumeration(msg.sender, tokenId);\\n        _addTokenToAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] += _plateBoostPower;\\n        hayekPlate.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) public virtual {\\n        require(msg.sender == _tokenOwner[tokenId], 'This account is not owner');\\n        _removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] -= _plateBoostPower;\\n        hayekPlate.transfer(msg.sender, tokenId);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        _ownedTokens[from].pop();\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function getAccountBoostPower(address account) public view returns(uint256){\\n        return _ownedBoostPower[account];\\n    }\\n\\n    function getStakedTokenIds(address account) public view returns(uint256[] memory){\\n        return _ownedTokens[account];\\n    }\\n\\n    function getTokenIdBoostPower(uint256 tokenId) internal returns(uint256){\\n        address customDataAddr = hayekPlate.getFeatureAddr();\\n        IHayekPlateCustomData hayekPlateCustomData = IHayekPlateCustomData(customDataAddr);\\n        return hayekPlateCustomData.getTokenIdBoostPower(tokenId);\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external \\n        returns (bytes4) \\n    {\\n        // Shh\\n        return _ERC721_RECEIVED;\\n    }\\n}\\n\\ncontract HCCDAIPool is HayekPlateWrapper, DAIWrapper, IRewardDistributionRecipient {\\n    IERC20 public hayekCash;\\n    uint256 public DURATION = 10 days;\\n    uint256 public starttime;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public deposits;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event PlateStaked(address indexed user, uint256 tokenId);\\n    event PlateWithdrawn(address indexed user, uint256 tokenId);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        address hayekCash_,\\n        address dai_,\\n        address hayekPlate_,\\n        uint256 starttime_\\n    ) public {\\n        hayekCash = IERC20(hayekCash_);\\n        dai = IERC20(dai_);\\n        hayekPlate = IHayekPlate(hayekPlate_);\\n        starttime = starttime_;\\n    }\\n\\n    modifier checkStart() {\\n        require(block.timestamp >= starttime, 'HCCDAIPool: not start');\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalInternalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalInternalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            internalBalanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function stakePlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCDAIPool: Invalid tokenId');\\n        super.stakePlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateStaked(msg.sender, tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCDAIPool: Invalid tokenId');\\n        super.withdrawPlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateWithdrawn(msg.sender, tokenId);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCDAIPool: Cannot stake 0');\\n        uint256 newDeposit = deposits[msg.sender].add(amount);\\n        require(\\n            newDeposit <= 20000e18,\\n            'HCCDAIPool: deposit amount exceeds maximum 20000'\\n        );\\n        deposits[msg.sender] = newDeposit;\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.stake(amount, userBoostPower);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCDAIPool: Cannot withdraw 0');\\n        deposits[msg.sender] = deposits[msg.sender].sub(amount);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.withdraw(amount, userBoostPower);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkStart {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            hayekCash.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp > starttime) {\\n            if (block.timestamp >= periodFinish) {\\n                rewardRate = reward.div(DURATION);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(rewardRate);\\n                rewardRate = reward.add(leftover).div(DURATION);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            rewardRate = reward.div(DURATION);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(reward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Distributor.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.6.0;\\n\\nimport './interfaces/IDistributor.sol';\\n\\ncontract Distributor {\\n    IDistributor[] public distributors;\\n\\n    constructor(IDistributor[] memory _distributors) public {\\n        distributors = _distributors;\\n    }\\n\\n    function distribute() public {\\n        for (uint256 i = 0; i < distributors.length; i++) {\\n            distributors[i].distribute();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/HCCUSDTPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: HAYEKCASHRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n// File: contracts/IRewardDistributionRecipient.sol\\n\\nimport '../interfaces/IRewardDistributionRecipient.sol';\\n\\ncontract USDTWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public usdt;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _totalInternalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _internalBalances;\\n\\n    function totalInternalSupply() public view returns (uint256) {\\n        return _totalInternalSupply;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function internalBalanceOf(address account) public view returns (uint256) {\\n        return _internalBalances[account];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.add(amount);\\n        _totalInternalSupply = _totalInternalSupply.add(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].add((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        usdt.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _totalInternalSupply = _totalInternalSupply.sub(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].sub((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        usdt.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _update(uint256 _userBoostPower) internal {\\n        uint256 oldInternalBalance = _internalBalances[msg.sender];\\n        uint256 newInternalBalance = _balances[msg.sender].mul(_userBoostPower.add(1e18)).div(1e18);\\n        _internalBalances[msg.sender] = newInternalBalance;\\n        _totalInternalSupply = _totalInternalSupply.sub(oldInternalBalance).add(newInternalBalance);\\n    }\\n}\\n\\ninterface IHayekPlate {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function getFeatureAddr() external returns(address);\\n}\\n\\ninterface IHayekPlateCustomData {\\n    function getTokenIdBoostPower(uint256 tokenId) external view returns(uint256);\\n}\\n\\ncontract HayekPlateWrapper {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlate; \\n    \\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    mapping(address => uint256[]) private _ownedTokens;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => uint256) private _ownedBoostPower;\\n    mapping (uint256 => address) private _tokenOwner;\\n    \\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function totalNFTSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function stakePlate(uint256 tokenId) public virtual {\\n        require(msg.sender == hayekPlate.ownerOf(tokenId), 'This account is not owner');\\n        _tokenOwner[tokenId] = msg.sender;\\n        _addTokenToOwnerEnumeration(msg.sender, tokenId);\\n        _addTokenToAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] += _plateBoostPower;\\n        hayekPlate.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) public virtual {\\n        require(msg.sender == _tokenOwner[tokenId], 'This account is not owner');\\n        _removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] -= _plateBoostPower;\\n        hayekPlate.transfer(msg.sender, tokenId);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        _ownedTokens[from].pop();\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function getAccountBoostPower(address account) public view returns(uint256){\\n        return _ownedBoostPower[account];\\n    }\\n\\n    function getStakedTokenIds(address account) public view returns(uint256[] memory){\\n        return _ownedTokens[account];\\n    }\\n\\n    function getTokenIdBoostPower(uint256 tokenId) internal returns(uint256){\\n        address customDataAddr = hayekPlate.getFeatureAddr();\\n        IHayekPlateCustomData hayekPlateCustomData = IHayekPlateCustomData(customDataAddr);\\n        return hayekPlateCustomData.getTokenIdBoostPower(tokenId);\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external \\n        returns (bytes4) \\n    {\\n        // Shh\\n        return _ERC721_RECEIVED;\\n    }\\n}\\n\\ncontract HCCUSDTPool is HayekPlateWrapper, USDTWrapper, IRewardDistributionRecipient {\\n    IERC20 public hayekCash;\\n    uint256 public DURATION = 10 days;\\n    uint256 public starttime;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public deposits;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event PlateStaked(address indexed user, uint256 tokenId);\\n    event PlateWithdrawn(address indexed user, uint256 tokenId);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        address hayekCash_,\\n        address usdt_,\\n        address hayekPlate_,\\n        uint256 starttime_\\n    ) public {\\n        hayekCash = IERC20(hayekCash_);\\n        usdt = IERC20(usdt_);\\n        hayekPlate = IHayekPlate(hayekPlate_);\\n        starttime = starttime_;\\n    }\\n\\n    modifier checkStart() {\\n        require(block.timestamp >= starttime, 'HCCUSDTPool: not start');\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalInternalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalInternalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            internalBalanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function stakePlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCUSDTPool: Invalid tokenId');\\n        super.stakePlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateStaked(msg.sender, tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCUSDTPool: Invalid tokenId');\\n        super.withdrawPlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateWithdrawn(msg.sender, tokenId);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCUSDTPool: Cannot stake 0');\\n        uint256 newDeposit = deposits[msg.sender].add(amount);\\n        require(\\n            newDeposit <= 20000e6,\\n            'HCCUSDTPool: deposit amount exceeds maximum 20000'\\n        );\\n        deposits[msg.sender] = newDeposit;\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.stake(amount, userBoostPower);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCUSDTPool: Cannot withdraw 0');\\n        deposits[msg.sender] = deposits[msg.sender].sub(amount);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.withdraw(amount, userBoostPower);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkStart {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            hayekCash.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp > starttime) {\\n            if (block.timestamp >= periodFinish) {\\n                rewardRate = reward.div(DURATION);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(rewardRate);\\n                rewardRate = reward.add(leftover).div(DURATION);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            rewardRate = reward.div(DURATION);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(reward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/HCCUSDCPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: HAYEKCASHRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n// File: contracts/IRewardDistributionRecipient.sol\\n\\nimport '../interfaces/IRewardDistributionRecipient.sol';\\n\\ncontract USDCWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public usdc;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _totalInternalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _internalBalances;\\n\\n    function totalInternalSupply() public view returns (uint256) {\\n        return _totalInternalSupply;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function internalBalanceOf(address account) public view returns (uint256) {\\n        return _internalBalances[account];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.add(amount);\\n        _totalInternalSupply = _totalInternalSupply.add(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].add((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        usdc.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _totalInternalSupply = _totalInternalSupply.sub(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].sub((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        usdc.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _update(uint256 _userBoostPower) internal {\\n        uint256 oldInternalBalance = _internalBalances[msg.sender];\\n        uint256 newInternalBalance = _balances[msg.sender].mul(_userBoostPower.add(1e18)).div(1e18);\\n        _internalBalances[msg.sender] = newInternalBalance;\\n        _totalInternalSupply = _totalInternalSupply.sub(oldInternalBalance).add(newInternalBalance);\\n    }\\n}\\n\\ninterface IHayekPlate {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function getFeatureAddr() external returns(address);\\n}\\n\\ninterface IHayekPlateCustomData {\\n    function getTokenIdBoostPower(uint256 tokenId) external view returns(uint256);\\n}\\n\\ncontract HayekPlateWrapper {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlate; \\n\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    mapping(address => uint256[]) private _ownedTokens;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => uint256) private _ownedBoostPower;\\n    mapping (uint256 => address) private _tokenOwner;\\n    \\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function totalNFTSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function stakePlate(uint256 tokenId) public virtual {\\n        require(msg.sender == hayekPlate.ownerOf(tokenId), 'This account is not owner');\\n        _tokenOwner[tokenId] = msg.sender;\\n        _addTokenToOwnerEnumeration(msg.sender, tokenId);\\n        _addTokenToAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] += _plateBoostPower;\\n        hayekPlate.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) public virtual {\\n        require(msg.sender == _tokenOwner[tokenId], 'This account is not owner');\\n        _removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] -= _plateBoostPower;\\n        hayekPlate.transfer(msg.sender, tokenId);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        _ownedTokens[from].pop();\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function getAccountBoostPower(address account) public view returns(uint256){\\n        return _ownedBoostPower[account];\\n    }\\n\\n    function getTokenIdBoostPower(uint256 tokenId) internal returns(uint256){\\n        address customDataAddr = hayekPlate.getFeatureAddr();\\n        IHayekPlateCustomData hayekPlateCustomData = IHayekPlateCustomData(customDataAddr);\\n        return hayekPlateCustomData.getTokenIdBoostPower(tokenId);\\n    }\\n\\n    function getStakedTokenIds(address account) public view returns(uint256[] memory){\\n        return _ownedTokens[account];\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external \\n        returns (bytes4) \\n    {\\n        // Shh\\n        return _ERC721_RECEIVED;\\n    }\\n}\\n\\ncontract HCCUSDCPool is HayekPlateWrapper, USDCWrapper, IRewardDistributionRecipient {\\n    IERC20 public hayekCash;\\n    uint256 public DURATION = 10 days;\\n    uint256 public starttime;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public deposits;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event PlateStaked(address indexed user, uint256 tokenId);\\n    event PlateWithdrawn(address indexed user, uint256 tokenId);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        address hayekCash_,\\n        address usdc_,\\n        address hayekPlate_,\\n        uint256 starttime_\\n    ) public {\\n        hayekCash = IERC20(hayekCash_);\\n        usdc = IERC20(usdc_);\\n        hayekPlate = IHayekPlate(hayekPlate_);\\n        starttime = starttime_;\\n    }\\n\\n    modifier checkStart() {\\n        require(block.timestamp >= starttime, 'HCCUSDCPool: not start');\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalInternalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalInternalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            internalBalanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function stakePlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCUSDCPool: Invalid tokenId');\\n        super.stakePlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateStaked(msg.sender, tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCUSDCPool: Invalid tokenId');\\n        super.withdrawPlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateWithdrawn(msg.sender, tokenId);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCUSDCPool: Cannot stake 0');\\n        uint256 newDeposit = deposits[msg.sender].add(amount);\\n        require(\\n            newDeposit <= 20000e6,\\n            'HCCUSDCPool: deposit amount exceeds maximum 20000'\\n        );\\n        deposits[msg.sender] = newDeposit;\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.stake(amount, userBoostPower);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCUSDCPool: Cannot withdraw 0');\\n        deposits[msg.sender] = deposits[msg.sender].sub(amount);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.withdraw(amount, userBoostPower);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkStart {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            hayekCash.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp > starttime) {\\n            if (block.timestamp >= periodFinish) {\\n                rewardRate = reward.div(DURATION);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(rewardRate);\\n                rewardRate = reward.add(leftover).div(DURATION);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            rewardRate = reward.div(DURATION);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(reward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/HCCUNIPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: HAYEKCASHRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n// File: contracts/IRewardDistributionRecipient.sol\\n\\nimport '../interfaces/IRewardDistributionRecipient.sol';\\n\\ncontract UNIWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public uni;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _totalInternalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _internalBalances;\\n\\n    function totalInternalSupply() public view returns (uint256) {\\n        return _totalInternalSupply;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function internalBalanceOf(address account) public view returns (uint256) {\\n        return _internalBalances[account];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.add(amount);\\n        _totalInternalSupply = _totalInternalSupply.add(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].add((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        uni.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _totalInternalSupply = _totalInternalSupply.sub(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].sub((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        uni.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _update(uint256 _userBoostPower) internal {\\n        uint256 oldInternalBalance = _internalBalances[msg.sender];\\n        uint256 newInternalBalance = _balances[msg.sender].mul(_userBoostPower.add(1e18)).div(1e18);\\n        _internalBalances[msg.sender] = newInternalBalance;\\n        _totalInternalSupply = _totalInternalSupply.sub(oldInternalBalance).add(newInternalBalance);\\n    }\\n}\\n\\ninterface IHayekPlate {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function getFeatureAddr() external returns(address);\\n}\\n\\ninterface IHayekPlateCustomData {\\n    function getTokenIdBoostPower(uint256 tokenId) external view returns(uint256);\\n}\\n\\ncontract HayekPlateWrapper {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlate; \\n\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    mapping(address => uint256[]) private _ownedTokens;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => uint256) private _ownedBoostPower;\\n    mapping (uint256 => address) private _tokenOwner;\\n    \\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function totalNFTSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function stakePlate(uint256 tokenId) public virtual {\\n        require(msg.sender == hayekPlate.ownerOf(tokenId), 'This account is not owner');\\n        _tokenOwner[tokenId] = msg.sender;\\n        _addTokenToOwnerEnumeration(msg.sender, tokenId);\\n        _addTokenToAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] += _plateBoostPower;\\n        hayekPlate.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) public virtual {\\n        require(msg.sender == _tokenOwner[tokenId], 'This account is not owner');\\n        _removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] -= _plateBoostPower;\\n        hayekPlate.transfer(msg.sender, tokenId);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        _ownedTokens[from].pop();\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function getAccountBoostPower(address account) public view returns(uint256){\\n        return _ownedBoostPower[account];\\n    }\\n\\n    function getTokenIdBoostPower(uint256 tokenId) internal returns(uint256){\\n        address customDataAddr = hayekPlate.getFeatureAddr();\\n        IHayekPlateCustomData hayekPlateCustomData = IHayekPlateCustomData(customDataAddr);\\n        return hayekPlateCustomData.getTokenIdBoostPower(tokenId);\\n    }\\n\\n    function getStakedTokenIds(address account) public view returns(uint256[] memory){\\n        return _ownedTokens[account];\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external \\n        returns (bytes4) \\n    {\\n        // Shh\\n        return _ERC721_RECEIVED;\\n    }\\n}\\n\\ncontract HCCUNIPool is HayekPlateWrapper, UNIWrapper, IRewardDistributionRecipient {\\n    IERC20 public hayekCash;\\n    uint256 public DURATION = 10 days;\\n    uint256 public starttime;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public deposits;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event PlateStaked(address indexed user, uint256 tokenId);\\n    event PlateWithdrawn(address indexed user, uint256 tokenId);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        address hayekCash_,\\n        address uni_,\\n        address hayekPlate_,\\n        uint256 starttime_\\n    ) public {\\n        hayekCash = IERC20(hayekCash_);\\n        uni = IERC20(uni_);\\n        hayekPlate = IHayekPlate(hayekPlate_);\\n        starttime = starttime_;\\n    }\\n\\n    modifier checkStart() {\\n        require(block.timestamp >= starttime, 'HCCUNIPool: not start');\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalInternalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalInternalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            internalBalanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function stakePlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCUNIPool: Invalid tokenId');\\n        super.stakePlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateStaked(msg.sender, tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'HCCUNIPool: Invalid tokenId');\\n        super.withdrawPlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateWithdrawn(msg.sender, tokenId);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCUNIPool: Cannot stake 0');\\n        uint256 newDeposit = deposits[msg.sender].add(amount);\\n        require(\\n            newDeposit <= 1000e18,\\n            'HCCUNIPool: deposit amount exceeds maximum 1000'\\n        );\\n        deposits[msg.sender] = newDeposit;\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.stake(amount, userBoostPower);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'HCCUNIPool: Cannot withdraw 0');\\n        deposits[msg.sender] = deposits[msg.sender].sub(amount);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.withdraw(amount, userBoostPower);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkStart {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            hayekCash.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp > starttime) {\\n            if (block.timestamp >= periodFinish) {\\n                rewardRate = reward.div(DURATION);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(rewardRate);\\n                rewardRate = reward.add(leftover).div(DURATION);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            rewardRate = reward.div(DURATION);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(reward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/DAIHCSLPTokenSharePool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: HAYEKCASHRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n// File: contracts/IRewardDistributionRecipient.sol\\n\\nimport '../interfaces/IRewardDistributionRecipient.sol';\\n\\nimport '../token/LPTokenWrapper.sol';\\n\\ninterface IHayekPlate {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function getFeatureAddr() external returns(address);\\n}\\n\\ninterface IHayekPlateCustomData {\\n    function getTokenIdBoostPower(uint256 tokenId) external view returns(uint256);\\n}\\n\\ncontract HayekPlateWrapper {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlate; \\n\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    mapping(address => uint256[]) private _ownedTokens;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => uint256) private _ownedBoostPower;\\n    mapping (uint256 => address) private _tokenOwner;\\n    \\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function totalNFTSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function stakePlate(uint256 tokenId) public virtual {\\n        require(msg.sender == hayekPlate.ownerOf(tokenId), 'This account is not owner');\\n        _tokenOwner[tokenId] = msg.sender;\\n        _addTokenToOwnerEnumeration(msg.sender, tokenId);\\n        _addTokenToAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] += _plateBoostPower;\\n        hayekPlate.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) public virtual {\\n        require(msg.sender == _tokenOwner[tokenId], 'This account is not owner');\\n        _removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] -= _plateBoostPower;\\n        hayekPlate.transfer(msg.sender, tokenId);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        _ownedTokens[from].pop();\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function getAccountBoostPower(address account) public view returns(uint256){\\n        return _ownedBoostPower[account];\\n    }\\n\\n    function getStakedTokenIds(address account) public view returns(uint256[] memory){\\n        return _ownedTokens[account];\\n    }\\n\\n    function getTokenIdBoostPower(uint256 tokenId) internal returns(uint256){\\n        address customDataAddr = hayekPlate.getFeatureAddr();\\n        IHayekPlateCustomData hayekPlateCustomData = IHayekPlateCustomData(customDataAddr);\\n        return hayekPlateCustomData.getTokenIdBoostPower(tokenId);\\n    }\\n    \\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external \\n        returns (bytes4) \\n    {\\n        // Shh\\n        return _ERC721_RECEIVED;\\n    }\\n}\\n\\ncontract DAIHCSLPTokenSharePool is\\n    LPTokenWrapper,\\n    HayekPlateWrapper,\\n    IRewardDistributionRecipient\\n{\\n    IERC20 public hayekShare;\\n    uint256 public DURATION = 365 days;\\n\\n    uint256 public starttime;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event PlateStaked(address indexed user, uint256 tokenId);\\n    event PlateWithdrawn(address indexed user, uint256 tokenId);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        address hayekShare_,\\n        address lptoken_,\\n        address hayekPlate_,\\n        uint256 starttime_\\n    ) public {\\n        hayekShare = IERC20(hayekShare_);\\n        lpt = IERC20(lptoken_);\\n        hayekPlate = IHayekPlate(hayekPlate_);\\n        starttime = starttime_;\\n    }\\n\\n    modifier checkStart() {\\n        require(\\n            block.timestamp >= starttime,\\n            'DAIHCSLPTokenSharePool: not start'\\n        );\\n        _;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalInternalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalInternalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            internalBalanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function stakePlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'DAIHCSLPTokenSharePool: Invalid tokenId');\\n        super.stakePlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateStaked(msg.sender, tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(tokenId > 0, 'DAIHCSLPTokenSharePool: Invalid tokenId');\\n        super.withdrawPlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateWithdrawn(msg.sender, tokenId);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'DAIHCSLPTokenSharePool: Cannot stake 0');\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.stake(amount, userBoostPower);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, 'DAIHCSLPTokenSharePool: Cannot withdraw 0');\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.withdraw(amount, userBoostPower);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkStart {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            hayekShare.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp > starttime) {\\n            if (block.timestamp >= periodFinish) {\\n                rewardRate = reward.div(DURATION);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(rewardRate);\\n                rewardRate = reward.add(leftover).div(DURATION);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            rewardRate = reward.div(DURATION);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(reward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/LPTokenWrapper.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ncontract LPTokenWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public lpt;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _totalInternalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _internalBalances;\\n\\n    function totalInternalSupply() public view returns (uint256) {\\n        return _totalInternalSupply;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function internalBalanceOf(address account) public view returns (uint256) {\\n        return _internalBalances[account];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.add(amount);\\n        _totalInternalSupply = _totalInternalSupply.add(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].add((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        lpt.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount, uint256 userBoostPower) internal {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _totalInternalSupply = _totalInternalSupply.sub(amount.mul(userBoostPower.add(1e18)).div(1e18));\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _internalBalances[msg.sender] = _internalBalances[msg.sender].sub((amount.mul(userBoostPower.add(1e18)).div(1e18)));\\n        lpt.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _update(uint256 _userBoostPower) internal {\\n        uint256 oldInternalBalance = _internalBalances[msg.sender];\\n        uint256 newInternalBalance = _balances[msg.sender].mul(_userBoostPower.add(1e18)).div(1e18);\\n        _internalBalances[msg.sender] = newInternalBalance;\\n        _totalInternalSupply = _totalInternalSupply.sub(oldInternalBalance).add(newInternalBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/DAIHCCLPTokenSharePool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: HAYEKCASHRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\nimport '@openzeppelin/contracts/math/Math.sol';\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n// File: contracts/IRewardDistributionRecipient.sol\\n\\nimport '../interfaces/IRewardDistributionRecipient.sol';\\n\\nimport '../token/LPTokenWrapper.sol';\\n\\ninterface IHayekPlate {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function getFeatureAddr() external returns(address);\\n}\\n\\ninterface IHayekPlateCustomData {\\n    function getTokenIdBoostPower(uint256 tokenId) external view returns(uint256);\\n}\\n\\ncontract HayekPlateWrapper {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlate; \\n\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n    mapping(address => uint256[]) private _ownedTokens;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => uint256) private _ownedBoostPower;\\n    mapping (uint256 => address) private _tokenOwner;\\n    \\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function totalNFTSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function stakePlate(uint256 tokenId) public virtual {\\n        require(msg.sender == hayekPlate.ownerOf(tokenId), 'This account is not owner');\\n        _tokenOwner[tokenId] = msg.sender;\\n        _addTokenToOwnerEnumeration(msg.sender, tokenId);\\n        _addTokenToAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] += _plateBoostPower;\\n        hayekPlate.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) public virtual {\\n        require(msg.sender == _tokenOwner[tokenId], 'This account is not owner');\\n        _removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        uint256 _plateBoostPower = getTokenIdBoostPower(tokenId);\\n        _ownedBoostPower[msg.sender] -= _plateBoostPower;\\n        hayekPlate.transfer(msg.sender, tokenId);\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        _ownedTokens[from].pop();\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function getAccountBoostPower(address account) public view returns(uint256){\\n        return _ownedBoostPower[account];\\n    }\\n\\n    function getStakedTokenIds(address account) public view returns(uint256[] memory){\\n        return _ownedTokens[account];\\n    }\\n\\n    function getTokenIdBoostPower(uint256 tokenId) internal returns(uint256){\\n        address customDataAddr = hayekPlate.getFeatureAddr();\\n        IHayekPlateCustomData hayekPlateCustomData = IHayekPlateCustomData(customDataAddr);\\n        return hayekPlateCustomData.getTokenIdBoostPower(tokenId);\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external \\n        returns (bytes4) \\n    {\\n        // Shh\\n        return _ERC721_RECEIVED;\\n    }\\n}\\n\\ncontract DAIHCCLPTokenSharePool is\\n    LPTokenWrapper,\\n    HayekPlateWrapper,\\n    IRewardDistributionRecipient\\n{\\n    IERC20 public hayekShare;\\n    uint256 public constant DURATION = 30 days;\\n\\n    uint256 public initreward = 18750 * 10**18; // 18750 Shares\\n    uint256 public starttime; // starttime\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event PlateStaked(address indexed user, uint256 tokenId);\\n    event PlateWithdrawn(address indexed user, uint256 tokenId);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        address hayekShare_,\\n        address lptoken_,\\n        address hayekPlate_,\\n        uint256 starttime_\\n    ) public {\\n        hayekShare = IERC20(hayekShare_);\\n        lpt = IERC20(lptoken_);\\n        hayekPlate = IHayekPlate(hayekPlate_);\\n        starttime = starttime_;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalInternalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalInternalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            internalBalanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function stakePlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkhalve\\n        checkStart\\n    {\\n        require(tokenId > 0, 'DAIHCCLPTokenSharePool: Invalid tokenId');\\n        super.stakePlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateStaked(msg.sender, tokenId);\\n    }\\n\\n    function withdrawPlate(uint256 tokenId) \\n        public\\n        override\\n        updateReward(msg.sender)\\n        checkhalve\\n        checkStart\\n    {\\n        require(tokenId > 0, 'DAIHCCLPTokenSharePool: Invalid tokenId');\\n        super.withdrawPlate(tokenId);\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        _update(userBoostPower);\\n        emit PlateWithdrawn(msg.sender, tokenId);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkhalve\\n        checkStart\\n    {\\n        require(amount > 0, 'Cannot stake 0');\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.stake(amount, userBoostPower);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        updateReward(msg.sender)\\n        checkhalve\\n        checkStart\\n    {\\n        require(amount > 0, 'Cannot withdraw 0');\\n        uint256 userBoostPower = getAccountBoostPower(msg.sender);\\n        super.withdraw(amount, userBoostPower);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) checkhalve checkStart {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            hayekShare.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    modifier checkhalve() {\\n        if (block.timestamp >= periodFinish) {\\n            initreward = initreward.mul(75).div(100);\\n            rewardRate = initreward.div(DURATION);\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(initreward);\\n        }\\n        _;\\n    }\\n\\n    modifier checkStart() {\\n        require(block.timestamp >= starttime, 'not start');\\n        _;\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp > starttime) {\\n            if (block.timestamp >= periodFinish) {\\n                rewardRate = reward.div(DURATION);\\n            } else {\\n                uint256 remaining = periodFinish.sub(block.timestamp);\\n                uint256 leftover = remaining.mul(rewardRate);\\n                rewardRate = reward.add(leftover).div(DURATION);\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(DURATION);\\n            emit RewardAdded(reward);\\n        } else {\\n            rewardRate = initreward.div(DURATION);\\n            lastUpdateTime = starttime;\\n            periodFinish = starttime.add(DURATION);\\n            emit RewardAdded(reward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/HayekPlateAirdropIssuer.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\ninterface IHayekPlate {\\n    function issueAirdrop(address to, uint256 tokenId) external;\\n}\\n\\ncontract HayekPlateAirdropIssuer {\\n    using SafeMath for uint256;\\n    IHayekPlate public hayekPlatel;\\n    struct AirdropPool {\\n        uint256 aID;\\n        uint256 bID;\\n        uint256 cID;\\n        uint256 dID;\\n        uint256 eID;\\n        uint256 fID;\\n        uint256 gID;\\n        uint256 hID;\\n\\n        uint256 aIDAmount;\\n        uint256 bIDAmount;\\n        uint256 cIDAmount;\\n        uint256 dIDAmount;\\n        uint256 eIDAmount;\\n        uint256 fIDAmount;\\n        uint256 gIDAmount;\\n        uint256 hIDAmount;\\n\\n        uint256 allAmount;\\n    }\\n\\n    uint256 public totolUnclaimed = 12705;\\n\\n    mapping(address => AirdropPool) private airdropRemaining;\\n    mapping(address => bool) private airdropPoolAddr;\\n\\n    constructor (IHayekPlate _hayekPlate, address[] memory airdropPools) public {\\n        hayekPlatel = _hayekPlate;\\n        for (uint256 i = 0; i < airdropPools.length; i++) {\\n            airdropRemaining[airdropPools[i]] = AirdropPool(\\n                i * 1 + 1,\\n                i * 20 + 20001, \\n                i * 40 + 30001, \\n                i * 80 + 40001, \\n                i * 160 + 50001, \\n                i * 320 + 60001, \\n                i * 640 + 70001, \\n                i * 1280+ 80001, \\n                1,20,40,80,160,320,640,1280,2541);\\n            airdropPoolAddr[airdropPools[i]] = true;\\n        }\\n    }\\n\\n    modifier isAirdropPool() {\\n        require(airdropPoolAddr[msg.sender], 'Not Airdrop');\\n        _;\\n    }\\n\\n    function claimONEPlate(address account) public isAirdropPool {\\n        AirdropPool storage airdropPool = airdropRemaining[msg.sender];\\n        uint256 newTokenId = rand(account, airdropPool);\\n        hayekPlatel.issueAirdrop(account, newTokenId);\\n        totolUnclaimed = totolUnclaimed.sub(1);\\n    }\\n\\n    function getTargetAirdropStatus(address _airdropPool) public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\n        AirdropPool storage airdropPool = airdropRemaining[_airdropPool];\\n        return (airdropPool.aIDAmount, airdropPool.bIDAmount, airdropPool.cIDAmount, airdropPool.dIDAmount, airdropPool.eIDAmount, airdropPool.fIDAmount, airdropPool.gIDAmount, airdropPool.hIDAmount, airdropPool.allAmount);\\n    }\\n\\n    function rand(address account, AirdropPool storage airdropPool) internal returns(uint256) {\\n        uint256 random = uint256(keccak256(abi.encode(block.difficulty, now, account, airdropPool.allAmount)));\\n        uint256 randomBase = random % airdropPool.allAmount;\\n        uint256 tokenId = 0;\\n        if (randomBase < airdropPool.aIDAmount) {\\n            tokenId = airdropPool.aID;\\n            airdropPool.aID = airdropPool.aID.add(1);\\n            airdropPool.aIDAmount = airdropPool.aIDAmount.sub(1);\\n        } else if (randomBase < (airdropPool.aIDAmount + airdropPool.bIDAmount)) {\\n            tokenId = airdropPool.bID;\\n            airdropPool.bID = airdropPool.bID.add(1);\\n            airdropPool.bIDAmount = airdropPool.bIDAmount.sub(1);\\n        } else if (randomBase < (airdropPool.aIDAmount + airdropPool.bIDAmount + airdropPool.cIDAmount)) {\\n            tokenId = airdropPool.cID;\\n            airdropPool.cID = airdropPool.cID.add(1);\\n            airdropPool.cIDAmount = airdropPool.cIDAmount.sub(1);\\n        } else if (randomBase < (airdropPool.aIDAmount + airdropPool.bIDAmount + airdropPool.cIDAmount + airdropPool.dIDAmount)) {\\n            tokenId = airdropPool.dID;\\n            airdropPool.dID = airdropPool.dID.add(1);\\n            airdropPool.dIDAmount = airdropPool.dIDAmount.sub(1);\\n        } else if (randomBase < (airdropPool.aIDAmount + airdropPool.bIDAmount + airdropPool.cIDAmount + airdropPool.dIDAmount + airdropPool.eIDAmount)) {\\n            tokenId = airdropPool.eID;\\n            airdropPool.eID = airdropPool.eID.add(1);\\n            airdropPool.eIDAmount = airdropPool.eIDAmount.sub(1);\\n        } else if (randomBase < (airdropPool.aIDAmount + airdropPool.bIDAmount + airdropPool.cIDAmount + airdropPool.dIDAmount + airdropPool.eIDAmount + airdropPool.fIDAmount)) {\\n            tokenId = airdropPool.fID;\\n            airdropPool.fID = airdropPool.fID.add(1);\\n            airdropPool.fIDAmount = airdropPool.fIDAmount.sub(1);\\n        } else if (randomBase < (airdropPool.aIDAmount + airdropPool.bIDAmount + airdropPool.cIDAmount + airdropPool.dIDAmount + airdropPool.eIDAmount + airdropPool.fIDAmount + airdropPool.gIDAmount)) {\\n            tokenId = airdropPool.gID;\\n            airdropPool.gID = airdropPool.gID.add(1);\\n            airdropPool.gIDAmount = airdropPool.gIDAmount.sub(1);\\n        } else if (randomBase < (airdropPool.aIDAmount + airdropPool.bIDAmount + airdropPool.cIDAmount + airdropPool.dIDAmount + airdropPool.eIDAmount + airdropPool.fIDAmount + airdropPool.gIDAmount + airdropPool.hIDAmount)) {\\n            tokenId = airdropPool.hID;\\n            airdropPool.hID = airdropPool.hID.add(1);\\n            airdropPool.hIDAmount = airdropPool.hIDAmount.sub(1);\\n        }\\n\\n        airdropPool.allAmount = airdropPool.allAmount.sub(1);\\n        return tokenId;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/HayekPlate.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol\\\";\\nimport './owner/Operator.sol';\\n\\npragma solidity ^0.6.0;\\n\\ncontract HayekPlate is ERC721Burnable, Operator {\\n    using SafeMath for uint256;\\n    address public nftFeature;\\n\\n    event FeatureAddrChanged(address indexed oldFeatureAddr, address indexed newFeatureAddr);\\n    event AirdropIssuerChanged(address indexed oldAirdropIssuer, address indexed newAirdropIssuer);\\n    event CoreProtocolChanged(address indexed oldCoreProtocol, address indexed newCoreProtocol);\\n\\n    address public airdropIssuer;\\n    address public coreProtocol;\\n\\n    constructor (address _nftFeature) public ERC721(\\\"Hayek-Money-NFT\\\", \\\"HayekNFT\\\") {\\n        nftFeature = _nftFeature;\\n    }\\n\\n    modifier onlyAirdropIssuer() {\\n        require(msg.sender == airdropIssuer, \\\"Not airdropIssuer\\\");\\n        _;\\n    }\\n\\n    modifier onlyCoreProtocol() {\\n        require(msg.sender == coreProtocol, \\\"Not coreProtocol\\\");\\n        _;\\n    }\\n\\n    function setAirdropIssuer(address _airdropIssuer) public onlyOperator {\\n        address oldAirdropIssuer = _airdropIssuer;\\n        airdropIssuer = _airdropIssuer;\\n        emit AirdropIssuerChanged(oldAirdropIssuer, airdropIssuer);\\n    }\\n\\n    function setCoreProtocol(address _coreProtocol) public onlyOperator {\\n        address oldCoreProtocol = coreProtocol;\\n        coreProtocol = _coreProtocol;\\n        emit CoreProtocolChanged(oldCoreProtocol, coreProtocol);\\n    }\\n\\n    function getOwnerAllNFT(address account) public view returns(uint256[] memory) {\\n        uint256 length = balanceOf(account);\\n        uint256[] memory allNFT = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            allNFT[i] = tokenOfOwnerByIndex(account, i);\\n        }\\n        return allNFT;\\n    }\\n\\n    function setFeatureAddr(address _nftFeature) public onlyOperator {\\n        address oldNFTFeature = nftFeature;\\n        nftFeature = _nftFeature;\\n        emit FeatureAddrChanged(oldNFTFeature, nftFeature);\\n    }\\n\\n    function getFeatureAddr() public view returns(address) {\\n        return nftFeature;\\n    }\\n\\n    function setBaseURI(string memory baseURI_) public onlyOperator {\\n        _setBaseURI(baseURI_);\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) public onlyOperator {\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    function mint(address to, uint256 tokenId)\\n        public\\n        onlyOperator\\n    {\\n        _mint(to, tokenId);\\n    }\\n\\n    function merge(address to, uint256 tokenId)\\n        public\\n        onlyCoreProtocol\\n    {\\n        _mint(to, tokenId);\\n    }\\n\\n    function issueAirdrop(address to, uint256 tokenId)\\n        public\\n        onlyAirdropIssuer\\n    {\\n        _mint(to, tokenId);\\n    }\\n\\n    function transfer(address to, uint256 tokenId)\\n        public\\n    {\\n        safeTransferFrom(msg.sender, to, tokenId);\\n    }\\n\\n    function batchTransfer(address to, uint256[] memory tokenId)\\n        public\\n    {\\n        for (uint256 i = 0; i < tokenId.length; i++) {\\n            safeTransferFrom(msg.sender, to, tokenId[i]);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/MockDai.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\\nimport '../owner/Operator.sol';\\n\\ncontract MockDai is ERC20Burnable, Operator {\\n    /**\\n     * @notice Constructs the OK Cash ERC-20 contract.\\n     */\\n    constructor() public ERC20('DAI', 'DAI') {\\n        _mint(msg.sender, 10000 * 10**18);\\n    }\\n\\n    /**\\n     * @notice Operator mints dino cash to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of dino cash to mint to\\n     * @return whether the process has been done\\n     */\\n    function mint(address recipient_, uint256 amount_)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n\\n        return balanceAfter > balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Share.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport './owner/Operator.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\\n\\ncontract Share is ERC20Burnable, Operator {\\n    constructor() public ERC20('HCS', 'HCS') {\\n        // Mints 1 Hayek Share to contract creator for initial Uniswap oracle deployment.\\n        // Will be burned after oracle deployment\\n        _mint(msg.sender, 1 * 10**18);\\n    }\\n\\n    /**\\n     * @notice Operator mints hayek cash to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of ok cash to mint to\\n     */\\n    function mint(address recipient_, uint256 amount_)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n        return balanceAfter >= balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override onlyOperator {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        super.burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Cash.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\\nimport './owner/Operator.sol';\\n\\ncontract Cash is ERC20Burnable, Operator {\\n    /**\\n     * @notice Constructs the Hayek Cash ERC-20 contract.\\n     */\\n    constructor() public ERC20('HCC', 'HCC') {\\n        // Mints 1 Hayek Cash to contract creator for initial Uniswap oracle deployment.\\n        // Will be burned after oracle deployment\\n        _mint(msg.sender, 1 * 10**18);\\n    }\\n\\n    //    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n    //        super._beforeTokenTransfer(from, to, amount);\\n    //        require(\\n    //            to != operator(),\\n    //            \\\"ok.cash: operator as a recipient is not allowed\\\"\\n    //        );\\n    //    }\\n\\n    /**\\n     * @notice Operator mints hayek cash to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of ok cash to mint to\\n     * @return whether the process has been done\\n     */\\n    function mint(address recipient_, uint256 amount_)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override onlyOperator {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        super.burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Bond.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.6.0;\\n\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract Bond is ERC20Burnable, Ownable, Operator {\\n    /**\\n     * @notice Constructs the Hayek Bond ERC-20 contract.\\n     */\\n    constructor() public ERC20(\\\"HCB\\\", \\\"HCB\\\") {}\\n\\n    /**\\n     * @notice Operator mints hayek bonds to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of ok bonds to mint to\\n     * @return whether the process has been done\\n     */\\n    function mint(address recipient_, uint256 amount_)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override onlyOperator {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        super.burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hayekCash_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hayekPlate_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starttime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PlateStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PlateWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountBoostPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hayekCash\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hayekPlate\",\"outputs\":[{\"internalType\":\"contract IHayekPlate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"internalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakePlate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInternalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNFTSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawPlate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HCCWETHPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006c055fc44cacada8b2c41b56419ebc1e066556f8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000623bbcb46b462c767b3005e88d4f8064ff0595d900000000000000000000000000000000000000000000000000000000601e4c80","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7979939e9de0f70c22b7adf9b09f88c1a78ba06853dba5105c8baa0c755d7108"}]}