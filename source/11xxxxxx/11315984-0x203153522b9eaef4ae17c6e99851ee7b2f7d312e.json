{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: bsl-1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\n\r\n// File: contracts/VaultParameters.sol\r\npragma solidity ^0.7.1;\r\n\r\n\r\n/**\r\n * @title Auth\r\n * @author Unit Protocol: Ivan Zakharov (@34x4p08)\r\n * @dev Manages USDP's system access\r\n **/\r\ncontract Auth {\r\n\r\n    // address of the the contract with vault parameters\r\n    VaultParameters public vaultParameters;\r\n\r\n    constructor(address _parameters) public {\r\n        vaultParameters = VaultParameters(_parameters);\r\n    }\r\n\r\n    // ensures tx's sender is a manager\r\n    modifier onlyManager() {\r\n        require(vaultParameters.isManager(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is able to modify the Vault\r\n    modifier hasVaultAccess() {\r\n        require(vaultParameters.canModifyVault(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is the Vault\r\n    modifier onlyVault() {\r\n        require(msg.sender == vaultParameters.vault(), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title VaultParameters\r\n * @author Unit Protocol: Ivan Zakharov (@34x4p08)\r\n **/\r\ncontract VaultParameters is Auth {\r\n\r\n    // map token to stability fee percentage; 3 decimals\r\n    mapping(address => uint) public stabilityFee;\r\n\r\n    // map token to liquidation fee percentage, 0 decimals\r\n    mapping(address => uint) public liquidationFee;\r\n\r\n    // map token to USDP mint limit\r\n    mapping(address => uint) public tokenDebtLimit;\r\n\r\n    // permissions to modify the Vault\r\n    mapping(address => bool) public canModifyVault;\r\n\r\n    // managers\r\n    mapping(address => bool) public isManager;\r\n\r\n    // enabled oracle types\r\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\r\n\r\n    // address of the Vault\r\n    address payable public vault;\r\n\r\n    // The foundation address\r\n    address public foundation;\r\n\r\n    /**\r\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\r\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\r\n     * hashed with Keccak-256.\r\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\r\n    **/\r\n    constructor(address payable _vault, address _foundation) public Auth(address(this)) {\r\n        require(_vault != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        require(_foundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        isManager[msg.sender] = true;\r\n        vault = _vault;\r\n        foundation = _foundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Grants and revokes manager's status of any address\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setManager(address who, bool permit) external onlyManager {\r\n        isManager[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the foundation address\r\n     * @param newFoundation The new foundation address\r\n     **/\r\n    function setFoundation(address newFoundation) external onlyManager {\r\n        require(newFoundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        foundation = newFoundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets ability to use token as the main collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\r\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\r\n     * @param usdpLimit The USDP token issue limit\r\n     * @param oracles The enables oracle types\r\n     **/\r\n    function setCollateral(\r\n        address asset,\r\n        uint stabilityFeeValue,\r\n        uint liquidationFeeValue,\r\n        uint usdpLimit,\r\n        uint[] calldata oracles\r\n    ) external onlyManager {\r\n        setStabilityFee(asset, stabilityFeeValue);\r\n        setLiquidationFee(asset, liquidationFeeValue);\r\n        setTokenDebtLimit(asset, usdpLimit);\r\n        for (uint i=0; i < oracles.length; i++) {\r\n            setOracleType(oracles[i], asset, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets a permission for an address to modify the Vault\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setVaultAccess(address who, bool permit) external onlyManager {\r\n        canModifyVault[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the year stability fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The stability fee percentage (3 decimals)\r\n     **/\r\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\r\n        stabilityFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The liquidation fee percentage (0 decimals)\r\n     **/\r\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\r\n        require(newValue <= 100, \"Unit Protocol: VALUE_OUT_OF_RANGE\");\r\n        liquidationFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Enables/disables oracle types\r\n     * @param _type The type of the oracle\r\n     * @param asset The address of the main collateral token\r\n     * @param enabled The control flag\r\n     **/\r\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\r\n        isOracleTypeEnabled[_type][asset] = enabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets USDP limit for a specific collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param limit The limit number\r\n     **/\r\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\r\n        tokenDebtLimit[asset] = limit;\r\n    }\r\n}\r\n\r\n// File: contracts/vault-managers/VaultManagerParameters.sol\r\npragma solidity ^0.7.1;\r\n\r\n\r\n/**\r\n * @title VaultManagerParameters\r\n * @author Unit Protocol: Ivan Zakharov (@34x4p08)\r\n **/\r\ncontract VaultManagerParameters is Auth {\r\n\r\n    // determines the minimum percentage of COL token part in collateral, 0 decimals\r\n    mapping(address => uint) public minColPercent;\r\n\r\n    // determines the maximum percentage of COL token part in collateral, 0 decimals\r\n    mapping(address => uint) public maxColPercent;\r\n\r\n    // map token to initial collateralization ratio; 0 decimals\r\n    mapping(address => uint) public initialCollateralRatio;\r\n\r\n    // map token to liquidation ratio; 0 decimals\r\n    mapping(address => uint) public liquidationRatio;\r\n\r\n    // map token to liquidation discount; 3 decimals\r\n    mapping(address => uint) public liquidationDiscount;\r\n\r\n    // map token to devaluation period in blocks\r\n    mapping(address => uint) public devaluationPeriod;\r\n\r\n    constructor(address _vaultParameters) public Auth(_vaultParameters) {}\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets ability to use token as the main collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\r\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\r\n     * @param initialCollateralRatioValue The initial collateralization ratio\r\n     * @param liquidationRatioValue The liquidation ratio\r\n     * @param liquidationDiscountValue The liquidation discount (3 decimals)\r\n     * @param devaluationPeriodValue The devaluation period in blocks\r\n     * @param usdpLimit The USDP token issue limit\r\n     * @param minColP The min percentage of COL value in position (0 decimals)\r\n     * @param maxColP The max percentage of COL value in position (0 decimals)\r\n     **/\r\n    function setCollateral(\r\n        address asset,\r\n        uint stabilityFeeValue,\r\n        uint liquidationFeeValue,\r\n        uint initialCollateralRatioValue,\r\n        uint liquidationRatioValue,\r\n        uint liquidationDiscountValue,\r\n        uint devaluationPeriodValue,\r\n        uint usdpLimit,\r\n        uint[] calldata oracles,\r\n        uint minColP,\r\n        uint maxColP\r\n    ) external onlyManager {\r\n        vaultParameters.setCollateral(asset, stabilityFeeValue, liquidationFeeValue, usdpLimit, oracles);\r\n        setInitialCollateralRatio(asset, initialCollateralRatioValue);\r\n        setLiquidationRatio(asset, liquidationRatioValue);\r\n        setDevaluationPeriod(asset, devaluationPeriodValue);\r\n        setLiquidationDiscount(asset, liquidationDiscountValue);\r\n        setColPartRange(asset, minColP, maxColP);\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the initial collateral ratio\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The collateralization ratio (0 decimals)\r\n     **/\r\n    function setInitialCollateralRatio(address asset, uint newValue) public onlyManager {\r\n        require(newValue != 0 && newValue <= 100, \"Unit Protocol: INCORRECT_COLLATERALIZATION_VALUE\");\r\n        initialCollateralRatio[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the liquidation ratio\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The liquidation ratio (0 decimals)\r\n     **/\r\n    function setLiquidationRatio(address asset, uint newValue) public onlyManager {\r\n        require(newValue != 0 && newValue >= initialCollateralRatio[asset], \"Unit Protocol: INCORRECT_COLLATERALIZATION_VALUE\");\r\n        liquidationRatio[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the liquidation discount\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The liquidation discount (3 decimals)\r\n     **/\r\n    function setLiquidationDiscount(address asset, uint newValue) public onlyManager {\r\n        require(newValue < 1e5, \"Unit Protocol: INCORRECT_DISCOUNT_VALUE\");\r\n        liquidationDiscount[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the devaluation period of collateral after liquidation\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The devaluation period in blocks\r\n     **/\r\n    function setDevaluationPeriod(address asset, uint newValue) public onlyManager {\r\n        require(newValue != 0, \"Unit Protocol: INCORRECT_DEVALUATION_VALUE\");\r\n        devaluationPeriod[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage range of the COL token part for specific collateral token\r\n     * @param asset The address of the main collateral token\r\n     * @param min The min percentage (0 decimals)\r\n     * @param max The max percentage (0 decimals)\r\n     **/\r\n    function setColPartRange(address asset, uint min, uint max) public onlyManager {\r\n        require(max <= 100 && min <= max, \"Unit Protocol: WRONG_RANGE\");\r\n        minColPercent[asset] = min;\r\n        maxColPercent[asset] = max;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"devaluationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxColPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minColPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setColPartRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatioValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscountValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devaluationPeriodValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"oracles\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minColP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxColP\",\"type\":\"uint256\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setDevaluationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setInitialCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLiquidationDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VaultManagerParameters","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b46f8cf42e504efe8bef895f848741daa55e9f1d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5e5f5fb430ac66ecd902cfde2f44dd1179926dc25981d1016302c507ffd92662"}]}