{"status":"1","message":"OK","result":[{"SourceCode":"// File: bridge-contracts/contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: bridge-contracts/contracts/upgradeable_contracts/Initializable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Initializable is EternalStorage {\r\n    bytes32 internal constant INITIALIZED = keccak256(abi.encodePacked(\"isInitialized\"));\r\n    bytes32 internal constant DEPLOYED_AT_BLOCK = keccak256(abi.encodePacked(\"deployedAtBlock\"));\r\n\r\n    function setInitialize() internal {\r\n        boolStorage[INITIALIZED] = true;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[INITIALIZED];\r\n    }\r\n\r\n    function deployedAtBlock() external view returns (uint256) {\r\n        return uintStorage[DEPLOYED_AT_BLOCK];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: bridge-contracts/contracts/upgradeable_contracts/Sacrifice.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Sacrifice {\r\n    constructor(address _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: bridge-contracts/contracts/upgradeable_contracts/Claimable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract Claimable {\r\n    bytes4 internal constant TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n\r\n    modifier validAddress(address _to) {\r\n        require(_to != address(0));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    function claimValues(address _token, address _to) internal {\r\n        if (_token == address(0)) {\r\n            claimNativeCoins(_to);\r\n        } else {\r\n            claimErc20Tokens(_token, _to);\r\n        }\r\n    }\r\n\r\n    function claimNativeCoins(address _to) internal {\r\n        uint256 value = address(this).balance;\r\n        if (!_to.send(value)) {\r\n            (new Sacrifice).value(value)(_to);\r\n        }\r\n    }\r\n\r\n    function claimErc20Tokens(address _token, address _to) internal {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        safeTransfer(_token, _to, balance);\r\n    }\r\n\r\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\r\n        bytes memory returnData;\r\n        bool returnDataResult;\r\n        bytes memory callData = abi.encodeWithSelector(TRANSFER, _to, _value);\r\n        assembly {\r\n            let result := call(gas, _token, 0x0, add(callData, 0x20), mload(callData), 0, 32)\r\n            returnData := mload(0)\r\n            returnDataResult := mload(0)\r\n\r\n            switch result\r\n                case 0 {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n\r\n        // Return data is optional\r\n        if (returnData.length > 0) {\r\n            require(returnDataResult);\r\n        }\r\n    }\r\n}\r\n\r\n// File: bridge-contracts/contracts/interfaces/IUpgradeabilityOwnerStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IUpgradeabilityOwnerStorage {\r\n    function upgradeabilityOwner() external view returns (address);\r\n}\r\n\r\n// File: bridge-contracts/contracts/upgradeable_contracts/Upgradeable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Upgradeable {\r\n    // Avoid using onlyUpgradeabilityOwner name to prevent issues with implementation from proxy contract\r\n    modifier onlyIfUpgradeabilityOwner() {\r\n        require(msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n}\r\n\r\n// File: bridge-contracts/contracts/libraries/Bytes.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\nlibrary Bytes {\r\n    function bytesToBytes32(bytes _bytes) internal pure returns (bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_bytes, 32))\r\n        }\r\n    }\r\n}\r\n\r\n// File: bridge-contracts/contracts/interfaces/IAMB.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IAMB {\r\n    function messageSender() external view returns (address);\r\n    function maxGasPerTx() external view returns (uint256);\r\n    function transactionHash() external view returns (bytes32);\r\n    function messageCallStatus(bytes32 _txHash) external view returns (bool);\r\n    function failedMessageDataHash(bytes32 _txHash) external view returns (bytes32);\r\n    function failedMessageReceiver(bytes32 _txHash) external view returns (address);\r\n    function failedMessageSender(bytes32 _txHash) external view returns (address);\r\n    function requireToPassMessage(address _contract, bytes _data, uint256 _gas) external;\r\n}\r\n\r\n// File: bridge-contracts/contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"owner\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(abi.encodePacked(\"owner\"))] = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/mediator/AMBMediator.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract AMBMediator is EternalStorage, Ownable {\r\n    bytes32 internal constant BRIDGE_CONTRACT = keccak256(abi.encodePacked(\"bridgeContract\"));\r\n    bytes32 internal constant MEDIATOR_CONTRACT = keccak256(abi.encodePacked(\"mediatorContract\"));\r\n    bytes32 internal constant REQUEST_GAS_LIMIT = keccak256(abi.encodePacked(\"requestGasLimit\"));\r\n\r\n    function setBridgeContract(address _bridgeContract) external onlyOwner {\r\n        _setBridgeContract(_bridgeContract);\r\n    }\r\n\r\n    function _setBridgeContract(address _bridgeContract) internal {\r\n        require(AddressUtils.isContract(_bridgeContract));\r\n        addressStorage[BRIDGE_CONTRACT] = _bridgeContract;\r\n    }\r\n\r\n    function bridgeContract() public view returns (IAMB) {\r\n        return IAMB(addressStorage[BRIDGE_CONTRACT]);\r\n    }\r\n\r\n    function setMediatorContractOnOtherSide(address _mediatorContract) external onlyOwner {\r\n        _setMediatorContractOnOtherSide(_mediatorContract);\r\n    }\r\n\r\n    function _setMediatorContractOnOtherSide(address _mediatorContract) internal {\r\n        addressStorage[MEDIATOR_CONTRACT] = _mediatorContract;\r\n    }\r\n\r\n    function mediatorContractOnOtherSide() public view returns (address) {\r\n        return addressStorage[MEDIATOR_CONTRACT];\r\n    }\r\n\r\n    function setRequestGasLimit(uint256 _requestGasLimit) external onlyOwner {\r\n        _setRequestGasLimit(_requestGasLimit);\r\n    }\r\n\r\n    function _setRequestGasLimit(uint256 _requestGasLimit) internal {\r\n        require(_requestGasLimit <= bridgeContract().maxGasPerTx());\r\n        uintStorage[REQUEST_GAS_LIMIT] = _requestGasLimit;\r\n    }\r\n\r\n    function requestGasLimit() public view returns (uint256) {\r\n        return uintStorage[REQUEST_GAS_LIMIT];\r\n    }\r\n}\r\n\r\n// File: contracts/kitty/ERC721.sol\r\n\r\npragma solidity 0.4.24;\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\n\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n// File: contracts/mediator/ERC721Bridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract ERC721Bridge is EternalStorage {\r\n    bytes32 internal constant ERC721_TOKEN = keccak256(abi.encodePacked(\"erc721token\"));\r\n\r\n    function erc721token() public view returns (ERC721) {\r\n        return ERC721(addressStorage[ERC721_TOKEN]);\r\n    }\r\n\r\n    function setErc721token(address _token) internal {\r\n        require(AddressUtils.isContract(_token));\r\n        addressStorage[ERC721_TOKEN] = _token;\r\n    }\r\n}\r\n\r\n// File: contracts/mediator/BasicMediator.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicMediator is Initializable, AMBMediator, ERC721Bridge, Upgradeable, Claimable {\r\n    event FailedMessageFixed(bytes32 indexed dataHash, address recipient, uint256 tokenId);\r\n\r\n    bytes32 internal constant NONCE = keccak256(abi.encodePacked(\"nonce\"));\r\n    bytes4 internal constant GET_KITTY = 0xe98b7f4d; // getKitty(uint256)\r\n\r\n    function initialize(\r\n        address _bridgeContract,\r\n        address _mediatorContract,\r\n        address _erc721token,\r\n        uint256 _requestGasLimit,\r\n        address _owner\r\n    ) external returns (bool) {\r\n        require(!isInitialized());\r\n\r\n        _setBridgeContract(_bridgeContract);\r\n        _setMediatorContractOnOtherSide(_mediatorContract);\r\n        setErc721token(_erc721token);\r\n        _setRequestGasLimit(_requestGasLimit);\r\n        setOwner(_owner);\r\n        setNonce(keccak256(abi.encodePacked(address(this))));\r\n        setInitialize();\r\n\r\n        return isInitialized();\r\n    }\r\n\r\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (1, 0, 0);\r\n    }\r\n\r\n    function getBridgeMode() external pure returns (bytes4 _data) {\r\n        return bytes4(keccak256(abi.encodePacked(\"nft-to-nft-amb\")));\r\n    }\r\n\r\n    function transferToken(address _from, uint256 _tokenId) external {\r\n        ERC721 token = erc721token();\r\n        address to = address(this);\r\n\r\n        token.transferFrom(_from, to, _tokenId);\r\n        bridgeSpecificActionsOnTokenTransfer(_from, _tokenId);\r\n    }\r\n\r\n    /**\r\n    *  getKitty(uint256) returns:\r\n    *       bool isGestating,\r\n    *       bool isReady,\r\n    *       uint256 cooldownIndex,\r\n    *       uint256 nextActionAt,\r\n    *       uint256 siringWithId,\r\n    *       uint256 birthTime,\r\n    *       uint256 matronId,\r\n    *       uint256 sireId,\r\n    *       uint256 generation,\r\n    *       uint256 genes\r\n    **/\r\n    function getMetadata(uint256 _tokenId) internal view returns (bytes memory metadata) {\r\n        bytes memory callData = abi.encodeWithSelector(GET_KITTY, _tokenId);\r\n        address tokenAddress = erc721token();\r\n        metadata = new bytes(320);\r\n        assembly {\r\n            let result := call(gas, tokenAddress, 0x0, add(callData, 0x20), mload(callData), 0, 0)\r\n            returndatacopy(add(metadata, 0x20), 0, returndatasize)\r\n\r\n            switch result\r\n                case 0 {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n    }\r\n\r\n    function nonce() internal view returns (bytes32) {\r\n        return Bytes.bytesToBytes32(bytesStorage[NONCE]);\r\n    }\r\n\r\n    function setNonce(bytes32 _hash) internal {\r\n        bytesStorage[NONCE] = abi.encodePacked(_hash);\r\n    }\r\n\r\n    function setMessageHashTokenId(bytes32 _hash, uint256 _tokenId) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"messageHashTokenId\", _hash))] = _tokenId;\r\n    }\r\n\r\n    function messageHashTokenId(bytes32 _hash) internal view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"messageHashTokenId\", _hash))];\r\n    }\r\n\r\n    function setMessageHashRecipient(bytes32 _hash, address _recipient) internal {\r\n        addressStorage[keccak256(abi.encodePacked(\"messageHashRecipient\", _hash))] = _recipient;\r\n    }\r\n\r\n    function messageHashRecipient(bytes32 _hash) internal view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"messageHashRecipient\", _hash))];\r\n    }\r\n\r\n    function setMessageHashFixed(bytes32 _hash) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"messageHashFixed\", _hash))] = true;\r\n    }\r\n\r\n    function messageHashFixed(bytes32 _hash) public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"messageHashFixed\", _hash))];\r\n    }\r\n\r\n    function requestFailedMessageFix(bytes32 _txHash) external {\r\n        require(!bridgeContract().messageCallStatus(_txHash));\r\n        require(bridgeContract().failedMessageReceiver(_txHash) == address(this));\r\n        require(bridgeContract().failedMessageSender(_txHash) == mediatorContractOnOtherSide());\r\n        bytes32 dataHash = bridgeContract().failedMessageDataHash(_txHash);\r\n\r\n        bytes4 methodSelector = this.fixFailedMessage.selector;\r\n        bytes memory data = abi.encodeWithSelector(methodSelector, dataHash);\r\n        bridgeContract().requireToPassMessage(mediatorContractOnOtherSide(), data, requestGasLimit());\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyIfUpgradeabilityOwner validAddress(_to) {\r\n        claimValues(_token, _to);\r\n    }\r\n\r\n    function fixFailedMessage(bytes32 _dataHash) external;\r\n\r\n    function bridgeSpecificActionsOnTokenTransfer(address _from, uint256 _tokenId) internal;\r\n}\r\n\r\n// File: contracts/interfaces/IHomeMediator.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IHomeMediator {\r\n    function handleBridgedTokens(address _recipient, uint256 _tokenId, bytes _metadata, bytes32 _nonce) external;\r\n}\r\n\r\n// File: contracts/mediator/ForeignMediator.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract ForeignMediator is BasicMediator {\r\n    function passMessage(address _from, uint256 _tokenId) internal {\r\n        bytes memory metadata = getMetadata(_tokenId);\r\n\r\n        bytes4 methodSelector = IHomeMediator(0).handleBridgedTokens.selector;\r\n        bytes memory data = abi.encodeWithSelector(methodSelector, _from, _tokenId, metadata, nonce());\r\n\r\n        bytes32 dataHash = keccak256(data);\r\n        setMessageHashTokenId(dataHash, _tokenId);\r\n        setMessageHashRecipient(dataHash, _from);\r\n        setNonce(dataHash);\r\n\r\n        bridgeContract().requireToPassMessage(mediatorContractOnOtherSide(), data, requestGasLimit());\r\n    }\r\n\r\n    function handleBridgedTokens(\r\n        address _recipient,\r\n        uint256 _tokenId,\r\n        bytes32 /* _nonce */\r\n    ) external {\r\n        require(msg.sender == address(bridgeContract()));\r\n        require(bridgeContract().messageSender() == mediatorContractOnOtherSide());\r\n        erc721token().transfer(_recipient, _tokenId);\r\n    }\r\n\r\n    function bridgeSpecificActionsOnTokenTransfer(address _from, uint256 _tokenId) internal {\r\n        passMessage(_from, _tokenId);\r\n    }\r\n\r\n    function fixFailedMessage(bytes32 _dataHash) external {\r\n        require(msg.sender == address(bridgeContract()));\r\n        require(bridgeContract().messageSender() == mediatorContractOnOtherSide());\r\n        require(!messageHashFixed(_dataHash));\r\n\r\n        address recipient = messageHashRecipient(_dataHash);\r\n        uint256 tokenId = messageHashTokenId(_dataHash);\r\n\r\n        setMessageHashFixed(_dataHash);\r\n        erc721token().transfer(recipient, tokenId);\r\n\r\n        emit FailedMessageFixed(_dataHash, recipient, tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_dataHash\",\"type\":\"bytes32\"}],\"name\":\"fixFailedMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridgeContract\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"name\":\"_mediatorContract\",\"type\":\"address\"},{\"name\":\"_erc721token\",\"type\":\"address\"},{\"name\":\"_requestGasLimit\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"handleBridgedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mediatorContract\",\"type\":\"address\"}],\"name\":\"setMediatorContractOnOtherSide\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediatorContractOnOtherSide\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"messageHashFixed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"requestFailedMessageFix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestGasLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestGasLimit\",\"type\":\"uint256\"}],\"name\":\"setRequestGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FailedMessageFixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ForeignMediator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4f64c3d8d6c9cf6895888c51b43bc509f186d7f3e1d90505854c8742785c886f"}]}