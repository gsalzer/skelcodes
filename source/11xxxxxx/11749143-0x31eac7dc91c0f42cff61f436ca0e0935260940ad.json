{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n//pragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n  \r\n  receive () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() virtual internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() virtual internal {\r\n      \r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) && msg.data.length == 0 && gasleft() <= 2300)         // for receive ETH only from other contract\r\n        return;\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\nabstract contract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() override internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() virtual override internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    //super._willFallback();\r\n  }\r\n}\r\n\r\ninterface IAdminUpgradeabilityProxyView {\r\n  function admin() external view returns (address);\r\n  function implementation() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\nabstract contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n  \r\n  //function _willFallback() virtual override internal {\r\n    //super._willFallback();\r\n  //}\r\n}\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _admin, address _logic, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title InitializableUpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\r\n * implementation and init data.\r\n */\r\nabstract contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _logic, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * @title InitializableAdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\r\n  /**\r\n   * Contract initializer.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _admin, address _logic, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n    super._willFallback();\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface IProxyFactory {\r\n    function productImplementation() external view returns (address);\r\n    function productImplementations(bytes32 name) external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title ProductProxy\r\n * @dev This contract implements a proxy that \r\n * it is deploied by ProxyFactory, \r\n * and it's implementation is stored in factory.\r\n */\r\ncontract ProductProxy is Proxy {\r\n    \r\n  /**\r\n   * @dev Storage slot with the address of the ProxyFactory.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.factory\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant FACTORY_SLOT = 0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1;\r\n\r\n  function productName() virtual public pure returns (bytes32) {\r\n    return 0x0;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the factory address of the ProductProxy.\r\n   * @param newFactory Address of the new factory.\r\n   */\r\n  function _setFactory(address newFactory) internal {\r\n    require(OpenZeppelinUpgradesAddress.isContract(newFactory), \"Cannot set a factory to a non-contract address\");\r\n\r\n    bytes32 slot = FACTORY_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newFactory)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the factory.\r\n   * @return factory Address of the factory.\r\n   */\r\n  function _factory() internal view returns (address factory) {\r\n    bytes32 slot = FACTORY_SLOT;\r\n    assembly {\r\n      factory := sload(slot)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() virtual override internal view returns (address) {\r\n    address factory = _factory();\r\n    if(OpenZeppelinUpgradesAddress.isContract(factory))\r\n        return IProxyFactory(factory).productImplementations(productName());\r\n    else\r\n        return address(0);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title InitializableProductProxy\r\n * @dev Extends ProductProxy with an initializer for initializing\r\n * factory and init data.\r\n */\r\ncontract InitializableProductProxy is ProductProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param factory Address of the initial factory.\r\n   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address factory, bytes memory data) public payable {\r\n    require(_factory() == address(0));\r\n    assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1));\r\n    _setFactory(factory);\r\n    if(data.length > 0) {\r\n      (bool success,) = _implementation().delegatecall(data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract when upgrade EVEN times.\r\n   */\r\n  modifier initializerEven() {\r\n    require(initializing || isConstructor() || initialized, \"Contract instance has already been initialized EVEN times\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = false;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\ncontract Governable is Initializable {\r\n    address public governor;\r\n\r\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\r\n\r\n    /**\r\n     * @dev Contract initializer.\r\n     * called once by the factory at time of deployment\r\n     */\r\n    function initialize(address governor_) virtual public initializer {\r\n        governor = governor_;\r\n        emit GovernorshipTransferred(address(0), governor);\r\n    }\r\n\r\n    modifier governance() {\r\n        require(msg.sender == governor);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to relinquish control of the contract.\r\n     * @notice Renouncing to governorship will leave the contract without an governor.\r\n     * It will not be possible to call the functions with the `governance`\r\n     * modifier anymore.\r\n     */\r\n    function renounceGovernorship() public governance {\r\n        emit GovernorshipTransferred(governor, address(0));\r\n        governor = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function transferGovernorship(address newGovernor) public governance {\r\n        _transferGovernorship(newGovernor);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function _transferGovernorship(address newGovernor) internal {\r\n        require(newGovernor != address(0));\r\n        emit GovernorshipTransferred(governor, newGovernor);\r\n        governor = newGovernor;\r\n    }\r\n}\r\n\r\n\r\ncontract Configurable is Governable {\r\n\r\n    mapping (bytes32 => uint) internal config;\r\n    \r\n    function getConfig(bytes32 key) public view returns (uint) {\r\n        return config[key];\r\n    }\r\n    function getConfig(bytes32 key, uint index) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ index)];\r\n    }\r\n    function getConfig(bytes32 key, address addr) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ uint(addr))];\r\n    }\r\n\r\n    function _setConfig(bytes32 key, uint value) internal {\r\n        if(config[key] != value)\r\n            config[key] = value;\r\n    }\r\n    function _setConfig(bytes32 key, uint index, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function _setConfig(bytes32 key, address addr, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n    \r\n    function setConfig(bytes32 key, uint value) external governance {\r\n        _setConfig(key, value);\r\n    }\r\n    function setConfig(bytes32 key, uint index, uint value) external governance {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function setConfig(bytes32 key, address addr, uint value) external governance {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n}\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract UP is IERC20, ContextUpgradeSafe, Configurable {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = 'UU.finance Upvaluing LPT';\r\n    string public constant symbol = 'UP';\r\n    //uint8 public constant decimals = 18;\r\n\r\n    address public uu;\r\n\r\n\tfunction initialize(address governor_, address uu_) public virtual initializer {\r\n\t\tContextUpgradeSafe.__Context_init_unchained();\r\n\t\tGovernable.initialize(governor_);\r\n\t\t__UP_init_unchained(uu_);\r\n\t}\r\n\t\r\n\tfunction __UP_init_unchained(address uu_) internal initializer {\r\n\t\tuu = uu_;\r\n\t}\r\n\r\n    //function name() public view virtual returns (string memory) {\r\n    //    return \"UU.finance Upvaluing LPT\";\r\n    //}\r\n//\r\n    //function symbol() public view virtual returns (string memory) {\r\n    //    return \"UP\";\r\n    //}\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return UU(uu).decimals();\r\n    }\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return UU(uu).upTotalSupply();\r\n    }\r\n\r\n    function balanceOf(address account) external view virtual override returns (uint256) {\r\n        return UU(uu).upBalanceOf(account);\r\n    }\r\n\r\n    function price() external view virtual returns (uint256) {\r\n        return UU(uu).upPrice();\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return UU(uu).upAllowance(owner, spender);\r\n    }\r\n    \r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    \r\n    function nonces(address signatory) external view virtual returns (uint256) {\r\n        return UU(uu).nonces(signatory);\r\n    }\r\n    \r\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual {\r\n        UU(uu).upPermit_(name, address(this), owner, spender, rawAmount, deadline, v, r, s);\r\n        emit Approval(owner, spender, rawAmount);\r\n    }\r\n\r\n    function approve(address spender, uint256 volume) public virtual override returns (bool success) {\r\n        success = UU(uu).upApprove_(_msgSender(), spender, volume);\r\n        emit Approval(_msgSender(), spender, volume);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 increment) external virtual returns (bool) {\r\n        return approve(spender, allowance(_msgSender(), spender).add(increment));\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 decrement) external virtual returns (bool) {\r\n        return approve(spender, allowance(_msgSender(), spender).sub(decrement, \"UP: decreased allowance below zero\"));\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 volume) external virtual override returns (bool success) {\r\n        success = UU(uu).upTransferFrom_(_msgSender(), sender, recipient, volume);\r\n        emit Transfer(sender, recipient, volume);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 volume) external virtual override returns (bool success) {\r\n        success = UU(uu).upTransfer_(_msgSender(), recipient, volume);\r\n        emit Transfer(_msgSender(), recipient, volume);\r\n    }\r\n    \r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ncontract UUBaseERC20 is IERC20, ContextUpgradeSafe {\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    mapping (address => uint) public nonces;\r\n    \r\n    string public constant name = 'UU.finance Yielding United USD';\r\n    string public constant symbol = 'UU';\r\n    uint8 public constant decimals = 18;\r\n\r\n    address public up;\r\n    uint256 internal _upTotalSupply3;\r\n    mapping (address => uint256) internal _upBalance3Of;\r\n    mapping (address => mapping (address => uint256)) public upAllowance;\r\n    uint256 public upPrice;\r\n\r\n\tfunction __UUBaseERC20_init(address up_) internal virtual initializer {\r\n\t\tContextUpgradeSafe.__Context_init_unchained();\r\n\t\t__UUBaseERC20_init_unchained(up_);\r\n\t}\r\n\t\r\n\tfunction __UUBaseERC20_init_unchained(address up_) internal initializer {\r\n\t\tup = up_;\r\n\t}\r\n\t\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return up2uu(upTotalSupply());\r\n    }\r\n\r\n    function balanceOf(address account) external view virtual override returns (uint256) {\r\n        return up2uu(upBalanceOf(account));\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return up2uu(upAllowance[owner][spender]);\r\n    }\r\n    \r\n    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual {\r\n        _upPermit(name, address(this), owner, spender, uu2up(amount), deadline, v, r, s);\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool success) {\r\n        success = _upApprove(_msgSender(), spender, uu2up(amount));\r\n        emit Approval(_msgSender(), spender, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 increment) external virtual returns (bool) {\r\n        return approve(spender, allowance(_msgSender(), spender).add(increment));\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 decrement) external virtual returns (bool) {\r\n        return approve(spender, allowance(_msgSender(), spender).sub(decrement, \"UU: decreased allowance below zero\"));\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool success) {\r\n        success = _upTransferFrom(_msgSender(), sender, recipient, uu2up(amount));\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool success) {\r\n        success = _upTransfer(_msgSender(), recipient, uu2up(amount));\r\n        emit Transfer(_msgSender(), recipient, amount);\r\n    }\r\n    \r\n    function uu2up(uint256 amount) public view virtual returns (uint256) {\r\n        return amount.mul(uint256(10)**decimals).div(upPrice);\r\n    }\r\n\r\n    function up2uu(uint256 vol) public view virtual returns (uint256) {\r\n        return vol.mul(upPrice).div(uint256(10)**decimals);\r\n    }\r\n\r\n    function upTotalSupply() public view virtual returns (uint256) {\r\n        return uint112(_upTotalSupply3);\r\n    }\r\n    \r\n    function upBalanceOf(address account) public view virtual returns (uint256) {\r\n        return uint112(_upBalance3Of[account]);\r\n    }\r\n\r\n    function _upPermit(string memory name_, address verifyingContract, address owner, address spender, uint volume, uint deadline, uint8 v, bytes32 r, bytes32 s) internal virtual {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name_)), chainId, verifyingContract));\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, volume, nonces[owner]++, deadline));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"UU.permit: invalid signature\");\r\n        require(signatory == owner, \"UU.permit: unauthorized\");\r\n        require(now <= deadline, \"UU.permit: signature expired\");\r\n        \r\n        _upApprove(owner, spender, volume);\r\n    }\r\n\r\n    function _upApprove(address owner, address spender, uint256 volume) internal virtual returns (bool success) {\r\n        upAllowance[owner][spender] = volume;\r\n        return true;\r\n    }\r\n\r\n    function _upTransferFrom(address spender, address sender, address recipient, uint256 volume) internal virtual returns (bool success) {\r\n        uint256 a = upAllowance[sender][spender];\r\n        if(a != uint256(-1))\r\n            upAllowance[sender][spender] = a.sub(volume);\r\n        return _upTransfer(sender, recipient, volume);\r\n    }\r\n\r\n    function _upTransfer(address sender, address recipient, uint256 volume) internal virtual returns (bool success) {\r\n        _upBalance3Of[sender]    = decreaseTAB(_upBalance3Of[sender],    volume);         \r\n        _upBalance3Of[recipient] = increaseTAB(_upBalance3Of[recipient], volume);         \r\n        return true;\r\n    }\r\n\r\n    function increaseTAB(uint256 tab, uint256 increment) internal view virtual returns (uint256) {\r\n        (uint256 t, uint256 a, uint256 b) = unpackTAB(tab);           \r\n        a += b * (uint32(now) - t);                             // + and * never overflows, and - overflow is desired\r\n        b += increment;                                         // + never overflows\r\n        t = now;\r\n        return packTAB(t, a, b);         \r\n    }\r\n    \r\n    function decreaseTAB(uint256 tab, uint256 decrement) internal view virtual returns (uint256) {\r\n        (uint256 t, uint256 a, uint256 b) = unpackTAB(tab);           \r\n        a += b * (uint32(now) -t);                              // + and * never overflows, and - overflow is desired\r\n        b = b.sub(decrement);\r\n        t = now;\r\n        return packTAB(t, a, b);         \r\n    }\r\n    \r\n    function packTAB(uint256 timestamp, uint256 coinAge, uint256 balance) internal pure virtual returns (uint256) {\r\n        require(coinAge <= uint144(-1) && balance <= uint112(-1), 'TAB OVERFLOW');\r\n        return timestamp << 224 | coinAge >> 32 << 112 | balance;\r\n    }\r\n    \r\n    function unpackTAB(uint256 tab) internal pure virtual returns (uint256 timestamp, uint256 coinAge, uint256 balance) {\r\n        timestamp = tab >> 224;\r\n        coinAge   = uint144(tab >> 112 << 32);\r\n        balance   = uint112(tab);\r\n    }\r\n    \r\n    //struct TAB {\r\n    //    uint32 timestamp;\r\n    //    uint112 coinAge;\r\n    //    uint112 balance;\r\n    //}\r\n    \r\n    modifier onlyUP {\r\n        require(_msgSender() == up, 'Only be called by UP Token contract');\r\n        _;\r\n    }\r\n    \r\n    function upPermit_(string memory name_, address verifyingContract, address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual onlyUP {\r\n        _upPermit(name_, verifyingContract, owner, spender, rawAmount, deadline, v, r, s);\r\n    }\r\n    \r\n    function upApprove_(address owner, address spender, uint256 volume) external virtual onlyUP returns (bool success) {\r\n        success = _upApprove(owner, spender, volume);\r\n    }\r\n\r\n    function upTransferFrom_(address spender, address sender, address recipient, uint256 volume) external virtual onlyUP returns (bool success) {\r\n        success = _upTransferFrom(spender, sender, recipient, volume);\r\n    }\r\n\r\n    function upTransfer_(address sender, address recipient, uint256 volume) external virtual onlyUP returns (bool success) {\r\n        success = _upTransfer(sender, recipient, volume);\r\n    }\r\n    \r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ncontract UUBaseMintable is UUBaseERC20, Configurable {\r\n    using TransferHelper for address;\r\n    \r\n    bytes32 internal constant _netValueUnit_        = 'netValueUnit';\r\n    bytes32 internal constant _netValueIndexOfLPT_  = 'netValueIndexOfLPT';\r\n    bytes32 internal constant _depositOfLPT_        = 'depositOfLPT';\r\n    bytes32 internal constant _swapOfLPT_           = 'swapOfLPT';\r\n    bytes32 internal constant _lptOfSwap_           = 'lptOfSwap';\r\n    bytes32 internal constant _gaugeOfLPT_          = 'gaugeOfLPT';\r\n    bytes32 internal constant _lptTwapPeriod_       = 'lptTwapPeriod';\r\n    \r\n    uint256 public upPriceFactor;\r\n    address[] public lpts;\r\n    function lptN() public view returns (uint) {  return lpts.length;  }\r\n    \r\n    uint internal unlocked;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'UU: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    \r\n    mapping (address => uint) public    lptTWAP;\r\n    mapping (address => uint) internal _lptTwapTime;\r\n\r\n\tfunction __UUBaseMintable_init(address governor_, address up_) internal virtual initializer {\r\n\t\tContextUpgradeSafe.__Context_init_unchained();\r\n\t\tUUBaseERC20.__UUBaseERC20_init_unchained(up_);\r\n\t\tGovernable.initialize(governor_);\r\n\t\t__UUBaseMintable_init_unchained();\r\n\t}\r\n\t\r\n\tfunction __UUBaseMintable_init_unchained() internal initializer {\r\n\t\t_setConfig(_netValueUnit_,    1.0 ether);\r\n\t\t_setConfig(_lptTwapPeriod_,   60 minutes);\r\n\t\tupPriceFactor = 1 ether;\r\n\t\tunlocked = 1;\r\n\t}\r\n    \r\n\tfunction addLPT(address lpt, address swap, address depo, uint nvi, address gauge) virtual public governance {\r\n        IERC20(lpt).totalSupply();\r\n        StableSwap(swap).A();                                   // just for test\r\n        Deposit(depo).calc_withdraw_one_coin(1 ether, int128(nvi));\r\n        for(uint i=0; i<lpts.length; i++)\r\n            require(lpts[i] != lpt, 'the lpt has already added');\r\n            \r\n        lpts.push(lpt);\r\n        _setConfig(_netValueIndexOfLPT_, lpt, nvi);\r\n        _setConfig(_depositOfLPT_,       lpt, uint(depo));\r\n        _setConfig(_swapOfLPT_,          lpt, uint(swap));\r\n        _setConfig(_lptOfSwap_,          swap, uint(lpt));\r\n        _updateLptTWAP(lpt);\r\n\r\n        emit AddLPT(lpt, swap, depo, nvi, gauge);\r\n\t}\r\n\tevent AddLPT(address lpt, address swap, address depo, uint nvi, address gauge);\r\n\t\r\n\tfunction removeLPT(address lpt) virtual external governance {\r\n        require(lptBalance(lpt) == 0, \"Can't remove lpt which balanceOf(UU) is not 0\");\r\n        for(uint i=0; i<lpts.length; i++) {\r\n            if(lpts[i] == lpt) {\r\n                lpts[i] = lpts[lpts.length-1];\r\n                lpts.pop();\r\n                emit RemoveLPT(lpt);\r\n                return;\r\n            }\r\n        }\r\n        revert('the lpt is not in list');\r\n\t}\r\n\tevent RemoveLPT(address lpt);\r\n\t\r\n\tfunction calcPrice() virtual public view returns (uint) {\r\n        if(upTotalSupply() == 0)\r\n            return upPriceFactor;\r\n        uint amt = 0;\r\n        for(uint i=0; i<lpts.length; i++)\r\n            amt = amt.add(lptBalance(lpts[i]).mul(StableSwap(getConfig(_swapOfLPT_, lpts[i])).get_virtual_price()));\r\n        return amt.div(upTotalSupply()).mul(upPriceFactor).div(1 ether);\r\n\t}\r\n\t\r\n\tfunction _updatePrice() virtual internal {\r\n\t    upPrice = calcPrice();\r\n\t    emit UpdatePrice(upPrice, now);\r\n\t}\r\n\tevent UpdatePrice(uint256 upPrice, uint256 timestamp);\r\n\t\r\n\tfunction _adjustPriceFactor() virtual internal {\r\n\t    upPriceFactor = upPriceFactor.mul(upPrice).div(calcPrice());\r\n\t}\r\n\t\r\n\tfunction updatePrice() virtual public {\r\n\t    _updatePrice();\r\n\t    _upTotalSupply3 = increaseTAB(_upTotalSupply3, 0);\r\n\t}\r\n\t\r\n    function lastUpdateTimeSpan() virtual public view returns(uint256) {\r\n        return uint32(now - (_upTotalSupply3 >> 224));                          // overflow is desired\r\n    }\r\n    \r\n\tfunction netValue(address lpt, uint vol) virtual public view returns (uint amt) {\r\n        address deposit = address(getConfig(_depositOfLPT_, lpt));\r\n        require(deposit != address(0), 'Unsupported LPT');\r\n        uint unit = getConfig(_netValueUnit_);\r\n        if(unit == 0)\r\n            unit = 1 ether;\r\n        int128 i = int128(getConfig(_netValueIndexOfLPT_, lpt));\r\n        amt = Deposit(deposit).calc_withdraw_one_coin(unit, i);\r\n        amt = amt.mul(vol).div(unit);\r\n\t}\r\n\t\r\n\tfunction netValue(address lpt) virtual public view returns (uint amt) {\r\n        return netValue(lpt, lptBalance(lpt));\r\n\t}\r\n\t\r\n\tfunction totalNetValue() virtual public view returns (uint amt) {\r\n        for(uint i=0; i<lpts.length; i++)\r\n            amt = amt.add(netValue(lpts[i]));\r\n\t}\r\n\t\r\n\tfunction lptBalance(address lpt) virtual public view returns (uint) {\r\n        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\r\n        if(gauge != address(0))\r\n            return Gauge(gauge).balanceOf(address(this));\r\n        else\r\n            return IERC20(lpt).balanceOf(address(this));\r\n\t}\r\n\t\r\n\tfunction lptPrice(address lpt) virtual public view returns (uint) {\r\n        if(totalSupply() == 0)\r\n            return StableSwap(getConfig(_swapOfLPT_, lpt)).get_virtual_price();\r\n        else\r\n            return netValue(lpt, uint256(10)**decimals).mul(totalSupply()).div(totalNetValue());\r\n\t}\r\n\t\r\n\tfunction _updateLptTWAP(address lpt) virtual internal {\r\n        uint period = config[_lptTwapPeriod_];\r\n        uint timestamp = _lptTwapTime[lpt];\r\n        if(now > timestamp.add(period))\r\n            lptTWAP[lpt] = lptPrice(lpt);\r\n        else\r\n            lptTWAP[lpt] = timestamp.add(period).sub(now).mul(lptPrice(lpt)).add(now.sub(timestamp).mul(lptTWAP[lpt])).div(period);\r\n\t}\r\n\t\r\n\tfunction lpt2uu(address lpt, uint vol) virtual public view returns (uint) {\r\n        return Math.min(lptPrice(lpt), lptTWAP[lpt]).mul(vol).div(uint256(10)**decimals);\r\n\t}\r\n\t\r\n\tfunction uu2lpt(uint amt, address lpt) virtual public view returns (uint) {\r\n        return Math.min(amt.mul(uint256(10)**decimals).div(Math.max(lptPrice(lpt), lptTWAP[lpt])), lptBalance(lpt));\r\n\t}\r\n\t\r\n\tfunction _mint(address to, uint amt) virtual internal returns (uint) {\r\n        uint vol = uu2up(amt);\r\n        _upTotalSupply3   = increaseTAB(_upTotalSupply3,   vol);\r\n        _upBalance3Of[to] = increaseTAB(_upBalance3Of[to], vol);\r\n        emit Transfer(address(0), to, amt);\r\n        return amt;\r\n\t}\r\n\t\r\n\tfunction mint(address lpt, uint vol, uint minMint) virtual external lock returns (uint amt) {\r\n        _updatePrice();\r\n        amt = lpt2uu(lpt, vol);\r\n        require(amt >= minMint, 'Slippage screwed you');\r\n        lpt.safeTransferFrom(_msgSender(), address(this), vol);\r\n        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\r\n        if(gauge != address(0)) {\r\n            lpt.safeApprove(gauge, vol);\r\n            Gauge(gauge).deposit(vol);\r\n        }\r\n        _mint(_msgSender(), amt);\r\n        _updateLptTWAP(lpt);\r\n        _adjustPriceFactor();\r\n\t}\r\n\r\n\tfunction _burn(address from, uint amt) virtual internal returns (uint) {\r\n        uint vol = uu2up(amt);\r\n        _upBalance3Of[from] = decreaseTAB(_upBalance3Of[from], vol);\r\n        _upTotalSupply3     = decreaseTAB(_upTotalSupply3,     vol);\r\n        emit Transfer(from, address(0), amt);\r\n        return amt;\r\n\t}\r\n\t\r\n\tfunction burn(uint amt, address lpt, uint minVol) virtual external lock returns (uint vol) {\r\n        _updatePrice();\r\n        vol = uu2lpt(amt, lpt);\r\n        if(vol == lptBalance(lpt))\r\n            amt = lpt2uu(lpt, vol);\r\n        _burn(_msgSender(), amt);\r\n        require(vol >= minVol, 'Slippage screwed you');\r\n\r\n        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\r\n        if(gauge != address(0))\r\n            Gauge(gauge).withdraw(vol);\r\n        lpt.safeTransfer(_msgSender(), vol);\r\n        _updateLptTWAP(lpt);\r\n        _adjustPriceFactor();\r\n\t}\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[47] private ______gap;\r\n}\r\n\r\ncontract UUBaseClaimable is UUBaseMintable {\r\n    bytes32 internal constant _claimToTimeSpan_     = 'claimToTimeSpan';\r\n    bytes32 internal constant _claimToTipRatio_     = 'claimToTipRatio';\r\n    bytes32 internal constant _settleTipRatio_      = 'settleTipRatio';\r\n    bytes32 internal constant _updateTipRatio_      = 'updateTipRatio';\r\n    bytes32 internal constant _updateInterval_      = 'updateInterval';\r\n    \r\n    \r\n    address[] public rewards;\r\n    function rewardN() public view returns (uint) {  return rewards.length;  }\r\n    mapping (address => mapping (address => uint256)) internal _claimed3;           // account => reward => _claimed3\r\n\r\n\tfunction __UUBaseClaimable_init(address governor_, address up_) internal virtual initializer {\r\n\t\tContextUpgradeSafe.__Context_init_unchained();\r\n\t\tUUBaseERC20.__UUBaseERC20_init_unchained(up_);\r\n\t\tGovernable.initialize(governor_);\r\n\t\tUUBaseMintable.__UUBaseMintable_init_unchained();\r\n\t\t__UUBaseClaimable_init_unchained();\r\n\t}\r\n\t\r\n\tfunction __UUBaseClaimable_init_unchained() internal initializer {\r\n\t\t_setConfig(_claimToTimeSpan_, 7 days);\r\n\t\t_setConfig(_claimToTipRatio_, 0.1 ether);\r\n\t\t_setConfig(_settleTipRatio_,  0.01 ether);\r\n\t\t_setConfig(_updateTipRatio_,  0.01 ether);\r\n\t\t_setConfig(_updateInterval_,  30 minutes);\r\n\t}\r\n\t\r\n\tfunction addLPT(address lpt, address swap, address depo, uint nvi, address gauge) virtual override public governance {\r\n        super.addLPT(lpt, swap, depo, nvi, gauge);\r\n        if(gauge != address(0)) {\r\n            _setConfig(_gaugeOfLPT_,     lpt, uint(gauge));\r\n            tryAddReward(Gauge(gauge).crv_token());\r\n            address reward = Gauge(gauge).rewarded_token();\r\n            if(reward != address(0))\r\n                tryAddReward(reward);\r\n        }\r\n\t}\r\n\r\n\tfunction tryAddReward(address reward) virtual public governance returns (bool success) {\r\n        IERC20(reward).totalSupply();               // just for test\r\n        for(uint i=0; i<rewards.length; i++)\r\n            if(rewards[i] == reward)                // 'the reward has already added'\r\n                return false;\r\n        rewards.push(reward);\r\n        emit AddReward(reward);\r\n        return true;\r\n\t}\r\n\tevent AddReward(address reward);\r\n\t\r\n\tfunction removeReward(address reward) virtual external governance returns (uint remain) {\r\n        for(uint i=0; i<lpts.length; i++) {\r\n            address gauge = address(getConfig(_gaugeOfLPT_, lpts[i]));\r\n            require(Gauge(gauge).crv_token() == reward || Gauge(gauge).rewarded_token() == reward, 'the reward is active yet');\r\n        }\r\n        for(uint i=0; i<rewards.length; i++) {\r\n            if(rewards[i] == reward) {\r\n                rewards[i] = rewards[rewards.length-1];\r\n                rewards.pop();\r\n                remain = IERC20(reward).balanceOf(address(this));\r\n                reward.safeTransfer(_msgSender(), remain);\r\n                emit RemoveReward(reward, remain);\r\n                return remain;\r\n            }\r\n        }\r\n        revert('the lpt is not in list');\r\n\t}\r\n\tevent RemoveReward(address reward, uint remain);\r\n\t\r\n\tfunction deltaCoinAge(uint256 balance3, uint256 claimaed3) virtual internal view returns (uint256 delta, uint256 timestamp, uint256 coinAge, uint256 claimed) {\r\n        (uint256 t, uint256 a, uint256 b) = unpackTAB(balance3);           \r\n        a += b * (uint32(now) - t);                             // + and * never overflows, and - overflow is desired\r\n        (timestamp, coinAge, claimed) = unpackTAB(claimaed3);         \r\n\t    delta = a.sub(coinAge);\r\n\t}\r\n\t\r\n\tfunction claimable(address acct, address reward) virtual public view returns (uint) {\r\n        uint vol = IERC20(reward).balanceOf(address(this));\r\n        if(vol == 0)\r\n            return 0;\r\n        (uint256 totalDelta, , ,) = deltaCoinAge(_upTotalSupply3, _claimed3[address(-1)][reward]);\r\n        (uint256 delta, , ,) = deltaCoinAge(_upBalance3Of[acct], _claimed3[acct][reward]);\r\n        return vol.mul(delta).div(totalDelta);\r\n\t}\r\n\t\r\n\tfunction _claimTo(address to, address reward) virtual internal returns (uint vol, uint tip) {\r\n        vol = IERC20(reward).balanceOf(address(this));\r\n        if(vol == 0)\r\n            return (0, 0);\r\n        (uint256 totalDelta, , uint256 totalCoinAge, uint256 totalClaimed) = deltaCoinAge(_upTotalSupply3, _claimed3[address(-1)][reward]);\r\n        (uint256 delta, uint timestamp, uint256 coinAge, uint256 claimed) = deltaCoinAge(_upBalance3Of[to], _claimed3[to][reward]);\r\n        vol = vol.mul(delta).div(totalDelta);\r\n        _claimed3[address(-1)][reward] = packTAB(now, totalCoinAge.add(delta), totalClaimed.add(vol));\r\n        if(to != _msgSender()) {\r\n            require(now > timestamp.add(getConfig(_claimToTimeSpan_)), 'not reach claimToTimeSpan');\r\n            tip = vol.mul(getConfig(_claimToTipRatio_)).div(1 ether);\r\n            vol = vol.sub(tip);\r\n            (uint256 t, uint256 a, uint256 c) = unpackTAB(_claimed3[_msgSender()][reward]);\r\n            _claimed3[_msgSender()][reward] = packTAB(t, a, c.add(tip));\r\n        }\r\n        _claimed3[to][reward] = packTAB(now, coinAge.add(delta), claimed.add(vol));\r\n        reward.safeTransfer(to, vol);\r\n        if(to != _msgSender())\r\n            reward.safeTransfer(_msgSender(), tip);\r\n        emit ClaimTo(to, reward, vol, tip, _msgSender());\r\n\t}\r\n\tevent ClaimTo(address indexed to, address indexed reward, uint vol, uint tip, address indexed agent);\r\n\t\r\n    function claimTo(address to, address reward) virtual external lock returns (uint vol, uint tip) {\r\n        return _claimTo(to, reward);\r\n    }\r\n    \r\n    function claim(address reward) virtual external lock returns (uint vol) {\r\n        (vol, ) = _claimTo(_msgSender(), reward);\r\n    }\r\n    \r\n    function claim() virtual external lock {\r\n        for(uint i=0; i<rewards.length; i++)\r\n            _claimTo(_msgSender(), rewards[i]);\r\n    }\r\n    \r\n    function claimed(address acct, address reward) virtual public view returns (uint) {\r\n        return uint112(_claimed3[acct][reward]);\r\n    }\r\n    \r\n    function totalClaimed(address reward) virtual public view returns (uint) {\r\n        return claimed(address(-1), reward);\r\n    }\r\n    \r\n\tfunction settleable(address lpt, uint j) virtual public view returns (address reward, uint vol, uint tip) {\r\n        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\r\n        if(gauge == address(0))\r\n            return (address(0), 0, 0);\r\n        if(j == 0) {\r\n            reward = Gauge(gauge).crv_token();\r\n            vol = Gauge(gauge).claimable_tokens(address(this));\r\n        } else if(j == 1) {\r\n            reward = Gauge(gauge).rewarded_token();\r\n            vol = Gauge(gauge).claimable_reward(address(this));\r\n        } else if(j == 2) {\r\n            reward = Gauge(Gauge(gauge).reward_contract()).rewarded_token();\r\n            vol = Gauge(gauge).claimable_reward2(address(this));\r\n        }\r\n        uint tipRatio = getConfig(_settleTipRatio_);\r\n        if(lastUpdateTimeSpan() >= getConfig(_updateInterval_))\r\n            tipRatio = tipRatio.add(getConfig(_updateTipRatio_));\r\n        tip = vol.mul(tipRatio).div(1 ether);\r\n        vol = vol.sub(tip);\r\n\t}\r\n\t\r\n\tfunction settle(address lpt, uint j) virtual external lock {\r\n\t    address reward;\r\n\t    address reward2;\r\n\t    uint vol;\r\n\t    uint vol2;\r\n        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\r\n        if(gauge == address(0))\r\n            return;\r\n        if(j == 0) {\r\n            reward = Gauge(gauge).crv_token();\r\n            vol = IERC20(reward).balanceOf(address(this));\r\n            Minter(Gauge(gauge).minter()).mint(gauge);\r\n            vol = IERC20(reward).balanceOf(address(this)).sub(vol);\r\n        } else if(j >= 1) {\r\n            reward = Gauge(gauge).rewarded_token();\r\n            vol = IERC20(reward).balanceOf(address(this));\r\n            if(j >= 2) {\r\n                reward2 = Gauge(Gauge(gauge).reward_contract()).rewarded_token();\r\n                vol2 = IERC20(reward2).balanceOf(address(this));\r\n            }\r\n            Gauge(gauge).claim_rewards();\r\n            vol = IERC20(reward).balanceOf(address(this)).sub(vol);\r\n            if(j >= 2)\r\n                vol2 = IERC20(reward2).balanceOf(address(this)).sub(vol2);\r\n        }\r\n        uint tipRatio = getConfig(_settleTipRatio_);\r\n        uint interval = getConfig(_updateInterval_);\r\n        if(lastUpdateTimeSpan() >= interval || now >= _lptTwapTime[lpt].add(interval)) {\r\n            updatePrice();\r\n            _updateLptTWAP(lpt);\r\n            tipRatio = tipRatio.add(getConfig(_updateTipRatio_));\r\n        }\r\n        uint tip = vol.mul(tipRatio).div(1 ether);\r\n\t    reward.safeTransfer(_msgSender(), tip);\r\n        emit Settle(_msgSender(), gauge, reward, vol.sub(tip), tip);\r\n        if(j >= 2) {\r\n            uint tip2 = vol2.mul(tipRatio).div(1 ether);\r\n            reward2.safeTransfer(_msgSender(), tip2);\r\n            emit Settle(_msgSender(), gauge, reward2, vol2.sub(tip2), tip2);\r\n        }\r\n\t}\r\n\tevent Settle(address indexed agent, address indexed gauge, address indexed reward, uint vol, uint tip);\r\n    \r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ncontract UU is UUBaseClaimable {\r\n\tfunction initialize(address governor_, address up_) public virtual initializer {\r\n\t\t__UUBaseClaimable_init(governor_, up_);\r\n\t    unlocked = 1;\r\n\t}\r\n\t\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ncontract UUSwap {\r\n    \r\n\t//function multi2uu(address swap, uint[] memory amts) virtual public view returns (uint vol) {        // for StableSwap and underlying_coins\r\n    //    address lpt = address(getConfig(_lptOfSwap_, swap));\r\n    //    require(lpt != address(0), 'Unsupported StableSwap contract');\r\n    //\r\n    //    if(amts.length == 2)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1]], true);\r\n    //    else if(amts.length == 3)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2]], true);\r\n    //    else if(amts.length == 4)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3]], true);\r\n    //    else if(amts.length == 5)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4]], true);\r\n    //    else if(amts.length == 6)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5]], true);\r\n    //    else if(amts.length == 7)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6]], true);\r\n    //    else if(amts.length == 8)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6], amts[7]], true);\r\n    //    else \r\n    //        revert('Unsupported amts.length');\r\n    //        \r\n    //    return lpt2uu(lpt, vol);\r\n    //}\r\n\t//\r\n\t//function usd2uu(address swap, address usd, uint amt) virtual public view returns (uint) {           // for StableSwap and underlying\r\n    //    uint n = getConfig(_NCoinsOfSwap_, swap);\r\n    //    require(n >= 2, 'Unsupported StableSwap contract');\r\n    //    uint[] memory amts = new uint[](n);\r\n    //    for(uint i=0; i<n; i++) {\r\n    //        if(StableSwap(swap).underlying_coins(int128(i)) == usd) {\r\n    //            amts[i] = amt;\r\n    //            return multi2uu(swap, amts);\r\n    //        }\r\n    //    }\r\n    //    revert('The swap do not support the usd');\r\n\t//}\r\n\t\r\n\t//function mint(address swap2, uint[] memory amts, uint minMint) virtual public returns (uint amt) {  // for StableSwap and interest-bearing assets, or Deposit and underlying_coins\r\n    //    address lpt = address(getConfig(_lptOfSwap_, swap2));\r\n    //    require(lpt != address(0), 'Unsupported StableSwap or Deposit contract');\r\n    //    uint vol = lptBalance(lpt);\r\n    //    \r\n    //    if(amts.length == 2)\r\n    //        StableSwap(swap2).add_liquidity([amts[0], amts[1]], 0);\r\n    //    else if(amts.length == 3)\r\n    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2]], 0);\r\n    //    else if(amts.length == 4)\r\n    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3]], 0);\r\n    //    else if(amts.length == 5)\r\n    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3], amts[4]], 0);\r\n    //    else if(amts.length == 6)\r\n    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5]], 0);\r\n    //    else if(amts.length == 7)\r\n    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6]], 0);\r\n    //    else if(amts.length == 8)\r\n    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6], amts[7]], 0);\r\n    //    else \r\n    //        revert('Unsupported amts.length');\r\n    //        \r\n    //    vol = lptBalance(lpt).sub(vol);\r\n    //    amt = lpt2uu(lpt, vol);\r\n    //    require(amt >= minMint, 'Slippage screwed you');\r\n    //    return _mint(_msgSender(), amt);\r\n\t//}\r\n\t//\r\n\t//function mint(address swap2, address usd, uint amt, uint minMint) virtual public returns (uint) {   // for StableSwap and interest-bearing asset, or Deposit and underlying \r\n    //    uint n = getConfig(_NCoinsOfSwap_, swap2);\r\n    //    require(n >= 2, 'Unsupported StableSwap or Deposit contract');\r\n    //    uint[] memory amts = new uint[](n);\r\n    //    for(uint i=0; i<n; i++) {\r\n    //        if(StableSwap(swap2).coins(int128(i)) == usd || StableSwap(swap2).underlying_coins(int128(i)) == usd) {\r\n    //            amts[i] = amt;\r\n    //            return mint(swap2, amts, minMint);\r\n    //        }\r\n    //    }\r\n    //    revert('The swap2 do not support the usd');\r\n\t//}\r\n\r\n\t//function uu2usd(uint amt, address depo, address usd) virtual public view returns (uint) {           // for Deposit and underlying\r\n    //    address lpt = address(getConfig(_lptOfSwap_, depo));\r\n    //    require(lpt != address(0), 'Unsupported Deposit contract');\r\n    //    uint vol = uu2lpt(amt, lpt);\r\n    //    \r\n    //    int128 n = int128(getConfig(_NCoinsOfSwap_, depo));\r\n    //    require(n >= 2, 'Unsupported StableSwap contract');\r\n    //    for(int128 i=0; i<n; i++) \r\n    //        if(Deposit(depo).underlying_coins(i) == usd)\r\n    //            return Deposit(depo).calc_withdraw_one_coin(vol, i);\r\n    //    \r\n    //    revert('The depo do not support the usd');\r\n\t//}\r\n\t//\r\n\t//function uu4multi(address swap, uint[] memory amts) virtual public view returns (uint vol) {        // for StableSwap and underlying_coins\r\n    //    address lpt = address(getConfig(_lptOfSwap_, swap));\r\n    //    require(lpt != address(0), 'Unsupported StableSwap contract');\r\n    //    \r\n    //    if(amts.length == 2)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1]], false);\r\n    //    else if(amts.length == 3)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2]], false);\r\n    //    else if(amts.length == 4)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3]], false);\r\n    //    else if(amts.length == 5)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4]], false);\r\n    //    else if(amts.length == 6)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5]], false);\r\n    //    else if(amts.length == 7)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6]], false);\r\n    //    else if(amts.length == 8)\r\n    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6], amts[7]], false);\r\n    //    else \r\n    //        revert('Unsupported amts.length');\r\n    //        \r\n    //    return lpt2uu(lpt, vol);\r\n\t//}\r\n\t\r\n\t//function burn(uint amt, address depo, address usd, uint minU) virtual public returns (uint u) {     // for Deposit and underlying\r\n    //    address lpt = address(getConfig(_lptOfSwap_, depo));\r\n    //    require(lpt != address(0), 'Unsupported Deposit contract');\r\n    //    \r\n    //    uint vol = uu2lpt(amt, lpt);\r\n    //    if(vol == lptBalance(lpt))\r\n    //        amt = lpt2uu(lpt, vol);\r\n    //    _burn(_msgSender(), amt);\r\n    //    \r\n    //    int128 n = int128(getConfig(_NCoinsOfSwap_, depo));\r\n    //    require(n >= 2, 'Unsupported StableSwap contract');\r\n    //    for(int128 i=0; i<n; i++) {\r\n    //        if(Deposit(depo).underlying_coins(i) == usd) {\r\n    //            Deposit(depo).remove_liquidity_one_coin(vol, i, 0);\r\n    //            u = IERC20(usd).balanceOf(address(this));\r\n    //            require(u >= minU, 'Slippage screwed you');\r\n    //            usd.safeTransfer(_msgSender(), u);\r\n    //        }\r\n    //    }\r\n    //    revert('The depo do not support the usd');\r\n\t//}\r\n    //\r\n\t//function burn(uint amt, address swap2, uint[] calldata minAmts) virtual external returns (uint[] memory amts) {     // for StableSwap and interest-bearing assets, or Deposit and underlying_coins\r\n    //    address lpt = address(getConfig(_lptOfSwap_, swap2));\r\n    //    require(lpt != address(0), 'Unsupported StableSwap or Deposit contract');\r\n    //    \r\n    //    uint vol = uu2lpt(amt, lpt);\r\n    //    if(vol == lptBalance(lpt))\r\n    //        amt = lpt2uu(lpt, vol);\r\n    //    _burn(_msgSender(), amt);\r\n    //    \r\n    //    if(minAmts.length == 2)\r\n    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1]]);\r\n    //    else if(minAmts.length == 3)\r\n    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2]]);\r\n    //    else if(minAmts.length == 4)\r\n    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3]]);\r\n    //    else if(minAmts.length == 5)\r\n    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3], minAmts[4]]);\r\n    //    else if(minAmts.length == 6)\r\n    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3], minAmts[4], minAmts[5]]);\r\n    //    else if(minAmts.length == 7)\r\n    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3], minAmts[4], minAmts[5], minAmts[6]]);\r\n    //    else if(minAmts.length == 8)\r\n    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3], minAmts[4], minAmts[5], minAmts[6], minAmts[7]]);\r\n    //    else \r\n    //        revert('Unsupported minAmts.length');\r\n    //        \r\n    //    amts = new uint[](minAmts.length);\r\n    //    for(uint i=0; i<amts.length; i++) {\r\n    //        address coin = StableSwap(swap2).coins(int128(i));\r\n    //        amt = IERC20(coin).balanceOf(address(this));\r\n    //        if(amt > 0) {\r\n    //            coin.safeTransfer(_msgSender(), amt);\r\n    //            amts[i] = amt;\r\n    //        }\r\n    //        coin = StableSwap(swap2).underlying_coins(int128(i));\r\n    //        amt = IERC20(coin).balanceOf(address(this));\r\n    //        if(amt > 0) {\r\n    //            coin.safeTransfer(_msgSender(), amt);\r\n    //            amts[i] = amts[i].add(amt);\r\n    //        }\r\n    //    }\r\n\t//}\r\n    //\r\n\t//function burn(address swap2, uint[] calldata amts, uint maxBurn) virtual external returns (uint amtBurn) {          // for StableSwap and interest-bearing assets, or Deposit and underlying_coins\r\n    //    address lpt = address(getConfig(_lptOfSwap_, swap2));\r\n    //    require(lpt != address(0), 'Unsupported StableSwap or Deposit contract');\r\n    //    uint vol = lptBalance(lpt);\r\n    //    \r\n    //    uint maxVol = uint(-1); //uu2lpt(maxBurn, lpt);\r\n    //    if(amts.length == 2)\r\n    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1]], maxVol);\r\n    //    else if(amts.length == 3)\r\n    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2]], maxVol);\r\n    //    else if(amts.length == 4)\r\n    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3]], maxVol);\r\n    //    else if(amts.length == 5)\r\n    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3], amts[4]], maxVol);\r\n    //    else if(amts.length == 6)\r\n    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5]], maxVol);\r\n    //    else if(amts.length == 7)\r\n    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6]], maxVol);\r\n    //    else if(amts.length == 8)\r\n    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6], amts[7]], maxVol);\r\n    //    else \r\n    //        revert('Unsupported amts.length');\r\n    //        \r\n    //    vol = vol.sub(lptBalance(lpt));\r\n    //    amtBurn = lpt2uu(lpt, vol);\r\n    //    require(amtBurn <= maxBurn, 'Slippage screwed you');\r\n    //    _burn(_msgSender(), amtBurn);\r\n\t//    \r\n    //    for(uint i=0; i<amts.length; i++) {\r\n    //        address coin = StableSwap(swap2).coins(int128(i));\r\n    //        uint amt = IERC20(coin).balanceOf(address(this));\r\n    //        if(amt > 0)\r\n    //            coin.safeTransfer(_msgSender(), amt);\r\n    //            \r\n    //        coin = StableSwap(swap2).underlying_coins(int128(i));\r\n    //        amt = IERC20(coin).balanceOf(address(this));\r\n    //        if(amt > 0)\r\n    //            coin.safeTransfer(_msgSender(), amt);\r\n    //    }\r\n\t//}\r\n\t\r\n}\r\n\r\n\r\ninterface StableSwap {\r\n    function A() external view returns (uint);\r\n    function coins(int128) external view returns (address);\r\n    function underlying_coins(int128) external view returns (address);\r\n    \r\n    function get_virtual_price() external view returns (uint);\r\n\r\n    function calc_token_amount(uint[2] calldata amounts, bool deposit) external view returns (uint);\r\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\r\n    function calc_token_amount(uint[4] calldata amounts, bool deposit) external view returns (uint);\r\n    function calc_token_amount(uint[5] calldata amounts, bool deposit) external view returns (uint);\r\n    function calc_token_amount(uint[6] calldata amounts, bool deposit) external view returns (uint);\r\n    function calc_token_amount(uint[7] calldata amounts, bool deposit) external view returns (uint);\r\n    function calc_token_amount(uint[8] calldata amounts, bool deposit) external view returns (uint);\r\n\r\n    function add_liquidity(uint[2] calldata amounts, uint min_mint_amount) external;\r\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\r\n    function add_liquidity(uint[4] calldata amounts, uint min_mint_amount) external;\r\n    function add_liquidity(uint[5] calldata amounts, uint min_mint_amount) external;\r\n    function add_liquidity(uint[6] calldata amounts, uint min_mint_amount) external;\r\n    function add_liquidity(uint[7] calldata amounts, uint min_mint_amount) external;\r\n    function add_liquidity(uint[8] calldata amounts, uint min_mint_amount) external;\r\n    \r\n    function remove_liquidity(uint amount, uint[2] calldata min_amounts) external;\r\n    function remove_liquidity(uint amount, uint[3] calldata min_amounts) external;\r\n    function remove_liquidity(uint amount, uint[4] calldata min_amounts) external;\r\n    function remove_liquidity(uint amount, uint[5] calldata min_amounts) external;\r\n    function remove_liquidity(uint amount, uint[6] calldata min_amounts) external;\r\n    function remove_liquidity(uint amount, uint[7] calldata min_amounts) external;\r\n    function remove_liquidity(uint amount, uint[8] calldata min_amounts) external;\r\n\r\n    function remove_liquidity_imbalance(uint[2] calldata amounts, uint max_burn_amount) external;\r\n    function remove_liquidity_imbalance(uint[3] calldata amounts, uint max_burn_amount) external;\r\n    function remove_liquidity_imbalance(uint[4] calldata amounts, uint max_burn_amount) external;\r\n    function remove_liquidity_imbalance(uint[5] calldata amounts, uint max_burn_amount) external;\r\n    function remove_liquidity_imbalance(uint[6] calldata amounts, uint max_burn_amount) external;\r\n    function remove_liquidity_imbalance(uint[7] calldata amounts, uint max_burn_amount) external;\r\n    function remove_liquidity_imbalance(uint[8] calldata amounts, uint max_burn_amount) external;\r\n}\r\n\r\n\r\ninterface Deposit {\r\n    function curve() external view returns (address);\r\n    function underlying_coins(int128) external view returns (address);\r\n    function calc_withdraw_one_coin(uint token_amount, int128 i) external view returns (uint);\r\n    function remove_liquidity_one_coin(uint token_amount, int128 i, uint min_uamount) external;\r\n}\r\n\r\n\r\ninterface Gauge {\r\n    function minter()                       external view returns (address);\r\n    function crv_token()                    external view returns (address);\r\n    function rewarded_token()               external view returns (address);\r\n    function reward_contract()              external view returns (address);\r\n    function claimable_tokens(address addr) external view returns (uint);\r\n    function claimable_reward(address addr) external view returns (uint);\r\n    function claimable_reward2(address addr) external view returns (uint);\r\n    function balanceOf(address)             external view returns (uint);\r\n\r\n    function deposit(uint _value) external;\r\n    function withdraw(uint _value) external;\r\n    function claim_rewards() external;\r\n}\r\n\r\n\r\ninterface Minter {\r\n    function mint(address gauge) external;\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nvi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"AddLPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tip\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"ClaimTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"}],\"name\":\"RemoveLPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remain\",\"type\":\"uint256\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tip\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nvi\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"addLPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minVol\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"claimTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tip\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acct\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acct\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"up_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimeSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"lpt2uu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"}],\"name\":\"lptBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lptN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"}],\"name\":\"lptPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lptTWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMint\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"netValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"}],\"name\":\"netValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"}],\"name\":\"removeLPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remain\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"settleable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tip\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"tryAddReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"up\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"up2uu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"upApprove_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"upBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"upPermit_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upPriceFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"upTransferFrom_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"upTransfer_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpt\",\"type\":\"address\"}],\"name\":\"uu2lpt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"uu2up\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UU","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d703acbabc23625944644afbefd5a34acb48a08803205168cb204be2ebab4cc5"}]}