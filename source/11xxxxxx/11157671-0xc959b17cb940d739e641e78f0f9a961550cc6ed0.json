{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// \n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// \ncontract HoneycombV3 is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  // Info of each user.\n  struct UserInfo {\n    uint256 amount;     // How many staking tokens the user has provided.\n    uint256 rewardDebt; // Reward debt.\n    uint256 mined;\n    uint256 collected;\n  }\n\n  struct CollectingInfo {\n    uint256 collectableTime;\n    uint256 amount;\n    bool collected;\n  }\n\n  // Info of each pool.\n  struct PoolInfo {\n    IERC20 stakingToken;           // Address of staking token contract.\n    uint256 allocPoint;       // How many allocation points assigned to this pool.\n    uint256 lastRewardBlock;  // Last block number that HONEYs distribution occurs.\n    uint256 accHoneyPerShare; // Accumulated HONEYs per share, times 1e12.\n    uint256 totalShares;\n  }\n\n  struct BatchInfo {\n    uint256 startBlock;\n    uint256 endBlock;\n    uint256 honeyPerBlock;\n    uint256 totalAllocPoint;\n  }\n\n  // Info of each batch\n  BatchInfo[] public batchInfo;\n  // Info of each pool at specified batch.\n  mapping (uint256 => PoolInfo[]) public poolInfo;\n  // Info of each user at specified batch and pool\n  mapping (uint256 => mapping (uint256 => mapping (address => UserInfo))) public userInfo;\n  mapping (uint256 => mapping (uint256 => mapping (address => CollectingInfo[]))) public collectingInfo;\n\n  IERC20 public honeyToken;\n  uint256 public collectingDuration = 86400 * 3;\n  uint256 public instantCollectBurnRate = 4000; // 40%\n  address public burnDestination;\n\n  event Deposit(address indexed user, uint256 indexed batch, uint256 indexed pid, uint256 amount);\n  event Withdraw(address indexed user, uint256 indexed batch, uint256 indexed pid, uint256 amount);\n  event EmergencyWithdraw(address indexed user, uint256 indexed batch, uint256 indexed pid, uint256 amount);\n\n  constructor (address _honeyToken, address _burnDestination) public {\n    honeyToken = IERC20(_honeyToken);\n    burnDestination = _burnDestination;\n  }\n\n  function addBatch(uint256 startBlock, uint256 endBlock, uint256 honeyPerBlock) public onlyOwner {\n    require(endBlock > startBlock, \"endBlock should be larger than startBlock\");\n    require(endBlock > block.number, \"endBlock should be larger than the current block number\");\n    require(startBlock > block.number, \"startBlock should be larger than the current block number\");\n    \n    if (batchInfo.length > 0) {\n      uint256 lastEndBlock = batchInfo[batchInfo.length - 1].endBlock;\n      require(startBlock >= lastEndBlock, \"startBlock should be >= the endBlock of the last batch\");\n    }\n\n    uint256 senderHoneyBalance = honeyToken.balanceOf(address(msg.sender));\n    uint256 requiredHoney = endBlock.sub(startBlock).mul(honeyPerBlock);\n    require(senderHoneyBalance >= requiredHoney, \"insufficient HONEY for the batch\");\n\n    honeyToken.safeTransferFrom(address(msg.sender), address(this), requiredHoney);\n    batchInfo.push(BatchInfo({\n      startBlock: startBlock,\n      endBlock: endBlock,\n      honeyPerBlock: honeyPerBlock,\n      totalAllocPoint: 0\n    }));\n  }\n\n  function addPool(uint256 batch, IERC20 stakingToken, uint256 multiplier) public onlyOwner {\n    require(batch < batchInfo.length, \"batch must exist\");\n    \n    BatchInfo storage targetBatch = batchInfo[batch];\n    if (targetBatch.startBlock <= block.number && block.number < targetBatch.endBlock) {\n      updateAllPools(batch);\n    }\n\n    uint256 lastRewardBlock = block.number > targetBatch.startBlock ? block.number : targetBatch.startBlock;\n    batchInfo[batch].totalAllocPoint = targetBatch.totalAllocPoint.add(multiplier);\n    poolInfo[batch].push(PoolInfo({\n      stakingToken: stakingToken,\n      allocPoint: multiplier,\n      lastRewardBlock: lastRewardBlock,\n      accHoneyPerShare: 0,\n      totalShares: 0\n    }));\n  }\n\n  // Return rewardable block count over the given _from to _to block.\n  function getPendingBlocks(uint256 batch, uint256 from, uint256 to) public view returns (uint256) {\n    require(batch < batchInfo.length, \"batch must exist\");   \n \n    BatchInfo storage targetBatch = batchInfo[batch];\n\n    if (to < targetBatch.startBlock) {\n      return 0;\n    }\n    \n    if (to > targetBatch.endBlock) {\n      if (from > targetBatch.endBlock) {\n        return 0;\n      } else {\n        return targetBatch.endBlock.sub(from);\n      }\n    } else {\n      return to.sub(from);\n    }\n  }\n\n  // View function to see pending HONEYs on frontend.\n  function minedHoney(uint256 batch, uint256 pid, address account) external view returns (uint256) {\n    require(batch < batchInfo.length, \"batch must exist\");   \n    require(pid < poolInfo[batch].length, \"pool must exist\");\n    BatchInfo storage targetBatch = batchInfo[batch];\n\n    if (block.number < targetBatch.startBlock) {\n      return 0;\n    }\n\n    PoolInfo storage pool = poolInfo[batch][pid];\n    UserInfo storage user = userInfo[batch][pid][account];\n    uint256 accHoneyPerShare = pool.accHoneyPerShare;\n    if (block.number > pool.lastRewardBlock && pool.totalShares != 0) {\n      uint256 pendingBlocks = getPendingBlocks(batch, pool.lastRewardBlock, block.number);\n      uint256 honeyReward = pendingBlocks.mul(targetBatch.honeyPerBlock).mul(pool.allocPoint).div(targetBatch.totalAllocPoint);\n      accHoneyPerShare = accHoneyPerShare.add(honeyReward.mul(1e12).div(pool.totalShares));\n    }\n    return user.amount.mul(accHoneyPerShare).div(1e12).sub(user.rewardDebt).add(user.mined);\n  }\n\n  function updateAllPools(uint256 batch) public {\n    require(batch < batchInfo.length, \"batch must exist\");\n\n    uint256 length = poolInfo[batch].length;\n    for (uint256 pid = 0; pid < length; ++pid) {\n      updatePool(batch, pid);\n    }\n  }\n\n  // Update reward variables of the given pool to be up-to-date.\n  function updatePool(uint256 batch, uint256 pid) public {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n\n    BatchInfo storage targetBatch = batchInfo[batch];\n    PoolInfo storage pool = poolInfo[batch][pid];\n\n    if (block.number < targetBatch.startBlock || block.number <= pool.lastRewardBlock || pool.lastRewardBlock > targetBatch.endBlock) {\n      return;\n    }\n    if (pool.totalShares == 0) {\n      pool.lastRewardBlock = block.number;\n      return;\n    }\n    uint256 pendingBlocks = getPendingBlocks(batch, pool.lastRewardBlock, block.number);\n    uint256 honeyReward = pendingBlocks.mul(targetBatch.honeyPerBlock).mul(pool.allocPoint).div(targetBatch.totalAllocPoint);\n    pool.accHoneyPerShare = pool.accHoneyPerShare.add(honeyReward.mul(1e12).div(pool.totalShares));\n    pool.lastRewardBlock = block.number;\n  }\n\n  // Deposit staking tokens for HONEY allocation.\n  function deposit(uint256 batch, uint256 pid, uint256 amount) public {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n\n    BatchInfo storage targetBatch = batchInfo[batch];\n\n    require(block.number < targetBatch.endBlock, \"batch ended\");\n\n    PoolInfo storage pool = poolInfo[batch][pid];\n    UserInfo storage user = userInfo[batch][pid][msg.sender];\n\n    // 1. Update pool.accHoneyPerShare\n    updatePool(batch, pid);\n\n    // 2. Transfer pending HONEY to user\n    if (user.amount > 0) {\n      uint256 pending = user.amount.mul(pool.accHoneyPerShare).div(1e12).sub(user.rewardDebt);\n      if (pending > 0) {\n        addToMined(batch, pid, msg.sender, pending);\n      }\n    }\n\n    // 3. Transfer Staking Token from user to honeycomb\n    if (amount > 0) {\n      pool.stakingToken.safeTransferFrom(address(msg.sender), address(this), amount);\n      user.amount = user.amount.add(amount);\n    }\n\n    // 4. Update user.rewardDebt\n    pool.totalShares = pool.totalShares.add(amount);\n    user.rewardDebt = user.amount.mul(pool.accHoneyPerShare).div(1e12);\n    emit Deposit(msg.sender, batch, pid, amount);\n  }\n\n  // Withdraw staking tokens.\n  function withdraw(uint256 batch, uint256 pid, uint256 amount) public {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n    UserInfo storage user = userInfo[batch][pid][msg.sender];\n    require(user.amount >= amount, \"insufficient balance\");\n\n    // 1. Update pool.accHoneyPerShare\n    updatePool(batch, pid);\n\n    // 2. Transfer pending HONEY to user\n    PoolInfo storage pool = poolInfo[batch][pid];\n    uint256 pending = user.amount.mul(pool.accHoneyPerShare).div(1e12).sub(user.rewardDebt);\n    if (pending > 0) {\n      addToMined(batch, pid, msg.sender, pending);\n    }\n\n    // 3. Transfer Staking Token from honeycomb to user\n    pool.stakingToken.safeTransfer(address(msg.sender), amount);\n    user.amount = user.amount.sub(amount);\n\n    // 4. Update user.rewardDebt\n    pool.totalShares = pool.totalShares.sub(amount);\n    user.rewardDebt = user.amount.mul(pool.accHoneyPerShare).div(1e12);\n    emit Withdraw(msg.sender, batch, pid, amount);\n  }\n\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\n  function emergencyWithdraw(uint256 batch, uint256 pid) public {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n\n    PoolInfo storage pool = poolInfo[batch][pid];\n    UserInfo storage user = userInfo[batch][pid][msg.sender];\n    pool.stakingToken.safeTransfer(address(msg.sender), user.amount);\n    emit EmergencyWithdraw(msg.sender, batch, pid, user.amount);\n    user.amount = 0;\n    user.rewardDebt = 0;\n  }\n\n  function migrate(uint256 toBatch, uint256 toPid, uint256 amount, uint256 fromBatch, uint256 fromPid) public {\n    require(toBatch < batchInfo.length, \"target batch must exist\");\n    require(toPid < poolInfo[toBatch].length, \"target pool must exist\");\n    require(fromBatch < batchInfo.length, \"source batch must exist\");\n    require(fromPid < poolInfo[fromBatch].length, \"source pool must exist\");\n\n    BatchInfo storage targetBatch = batchInfo[toBatch];\n    require(block.number < targetBatch.endBlock, \"batch ended\");\n\n    UserInfo storage userFrom = userInfo[fromBatch][fromPid][msg.sender];\n    if (userFrom.amount > 0) {\n      PoolInfo storage poolFrom = poolInfo[fromBatch][fromPid];\n      PoolInfo storage poolTo = poolInfo[toBatch][toPid];\n      require(address(poolFrom.stakingToken) == address(poolTo.stakingToken), \"must be the same token\");\n      withdraw(fromBatch, fromPid, amount);\n      deposit(toBatch, toPid, amount);\n    }\n  }\n\n  // Safe honey transfer function, just in case if rounding error causes pool to not have enough HONEYs.\n  function safeHoneyTransfer(uint256 batch, uint256 pid, address to, uint256 amount) internal {\n    uint256 honeyBal = honeyToken.balanceOf(address(this));\n    require(honeyBal > 0, \"insufficient HONEY balance\");\n\n    UserInfo storage user = userInfo[batch][pid][to];\n    if (amount > honeyBal) {\n      honeyToken.transfer(to, honeyBal);\n      user.collected = user.collected.add(honeyBal);\n    } else {\n      honeyToken.transfer(to, amount);\n      user.collected = user.collected.add(amount);\n    }\n  }\n\n  function addToMined(uint256 batch, uint256 pid, address account, uint256 amount) internal {\n    UserInfo storage user = userInfo[batch][pid][account];\n    user.mined = user.mined.add(amount);\n  }\n\n  function startCollecting(uint256 batch, uint256 pid) external {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n\n    withdraw(batch, pid, 0);\n    \n    UserInfo storage user = userInfo[batch][pid][msg.sender];\n    CollectingInfo[] storage collecting = collectingInfo[batch][pid][msg.sender];\n\n    if (user.mined > 0) {\n      collecting.push(CollectingInfo({\n        collectableTime: block.timestamp + collectingDuration,\n        amount: user.mined,\n        collected: false\n      }));\n      user.mined = 0;\n    }\n  }\n\n  function collectingHoney(uint256 batch, uint256 pid, address account) external view returns (uint256) {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n\n    CollectingInfo[] storage collecting = collectingInfo[batch][pid][account];\n    uint256 total = 0;\n    for (uint i = 0; i < collecting.length; ++i) {\n      if (!collecting[i].collected && block.timestamp < collecting[i].collectableTime) {\n        total = total.add(collecting[i].amount);\n      }\n    }\n    return total;\n  }\n\n  function collectableHoney(uint256 batch, uint256 pid, address account) external view returns (uint256) {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n\n    CollectingInfo[] storage collecting = collectingInfo[batch][pid][account];\n    uint256 total = 0;\n    for (uint i = 0; i < collecting.length; ++i) {\n      if (!collecting[i].collected && block.timestamp >= collecting[i].collectableTime) {\n        total = total.add(collecting[i].amount);\n      }\n    }\n    return total;\n  }\n\n  function collectHoney(uint256 batch, uint256 pid) external {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n\n    CollectingInfo[] storage collecting = collectingInfo[batch][pid][msg.sender];\n    require(collecting.length > 0, \"nothing to collect\");\n\n    uint256 total = 0;\n    for (uint i = 0; i < collecting.length; ++i) {\n      if (!collecting[i].collected && block.timestamp >= collecting[i].collectableTime) {\n        total = total.add(collecting[i].amount);\n        collecting[i].collected = true;\n      }\n    }\n\n    safeHoneyTransfer(batch, pid, msg.sender, total);\n  }\n\n  function instantCollectHoney(uint256 batch, uint256 pid) external {\n    require(batch < batchInfo.length, \"batch must exist\");\n    require(pid < poolInfo[batch].length, \"pool must exist\");\n\n    withdraw(batch, pid, 0);\n    \n    UserInfo storage user = userInfo[batch][pid][msg.sender];\n    if (user.mined > 0) {\n      uint256 portion = 10000 - instantCollectBurnRate;\n      safeHoneyTransfer(batch, pid, msg.sender, user.mined.mul(portion).div(10000));\n      honeyToken.transfer(burnDestination, user.mined.mul(instantCollectBurnRate).div(10000));\n      user.mined = 0;\n    }\n  }\n\n  function setInstantCollectBurnRate(uint256 value) public onlyOwner {\n    require(value <= 10000, \"Value range: 0 ~ 10000\");\n    instantCollectBurnRate = value;\n  }\n\n  function setCollectingDuration(uint256 value) public onlyOwner {\n    collectingDuration = value;\n  }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_honeyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnDestination\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"honeyPerBlock\",\"type\":\"uint256\"}],\"name\":\"addBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"honeyPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"collectHoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"collectableHoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"collectingHoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collectableTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"collected\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getPendingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"honeyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantCollectBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"instantCollectHoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromPid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"minedHoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accHoneyPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCollectingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInstantCollectBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"startCollecting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"}],\"name\":\"updateAllPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mined\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HoneycombV3","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000037c9eb4cef7571f27136145c82c37a01f2a8aa16000000000000000000000000cf3ec27ad2d9be83fcead7629ac819f2b7eef699","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}