{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IAUSC.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IAUSC {\r\n  function rebase(uint256 epoch, uint256 supplyDelta, bool positive) external;\r\n  function mint(address to, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/IPoolEscrow.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IPoolEscrow {\r\n  function notifySecondaryTokens(uint256 number) external;\r\n}\r\n\r\n// File: contracts/BasicRebaser.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicRebaser {\r\n\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  event Updated(uint256 xau, uint256 ausc);\r\n  event NoUpdateXAU();\r\n  event NoUpdateAUSC();\r\n  event NoSecondaryMint();\r\n  event NoRebaseNeeded();\r\n\r\n  uint256 public constant BASE = 1e18;\r\n  uint256 public constant WINDOW_SIZE = 12;\r\n\r\n  address public ausc;\r\n  uint256[] public pricesXAU = new uint256[](12);\r\n  uint256[] public pricesAUSC = new uint256[](12);\r\n  uint256 public pendingXAUPrice = 0;\r\n  uint256 public pendingAUSCPrice = 0;\r\n  bool public noPending = true;\r\n  uint256 public averageXAU;\r\n  uint256 public averageAUSC;\r\n  uint256 public lastUpdate;\r\n  uint256 public frequency = 1 hours;\r\n  uint256 public counter = 0;\r\n  uint256 public epoch = 1;\r\n  address public secondaryPool;\r\n  address public governance;\r\n\r\n  uint256 public nextRebase = 0;\r\n  uint256 public constant REBASE_DELAY = 12 hours;\r\n\r\n  modifier onlyGov() {\r\n    require(msg.sender == governance, \"only gov\");\r\n    _;\r\n  }\r\n\r\n  constructor (address token, address _secondaryPool) public {\r\n    ausc = token;\r\n    secondaryPool = _secondaryPool;\r\n    governance = msg.sender;\r\n  }\r\n\r\n  function setNextRebase(uint256 next) external onlyGov {\r\n    require(nextRebase == 0, \"Only one time activation\");\r\n    nextRebase = next;\r\n  }\r\n\r\n  function setGovernance(address account) external onlyGov {\r\n    governance = account;\r\n  }\r\n\r\n  function setSecondaryPool(address pool) external onlyGov {\r\n    secondaryPool = pool;\r\n  }\r\n\r\n  function checkRebase() external {\r\n    // ausc ensures that we do not have smart contracts rebasing\r\n    require (msg.sender == address(ausc), \"only through ausc\");\r\n    rebase();\r\n    recordPrice();\r\n  }\r\n\r\n  function recordPrice() public {\r\n    if (msg.sender != tx.origin && msg.sender != address(ausc)) {\r\n      // smart contracts could manipulate data via flashloans,\r\n      // thus we forbid them from updating the price\r\n      return;\r\n    }\r\n\r\n    if (block.timestamp < lastUpdate + frequency) {\r\n      // addition is running on timestamps, this will never overflow\r\n      // we leave at least the specified period between two updates\r\n      return;\r\n    }\r\n\r\n    (bool successXAU, uint256 priceXAU) = getPriceXAU();\r\n    (bool successAUSC, uint256 priceAUSC) = getPriceAUSC();\r\n    if (!successAUSC) {\r\n      // price of AUSC was not returned properly\r\n      emit NoUpdateAUSC();\r\n      return;\r\n    }\r\n    if (!successXAU) {\r\n      // price of XAU was not returned properly\r\n      emit NoUpdateXAU();\r\n      return;\r\n    }\r\n    lastUpdate = block.timestamp;\r\n\r\n    if (noPending) {\r\n      // we start recording with 1 hour delay\r\n      pendingXAUPrice = priceXAU;\r\n      pendingAUSCPrice = priceAUSC;\r\n      noPending = false;\r\n    } else if (counter < WINDOW_SIZE) {\r\n      // still in the warming up phase\r\n      averageXAU = averageXAU.mul(counter).add(pendingXAUPrice).div(counter.add(1));\r\n      averageAUSC = averageAUSC.mul(counter).add(pendingAUSCPrice).div(counter.add(1));\r\n      pricesXAU[counter] = pendingXAUPrice;\r\n      pricesAUSC[counter] = pendingAUSCPrice;\r\n      pendingXAUPrice = priceXAU;\r\n      pendingAUSCPrice = priceAUSC;\r\n      counter++;\r\n    } else {\r\n      uint256 index = counter % WINDOW_SIZE;\r\n      averageXAU = averageXAU.mul(WINDOW_SIZE).sub(pricesXAU[index]).add(pendingXAUPrice).div(WINDOW_SIZE);\r\n      averageAUSC = averageAUSC.mul(WINDOW_SIZE).sub(pricesAUSC[index]).add(pendingAUSCPrice).div(WINDOW_SIZE);\r\n      pricesXAU[index] = pendingXAUPrice;\r\n      pricesAUSC[index] = pendingAUSCPrice;\r\n      pendingXAUPrice = priceXAU;\r\n      pendingAUSCPrice = priceAUSC;\r\n      counter++;\r\n    }\r\n    emit Updated(pendingXAUPrice, pendingAUSCPrice);\r\n  }\r\n\r\n  function rebase() public {\r\n    // We want to rebase only at 1pm UTC and 12 hours later\r\n    if (block.timestamp < nextRebase) {\r\n      return;\r\n    } else {\r\n      nextRebase = nextRebase + REBASE_DELAY;\r\n    }\r\n\r\n    // only rebase if there is a 5% difference between the price of XAU and AUSC\r\n    uint256 highThreshold = averageXAU.mul(105).div(100);\r\n    uint256 lowThreshold = averageXAU.mul(95).div(100);\r\n\r\n    if (averageAUSC > highThreshold) {\r\n      // AUSC is too expensive, this is a positive rebase increasing the supply\r\n      uint256 currentSupply = IERC20(ausc).totalSupply();\r\n      uint256 desiredSupply = currentSupply.mul(averageAUSC).div(averageXAU);\r\n      uint256 secondaryPoolBudget = desiredSupply.sub(currentSupply).mul(10).div(100);\r\n      desiredSupply = desiredSupply.sub(secondaryPoolBudget);\r\n\r\n      // Cannot underflow as desiredSupply > currentSupply, the result is positive\r\n      // delta = (desiredSupply / currentSupply) * 100 - 100\r\n      uint256 delta = desiredSupply.mul(BASE).div(currentSupply).sub(BASE);\r\n      IAUSC(ausc).rebase(epoch, delta, true);\r\n\r\n      if (secondaryPool != address(0)) {\r\n        // notify the pool escrow that tokens are available\r\n        IAUSC(ausc).mint(address(this), secondaryPoolBudget);\r\n        IERC20(ausc).safeApprove(secondaryPool, 0);\r\n        IERC20(ausc).safeApprove(secondaryPool, secondaryPoolBudget);\r\n        IPoolEscrow(secondaryPool).notifySecondaryTokens(secondaryPoolBudget);\r\n      } else {\r\n        emit NoSecondaryMint();\r\n      }\r\n      epoch++;\r\n    } else if (averageAUSC < lowThreshold) {\r\n      // AUSC is too cheap, this is a negative rebase decreasing the supply\r\n      uint256 currentSupply = IERC20(ausc).totalSupply();\r\n      uint256 desiredSupply = currentSupply.mul(averageAUSC).div(averageXAU);\r\n\r\n      // Cannot overflow as desiredSupply > currentSupply\r\n      // delta = 100 - (desiredSupply / currentSupply) * 100\r\n      uint256 delta = uint256(BASE).sub(desiredSupply.mul(BASE).div(currentSupply));\r\n      IAUSC(ausc).rebase(epoch, delta, false);\r\n      epoch++;\r\n    } else {\r\n      // else the price is within bounds\r\n      emit NoRebaseNeeded();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Calculates how a rebase would look if it was triggered now.\r\n  */\r\n  function calculateRealTimeRebase() public view returns (uint256, uint256) {\r\n    // only rebase if there is a 5% difference between the price of XAU and AUSC\r\n    uint256 highThreshold = averageXAU.mul(105).div(100);\r\n    uint256 lowThreshold = averageXAU.mul(95).div(100);\r\n\r\n    if (averageAUSC > highThreshold) {\r\n      // AUSC is too expensive, this is a positive rebase increasing the supply\r\n      uint256 currentSupply = IERC20(ausc).totalSupply();\r\n      uint256 desiredSupply = currentSupply.mul(averageAUSC).div(averageXAU);\r\n      uint256 secondaryPoolBudget = desiredSupply.sub(currentSupply).mul(10).div(100);\r\n      desiredSupply = desiredSupply.sub(secondaryPoolBudget);\r\n\r\n      // Cannot underflow as desiredSupply > currentSupply, the result is positive\r\n      // delta = (desiredSupply / currentSupply) * 100 - 100\r\n      uint256 delta = desiredSupply.mul(BASE).div(currentSupply).sub(BASE);\r\n      return (delta, secondaryPool == address(0) ? 0 : secondaryPoolBudget);\r\n    } else if (averageAUSC < lowThreshold) {\r\n      // AUSC is too cheap, this is a negative rebase decreasing the supply\r\n      uint256 currentSupply = IERC20(ausc).totalSupply();\r\n      uint256 desiredSupply = currentSupply.mul(averageAUSC).div(averageXAU);\r\n\r\n      // Cannot overflow as desiredSupply > currentSupply\r\n      // delta = 100 - (desiredSupply / currentSupply) * 100\r\n      uint256 delta = uint256(BASE).sub(desiredSupply.mul(BASE).div(currentSupply));\r\n      return (delta, 0);\r\n    } else {\r\n      return (0,0);\r\n    }\r\n  }\r\n\r\n  function getPriceXAU() public view returns (bool, uint256);\r\n  function getPriceAUSC() public view returns (bool, uint256);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/ChainlinkOracle.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\ncontract ChainlinkOracle {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  address public constant oracle = 0x214eD9Da11D2fbe465a6fc601a91E62EbEc1a0D6;\r\n  uint256 public constant ozToMg = 311035000;\r\n  uint256 public constant ozToMgPrecision = 1e4;\r\n\r\n  constructor () public {\r\n  }\r\n\r\n  function getPriceXAU() public view returns (bool, uint256) {\r\n    // answer has 8 decimals, it is the price of 1 oz of gold in USD\r\n    // if the round is not completed, updated at is 0\r\n    (,int256 answer,,uint256 updatedAt,) = AggregatorV3Interface(oracle).latestRoundData();\r\n    // add 10 decimals at the end\r\n    return (updatedAt != 0, uint256(answer).mul(10).mul(ozToMgPrecision).div(ozToMg).mul(1e10));\r\n  }\r\n}\r\n\r\n// File: contracts/UniswapOracle.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\ncontract IUniswapRouterV2 {\r\n  function getAmountsOut(uint256 amountIn, address[] memory path) public view returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract UniswapOracle {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  address public constant oracle = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n  address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n  address public ausc;\r\n  address[] public path;\r\n\r\n  constructor (address token) public {\r\n    ausc = token;\r\n    path = [ausc, weth, usdc];\r\n  }\r\n\r\n  function getPriceAUSC() public view returns (bool, uint256) {\r\n    // returns the price with 6 decimals, but we want 18\r\n    uint256[] memory amounts = IUniswapRouterV2(oracle).getAmountsOut(1e18, path);\r\n    return (ausc != address(0), amounts[2].mul(1e12));\r\n  }\r\n}\r\n\r\n// File: contracts/Rebaser.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\ncontract Rebaser is BasicRebaser, UniswapOracle, ChainlinkOracle {\r\n\r\n  constructor (address token, address _treasury)\r\n  BasicRebaser(token, _treasury)\r\n  UniswapOracle(token) public {\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NoRebaseNeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NoSecondaryMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NoUpdateAUSC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NoUpdateXAU\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xau\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ausc\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REBASE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WINDOW_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ausc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"averageAUSC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"averageXAU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateRealTimeRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkRebase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceAUSC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceXAU\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ozToMg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ozToMgPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAUSCPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingXAUPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricesAUSC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricesXAU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recordPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondaryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"name\":\"setNextRebase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setSecondaryPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Rebaser","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"150","ConstructorArguments":"0000000000000000000000001c7bbadc81e18f7177a95eb1593e5f5f35861b10000000000000000000000000ad85eb3a26c4408ab51745d262567f867ce59708","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7b8a6146f847cfe84542afe4947ec8fe204bab6e4d994ede5e9d6b6aa70a1934"}]}