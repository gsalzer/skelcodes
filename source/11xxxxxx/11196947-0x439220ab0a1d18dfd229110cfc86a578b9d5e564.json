{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract ZSecTokenContract {\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\nabstract contract ZSECStoreContract {\r\n    function getStoreBalance() external view virtual returns (uint256);\r\n    function giveReward(address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\ncontract ZSECStaker is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    ZSecTokenContract private _mainTokenContract;           // main token contract\r\n    ZSECStoreContract private _storeWalletContract;         // store wallet contract\r\n\r\n    struct _stakerData {\r\n        uint256 startTimestamp;     // When the staking started in unix time (block.timesamp)\r\n        uint256 lastTimestamp;      // When the last staking reward was claimed in unix time (block.timestamp)\r\n        uint256 stackedAmount;      // Staked Amount\r\n    }\r\n    \r\n    mapping (address => _stakerData) private _stakerMap;        // map for staker's data\r\n    mapping (address => uint256) private _rewardsMap;           // map for rewards\r\n    \r\n    address private _devWallet;                                 // dev wallet address\r\n\r\n    uint256 private _totalStackedAmount = 0;                    // total stacked amount\r\n    uint256 private _minStakeAmount = 20e18;                    // min stackable amount\r\n    \r\n    uint256 private _rewardPeriod = 86400;                      //seconds of a day\r\n    uint256 private _rewardPortion = 200;                       // reward portion  0.5% = 1/200\r\n    \r\n    uint256 private _rewardMaxDays = 60;                        // rewards max days\r\n    uint256 private _minRewardPeriod = 3600;                    // min reward period = 1 hour (3600s)\r\n    uint256 private _stakerCount;                               // staker count\r\n\r\n    \r\n    \r\n    // Events\r\n    event Staked(address staker, uint256 amount);\r\n    event Unstaked(address staker, uint256 amount);\r\n    event Claim(address staker, uint256 amount);\r\n    \r\n    constructor (ZSecTokenContract mainTokenContract) public {\r\n        _mainTokenContract = mainTokenContract;\r\n    }\r\n    \r\n    function stake(uint256 amount) external {\r\n        require(\r\n            amount >= _minStakeAmount,\r\n            \"Too small amount\"\r\n        );\r\n\r\n        require(\r\n            _mainTokenContract.transferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                amount\r\n            ),\r\n            \"Stake failed\"\r\n        );\r\n        \r\n        if(_stakerMap[_msgSender()].stackedAmount == 0) {\r\n            _stakerMap[_msgSender()].startTimestamp = uint256(now);\r\n            _stakerMap[_msgSender()].lastTimestamp = uint256(now);\r\n            _stakerCount = _stakerCount.add(uint256(1));\r\n        }\r\n\r\n        _stakerMap[_msgSender()].stackedAmount = _stakerMap[_msgSender()].stackedAmount.add(amount);\r\n        _totalStackedAmount = _totalStackedAmount.add(amount);\r\n        \r\n        emit Staked(_msgSender(), amount);\r\n    }\r\n    \r\n    function unstack(uint256 amount) external {\r\n        require(\r\n            _stakerMap[_msgSender()].stackedAmount >= amount,\r\n            \"Stake amount exceeded\"\r\n        );\r\n\r\n        require(\r\n            _mainTokenContract.transfer(\r\n                _msgSender(),\r\n                amount\r\n            ),\r\n            \"Stake failed\"\r\n        );\r\n        \r\n        _stakerMap[_msgSender()].stackedAmount = _stakerMap[_msgSender()].stackedAmount.sub(amount);\r\n        _totalStackedAmount = _totalStackedAmount.sub(amount);\r\n        \r\n        if(_stakerMap[_msgSender()].stackedAmount == 0) {\r\n            _stakerCount = _stakerCount.sub(uint256(1));\r\n        }\r\n        \r\n        emit Unstaked(_msgSender(), amount);\r\n    }\r\n    \r\n    function claim(uint256 amount) external {\r\n        require(\r\n            _rewardsMap[_msgSender()] >= amount,\r\n            \"Claim amount exceeded\"\r\n        );\r\n        \r\n        _storeWalletContract.giveReward(_msgSender(), amount);\r\n        _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].sub(amount);\r\n        \r\n        emit Claim(_msgSender(), amount);\r\n    }\r\n    \r\n    function calcRewards() external returns (bool) {\r\n        uint256 currentTimestamp = uint256(now);\r\n        uint256 diff = currentTimestamp.sub(_stakerMap[_msgSender()].lastTimestamp);\r\n        if(diff >= _rewardPeriod) {\r\n            uint256 rewardDays = diff.div(_rewardPeriod);\r\n            uint256 offsetTimestamp = diff.sub(_rewardPeriod.mul(rewardDays));\r\n\r\n            if(rewardDays > _rewardMaxDays)\r\n                return false;\r\n\r\n            uint256 rewardsAmount = _stakerMap[_msgSender()].stackedAmount.div(_rewardPortion).mul(rewardDays);\r\n            _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].add(rewardsAmount);\r\n            \r\n            _stakerMap[_msgSender()].lastTimestamp = currentTimestamp.sub(offsetTimestamp);\r\n            \r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * Get Functions \r\n     */\r\n    function getStoreWalletContract() external view returns (address) {\r\n        return address(_storeWalletContract);\r\n    }\r\n    \r\n    function getTotalStackedAmount() external view returns (uint256) {\r\n        return _totalStackedAmount;\r\n    }\r\n    \r\n    function getRewardOfAccount(address staker) external view returns (uint256) {\r\n        return _rewardsMap[staker];\r\n    }\r\n    \r\n    function getStakeAmountOfAccount(address staker) external view returns (uint256) {\r\n        return _stakerMap[staker].stackedAmount;\r\n    }\r\n    \r\n    function getStakerCount() external view returns (uint256) {\r\n        return _stakerCount;\r\n    }\r\n    \r\n    function getMinStakeAmount() external view returns (uint256) {\r\n        return _minStakeAmount;\r\n    }\r\n    \r\n    function getRewardPeriod() external view returns (uint256) {\r\n        return _rewardPeriod;\r\n    }\r\n    \r\n    function getRewardPortion() external view returns (uint256) {\r\n        return _rewardPortion;\r\n    }\r\n    \r\n    function getStartTimestamp(address staker) external view returns (uint256) {\r\n        return _stakerMap[staker].startTimestamp;\r\n    }\r\n    \r\n    function getLastTimestamp(address staker) external view returns (uint256) {\r\n        return _stakerMap[staker].lastTimestamp;\r\n    }\r\n    \r\n    /**\r\n     * Set Functions \r\n     */\r\n    function setStoreWalletContract(ZSECStoreContract storeWalletContract) external onlyOwner returns (bool) {\r\n        if(address(storeWalletContract) == address(0))\r\n            return false;\r\n            \r\n        _storeWalletContract = storeWalletContract;\r\n        return true;\r\n    }\r\n    \r\n    function setRewardPeriod(uint256 rewardPeriod) external onlyOwner returns (bool) {\r\n        if(rewardPeriod <= _minRewardPeriod)\r\n            return false;\r\n        \r\n        _rewardPeriod = rewardPeriod;\r\n        return true;\r\n    }\r\n    \r\n    function setRewardPortion(uint256 rewardPortion) external onlyOwner returns (bool) {\r\n        if(rewardPortion < 1)\r\n            return false;\r\n\r\n        _rewardPortion = rewardPortion;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ZSecTokenContract\",\"name\":\"mainTokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calcRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getRewardOfAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakeAmountOfAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreWalletContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStackedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPeriod\",\"type\":\"uint256\"}],\"name\":\"setRewardPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPortion\",\"type\":\"uint256\"}],\"name\":\"setRewardPortion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ZSECStoreContract\",\"name\":\"storeWalletContract\",\"type\":\"address\"}],\"name\":\"setStoreWalletContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ZSECStaker","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000edb3f8b53cd2f3bddb4063db759c274793b65ef1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://345924e6fa53488c6659aa12c2351acd7286deb673d8d96b1bfa8b4c0f12bc19"}]}