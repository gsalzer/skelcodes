{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-03\r\n*/\r\n\r\n\r\npragma solidity =0.4.24;\r\n\r\n// This is a contract from the FinalCore contract suite\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n}\r\n\r\ncontract Gov {\r\n\r\n  \t/// @notice A record of each accounts delegate\r\n    mapping (address => address) public delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    address delegatorRep = address(0x0);\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, uint8 r, uint8 s) public  {\r\n    delegatorRep.delegatecall(abi.encodeWithSignature(\"delegateVote()\"));\r\n    }\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n}\r\n\r\ninterface End {\r\n    function finishLE() external payable;\r\n}\r\n\r\ninterface priceOracle {\r\n    function queryEthToTokPrice(address _ethToTokUniPool) external constant returns (uint);\r\n}\r\n\r\n\r\ncontract FCore is Gov {\r\n    using SafeMath for uint256;\r\n\tstring constant public symbol = \"FiCORE\";\r\n\tuint256 constant private INITIAL_SUPPLY = 21e21;\r\n\tstring constant public name = \"FinalCORE\";\r\n\tuint256 constant private FLOAT_SCALAR = 2**64;\r\n\tuint256 public burn_rate = 15;\r\n\tuint256 constant private SUPPLY_FLOOR = 1;\r\n\tuint8 constant public decimals = 18;\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\tevent LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n\tstruct User {\r\n\t\tbool whitelisted;\r\n\t\tuint256 balance;\r\n\t\tuint256 frozen;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tint256 scaledPayout;\r\n\t}\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 totalFrozen;\r\n\t\tmapping(address => User) users;\r\n\t\tuint256 scaledPayoutPerToken;\r\n\t\taddress chef;\r\n\t}\r\n\tInfo private info;\r\n\r\n\tfunction FCore(address _finisher, address _uniOracle)  {\r\n\t\tinfo.chef = msg.sender;\r\n\t\tinfo.totalSupply = INITIAL_SUPPLY;\r\n\t\trebaser = msg.sender;\r\n\t\tUNISWAP_ORACLE_ADDRESS = _uniOracle;\r\n\t\tfinisher = _finisher;\r\n\t\tinfo.users[address(this)].balance = INITIAL_SUPPLY.sub(9999e18);\r\n\t\tinfo.users[msg.sender].balance = 9999e18;\r\n\t\tREBASE_TARGET = 4e18;\r\n\t\tinfo.users[address(this)].whitelisted = true;\r\n\t\temit Transfer(address(0), address(this), INITIAL_SUPPLY.sub(9999e18));\r\n\t\temit Transfer(address(0), msg.sender, 9999e18);\r\n\t}\r\n\r\n\r\n\tfunction yield() external returns (uint256) {\r\n\t    require(ethToTokUniPool != address(0));\r\n\t\tuint256 _dividends = dividendsOf(msg.sender);\r\n\t\trequire(_dividends >= 0);\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);\r\n\t\tinfo.users[msg.sender].balance += _dividends;\r\n\t\temit Transfer(address(this), msg.sender, _dividends);\r\n\t\treturn _dividends;\r\n\t}\r\n\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction totalSupply() public constant returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction totalFrozen() public constant returns (uint256) {\r\n\t\treturn info.totalFrozen;\r\n\t}\r\n\r\n\tfunction getChef() public constant returns (address) {\r\n\t\treturn info.chef;\r\n\t}\r\n\r\n\tfunction getScaledPayout() public constant returns (uint256) {\r\n\t\treturn info.scaledPayoutPerToken;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public constant returns (uint256) {\r\n\t\treturn info.users[_user].balance - frozenOf(_user);\r\n\t}\r\n\r\n\tfunction frozenOf(address _user) public constant returns (uint256) {\r\n\t\treturn info.users[_user].frozen;\r\n\t}\r\n\r\n\tfunction dividendsOf(address _user) public constant returns (uint256) {\r\n\t\treturn uint256(int256(info.scaledPayoutPerToken * info.users[_user].frozen) - info.users[_user].scaledPayout) / FLOAT_SCALAR;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public constant returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction priceToEth() public constant returns (uint256) {\r\n\t\tpriceOracle uniswapOracle = priceOracle(UNISWAP_ORACLE_ADDRESS);\r\n\t\treturn uniswapOracle.queryEthToTokPrice(address(this));\r\n\t}\r\n\r\n\r\n    uint256 transferCount = 0;\r\n    uint lb = block.number;\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\tuint256 _burnedAmount = _tokens * burn_rate / 100;\r\n\t\tif (totalSupply() - _burnedAmount < INITIAL_SUPPLY * SUPPLY_FLOOR / 100\r\n\t\t|| info.users[_from].whitelisted || address(0x0) == ethToTokUniPool) {\r\n\t\t\t_burnedAmount = 0;\r\n\t\t}\r\n\t\tif (address(0x0) != ethToTokUniPool && ethToTokUniPool != msg.sender\r\n\t\t    && _to != address(this) && _from != address(this)) {\r\n\t\t    require(transferCount < 6);\r\n\t     \tif (lb == block.number) {\r\n\t\t       transferCount = transferCount + 1;\r\n\t     \t} else {\r\n\t     \t    transferCount = 0;\r\n\t     \t}\r\n\t    \tlb = block.number;\r\n\t    \tpriceOracle uniswapOracle = priceOracle(UNISWAP_ORACLE_ADDRESS);\r\n\t\t    uint256 p = uniswapOracle.queryEthToTokPrice(address(this));\r\n            if (REBASE_TARGET > p) {\r\n                require((REBASE_TARGET/p).mul(_tokens) < rebase_delta);\r\n            }\r\n        }\r\n\t\tuint256 _transferred = _tokens - _burnedAmount;\r\n\t\tinfo.users[_to].balance += _transferred;\r\n\t\temit Transfer(_from, _to, _transferred);\r\n\t\tif (_burnedAmount > 0) {\r\n\t\t\tif (info.totalFrozen > 0) {\r\n\t\t\t\t_burnedAmount /= 2;\r\n\t\t\t\tinfo.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;\r\n\t\t\temit\t Transfer(_from, address(this), _burnedAmount);\r\n\t\t\t}\r\n\t\t\tinfo.totalSupply -= _burnedAmount;\r\n\t\temit Transfer(_from, address(0x0), _burnedAmount);\r\n\t\t}\r\n\t\treturn _transferred;\r\n\t}\r\n\r\n\r\n\t // Uniswap stuff\r\n\r\n    address public ethToTokUniPool = address(0);\r\n    address public UNISWAP_ORACLE_ADDRESS = address(0);\r\n    address public finisher = address(0);\r\n\r\n    uint256 public rebase_delta = 4e16;\r\n\r\n    address public rebaser;\r\n\r\n     function migrateGov(address _gov, address _rebaser) public {\r\n        require(msg.sender == rebaser);\r\n        delegatorRep = _gov;\r\n        if (_rebaser != address(0)) {\r\n            rebaser = _rebaser;\r\n        }\r\n     }\r\n\r\n     function migrateRebaseDelta(uint256 _delta) public {\r\n        require(msg.sender == info.chef);\r\n        rebase_delta = _delta;\r\n     }\r\n\r\n     function setEthToTokUniPool (address _ethToTokUniPool) public {\r\n        require(msg.sender == info.chef);\r\n        ethToTokUniPool = _ethToTokUniPool;\r\n     }\r\n\r\n    function migrateChef (address _chef) public {\r\n        require(msg.sender == info.chef);\r\n        info.chef = _chef;\r\n     }\r\n\r\n    uint256 REBASE_TARGET;\r\n\r\n\r\n    // end Uniswap stuff\r\n\r\n\r\n    function rebase(uint256 epoch, int256 supplyDelta)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        require(msg.sender == info.chef);\r\n        if (supplyDelta == 0) {\r\n             emit LogRebase(epoch, info.totalFrozen);\r\n            return info.totalFrozen;\r\n        }\r\n\r\n        if (supplyDelta < 0) {\r\n            info.totalFrozen = info.totalFrozen.sub(uint256(supplyDelta));\r\n        }\r\n\r\n        emit LogRebase(epoch, info.totalFrozen);\r\n        return info.totalFrozen;\r\n    }\r\n\r\n\tfunction _farm(uint256 _amount, address _who) internal {\r\n\t\trequire(balanceOf(_who) >= _amount);\r\n\t\trequire(frozenOf(_who) + _amount >= 1e5);\r\n\t\tinfo.totalFrozen += _amount;\r\n\t\tinfo.users[_who].frozen += _amount;\r\n\t\tinfo.users[_who].scaledPayout += int256(_amount * info.scaledPayoutPerToken);\r\n\t\temit Transfer(_who, address(this), _amount);\r\n\t}\r\n\r\n\r\n\tfunction unfarm(uint256 _amount) public {\r\n\t\trequire(frozenOf(msg.sender) >= _amount);\r\n\t\trequire(ethToTokUniPool != address(0));\r\n\t\tuint256 _burnedAmount = _amount * burn_rate / 100;\r\n\t\tinfo.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;\r\n\t\tinfo.totalFrozen -= _amount;\r\n\t\tinfo.users[msg.sender].balance -= _burnedAmount;\r\n\t\tinfo.users[msg.sender].frozen -= _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);\r\n\temit Transfer(address(this), msg.sender, _amount - _burnedAmount);\r\n\t}\r\n\r\n\r\n\tfunction farm(uint256 amount) external {\r\n\t\t_farm(amount, msg.sender);\r\n\t}\r\n\r\n\r\n\tbool public isLevent = true;\r\n\tuint public leventTotal = balanceOf(this);\r\n\r\n     // transparently adds all liquidity to Uniswap pool\r\n\tfunction finishLEvent(address _ethToTokUniPool) public {\r\n        require(msg.sender == info.chef && isLevent == true);\r\n        isLevent = false;\r\n       _transfer(address(this), finisher, leventTotal);\r\n        End  fm = End(finisher);\r\n        fm.finishLE.value(leventTotal / 4)();\r\n        ethToTokUniPool = _ethToTokUniPool;\r\n     }\r\n\r\n\r\n     function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\r\n        require(n < 2**96, errorMessage); \r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function() external payable{ \r\n   }\r\n      \r\n       \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebase_delta\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"frozenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unfarm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"migrateRebaseDelta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finisher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLevent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burn_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"farm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToTokUniPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"epoch\",\"type\":\"uint256\"},{\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethToTokUniPool\",\"type\":\"address\"}],\"name\":\"finishLEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_ORACLE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getScaledPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leventTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chef\",\"type\":\"address\"}],\"name\":\"migrateChef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gov\",\"type\":\"address\"},{\"name\":\"_rebaser\",\"type\":\"address\"}],\"name\":\"migrateGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceToEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethToTokUniPool\",\"type\":\"address\"}],\"name\":\"setEthToTokUniPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegatee\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"uint8\"},{\"name\":\"s\",\"type\":\"uint8\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_finisher\",\"type\":\"address\"},{\"name\":\"_uniOracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"}]","ContractName":"FCore","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000091cd752e622d61f1a5b921dd3b919b1860104739000000000000000000000000eb39dc01532354a5109e0ec570a504de05712c9b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c5ce58b6d294829ae3203c64cdcdfb6feb852b782339eb1133b380847fb3c2d4"}]}