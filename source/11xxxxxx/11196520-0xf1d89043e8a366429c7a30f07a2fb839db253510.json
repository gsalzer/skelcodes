{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n// \r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nenum RebaseResult { Double, Park, Draw }\r\n\r\ninterface IPriceManager {\r\n    function averagePrice() external returns (uint32);\r\n    function lastAvgPrice() external view returns (uint32);\r\n    function setTautrino(address _tautrino) external;\r\n}\r\n\r\ninterface ITautrinoToken {\r\n    function rebase(RebaseResult result) external returns (uint);\r\n    function setGovernance(address _governance) external;\r\n}\r\n\r\ncontract TautrinoGovernance is Ownable {\r\n\r\n    event LogRebase(uint64 epoch, uint32 ethPrice, RebaseResult tauResult, uint tauTotalSupply, RebaseResult trinoResult, uint trinoTotalSupply);\r\n\r\n    uint64 public constant REBASE_CYCLE = 1 hours;\r\n\r\n    ITautrinoToken public tauToken;\r\n    ITautrinoToken public trinoToken;\r\n\r\n    IPriceManager public priceManager;\r\n\r\n    RebaseResult private _lastTauRebaseResult;\r\n    RebaseResult private _lastTrinoRebaseResult;\r\n\r\n    uint64 private _nextRebaseEpoch;\r\n    uint64 private _lastRebaseEpoch;\r\n\r\n    uint64 public rebaseOffset = 3 minutes;\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param _tauToken The address of TAU token.\r\n     * @param _trinoToken The address of TRINO token.\r\n     */\r\n\r\n    constructor(address _tauToken, address _trinoToken, uint64 _delay) public Ownable() {\r\n        tauToken = ITautrinoToken(_tauToken);\r\n        trinoToken = ITautrinoToken(_trinoToken);\r\n        _nextRebaseEpoch = uint64(block.timestamp - block.timestamp % 3600) + REBASE_CYCLE + _delay;\r\n    }\r\n\r\n    /**\r\n     * @dev Update rebase offset.\r\n     * @param _rebaseOffset new rebase offset.\r\n     */\r\n\r\n    function setRebaseOffset(uint64 _rebaseOffset) external onlyOwner {\r\n        rebaseOffset = _rebaseOffset;\r\n    }\r\n\r\n    /**\r\n     * @dev Rebase TAU and TRINO tokens.\r\n     */\r\n\r\n    function rebase() external onlyOwner {\r\n        require(_nextRebaseEpoch <= uint64(block.timestamp) + rebaseOffset, \"Not ready to rebase!\");\r\n\r\n        uint32 _ethPrice = priceManager.averagePrice();\r\n        uint32 _number = _ethPrice;\r\n\r\n        uint8 _even = 0;\r\n        uint8 _odd = 0;\r\n\r\n        while (_number > 0) {\r\n            if (_number % 2 == 1) {\r\n                _odd += 1;\r\n            } else {\r\n                _even += 1;\r\n            }\r\n            _number /= 10;\r\n        }\r\n\r\n        if (_even > _odd) {\r\n            // double balance\r\n            _lastTauRebaseResult = RebaseResult.Double;\r\n            _lastTrinoRebaseResult = RebaseResult.Park;\r\n        } else if (_even < _odd) {\r\n            // park balance\r\n            _lastTauRebaseResult = RebaseResult.Park;\r\n            _lastTrinoRebaseResult = RebaseResult.Double;\r\n        } else {\r\n            _lastTauRebaseResult = RebaseResult.Draw;\r\n            _lastTrinoRebaseResult = RebaseResult.Draw;\r\n        }\r\n\r\n        _lastRebaseEpoch = uint64(block.timestamp);\r\n        _nextRebaseEpoch = _nextRebaseEpoch + 1 hours;\r\n        if (_nextRebaseEpoch <= _lastRebaseEpoch) {\r\n            _nextRebaseEpoch = uint64(block.timestamp - block.timestamp % 3600) + REBASE_CYCLE;\r\n        }\r\n\r\n        uint _tauTotalSupply = tauToken.rebase(_lastTauRebaseResult);\r\n        uint _trinoTotalSupply = trinoToken.rebase(_lastTrinoRebaseResult);\r\n\r\n        emit LogRebase(_lastRebaseEpoch, _ethPrice, _lastTauRebaseResult, _tauTotalSupply, _lastTrinoRebaseResult, _trinoTotalSupply);\r\n    }\r\n\r\n    /**\r\n     * @return Price of eth used for last rebasing.\r\n     */\r\n\r\n    function lastAvgPrice() public view returns (uint32) {\r\n        return priceManager.lastAvgPrice();\r\n    }\r\n\r\n    /**\r\n     * @return Next rebase epoch.\r\n     */\r\n\r\n    function nextRebaseEpoch() public view returns (uint64) {\r\n        return _nextRebaseEpoch;\r\n    }\r\n\r\n    /**\r\n     * @return Last rebase epoch.\r\n     */\r\n\r\n    function lastRebaseEpoch() public view returns (uint64) {\r\n        return _lastRebaseEpoch;\r\n    }\r\n\r\n    /**\r\n     * @return Last rebase result.\r\n     */\r\n\r\n    function lastRebaseResult() public view returns (RebaseResult, RebaseResult) {\r\n        return (_lastTauRebaseResult, _lastTrinoRebaseResult);\r\n    }\r\n\r\n    /**\r\n     * @dev Migrate governance.\r\n     * @param _newGovernance new TautrinoGovernance address.\r\n     */\r\n\r\n    function migrateGovernance(address _newGovernance) external onlyOwner {\r\n        require(_newGovernance != address(0), \"invalid governance\");\r\n        tauToken.setGovernance(_newGovernance);\r\n        trinoToken.setGovernance(_newGovernance);\r\n\r\n        if (address(priceManager) != address(0)) {\r\n            priceManager.setTautrino(_newGovernance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update price manager.\r\n     * @param _priceManager The address of new price manager.\r\n     */\r\n\r\n    function setPriceManager(address _priceManager) external onlyOwner {\r\n        priceManager = IPriceManager(_priceManager);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tauToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trinoToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_delay\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethPrice\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"enum RebaseResult\",\"name\":\"tauResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tauTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum RebaseResult\",\"name\":\"trinoResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trinoTotalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REBASE_CYCLE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAvgPrice\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseEpoch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseResult\",\"outputs\":[{\"internalType\":\"enum RebaseResult\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum RebaseResult\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"migrateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebaseEpoch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceManager\",\"outputs\":[{\"internalType\":\"contract IPriceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseOffset\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceManager\",\"type\":\"address\"}],\"name\":\"setPriceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_rebaseOffset\",\"type\":\"uint64\"}],\"name\":\"setRebaseOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tauToken\",\"outputs\":[{\"internalType\":\"contract ITautrinoToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trinoToken\",\"outputs\":[{\"internalType\":\"contract ITautrinoToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TautrinoGovernance","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000009afa34ef0cfaf0a5baec71560acbe908f0250b2b000000000000000000000000af6ebc7a9ce00042f5fb8c5fc9b606ac660539e00000000000000000000000000000000000000000000000000000000000127500","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4c376307b2c71b85e0096bf7050d37a330ca44abca6bb7ed9e8cf3bd9a944423"}]}