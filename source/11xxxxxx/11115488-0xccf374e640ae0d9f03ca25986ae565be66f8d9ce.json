{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n// AutonomousSway.sol Delegate contract\r\n// Sean Behan - <contact@seanbehan.dev>\r\n// Monday, October 19th, 2020\r\n// Install Linux üêß\r\n\r\n// Delegate UNI to this contract and call vote(proposal_id) to vote NO to governance\r\n\r\n// forked from penguinparty.eth's CrowdProposalFactory @ 0xfb13251C994701b27CCFd4CCCcf5847aA29a3702\r\n// forked from Compound's autonomous proposal Factory  @ 0x524B54a6A7409A2Ac5b263Fb2A41DAC9d155ae71\r\n\r\ninterface IUni {\r\n    function delegate(address delegatee) external;\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address dst, uint rawAmount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ninterface IGovernorAlpha {\r\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\r\n    function castVote(uint proposalId, bool support) external;\r\n}\r\n\r\ncontract AutonomousSway {\r\n    /// @notice sway. the way you vote\r\n    bool public immutable sway = false;\r\n    \r\n    /// @notice The crowd proposal author\r\n    address payable public immutable author;\r\n\r\n    /// @notice Governance proposal data\r\n    address[] public targets;\r\n    uint[] public values;\r\n    string[] public signatures;\r\n    bytes[] public calldatas;\r\n    string public description;\r\n\r\n    /// @notice UNI token contract address\r\n    address public immutable uni;\r\n    /// @notice Uniswap protocol `GovernorAlpha` contract address\r\n    address public immutable governor;\r\n\r\n    /// @notice sway proposal id\r\n    uint public swayProposalId;\r\n    /// @notice Terminate flag\r\n    bool public terminated;\r\n\r\n    /// @notice An event emitted when the governance proposal is created\r\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\r\n    /// @notice An event emitted when the crowd proposal is terminated\r\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\r\n    /// @notice An event emitted when delegated votes are transfered to the governance proposal\r\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\r\n\r\n    /**\r\n    * @notice Construct crowd proposal\r\n    * @param author_ The crowd proposal author\r\n    * @param targets_ The ordered list of target addresses for calls to be made\r\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures_ The ordered list of function signatures to be called\r\n    * @param calldatas_ The ordered list of calldata to be passed to each call\r\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\r\n    * @param uni_ `UNI` token contract address\r\n    * @param governor_ Uniswap protocol `GovernorAlpha` contract address\r\n    */\r\n    constructor(address payable author_,\r\n                address[] memory targets_,\r\n                uint[] memory values_,\r\n                string[] memory signatures_,\r\n                bytes[] memory calldatas_,\r\n                string memory description_,\r\n                address uni_,\r\n\t        address governor_) {\r\n                    author = author_;\r\n\r\n                    // Save proposal data\r\n                    targets = targets_;\r\n                    values = values_;\r\n                    signatures = signatures_;\r\n                    calldatas = calldatas_;\r\n                    description = description_;\r\n\t\t    governor = governor_;\r\n\r\n                    // Save Uniswap contracts data\r\n                    uni = uni_;\r\n\r\n                    terminated = false;\r\n\r\n                    // Delegate votes to the crowd proposal\r\n                    IUni(uni_).delegate(address(this));\r\n                }\r\n\r\n                /// @notice Create governance proposal\r\n                function propose() external returns (uint) {\r\n                    require(swayProposalId == 0, 'CrowdProposal::propose: gov proposal already exists');\r\n                    require(!terminated, 'CrowdProposal::propose: proposal has been terminated');\r\n\r\n                    // Create sway proposal and save proposal id\r\n                    swayProposalId = IGovernorAlpha(governor).propose(targets, values, signatures, calldatas, description);\r\n\r\n                    emit CrowdProposalProposed(address(this), author, swayProposalId);\r\n                    return swayProposalId;\r\n                }\r\n\r\n                /// @notice Terminate the crowd proposal, send back staked UNI tokens\r\n                function terminate() external {\r\n                    require(msg.sender == author, 'CrowdProposal::terminate: only author can terminate');\r\n                    require(!terminated, 'CrowdProposal::terminate: proposal has been already terminated');\r\n\r\n                    terminated = true;\r\n\r\n                    // Transfer staked UNI tokens from the crowd proposal contract back to the author\r\n                    IUni(uni).transfer(author, IUni(uni).balanceOf(address(this)));\r\n\r\n                    emit CrowdProposalTerminated(address(this), author);\r\n                }\r\n\r\n                /// @notice Vote for the governance proposal with all delegated votes\r\n                function vote(uint proposal_id) external returns (bool) {\r\n                    IGovernorAlpha(governor).castVote(proposal_id, sway);\r\n\r\n                    emit CrowdProposalVoted(address(this), proposal_id);\r\n                    return (true);\r\n                }\r\n}\r\n\r\ncontract AutonomousSwayFactory {\r\n    /// @notice `UNI` token contract address\r\n    address public immutable uni;\r\n    /// @notice Uniswap protocol `GovernorAlpha` contract address\r\n    address public immutable sway;\r\n    /// @notice Minimum uni tokens required to create a crowd proposal\r\n    uint public immutable uniStakeAmount;\r\n\r\n    /// @notice An event emitted when a crowd proposal is created\r\n    event CrowdProposalCreated(address indexed proposal, address indexed author, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\r\n\r\n    /**\r\n    * @notice Construct a proposal factory for crowd proposals\r\n    * @param uni_ `UNI` token contract address\r\n    * @param sway_ Uniswap protocol `GovernorAlpha` contract address\r\n    * @param uniStakeAmount_ The minimum amount of uni tokes required for creation of a crowd proposal\r\n    */\r\n    constructor(address uni_,\r\n                address sway_,\r\n                uint uniStakeAmount_) {\r\n                    uni = uni_;\r\n                    uniStakeAmount = uniStakeAmount_;\r\n\t\t    sway = sway_;\r\n                }\r\n\r\n\r\n                /**\r\n                * @notice Create a new crowd proposal\r\n                * @notice Call `uni.approve(factory_address, uniStakeAmount)` before calling this method\r\n                * @param targets The ordered list of target addresses for calls to be made\r\n                * @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n                * @param signatures The ordered list of function signatures to be called\r\n                * @param calldatas The ordered list of calldata to be passed to each call\r\n                * @param description The block at which voting begins: holders must delegate their votes prior to this block\r\n                */\r\n                function createCrowdProposal(address[] memory targets,\r\n                                             uint[] memory values,\r\n                                             string[] memory signatures,\r\n                                             bytes[] memory calldatas,\r\n                                             string memory description) external {\r\n                                                 \r\n                                                 AutonomousSway proposal = new AutonomousSway(msg.sender, targets, values, signatures, calldatas, description, uni, sway);\r\n\r\n                                                 emit CrowdProposalCreated(address(proposal), msg.sender, targets, values, signatures, calldatas, description);\r\n\r\n                                                 // Stake UNI and force proposal to delegate votes to itself\r\n                                                 IUni(uni).transferFrom(msg.sender, address(proposal), uniStakeAmount);\r\n                                             }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uni_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sway_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniStakeAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"CrowdProposalCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createCrowdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uni\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AutonomousSwayFactory","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000005e4be8bc9637f0eaa1a755019e06a68ce081d58f000000000000000000000000000000000000000000000000000000003b9aca00","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7daa8b3683c48e1c43daf10028d094be8d7945f1c0aef14a227f797251165d10"}]}