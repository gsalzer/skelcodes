{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IGetBancorData {\r\n  function getBancorContractAddresByName(string calldata _name) external view returns (address result);\r\n}\r\n\r\ninterface IBancorFormula {\r\n  function fundCost(uint256 _supply,\r\n                    uint256 _reserveBalance,\r\n                    uint32 _reserveRatio,\r\n                    uint256 _amount)\r\n    external\r\n    view returns (uint256);\r\n}\r\n\r\ninterface IBancorConverter {\r\n  function reserveRatio() external view returns(uint32);\r\n  function connectorTokens(uint index) external view returns(address);\r\n  function getConnectorBalance(address _connectorToken) external view returns (uint256);\r\n  function connectorTokenCount() external view returns (uint16);\r\n}\r\n\r\n\r\ninterface ISmartToken {\r\n  function owner() external view returns(address);\r\n  function totalSupply() external view returns(uint256);\r\n}\r\n\r\ninterface IExchangePortal {\r\n  function getValueViaDEXsAgregators(address _from, address _to, uint256 _amount) external view returns (uint256);\r\n}\r\n\r\ncontract BancorPoolParser {\r\n  using SafeMath for uint256;\r\n  IGetBancorData public GetBancorData;\r\n  IExchangePortal public ExchangePortal;\r\n\r\n  constructor(address _GetBancorData, address _ExchangePortal) public {\r\n    GetBancorData = IGetBancorData(_GetBancorData);\r\n    ExchangePortal = IExchangePortal(_ExchangePortal);\r\n  }\r\n\r\n  // Works for new Bancor pools\r\n  // parse total value of pool conenctors\r\n  function parseConnectorsByPool(address _from, address _to, uint256 poolAmount)\r\n    external\r\n    view\r\n    returns(uint256)\r\n  {\r\n     // get common data\r\n     address converter = ISmartToken(address(_from)).owner();\r\n     uint16 connectorTokenCount = IBancorConverter(converter).connectorTokenCount();\r\n     uint256 poolTotalSupply = ISmartToken(address(_from)).totalSupply();\r\n     uint32 reserveRatio =  IBancorConverter(converter).reserveRatio();\r\n\r\n     IBancorFormula bancorFormula = IBancorFormula(\r\n       GetBancorData.getBancorContractAddresByName(\"BancorFormula\")\r\n     );\r\n\r\n     return calculateTotalSum(\r\n       converter,\r\n       poolTotalSupply,\r\n       reserveRatio,\r\n       connectorTokenCount,\r\n       bancorFormula,\r\n       _to,\r\n       poolAmount\r\n       );\r\n  }\r\n\r\n\r\n  // internal helper\r\n  function calculateTotalSum(\r\n    address converter,\r\n    uint256 poolTotalSupply,\r\n    uint32 reserveRatio,\r\n    uint16 connectorTokenCount,\r\n    IBancorFormula bancorFormula,\r\n    address _to,\r\n    uint256 poolAmount\r\n    )\r\n    internal\r\n    view\r\n    returns(uint256 totalValue)\r\n  {\r\n    for(uint16 i = 0; i < connectorTokenCount; i++){\r\n      // get amount of token in pool by pool input\r\n      address connectorToken = IBancorConverter(converter).connectorTokens(i);\r\n      uint256 connectorBalance = IBancorConverter(converter).getConnectorBalance(address(connectorToken));\r\n      uint256 amountByShare = bancorFormula.fundCost(poolTotalSupply, connectorBalance, reserveRatio, poolAmount);\r\n\r\n      // get ratio of pool token\r\n      totalValue = totalValue.add(ExchangePortal.getValueViaDEXsAgregators(connectorToken, _to, amountByShare));\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_GetBancorData\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ExchangePortal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExchangePortal\",\"outputs\":[{\"internalType\":\"contract IExchangePortal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetBancorData\",\"outputs\":[{\"internalType\":\"contract IGetBancorData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"}],\"name\":\"parseConnectorsByPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BancorPoolParser","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009c81d0b71ec9a0161e1b4563da73750e848894390000000000000000000000003e3c06d526b38f67d7a897bba20906f36d2793a3","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a4a3bf24f6e887eb33a902ced736ea1f6b6f982d86dd7be3382e21df110a0d88"}]}