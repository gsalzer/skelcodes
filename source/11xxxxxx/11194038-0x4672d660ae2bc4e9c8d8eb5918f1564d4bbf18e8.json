{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.4;\n\n\ncontract Ownable {\n\n    address private owner;\n    \n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    function changeOwner(address newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n}\n\ninterface Token {\n    function tokensSold(address buyer, uint256 amount) external  returns (bool success);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function burn(uint256 _value) external returns (bool success);\n}\n\ncontract YUICrowdSale is Ownable{\n    \n    using SafeMath for uint256;\n    \n    uint256 public priceFactor;\n    uint256 public totalSold;\n    address public tokenAddress;\n    uint256 public startTime = 1604772000;\n    uint256 public minimumBuyAmount = 10 ** 17;\n    address payable public walletAddress;\n    bool public crowdSaleStarted;\n    bool public crowdSaleEnded;\n    event TokensSold(address indexed to, uint256 amount);\n    \n    constructor(address payable _walletAddress) {\n        priceFactor = uint256(20);\n        walletAddress = _walletAddress;\n        tokenAddress = address(0x0);\n    }\n    \n    receive() external payable {\n        buy();\n    }\n    \n    function changeWallet (address payable _walletAddress) onlyOwner public {\n        walletAddress = _walletAddress;\n    }\n    \n    function setToken(address _tokenAddress) onlyOwner public {\n        tokenAddress = _tokenAddress;\n    }\n    \n    function isActive() private returns (bool) {\n        if (crowdSaleStarted) {\n            return true;\n        } else {\n            if (block.timestamp >= (startTime)) {\n                crowdSaleStarted = true;\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n    \n    function finish() onlyOwner public {\n        crowdSaleEnded = true;\n    }\n    \n    function buy() public payable {\n        require(isActive(), \"YUI Token Crowdsate is not active\");\n        require(!crowdSaleEnded, \"YUI Token Crowdsate ended\");\n        uint256 weiValue = msg.value;\n        require(weiValue >= minimumBuyAmount, \"Minimum amount is 0.1 eth\");\n        uint256 amount = weiValue.mul(priceFactor);\n        Token token = Token(tokenAddress);\n        require(walletAddress.send(weiValue));\n        require(token.tokensSold(msg.sender, amount));\n        totalSold += amount;\n        emit TokensSold(msg.sender, amount);\n    }\n    \n    function burnUnsold() onlyOwner public {\n        require(crowdSaleEnded, \"YUI Token Crowdsate is still active\");\n        Token token = Token(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        token.burn(amount);\n    }\n    \n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnUnsold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"YUICrowdSale","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c255c382f9dd9f0009400b3cb2d8052f6d8eb35c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}