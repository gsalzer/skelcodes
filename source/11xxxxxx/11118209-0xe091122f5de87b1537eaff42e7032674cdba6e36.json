{"status":"1","message":"OK","result":[{"SourceCode":"{\"ABIV2.sol\":{\"content\":\"pragma solidity 0.5.2;\\r\\n\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./MemberCertificateV2.sol\\u0027;\\r\\n\\r\\ncontract ABIV2 is Ownable{\\r\\n    event NewMemberCertificate(address memberAddr, bytes32 name, uint validityDate);\\r\\n    constructor() public{\\r\\n    }\\r\\n\\r\\n    function generateCertificate(bytes32 _name, uint _validityDate) public onlyOwner() returns(address){\\r\\n        MemberCertificateV2 member = new MemberCertificateV2(_name, _validityDate);\\r\\n        emit NewMemberCertificate(address(member), _name, _validityDate);\\r\\n        return address(member);\\r\\n    }\\r\\n    \\r\\n    function setName(address certificateAddr, bytes32 newName) onlyOwner() public {\\r\\n        MemberCertificateV2 member = MemberCertificateV2(certificateAddr);\\r\\n        member.setName(newName);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setValidityDate(address certificateAddr, uint newValidityDate) onlyOwner() public{\\r\\n        MemberCertificateV2 member = MemberCertificateV2(certificateAddr);\\r\\n        member.setValidityDate(newValidityDate);\\r\\n    }\\r\\n}\\r\\n/*\\r\\n1. deploy contract admin\\r\\n\\r\\ndeploy admin 0.050054 * 5,5jt = 275ribu\\r\\ndeploy abi 0.080423 * 5,5jt = 443ribu\\r\\nadd abi to admin 0.004351 * 5,5jt = 25ribu\\r\\ngenerate certificate 0.055407 * 5,5jt = 305ribu * 21 member = 6,4jt\\r\\n\\r\\n7,148,000\\r\\n\\r\\n\\r\\nV2\\r\\nDeploy abi 0.018428 * 6jt = 110ribu\\r\\nbikin member 0.009852 * 6jt = 60ribu\\r\\nupdate tiap tahun 0.00074 * 6jt = 4,4ribu\\r\\nincase mau set name 0.000739 * 6jt = 4,4ribu\\r\\n*current gas price = 22 wei\\r\\n*/\"},\"MemberCertificateV2.sol\":{\"content\":\"pragma solidity 0.5.2;\\r\\n\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\n\\r\\ncontract MemberCertificateV2 is Ownable{\\r\\n    address public creator;\\r\\n    uint public validityDate;\\r\\n    bytes32 public name;\\r\\n\\r\\n    event ChangeName(bytes32 prevName, bytes32 newName);\\r\\n    event ChangeValidityDate(uint prevValidityDate, uint newValidityDate);\\r\\n\\r\\n    constructor(bytes32 _name, uint _validityDate) public{\\r\\n        creator = msg.sender;\\r\\n        name = _name;\\r\\n        validityDate = _validityDate;\\r\\n    }\\r\\n\\r\\n    function setName(bytes32 newName) onlyOwner() public {\\r\\n        bytes32 prevName = name;\\r\\n        name = newName;\\r\\n        emit ChangeName(prevName, name);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setValidityDate(uint newValidityDate) onlyOwner() public{\\r\\n        uint prevValidityDate = validityDate;\\r\\n        validityDate = newValidityDate;\\r\\n        emit ChangeValidityDate(prevValidityDate, validityDate);\\r\\n    }\\r\\n\\r\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address of the owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if `msg.sender` is the owner of the contract.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to relinquish control of the contract.\\r\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\r\\n     * It will not be possible to call the functions with the `onlyOwner`\\r\\n     * modifier anymore.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"certificateAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"certificateAddr\",\"type\":\"address\"},{\"name\":\"newValidityDate\",\"type\":\"uint256\"}],\"name\":\"setValidityDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_validityDate\",\"type\":\"uint256\"}],\"name\":\"generateCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"memberAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"validityDate\",\"type\":\"uint256\"}],\"name\":\"NewMemberCertificate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ABIV2","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3e6bb7890cb61fb53b43f635830db4bb5fa688f8b44df2d32fc9d31f3be549a1"}]}