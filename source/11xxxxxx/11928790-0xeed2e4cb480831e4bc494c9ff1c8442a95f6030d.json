{"status":"1","message":"OK","result":[{"SourceCode":"{\"ACOPoolFactory2.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ACOProxy.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IACOPool2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ACOPoolFactory\\r\\n * @dev The contract is the implementation for the ACOProxy.\\r\\n */\\r\\ncontract ACOPoolFactory2 {\\r\\n    \\r\\n    /**\\r\\n     * @dev Struct to store the ACO pool basic data.\\r\\n     */\\r\\n    struct ACOPoolBasicData {\\r\\n        \\r\\n        /**\\r\\n         * @dev Address of the underlying asset (0x0 for Ethereum).\\r\\n         */\\r\\n        address underlying;\\r\\n        \\r\\n        /**\\r\\n         * @dev Address of the strike asset (0x0 for Ethereum).\\r\\n         */\\r\\n        address strikeAsset;\\r\\n        \\r\\n        /**\\r\\n         * @dev True if the type is CALL, false for PUT.\\r\\n         */\\r\\n        bool isCall;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the factory admin address has been changed.\\r\\n     * @param previousFactoryAdmin Address of the previous factory admin.\\r\\n     * @param newFactoryAdmin Address of the new factory admin.\\r\\n     */\\r\\n    event SetFactoryAdmin(address indexed previousFactoryAdmin, address indexed newFactoryAdmin);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the ACO pool implementation has been changed.\\r\\n     * @param previousAcoPoolImplementation Address of the previous ACO pool implementation.\\r\\n     * @param previousAcoPoolImplementation Address of the new ACO pool implementation.\\r\\n     */\\r\\n    event SetAcoPoolImplementation(address indexed previousAcoPoolImplementation, address indexed newAcoPoolImplementation);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the ACO factory has been changed.\\r\\n     * @param previousAcoFactory Address of the previous ACO factory.\\r\\n     * @param newAcoFactory Address of the new ACO factory.\\r\\n     */\\r\\n    event SetAcoFactory(address indexed previousAcoFactory, address indexed newAcoFactory);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the Chi Token has been changed.\\r\\n     * @param previousChiToken Address of the previous Chi Token.\\r\\n     * @param newChiToken Address of the new Chi Token.\\r\\n     */\\r\\n    event SetChiToken(address indexed previousChiToken, address indexed newChiToken);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the asset converter helper has been changed.\\r\\n     * @param previousAssetConverterHelper Address of the previous asset converter helper.\\r\\n     * @param newAssetConverterHelper Address of the new asset converter helper.\\r\\n     */\\r\\n    event SetAssetConverterHelper(address indexed previousAssetConverterHelper, address indexed newAssetConverterHelper);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the ACO Pool fee has been changed.\\r\\n     * @param previousAcoFee Value of the previous ACO Pool fee.\\r\\n     * @param newAcoFee Value of the new ACO Pool fee.\\r\\n     */\\r\\n    event SetAcoPoolFee(uint256 indexed previousAcoFee, uint256 indexed newAcoFee);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the ACO Pool fee destination address has been changed.\\r\\n     * @param previousAcoPoolFeeDestination Address of the previous ACO Pool fee destination.\\r\\n     * @param newAcoPoolFeeDestination Address of the new ACO Pool fee destination.\\r\\n     */\\r\\n    event SetAcoPoolFeeDestination(address indexed previousAcoPoolFeeDestination, address indexed newAcoPoolFeeDestination);\\r\\n     \\r\\n    /**\\r\\n     * @dev Emitted when the ACO Pool penalty percentage on withdrawing open positions has been changed.\\r\\n     * @param previousWithdrawOpenPositionPenalty Value of the previous penalty percentage on withdrawing open positions.\\r\\n     * @param newWithdrawOpenPositionPenalty Value of the new penalty percentage on withdrawing open positions.\\r\\n     */\\r\\n    event SetAcoPoolWithdrawOpenPositionPenalty(uint256 indexed previousWithdrawOpenPositionPenalty, uint256 indexed newWithdrawOpenPositionPenalty);\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Emitted when the ACO Pool underlying price percentage adjust has been changed.\\r\\n     * @param previousUnderlyingPriceAdjustPercentage Value of the previous ACO Pool underlying price percentage adjust.\\r\\n     * @param newUnderlyingPriceAdjustPercentage Value of the new ACO Pool underlying price percentage adjust.\\r\\n     */\\r\\n    event SetAcoPoolUnderlyingPriceAdjustPercentage(uint256 indexed previousUnderlyingPriceAdjustPercentage, uint256 indexed newUnderlyingPriceAdjustPercentage);\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Emitted when the ACO Pool maximum number of open ACOs allowed has been changed.\\r\\n     * @param previousMaximumOpenAco Value of the previous ACO Pool maximum number of open ACOs allowed.\\r\\n     * @param newMaximumOpenAco Value of the new ACO Pool maximum number of open ACOs allowed.\\r\\n     */\\r\\n    event SetAcoPoolMaximumOpenAco(uint256 indexed previousMaximumOpenAco, uint256 indexed newMaximumOpenAco);\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Emitted when permission for an ACO pool admin has been changed.\\r\\n     * @param poolAdmin Address of the ACO pool admin.\\r\\n     * @param previousPermission The previous permission situation.\\r\\n     * @param newPermission The new permission situation.\\r\\n     */\\r\\n    event SetAcoPoolPermission(address indexed poolAdmin, bool indexed previousPermission, bool indexed newPermission);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a strategy permission has been changed.\\r\\n     * @param strategy Address of the strategy.\\r\\n     * @param previousPermission The previous strategy permission.\\r\\n     * @param newPermission The new strategy permission.\\r\\n     */\\r\\n    event SetStrategyPermission(address indexed strategy, bool indexed previousPermission, bool newPermission);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new ACO pool has been created.\\r\\n     * @param underlying Address of the underlying asset (0x0 for Ethereum).\\r\\n     * @param strikeAsset Address of the strike asset (0x0 for Ethereum).\\r\\n     * @param isCall True if the type is CALL, false for PUT.\\r\\n     * @param acoPool Address of the new ACO pool created.\\r\\n     * @param acoPoolImplementation Address of the ACO pool implementation used on creation.\\r\\n     */\\r\\n    event NewAcoPool(address indexed underlying, address indexed strikeAsset, bool indexed isCall, address acoPool, address acoPoolImplementation);\\r\\n    \\r\\n    /**\\r\\n     * @dev The factory admin address.\\r\\n     */\\r\\n    address public factoryAdmin;\\r\\n    \\r\\n    /**\\r\\n     * @dev The ACO pool implementation address.\\r\\n     */\\r\\n    address public acoPoolImplementation;\\r\\n    \\r\\n    /**\\r\\n     * @dev The ACO factory address.\\r\\n     */\\r\\n    address public acoFactory;\\r\\n    \\r\\n\\t/**\\r\\n     * @dev The ACO asset converter helper.\\r\\n     */\\r\\n    address public assetConverterHelper;\\r\\n    \\r\\n    /**\\r\\n     * @dev The Chi Token address.\\r\\n     */\\r\\n    address public chiToken;\\r\\n    \\r\\n    /**\\r\\n     * @dev The ACO Pool fee value. \\r\\n     * It is a percentage value (100000 is 100%).\\r\\n     */\\r\\n    uint256 public acoPoolFee;\\r\\n    \\r\\n    /**\\r\\n     * @dev The ACO Pool fee destination address.\\r\\n     */\\r\\n    address public acoPoolFeeDestination;\\r\\n      \\r\\n    /**\\r\\n     * @dev The ACO Pool penalty percentage on withdrawing open positions.\\r\\n     */\\r\\n    uint256 public acoPoolWithdrawOpenPositionPenalty;\\r\\n\\t  \\r\\n    /**\\r\\n     * @dev The ACO Pool underlying price percentage adjust.\\r\\n     */\\r\\n    uint256 public acoPoolUnderlyingPriceAdjustPercentage;\\r\\n\\r\\n    /**\\r\\n     * @dev The ACO Pool maximum number of open ACOs allowed.\\r\\n     */\\r\\n    uint256 public acoPoolMaximumOpenAco;\\r\\n\\r\\n    /**\\r\\n     * @dev The ACO pool admin permissions.\\r\\n     */\\r\\n    mapping(address =\\u003e bool) public poolAdminPermission;\\r\\n    \\r\\n    /**\\r\\n     * @dev The strategies permitted.\\r\\n     */\\r\\n    mapping(address =\\u003e bool) public strategyPermitted;\\r\\n    \\r\\n    /**\\r\\n     * @dev The ACO pool basic data.\\r\\n     */\\r\\n    mapping(address =\\u003e ACOPoolBasicData) public acoPoolBasicData;\\r\\n    \\r\\n    /**\\r\\n     * @dev Modifier to check if the `msg.sender` is the factory admin.\\r\\n     * Only factory admin address can execute.\\r\\n     */\\r\\n    modifier onlyFactoryAdmin() {\\r\\n        require(msg.sender == factoryAdmin, \\\"ACOPoolFactory::onlyFactoryAdmin\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Modifier to check if the `msg.sender` is a pool admin.\\r\\n     * Only a pool admin address can execute.\\r\\n     */\\r\\n    modifier onlyPoolAdmin() {\\r\\n        require(poolAdminPermission[msg.sender], \\\"ACOPoolFactory::onlyPoolAdmin\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to initialize the contract.\\r\\n     * It should be called through the `data` argument when creating the proxy.\\r\\n     * It must be called only once. The first `require` is to guarantee that behavior.\\r\\n     * @param _factoryAdmin Address of the factory admin.\\r\\n     * @param _acoPoolImplementation Address of the ACO pool implementation.\\r\\n     * @param _acoFactory Address of the ACO token factory.\\r\\n     * @param _assetConverterHelper Address of the asset converter helper.\\r\\n\\t * @param _chiToken Address of the Chi token.\\r\\n\\t * @param _acoPoolFee ACO pool fee percentage.\\r\\n\\t * @param _acoPoolFeeDestination ACO pool fee destination.\\r\\n\\t * @param _acoPoolWithdrawOpenPositionPenalty ACO pool penalty percentage on withdrawing open positions.\\r\\n\\t * @param _acoPoolUnderlyingPriceAdjustPercentage ACO pool underlying price percentage adjust.\\r\\n     * @param _acoPoolMaximumOpenAco ACO pool maximum number of open ACOs allowed.\\r\\n     */\\r\\n    function init(\\r\\n        address _factoryAdmin, \\r\\n        address _acoPoolImplementation, \\r\\n        address _acoFactory, \\r\\n        address _assetConverterHelper,\\r\\n        address _chiToken,\\r\\n        uint256 _acoPoolFee,\\r\\n        address _acoPoolFeeDestination,\\r\\n\\t\\tuint256 _acoPoolWithdrawOpenPositionPenalty,\\r\\n\\t\\tuint256 _acoPoolUnderlyingPriceAdjustPercentage,\\r\\n        uint256 _acoPoolMaximumOpenAco\\r\\n    ) public {\\r\\n        require(factoryAdmin == address(0) \\u0026\\u0026 acoPoolImplementation == address(0), \\\"ACOPoolFactory::init: Contract already initialized.\\\");\\r\\n        \\r\\n        _setFactoryAdmin(_factoryAdmin);\\r\\n        _setAcoPoolImplementation(_acoPoolImplementation);\\r\\n        _setAcoFactory(_acoFactory);\\r\\n        _setAssetConverterHelper(_assetConverterHelper);\\r\\n        _setChiToken(_chiToken);\\r\\n        _setAcoPoolFee(_acoPoolFee);\\r\\n        _setAcoPoolFeeDestination(_acoPoolFeeDestination);\\r\\n\\t\\t_setAcoPoolWithdrawOpenPositionPenalty(_acoPoolWithdrawOpenPositionPenalty);\\r\\n\\t\\t_setAcoPoolUnderlyingPriceAdjustPercentage(_acoPoolUnderlyingPriceAdjustPercentage);\\r\\n        _setAcoPoolMaximumOpenAco(_acoPoolMaximumOpenAco);\\r\\n        _setAcoPoolPermission(_factoryAdmin, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to guarantee that the contract will not receive ether.\\r\\n     */\\r\\n    receive() external payable virtual {\\r\\n        revert();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the factory admin address.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newFactoryAdmin Address of the new factory admin.\\r\\n     */\\r\\n    function setFactoryAdmin(address newFactoryAdmin) onlyFactoryAdmin external virtual {\\r\\n        _setFactoryAdmin(newFactoryAdmin);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the ACO pool implementation address.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newAcoPoolImplementation Address of the new ACO pool implementation.\\r\\n     */\\r\\n    function setAcoPoolImplementation(address newAcoPoolImplementation) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolImplementation(newAcoPoolImplementation);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the ACO factory address.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newAcoFactory Address of the ACO token factory.\\r\\n     */\\r\\n    function setAcoFactory(address newAcoFactory) onlyFactoryAdmin external virtual {\\r\\n        _setAcoFactory(newAcoFactory);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the Chi Token address.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newChiToken Address of the new Chi Token.\\r\\n     */\\r\\n    function setChiToken(address newChiToken) onlyFactoryAdmin external virtual {\\r\\n        _setChiToken(newChiToken);\\r\\n    }\\r\\n    \\r\\n\\t/**\\r\\n     * @dev Function to set the asset converter helper address.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newAssetConverterHelper Address of the new asset converter helper.\\r\\n     */\\r\\n    function setAssetConverterHelper(address newAssetConverterHelper) onlyFactoryAdmin external virtual {\\r\\n        _setAssetConverterHelper(newAssetConverterHelper);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the ACO Pool fee.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newAcoPoolFee Value of the new ACO Pool fee. It is a percentage value (100000 is 100%).\\r\\n     */\\r\\n    function setAcoPoolFee(uint256 newAcoPoolFee) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolFee(newAcoPoolFee);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the ACO Pool destination address.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newAcoPoolFeeDestination Address of the new ACO Pool destination.\\r\\n     */\\r\\n    function setAcoPoolFeeDestination(address newAcoPoolFeeDestination) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolFeeDestination(newAcoPoolFeeDestination);\\r\\n    }\\r\\n    \\r\\n\\t/**\\r\\n     * @dev Function to set the ACO Pool penalty percentage on withdrawing open positions.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newWithdrawOpenPositionPenalty Value of the new ACO Pool penalty percentage on withdrawing open positions. It is a percentage value (100000 is 100%).\\r\\n     */\\r\\n    function setAcoPoolWithdrawOpenPositionPenalty(uint256 newWithdrawOpenPositionPenalty) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolWithdrawOpenPositionPenalty(newWithdrawOpenPositionPenalty);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to set the ACO Pool underlying price percentage adjust.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newUnderlyingPriceAdjustPercentage Value of the new ACO Pool underlying price percentage adjust. It is a percentage value (100000 is 100%).\\r\\n     */\\r\\n    function setAcoPoolUnderlyingPriceAdjustPercentage(uint256 newUnderlyingPriceAdjustPercentage) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolUnderlyingPriceAdjustPercentage(newUnderlyingPriceAdjustPercentage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to set the ACO Pool maximum number of open ACOs allowed.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newMaximumOpenAco Value of the new ACO Pool maximum number of open ACOs allowed.\\r\\n     */\\r\\n    function setAcoPoolMaximumOpenAco(uint256 newMaximumOpenAco) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolMaximumOpenAco(newMaximumOpenAco);\\r\\n    }\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Function to set the ACO pool permission.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param poolAdmin Address of the pool admin.\\r\\n     * @param newPermission The permission to be set.\\r\\n     */\\r\\n    function setAcoPoolPermission(address poolAdmin, bool newPermission) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolPermission(poolAdmin, newPermission);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the ACO pool strategies permitted.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param strategy Address of the strategy.\\r\\n     * @param newPermission The permission to be set.\\r\\n     */\\r\\n    function setAcoPoolStrategyPermission(address strategy, bool newPermission) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolStrategyPermission(strategy, newPermission);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools strategy.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param strategy Address of the strategy to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setStrategyOnAcoPool(address strategy, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setStrategyOnAcoPool(strategy, acoPools);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to change the ACO pools base volatilities.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param baseVolatilities Array of the base volatilities to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setBaseVolatilityOnAcoPool(uint256[] calldata baseVolatilities, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setBaseVolatility.selector, baseVolatilities, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools penalties percentages on withdrawing open positions.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param withdrawOpenPositionPenalties Array of the penalties percentages on withdrawing open positions to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setWithdrawOpenPositionPenaltyOnAcoPool(uint256[] calldata withdrawOpenPositionPenalties, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setWithdrawOpenPositionPenalty.selector, withdrawOpenPositionPenalties, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools underlying prices percentages adjust.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param underlyingPriceAdjustPercentages Array of the underlying prices percentages to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setUnderlyingPriceAdjustPercentageOnAcoPool(uint256[] calldata underlyingPriceAdjustPercentages, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setUnderlyingPriceAdjustPercentage.selector, underlyingPriceAdjustPercentages, acoPools);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to change the ACO pools maximum number of open ACOs allowed.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param maximumOpenAcos Array of the maximum number of open ACOs allowed.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setMaximumOpenAcoOnAcoPool(uint256[] calldata maximumOpenAcos, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setMaximumOpenAco.selector, maximumOpenAcos, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools below tolerance prices percentages.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param tolerancePricesBelow Array of the below tolerance prices percentages to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setTolerancePriceBelowOnAcoPool(uint256[] calldata tolerancePricesBelow, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setTolerancePriceBelow.selector, tolerancePricesBelow, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools above tolerance prices percentages.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param tolerancePricesAbove Array of the above tolerance prices percentages to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setTolerancePriceAboveOnAcoPool(uint256[] calldata tolerancePricesAbove, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setTolerancePriceAbove.selector, tolerancePricesAbove, acoPools);\\r\\n    }\\r\\n\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools minimum expirations.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param minExpirations Array of the minimum expirations.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setMinExpirationOnAcoPool(uint256[] calldata minExpirations, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setMinExpiration.selector, minExpirations, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools maximum expirations.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param maxExpirations Array of the maximum expirations to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setMaxExpirationOnAcoPool(uint256[] calldata maxExpirations, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setMaxExpiration.selector, maxExpirations, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools fee.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param fees Array of the fees.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setFeeOnAcoPool(uint256[] calldata fees, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setFee.selector, fees, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools fee destinations.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param feeDestinations Array of the fee destinations.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setFeeDestinationOnAcoPool(address[] calldata feeDestinations, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolAddressData(IACOPool2.setFeeDestination.selector, feeDestinations, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools asset converters.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param assetConverters Array of the asset converters.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setAssetConverterOnAcoPool(address[] calldata assetConverters, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolAddressData(IACOPool2.setAssetConverter.selector, assetConverters, acoPools);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to change the ACO pools ACO creator permission.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n\\t * @param permission Permission situation.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n\\tfunction setValidAcoCreatorOnAcoPool(address acoCreator, bool permission, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n\\t\\t_setValidAcoCreatorOnAcoPool(acoCreator, permission, acoPools);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Function to withdraw the ACO pools stucked asset.\\r\\n     * @param asset Address of the asset.\\r\\n\\t * @param destination Address of the destination.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function withdrawStuckAssetOnAcoPool(address asset, address destination, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n\\t\\t_withdrawStuckAssetOnAcoPool(asset, destination, acoPools);\\r\\n\\t}\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Internal function to set the factory admin address.\\r\\n     * @param newFactoryAdmin Address of the new factory admin.\\r\\n     */\\r\\n    function _setFactoryAdmin(address newFactoryAdmin) internal virtual {\\r\\n        require(newFactoryAdmin != address(0), \\\"ACOPoolFactory::_setFactoryAdmin: Invalid factory admin\\\");\\r\\n        emit SetFactoryAdmin(factoryAdmin, newFactoryAdmin);\\r\\n        factoryAdmin = newFactoryAdmin;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO pool implementation address.\\r\\n     * @param newAcoPoolImplementation Address of the new ACO pool implementation.\\r\\n     */\\r\\n    function _setAcoPoolImplementation(address newAcoPoolImplementation) internal virtual {\\r\\n        require(Address.isContract(newAcoPoolImplementation), \\\"ACOPoolFactory::_setAcoPoolImplementation: Invalid ACO pool implementation\\\");\\r\\n        emit SetAcoPoolImplementation(acoPoolImplementation, newAcoPoolImplementation);\\r\\n        acoPoolImplementation = newAcoPoolImplementation;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO factory address.\\r\\n     * @param newAcoFactory Address of the new ACO token factory.\\r\\n     */\\r\\n    function _setAcoFactory(address newAcoFactory) internal virtual {\\r\\n        require(Address.isContract(newAcoFactory), \\\"ACOPoolFactory::_setAcoFactory: Invalid ACO factory\\\");\\r\\n        emit SetAcoFactory(acoFactory, newAcoFactory);\\r\\n        acoFactory = newAcoFactory;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the asset converter helper address.\\r\\n     * @param newAssetConverterHelper Address of the new asset converter helper.\\r\\n     */\\r\\n    function _setAssetConverterHelper(address newAssetConverterHelper) internal virtual {\\r\\n        require(Address.isContract(newAssetConverterHelper), \\\"ACOPoolFactory::_setAssetConverterHelper: Invalid asset converter helper\\\");\\r\\n        emit SetAssetConverterHelper(assetConverterHelper, newAssetConverterHelper);\\r\\n        assetConverterHelper = newAssetConverterHelper;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the Chi Token address.\\r\\n     * @param newChiToken Address of the new Chi Token.\\r\\n     */\\r\\n    function _setChiToken(address newChiToken) internal virtual {\\r\\n        require(Address.isContract(newChiToken), \\\"ACOPoolFactory::_setChiToken: Invalid Chi Token\\\");\\r\\n        emit SetChiToken(chiToken, newChiToken);\\r\\n        chiToken = newChiToken;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO Pool fee.\\r\\n     * @param newAcoPoolFee Value of the new ACO Pool fee. It is a percentage value (100000 is 100%).\\r\\n     */\\r\\n    function _setAcoPoolFee(uint256 newAcoPoolFee) internal virtual {\\r\\n        emit SetAcoPoolFee(acoPoolFee, newAcoPoolFee);\\r\\n        acoPoolFee = newAcoPoolFee;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO Pool fee destination address.\\r\\n     * @param newAcoPoolFeeDestination Address of the new ACO Pool fee destination.\\r\\n     */\\r\\n    function _setAcoPoolFeeDestination(address newAcoPoolFeeDestination) internal virtual {\\r\\n        require(newAcoPoolFeeDestination != address(0), \\\"ACOFactory::_setAcoPoolFeeDestination: Invalid ACO Pool fee destination\\\");\\r\\n        emit SetAcoPoolFeeDestination(acoPoolFeeDestination, newAcoPoolFeeDestination);\\r\\n        acoPoolFeeDestination = newAcoPoolFeeDestination;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO Pool penalty percentage on withdrawing open positions.\\r\\n     * @param newWithdrawOpenPositionPenalty Value of the new ACO Pool penalty percentage on withdrawing open positions. It is a percentage value (100000 is 100%).\\r\\n     */\\r\\n    function _setAcoPoolWithdrawOpenPositionPenalty(uint256 newWithdrawOpenPositionPenalty) internal virtual {\\r\\n        emit SetAcoPoolWithdrawOpenPositionPenalty(acoPoolWithdrawOpenPositionPenalty, newWithdrawOpenPositionPenalty);\\r\\n        acoPoolWithdrawOpenPositionPenalty = newWithdrawOpenPositionPenalty;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO Pool underlying price percentage adjust.\\r\\n     * @param newUnderlyingPriceAdjustPercentage Value of the new ACO Pool underlying price percentage adjust. It is a percentage value (100000 is 100%).\\r\\n     */\\r\\n    function _setAcoPoolUnderlyingPriceAdjustPercentage(uint256 newUnderlyingPriceAdjustPercentage) internal virtual {\\r\\n        emit SetAcoPoolUnderlyingPriceAdjustPercentage(acoPoolUnderlyingPriceAdjustPercentage, newUnderlyingPriceAdjustPercentage);\\r\\n        acoPoolUnderlyingPriceAdjustPercentage = newUnderlyingPriceAdjustPercentage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the ACO Pool maximum number of open ACOs allowed.\\r\\n     * @param newMaximumOpenAco Value of the new ACO Pool maximum number of open ACOs allowed.\\r\\n     */\\r\\n    function _setAcoPoolMaximumOpenAco(uint256 newMaximumOpenAco) internal virtual {\\r\\n        emit SetAcoPoolMaximumOpenAco(acoPoolMaximumOpenAco, newMaximumOpenAco);\\r\\n        acoPoolMaximumOpenAco = newMaximumOpenAco;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO pool permission.\\r\\n     * @param poolAdmin Address of the pool admin.\\r\\n     * @param newPermission The permission to be set.\\r\\n     */\\r\\n    function _setAcoPoolPermission(address poolAdmin, bool newPermission) internal virtual {\\r\\n        emit SetAcoPoolPermission(poolAdmin, poolAdminPermission[poolAdmin], newPermission);\\r\\n        poolAdminPermission[poolAdmin] = newPermission;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO pool strategies permitted.\\r\\n     * @param strategy Address of the strategy.\\r\\n     * @param newPermission The permission to be set.\\r\\n     */\\r\\n    function _setAcoPoolStrategyPermission(address strategy, bool newPermission) internal virtual {\\r\\n        require(Address.isContract(strategy), \\\"ACOPoolFactory::_setAcoPoolStrategy: Invalid strategy\\\");\\r\\n        emit SetStrategyPermission(strategy, strategyPermitted[strategy], newPermission);\\r\\n        strategyPermitted[strategy] = newPermission;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to validate strategy.\\r\\n     * @param strategy Address of the strategy.\\r\\n     */\\r\\n    function _validateStrategy(address strategy) view internal virtual {\\r\\n        require(strategyPermitted[strategy], \\\"ACOPoolFactory::_validateStrategy: Invalid strategy\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to change the ACO pools strategy.\\r\\n     * @param strategy Address of the strategy to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function _setStrategyOnAcoPool(address strategy, address[] memory acoPools) internal virtual {\\r\\n        _validateStrategy(strategy);\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n            IACOPool2(acoPools[i]).setStrategy(strategy);\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to change the ACO pools ACO creator permission.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n\\t * @param permission Permission situation.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function _setValidAcoCreatorOnAcoPool(address acoCreator, bool permission, address[] memory acoPools) internal virtual {\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n            IACOPool2(acoPools[i]).setValidAcoCreator(acoCreator, permission);\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Internal function to withdraw the ACO pools stucked asset.\\r\\n     * @param asset Address of the asset.\\r\\n\\t * @param destination Address of the destination.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function _withdrawStuckAssetOnAcoPool(address asset, address destination, address[] memory acoPools) internal virtual {\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n            IACOPool2(acoPools[i]).withdrawStuckToken(asset, destination);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to change the ACO pools an uint256 data.\\r\\n\\t * @param selector Function selector to be called on the ACO pool.\\r\\n     * @param numbers Array of the numbers to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function _setAcoPoolUint256Data(bytes4 selector, uint256[] memory numbers, address[] memory acoPools) internal virtual {\\r\\n        require(numbers.length == acoPools.length, \\\"ACOPoolFactory::_setAcoPoolUint256Data: Invalid arguments\\\");\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n\\t\\t\\t(bool success,) = acoPools[i].call(abi.encodeWithSelector(selector, numbers[i]));\\r\\n\\t\\t\\trequire(success, \\\"ACOPoolFactory::_setAcoPoolUint256Data\\\");\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to change the ACO pools an address data.\\r\\n\\t * @param selector Function selector to be called on the ACO pool.\\r\\n     * @param addresses Array of the addresses to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function _setAcoPoolAddressData(bytes4 selector, address[] memory addresses, address[] memory acoPools) internal virtual {\\r\\n        require(addresses.length == acoPools.length, \\\"ACOPoolFactory::_setAcoPoolAddressData: Invalid arguments\\\");\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n\\t\\t\\t(bool success,) = acoPools[i].call(abi.encodeWithSelector(selector, addresses[i]));\\r\\n\\t\\t\\trequire(success, \\\"ACOPoolFactory::_setAcoPoolAddressData\\\");\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to create a new ACO pool.\\r\\n     * @param initData Data to initialize o ACO Pool.\\r\\n     * @return Address of the new minimal proxy deployed for the ACO pool.\\r\\n     */\\r\\n    function _createAcoPool(IACOPool2.InitData memory initData) internal virtual returns(address) {\\r\\n        address acoPool  = _deployAcoPool(initData);\\r\\n        acoPoolBasicData[acoPool] = ACOPoolBasicData(initData.underlying, initData.strikeAsset, initData.isCall);\\r\\n        emit NewAcoPool(\\r\\n            initData.underlying, \\r\\n            initData.strikeAsset, \\r\\n            initData.isCall, \\r\\n            acoPool, \\r\\n            acoPoolImplementation\\r\\n        );\\r\\n        return acoPool;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to deploy a minimal proxy using ACO pool implementation.\\r\\n     * @param initData Data to initialize o ACO Pool.\\r\\n     * @return Address of the new minimal proxy deployed for the ACO pool.\\r\\n     */\\r\\n    function _deployAcoPool(IACOPool2.InitData memory initData) internal virtual returns(address) {\\r\\n        bytes20 implentationBytes = bytes20(acoPoolImplementation);\\r\\n        address proxy;\\r\\n        assembly {\\r\\n            let clone := mload(0x40)\\r\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n            mstore(add(clone, 0x14), implentationBytes)\\r\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n            proxy := create(0, clone, 0x37)\\r\\n        }\\r\\n        IACOPool2(proxy).init(initData);\\r\\n        return proxy;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ACOPoolFactory2V2 is ACOPoolFactory2 {\\r\\n \\r\\n    /**\\r\\n     * @dev Emitted when the lending pool has been changed.\\r\\n     * @param oldLendingPool Address of the previous lending pool.\\r\\n     * @param newLendingPool Address of the new lending pool.\\r\\n     */\\r\\n    event SetAcoPoolLendingPool(address indexed oldLendingPool, address indexed newLendingPool);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the lending pool referral has been changed.\\r\\n     * @param oldLendingPoolReferral Value of the previous lending pool referral.\\r\\n     * @param newLendingPoolReferral Value of the new lending pool referral.\\r\\n     */\\r\\n    event SetAcoPoolLendingPoolReferral(uint256 indexed oldLendingPoolReferral, uint256 indexed newLendingPoolReferral);\\r\\n    \\r\\n    /**\\r\\n\\t * @dev Value of the lending pool referral.\\r\\n\\t */\\r\\n\\tuint16 public lendingPoolReferral;\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Address of the lending pool.\\r\\n\\t */\\r\\n\\taddress public lendingPool;\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the lending pool.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newLendingPool Address of the new lending pool.\\r\\n     */\\r\\n    function setAcoPoolLendingPool(address newLendingPool) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolLendingPool(newLendingPool);\\r\\n    }   \\r\\n\\r\\n    /**\\r\\n     * @dev Function to set the lending pool referral.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newLendingPoolReferral Value of the new lending pool referral.\\r\\n     */\\r\\n    function setAcoPoolLendingPoolReferral(uint16 newLendingPoolReferral) onlyFactoryAdmin external virtual {\\r\\n        _setAcoPoolLendingPoolReferral(newLendingPoolReferral);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to change the ACO pools fee data.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param feeDestinations Array of the fee destinations addresses.\\r\\n     * @param fees Array of the fee percentages.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setFeeDataOnAcoPool(address[] calldata feeDestinations, uint256[] calldata fees, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolAddressUint256Data(IACOPool2.setFeeData.selector, feeDestinations, fees, acoPools);\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev Function to change the ACO pools restrictons for an ACO data.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param tolerancePricesBelow Array of the below tolerance price percentages.\\r\\n     * @param tolerancePricesAbove Array of the above tolerance price percentages.\\r\\n     * @param minExpirations Array of the minimum expirations.\\r\\n     * @param maxExpirations Array of the maximum expirations.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setAcoPermissionDataOnAcoPool(\\r\\n        uint256[] calldata tolerancePricesBelow, \\r\\n        uint256[] calldata tolerancePricesAbove, \\r\\n        uint256[] calldata minExpirations,\\r\\n        uint256[] calldata maxExpirations,\\r\\n        address[] calldata acoPools\\r\\n    ) onlyPoolAdmin external virtual {\\r\\n        require(tolerancePricesBelow.length == tolerancePricesAbove.length \\r\\n            \\u0026\\u0026 tolerancePricesAbove.length == minExpirations.length\\r\\n            \\u0026\\u0026 minExpirations.length == maxExpirations.length\\r\\n            \\u0026\\u0026 maxExpirations.length == acoPools.length, \\\"ACOPoolFactory::setAcoPermissionDataOnAcoPool: Invalid arguments\\\");\\r\\n        \\r\\n        bytes4 selector = IACOPool2.setPoolDataForAcoPermission.selector;\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n\\t\\t\\t(bool success,) = acoPools[i].call(abi.encodeWithSelector(selector, tolerancePricesBelow[i], tolerancePricesAbove[i], minExpirations[i], maxExpirations[i]));\\r\\n\\t\\t\\trequire(success, \\\"ACOPoolFactory::setAcoPermissionDataOnAcoPool\\\");\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to change the ACO pools lending pool referrals.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param lendingPoolReferrals Array of the lending pool referrals.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function setLendingPoolReferralOnAcoPool(uint256[] calldata lendingPoolReferrals, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n        _setAcoPoolUint256Data(IACOPool2.setLendingPoolReferral.selector, lendingPoolReferrals, acoPools);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the lending pool.\\r\\n     * @param newLendingPool Address of the new lending pool.\\r\\n     */\\r\\n    function _setAcoPoolLendingPool(address newLendingPool) internal virtual {\\r\\n        emit SetAcoPoolLendingPool(lendingPool, newLendingPool);\\r\\n        lendingPool = newLendingPool;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the lending pool referral.\\r\\n     * @param newLendingPoolReferral Value of the new lending pool referral.\\r\\n     */\\r\\n    function _setAcoPoolLendingPoolReferral(uint16 newLendingPoolReferral) internal virtual {\\r\\n        emit SetAcoPoolLendingPoolReferral(lendingPoolReferral, newLendingPoolReferral);\\r\\n        lendingPoolReferral = newLendingPoolReferral;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to change the ACO pools an address and a number data.\\r\\n\\t * @param selector Function selector to be called on the ACO pool.\\r\\n     * @param addresses Array of the addresses to be set.\\r\\n     * @param numbers Array of the numbers to be set.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function _setAcoPoolAddressUint256Data(bytes4 selector, address[] memory addresses, uint256[] memory numbers, address[] memory acoPools) internal virtual {\\r\\n        require(addresses.length == acoPools.length \\u0026\\u0026 numbers.length == acoPools.length, \\\"ACOPoolFactory::_setAcoPoolAddressUint256Data: Invalid arguments\\\");\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n\\t\\t\\t(bool success,) = acoPools[i].call(abi.encodeWithSelector(selector, addresses[i], numbers[i]));\\r\\n\\t\\t\\trequire(success, \\\"ACOPoolFactory::_setAcoPoolAddressUint256Data\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ACOPoolFactory2V3 is ACOPoolFactory2V2 {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the operator address permission has been changed.\\r\\n     * @param operator Address of the operator.\\r\\n     * @param previousPermission Whether the operator was authorized.\\r\\n     * @param newPermission Whether the operator will be authorized.\\r\\n     */\\r\\n    event SetOperator(address indexed operator, bool indexed previousPermission, bool indexed newPermission);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a ACO creator address permission has been changed.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n     * @param previousPermission Whether the creator was authorized.\\r\\n     * @param newPermission Whether the creator will be authorized.\\r\\n     */\\r\\n    event SetAuthorizedAcoCreator(address indexed acoCreator, bool indexed previousPermission, bool indexed newPermission);\\r\\n\\r\\n    /**\\r\\n     * @dev A map to register the ACO Fool Factory operators permissions.\\r\\n     */\\r\\n    mapping(address =\\u003e bool) public operators;\\r\\n    \\r\\n    /**\\r\\n     * @dev A map to register the ACO Pool creator.\\r\\n     */\\r\\n    mapping(address =\\u003e address) public creators;\\r\\n    \\r\\n    /**\\r\\n     * @dev Addresses of authorized ACO creators for a pool.\\r\\n     */\\r\\n    address[] internal acoAuthorizedCreators;\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to get the number of ACO creators authorized for a pool.\\r\\n     * @return The number of ACO creators authorized.\\r\\n     */\\r\\n    function getNumberOfAcoCreatorsAuthorized() view external virtual returns(uint256) {\\r\\n        return acoAuthorizedCreators.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to get the address of ACO creators authorized.\\r\\n     * @param index The index of the ACO creator.\\r\\n     * @return The address of ACO creators authorized.\\r\\n     */\\r\\n    function getAcoCreatorAuthorized(uint256 index) view external virtual returns(address) {\\r\\n        return acoAuthorizedCreators[index];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the operator permission.\\r\\n     * @param operator Address of the operator.\\r\\n     * @param newPermission Whether the operator will be authorized.\\r\\n     */\\r\\n    function setOperator(address operator, bool newPermission) onlyFactoryAdmin external virtual {\\r\\n        _setOperator(operator, newPermission);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the ACO creator permission.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n     * @param newPermission Whether the creator will be authorized.\\r\\n     */\\r\\n    function setAuthorizedAcoCreator(address acoCreator, bool newPermission) onlyFactoryAdmin external virtual {\\r\\n        _setAuthorizedAcoCreator(acoCreator, newPermission);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to change the ACO pools protocol config.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param lendingPoolReferral The value of the lending pool referral.\\r\\n     * @param withdrawOpenPositionPenalty Value of the ACO Pool penalty percentage on withdrawing open positions. It is a percentage value (100000 is 100%).\\r\\n     * @param underlyingPriceAdjustPercentage Value of the ACO Pool underlying price percentage adjust. It is a percentage value (100000 is 100%).\\r\\n     * @param fee Value of the ACO Pool fee percentage. It is a percentage value (100000 is 100%).\\r\\n     * @param maximumOpenAco Value of the ACO Pool maximum number of open ACOs allowed.\\r\\n     * @param feeDestination Address of the ACO Pool fee destination.\\r\\n     * @param assetConverter Address of the asset converter helper.\\r\\n     */\\r\\n    function setProtocolConfigOnAcoPool(\\r\\n        uint16 lendingPoolReferral,\\r\\n        uint256 withdrawOpenPositionPenalty,\\r\\n        uint256 underlyingPriceAdjustPercentage,\\r\\n        uint256 fee,\\r\\n        uint256 maximumOpenAco,\\r\\n        address feeDestination,\\r\\n        address assetConverter, \\r\\n        address[] calldata acoPools\\r\\n    ) onlyPoolAdmin external virtual {\\r\\n        IACOPool2.PoolProtocolConfig memory config = IACOPool2.PoolProtocolConfig(lendingPoolReferral, withdrawOpenPositionPenalty, underlyingPriceAdjustPercentage, fee, maximumOpenAco, feeDestination, assetConverter);\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n            IACOPool2(acoPools[i]).setProtocolConfig(config);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the operator permission.\\r\\n     * @param operator Address of the operator.\\r\\n     * @param newPermission Whether the operator will be authorized.\\r\\n     */\\r\\n    function _setOperator(address operator, bool newPermission) internal virtual {\\r\\n        emit SetOperator(operator, operators[operator], newPermission);\\r\\n        operators[operator] = newPermission;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the ACO creator permission.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n     * @param newPermission Whether the creator will be authorized.\\r\\n     */\\r\\n    function _setAuthorizedAcoCreator(address acoCreator, bool newPermission) internal virtual {\\r\\n        bool previousPermission = false;\\r\\n        uint256 size = acoAuthorizedCreators.length;\\r\\n        for (uint256 i = size; i \\u003e 0; --i) {\\r\\n            if (acoAuthorizedCreators[i - 1] == acoCreator) {\\r\\n                previousPermission = true;\\r\\n                if (!newPermission) {\\r\\n                    if (i \\u003c size) {\\r\\n                        acoAuthorizedCreators[i - 1] = acoAuthorizedCreators[(size - 1)];\\r\\n                    }\\r\\n                    acoAuthorizedCreators.pop();\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (newPermission \\u0026\\u0026 !previousPermission) {\\r\\n            acoAuthorizedCreators.push(acoCreator);\\r\\n        }\\r\\n        emit SetAuthorizedAcoCreator(acoCreator, previousPermission, newPermission);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ACOPoolFactory2V4 is ACOPoolFactory2V3 {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool proxy admin address has been changed.\\r\\n     * @param previousPoolProxyAdmin Address of the previous pool proxy admin.\\r\\n     * @param newPoolProxyAdmin Address of the new pool proxy admin.\\r\\n     */\\r\\n    event SetPoolProxyAdmin(address indexed previousPoolProxyAdmin, address indexed newPoolProxyAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a ACO creator address forbidden status has been changed.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n     * @param previousStatus Whether the creator was forbidden.\\r\\n     * @param newStatus Whether the creator will be forbidden.\\r\\n     */\\r\\n    event SetForbiddenAcoCreator(address indexed acoCreator, bool indexed previousStatus, bool indexed newStatus);\\r\\n\\r\\n    /**\\r\\n     * @dev The factory admin address.\\r\\n     */\\r\\n    address public poolProxyAdmin;\\r\\n\\r\\n    /**\\r\\n     * @dev Addresses of forbidden ACO creators for a pool.\\r\\n     */\\r\\n    address[] internal acoForbiddenCreators;\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the pool proxy admin address.\\r\\n     * Only can be called by the factory admin.\\r\\n     * @param newPoolProxyAdmin Address of the new pool proxy admin.\\r\\n     */\\r\\n    function setPoolProxyAdmin(address newPoolProxyAdmin) onlyFactoryAdmin external virtual {\\r\\n        _setPoolProxyAdmin(newPoolProxyAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to update the pool implementation address.\\r\\n     * Only can be called by the pool proxy admin.\\r\\n     * @param pools Addresses of the new pools.\\r\\n     * @param initData Init data for the pool implementation.\\r\\n     */\\r\\n    function updatePoolsImplementation(\\r\\n        address payable[] calldata pools,\\r\\n        bytes calldata initData\\r\\n    ) external virtual {\\r\\n        require(poolProxyAdmin == msg.sender, \\\"ACOPoolFactory::onlyPoolProxyAdmin\\\");\\r\\n        for (uint256 i = 0; i \\u003c pools.length; ++i) {\\r\\n            ACOProxy(pools[i]).setImplementation(acoPoolImplementation, initData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to transfer the pool proxy admin.\\r\\n     * Only can be called by the pool proxy admin.\\r\\n     * @param newPoolProxyAdmin Address of the new pool proxy admin.\\r\\n     * @param pools Addresses of the new pools.\\r\\n     */\\r\\n    function transferPoolProxyAdmin(address newPoolProxyAdmin, address payable[] calldata pools) external virtual {\\r\\n        require(poolProxyAdmin == msg.sender, \\\"ACOPoolFactory::onlyPoolProxyAdmin\\\");\\r\\n        for (uint256 i = 0; i \\u003c pools.length; ++i) {\\r\\n            ACOProxy(pools[i]).transferProxyAdmin(newPoolProxyAdmin);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get the number of ACO creators forbidden for a pool.\\r\\n     * @return The number of ACO creators forbidden.\\r\\n     */\\r\\n    function getNumberOfAcoCreatorsForbidden() view external virtual returns(uint256) {\\r\\n        return acoForbiddenCreators.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to get the address of ACO creators forbidden.\\r\\n     * @param index The index of the ACO creator.\\r\\n     * @return The address of ACO creators forbidden.\\r\\n     */\\r\\n    function getAcoCreatorForbidden(uint256 index) view external virtual returns(address) {\\r\\n        return acoForbiddenCreators[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to set the ACO creator forbidden status.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n     * @param newStatus Whether the creator will be forbidden.\\r\\n     */\\r\\n    function setForbiddenAcoCreator(address acoCreator, bool newStatus) onlyFactoryAdmin external virtual {\\r\\n        _setForbiddenAcoCreator(acoCreator, newStatus);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to change the ACO pools ACO creator forbidden situation.\\r\\n     * Only can be called by a pool admin.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n\\t * @param status Forbidden situation.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n\\tfunction setForbiddenAcoCreatorOnAcoPool(address acoCreator, bool status, address[] calldata acoPools) onlyPoolAdmin external virtual {\\r\\n\\t\\t_setForbiddenAcoCreatorOnAcoPool(acoCreator, status, acoPools);\\r\\n\\t}\\r\\n\\r\\n    /**\\r\\n     * @dev Function to create a new ACO pool.\\r\\n     * It deploys a minimal proxy for the ACO pool implementation address. \\r\\n     * @param underlying Address of the underlying asset (0x0 for Ethereum).\\r\\n     * @param strikeAsset Address of the strike asset (0x0 for Ethereum).\\r\\n     * @param isCall True if the type is CALL, false for PUT.\\r\\n     * @param baseVolatility The base volatility for the pool starts. It is a percentage value (100000 is 100%).\\r\\n     * @param poolAdmin Address of the pool admin.\\r\\n     * @param strategy Address of the pool strategy to be used.\\r\\n     * @param acoPermissionConfig The configuration data for the ACO permission on the pool.\\r\\n     * @return The created ACO pool address.\\r\\n     */\\r\\n    function createAcoPool(\\r\\n        address underlying, \\r\\n        address strikeAsset, \\r\\n        bool isCall,\\r\\n        uint256 baseVolatility,\\r\\n        address poolAdmin,\\r\\n        address strategy,\\r\\n        IACOPool2.PoolAcoPermissionConfig calldata acoPermissionConfig\\r\\n    ) external virtual returns(address) {\\r\\n        require((operators[address(0)] || operators[msg.sender]), \\\"ACOPoolFactory2::createAcoPool: Only authorized operators\\\");\\r\\n        return _createAcoPool(IACOPool2.InitData(\\r\\n            acoFactory,\\r\\n            chiToken,\\r\\n            lendingPool,\\r\\n            underlying, \\r\\n            strikeAsset,\\r\\n            isCall,\\r\\n            baseVolatility,\\r\\n            poolAdmin,\\r\\n            strategy,\\r\\n            acoPermissionConfig,\\r\\n            IACOPool2.PoolProtocolConfig(\\r\\n                lendingPoolReferral,\\r\\n                acoPoolWithdrawOpenPositionPenalty,\\r\\n                acoPoolUnderlyingPriceAdjustPercentage,\\r\\n                acoPoolFee,\\r\\n                acoPoolMaximumOpenAco,\\r\\n                acoPoolFeeDestination,\\r\\n                assetConverterHelper\\r\\n            )\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to deploy a proxy using ACO pool implementation.\\r\\n     * @param initData Data to initialize o ACO Pool.\\r\\n     * @return Address of the new proxy deployed for the ACO pool.\\r\\n     */\\r\\n    function _deployAcoPool(IACOPool2.InitData memory initData) internal override virtual returns(address) {\\r\\n        ACOProxy proxy = new ACOProxy(address(this), acoPoolImplementation, abi.encodeWithSelector(IACOPool2.init.selector, initData));\\r\\n        return address(proxy);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to create a new ACO pool.\\r\\n     * @param initData Data to initialize o ACO Pool.\\r\\n     * @return Address of the new minimal proxy deployed for the ACO pool.\\r\\n     */\\r\\n    function _createAcoPool(IACOPool2.InitData memory initData) internal override virtual returns(address) {\\r\\n        address acoPool  = _deployAcoPool(initData);\\r\\n        acoPoolBasicData[acoPool] = ACOPoolBasicData(initData.underlying, initData.strikeAsset, initData.isCall);\\r\\n        creators[acoPool] = msg.sender;\\r\\n        for (uint256 i = 0; i \\u003c acoAuthorizedCreators.length; ++i) {\\r\\n            IACOPool2(acoPool).setValidAcoCreator(acoAuthorizedCreators[i], true);\\r\\n        }\\r\\n        for (uint256 j = 0; j \\u003c acoForbiddenCreators.length; ++j) {\\r\\n            IACOPool2(acoPool).setForbiddenAcoCreator(acoForbiddenCreators[j], true);\\r\\n        }\\r\\n        emit NewAcoPool(initData.underlying, initData.strikeAsset, initData.isCall, acoPool, acoPoolImplementation);\\r\\n        return acoPool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the pool proxy admin address.\\r\\n     * @param newPoolProxyAdmin Address of the new pool proxy admin.\\r\\n     */\\r\\n    function _setPoolProxyAdmin(address newPoolProxyAdmin) internal virtual {\\r\\n        require(newPoolProxyAdmin != address(0), \\\"ACOPoolFactory::_setPoolProxyAdmin: Invalid pool proxy admin\\\");\\r\\n        emit SetPoolProxyAdmin(poolProxyAdmin, newPoolProxyAdmin);\\r\\n        poolProxyAdmin = newPoolProxyAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the ACO creator forbidden status.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n     * @param newStatus Whether the creator will be forbidden.\\r\\n     */\\r\\n    function _setForbiddenAcoCreator(address acoCreator, bool newStatus) internal virtual {\\r\\n        bool previousStatus = false;\\r\\n        uint256 size = acoForbiddenCreators.length;\\r\\n        for (uint256 i = size; i \\u003e 0; --i) {\\r\\n            if (acoForbiddenCreators[i - 1] == acoCreator) {\\r\\n                previousStatus = true;\\r\\n                if (!newStatus) {\\r\\n                    if (i \\u003c size) {\\r\\n                        acoForbiddenCreators[i - 1] = acoForbiddenCreators[(size - 1)];\\r\\n                    }\\r\\n                    acoForbiddenCreators.pop();\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (newStatus \\u0026\\u0026 !previousStatus) {\\r\\n            acoForbiddenCreators.push(acoCreator);\\r\\n        }\\r\\n        emit SetForbiddenAcoCreator(acoCreator, previousStatus, newStatus);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to change the ACO pools ACO creator forbidden situation.\\r\\n     * @param acoCreator Address of the ACO creator.\\r\\n\\t * @param status Forbidden situation.\\r\\n     * @param acoPools Array of ACO pools addresses.\\r\\n     */\\r\\n    function _setForbiddenAcoCreatorOnAcoPool(address acoCreator, bool status, address[] memory acoPools) internal virtual {\\r\\n        for (uint256 i = 0; i \\u003c acoPools.length; ++i) {\\r\\n            IACOPool2(acoPools[i]).setForbiddenAcoCreator(acoCreator, status);\\r\\n        }\\r\\n    }\\r\\n}\"},\"ACOProxy.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ACOProxy\\r\\n * @dev A proxy contract that implements delegation of calls to other contracts.\\r\\n */\\r\\ncontract ACOProxy {\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the admin address has been changed.\\r\\n     * @param previousAdmin Address of the previous admin.\\r\\n     * @param newAdmin Address of the new admin.\\r\\n     */\\r\\n    event ProxyAdminUpdated(address previousAdmin, address newAdmin);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the proxy implementation has been changed.\\r\\n     * @param previousImplementation Address of the previous proxy implementation.\\r\\n     * @param newImplementation Address of the new proxy implementation.\\r\\n     */\\r\\n    event SetImplementation(address previousImplementation, address newImplementation);\\r\\n    \\r\\n    /**\\r\\n     * @dev Storage position for the admin address.\\r\\n     */\\r\\n    bytes32 private constant adminPosition = keccak256(\\\"acoproxy.admin\\\");\\r\\n    \\r\\n    /**\\r\\n     * @dev Storage position for the proxy implementation address.\\r\\n     */\\r\\n    bytes32 private constant implementationPosition = keccak256(\\\"acoproxy.implementation\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if the `msg.sender` is the admin.\\r\\n     * Only admin address can execute.\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin(), \\\"ACOProxy::onlyAdmin\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(address _admin, address _implementation, bytes memory _initdata) public {\\r\\n        _setAdmin(_admin);\\r\\n        _setImplementation(_implementation, _initdata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates the execution to the proxy implementation contract.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        address addr = implementation();\\r\\n        assembly {\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), addr, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch result\\r\\n            case 0 { revert(0, returndatasize()) }\\r\\n            default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to be compliance with EIP 897.\\r\\n     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-897.md\\r\\n     * It is an \\\"upgradable proxy\\\".\\r\\n     */\\r\\n    function proxyType() public pure returns(uint256) {\\r\\n        return 2; \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to get the proxy admin address.\\r\\n     * @return adm The proxy admin address.\\r\\n     */\\r\\n    function admin() public view returns (address adm) {\\r\\n        bytes32 position = adminPosition;\\r\\n        assembly {\\r\\n            adm := sload(position)\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to get the proxy implementation address.\\r\\n     * @return impl The proxy implementation address.\\r\\n     */\\r\\n    function implementation() public view returns (address impl) {\\r\\n        bytes32 position = implementationPosition;\\r\\n        assembly {\\r\\n            impl := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to set the proxy admin address.\\r\\n     * Only can be called by the proxy admin.\\r\\n     * @param newAdmin Address of the new proxy admin.\\r\\n     */\\r\\n    function transferProxyAdmin(address newAdmin) external onlyAdmin {\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the proxy implementation address.\\r\\n     * Only can be called by the proxy admin.\\r\\n     * @param newImplementation Address of the new proxy implementation.\\r\\n     * @param initData ABI encoded with signature data that will be delegated over the new implementation.\\r\\n     */\\r\\n    function setImplementation(address newImplementation, bytes calldata initData) external onlyAdmin {\\r\\n        _setImplementation(newImplementation, initData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the proxy admin address.\\r\\n     * @param newAdmin Address of the new proxy admin.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) internal {\\r\\n        require(newAdmin != address(0), \\\"ACOProxy::_setAdmin: Invalid admin\\\");\\r\\n        \\r\\n        emit ProxyAdminUpdated(admin(), newAdmin);\\r\\n        \\r\\n        bytes32 position = adminPosition;\\r\\n        assembly {\\r\\n            sstore(position, newAdmin)\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the proxy implementation address.\\r\\n     * The implementation address must be a contract.\\r\\n     * @param newImplementation Address of the new proxy implementation.\\r\\n     * @param initData ABI encoded with signature data that will be delegated over the new implementation.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation, bytes memory initData) internal {\\r\\n        require(Address.isContract(newImplementation), \\\"ACOProxy::_setImplementation: Invalid implementation\\\");\\r\\n        \\r\\n        emit SetImplementation(implementation(), newImplementation);\\r\\n        \\r\\n        bytes32 position = implementationPosition;\\r\\n        assembly {\\r\\n            sstore(position, newImplementation)\\r\\n        }\\r\\n        if (initData.length \\u003e 0) {\\r\\n            (bool success,) = newImplementation.delegatecall(initData);\\r\\n            assert(success);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Address.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\n// Contract on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\"},\"IACOPool2.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\n\\r\\ninterface IACOPool2 is IERC20 {\\r\\n\\r\\n    struct InitData {\\r\\n        address acoFactory;\\r\\n        address chiToken;\\r\\n        address lendingPool;\\r\\n        address underlying;\\r\\n        address strikeAsset;\\r\\n        bool isCall; \\r\\n        uint256 baseVolatility;  \\r\\n        address admin;\\r\\n        address strategy;  \\r\\n        PoolAcoPermissionConfig acoPermissionConfig;\\r\\n        PoolProtocolConfig protocolConfig;\\r\\n    }\\r\\n\\r\\n\\tstruct AcoData {\\r\\n        bool open;\\r\\n        uint256 valueSold;\\r\\n        uint256 collateralLocked;\\r\\n        uint256 collateralRedeemed;\\r\\n        uint256 index;\\r\\n\\t\\tuint256 openIndex;\\r\\n    }\\r\\n    \\r\\n    struct PoolAcoPermissionConfig {\\r\\n        uint256 tolerancePriceBelowMin;\\r\\n        uint256 tolerancePriceBelowMax;\\r\\n        uint256 tolerancePriceAboveMin;\\r\\n        uint256 tolerancePriceAboveMax;\\r\\n        uint256 minExpiration;\\r\\n        uint256 maxExpiration;\\r\\n    }\\r\\n    \\r\\n    struct PoolProtocolConfig {\\r\\n        uint16 lendingPoolReferral;\\r\\n        uint256 withdrawOpenPositionPenalty;\\r\\n        uint256 underlyingPriceAdjustPercentage;\\r\\n        uint256 fee;\\r\\n        uint256 maximumOpenAco;\\r\\n        address feeDestination;\\r\\n        address assetConverter;\\r\\n    }\\r\\n    \\r\\n\\tfunction init(InitData calldata initData) external;\\r\\n\\tfunction numberOfAcoTokensNegotiated() external view returns(uint256);\\r\\n    function numberOfOpenAcoTokens() external view returns(uint256);\\r\\n    function collateral() external view returns(address);\\r\\n\\tfunction canSwap(address acoToken) external view returns(bool);\\r\\n\\tfunction quote(address acoToken, uint256 tokenAmount) external view returns(\\r\\n\\t\\tuint256 swapPrice, \\r\\n\\t\\tuint256 protocolFee, \\r\\n\\t\\tuint256 underlyingPrice, \\r\\n\\t\\tuint256 volatility\\r\\n\\t);\\r\\n\\tfunction getDepositShares(uint256 collateralAmount) external view returns(uint256 shares);\\r\\n\\tfunction getWithdrawNoLockedData(uint256 shares) external view returns(\\r\\n\\t\\tuint256 underlyingWithdrawn, \\r\\n\\t\\tuint256 strikeAssetWithdrawn, \\r\\n\\t\\tbool isPossible\\r\\n\\t);\\r\\n\\tfunction getWithdrawWithLocked(uint256 shares) external view returns(\\r\\n\\t\\tuint256 underlyingWithdrawn, \\r\\n\\t\\tuint256 strikeAssetWithdrawn, \\r\\n\\t\\taddress[] memory acos, \\r\\n\\t\\tuint256[] memory acosAmount\\r\\n\\t);\\r\\n\\tfunction getGeneralData() external view returns(\\r\\n        uint256 underlyingBalance,\\r\\n\\t\\tuint256 strikeAssetBalance,\\r\\n\\t\\tuint256 collateralLocked,\\r\\n        uint256 collateralOnOpenPosition,\\r\\n        uint256 collateralLockedRedeemable,\\r\\n        uint256 poolSupply\\r\\n    );\\r\\n\\tfunction setLendingPoolReferral(uint16 newLendingPoolReferral) external;\\r\\n\\tfunction setPoolDataForAcoPermission(uint256 newTolerancePriceBelow, uint256 newTolerancePriceAbove, uint256 newMinExpiration, uint256 newMaxExpiration) external;\\r\\n\\tfunction setAcoPermissionConfig(PoolAcoPermissionConfig calldata newConfig) external;\\r\\n\\tfunction setPoolAdmin(uint256 newAdmin) external;\\r\\n\\tfunction setProtocolConfig(PoolProtocolConfig calldata newConfig) external;\\r\\n\\tfunction setFeeData(address newFeeDestination, uint256 newFee) external;\\r\\n\\tfunction setAssetConverter(address newAssetConverter) external;\\r\\n    function setTolerancePriceBelow(uint256 newTolerancePriceBelow) external;\\r\\n    function setTolerancePriceAbove(uint256 newTolerancePriceAbove) external;\\r\\n    function setMinExpiration(uint256 newMinExpiration) external;\\r\\n    function setMaxExpiration(uint256 newMaxExpiration) external;\\r\\n    function setFee(uint256 newFee) external;\\r\\n    function setFeeDestination(address newFeeDestination) external;\\r\\n\\tfunction setWithdrawOpenPositionPenalty(uint256 newWithdrawOpenPositionPenalty) external;\\r\\n\\tfunction setUnderlyingPriceAdjustPercentage(uint256 newUnderlyingPriceAdjustPercentage) external;\\r\\n\\tfunction setMaximumOpenAco(uint256 newMaximumOpenAco) external;\\r\\n\\tfunction setStrategy(address newStrategy) external;\\r\\n\\tfunction setBaseVolatility(uint256 newBaseVolatility) external;\\r\\n\\tfunction setValidAcoCreator(address acoCreator, bool newPermission) external;\\r\\n\\tfunction setForbiddenAcoCreator(address acoCreator, bool newStatus) external;\\r\\n    function withdrawStuckToken(address token, address destination) external;\\r\\n    function deposit(uint256 collateralAmount, uint256 minShares, address to, bool isLendingToken) external payable returns(uint256 acoPoolTokenAmount);\\r\\n\\tfunction depositWithGasToken(uint256 collateralAmount, uint256 minShares, address to, bool isLendingToken) external payable returns(uint256 acoPoolTokenAmount);\\r\\n\\tfunction withdrawNoLocked(uint256 shares, uint256 minCollateral, address account, bool withdrawLendingToken) external returns (\\r\\n\\t\\tuint256 underlyingWithdrawn,\\r\\n\\t\\tuint256 strikeAssetWithdrawn\\r\\n\\t);\\r\\n\\tfunction withdrawNoLockedWithGasToken(uint256 shares, uint256 minCollateral, address account, bool withdrawLendingToken) external returns (\\r\\n\\t\\tuint256 underlyingWithdrawn,\\r\\n\\t\\tuint256 strikeAssetWithdrawn\\r\\n\\t);\\r\\n    function withdrawWithLocked(uint256 shares, address account, bool withdrawLendingToken) external returns (\\r\\n\\t\\tuint256 underlyingWithdrawn,\\r\\n\\t\\tuint256 strikeAssetWithdrawn,\\r\\n\\t\\taddress[] memory acos,\\r\\n\\t\\tuint256[] memory acosAmount\\r\\n\\t);\\r\\n\\tfunction withdrawWithLockedWithGasToken(uint256 shares, address account, bool withdrawLendingToken) external returns (\\r\\n\\t\\tuint256 underlyingWithdrawn,\\r\\n\\t\\tuint256 strikeAssetWithdrawn,\\r\\n\\t\\taddress[] memory acos,\\r\\n\\t\\tuint256[] memory acosAmount\\r\\n\\t);\\r\\n    function swap(address acoToken, uint256 tokenAmount, uint256 restriction, address to, uint256 deadline) external payable;\\r\\n    function swapWithGasToken(address acoToken, uint256 tokenAmount, uint256 restriction, address to, uint256 deadline) external payable;\\r\\n    function redeemACOTokens() external;\\r\\n\\tfunction redeemACOToken(address acoToken) external;\\r\\n    function restoreCollateral() external;\\r\\n    function lendCollateral() external;\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.6;\\r\\n\\r\\n// Contract on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acoPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acoPoolImplementation\",\"type\":\"address\"}],\"name\":\"NewAcoPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAcoFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAcoFactory\",\"type\":\"address\"}],\"name\":\"SetAcoFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousAcoFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAcoFee\",\"type\":\"uint256\"}],\"name\":\"SetAcoPoolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAcoPoolFeeDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAcoPoolFeeDestination\",\"type\":\"address\"}],\"name\":\"SetAcoPoolFeeDestination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAcoPoolImplementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAcoPoolImplementation\",\"type\":\"address\"}],\"name\":\"SetAcoPoolImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLendingPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLendingPool\",\"type\":\"address\"}],\"name\":\"SetAcoPoolLendingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldLendingPoolReferral\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLendingPoolReferral\",\"type\":\"uint256\"}],\"name\":\"SetAcoPoolLendingPoolReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousMaximumOpenAco\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMaximumOpenAco\",\"type\":\"uint256\"}],\"name\":\"SetAcoPoolMaximumOpenAco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"previousPermission\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"SetAcoPoolPermission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousUnderlyingPriceAdjustPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newUnderlyingPriceAdjustPercentage\",\"type\":\"uint256\"}],\"name\":\"SetAcoPoolUnderlyingPriceAdjustPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousWithdrawOpenPositionPenalty\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newWithdrawOpenPositionPenalty\",\"type\":\"uint256\"}],\"name\":\"SetAcoPoolWithdrawOpenPositionPenalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAssetConverterHelper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAssetConverterHelper\",\"type\":\"address\"}],\"name\":\"SetAssetConverterHelper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acoCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"previousPermission\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"SetAuthorizedAcoCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousChiToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newChiToken\",\"type\":\"address\"}],\"name\":\"SetChiToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFactoryAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFactoryAdmin\",\"type\":\"address\"}],\"name\":\"SetFactoryAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acoCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"previousStatus\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"SetForbiddenAcoCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"previousPermission\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPoolProxyAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPoolProxyAdmin\",\"type\":\"address\"}],\"name\":\"SetPoolProxyAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"previousPermission\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"SetStrategyPermission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acoFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acoPoolBasicData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoPoolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoPoolImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoPoolMaximumOpenAco\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoPoolUnderlyingPriceAdjustPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acoPoolWithdrawOpenPositionPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetConverterHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseVolatility\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tolerancePriceBelowMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tolerancePriceBelowMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tolerancePriceAboveMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tolerancePriceAboveMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct IACOPool2.PoolAcoPermissionConfig\",\"name\":\"acoPermissionConfig\",\"type\":\"tuple\"}],\"name\":\"createAcoPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAcoCreatorAuthorized\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAcoCreatorForbidden\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfAcoCreatorsAuthorized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfAcoCreatorsForbidden\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_acoPoolImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_acoFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetConverterHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_acoPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_acoPoolFeeDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_acoPoolWithdrawOpenPositionPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_acoPoolUnderlyingPriceAdjustPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_acoPoolMaximumOpenAco\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPoolReferral\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAdminPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAcoFactory\",\"type\":\"address\"}],\"name\":\"setAcoFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tolerancePricesBelow\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tolerancePricesAbove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minExpirations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxExpirations\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setAcoPermissionDataOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAcoPoolFee\",\"type\":\"uint256\"}],\"name\":\"setAcoPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAcoPoolFeeDestination\",\"type\":\"address\"}],\"name\":\"setAcoPoolFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAcoPoolImplementation\",\"type\":\"address\"}],\"name\":\"setAcoPoolImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLendingPool\",\"type\":\"address\"}],\"name\":\"setAcoPoolLendingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newLendingPoolReferral\",\"type\":\"uint16\"}],\"name\":\"setAcoPoolLendingPoolReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaximumOpenAco\",\"type\":\"uint256\"}],\"name\":\"setAcoPoolMaximumOpenAco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"setAcoPoolPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"setAcoPoolStrategyPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newUnderlyingPriceAdjustPercentage\",\"type\":\"uint256\"}],\"name\":\"setAcoPoolUnderlyingPriceAdjustPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawOpenPositionPenalty\",\"type\":\"uint256\"}],\"name\":\"setAcoPoolWithdrawOpenPositionPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetConverterHelper\",\"type\":\"address\"}],\"name\":\"setAssetConverterHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetConverters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setAssetConverterOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"setAuthorizedAcoCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"baseVolatilities\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setBaseVolatilityOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChiToken\",\"type\":\"address\"}],\"name\":\"setChiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactoryAdmin\",\"type\":\"address\"}],\"name\":\"setFactoryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"feeDestinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setFeeDataOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"feeDestinations\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setFeeDestinationOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setFeeOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setForbiddenAcoCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setForbiddenAcoCreatorOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lendingPoolReferrals\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setLendingPoolReferralOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"maxExpirations\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setMaxExpirationOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"maximumOpenAcos\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setMaximumOpenAcoOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minExpirations\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setMinExpirationOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newPermission\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoolProxyAdmin\",\"type\":\"address\"}],\"name\":\"setPoolProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lendingPoolReferral\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"withdrawOpenPositionPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPriceAdjustPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumOpenAco\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetConverter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setProtocolConfigOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setStrategyOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tolerancePricesAbove\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setTolerancePriceAboveOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tolerancePricesBelow\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setTolerancePriceBelowOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"underlyingPriceAdjustPercentages\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setUnderlyingPriceAdjustPercentageOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setValidAcoCreatorOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"withdrawOpenPositionPenalties\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"setWithdrawOpenPositionPenaltyOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoolProxyAdmin\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"transferPoolProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"updatePoolsImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"acoPools\",\"type\":\"address[]\"}],\"name\":\"withdrawStuckAssetOnAcoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ACOPoolFactory2V4","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bc8849990366c069e57d9a10d0ab538dab2ff888c0c26c4d5df9d5d5b8837497"}]}