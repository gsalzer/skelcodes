{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/ISmartTreasuryBootstrap.sol\r\n\r\n\r\npragma solidity >=0.6.0 <=0.7.5;\r\n\r\ninterface ISmartTreasuryBootstrap {\r\n  function swap(uint256[] calldata minBalances) external; // Exchange fees + IDLE if required for ETH\r\n  function initialise() external;\r\n  function bootstrap() external; // Create smart treasury pool, using parameters from spec and call begin updating weights\r\n  function renounce() external; // transfer ownership to governance. \r\n}\r\n\r\n// File: contracts/interfaces/BalancerInterface.sol\r\n\r\n\r\npragma solidity = 0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface BPool {\r\n  event LOG_SWAP(\r\n    address indexed caller,\r\n    address indexed tokenIn,\r\n    address indexed tokenOut,\r\n    uint256         tokenAmountIn,\r\n    uint256         tokenAmountOut\r\n  );\r\n\r\n  event LOG_JOIN(\r\n    address indexed caller,\r\n    address indexed tokenIn,\r\n    uint256         tokenAmountIn\r\n  );\r\n\r\n  event LOG_EXIT(\r\n    address indexed caller,\r\n    address indexed tokenOut,\r\n    uint256         tokenAmountOut\r\n  );\r\n\r\n  event LOG_CALL(\r\n    bytes4  indexed sig,\r\n    address indexed caller,\r\n    bytes           data\r\n  ) anonymous;\r\n\r\n  function isPublicSwap() external view returns (bool);\r\n  function isFinalized() external view returns (bool);\r\n  function isBound(address t) external view returns (bool);\r\n  function getNumTokens() external view returns (uint);\r\n  function getCurrentTokens() external view returns (address[] memory tokens);\r\n  function getFinalTokens() external view returns (address[] memory tokens);\r\n  function getDenormalizedWeight(address token) external view returns (uint);\r\n  function getTotalDenormalizedWeight() external view returns (uint);\r\n  function getNormalizedWeight(address token) external view returns (uint);\r\n  function getBalance(address token) external view returns (uint);\r\n  function getSwapFee() external view returns (uint);\r\n  function getController() external view returns (address);\r\n\r\n  function setSwapFee(uint swapFee) external;\r\n  function setController(address manager) external;\r\n  function setPublicSwap(bool public_) external;\r\n  function finalize() external;\r\n  function bind(address token, uint balance, uint denorm) external;\r\n  function unbind(address token) external;\r\n  function gulp(address token) external;\r\n\r\n  function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n  function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n\r\n  function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;   \r\n  function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n\r\n  function swapExactAmountIn(\r\n    address tokenIn,\r\n    uint tokenAmountIn,\r\n    address tokenOut,\r\n    uint minAmountOut,\r\n    uint maxPrice\r\n  ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n\r\n  function swapExactAmountOut(\r\n    address tokenIn,\r\n    uint maxAmountIn,\r\n    address tokenOut,\r\n    uint tokenAmountOut,\r\n    uint maxPrice\r\n  ) external returns (uint tokenAmountIn, uint spotPriceAfter);\r\n\r\n  function joinswapExternAmountIn(\r\n    address tokenIn,\r\n    uint tokenAmountIn,\r\n    uint minPoolAmountOut\r\n  ) external returns (uint poolAmountOut);\r\n\r\n  function joinswapPoolAmountOut(\r\n    address tokenIn,\r\n    uint poolAmountOut,\r\n    uint maxAmountIn\r\n  ) external returns (uint tokenAmountIn);\r\n\r\n  function exitswapPoolAmountIn(\r\n    address tokenOut,\r\n    uint poolAmountIn,\r\n    uint minAmountOut\r\n  ) external returns (uint tokenAmountOut);\r\n\r\n  function exitswapExternAmountOut(\r\n    address tokenOut,\r\n    uint tokenAmountOut,\r\n    uint maxPoolAmountIn\r\n  ) external returns (uint poolAmountIn);\r\n\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address whom) external view returns (uint);\r\n  function allowance(address src, address dst) external view returns (uint);\r\n\r\n  function approve(address dst, uint amt) external returns (bool);\r\n  function transfer(address dst, uint amt) external returns (bool);\r\n  function transferFrom(\r\n    address src, address dst, uint amt\r\n  ) external returns (bool);\r\n}\r\n\r\ninterface ConfigurableRightsPool {\r\n  event LogCall(\r\n    bytes4  indexed sig,\r\n    address indexed caller,\r\n    bytes data\r\n  ) anonymous;\r\n\r\n  event LogJoin(\r\n    address indexed caller,\r\n    address indexed tokenIn,\r\n    uint tokenAmountIn\r\n  );\r\n\r\n  event LogExit(\r\n    address indexed caller,\r\n    address indexed tokenOut,\r\n    uint tokenAmountOut\r\n  );\r\n\r\n  event CapChanged(\r\n    address indexed caller,\r\n    uint oldCap,\r\n    uint newCap\r\n  );\r\n    \r\n  event NewTokenCommitted(\r\n    address indexed token,\r\n    address indexed pool,\r\n    address indexed caller\r\n  );\r\n\r\n  function createPool(\r\n    uint initialSupply\r\n    // uint minimumWeightChangeBlockPeriodParam,\r\n    // uint addTokenTimeLockInBlocksParam\r\n  ) external;\r\n\r\n  function createPool(\r\n    uint initialSupply,\r\n    uint minimumWeightChangeBlockPeriodParam,\r\n    uint addTokenTimeLockInBlocksParam\r\n  ) external;\r\n\r\n  function updateWeightsGradually(\r\n    uint[] calldata newWeights,\r\n    uint startBlock,\r\n    uint endBlock\r\n  ) external;\r\n\r\n  function joinswapExternAmountIn(\r\n    address tokenIn,\r\n    uint tokenAmountIn,\r\n    uint minPoolAmountOut\r\n  ) external;\r\n  \r\n  function whitelistLiquidityProvider(address provider) external;\r\n  function removeWhitelistedLiquidityProvider(address provider) external;\r\n  function canProvideLiquidity(address provider) external returns (bool);\r\n  function getController() external view returns (address);\r\n  function setController(address newOwner) external;\r\n\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function balanceOf(address account) external returns (uint);\r\n  function totalSupply() external returns (uint);\r\n  function bPool() external view returns (BPool);\r\n\r\n  function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n}\r\n\r\ninterface IBFactory {\r\n  event LOG_NEW_POOL(\r\n    address indexed caller,\r\n    address indexed pool\r\n  );\r\n\r\n  event LOG_BLABS(\r\n    address indexed caller,\r\n    address indexed blabs\r\n  );\r\n\r\n  function isBPool(address b) external view returns (bool);\r\n  function newBPool() external returns (BPool);\r\n}\r\n\r\ninterface ICRPFactory {\r\n  event LogNewCrp(\r\n    address indexed caller,\r\n    address indexed pool\r\n  );\r\n\r\n  struct PoolParams {\r\n    // Balancer Pool Token (representing shares of the pool)\r\n    string poolTokenSymbol;\r\n    string poolTokenName;\r\n    // Tokens inside the Pool\r\n    address[] constituentTokens;\r\n    uint[] tokenBalances;\r\n    uint[] tokenWeights;\r\n    uint swapFee;\r\n  }\r\n\r\n  struct Rights {\r\n    bool canPauseSwapping;\r\n    bool canChangeSwapFee;\r\n    bool canChangeWeights;\r\n    bool canAddRemoveTokens;\r\n    bool canWhitelistLPs;\r\n    bool canChangeCap;\r\n  }\r\n\r\n  function newCrp(\r\n    address factoryAddress,\r\n    PoolParams calldata poolParams,\r\n    Rights calldata rights\r\n  ) external returns (ConfigurableRightsPool);\r\n}\r\n\r\n// File: contracts/libraries/BalancerConstants.sol\r\n\r\npragma solidity = 0.6.8;\r\n\r\n/**\r\n * @author Balancer Labs\r\n * @title Put all the constants in one place\r\n */\r\n\r\nlibrary BalancerConstants {\r\n    // State variables (must be constant in a library)\r\n\r\n    // B \"ONE\" - all math is in the \"realm\" of 10 ** 18;\r\n    // where numeric 1 = 10 ** 18\r\n    uint public constant BONE = 10**18;\r\n    uint public constant MIN_WEIGHT = BONE;\r\n    uint public constant MAX_WEIGHT = BONE * 50;\r\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\r\n    uint public constant MIN_BALANCE = BONE / 10**6;\r\n    uint public constant MAX_BALANCE = BONE * 10**12;\r\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\r\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\r\n    uint public constant MIN_FEE = BONE / 10**6;\r\n    uint public constant MAX_FEE = BONE / 10;\r\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\r\n    uint public constant EXIT_FEE = 0;\r\n    uint public constant MAX_IN_RATIO = BONE / 2;\r\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\r\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\r\n    uint public constant MIN_ASSET_LIMIT = 2;\r\n    uint public constant MAX_ASSET_LIMIT = 8;\r\n    uint public constant MAX_UINT = uint(-1);\r\n}\r\n\r\n// File: contracts/SmartTreasuryBootstrap.sol\r\n\r\npragma solidity = 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n@author Asaf Silman\r\n@notice Smart contract for initialising the idle smart treasury\r\n */\r\ncontract SmartTreasuryBootstrap is ISmartTreasuryBootstrap, Ownable {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  address public immutable timelock;\r\n  address public immutable feeCollectorAddress;\r\n\r\n  address private crpaddress;\r\n\r\n  uint256 private idlePerWeth; // internal price oracle for IDLE\r\n\r\n  enum ContractState { DEPLOYED, SWAPPED, INITIALISED, BOOTSTRAPPED, RENOUNCED }\r\n  ContractState private contractState;\r\n\r\n  IBFactory private immutable balancer_bfactory;\r\n  ICRPFactory private immutable balancer_crpfactory;\r\n\r\n  // hardcoded as this value is the same across all networks\r\n  // https://uniswap.org/docs/v2/smart-contracts/router02\r\n  IUniswapV2Router02 private constant uniswapRouterV2 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n  IERC20 private immutable idle;\r\n  IERC20 private immutable weth;\r\n\r\n  EnumerableSet.AddressSet private depositTokens;\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Initialises the bootstrap contract.\r\n  @dev Configures balancer factories\r\n  @dev Configures uniswap router\r\n  @dev Configures IDLE and WETH token\r\n  @param _balancerBFactory Balancer core factory\r\n  @param _balancerBFactory Balancer configurable rights pool (CRP) factory\r\n  @param _idle IDLE governance token address\r\n  @param _weth WETH token address\r\n  @param _timelock address of IDLE timelock\r\n  @param _feeCollectorAddress address of IDLE fee collector\r\n  @param _multisig The multisig account to transfer ownership to after contract initialised\r\n  @param _initialDepositTokens The initial tokens to register with the fee deposit\r\n   */\r\n  constructor (\r\n    address _balancerBFactory,\r\n    address _balancerCRPFactory,\r\n    address _idle,\r\n    address _weth,\r\n    address _timelock,\r\n    address _feeCollectorAddress,\r\n    address _multisig,\r\n    address[] memory _initialDepositTokens\r\n  ) public {\r\n    require(_balancerBFactory != address(0), \"BFactory cannot be the 0 address\");\r\n    require(_balancerCRPFactory != address(0), \"CRPFactory cannot be the 0 address\");\r\n    require(_idle != address(0), \"IDLE cannot be the 0 address\");\r\n    require(_weth != address(0), \"WETH cannot be the 0 address\");\r\n    require(_timelock != address(0), \"Timelock cannot be the 0 address\");\r\n    require(_feeCollectorAddress != address(0), \"FeeCollector cannot be the 0 address\");\r\n    require(_multisig != address(0), \"Multisig cannot be 0 address\");\r\n\r\n    // initialise balancer factories\r\n    balancer_bfactory = IBFactory(_balancerBFactory);\r\n    balancer_crpfactory = ICRPFactory(_balancerCRPFactory);\r\n\r\n    // configure tokens\r\n    idle = IERC20(_idle);\r\n    weth = IERC20(_weth);\r\n\r\n    // configure network addresses\r\n    timelock = _timelock;\r\n    feeCollectorAddress = _feeCollectorAddress;\r\n\r\n    address _depositToken;\r\n    for (uint256 index = 0; index < _initialDepositTokens.length; index++) {\r\n      _depositToken = _initialDepositTokens[index];\r\n      require(_depositToken != address(_weth), \"WETH fees are not supported\"); // There is no WETH -> WETH pool in uniswap\r\n      require(_depositToken != address(_idle), \"IDLE fees are not supported\"); // Dont swap IDLE to WETH\r\n\r\n      IERC20(_depositToken).safeIncreaseAllowance(address(uniswapRouterV2), type(uint256).max); // max approval\r\n      depositTokens.add(_depositToken);\r\n    }\r\n\r\n    transferOwnership(_multisig);\r\n    contractState = ContractState.DEPLOYED;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Converts all tokens in depositToken enumerable set to WETH.\r\n  @dev Can be called after deployment as many times an necissary.\r\n  @dev Converts tokens using uniswap simple path. E.g. token -> WETH.\r\n  @dev This should be called after the governance proposal has transfered funds to bootstrapping address\r\n  @dev After this has been called, `swap()` should be called.\r\n  @param minTokenOut Array of minimum tokens to recieve from swap\r\n   */\r\n  function swap(uint256[] calldata minTokenOut) external override onlyOwner {\r\n    require(contractState==ContractState.DEPLOYED || contractState==ContractState.SWAPPED, \"Invalid state\");\r\n    uint256 counter = depositTokens.length();\r\n\r\n    require(minTokenOut.length == counter, \"Invalid length\");\r\n\r\n    address[] memory path = new address[](2);\r\n    path[1] = address(weth);\r\n\r\n    address _tokenAddress;\r\n    IERC20 _tokenInterface;\r\n    uint256 _currentBalance;\r\n\r\n    for (uint256 index = 0; index < counter; index++) {\r\n      _tokenAddress = depositTokens.at(index);\r\n      _tokenInterface = IERC20(_tokenAddress);\r\n\r\n      _currentBalance = _tokenInterface.balanceOf(address(this));\r\n\r\n      path[0] = _tokenAddress;\r\n      \r\n      uniswapRouterV2.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        _currentBalance,\r\n        minTokenOut[index],\r\n        path,\r\n        address(this),\r\n        block.timestamp.add(1800)\r\n      );\r\n    }\r\n\r\n    contractState = ContractState.SWAPPED;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Initialises the smart treasury with bootstrapping parameters\r\n  @notice Calculated initial weights based on total value of IDLE and WETH.\r\n  @dev This function should be called after all fees have been swapped, by calling `swap()`\r\n  @dev After this has been called, `bootstrap()` should be called.\r\n   */\r\n  function initialise() external override onlyOwner {\r\n    require(contractState == ContractState.SWAPPED, \"Invalid State\");\r\n    require(crpaddress==address(0), \"Cannot initialise if CRP already exists\");\r\n    require(idlePerWeth!=0, \"IDLE price not set\");\r\n    \r\n    uint256 idleBalance = idle.balanceOf(address(this));\r\n    uint256 wethBalance = weth.balanceOf(address(this));\r\n\r\n    // hard-coded minimums of atleast 100 IDLE and 1 WETH\r\n    require(idleBalance > uint256(100).mul(10**18), \"Cannot initialise without idle in contract\");\r\n    require(wethBalance > uint256(1).mul(10**18), \"Cannot initialise without weth in contract\");\r\n\r\n    address[] memory tokens = new address[](2);\r\n    tokens[0] = address(idle);\r\n    tokens[1] = address(weth);\r\n\r\n    uint256[] memory balances = new uint256[](2);\r\n    balances[0] = idleBalance;\r\n    balances[1] = wethBalance;\r\n\r\n    \r\n    uint256 idleValueInWeth = balances[0].mul(10**18).div(idlePerWeth);\r\n    uint256 wethValue = balances[1];\r\n\r\n    uint256 totalValueInPool = idleValueInWeth.add(wethValue); // expressed in WETH\r\n\r\n    uint256[] memory weights = new uint256[](2);\r\n    weights[0] = idleValueInWeth.mul(BalancerConstants.BONE * 25).div(totalValueInPool); // IDLE value / total value\r\n    weights[1] = wethValue.mul(BalancerConstants.BONE * 25).div(totalValueInPool); // WETH value / total value\r\n\r\n    require(weights[0] >= BalancerConstants.BONE  && weights[0] <= BalancerConstants.BONE.mul(24), \"Invalid weights\");\r\n\r\n    ICRPFactory.PoolParams memory params = ICRPFactory.PoolParams({\r\n      poolTokenSymbol: \"ISTT\",\r\n      poolTokenName: \"Idle Smart Treasury Token\",\r\n      constituentTokens: tokens,\r\n      tokenBalances: balances,\r\n      tokenWeights: weights,\r\n      swapFee: 5 * 10**15 // .5% fee = 5000000000000000\r\n    });\r\n\r\n    ICRPFactory.Rights memory rights = ICRPFactory.Rights({\r\n      canPauseSwapping:   true,\r\n      canChangeSwapFee:   true,\r\n      canChangeWeights:   true,\r\n      canAddRemoveTokens: true,\r\n      canWhitelistLPs:    true,\r\n      canChangeCap:       false\r\n    });\r\n    \r\n    /**** DEPLOY POOL ****/\r\n\r\n    ConfigurableRightsPool crp = balancer_crpfactory.newCrp(\r\n      address(balancer_bfactory),\r\n      params,\r\n      rights\r\n    );\r\n\r\n    // A balancer pool with canWhitelistLPs does not initially whitelist the controller\r\n    // This must be manually set\r\n    crp.whitelistLiquidityProvider(address(this));\r\n    crp.whitelistLiquidityProvider(timelock);\r\n    crp.whitelistLiquidityProvider(feeCollectorAddress);\r\n\r\n    crpaddress = address(crp);\r\n\r\n    idle.safeIncreaseAllowance(crpaddress, balances[0]); // approve transfer of idle\r\n    weth.safeIncreaseAllowance(crpaddress, balances[1]); // approve transfer of idle\r\n\r\n    contractState = ContractState.INITIALISED;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Creates the smart treasury, pulls underlying funds, and mints 1000 liquidity tokens\r\n  @notice calls updateWeightsGradually to being updating the token weights to the desired initial distribution.\r\n  @dev Can only be called after initialise has been called\r\n   */\r\n  function bootstrap() external override onlyOwner {\r\n    require(contractState == ContractState.INITIALISED, \"Invalid State\");\r\n    require(crpaddress!=address(0), \"Cannot bootstrap if CRP does not exist\");\r\n    \r\n    ConfigurableRightsPool crp = ConfigurableRightsPool(crpaddress);\r\n\r\n    /**** CREATE POOL ****/\r\n    crp.createPool(\r\n      1000 * 10 ** 18, // mint 1000 shares\r\n      3 days, // minimumWeightChangeBlockPeriodParam\r\n      3 days  // addTokenTimeLockInBlocksParam\r\n    );\r\n\r\n    uint256[] memory finalWeights = new uint256[](2);\r\n    finalWeights[0] = BalancerConstants.BONE.mul(225).div(10); // 90 %\r\n    finalWeights[1] = BalancerConstants.BONE.mul(25).div(10); // 10 %\r\n\r\n    /**** CALL GRADUAL POOL WEIGHT UPDATE ****/\r\n\r\n    crp.updateWeightsGradually(\r\n      finalWeights,\r\n      block.timestamp,\r\n      block.timestamp.add(30 days)  // ~ 1 months\r\n    );\r\n\r\n    contractState = ContractState.BOOTSTRAPPED;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Renounces ownership of the smart treasury from this contract to idle governance\r\n  @notice Transfers balancer liquidity tokens to fee collector\r\n   */\r\n  function renounce() external override onlyOwner {\r\n    require(contractState == ContractState.BOOTSTRAPPED, \"Invalid State\");\r\n    require(crpaddress != address(0), \"Cannot renounce if CRP does not exist\");\r\n\r\n    ConfigurableRightsPool crp = ConfigurableRightsPool(crpaddress);\r\n    \r\n    require(address(crp.bPool()) != address(0), \"Cannot renounce if bPool does not exist\");\r\n\r\n    crp.removeWhitelistedLiquidityProvider(address(this));\r\n    crp.setController(timelock);\r\n\r\n    // transfer using safe transfer\r\n    IERC20(crpaddress).safeTransfer(feeCollectorAddress, crp.balanceOf(address(this)));\r\n    \r\n    contractState = ContractState.RENOUNCED;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Withdraws a arbitrarty ERC20 token from this contract to an arbitrary address.\r\n  @param _token The ERC20 token address.\r\n  @param _toAddress The destination address.\r\n  @param _amount The amount to transfer.\r\n   */\r\n  function withdraw(address _token, address _toAddress, uint256 _amount) external {\r\n    require((msg.sender == owner() && contractState == ContractState.RENOUNCED) || msg.sender == timelock, \"Only admin\");\r\n\r\n    IERC20 token = IERC20(_token);\r\n    token.safeTransfer(_toAddress, _amount);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Set idle price per weth. Used for setting initial weights of smart treasury\r\n  @dev expressed in Wei\r\n  @param _idlePerWeth idle price per weth expressed in Wei\r\n   */\r\n  function setIDLEPrice(uint256 _idlePerWeth) external onlyOwner {\r\n    idlePerWeth = _idlePerWeth;\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Registers a fee token to depositTokens for swapping to WETH\r\n  @dev All fee tokens from fee treasury should be added in this manor\r\n  @param _tokenAddress Token address to register with bootstrap contract\r\n   */\r\n  function registerTokenToDepositList(address _tokenAddress) public onlyOwner {\r\n    require(_tokenAddress != address(weth), \"WETH fees are not supported\"); // There is no WETH -> WETH pool in uniswap\r\n    require(_tokenAddress != address(idle), \"IDLE fees are not supported\"); // Dont swap IDLE to WETH\r\n\r\n    IERC20(_tokenAddress).safeIncreaseAllowance(address(uniswapRouterV2), type(uint256).max); // max approval\r\n    depositTokens.add(_tokenAddress);\r\n  }\r\n\r\n  /**\r\n  @author Asaf Silman\r\n  @notice Removes a fee token depositTokens\r\n  @param _tokenAddress Token address to remove\r\n   */\r\n  function removeTokenFromDepositList(address _tokenAddress) external onlyOwner {\r\n    IERC20(_tokenAddress).safeApprove(address(uniswapRouterV2), 0); // 0 approval for uniswap\r\n    depositTokens.remove(_tokenAddress);\r\n  }\r\n\r\n  function getState() external view returns (ContractState) {return contractState; }\r\n  function getIDLEperWETH() external view returns (uint256) {return idlePerWeth; }\r\n  function getCRPAddress() external view returns (address) { return crpaddress; }\r\n  function getCRPBPoolAddress() external view returns (address) {\r\n    require(crpaddress!=address(0), \"CRP is not configured yet\");\r\n    return address(ConfigurableRightsPool(crpaddress).bPool());\r\n  }\r\n  function tokenInDepositList(address _tokenAddress) external view returns (bool) {return depositTokens.contains(_tokenAddress);}\r\n  function getDepositTokens() external view returns (address[] memory) {\r\n    uint256 numTokens = depositTokens.length();\r\n\r\n    address[] memory depositTokenList = new address[](numTokens);\r\n    for (uint256 index = 0; index < numTokens; index++) {\r\n      depositTokenList[index] = depositTokens.at(index);\r\n    }\r\n    return (depositTokenList);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerBFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerCRPFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollectorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialDepositTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCRPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCRPBPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIDLEperWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum SmartTreasuryBootstrap.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"registerTokenToDepositList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTokenFromDepositList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idlePerWeth\",\"type\":\"uint256\"}],\"name\":\"setIDLEPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minTokenOut\",\"type\":\"uint256[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenInDepositList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartTreasuryBootstrap","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009424b1412450d0f8fc2255faf6046b98213b76bd000000000000000000000000ed52d8e202401645edad1c0aa21e872498ce47d0000000000000000000000000875773784af8135ea0ef43b5a374aad105c5d39e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d6dabbc2b275114a2366555d6c481ef08fdc2556000000000000000000000000becc659bfc6edca552fa1a67451cc6b38a0108e4000000000000000000000000e8ea8bae250028a8709a3841e0ae1a44820d677b000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000070000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000085d4780b73119b644ae5ecd22b37600000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f510000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c4a910178cd49074b44daf6d33d9aac1d8a302f95780688e0299e64e2b8ba011"}]}