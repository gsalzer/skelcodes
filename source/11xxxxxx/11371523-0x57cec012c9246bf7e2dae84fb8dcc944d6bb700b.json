{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/IERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/core/IPool.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract IUSDCPool{\r\n  function deposit(uint256 _amount) public;\r\n  function withdraw(uint256 _amount) public;\r\n\r\n  function get_virtual_price() public view returns(uint256);\r\n\r\n  function get_lp_token_balance() public view returns(uint256);\r\n\r\n  function get_lp_token_addr() public view returns(address);\r\n}\r\n\r\n// File: contracts/utils/TokenClaimer.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract TransferableToken{\r\n    function balanceOf(address _owner) public returns (uint256 balance) ;\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) ;\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) ;\r\n}\r\n\r\n\r\ncontract TokenClaimer{\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _to, uint _amount);\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n  function _claimStdTokens(address _token, address payable to) internal {\r\n        if (_token == address(0x0)) {\r\n            to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n        TransferableToken token = TransferableToken(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n\r\n        (bool status,) = _token.call(abi.encodeWithSignature(\"transfer(address,uint256)\", to, balance));\r\n        require(status, \"call failed\");\r\n        emit ClaimedTokens(_token, to, balance);\r\n  }\r\n}\r\n\r\n// File: contracts/core/pool/CompoundPool.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract CurveInterface{\r\n  function add_liquidity(uint256[2] memory uamounts, uint256 min_mint_amount) public;\r\n  function remove_liquidity(uint256 _amount, uint256[2] memory min_uamounts) public;\r\n  function remove_liquidity_imbalance(uint256[2] memory uamounts, uint256 max_burn_amount) public;\r\n\r\n  address public curve;\r\n}\r\ncontract PriceInterface{\r\n  function get_virtual_price() public view returns(uint256);\r\n  function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) public;\r\n}\r\n\r\ncontract CRVGaugeInterface{\r\n  function deposit(uint256 _value) public;\r\n  function withdraw(uint256 _value) public;\r\n}\r\n\r\ncontract MinterInterface{\r\n  function mint(address gauge_addr) public;\r\n}\r\n\r\ncontract CompoundPool is IUSDCPool, TokenClaimer, Ownable{\r\n  address public crv_token_addr;\r\n  address public lp_token_addr;\r\n\r\n  CRVGaugeInterface public crv_gauge_addr;\r\n  MinterInterface public crv_minter_addr;\r\n  CurveInterface public pool_deposit;\r\n\r\n  address public usdc;\r\n  address public dai;\r\n  address public cusdc;\r\n  address public cdai;\r\n\r\n  constructor() public{\r\n    crv_token_addr = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    lp_token_addr = address(0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2);\r\n    crv_gauge_addr = CRVGaugeInterface(0x7ca5b0a2910B33e9759DC7dDB0413949071D7575);\r\n    crv_minter_addr = MinterInterface(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\r\n    pool_deposit = CurveInterface(0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06);\r\n\r\n    usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    cusdc = address(0x39AA39c021dfbaE8faC545936693aC917d5E7563);\r\n    cdai = address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n  }\r\n\r\n  function deposit(uint256 _amount) public{\r\n    deposit_usdc(_amount);\r\n    deposit_to_gauge();\r\n  }\r\n  function deposit_usdc(uint256 _amount) public{\r\n    IERC20(usdc).transferFrom(msg.sender, address(this), _amount);\r\n    IERC20(usdc).approve(address(pool_deposit), 0);\r\n    IERC20(usdc).approve(address(pool_deposit), _amount);\r\n    uint256[2] memory uamounts = [uint256(0), _amount];\r\n    pool_deposit.add_liquidity(uamounts, 0);\r\n  }\r\n\r\n  function deposit_to_gauge() public{\r\n    IERC20(lp_token_addr).approve(address(crv_gauge_addr), 0);\r\n    IERC20(lp_token_addr).approve(address(crv_gauge_addr), get_lp_token_balance());\r\n    crv_gauge_addr.deposit(get_lp_token_balance());\r\n  }\r\n\r\n\r\n  function withdraw(uint256 _amount) public{\r\n    withdraw_from_gauge(_amount);\r\n    withdraw_from_curve(_amount);\r\n  }\r\n\r\n  function withdraw_from_gauge(uint256 _amount) public{\r\n    crv_gauge_addr.withdraw(_amount);\r\n  }\r\n\r\n  function withdraw_from_curve(uint256 _amount) public{\r\n    require(_amount <= get_lp_token_balance(), \"too large amount\");\r\n    IERC20(lp_token_addr).approve(address(pool_deposit), _amount);\r\n    pool_deposit.remove_liquidity(_amount, [uint256(0), 0]);\r\n    uint256 dai_amout = IERC20(dai).balanceOf(address(this));\r\n    IERC20(dai).approve(pool_deposit.curve(), dai_amout);\r\n    PriceInterface(pool_deposit.curve()).exchange_underlying(0, 1, dai_amout, 0);\r\n  }\r\n\r\n  function get_virtual_price() public view returns(uint256){\r\n    return PriceInterface(pool_deposit.curve()).get_virtual_price();\r\n  }\r\n\r\n  function get_lp_token_balance() public view returns(uint256){\r\n    return IERC20(lp_token_addr).balanceOf(address(this));\r\n  }\r\n\r\n  function get_lp_token_addr() public view returns(address){\r\n    return lp_token_addr;\r\n  }\r\n\r\n  function earn_crv() public{\r\n    crv_minter_addr.mint(address(crv_gauge_addr));\r\n  }\r\n\r\n  function claimStdToken(address _token, address payable to) public onlyOwner{\r\n    _claimStdTokens(_token, to);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_from_curve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cusdc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_lp_token_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit_to_gauge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"earn_crv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_token_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool_deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_lp_token_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit_usdc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lp_token_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_from_gauge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_gauge_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_minter_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimStdToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"}]","ContractName":"CompoundPool","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2c65154aee7861b91fe53bfaed3a3e3acd4275abdad58c4a9332609dd75917ba"}]}