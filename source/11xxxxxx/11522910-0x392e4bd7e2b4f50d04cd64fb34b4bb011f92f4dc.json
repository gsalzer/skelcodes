{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/5/SimpleStationConfig.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./StationConfig.sol\\\";\\n\\ncontract SimpleStationConfig is StationConfig, Ownable {\\n    /// @notice Configuration for each orbit.\\n    struct OrbitConfig {\\n        bool isOrbit;\\n        bool acceptDebt;\\n        uint256 launcher;\\n        uint256 terminator;\\n    }\\n\\n    /// The minimum ETH debt size per position.\\n    uint256 public minDebtSize;\\n    /// The interest rate per second, multiplied by 1e18.\\n    uint256 public interestRate;\\n    /// The portion of interests allocated to the reserve pool.\\n    uint256 public getStarGateBps;\\n    /// The reward for successfully killing a position.\\n    uint256 public getTerminateBps;\\n    /// Mapping for orbit address to its configuration.\\n    mapping (address => OrbitConfig) public orbits;\\n\\n    constructor(\\n        uint256 _minDebtSize,\\n        uint256 _interestRate,\\n        uint256 _reserveGateBps,\\n        uint256 _terminateBps\\n    ) public {\\n        setParams(_minDebtSize, _interestRate, _reserveGateBps, _terminateBps);\\n    }\\n\\n    /// @dev Set all the basic parameters. Must only be called by the owner.\\n    /// @param _minDebtSize The new minimum debt size value.\\n    /// @param _interestRate The new interest rate per second value.\\n    /// @param _reserveGateBps The new interests allocated to the reserve pool value.\\n    /// @param _terminateBps The new reward for killing a position value.\\n    function setParams(\\n        uint256 _minDebtSize,\\n        uint256 _interestRate,\\n        uint256 _reserveGateBps,\\n        uint256 _terminateBps\\n    ) public onlyOwner {\\n        minDebtSize = _minDebtSize;\\n        interestRate = _interestRate;\\n        getStarGateBps = _reserveGateBps;\\n        getTerminateBps = _terminateBps;\\n    }\\n\\n    /// @dev Set the configuration for the given orbit. Must only be called by the owner.\\n    /// @param orbit The orbit address to set configuration.\\n    /// @param _isOrbit Whether the given address is a valid orbit.\\n    /// @param _acceptDebt Whether the orbit is accepting new debts.\\n    /// @param _launcher The work factor value for this orbit.\\n    /// @param _terminator The kill factor value for this orbit.\\n    function setOrbit(\\n        address orbit,\\n        bool _isOrbit,\\n        bool _acceptDebt,\\n        uint256 _launcher,\\n        uint256 _terminator\\n    ) public onlyOwner {\\n        orbits[orbit] = OrbitConfig({\\n            isOrbit: _isOrbit,\\n            acceptDebt: _acceptDebt,\\n            launcher: _launcher,\\n            terminator: _terminator\\n        });\\n    }\\n\\n    /// @dev Return the interest rate per second, using 1e18 as denom.\\n    function getInterestRate(uint256 /* debt */, uint256 /* floating */) external view returns (uint256) {\\n        return interestRate;\\n    }\\n\\n    /// @dev Return whether the given address is a orbit.\\n    function isOrbit(address orbit) external view returns (bool) {\\n        return orbits[orbit].isOrbit;\\n    }\\n\\n    /// @dev Return whether the given orbit accepts more debt. Revert on non-orbit.\\n    function acceptDebt(address orbit) external view returns (bool) {\\n        require(orbits[orbit].isOrbit, \\\"!orbit\\\");\\n        return orbits[orbit].acceptDebt;\\n    }\\n\\n    /// @dev Return the work factor for the orbit + ETH debt, using 1e4 as denom. Revert on non-orbit.\\n    function launcher(address orbit, uint256 /* debt */) external view returns (uint256) {\\n        require(orbits[orbit].isOrbit, \\\"!orbit\\\");\\n        return orbits[orbit].launcher;\\n    }\\n\\n    /// @dev Return the kill factor for the orbit + ETH debt, using 1e4 as denom. Revert on non-orbit.\\n    function terminator(address orbit, uint256 /* debt */) external view returns (uint256) {\\n        require(orbits[orbit].isOrbit, \\\"!orbit\\\");\\n        return orbits[orbit].terminator;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/5/StationConfig.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface StationConfig {\\n    /// @dev Return minimum ETH debt size per position.\\n    function minDebtSize() external view returns (uint256);\\n\\n    /// @dev Return the interest rate per second, using 1e18 as denom.\\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\\n\\n    /// @dev Return the bps rate for reserve pool.\\n    function getStarGateBps() external view returns (uint256);\\n\\n    /// @dev Return the bps rate for Avada Kill caster.\\n    function getTerminateBps() external view returns (uint256);\\n\\n    /// @dev Return whether the given address is a orbit.\\n    function isOrbit(address orbit) external view returns (bool);\\n\\n    /// @dev Return whether the given orbit accepts more debt. Revert on non-orbit.\\n    function acceptDebt(address orbit) external view returns (bool);\\n\\n    /// @dev Return the work factor for the orbit + ETH debt, using 1e4 as denom. Revert on non-orbit.\\n    function launcher(address orbit, uint256 debt) external view returns (uint256);\\n\\n    /// @dev Return the kill factor for the orbit + ETH debt, using 1e4 as denom. Revert on non-orbit.\\n    function terminator(address orbit, uint256 debt) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebtSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveGateBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_terminateBps\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"}],\"name\":\"acceptDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStarGateBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTerminateBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"}],\"name\":\"isOrbit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"launcher\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDebtSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orbits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOrbit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptDebt\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"launcher\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isOrbit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_acceptDebt\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_launcher\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_terminator\",\"type\":\"uint256\"}],\"name\":\"setOrbit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebtSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveGateBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_terminateBps\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"orbit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terminator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimpleStationConfig","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000003287092778e00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}