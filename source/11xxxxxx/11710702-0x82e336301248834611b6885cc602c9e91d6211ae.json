{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/reserve/TeamVestingReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: gpl-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport './ManagedVestingReserve.sol';\\n\\n/**\\n * @title VestingReserveTest\\n * @author Ethichub\\n */\\ncontract TeamVestingReserve is ManagedVestingReserve {\\n    constructor(\\n        IERC20 _token,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _editAddressUntil\\n    ) ManagedVestingReserve(_token, _startTime, _endTime, _editAddressUntil) {}\\n\\n    function initialize() external override {\\n        require(!initialized, 'TeamVestingReserve: Already initialized');\\n        require(\\n            token.transferFrom(msg.sender, address(this), 8870000*10**18),\\n            'ManagedVestingReserve: Cannot transfer tokens from sender.'\\n        );\\n        locked[0x7E032A1Bed85664209B3C22D12caec40fdF73089] = 130000*10**18;\\n        locked[0x0D8e931A2743Bfb50d1429EC1E73a466A4fa9BB0] = 110000*10**18;\\n        locked[0x59d35A531AA78FCAD3F1d06FAbE4C23a574B8d07] = 10000*10**18;\\n        locked[0x93204c3625091Dc552DEE3701CE7284B0510555c] = 20000*10**18;\\n        locked[0xA80cA7F9f08E755BC64D4aEd92EA714228774deF] = 100000*10**18;\\n        locked[0x967BFBaDa372B5EeCa46C8617a20279bF2bdf4bd] = 25000*10**18;\\n        locked[0x577cfE680652C4aa485dC723B308E5B60bF3D548] = 50000*10**18;\\n        locked[0x21B8B42988E658f3C6e481cD574892518792dF9d] = 50000*10**18;\\n        locked[0xc2053f86fe04DD2327aE5F05DB29818d84adDcd2] = 25000*10**18;\\n        locked[0x09381bA61fD003d25e6e947021e3274bFDC4771B] = 50000*10**18;\\n        locked[0xeaa7b78F364244648ACEEE35e4b244A4bBBEb9c6] = 75000*10**18;\\n        locked[0x5185B72571670C0Add34F8a1CDe591be5Db38587] = 75000*10**18;\\n        locked[0xDA2b4caCf6C3eC81fc54E1521ca916E010E41DB8] = 75000*10**18;\\n        locked[0x158e1D176fF937A8E6bFAA482179f876841539d2] = 75000*10**18;\\n        locked[0x29D7a84502392CF962ef3677fb1CF1cc55DAa006] = 5000*10**18;\\n        locked[0x8F1EFcD1898d4d0b0B5d1C8279719199907005D2] = 100000*10**18;\\n        locked[0x42d4B594ac3623e62f80C651c306aa3eA6D6B211] = 100000*10**18;\\n        locked[0xc1f0A5c6CFA9eDDa352336e9E8202BC097E72C68] = 80000*10**18;\\n        locked[0x359ac09D81D7F3D4DF8Efa11612E3dc19EAcF53d] = 80000*10**18;\\n        locked[0x75b2b8F4912b45Fea37B5D64500c990c6CCF9E47] = 100000*10**18;\\n        locked[0x4e835eae369095057A70bBb5716cF649941716AC] = 17500*10**18;\\n        locked[0x9D51743Cd824fd8C2F9e736E6a187d56Bf9b2F25] = 17500*10**18;\\n        locked[0x31ffeD317021D6fAac20ec097587bD36Fa15054B] = 17500*10**18;\\n        locked[0x3EFf9EB60c80C47e9d92ec7ACDD1135451eE8291] = 17500*10**18;\\n        locked[0x86e6Fd1441A06afb651707F7609966F5FFBfDbD4] = 10000*10**18;\\n        locked[0x84e26011d1Db5A4c3be1c9E465b5aE659229C075] = 50000*10**18;\\n        locked[0x6Cb87e0E835d0842a7d19bFdB5B91C449b71998B] = 70000*10**18;\\n        locked[0xB4FBF73b4C537Bf032d62e2069946E3A347a2c43] = 30000*10**18;\\n        locked[0x8FC47DE24f4bDb4f29e1dB7CDF64A173C3dF8242] = 60000*10**18;\\n        locked[0xE75a4B67DE2012e4c3D0ae7D4D7ef9Aa070aEE26] = 90000*10**18;\\n        locked[0xa601A7c91ba1eD992b897f9ACfA02D6E688d6161] = 120000*10**18;\\n        locked[0x2017864F4D7e4D7EDC829beB3d6d3dA64AE6a1d0] = 100000*10**18;\\n        locked[0x70bB5b88A047ECEAf9C4d5803e9BA6D7e4B57B9B] = 20000*10**18;\\n        locked[0x4e7f2dEf792A9e2Ea8AE37e2696F2a6040cC1B1a] = 50000*10**18;\\n        locked[0x587d43D668868C954622bAC0bfc07977Ded0fD76] = 250000*10**18;\\n        locked[0xE67435869ADFEda294EEae3344fE744016D42dcE] = 270000*10**18;\\n        locked[0x08bC79Fd10A6077339D74CD09FB26fCa6702d035] = 280000*10**18;\\n        locked[0xBC3B7EF402762b7118016B63CFa4cdC7653fBBd3] = 300000*10**18;\\n        locked[0xC9e458fE112c23b2d6f8bE8660001d272a7BA971] = 10000*10**18;\\n        locked[0xf4ef544BbDf4E90218Bc703E9e97Ee1f6e167152] = 30000*10**18;\\n        locked[0xbC0B3B66F3B8e89cd842E2f809947989e6154158] = 5000*10**18;\\n        locked[0x7aE0FD06c57da7a821494032ec0e9F67e5014722] = 150000*10**18;\\n        locked[0x343448DfA1a856580C07882107986F1244C30E06] = 20000*10**18;\\n        locked[0xD234125A204a75cf35314Fb541D028911EFdA21d] = 50000*10**18;\\n        locked[0xaa60084B1170bce4b6AaA1c56C1AA5f3DCA85923] = 100000*10**18;\\n        locked[0x1EbfD92F36FbD05349cBA41745B25fdcf378A296] = 425000*10**18;\\n        locked[0x19fBD61409e6c3d4D7110B959147D3D26D5F287F] = 250000*10**18;\\n        locked[0xdFe435e074E9830036aeA0eA5C4fC506b7a11D5f] = 250000*10**18;\\n        locked[0xb7b3279236803Ccf3C353cB7B683A3d92D709D9c] = 100000*10**18;\\n        locked[0xe5a6301fA182EE9504485d61e4Ac0DadDf2F5b13] = 500000*10**18;\\n        locked[0x25090352F2cC84819F80B20DC699B282f58e782E] = 175000*10**18;\\n        locked[0x90299EC59b94398a3a31a795Bc585F743d0e5Cc9] = 500000*10**18;\\n        locked[0xFF3e42196A601037690CD114955D6aAA7239FdcF] = 500000*10**18;\\n        locked[0x8BDC3d98A267020F80936E4FF18f279b611452c3] = 400000*10**18;\\n        locked[0x36711AbC93b49f213929D79b031226f380BA600b] = 350000*10**18;\\n        locked[0x23657E0AF50F8A2079a47a76ab014437E8104840] = 250000*10**18;\\n        locked[0x14F9eA19346aAdf614bFA125c0C7b8156D05a192] = 200000*10**18;\\n        locked[0x893c28FF9DDcef2789897eD6F8179748422f0aB7] = 150000*10**18;\\n        locked[0x1E60c67Dd5ae48Ae59aE60e26d070cDd42F0e29f] = 100000*10**18;\\n        locked[0x5F0B6C0A1DD7413E6A213e81a59d34da52016957] = 50000*10**18;\\n        locked[0xc1f0A5c6CFA9eDDa352336e9E8202BC097E72C68] = 300000*10**18;\\n        locked[0xEbe8763e0D0c6372CcD30A1e8856C0F653B98f06] = 100000*10**18;\\n        locked[0x271DBF87f8689f231012168eA7add80202554f5b] = 100000*10**18;\\n        locked[0x881b5B76c6dFb303E03572D63Bf1aBD9c3ac6e7E] = 100000*10**18;\\n        locked[0x5ED50FC239911f55C41E333dCc9d5682Ff3db1F7] = 100000*10**18;\\n        locked[0x894469D0Da61A2c92d45405488AD3A2B90704a78] = 100000*10**18;\\n        locked[0x9EDde74078Fba110c22922a925f653BCF1F60121] = 100000*10**18;\\n        locked[0x090DF5DD1028921a51234Eb1d8fb0ccF03210c95] = 100000*10**18;\\n        locked[0xe592CC21910769477a06b4B8E89df055bD862475] = 100000*10**18;\\n        locked[0x94a13849b08f760B058d36ba56866764Ec182837] = 100000*10**18;\\n\\n        initialized = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/reserve/ManagedVestingReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: gpl-3.0\\n\\npragma solidity 0.7.5;\\nimport './VestingReserve.sol';\\n\\n/**\\n * @title VestingReserve\\n * @dev A vested reserve, freeing 1% per day\\n * @author Ethichub\\n */\\nabstract contract ManagedVestingReserve is VestingReserve {\\n    constructor(\\n        IERC20 _token,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _editAddressUntil\\n    ) VestingReserve(_token, _startTime, _endTime, _editAddressUntil) {}\\n\\n    function claim(uint256 _amount) external override {\\n        revert('ManagedVestingReserve: Unsupported method');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/reserve/VestingReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: gpl-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n\\n/**\\n * @title VestingReserve\\n * @dev A vested reserve, freeing 1% per day\\n * @author Ethichub\\n */\\ncontract VestingReserve is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token;\\n\\n    bool public initialized;\\n\\n    // Dates\\n    uint256 public startTime;\\n    uint256 public endTime;\\n    uint256 public editAddressUntil;\\n\\n    // Amounts\\n    mapping(address => uint256) public locked;\\n    mapping(address => uint256) public claimed;\\n\\n    // Events\\n    event Fund(address indexed recipient, uint256 amount);\\n    event Claim(address indexed recipient, uint256 claimed);\\n    event ToggleDisable(address recipient, bool disabled);\\n    event ChangeTokenOwnership(address _account, address indexed _newAccount);\\n\\n    modifier isInitialized() {\\n        require(initialized, 'VestingReserve: Contract not initialized');\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _token,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _editAddressUntil\\n    ) {\\n        token = _token;\\n        require(_endTime > _startTime, 'VestingReserve: end time must be later than start time');\\n        startTime = _startTime;\\n        endTime = _endTime;\\n        require(_editAddressUntil <= _endTime, 'VestingReserve: _editAddressUntil time should be before than end time');\\n        editAddressUntil = _editAddressUntil;\\n    }\\n\\n    function initialize() external virtual {}\\n\\n    function _vestedOf(address _account) internal view returns (uint256) {\\n        if (block.timestamp < startTime) {\\n            return 0;\\n        } else if (block.timestamp > endTime) {\\n            return locked[_account];\\n        } else if (locked[_account] == 0) {\\n            return 0;\\n        }\\n\\n        uint256 amountLocked = locked[_account];\\n\\n        uint256 vested =\\n            (amountLocked.mul(block.timestamp.sub(startTime)).div(endTime.sub(startTime)));\\n        if (vested > amountLocked) {\\n            return amountLocked;\\n        } else {\\n            return vested;\\n        }\\n    }\\n\\n    function _lockedOf(address _account) internal view returns (uint256) {\\n        return locked[_account].sub(_vestedOf(_account));\\n    }\\n\\n    function changeTokenOwnership(address _account, address _newAccount)\\n        virtual\\n        public\\n        isInitialized\\n        onlyOwner\\n    {\\n        require(\\n            block.timestamp <= editAddressUntil,\\n            'VestingReserve: Expired date to change token ownership'\\n        );\\n        locked[_newAccount] = locked[_account];\\n        claimed[_newAccount] = claimed[_account];\\n        locked[_account] = 0;\\n        claimed[_account] = 0;\\n        emit ChangeTokenOwnership(_account, _newAccount);\\n    }\\n\\n    function _claim(address _account, uint256 _amount) internal {\\n        uint256 claimable = _vestedOf(_account).sub(claimed[_account]);\\n        require(claimable > 0, 'VestingReserve: No tokens to transfer');\\n        require(_amount > 0, 'VestingReserve: Amount cannot be zero');\\n\\n        if (_amount > claimable) {\\n            _amount = claimable;\\n        }\\n\\n        claimed[_account] = claimed[_account].add(_amount);\\n        token.safeTransfer(_account, _amount);\\n        emit Claim(_account, _amount);\\n    }\\n\\n    function claim(uint256 _amount) external virtual isInitialized {\\n        _claim(msg.sender, _amount);\\n    }\\n\\n    function claimFor(address _account, uint256 _amount) external isInitialized onlyOwner {\\n        _claim(_account, _amount);\\n    }\\n\\n    function vestedOf(address _account) external view isInitialized returns (uint256) {\\n        return _vestedOf(_account);\\n    }\\n\\n    function lockedOf(address _account) external view isInitialized returns (uint256) {\\n        return locked[_account].sub(_vestedOf(_account));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_editAddressUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"ChangeTokenOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"ToggleDisable\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"changeTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editAddressUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"lockedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"vestedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TeamVestingReserve","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fd09911130e6930bf87f2b0554c44f400bd80d3e00000000000000000000000000000000000000000000000000000000605913600000000000000000000000000000000000000000000000000000000067ddef700000000000000000000000000000000000000000000000000000000067ddef70","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}