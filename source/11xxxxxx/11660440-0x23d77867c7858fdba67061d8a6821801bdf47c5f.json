{"status":"1","message":"OK","result":[{"SourceCode":"interface IERC20:\r\n    def transfer(_to: address, _value: uint256) -> bool: nonpayable\r\n    def balanceOf(_to: address) -> uint256: view\r\n    def nDIVIDEND() -> uint256: view\r\n    def marketingDividend(_tranche: uint256) -> uint256: view\r\n    def AirdropAddress() -> address: view\r\n    def KingAsset() -> address: view\r\n    def ValueAsset() -> address: view\r\n\r\ninterface IDEFILABSnft:\r\n    def ownerOf(tokenId: uint256) -> address: view\r\n\r\nDeployer: public(address)\r\nClaimedTranche: public(HashMap[address, HashMap[address, HashMap[uint256, bool]]])\r\nnTranches: public(uint256)\r\nName: public(String[64])\r\nDEFILABS_NFT: public(address)\r\ndustCleanup: public(uint256)\r\nPolaris: public(address)\r\n\r\n@external\r\ndef __init__(_name: String[64]):\r\n    self.Name = _name\r\n    self.Deployer = msg.sender\r\n    self.Polaris = 0x36F7E77A392a7B4a6fCB781aCE715ec2450F3Aca\r\n    self.DEFILABS_NFT = 0xff9315c2c4c0208Edb5152F4c4eBec75e74010c5\r\n    self.dustCleanup = 50\r\n\r\n@view\r\n@external\r\ndef TotalDividends(_contract: address) -> uint256:\r\n    return IERC20(_contract).nDIVIDEND()\r\n\r\n@view\r\n@external\r\ndef viewTranche(_contract: address, _trancheNumber: uint256) -> uint256:\r\n    return IERC20(_contract).marketingDividend(_trancheNumber)\r\n\r\n@external\r\ndef receiveDividendSingle(_contract: address, _tranche: uint256, tokenId: uint256) -> bool:\r\n    assert tokenId >= 363 and tokenId <= 371\r\n    assert IERC20(_contract).nDIVIDEND() >= _tranche\r\n    nftowner: address = IDEFILABSnft(self.DEFILABS_NFT).ownerOf(tokenId)\r\n    assert self.ClaimedTranche[_contract][nftowner][_tranche] == False\r\n    dividendAmount: uint256 = IERC20(_contract).marketingDividend(_tranche)/9\r\n    IERC20(IERC20(self.Polaris).KingAsset()).transfer(nftowner, dividendAmount)\r\n    self.ClaimedTranche[_contract][nftowner][_tranche] = True\r\n    return True\r\n\r\n@external\r\ndef receiveDividendTriple(_contract: address, _tranche1: uint256, _tranche2: uint256, _tranche3: uint256, tokenId: uint256) -> bool:\r\n    assert tokenId >= 363 and tokenId <= 371\r\n    assert IERC20(_contract).nDIVIDEND() >= _tranche1\r\n    assert IERC20(_contract).nDIVIDEND() >= _tranche2\r\n    assert IERC20(_contract).nDIVIDEND() >= _tranche3\r\n    nftowner: address = IDEFILABSnft(self.DEFILABS_NFT).ownerOf(tokenId)\r\n    assert self.ClaimedTranche[_contract][nftowner][_tranche1] == False\r\n    assert self.ClaimedTranche[_contract][nftowner][_tranche2] == False\r\n    assert self.ClaimedTranche[_contract][nftowner][_tranche3] == False\r\n    dividendAmount: uint256 = (IERC20(_contract).marketingDividend(_tranche1) + IERC20(_contract).marketingDividend(_tranche2) + IERC20(_contract).marketingDividend(_tranche3))/9\r\n    IERC20(IERC20(self.Polaris).KingAsset()).transfer(nftowner, dividendAmount)\r\n    self.ClaimedTranche[_contract][nftowner][_tranche1] = True\r\n    self.ClaimedTranche[_contract][nftowner][_tranche2] = True\r\n    self.ClaimedTranche[_contract][nftowner][_tranche3] = True\r\n    return True\r\n\r\n@external\r\ndef receiveMultipleDividend(_contract: address, _tranches: uint256[10], tokenId: uint256) -> bool:\r\n    assert tokenId >= 363 or tokenId <= 371\r\n    for x in _tranches:\r\n        assert IERC20(_contract).nDIVIDEND() >= x\r\n    nftowner: address = IDEFILABSnft(self.DEFILABS_NFT).ownerOf(tokenId)\r\n    for x in _tranches:\r\n        assert self.ClaimedTranche[_contract][nftowner][x] == False\r\n    dividendAmount: uint256 = 0\r\n    for x in _tranches:\r\n        dividendAmount += IERC20(_contract).marketingDividend(x)\r\n    IERC20(IERC20(self.Polaris).KingAsset()).transfer(nftowner, dividendAmount/9)\r\n    for x in _tranches:\r\n        self.ClaimedTranche[_contract][nftowner][x] = True\r\n    return True\r\n\r\n@external\r\ndef mainetenanceDustSweep() -> bool:\r\n    assert IERC20(IERC20(self.Polaris).ValueAsset()).nDIVIDEND() > self.dustCleanup\r\n    bal: uint256 = IERC20(IERC20(self.Polaris).KingAsset()).balanceOf(self)\r\n    airdropAddy: address = IERC20(self.Polaris).AirdropAddress()\r\n    IERC20(IERC20(self.Polaris).KingAsset()).transfer(airdropAddy, bal)\r\n    self.dustCleanup += 50\r\n    return True","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"TotalDividends\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_contract\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":688},{\"name\":\"viewTranche\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_contract\"},{\"type\":\"uint256\",\"name\":\"_trancheNumber\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":733},{\"name\":\"receiveDividendSingle\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_contract\"},{\"type\":\"uint256\",\"name\":\"_tranche\"},{\"type\":\"uint256\",\"name\":\"tokenId\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":41211},{\"name\":\"receiveDividendTriple\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_contract\"},{\"type\":\"uint256\",\"name\":\"_tranche1\"},{\"type\":\"uint256\",\"name\":\"_tranche2\"},{\"type\":\"uint256\",\"name\":\"_tranche3\"},{\"type\":\"uint256\",\"name\":\"tokenId\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":116269},{\"name\":\"receiveMultipleDividend\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_contract\"},{\"type\":\"uint256[10]\",\"name\":\"_tranches\"},{\"type\":\"uint256\",\"name\":\"tokenId\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":383782},{\"name\":\"mainetenanceDustSweep\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":43404},{\"name\":\"Deployer\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1241},{\"name\":\"ClaimedTranche\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"},{\"type\":\"uint256\",\"name\":\"arg2\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1816},{\"name\":\"nTranches\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1301},{\"name\":\"Name\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":7733},{\"name\":\"DEFILABS_NFT\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361},{\"name\":\"dustCleanup\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1391},{\"name\":\"Polaris\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000e6d61726b6574696e675368617265000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}