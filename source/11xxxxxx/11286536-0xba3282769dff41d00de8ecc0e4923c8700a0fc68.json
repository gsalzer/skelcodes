{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.3 https://hardhat.org\r\n\r\n// File contracts/Library/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: LGPL-3.0-or-later\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    uint256 internal constant WAD = 1e18;\r\n    uint256 internal constant RAY = 1e27;\r\n    uint256 internal constant RAD = 1e45;\r\n\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"Math/Add-Overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"Math/Sub-Overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 x,\r\n        uint256 y,\r\n        string memory message\r\n    ) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, message);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || ((z = x * y) / y) == x, \"Math/Mul-Overflow\");\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0, \"Math/Div-Overflow\");\r\n        z = x / y;\r\n    }\r\n\r\n    function mod(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y != 0, \"Math/Mod-Overflow\");\r\n        z = x % y;\r\n    }\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function toWAD(uint256 wad, uint256 decimal)\r\n        internal\r\n        pure\r\n        returns (uint256 z)\r\n    {\r\n        require(decimal < 18, \"Math/Too-high-decimal\");\r\n        z = mul(wad, 10**(18 - decimal));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Library/Address.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address target) internal view returns (bool result) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            result := gt(extcodesize(target), 0)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Interface/IERC173.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\n/* is ERC165 */\r\ninterface IERC173 {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return The address of the owner.\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @param newOwner The address of the new owner of the contract\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n\r\n// File contracts/Library/Authority.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Authority is IERC173 {\r\n    address private _owner;\r\n\r\n    modifier onlyAuthority() {\r\n        require(_owner == msg.sender, \"Authority/Not-Authorized\");\r\n        _;\r\n    }\r\n\r\n    function owner() external override view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function initialize(address newOwner) internal {\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(address(0), newOwner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n        external\r\n        override\r\n        onlyAuthority\r\n    {\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Interface/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function balanceOf(address target) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/Interface/IERC165.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n\r\n// File contracts/Interface/IERC2612.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IERC2612 {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/Interface/Iinitialize.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface Iinitialize {\r\n    function initialize(\r\n        string calldata contractVersion,\r\n        string calldata tokenName,\r\n        string calldata tokenSymbol,\r\n        uint8 tokenDecimals\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/abstract/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract AbstractERC20 {\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal virtual;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual;\r\n}\r\n\r\n\r\n// File contracts/abstract/ERC2612.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title Permit\r\n * @notice An alternative to approveWithAuthorization, provided for\r\n * compatibility with the draft EIP2612 proposed by Uniswap.\r\n * @dev Differences:\r\n * - Uses sequential nonce, which restricts transaction submission to one at a\r\n *   time, or else it will revert\r\n * - Has deadline (= validBefore - 1) but does not have validAfter\r\n * - Doesn't have a way to change allowance atomically to prevent ERC20 multiple\r\n *   withdrawal attacks\r\n */\r\nabstract contract AbstractERC2612 is AbstractERC20 {\r\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\r\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n    );\r\n\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\r\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n    );\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    string private _version;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    function version() external view returns (string memory) {\r\n        return _version;\r\n    }\r\n\r\n    /**\r\n     * @notice Initialize EIP712 Domain Separator\r\n     * @param version     version of contract\r\n     * @param name        name of contract\r\n     */\r\n    function _initDomainSeparator(string memory version, string memory name)\r\n        internal\r\n    {\r\n        uint256 chainId;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n\r\n        _version = version;\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                EIP712DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)), // name\r\n                keccak256(bytes(version)), // version\r\n                chainId, // chainid\r\n                address(this) // this address\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Verify a signed approval permit and execute if valid\r\n     * @param owner     Token owner's address (Authorizer)\r\n     * @param spender   Spender's address\r\n     * @param value     Amount of allowance\r\n     * @param deadline  The time at which this expires (unix time)\r\n     * @param v         v of the signature\r\n     * @param r         r of the signature\r\n     * @param s         s of the signature\r\n     */\r\n    function _permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        require(owner != address(0), \"ERC2612/Invalid-address-0\");\r\n        require(deadline >= now, \"ERC2612/Expired-time\");\r\n\r\n        // @TODO: Gas Testing\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonces[owner]++,\r\n                        deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n        // bytes memory digest = abi.encode(\r\n        //     PERMIT_TYPEHASH,\r\n        //     owner,\r\n        //     spender,\r\n        //     value,\r\n        //     nonces[owner]++,\r\n        //     deadline\r\n        // );\r\n\r\n        address recovered = ecrecover(digest, v, r, s);\r\n        require(\r\n            recovered != address(0) && recovered == owner,\r\n            \"ERC2612/Invalid-Signature\"\r\n        );\r\n\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/StandardToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StandardToken is\r\n    Authority,\r\n    AbstractERC2612,\r\n    IERC2612,\r\n    IERC165,\r\n    IERC20\r\n{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    constructor(\r\n        string memory contractVersion,\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        uint8 tokenDecimals\r\n    ) public {\r\n        Authority.initialize(msg.sender);\r\n        _initDomainSeparator(contractVersion, tokenName);\r\n\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        _decimals = tokenDecimals;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address target)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[target];\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override returns (bool) {\r\n        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(\r\n            value,\r\n            \"ERC20/Not-Enough-Allowance\"\r\n        );\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function mint(uint256 value) external onlyAuthority returns (bool) {\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[msg.sender] = _balances[msg.sender].add(value);\r\n        emit Transfer(address(0), msg.sender, value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 value) external onlyAuthority returns (bool) {\r\n        _balances[msg.sender] = _balances[msg.sender].sub(\r\n            value,\r\n            \"ERC20/Not-Enough-Balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Update allowance with a signed permit\r\n     * @param owner       Token owner's address (Authorizer)\r\n     * @param spender     Spender's address\r\n     * @param value       Amount of allowance\r\n     * @param deadline    Expiration time, seconds since the epoch\r\n     * @param v           v of the signature\r\n     * @param r           r of the signature\r\n     * @param s           s of the signature\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external override {\r\n        _permit(owner, spender, value, deadline, v, r, s);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceID == type(IERC20).interfaceId || // ERC20\r\n            interfaceID == type(IERC165).interfaceId || // ERC165\r\n            interfaceID == type(IERC173).interfaceId || // ERC173\r\n            interfaceID == type(IERC2612).interfaceId ||\r\n            interfaceID == type(Iinitialize).interfaceId; // ERC2612\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal override {\r\n        require(to != address(this), \"ERC20/Not-Allowed-Transfer\");\r\n        _balances[from] = _balances[from].sub(\r\n            value,\r\n            \"ERC20/Not-Enough-Balance\"\r\n        );\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal override {\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractVersion\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StandardToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"9999999","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064173686f6b6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003414b410000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://24cfa8c687b1e062e4a9e48c6ed113787e64096140ed250e36dd4e9838479b01"}]}