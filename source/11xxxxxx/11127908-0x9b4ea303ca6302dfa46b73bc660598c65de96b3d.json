{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * www.the8020.ch\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n   /*==================================================================================\r\n    =  The 80/20 is a Wealth Distribution system that is open for anyone to use.      =  \r\n    =  We created this application with hopes that it will provide a steady stream    =\r\n    =  of passive income for generations to come. The foundation that stands behind   =\r\n    =  this product would like you to live happy, free, and prosperous.               =\r\n    =  Stay tuned for more dApps from the GSG Global Marketing Group.                 =\r\n    =  #LuckyRico #LACGold #JCunn24 #BoHarvey #LennyBones #WealthWithPhelps \t      =\r\n    =  #ShahzainTariq >= developer of this smart contract\t\t \t\t\t\t      =\r\n    ================================================================================*/\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract auto_pool is IERC20{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlybelievers () {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n    // only people with profits\r\n    modifier onlyhodler() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n \r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint256 time,\r\n        uint256 totalTokens\r\n    );\r\n    \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned,\r\n        uint256 time,\r\n        uint256 totalTokens\r\n    );\r\n    \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    \r\n    event distrubuteBonusFund(\r\n        address,\r\n        uint256\r\n        );\r\n        \r\n    event amountDistributedToSponsor(\r\n        address,\r\n        address,\r\n        uint256\r\n        );\r\n    \r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens,\r\n        uint256 time\r\n    );\r\n    \r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name ;\r\n    string public symbol ;\r\n    uint8 public decimals ;\r\n    uint8 internal dividendFee_ ;\r\n    uint256 internal tokenPriceInitial_ ;\r\n    uint256 internal tokenPriceIncremental_ ;\r\n    uint256 internal magnitude;\r\n\r\n    uint256 public tokenPool;\r\n    uint256 public loyaltyPool;\r\n    uint256 public developmentFund;\r\n    uint256 public sponsorsPaid;\r\n    uint256 public gsg_foundation;\r\n    address dev1;\r\n    address dev2;\r\n    address GSGO_Official_LoyaltyPlan;\r\n    uint256 public currentId;\r\n    uint256 public day;\r\n    uint256 public claimedLoyalty;\r\n    uint256 public totalDeposited;    \r\n    uint256 public totalWithdraw;\r\n  \r\n  \r\n    \r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) public tokenBalanceLedger_;\r\n    mapping(address => uint256) public  referralBalance_;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping(address => int256) public payoutsTo_;\r\n    mapping(address => basicData) public users;\r\n    mapping(uint256 => address) public userList;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n    uint256 internal profitperLoyalty;\r\n    \r\n    //Users's data set\r\n    struct basicData{\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 referrerId;\r\n        address referrerAdd;\r\n    }\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    constructor() public{\r\n        name = \"The-Eighty-Twenty\";\r\n        symbol = \"GS20\";\r\n        decimals = 18;\r\n        dividendFee_ = 10;\r\n        tokenPriceInitial_ = 0.0000001 ether;\r\n        tokenPriceIncremental_ = 0.00000001 ether;\r\n        magnitude = 2**64;\r\n        // \"This is the distribution contract for holders of the GSG-Official (GSGO) Token.\"\r\n        GSGO_Official_LoyaltyPlan = address(0x727395b95C90DEab2F220Ce42615d9dD0F44e187);\r\n        dev1 = address(0x88F2E544359525833f606FB6c63826E143132E7b);\r\n        dev2 = address(0x7cF196415CDD1eF08ca2358a8282D33Ba089B9f3);\r\n        currentId = 0;\r\n        day = now;\r\n    \r\n    }\r\n    \r\n     \r\n    /**\r\n     * Converts all incoming Ethereum to tokens for the caller, and passes down the referral address (if any)\r\n     */\r\n    function buy(address _referredAdd)\r\n        public  \r\n        payable\r\n        returns(uint256)\r\n    {\r\n        require(msg.value >= 0.1 ether, \"ERROR: minimun 0.1 ethereum \");\r\n        require(_referredAdd != msg.sender,\"ERROR: cannot become own ref\");\r\n        \r\n        if(!users[msg.sender].isExist) register(msg.sender,_referredAdd);\r\n        \r\n        purchaseTokens(msg.value,_referredAdd);\r\n         \r\n        //Distributing Ethers\r\n        loyaltyPool += ((msg.value.mul(12)).div(100));\r\n        developmentFund += ((msg.value.mul(2)).div(100));\r\n        gsg_foundation += ((msg.value.mul(2)).div(100));\r\n        payable(GSGO_Official_LoyaltyPlan).transfer((msg.value.mul(2)).div(100));\r\n        payable(dev1).transfer((msg.value.mul(1)).div(100));\r\n        payable(dev2).transfer((msg.value.mul(1)).div(100));\r\n        totalDeposited += msg.value;\r\n\r\n    }\r\n    \r\n    receive() external payable {\r\n         require(msg.value >= 0.1 ether, \"ERROR: minimun 0.1 ethereum .\");\r\n\r\n     if(!users[msg.sender].isExist) register(msg.sender,address(0));\r\n\r\n        purchaseTokens(msg.value,address(0));\r\n         \r\n        //Distributing Ethers\r\n        loyaltyPool += ((msg.value.mul(12)).div(100));\r\n        developmentFund += ( (msg.value.mul(2)).div(100));\r\n        gsg_foundation += ((msg.value.mul(2)).div(100));\r\n        payable(GSGO_Official_LoyaltyPlan).transfer((msg.value.mul(2)).div(100));\r\n        payable(dev1).transfer((msg.value.mul(1)).div(100));\r\n        payable(dev2).transfer((msg.value.mul(1)).div(100)); \r\n    }\r\n    \r\n    fallback()\r\n        payable\r\n        external\r\n    {\r\n    require(msg.value >= 0.1 ether, \"ERROR: minimun 0.1 ethereum .\");\r\n\r\n     if(!users[msg.sender].isExist) register(msg.sender,address(0));\r\n\r\n        purchaseTokens(msg.value,address(0));\r\n         \r\n        //Distributing Ethers\r\n        loyaltyPool += ((msg.value.mul(12)).div(100));\r\n        developmentFund += ( (msg.value.mul(2)).div(100));\r\n        gsg_foundation += ((msg.value.mul(2)).div(100));\r\n        payable(GSGO_Official_LoyaltyPlan).transfer((msg.value.mul(2)).div(100));\r\n        payable(dev1).transfer((msg.value.mul(1)).div(100));\r\n        payable(dev2).transfer((msg.value.mul(1)).div(100));    }\r\n    \r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest()\r\n        onlyhodler()\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n        \r\n        uint256 _loyaltyEth = loyaltyOf();\r\n        if(_loyaltyEth > 0 ether){\r\n            payable(address(_customerAddress)).transfer(_loyaltyEth);\r\n                loyaltyPool -= _loyaltyEth;\r\n                claimedLoyalty += _loyaltyEth;\r\n                totalWithdraw += _loyaltyEth;\r\n        }       \r\n        \r\n        // pay out the dividends virtually\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n        \r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        address refAdd = users[_customerAddress].referrerAdd;\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends,refAdd);\r\n        loyaltyPool += ((_dividends.mul(12)).div(100));\r\n        developmentFund += ((_dividends.mul(2)).div(100));\r\n        gsg_foundation += ((_dividends.mul(2)).div(100));\r\n        payable(GSGO_Official_LoyaltyPlan).transfer((_dividends.mul(2)).div(100));\r\n        payable(dev1).transfer((_dividends.mul(1)).div(100));\r\n        payable(dev2).transfer((_dividends.mul(1)).div(100));\r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n    \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit()\r\n        public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n        \r\n        \r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n        onlyhodler()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n        uint256 _loyaltyEth = loyaltyOf();\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        if(_loyaltyEth > 0 ether) {\r\n            _dividends += _loyaltyEth;\r\n            loyaltyPool -= _loyaltyEth;\r\n            claimedLoyalty += _loyaltyEth;\r\n        }       \r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        totalWithdraw += _dividends;\r\n\r\n        // delivery service\r\n        payable(address(_customerAddress)).transfer(_dividends);\r\n        \r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlybelievers ()\r\n        public\r\n    {\r\n      \r\n        address _customerAddress = msg.sender;\r\n       \r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        //initializating values; \r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 tax = (_ethereum.mul(5)).div(100);\r\n        loyaltyPool = SafeMath.add(loyaltyPool,tax);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, tax);\r\n    \r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        \r\n       //updates dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \r\n        payoutsTo_[_customerAddress] += (int256) (_taxedEthereum*magnitude);       \r\n     \r\n        totalWithdraw += _taxedEthereum; \r\n   \r\n        //tranfer amout of ethers to user\r\n        payable(address(_customerAddress)).transfer(_taxedEthereum);\r\n        \r\n        if(_ethereum < tokenPool) {\r\n            tokenPool = SafeMath.sub(tokenPool, _ethereum);   \r\n        }\r\n        // fire event\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum,now,tokenBalanceLedger_[_customerAddress]);\r\n    }\r\n    \r\n    \r\n    function approve(address spender, uint amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's a 10% fee here as well.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlybelievers ()\r\n        public\r\n        override\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // make sure we have the requested tokens\r\n     \r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        \r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n        \r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n        \r\n       // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens,now);\r\n        \r\n        // ERC20\r\n        return true;\r\n       \r\n    }\r\n    \r\n    function transferFrom(address sender, address _toAddress, uint _amountOfTokens) public override returns (bool) {\r\n        // setup\r\n        address _customerAddress = sender;\r\n        \r\n        // make sure we have the requested tokens\r\n     \r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        \r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n        \r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n        \r\n       // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens,now);\r\n        \r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(_amountOfTokens, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n       */ \r\n    function myDividends(bool _includeReferralBonus) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        override\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    \r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n       \r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 tax = (_ethereum.mul(5)).div(100);\r\n            uint256 _dividends = SafeMath.div(_ethereum, tax);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        \r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n   \r\n    function calculateTokensReceived(uint256 _ethToSpend) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        uint256 _ethereumToSpend = (_ethToSpend.mul(64)).div(100);\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n    \r\n    \r\n    function getReferrer() public view returns(address){\r\n        return users[msg.sender].referrerAdd;\r\n    }\r\n   \r\n    function calculateEthereumReceived(uint256 _tokensToSell) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 tax = (_ethereum.mul(5)).div(100);\r\n        uint256 _dividends = SafeMath.div(_ethereum, tax);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n   \r\n    function loyaltyOf() public view returns(uint256){\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // user should hold 2500 tokens for qualify for loyalty bonus;\r\n        if(tokenBalanceLedger_[_customerAddress] >= 2000*10**uint256(decimals)){\r\n            // return loyalty bonus users\r\n            return ((uint256) ((int256)((profitperLoyalty) * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude)*14/5;\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function userReferrer(address _address) public view returns(address){\r\n        return userList[users[_address].referrerId];\r\n    }\r\n \r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function purchaseTokens(uint256 _eth, address _referredBy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 _incomingEthereum = (_eth.mul(64)).div(100);\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n        tokenPool += _taxedEthereum;\r\n\r\n      \r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n       \r\n        // is the user referred by a karmalink?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _referredBy != _customerAddress \r\n            \r\n        ){\r\n            // wealth redistribution\r\n            \r\n            distributeToSponsor(_referredBy,_eth);\r\n            \r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        \r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n            \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            profitperLoyalty += ((_dividends) * magnitude / (tokenSupply_));\r\n\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        \r\n        //update dividends tracker\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n            \r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy,now,tokenBalanceLedger_[_customerAddress]);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n\r\n       \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n         _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = \r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n  \r\n        return _tokensReceived;\r\n    }\r\n    \r\n  \r\n    /**\r\n     * Calculate token sell value.\r\n          */\r\n     function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n    \r\n    \r\n    function register(address _sender, address _referredBy) internal {\r\n        \r\n        uint256 _id = users[_referredBy].id; \r\n        \r\n        basicData memory UserStruct;\r\n        currentId++;\r\n        \r\n        //add users data\r\n        UserStruct = basicData({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrerId: _id,\r\n            referrerAdd: _referredBy\r\n        });\r\n        \r\n\r\n        userList[currentId] = _sender;\r\n        users[msg.sender] = UserStruct;\r\n    }\r\n    \r\n    function distributeToSponsor(address _address,uint256 _eth) internal {\r\n        uint256 _sp1 = (_eth.mul(10)).div(100);\r\n        uint256 _sp2 = (_eth.mul(7)).div(100);\r\n        uint256 _sp3 = (_eth.mul(3)).div(100);\r\n        \r\n        address add1 = _address;\r\n        address add2 = users[_address].referrerAdd;\r\n        address add3 = users[add2].referrerAdd;\r\n        \r\n        //add amount of ref bonus to referrer\r\n        referralBalance_[add1] +=  (_sp1);\r\n        \r\n        sponsorsPaid += _sp1;\r\n        //fire event on distributionToSponsor\r\n        emit amountDistributedToSponsor(msg.sender, add1,_sp1);\r\n        \r\n        //add amount of ref bonus to referrer\r\n        referralBalance_[add2] += (_sp2);\r\n        \r\n        sponsorsPaid += _sp2;\r\n        //fire event on distributionToSponsor\r\n        emit amountDistributedToSponsor(msg.sender, add2, _sp2);\r\n\r\n        //add amount of ref bonus to referrer\r\n        referralBalance_[add3] +=  (_sp3);\r\n        \r\n        sponsorsPaid += _sp3;\r\n        //fire event on distributionToSponsor\r\n        emit amountDistributedToSponsor(msg.sender, add3, _sp3);\r\n    }\r\n    \r\n    \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountDistributedToSponsor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distrubuteBonusFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredAdd\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedLoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gsg_foundation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loyaltyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loyaltyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsTo_\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsorsPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceLedger_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerAdd\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"auto_pool","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2afd141b0630184d332cb1a95f88efb9378ddb15ae5455d5f16b5f80e5f0d086"}]}