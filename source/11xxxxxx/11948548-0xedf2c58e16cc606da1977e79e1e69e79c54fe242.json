{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.11\r\n\"\"\"\r\n@title ProxyAdmin\r\n@notice Thin proxy allowing shared ownership of contracts\r\n@author Ben Hauser\r\n@license MIT\r\n\"\"\"\r\n\r\n\r\nevent TransactionExecuted:\r\n    admin: indexed(address)\r\n    target: indexed(address)\r\n    calldata: Bytes[100000]\r\n    value: uint256\r\n\r\nevent RequestAdminChange:\r\n    current_admin: address\r\n    future_admin: address\r\n\r\nevent RevokeAdminChange:\r\n    current_admin: address\r\n    future_admin: address\r\n    calling_admin: address\r\n\r\nevent ApproveAdminChange:\r\n    current_admin: address\r\n    future_admin: address\r\n    calling_admin: address\r\n\r\nevent AcceptAdminChange:\r\n    previous_admin: address\r\n    current_admin: address\r\n\r\n\r\nadmins: public(address[2])\r\n\r\npending_current_admin: uint256\r\npending_new_admin: address\r\nchange_approved: bool\r\n\r\n\r\n@external\r\ndef __init__(_authorized: address[2]):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _authorized Admin accounts for this contract\r\n    \"\"\"\r\n    self.admins = _authorized\r\n\r\n\r\n@payable\r\n@external\r\ndef execute(_target: address, _calldata: Bytes[100000]):\r\n    \"\"\"\r\n    @notice Execute a contract call\r\n    @dev Ether sent when calling this function is forwarded onward\r\n    @param _target Address of the contract to call\r\n    @param _calldata Calldata to use in the call\r\n    \"\"\"\r\n    assert msg.sender in self.admins  # dev: only admin\r\n\r\n    raw_call(_target, _calldata, value=msg.value)\r\n    log TransactionExecuted(msg.sender, _target, _calldata, msg.value)\r\n\r\n\r\n@view\r\n@external\r\ndef get_admin_change_status() -> (address, address, bool):\r\n    \"\"\"\r\n    @notice Get information about a pending admin change\r\n    @return Admin address to be replaced,\r\n            admin address to be added,\r\n            has change been approved?\r\n    \"\"\"\r\n    idx: uint256 = self.pending_current_admin\r\n    if idx == 0:\r\n        return ZERO_ADDRESS, ZERO_ADDRESS, False\r\n    else:\r\n        return self.admins[idx - 1], self.pending_new_admin, self.change_approved\r\n\r\n\r\n@external\r\ndef request_admin_change(_new_admin: address):\r\n    \"\"\"\r\n    @notice Initiate changing an admin address\r\n    @param _new_admin New admin address (replaces msg.sender)\r\n    \"\"\"\r\n    assert self.pending_current_admin == 0  # dev: already an active request\r\n\r\n    admin_list: address[2] = self.admins\r\n    assert _new_admin not in admin_list  # dev: new admin is already admin\r\n\r\n    for i in range(2):\r\n        if admin_list[i] == msg.sender:\r\n            self.pending_current_admin = i + 1\r\n            self.pending_new_admin = _new_admin\r\n            log RequestAdminChange(msg.sender, _new_admin)\r\n            return\r\n\r\n    raise  # dev: only admin\r\n\r\n\r\n@external\r\ndef approve_admin_change():\r\n    \"\"\"\r\n    @notice Approve changing an admin address\r\n    @dev Only callable by the 2nd admin address (the one that will not change)\r\n    \"\"\"\r\n    idx: uint256 = self.pending_current_admin\r\n\r\n    assert idx > 0  # dev: no active request\r\n    assert msg.sender == self.admins[idx % 2]  # dev: caller is not 2nd admin\r\n\r\n    self.change_approved = True\r\n    log ApproveAdminChange(self.admins[idx - 1], self.pending_new_admin, msg.sender)\r\n\r\n\r\n@external\r\ndef revoke_admin_change():\r\n    \"\"\"\r\n    @notice Revoke changing an admin address\r\n    @dev May be called by either admin at any time to reset the process,\r\n         even if approval has previous been given\r\n    \"\"\"\r\n    assert msg.sender in self.admins  # dev: only admin\r\n\r\n    idx: uint256 = self.pending_current_admin\r\n    pending_admin: address = ZERO_ADDRESS\r\n    if idx > 0:\r\n        pending_admin = self.admins[idx - 1]\r\n\r\n    log RevokeAdminChange(pending_admin, self.pending_new_admin, msg.sender)\r\n\r\n    self.pending_current_admin = 0\r\n    self.pending_new_admin = ZERO_ADDRESS\r\n    self.change_approved = False\r\n\r\n\r\n\r\n@external\r\ndef accept_admin_change():\r\n    \"\"\"\r\n    @notice Accept a changed admin address\r\n    @dev Only callable by the new admin address, after approval has been given\r\n    \"\"\"\r\n    assert self.change_approved == True  # dev: change not approved\r\n    assert msg.sender == self.pending_new_admin  # dev: only new admin\r\n\r\n    idx: uint256 = self.pending_current_admin - 1\r\n    log AcceptAdminChange(self.admins[idx], msg.sender)\r\n    self.admins[idx] = msg.sender\r\n\r\n    self.pending_current_admin = 0\r\n    self.pending_new_admin = ZERO_ADDRESS\r\n    self.change_approved = False","ABI":"[{\"name\":\"TransactionExecuted\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true},{\"name\":\"target\",\"type\":\"address\",\"indexed\":true},{\"name\":\"calldata\",\"type\":\"bytes\",\"indexed\":false},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RequestAdminChange\",\"inputs\":[{\"name\":\"current_admin\",\"type\":\"address\",\"indexed\":false},{\"name\":\"future_admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RevokeAdminChange\",\"inputs\":[{\"name\":\"current_admin\",\"type\":\"address\",\"indexed\":false},{\"name\":\"future_admin\",\"type\":\"address\",\"indexed\":false},{\"name\":\"calling_admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApproveAdminChange\",\"inputs\":[{\"name\":\"current_admin\",\"type\":\"address\",\"indexed\":false},{\"name\":\"future_admin\",\"type\":\"address\",\"indexed\":false},{\"name\":\"calling_admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AcceptAdminChange\",\"inputs\":[{\"name\":\"previous_admin\",\"type\":\"address\",\"indexed\":false},{\"name\":\"current_admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_authorized\",\"type\":\"address[2]\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"execute\",\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_calldata\",\"type\":\"bytes\"}],\"outputs\":[],\"gas\":1168658},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_admin_change_status\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"gas\":4202},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"request_admin_change\",\"inputs\":[{\"name\":\"_new_admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":148342},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve_admin_change\",\"inputs\":[],\"outputs\":[],\"gas\":41716},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revoke_admin_change\",\"inputs\":[],\"outputs\":[],\"gas\":67885},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_admin_change\",\"inputs\":[],\"outputs\":[],\"gas\":101134},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1377}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.11","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a000000000000000000000000babe61887f1de2713c6f97e567623453d3c79f67","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}