{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Bog is Context {\r\n    address internal _liqLpStakerContract;\r\n\r\n    constructor (address liqLpStakerContract) internal {\r\n       _liqLpStakerContract = liqLpStakerContract;\r\n    }\r\n    \r\n    modifier onlyLiqLpStaker() {\r\n        require(_msgSender() == _liqLpStakerContract, \"RewardOwner: caller is not the LiqLpStaker contract\");\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract FogContract {\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\n\r\ncontract FoggyBog is Bog {\r\n    using SafeMath for uint256;\r\n\r\n    FogContract private _fogContract;     // Fog contract\r\n    \r\n\r\n    constructor (FogContract fogContract, address liqLpStakerContract) Bog(liqLpStakerContract) public {\r\n        _fogContract = fogContract;\r\n       \r\n    }\r\n    \r\n    function LiqLpStakerContract() external view returns (address) {\r\n        return _liqLpStakerContract;\r\n    }\r\n    \r\n    function getFogBalance() external view returns (uint256) {\r\n        return _fogContract.balanceOf(address(this));\r\n    }\r\n    \r\n    function giveFogReward(address recipient, uint256 amount) external onlyLiqLpStaker returns (bool) {\r\n        return _fogContract.transfer(recipient, amount);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract FogContract\",\"name\":\"fogContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liqLpStakerContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LiqLpStakerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFogBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"giveFogReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FoggyBog","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d7bbe9012b5a93ecdc5eef53ab9d143542abc7000000000000000000000000569f472f0c58a57cbb15ecb10d6b2abc34f115e2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7bfcc074ebacc2ee35bf4ad708fce102097a72263f531c40998ab0452f612d4c"}]}