{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\n// pragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\";\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/MushroomLib.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\nlibrary MushroomLib {\r\n    struct MushroomData {\r\n        uint256 species;\r\n        uint256 strength;\r\n        uint256 lifespan;\r\n    }\r\n\r\n    struct MushroomType {\r\n        uint256 id;\r\n        uint256 strength;\r\n        uint256 minLifespan;\r\n        uint256 maxLifespan;\r\n        uint256 minted;\r\n        uint256 cap;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/metadata/resolvers/MetadataResolver.sol\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"contracts/MushroomLib.sol\";\r\n\r\nabstract contract MetadataResolver {\r\n    using MushroomLib for MushroomLib.MushroomData;\r\n    using MushroomLib for MushroomLib.MushroomType;\r\n\r\n    function getMushroomData(uint256 index, bytes calldata data) external virtual view returns (MushroomLib.MushroomData memory);\r\n    function setMushroomLifespan(uint256 index, uint256 lifespan, bytes calldata data) external virtual;\r\n    function isBurnable(uint256 index) external view virtual returns (bool);\r\n}\r\n\r\n\r\n// Root file: contracts/metadata/MushroomMetadata.sol\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\";\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\r\n\r\n// import \"contracts/metadata/resolvers/MetadataResolver.sol\";\r\n// import \"contracts/MushroomLib.sol\";\r\n\r\ncontract MushroomMetadata is OwnableUpgradeSafe {\r\n    using MushroomLib for MushroomLib.MushroomData;\r\n    using MushroomLib for MushroomLib.MushroomType;\r\n\r\n    mapping(address => address) public metadataResolvers;\r\n\r\n    event ResolverSet(address nft, address resolver);\r\n\r\n    modifier onlyWithMetadataResolver(address nftContract) {\r\n        require(metadataResolvers[nftContract] != address(0), \"MetadataRegistry: No resolver set for nft\");\r\n        _;\r\n    }\r\n\r\n    function hasMetadataResolver(address nftContract) external view returns (bool) {\r\n        return metadataResolvers[nftContract] != address(0);\r\n    }\r\n\r\n    function getMetadataResolver(address nftContract) external view returns (address) {\r\n        return metadataResolvers[nftContract];\r\n    }\r\n\r\n    function initialize() public initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    function getMushroomData(\r\n        address nftContract,\r\n        uint256 nftIndex,\r\n        bytes calldata data\r\n    ) external view onlyWithMetadataResolver(nftContract) returns (MushroomLib.MushroomData memory) {\r\n        MetadataResolver resolver = MetadataResolver(metadataResolvers[nftContract]);\r\n        MushroomLib.MushroomData memory mushroomData = resolver.getMushroomData(nftIndex, data);\r\n        return mushroomData;\r\n    }\r\n\r\n    function isBurnable(\r\n        address nftContract,\r\n        uint256 nftIndex\r\n    ) external view onlyWithMetadataResolver(nftContract) returns (bool) {\r\n        MetadataResolver resolver = MetadataResolver(metadataResolvers[nftContract]);\r\n        return resolver.isBurnable(nftIndex);\r\n    }\r\n\r\n    function setMushroomLifespan(\r\n        address nftContract,\r\n        uint256 nftIndex,\r\n        uint256 lifespan,\r\n        bytes calldata data\r\n    ) external onlyWithMetadataResolver(nftContract) {\r\n        MetadataResolver resolver = MetadataResolver(metadataResolvers[nftContract]);\r\n        resolver.setMushroomLifespan(nftIndex, lifespan, data);\r\n    }\r\n\r\n    function setResolver(address nftContract, address resolver) public onlyOwner {\r\n        metadataResolvers[nftContract] = resolver;\r\n\r\n        emit ResolverSet(nftContract, resolver);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ResolverSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getMetadataResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getMushroomData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"species\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifespan\",\"type\":\"uint256\"}],\"internalType\":\"struct MushroomLib.MushroomData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"hasMetadataResolver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftIndex\",\"type\":\"uint256\"}],\"name\":\"isBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"metadataResolvers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifespan\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setMushroomLifespan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MushroomMetadata","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2c4b7fa1a05998676437c3499174e8aa1f46f2da93c4f54a801fa3855f1ec5a0"}]}