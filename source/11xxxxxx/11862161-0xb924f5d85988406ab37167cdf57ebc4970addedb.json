{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n        \r\n}\r\n\r\ninterface ItokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \r\n}\r\n\r\ninterface IERC20Token {\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function transfer(address _to, uint256 _value) external  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract StandardToken is IERC20Token {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    uint256 public _totalSupply;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    function totalSupply() override public view returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                              \r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                               \r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[_from] >= _value, \"Not enough balance\");\r\n\t\trequire(allowed[_from][msg.sender] >= _value, \"You need to increase allowance\");\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract POLCToken is Ownable, StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n    string public name = \"Polka City\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"POLC\";\r\n    mapping (address => bool) public lockedWallets;\r\n\r\n    struct TimeLock {\r\n        uint firstRelease;\r\n        uint totalAmount;\r\n        uint lockedBalance;\r\n    }\r\n    \r\n    mapping (address => TimeLock) public timeLocks; \r\n    \r\n    address public platformWallet;\r\n    bool public limitContracts;\r\n    mapping (address => bool) public contractsWhiteList;\r\n    mapping (address => uint) public lastTXBlock;\r\n    uint public walletUnlockDate;\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n// token sale\r\n    address payable public salesWallet;\r\n\r\n    uint256 public soldOnPSale;\r\n    uint256 public soldOnCSale;\r\n    address private marketingWallet;\r\n    uint256 public PRIVATESALE_START = block.timestamp;\r\n    uint256 public constant PRIVATESALE_END = 1613951999;\r\n    uint256 public constant CROWDSALE_START = 1614448800;\r\n    uint256 public constant CROWDSALE_END = 1615766399;\r\n    uint256 public constant PSALE_WEI_FACTOR = 20000;\r\n    uint256 public constant CSALE_WEI_FACTOR = 15000;\r\n    uint256 public constant PSALE_HARDCAP = 2500000 ether;\r\n    uint256 public constant CSALE_HARDCAP = 7500000 ether;\r\n    event TokensSold(address indexed to, uint256 amount);\r\n    \r\n    constructor() {\r\n        platformWallet = 0x2524e7e53E655cA94986f6f445a74A4796A42289;\r\n        _totalSupply = 250000000 ether;\r\n        walletUnlockDate = CROWDSALE_END;\r\n\r\n        // Marketing wallet - 5000000 tokens, (4500000 Locked - progressive release)\r\n        marketingWallet = 0x09911dD354141452a21eB69527B510a8941CaaFF;\r\n        balances[marketingWallet] = 5000000 ether;\r\n        timeLocks[marketingWallet] = TimeLock((PRIVATESALE_END - 30 days), 4000000 ether, 4000000 ether);\r\n        emit Transfer(address(0x0), marketingWallet, balances[marketingWallet]);\r\n        \r\n        // Team wallet - 10000000 tokens (Locked - progressive release)\r\n        address team = 0x3A23D3e9BE80A804fceB418b451E3100d9264F7E;\r\n        balances[team] = 10000000 ether;\r\n        timeLocks[team] = TimeLock((PRIVATESALE_START + 180 days), 10000000 ether, 10000000 ether);\r\n        \r\n        emit Transfer(address(0x0), team, balances[team]);\r\n        \r\n        // Uniswap and exchanges - 26000000 tokens locked until crowdsale ends\r\n        address exchanges = 0x6B65ddFe7f46594181A05a121Ee93FcF71e586bC;  \r\n        balances[exchanges] = 25000000 ether;\r\n        emit Transfer(address(0x0), exchanges, balances[exchanges]);\r\n        lockedWallets[exchanges]  = true;\r\n        \r\n\r\n        // Platform tokens\r\n        balances[platformWallet] = 200000000 ether;\r\n        emit Transfer(address(0x0), platformWallet, (200000000 ether));\r\n        \r\n        // Sales wallet, private and crowdsale balances\r\n        salesWallet = payable(0x8F8A97B50A325499Eb7DD72956cCd307E2B8d6a4);\r\n        balances[salesWallet] = 10000000 ether;\r\n        emit Transfer(address(0x0), salesWallet, balances[salesWallet]);\r\n\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) override public returns (bool success) {\r\n        require(canTransfer(msg.sender));\r\n        require(_value <= (balances[msg.sender] - timeLocks[msg.sender].lockedBalance));\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\r\n        require(canTransfer(_from));\r\n        require(_value <= (balances[_from] - timeLocks[msg.sender].lockedBalance));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        ItokenRecipient recipient = ItokenRecipient(_spender);\r\n        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\r\n        return true;\r\n    }\r\n    \r\n\r\n    function releaseTokens(address _account) public {\r\n        uint steps = (block.timestamp - timeLocks[_account].firstRelease) / (30 days);\r\n        if (steps >=20) {\r\n            timeLocks[_account].lockedBalance = 0;\r\n        } else {\r\n            timeLocks[_account].lockedBalance = timeLocks[_account].totalAmount - ((timeLocks[_account].totalAmount/20) * steps);\r\n        }\r\n    }\r\n    \r\n    function canTransfer(address _wallet) private returns (bool) {\r\n        require(checkTransferLimit() == true);\r\n        if (lockedWallets[_wallet] == true) {\r\n            if (block.timestamp > walletUnlockDate) {\r\n                lockedWallets[_wallet] = false;\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    \r\n    function checkTransferLimit() internal returns (bool txAllowed) {\r\n        address _caller = msg.sender;\r\n        if (isContract(_caller)) {\r\n            if (limitContracts == true && contractsWhiteList[_caller] == false) {\r\n                if (lastTXBlock[_caller] == block.number) {\r\n                    return false;\r\n                } else {\r\n                    lastTXBlock[_caller] = block.number;\r\n                    return true;\r\n                }\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function setLimitContracts(bool _limit) public onlyOwner {\r\n        limitContracts = _limit;\r\n    }\r\n    \r\n    function includeWhiteList(address _contractAddress) public onlyOwner {\r\n        contractsWhiteList[_contractAddress] = true;\r\n    }\r\n    \r\n    function removeWhiteList(address _contractAddress) public onlyOwner {\r\n        contractsWhiteList[_contractAddress] = false;\r\n    }\r\n    \r\n    function isWalletLocked(address _wallet) public view returns (bool isLocked) {\r\n        return lockedWallets[_wallet];\r\n    }\r\n    \r\n    function setPlatformWallet(address _platformWallet) public onlyOwner {\r\n        platformWallet = payable(_platformWallet);\r\n    }\r\n\r\n    function getLockedBalance(address _wallet) public view returns (uint256 lockedBalance) {\r\n        return timeLocks[_wallet].lockedBalance;\r\n    }\r\n    \r\n    // token sale\r\n\r\n    function buy() public payable {\r\n        require(((block.timestamp > PRIVATESALE_START) && (block.timestamp < PRIVATESALE_END)) || ((block.timestamp > CROWDSALE_START) && (block.timestamp < CROWDSALE_END)), \"Contract is not selling tokens\");\r\n        uint weiValue = msg.value;\r\n        require(weiValue >= (5 * (10 ** 16)));\r\n        bool lockAccount = false;\r\n        uint amount = 0;\r\n        if ((block.timestamp > PRIVATESALE_START) && (block.timestamp < PRIVATESALE_END)) {\r\n            amount = PSALE_WEI_FACTOR * weiValue;\r\n            soldOnPSale += amount;\r\n            require((soldOnPSale) <= (PSALE_HARDCAP), \"That quantity is not available\");\r\n        } else {\r\n            amount = CSALE_WEI_FACTOR * weiValue;\r\n            soldOnCSale += amount;\r\n            require((soldOnCSale) <= (CSALE_HARDCAP), \"That quantity is not available\");\r\n            lockAccount = true;\r\n        }\r\n\r\n        balances[salesWallet] = balances[salesWallet].sub(amount);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        if ( lockAccount == true) lockedWallets[msg.sender] = true;\r\n        require(salesWallet.send(weiValue));\r\n        emit Transfer(salesWallet, msg.sender, amount);\r\n        if (CSALE_HARDCAP == soldOnCSale && block.timestamp < 1615140000) {  // If hardcap is reached before 2021/03/07 18:00, change unlock dates\r\n            timeLocks[marketingWallet].firstRelease = block.timestamp - 30 days;\r\n        }\r\n\r\n    }\r\n    \r\n    function burnUnsold() public onlyOwner {\r\n        require(block.timestamp > CROWDSALE_END);\r\n        uint currentBalance = balances[salesWallet];\r\n        balances[salesWallet] = 0;\r\n        _totalSupply = _totalSupply.sub(currentBalance);\r\n        emit Burn(salesWallet, currentBalance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROWDSALE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CROWDSALE_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CSALE_HARDCAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CSALE_WEI_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATESALE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATESALE_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PSALE_HARDCAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PSALE_WEI_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnUnsold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractsWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"includeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isWalletLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTXBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limit\",\"type\":\"bool\"}],\"name\":\"setLimitContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformWallet\",\"type\":\"address\"}],\"name\":\"setPlatformWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldOnCSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldOnPSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"POLCToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d2d1e73dcd1fb863b5cd91ccaf8763878674e069d3ffa107fb03575b4a258fb2"}]}